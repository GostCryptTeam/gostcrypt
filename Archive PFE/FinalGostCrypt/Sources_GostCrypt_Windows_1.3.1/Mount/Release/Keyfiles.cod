; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Common\Keyfiles.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_HiddenFilesPresentInKeyfilePath
_BSS	SEGMENT
_HiddenFilesPresentInKeyfilePath DD 01H DUP (?)
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	__snprintf
PUBLIC	_KeyFileAdd
PUBLIC	_KeyFileRemoveAll
PUBLIC	_KeyFileClone
PUBLIC	_KeyFileCloneAll
PUBLIC	_KeyFilesApply
PUBLIC	_KeyFilesDlgProc@16
PUBLIC	_KeyfilesPopupMenu
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??1SecurityTokenInfo@GostCrypt@@QAE@XZ		; GostCrypt::SecurityTokenInfo::~SecurityTokenInfo
PUBLIC	??BSecurityTokenKeyfilePath@GostCrypt@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GostCrypt::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1SecurityTokenKeyfilePath@GostCrypt@@QAE@XZ	; GostCrypt::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath
PUBLIC	??1SecurityTokenKeyfile@GostCrypt@@QAE@XZ	; GostCrypt::SecurityTokenKeyfile::~SecurityTokenKeyfile
PUBLIC	??1Container@ForEach@GostCrypt@@UAE@XZ		; GostCrypt::ForEach::Container::~Container
PUBLIC	??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z	; GostCrypt::ForEach::Container::`scalar deleting destructor'
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
PUBLIC	??1?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::~_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
PUBLIC	??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
PUBLIC	??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
PUBLIC	?_Unchecked_erase@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Unchecked_erase
PUBLIC	?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
PUBLIC	??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::Next
PUBLIC	??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`scalar deleting destructor'
PUBLIC	??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >
PUBLIC	??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Buynode<GostCrypt::SecurityTokenKeyfilePath const &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7Container@ForEach@GostCrypt@@6B@		; GostCrypt::ForEach::Container::`vftable'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@	; `string'
PUBLIC	??_R0?AUException@GostCrypt@@@8			; GostCrypt::Exception `RTTI Type Descriptor'
PUBLIC	??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@		; `string'
PUBLIC	??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@ ; `string'
PUBLIC	??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@		; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@	; `string'
PUBLIC	??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`vftable'
PUBLIC	??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@		; `string'
PUBLIC	??_C@_07BGLJIIHG@KEYFILE?$AA@			; `string'
PUBLIC	??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@		; `string'
PUBLIC	??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@		; `string'
PUBLIC	??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@	; `string'
PUBLIC	??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@ ; `string'
PUBLIC	??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@		; `string'
PUBLIC	??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@	; `string'
PUBLIC	??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4Container@ForEach@GostCrypt@@6B@		; GostCrypt::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@GostCrypt@@@8		; GostCrypt::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@GostCrypt@@8		; GostCrypt::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@GostCrypt@@8		; GostCrypt::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8	; GostCrypt::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_memmove:PROC
EXTRN	_strcpy_s:PROC
EXTRN	__stat64i32:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileAttributesExA@12:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__VirtualLock@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__CreatePopupMenu@0:PROC
EXTRN	__imp__DestroyMenu@4:PROC
EXTRN	__imp__AppendMenuW@16:PROC
EXTRN	__imp__TrackPopupMenu@28:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__DragQueryFileA@16:PROC
EXTRN	__imp__DragFinish@4:PROC
EXTRN	__imp__DragAcceptFiles@8:PROC
EXTRN	_fclose:PROC
EXTRN	_ferror:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__findclose:PROC
EXTRN	__findfirst64i32:PROC
EXTRN	__findnext64i32:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_IsButtonChecked:PROC
EXTRN	_KeyfileGeneratorDlgProc@16:PROC
EXTRN	_BrowseDirectories:PROC
EXTRN	_LocalizeDialog:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	_Error:PROC
EXTRN	_ErrorDirect:PROC
EXTRN	_Extlink:PROC
EXTRN	_SelectMultipleFiles:PROC
EXTRN	_SelectMultipleFilesNext:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	_ToHyperlink:PROC
EXTRN	_SecurityTokenKeyfileDlgProc@16:PROC
EXTRN	_IsFileOnReadOnlyFilesystem:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; SingleStringToWide
EXTRN	?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:PROC ; WideToSingleString
EXTRN	_GetString:PROC
EXTRN	??0SecurityTokenKeyfile@GostCrypt@@QAE@ABUSecurityTokenKeyfilePath@1@@Z:PROC ; GostCrypt::SecurityTokenKeyfile::SecurityTokenKeyfile
EXTRN	?GetKeyfileData@SecurityToken@GostCrypt@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z:PROC ; GostCrypt::SecurityToken::GetKeyfileData
EXTRN	?IsKeyfilePathValid@SecurityToken@GostCrypt@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:PROC ; GostCrypt::SecurityToken::IsKeyfilePathValid
EXTRN	??_EContainer@ForEach@GostCrypt@@UAEPAXI@Z:PROC	; GostCrypt::ForEach::Container::`vector deleting destructor'
EXTRN	??_E?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z:PROC ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_crc_32_tab:BYTE
EXTRN	_MainDlg:DWORD
EXTRN	_bHistory:DWORD
EXTRN	_hInst:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?keyPool@?1??KeyFilesApply@@9@4PAEA
_BSS	SEGMENT
?keyPool@?1??KeyFilesApply@@9@4PAEA DB 040H DUP (?)	; `KeyFilesApply'::`2'::keyPool
_BSS	ENDS
;	COMDAT ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
_BSS	SEGMENT
?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A DD 01H DUP (?) ; `KeyFilesDlgProc'::`2'::param
_BSS	ENDS
;	COMDAT ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A
_BSS	SEGMENT
?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A DQ 01H DUP (?) ; `KeyFilesDlgProc'::`2'::origParam
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8 DD 00H ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@@8
data$r	SEGMENT
??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath'
	DB	'@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@'
	DB	'@@std@@@std@@@ForEach@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@ DD 00H ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8 DD FLAT:??_R0?AUContainer@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R2Container@ForEach@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R3Container@ForEach@GostCrypt@@8 DD 00H		; GostCrypt::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUContainer@ForEach@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4Container@ForEach@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@GostCrypt@@6B@ DD 00H		; GostCrypt::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@GostCrypt@@@8
	DD	FLAT:??_R3Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@
CONST	SEGMENT
??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@ DB 'IDC_TOKEN_FILES_ADD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@ DB 'IDC_ADD_KEYFILE_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@
CONST	SEGMENT
??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@ DB 'IDC_KEYADD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
CONST	SEGMENT
??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@ DB 'http://www'
	DB	'.gostcrypt.org/redirect.php?a=2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@ DB 'SELECT_KEYFILE_PATH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@
CONST	SEGMENT
??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@ DB 'SELECT_KEYFILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@
CONST	SEGMENT
??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@ DB 'KEYFILES_NOTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGLJIIHG@KEYFILE?$AA@
CONST	SEGMENT
??_C@_07BGLJIIHG@KEYFILE?$AA@ DB 'KEYFILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@
CONST	SEGMENT
??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@ DB 'IDD_KEYFILES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@
CONST	SEGMENT
??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@ DB 'ERR_KEYFILE_PATH_EMPTY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@
CONST	SEGMENT
??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@ DB '%s%c%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@
CONST	SEGMENT
??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@ DB 'ERR_PROCESS_KEYFILE_'
	DB	'PATH', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@
CONST	SEGMENT
??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@ DB '%s\*.*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0?AUException@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUException@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
CONST	SEGMENT
??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@ DB 'ERR_PROCESS_KEYFILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7Container@ForEach@GostCrypt@@6B@
CONST	SEGMENT
??_7Container@ForEach@GostCrypt@@6B@ DD FLAT:??_R4Container@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@GostCrypt@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z$0
__ehfuncinfo$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z$1
__ehfuncinfo$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z$2
__ehfuncinfo$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z$44 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z$0
__tryblocktable$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z$44
__unwindtable$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z$8
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$15 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$15
__ehfuncinfo$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z$1
__ehfuncinfo$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z$46 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z$46
__unwindtable$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$111 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$110 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$110
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$111
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$111 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$110 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$110
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$111
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_KeyFilesApply$313 DD 08H
	DD	FLAT:??_R0?AUException@GostCrypt@@@8
	DD	0fffff9d8H
	DD	FLAT:__catch$_KeyFilesApply$0
__tryblocktable$_KeyFilesApply DD 00H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$_KeyFilesApply$313
__ehfuncinfo$_KeyFilesApply DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$_KeyFilesApply
	DD	01H
	DD	FLAT:__tryblocktable$_KeyFilesApply
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_KeyFilesApply DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$2
	DD	01H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$3
	DD	00H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$4
	DD	03H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$5
	DD	04H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$6
	DD	05H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$7
	DD	06H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$8
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_KeyFilesApply$9
	DD	09H
	DD	FLAT:__unwindfunclet$_KeyFilesApply$10
	DD	0aH
	DD	FLAT:__unwindfunclet$_KeyFilesApply$11
	DD	0bH
	DD	FLAT:__unwindfunclet$_KeyFilesApply$12
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::construct<GostCrypt::SecurityTokenKeyfilePath,GostCrypt::SecurityTokenKeyfilePath const &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 1e		 je	 SHORT $LN3@construct
  00034	33 c0		 xor	 eax, eax
  00036	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
  0003d	6a ff		 push	 -1
  0003f	50		 push	 eax
  00040	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00043	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0004a	66 89 01	 mov	 WORD PTR [ecx], ax
  0004d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN3@construct:

; 738  : 		}

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::construct<GostCrypt::SecurityTokenKeyfilePath,GostCrypt::SecurityTokenKeyfilePath const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<GostCrypt::SecurityTokenKeyfilePath,GostCrypt::SecurityTokenKeyfilePath const &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 1e		 je	 SHORT $LN8@construct
  00034	33 c0		 xor	 eax, eax
  00036	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
  0003d	6a ff		 push	 -1
  0003f	50		 push	 eax
  00040	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00043	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0004a	66 89 01	 mov	 WORD PTR [ecx], ax
  0004d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN8@construct:

; 858  : 		}

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z$1:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@ABU34@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<GostCrypt::SecurityTokenKeyfilePath,GostCrypt::SecurityTokenKeyfilePath const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<GostCrypt::SecurityTokenKeyfilePath,GostCrypt::SecurityTokenKeyfilePath const &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 1e		 je	 SHORT $LN13@construct
  00034	33 c0		 xor	 eax, eax
  00036	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
  0003d	6a ff		 push	 -1
  0003f	50		 push	 eax
  00040	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00043	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0004a	66 89 01	 mov	 WORD PTR [ecx], ax
  0004d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@USecurityTokenKeyfilePath@GostCrypt@@ABU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@ABU23@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<GostCrypt::SecurityTokenKeyfilePath,GostCrypt::SecurityTokenKeyfilePath const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T3 = 8							; size = 4
__Next$ = 8						; size = 4
__Pnode$ = 12						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z PROC ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Buynode<GostCrypt::SecurityTokenKeyfilePath const &>, COMDAT
; _this$ = ecx

; 831  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 832  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  0002b	ff 75 0c	 push	 DWORD PTR __Prev$[ebp]
  0002e	ff 75 08	 push	 DWORD PTR __Next$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00036	8b f0		 mov	 esi, eax

; 833  : 
; 834  : 		_TRY_BEGIN

  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003f	89 75 0c	 mov	 DWORD PTR __Pnode$[ebp], esi

; 835  : 		this->_Getal().construct(

  00042	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00045	89 4d 08	 mov	 DWORD PTR $T3[ebp], ecx
  00048	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004f	85 c9		 test	 ecx, ecx
  00051	74 2a		 je	 SHORT $LN36@Buynode
  00053	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
  0005a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00061	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00065	72 04		 jb	 SHORT $LN167@Buynode
  00067	8b 01		 mov	 eax, DWORD PTR [ecx]
  00069	eb 02		 jmp	 SHORT $LN168@Buynode
$LN167@Buynode:
  0006b	8b c1		 mov	 eax, ecx
$LN168@Buynode:
  0006d	33 d2		 xor	 edx, edx
  0006f	6a ff		 push	 -1
  00071	52		 push	 edx
  00072	ff 75 10	 push	 DWORD PTR _<_Val_0>$[ebp]
  00075	66 89 10	 mov	 WORD PTR [eax], dx
  00078	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN36@Buynode:

; 841  : 		_CATCH_END
; 842  : 
; 843  : 		return (_Pnode);

  0007d	8b c6		 mov	 eax, esi

; 844  : 		}

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z$0:

; 836  : 			_STD addressof(this->_Myval(_Pnode)),
; 837  : 				_STD forward<_Valty>(_Val)...);
; 838  : 		_CATCH_ALL
; 839  : 		this->_Getal().deallocate(_Pnode, 1);

  00093	ff 75 0c	 push	 DWORD PTR __Pnode$[ebp]
  00096	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009b	83 c4 04	 add	 esp, 4

; 840  : 		_RERAISE;

  0009e	6a 00		 push	 0
  000a0	6a 00		 push	 0
  000a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN197@Buynode:
$LN196@Buynode:
  000a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z$8:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T3[ebp]
  00003	50		 push	 eax
  00004	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z ENDP ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Buynode<GostCrypt::SecurityTokenKeyfilePath const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUSecurityTokenKeyfilePath@GostCrypt@@@std@@YAABUSecurityTokenKeyfilePath@GostCrypt@@ABU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSecurityTokenKeyfilePath@GostCrypt@@@std@@YAABUSecurityTokenKeyfilePath@GostCrypt@@ABU12@@Z PROC ; std::forward<GostCrypt::SecurityTokenKeyfilePath const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUSecurityTokenKeyfilePath@GostCrypt@@@std@@YAABUSecurityTokenKeyfilePath@GostCrypt@@ABU12@@Z ENDP ; std::forward<GostCrypt::SecurityTokenKeyfilePath const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@ABUSecurityTokenKeyfilePath@GostCrypt@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@ABUSecurityTokenKeyfilePath@GostCrypt@@@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert<GostCrypt::SecurityTokenKeyfilePath const &>, COMDAT
; _this$ = ecx

; 1061 : 		{	// insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1062 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1063 : 		_Nodeptr _Newnode =
; 1064 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Buynode<GostCrypt::SecurityTokenKeyfilePath const &>
  00016	8b d0		 mov	 edx, eax

; 1065 : 				_STD forward<_Valty>(_Val)...);
; 1066 : 		_Incsize(1);

  00018	b9 fe ff ff 07	 mov	 ecx, 134217726		; 07fffffeH
  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	2b c8		 sub	 ecx, eax
  00022	83 f9 01	 cmp	 ecx, 1
  00025	72 12		 jb	 SHORT $LN65@Insert
  00027	40		 inc	 eax
  00028	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1067 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1068 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	89 10		 mov	 DWORD PTR [eax], edx

; 1069 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN65@Insert:

; 1065 : 				_STD forward<_Valty>(_Val)...);
; 1066 : 		_Incsize(1);

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@Insert:
$LN64@Insert:
  00043	cc		 int	 3
??$_Insert@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@ABUSecurityTokenKeyfilePath@GostCrypt@@@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert<GostCrypt::SecurityTokenKeyfilePath const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1><std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > > >, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 290  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c2 08 00	 ret	 8
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1><std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >, COMDAT
; _this$ = ecx

; 1426 : 		{	// insert [_First, _Last) at _Where, forward iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 1427 : 		_DEBUG_RANGE(_First, _Last);
; 1428 : 		_Iter _Next = _First;

  00030	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00033	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 1429 : 
; 1430 : 		_TRY_BEGIN

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003d	0f 1f 00	 npad	 3
$LL4@Insert_ran:

; 1431 : 		for (; _First != _Last; ++_First)

  00040	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00043	74 6b		 je	 SHORT $LN3@Insert_ran

; 1432 : 			_Insert(_Where, *_First);

  00045	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00048	83 c0 08	 add	 eax, 8
  0004b	50		 push	 eax
  0004c	8b cf		 mov	 ecx, edi
  0004e	ff 76 04	 push	 DWORD PTR [esi+4]
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??$_Buynode@ABUSecurityTokenKeyfilePath@GostCrypt@@@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PAU21@0ABUSecurityTokenKeyfilePath@GostCrypt@@@Z ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Buynode<GostCrypt::SecurityTokenKeyfilePath const &>
  00057	8b d0		 mov	 edx, eax
  00059	b9 fe ff ff 07	 mov	 ecx, 134217726		; 07fffffeH
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	2b c8		 sub	 ecx, eax
  00063	83 f9 01	 cmp	 ecx, 1
  00066	73 0a		 jae	 SHORT $LN38@Insert_ran
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0006d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN111@Insert_ran:
$LN38@Insert_ran:
  00072	40		 inc	 eax
  00073	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00076	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00079	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007c	89 10		 mov	 DWORD PTR [eax], edx
  0007e	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00081	8b 00		 mov	 eax, DWORD PTR [eax]
  00083	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  00086	eb b8		 jmp	 SHORT $LL4@Insert_ran
__catch$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$0:

; 1433 : 		_CATCH_ALL
; 1434 : 		for (; _Next != _First; ++_Next)

  00088	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0008b	3b 75 0c	 cmp	 esi, DWORD PTR __First$[ebp]
  0008e	74 17		 je	 SHORT $LN6@Insert_ran
  00090	8b 7d e8	 mov	 edi, DWORD PTR _this$[ebp]
$LL7@Insert_ran:

; 1435 : 			{	// undo inserts
; 1436 : 			_Unchecked_const_iterator _Before = _Where;
; 1437 : 			_Unchecked_erase(--_Before);

  00093	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00096	8b cf		 mov	 ecx, edi
  00098	ff 70 04	 push	 DWORD PTR [eax+4]
  0009b	e8 00 00 00 00	 call	 ?_Unchecked_erase@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Unchecked_erase
  000a0	8b 36		 mov	 esi, DWORD PTR [esi]
  000a2	3b 75 0c	 cmp	 esi, DWORD PTR __First$[ebp]
  000a5	75 ec		 jne	 SHORT $LL7@Insert_ran
$LN6@Insert_ran:

; 1438 : 			}
; 1439 : 		_RERAISE;

  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@Insert_ran:
$LN3@Insert_ran:

; 1440 : 		_CATCH_END
; 1441 : 		}

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 10 00	 ret	 16			; 00000010H
$LN110@Insert_ran:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@X@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@X@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > ><std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,void>, COMDAT
; _this$ = ecx

; 611  : 		{	// construct head node, allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 612  : 		_Myhead() = _Buyheadnode();

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 613  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@X@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > ><std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::construct<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *,std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::construct<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *,std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::destroy<GostCrypt::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 743  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 744  : 		_Ptr->~_Uty();

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000a	83 f8 08	 cmp	 eax, 8
  0000d	72 0b		 jb	 SHORT $LN16@destroy
  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN16@destroy:
  0001a	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00021	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00025	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002c	72 0c		 jb	 SHORT $LN106@destroy
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	33 c9		 xor	 ecx, ecx
  00032	5e		 pop	 esi
  00033	66 89 08	 mov	 WORD PTR [eax], cx

; 745  : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4

; 744  : 		_Ptr->~_Uty();

$LN106@destroy:
  0003a	33 c0		 xor	 eax, eax
  0003c	66 89 06	 mov	 WORD PTR [esi], ax
  0003f	5e		 pop	 esi

; 745  : 		}

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::destroy<GostCrypt::SecurityTokenKeyfilePath>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::destroy<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::destroy<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > ><std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > ><std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
$T2 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@00@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >, COMDAT
; _this$ = ecx

; 1382 : 		{	// insert [_First, _Last) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1383 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1384 : 		if (_Where._Getcont() != &this->_Get_data())
; 1385 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1386 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1387 : 
; 1388 : 		iterator _Prev = _Make_iter(_Where);
; 1389 : 		if (_Prev == begin())

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 1390 : 			{	// insert sequence at beginning
; 1391 : 			_Insert_range(_Where._Unchecked(), _First, _Last,

  0000a	c6 45 fc 00	 mov	 BYTE PTR $T2[ebp], 0
  0000e	8b 17		 mov	 edx, DWORD PTR [edi]
  00010	3b 02		 cmp	 eax, DWORD PTR [edx]
  00012	75 1f		 jne	 SHORT $LN2@insert
  00014	ff 75 fc	 push	 DWORD PTR $T2[ebp]
  00017	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  0001a	ff 75 10	 push	 DWORD PTR __First$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >

; 1392 : 				_Iter_cat_t<_Iter>());
; 1393 : 			return (begin());

  00023	8b 07		 mov	 eax, DWORD PTR [edi]
  00025	5f		 pop	 edi
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1399 : 				_Iter_cat_t<_Iter>());
; 1400 : 			return (++_Prev);

  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 1401 : 			}
; 1402 : 		}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
$LN2@insert:
  00033	56		 push	 esi

; 1394 : 			}
; 1395 : 		else
; 1396 : 			{	// insert sequence not at beginning
; 1397 : 			--_Prev;
; 1398 : 			_Insert_range(_Where._Unchecked(), _First, _Last,

  00034	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  00037	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0003a	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  0003d	ff 75 10	 push	 DWORD PTR __First$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >

; 1399 : 				_Iter_cat_t<_Iter>());
; 1400 : 			return (++_Prev);

  00046	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00049	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004b	5e		 pop	 esi
  0004c	5f		 pop	 edi
  0004d	89 08		 mov	 DWORD PTR [eax], ecx

; 1401 : 			}
; 1402 : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@00@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator--, COMDAT
; _this$ = ecx

; 389  : 		--(*(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 390  : 		return (*this);

  00007	8b c1		 mov	 eax, ecx

; 391  : 		}

  00009	c3		 ret	 0
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator++, COMDAT
; _this$ = ecx

; 376  : 		++(*(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 377  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 378  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 348  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 347  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 349  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::_List_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@X@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@X@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z PROC ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> ><std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,void>, COMDAT
; _this$ = ecx

; 825  : 		{	// construct from allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00020	89 06		 mov	 DWORD PTR [esi], eax

; 826  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@X@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@1@@Z ENDP ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> ><std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *,std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *,std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@YAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@YAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@YAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<GostCrypt::SecurityTokenKeyfilePath>, COMDAT

; 863  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 864  : 		_Al.destroy(_Ptr);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000a	83 f8 08	 cmp	 eax, 8
  0000d	72 0b		 jb	 SHORT $LN18@destroy
  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN18@destroy:
  0001a	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00021	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00025	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002c	72 0a		 jb	 SHORT $LN108@destroy
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	33 c9		 xor	 ecx, ecx
  00032	5e		 pop	 esi
  00033	66 89 08	 mov	 WORD PTR [eax], cx

; 865  : 		}

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0

; 864  : 		_Al.destroy(_Ptr);

$LN108@destroy:
  00038	33 c0		 xor	 eax, eax
  0003a	66 89 06	 mov	 WORD PTR [esi], ax
  0003d	5e		 pop	 esi

; 865  : 		}

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAUSecurityTokenKeyfilePath@GostCrypt@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<GostCrypt::SecurityTokenKeyfilePath>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@E@std@@PAE@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@E@std@@PAE@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<unsigned char>,unsigned char *>, COMDAT

; 1108 : 		// nothing to do
; 1109 : 	}

  00000	c3		 ret	 0
??$_Destroy_range1@V?$allocator@E@std@@PAE@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<unsigned char>,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@1@PAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z PROC ; std::forward<std::allocator<wchar_t> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ENDP ; std::forward<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 290  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 08 00	 ret	 8
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *,std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::construct<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *,std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<GostCrypt::SecurityTokenKeyfilePath>, COMDAT
; _this$ = ecx

; 1002 : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000a	83 f8 08	 cmp	 eax, 8
  0000d	72 0b		 jb	 SHORT $LN20@destroy
  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN20@destroy:
  0001a	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00021	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00025	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002c	72 0c		 jb	 SHORT $LN110@destroy
  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	33 c9		 xor	 ecx, ecx
  00032	5e		 pop	 esi
  00033	66 89 08	 mov	 WORD PTR [eax], cx

; 1004 : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

$LN110@destroy:
  0003a	33 c0		 xor	 eax, eax
  0003c	66 89 06	 mov	 WORD PTR [esi], ax
  0003f	5e		 pop	 esi

; 1004 : 		}

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??$destroy@USecurityTokenKeyfilePath@GostCrypt@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAUSecurityTokenKeyfilePath@GostCrypt@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<GostCrypt::SecurityTokenKeyfilePath>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@USecurityTokenKeyfilePath@GostCrypt@@@std@@YAPAUSecurityTokenKeyfilePath@GostCrypt@@AAU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@USecurityTokenKeyfilePath@GostCrypt@@@std@@YAPAUSecurityTokenKeyfilePath@GostCrypt@@AAU12@@Z PROC ; std::addressof<GostCrypt::SecurityTokenKeyfilePath>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@USecurityTokenKeyfilePath@GostCrypt@@@std@@YAPAUSecurityTokenKeyfilePath@GostCrypt@@AAU12@@Z ENDP ; std::addressof<GostCrypt::SecurityTokenKeyfilePath>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@PAE@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@E@std@@PAE@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char>,unsigned char *>, COMDAT

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<
; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@PAE@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char>,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 281  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::destroy<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@YAPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@YAPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@YAPAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 740  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 740  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 281  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 281  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 281  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>, COMDAT
; _this$ = ecx

; 595  : 		: _Mypair(_One_then_variadic_args_t(),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 598  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator*, COMDAT
; _this$ = ecx

; 331  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 332  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >, COMDAT
; _this$ = ecx

; 313  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 312  : 		: _Mybase(_Parg, _Pvector)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 314  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 68   : 		if (_Mycont == 0
; 69   : 			|| _Ptr == _Tptr()
; 70   : 			|| _Ptr < _Mycont->_Myfirst
; 71   : 			|| _Mycont->_Mylast <= _Ptr)
; 72   : 			{	// report error
; 73   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 74   : 			_SCL_SECURE_OUT_OF_RANGE;
; 75   : 			}
; 76   : 
; 77   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 78   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 79   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 80   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 81   : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT

; 95   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00003	8b 45 08	 mov	 eax, DWORD PTR _forEachContainer$[ebp]

; 97   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$?BV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@12@XZ PROC ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > > GostCrypt::ForEach::TypeWrapper<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
??$?BV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@12@XZ ENDP ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > > GostCrypt::ForEach::TypeWrapper<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z PROC ; GostCrypt::ForEach::ToTypeWrapper<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8a 45 ff	 mov	 al, BYTE PTR $T1[ebp]
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$ToTypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z ENDP ; GostCrypt::ForEach::ToTypeWrapper<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z PROC ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0000a	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
  0000f	ff 77 08	 push	 DWORD PTR [edi+8]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
  0001a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00020	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00024	74 0b		 je	 SHORT $LN84@scalar
  00026	6a 18		 push	 24			; 00000018H
  00028	57		 push	 edi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8
$LN84@scalar:
  00031	8b c7		 mov	 eax, edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ PROC ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::~ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00007	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
  0000c	ff 77 08	 push	 DWORD PTR [edi+8]
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	83 c4 04	 add	 esp, 4
  00017	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	c3		 ret	 0
??1?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ ENDP ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::~ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator!=, COMDAT
; _this$ = ecx

; 305  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 306  : 		return (!(*this == _Right));
; 307  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator==, COMDAT
; _this$ = ecx

; 289  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 290  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 291  : 		if (this->_Getcont() != _Right._Getcont())
; 292  : 			{	// report error
; 293  : 			_DEBUG_ERROR("list iterators incompatible");
; 294  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 295  : 			}
; 296  : 
; 297  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 298  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 299  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 300  : 
; 301  : 		return (this->_Ptr == _Right._Ptr);
; 302  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator--, COMDAT
; _this$ = ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 259  : 		if (_Mycont == 0
; 260  : 			|| this->_Ptr == nullptr_t{}
; 261  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr)) == _Mycont->_Myhead)
; 262  : 			{	// report error
; 263  : 			_DEBUG_ERROR("list iterator not decrementable");
; 264  : 			_SCL_SECURE_OUT_OF_RANGE;
; 265  : 			}
; 266  : 
; 267  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 268  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 269  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 270  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 271  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 272  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 273  : 
; 274  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 275  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 277  : 
; 278  : 		return (*this);

  00007	8b c1		 mov	 eax, ecx

; 279  : 		}

  00009	c3		 ret	 0
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator++, COMDAT
; _this$ = ecx

; 227  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 228  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 229  : 		if (_Mycont == 0
; 230  : 			|| this->_Ptr == nullptr_t{}
; 231  : 			|| this->_Ptr == _Mycont->_Myhead)
; 232  : 			{	// report error
; 233  : 			_DEBUG_ERROR("list iterator not incrementable");
; 234  : 			_SCL_SECURE_OUT_OF_RANGE;
; 235  : 			}
; 236  : 
; 237  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 238  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 239  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 240  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 241  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 242  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 243  : 
; 244  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 245  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 246  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@GostCrypt@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@GostCrypt@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator*, COMDAT
; _this$ = ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 207  : 		if (_Mycont == 0
; 208  : 			|| this->_Ptr == nullptr_t{}
; 209  : 			|| this->_Ptr == _Mycont->_Myhead)
; 210  : 			{	// report error
; 211  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 212  : 			_SCL_SECURE_OUT_OF_RANGE;
; 213  : 			}
; 214  : 
; 215  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 216  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 217  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 218  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 219  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 220  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 221  : 
; 222  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 223  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABUSecurityTokenKeyfilePath@GostCrypt@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::_Unchecked, COMDAT
; _this$ = ecx

; 199  : 		{	// make an unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 		return (_Unchecked_type(this->_Ptr, static_cast<const _Mylist *>(this->_Getcont())));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 188  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 96   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 97   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 74   : 		return (*this);

  00007	8b c1		 mov	 eax, ecx

; 75   : 		}

  00009	c3		 ret	 0
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ PROC ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00008	c3		 ret	 0
?Next@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::Next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ PROC ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00004	74 0f		 je	 SHORT $LN3@IsNotEnd
  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0000c	74 07		 je	 SHORT $LN3@IsNotEnd
  0000e	b0 01		 mov	 al, 1
  00010	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00014	c3		 ret	 0
$LN3@IsNotEnd:
  00015	32 c0		 xor	 al, al
  00017	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0001a	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::IsNotEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z PROC ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00030	ff 75 08	 push	 DWORD PTR _container$[ebp]
  00033	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@
  00043	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
  00048	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004b	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0004e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00056	8b c7		 mov	 eax, edi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::ContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT

; 69   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 70   : 			return ContainerForward <T> (container);

  00025	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00035	ff 75 0c	 push	 DWORD PTR _container$[ebp]
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
  0004d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00050	8b c7		 mov	 eax, edi
  00052	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00055	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 71   : 		}

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Incsize@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXI@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Incsize, COMDAT
; _this$ = ecx

; 1906 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1907 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	b8 fe ff ff 07	 mov	 eax, 134217726		; 07fffffeH
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  0000f	2b c2		 sub	 eax, edx
  00011	3b c6		 cmp	 eax, esi
  00013	72 0b		 jb	 SHORT $LN41@Incsize

; 1909 : 		this->_Mysize() += _Count;

  00015	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00018	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0001b	5e		 pop	 esi

; 1910 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN41@Incsize:

; 1908 : 			_Xlength_error("list<T> too long");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@Incsize:
$LN40@Incsize:
  0002a	cc		 int	 3
?_Incsize@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXI@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Tidy@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Tidy, COMDAT
; _this$ = ecx

; 1884 : 		clear();

  00000	e9 00 00 00 00	 jmp	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
?_Tidy@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear, COMDAT
; _this$ = ecx

; 1500 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1501 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1502 : 
; 1503 : 		this->_Orphan_ptr(nullptr);
; 1504 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1505 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	8b 38		 mov	 edi, DWORD PTR [eax]

; 1506 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  0000c	89 00		 mov	 DWORD PTR [eax], eax

; 1507 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1508 : 		this->_Mysize() = 0;

  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1509 : 
; 1510 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0001a	3b 39		 cmp	 edi, DWORD PTR [ecx]
  0001c	74 74		 je	 SHORT $LN299@clear
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
$LL4@clear:

; 1511 : 			{	// delete an element
; 1512 : 			_Pnext = this->_Nextnode(_Pnode);
; 1513 : 			this->_Freenode(_Pnode);

  00020	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00023	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00026	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00028	83 f8 08	 cmp	 eax, 8
  0002b	72 36		 jb	 SHORT $LN227@clear
  0002d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002f	40		 inc	 eax
  00030	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00035	77 60		 ja	 SHORT $LN303@clear
  00037	03 c0		 add	 eax, eax
  00039	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0003e	72 1a		 jb	 SHORT $LN222@clear
  00040	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00043	75 52		 jne	 SHORT $LN303@clear
  00045	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00048	3b c1		 cmp	 eax, ecx
  0004a	73 4b		 jae	 SHORT $LN303@clear
  0004c	2b c8		 sub	 ecx, eax
  0004e	83 f9 04	 cmp	 ecx, 4
  00051	72 44		 jb	 SHORT $LN303@clear
  00053	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00056	77 3f		 ja	 SHORT $LN303@clear
  00058	8b c8		 mov	 ecx, eax
$LN222@clear:
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
$LN227@clear:
  00063	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0006a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0006e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00075	72 02		 jb	 SHORT $LN250@clear
  00077	8b 36		 mov	 esi, DWORD PTR [esi]
$LN250@clear:
  00079	33 c0		 xor	 eax, eax
  0007b	57		 push	 edi
  0007c	66 89 06	 mov	 WORD PTR [esi], ax
  0007f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00087	83 c4 04	 add	 esp, 4
  0008a	8b fb		 mov	 edi, ebx
  0008c	3b 18		 cmp	 ebx, DWORD PTR [eax]
  0008e	75 90		 jne	 SHORT $LL4@clear
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
$LN299@clear:
  00092	5f		 pop	 edi

; 1514 : 			}
; 1515 : 		}

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
$LN303@clear:

; 1511 : 			{	// delete an element
; 1512 : 			_Pnext = this->_Nextnode(_Pnode);
; 1513 : 			this->_Freenode(_Pnode);

  00097	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN304@clear:
$LN302@clear:
  0009c	cc		 int	 3
?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked_erase@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
?_Unchecked_erase@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Unchecked_erase, COMDAT
; _this$ = ecx

; 1473 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1474 : 		_Nodeptr _Pnode = _Where._Mynode();

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Where$[ebp]
  00009	8b d9		 mov	 ebx, ecx

; 1475 : 
; 1476 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1477 : 			this->_Nextnode(_Pnode);
; 1478 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1479 : 			this->_Prevnode(_Pnode);
; 1480 : 		this->_Freenode(_Pnode);

  0000b	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  0000e	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	89 02		 mov	 DWORD PTR [edx], eax
  00015	8b 17		 mov	 edx, DWORD PTR [edi]
  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00020	83 f8 08	 cmp	 eax, 8
  00023	72 0b		 jb	 SHORT $LN89@Unchecked_
  00025	40		 inc	 eax
  00026	8b ce		 mov	 ecx, esi
  00028	50		 push	 eax
  00029	ff 36		 push	 DWORD PTR [esi]
  0002b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN89@Unchecked_:
  00030	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00037	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0003b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00042	72 02		 jb	 SHORT $LN179@Unchecked_
  00044	8b 36		 mov	 esi, DWORD PTR [esi]
$LN179@Unchecked_:
  00046	33 c0		 xor	 eax, eax
  00048	57		 push	 edi
  00049	66 89 06	 mov	 WORD PTR [esi], ax
  0004c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00051	83 c4 04	 add	 esp, 4

; 1481 : 		--this->_Mysize();

  00054	ff 4b 04	 dec	 DWORD PTR [ebx+4]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1482 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?_Unchecked_erase@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Unchecked_erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?max_size@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBEIXZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::max_size, COMDAT
; _this$ = ecx

; 1247 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1248 : 		}

  00005	c3		 ret	 0
?max_size@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBEIXZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Make_iter, COMDAT
; _this$ = ecx

; 1163 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1164 : 		return (iterator(_Where._Ptr, &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1165 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?end@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::end, COMDAT
; _this$ = ecx

; 1135 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1136 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1137 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?begin@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::begin, COMDAT
; _this$ = ecx

; 1124 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1125 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1126 : 			&this->_Get_data()));
; 1127 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?begin@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::begin, COMDAT
; _this$ = ecx

; 1118 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1119 : 		return (iterator(this->_Nextnode(this->_Myhead()),

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1120 : 			&this->_Get_data()));
; 1121 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@2@XZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::~list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 1097 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1098 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear

; 1099 : 		}

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
  00012	5e		 pop	 esi
  00013	c3		 ret	 0
??1?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::~list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T2 = 8							; size = 1
__Right$ = 8						; size = 4
??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 924  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 921  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())

  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00041	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00046	89 06		 mov	 DWORD PTR [esi], eax

; 925  : 		_TRY_BEGIN
; 926  : 		insert(begin(), _Right.begin(), _Right.end());

  00048	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
  0004d	c6 45 08 00	 mov	 BYTE PTR $T2[ebp], 0
  00051	ff 75 08	 push	 DWORD PTR $T2[ebp]
  00054	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00056	51		 push	 ecx
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0005e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	8b ce		 mov	 ecx, esi
  00066	52		 push	 edx
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> > > >

; 930  : 		_CATCH_END
; 931  : 		}

  0006d	8b c6		 mov	 eax, esi
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
__catch$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z$0:

; 927  : 		_CATCH_ALL
; 928  : 		_Tidy();

  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear

; 929  : 		_RERAISE;

  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN248@list:
$LN247@list:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ PROC ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 893  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00020	89 06		 mov	 DWORD PTR [esi], eax

; 894  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ENDP ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::~_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx
  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::~_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z PROC ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Freenode, COMDAT
; _this$ = ecx

; 848  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 853  : 		this->_Getal().destroy(

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Pnode$[ebp]
  00008	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0000b	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  0000e	83 f8 08	 cmp	 eax, 8
  00011	72 0b		 jb	 SHORT $LN61@Freenode
  00013	40		 inc	 eax
  00014	8b ce		 mov	 ecx, esi
  00016	50		 push	 eax
  00017	ff 36		 push	 DWORD PTR [esi]
  00019	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN61@Freenode:
  0001e	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00025	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00029	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00030	72 02		 jb	 SHORT $LN151@Freenode
  00032	8b 36		 mov	 esi, DWORD PTR [esi]
$LN151@Freenode:
  00034	33 c0		 xor	 eax, eax

; 854  : 			_STD addressof(this->_Myval(_Pnode)));
; 855  : 		this->_Getal().deallocate(_Pnode, 1);

  00036	57		 push	 edi
  00037	66 89 06	 mov	 WORD PTR [esi], ax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003f	83 c4 04	 add	 esp, 4
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 856  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z ENDP ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 818  : 		{	// default construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00020	89 06		 mov	 DWORD PTR [esi], eax

; 819  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$_List_buy@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::_List_buy<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >,std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAUSecurityTokenKeyfilePath@GostCrypt@@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAUSecurityTokenKeyfilePath@GostCrypt@@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_Myval, COMDAT

; 545  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 546  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 547  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAUSecurityTokenKeyfilePath@GostCrypt@@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_Prevnode, COMDAT

; 540  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 542  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_Nextnode, COMDAT

; 535  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 537  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >, COMDAT
; _this$ = ecx

; 529  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 532  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >::_List_val<std::_List_simple_types<GostCrypt::SecurityTokenKeyfilePath> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAIXZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Mysize, COMDAT
; _this$ = ecx

; 792  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 793  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABQAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABQAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Myhead, COMDAT
; _this$ = ecx

; 787  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 788  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABQAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Myhead, COMDAT
; _this$ = ecx

; 782  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 783  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Get_data, COMDAT
; _this$ = ecx

; 777  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 778  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Get_data, COMDAT
; _this$ = ecx

; 772  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 773  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@USecurityTokenKeyfilePath@GostCrypt@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Getal, COMDAT
; _this$ = ecx

; 767  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 768  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Getal, COMDAT
; _this$ = ecx

; 762  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 763  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0, COMDAT
; _this$ = ecx

; 729  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00003	6a 20		 push	 32			; 00000020H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 1f		 je	 SHORT $LN117@Buynode0

; 731  : 
; 732  : 		if (_Next == _Nodeptr())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  00014	85 c9		 test	 ecx, ecx
  00016	75 06		 jne	 SHORT $LN115@Buynode0

; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;

  00018	8b c8		 mov	 ecx, eax

; 735  : 			_Prev = _Pnode;

  0001a	8b d0		 mov	 edx, eax
  0001c	eb 03		 jmp	 SHORT $LN2@Buynode0
$LN115@Buynode0:
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Prev$[ebp]
$LN2@Buynode0:

; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(

  00021	89 08		 mov	 DWORD PTR [eax], ecx

; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(

  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00026	85 c9		 test	 ecx, ecx
  00028	74 02		 je	 SHORT $LN4@Buynode0
  0002a	89 11		 mov	 DWORD PTR [ecx], edx
$LN4@Buynode0:

; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN117@Buynode0:

; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN119@Buynode0:
$LN116@Buynode0:
  00035	cc		 int	 3
?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 719  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 725  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0

; 716  : 		}

  00009	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::~_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 617  : 		_Freeheadnode(_Myhead());

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 618  : 		}

  00008	c3		 ret	 0
??1?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::~_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >, COMDAT
; _this$ = ecx

; 602  : 		{	// default construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 603  : 		_Myhead() = _Buyheadnode();

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 604  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c3		 ret	 0
??0?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAUSecurityTokenKeyfilePath@GostCrypt@@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAUSecurityTokenKeyfilePath@GostCrypt@@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Myval, COMDAT

; 595  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 596  : 		return (_List_val<_Val_types>::_Myval(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 597  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAUSecurityTokenKeyfilePath@GostCrypt@@PAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Prevnode, COMDAT

; 590  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 591  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 592  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Nextnode, COMDAT

; 585  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 587  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@SAAAPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1009 : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 988  : 		}

  00003	5d		 pop	 ebp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		}

  00003	5d		 pop	 ebp

; 976  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >, COMDAT
; _this$ = ecx

; 947  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 870  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 750  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate
  00015	c1 e0 05	 shl	 eax, 5
  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate
  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate
  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4
  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:
  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:
  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:
  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:
  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	81 f9 ff ff ff
	07		 cmp	 ecx, 134217727		; 07ffffffH
  0000f	77 31		 ja	 SHORT $LN13@deallocate
  00011	c1 e1 05	 shl	 ecx, 5
  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 19		 jb	 SHORT $LN5@deallocate
  0001c	a8 1f		 test	 al, 31			; 0000001fH
  0001e	75 27		 jne	 SHORT $LN15@deallocate
  00020	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00023	3b c8		 cmp	 ecx, eax
  00025	73 25		 jae	 SHORT $LN16@deallocate
  00027	2b c1		 sub	 eax, ecx
  00029	83 f8 04	 cmp	 eax, 4
  0002c	72 23		 jb	 SHORT $LN17@deallocate
  0002e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00031	77 23		 ja	 SHORT $LN18@deallocate
  00033	8b c1		 mov	 eax, ecx
$LN5@deallocate:
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4

; 721  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:
  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:
  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005b	cc		 int	 3
?deallocate@?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAEXPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >::allocator<std::_List_node<GostCrypt::SecurityTokenKeyfilePath,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z
_TEXT	SEGMENT
_LvItem$ = -60						; size = 52
_hList$1$ = -8						; size = 4
_line$1$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_firstKeyFile$ = 12					; size = 4
?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z PROC	; LoadKeyList, COMDAT

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	53		 push	 ebx

; 489  : 	KeyFile *kf;
; 490  : 	LVITEM LvItem;
; 491  : 	int line = 0;
; 492  : 	HWND hList = GetDlgItem (hwndDlg, IDC_KEYLIST);

  00007	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00011	57		 push	 edi
  00012	68 b4 13 00 00	 push	 5044			; 000013b4H
  00017	56		 push	 esi
  00018	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _line$1$[ebp], 0
  0001f	ff d3		 call	 ebx

; 493  : 
; 494  : 	ListView_DeleteAllItems (hList);

  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	68 09 10 00 00	 push	 4105			; 00001009H
  0002a	50		 push	 eax
  0002b	89 45 f8	 mov	 DWORD PTR _hList$1$[ebp], eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 495  : 	EnableWindow (GetDlgItem (hwndDlg, IDC_KEYREMOVE), FALSE);

  00034	6a 00		 push	 0
  00036	68 c3 13 00 00	 push	 5059			; 000013c3H
  0003b	56		 push	 esi
  0003c	ff d3		 call	 ebx
  0003e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__EnableWindow@8
  00044	50		 push	 eax
  00045	ff d7		 call	 edi

; 496  : 	EnableWindow (GetDlgItem (hwndDlg, IDC_KEYREMOVEALL), firstKeyFile != NULL);

  00047	8b 75 0c	 mov	 esi, DWORD PTR _firstKeyFile$[ebp]
  0004a	33 db		 xor	 ebx, ebx
  0004c	85 f6		 test	 esi, esi
  0004e	0f 95 c3	 setne	 bl
  00051	53		 push	 ebx
  00052	68 c4 13 00 00	 push	 5060			; 000013c4H
  00057	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00060	50		 push	 eax
  00061	ff d7		 call	 edi

; 497  : 	SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, firstKeyFile != NULL);

  00063	53		 push	 ebx
  00064	68 c5 13 00 00	 push	 5061			; 000013c5H
  00069	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0006c	e8 00 00 00 00	 call	 _SetCheckBox
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 498  : 
; 499  : 	for (kf = firstKeyFile; kf != NULL; kf = kf->Next)

  00074	85 f6		 test	 esi, esi
  00076	74 4f		 je	 SHORT $LN3@LoadKeyLis
  00078	8b 7d f8	 mov	 edi, DWORD PTR _hList$1$[ebp]
  0007b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
$LL4@LoadKeyLis:

; 500  : 	{
; 501  : 		memset (&LvItem,0,sizeof(LvItem));

  00081	6a 34		 push	 52			; 00000034H
  00083	8d 45 c4	 lea	 eax, DWORD PTR _LvItem$[ebp]
  00086	6a 00		 push	 0
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _memset

; 502  : 		LvItem.mask = LVIF_TEXT|LVIF_PARAM;
; 503  : 		LvItem.iItem = line++;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _line$1$[ebp]
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	89 45 c8	 mov	 DWORD PTR _LvItem$[ebp+4], eax
  00097	40		 inc	 eax
  00098	89 45 fc	 mov	 DWORD PTR _line$1$[ebp], eax

; 504  : 		LvItem.iSubItem = 0;
; 505  : 		LvItem.pszText = kf->FileName;
; 506  : 		LvItem.lParam = (LPARAM) kf;
; 507  : 		SendMessage (hList, LVM_INSERTITEM, 0, (LPARAM)&LvItem);

  0009b	8d 45 c4	 lea	 eax, DWORD PTR _LvItem$[ebp]
  0009e	c7 45 c4 05 00
	00 00		 mov	 DWORD PTR _LvItem$[ebp], 5
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	68 07 10 00 00	 push	 4103			; 00001007H
  000ad	57		 push	 edi
  000ae	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _LvItem$[ebp+8], 0
  000b5	89 75 d8	 mov	 DWORD PTR _LvItem$[ebp+20], esi
  000b8	89 75 e4	 mov	 DWORD PTR _LvItem$[ebp+32], esi
  000bb	ff d3		 call	 ebx
  000bd	8b b6 04 01 00
	00		 mov	 esi, DWORD PTR [esi+260]
  000c3	85 f6		 test	 esi, esi
  000c5	75 ba		 jne	 SHORT $LL4@LoadKeyLis
$LN3@LoadKeyLis:
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx

; 508  : 	}
; 509  : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ENDP	; LoadKeyList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@0@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2403 : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2404 : 	if (_Right.size() <= _Left.capacity() - _Left.size()
; 2405 : 		|| _Right.capacity() - _Right.size() < _Left.size())

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Left$[ebp]
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	56		 push	 esi
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00015	8b 72 10	 mov	 esi, DWORD PTR [edx+16]
  00018	2b c6		 sub	 eax, esi
  0001a	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0001d	76 18		 jbe	 SHORT $LN4@operator
  0001f	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00022	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00025	3b c6		 cmp	 eax, esi
  00027	72 0e		 jb	 SHORT $LN4@operator

; 2407 : 	else
; 2408 : 		return (_STD move(_Right.insert(0, _Left)));

  00029	6a ff		 push	 -1
  0002b	6a 00		 push	 0
  0002d	52		 push	 edx
  0002e	6a 00		 push	 0
  00030	e8 00 00 00 00	 call	 ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
  00035	eb 0c		 jmp	 SHORT $LN344@operator
$LN4@operator:

; 2406 : 		return (_STD move(_Left.append(_Right)));

  00037	6a ff		 push	 -1
  00039	6a 00		 push	 0
  0003b	51		 push	 ecx
  0003c	8b ca		 mov	 ecx, edx
  0003e	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN344@operator:
  00043	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00046	33 c9		 xor	 ecx, ecx
  00048	50		 push	 eax
  00049	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00050	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00057	66 89 0e	 mov	 WORD PTR [esi], cx
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
  00061	8b c6		 mov	 eax, esi
  00063	5e		 pop	 esi

; 2409 : 	}

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@0@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2439 : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2440 : 	return (_STD move(_Left.append(_Right)));

  00004	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0000f	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00013	75 04		 jne	 SHORT $LN9@operator
  00015	33 c0		 xor	 eax, eax
  00017	eb 16		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00019	8b c2		 mov	 eax, edx
  0001b	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0001e	66 90		 npad	 2
$LL141@operator:
  00020	66 8b 08	 mov	 cx, WORD PTR [eax]
  00023	83 c0 02	 add	 eax, 2
  00026	66 85 c9	 test	 cx, cx
  00029	75 f5		 jne	 SHORT $LL141@operator
  0002b	2b c6		 sub	 eax, esi
  0002d	d1 f8		 sar	 eax, 1
$LN10@operator:
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00032	50		 push	 eax
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00039	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	33 c9		 xor	 ecx, ecx
  0003e	50		 push	 eax
  0003f	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004d	66 89 0e	 mov	 WORD PTR [esi], cx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
  00057	8b c6		 mov	 eax, esi
  00059	5e		 pop	 esi

; 2441 : 	}

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1636 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

  00003	8b 16		 mov	 edx, DWORD PTR [esi]
  00005	85 d2		 test	 edx, edx
  00007	74 43		 je	 SHORT $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();
; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c2		 sub	 eax, edx
  0000e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00013	72 1a		 jb	 SHORT $LN70@Tidy
  00015	f6 c2 1f	 test	 dl, 31			; 0000001fH
  00018	75 34		 jne	 SHORT $LN107@Tidy
  0001a	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0001d	3b c2		 cmp	 eax, edx
  0001f	73 32		 jae	 SHORT $LN109@Tidy
  00021	2b d0		 sub	 edx, eax
  00023	83 fa 04	 cmp	 edx, 4
  00026	72 30		 jb	 SHORT $LN110@Tidy
  00028	83 fa 23	 cmp	 edx, 35			; 00000023H
  0002b	77 30		 ja	 SHORT $LN111@Tidy
  0002d	8b d0		 mov	 edx, eax
$LN70@Tidy:
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1642 : 				this->_Myend() - this->_Myfirst());
; 1643 : 			this->_Myfirst() = pointer();

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003b	83 c4 04	 add	 esp, 4

; 1644 : 			this->_Mylast() = pointer();

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1645 : 			this->_Myend() = pointer();

  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1646 : 			}
; 1647 : 		}

  0004c	5e		 pop	 esi
  0004d	c3		 ret	 0
$LN107@Tidy:

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();
; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN112@Tidy:
$LN109@Tidy:
  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN113@Tidy:
$LN110@Tidy:
  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN114@Tidy:
$LN111@Tidy:
  0005d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN115@Tidy:
$LN106@Tidy:
  00062	cc		 int	 3
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$ = ecx

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1582 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ
_TEXT	SEGMENT
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::front, COMDAT
; _this$ = ecx

; 1257 : 		return (*begin());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1258 : 		}

  00002	c3		 ret	 0
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT
; _this$ = ecx

; 1230 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	03 45 08	 add	 eax, DWORD PTR __Pos$[ebp]

; 1243 : 		}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		{	// test if sequence is empty

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	0f 94 c0	 sete	 al

; 1190 : 		return (this->_Myfirst() == this->_Mylast());
; 1191 : 		}

  00008	c3		 ret	 0
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1181 : 		}

  00005	c3		 ret	 0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::begin, COMDAT
; _this$ = ecx

; 1057 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1058 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1059 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 976  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 706  : 		: _Mybase()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 708  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned char> >,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 489  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend, COMDAT
; _this$ = ecx

; 663  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 664  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast, COMDAT
; _this$ = ecx

; 658  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 659  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast, COMDAT
; _this$ = ecx

; 653  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 654  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst, COMDAT
; _this$ = ecx

; 648  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 649  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst, COMDAT
; _this$ = ecx

; 643  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 644  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data, COMDAT
; _this$ = ecx

; 638  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 639  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data, COMDAT
; _this$ = ecx

; 633  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 634  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal, COMDAT
; _this$ = ecx

; 623  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 624  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >, COMDAT
; _this$ = ecx

; 519  : 		: _Mypair(_Zero_then_variadic_args_t())

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 521  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Count$[ebp], 4096 ; 00001000H
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000d	72 19		 jb	 SHORT $LN7@deallocate
  0000f	a8 1f		 test	 al, 31			; 0000001fH
  00011	75 22		 jne	 SHORT $LN16@deallocate
  00013	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00016	3b c8		 cmp	 ecx, eax
  00018	73 20		 jae	 SHORT $LN18@deallocate
  0001a	2b c1		 sub	 eax, ecx
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	72 1e		 jb	 SHORT $LN19@deallocate
  00021	83 f8 23	 cmp	 eax, 35			; 00000023H
  00024	77 1e		 ja	 SHORT $LN20@deallocate
  00026	8b c1		 mov	 eax, ecx
$LN7@deallocate:
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4

; 988  : 		}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN16@deallocate:

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN18@deallocate:
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN19@deallocate:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN20@deallocate:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN15@deallocate:
  00049	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Count$[ebp], 4096 ; 00001000H
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000d	72 19		 jb	 SHORT $LN5@deallocate
  0000f	a8 1f		 test	 al, 31			; 0000001fH
  00011	75 22		 jne	 SHORT $LN13@deallocate
  00013	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00016	3b c8		 cmp	 ecx, eax
  00018	73 20		 jae	 SHORT $LN15@deallocate
  0001a	2b c1		 sub	 eax, ecx
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	72 1e		 jb	 SHORT $LN16@deallocate
  00021	83 f8 23	 cmp	 eax, 35			; 00000023H
  00024	77 1e		 ja	 SHORT $LN17@deallocate
  00026	8b c1		 mov	 eax, ecx
$LN5@deallocate:
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4

; 721  : 		}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN15@deallocate:
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN16@deallocate:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN17@deallocate:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN12@deallocate:
  00049	cc		 int	 3
?deallocate@?$allocator@E@std@@QAEXPAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT ??1Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ
_TEXT	SEGMENT
??1Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ PROC ; `KeyFileProcess'::`2'::Finally227::~Finally227, COMDAT
; _this$ = ecx

; 223  : 	finally_do_arg (HANDLE, src,

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 f8 ff	 cmp	 eax, -1
  00005	74 07		 je	 SHORT $LN3@Finally227
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN3@Finally227:
  0000e	c3		 ret	 0
??1Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ ENDP ; `KeyFileProcess'::`2'::Finally227::~Finally227
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT ??0Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@PAX@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@PAX@Z PROC ; `KeyFileProcess'::`2'::Finally227::Finally227, COMDAT
; _this$ = ecx

; 227  : 	});

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 223  : 	finally_do_arg (HANDLE, src,

  00003	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@PAX@Z ENDP ; `KeyFileProcess'::`2'::Finally227::Finally227
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT ?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z
_TEXT	SEGMENT
_ftCreationTime$ = -65592				; size = 8
_ftLastAccessTime$ = -65584				; size = 8
_ftLastWriteTime$ = -65576				; size = 8
_finally227$ = -65568					; size = 4
_src$1$ = -65564					; size = 4
_keyFile$GSCopy$1$ = -65560				; size = 4
_bTimeStampValid$1$ = -65556				; size = 4
_keyPool$GSCopy$1$ = -65552				; size = 4
_totalRead$1$ = -65548					; size = 4
_f$1$ = -65544						; size = 4
_buffer$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_keyPool$ = 8						; size = 4
_keyFile$ = 12						; size = 4
?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z PROC	; KeyFileProcess, COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 38 00 01 00	 mov	 eax, 65592		; 00010038H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 08	 mov	 eax, DWORD PTR _keyPool$[ebp]
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 197  : 	FILE *f;
; 198  : 	unsigned __int8 buffer[64 * 1024];
; 199  : 	unsigned __int32 crc = 0xffffffff;
; 200  : 	int writePos = 0;
; 201  : 	size_t bytesRead, totalRead = 0;
; 202  : 	int status = TRUE;
; 203  : 
; 204  : 	HANDLE src;
; 205  : 	FILETIME ftCreationTime;
; 206  : 	FILETIME ftLastWriteTime;
; 207  : 	FILETIME ftLastAccessTime;
; 208  : 
; 209  : 	BOOL bTimeStampValid = FALSE;

  0001d	33 ff		 xor	 edi, edi
  0001f	89 85 f0 ff fe
	ff		 mov	 DWORD PTR _keyPool$GSCopy$1$[ebp], eax
  00025	8b 45 0c	 mov	 eax, DWORD PTR _keyFile$[ebp]
  00028	33 f6		 xor	 esi, esi

; 210  : 
; 211  : 	/* Remember the last access time of the keyfile. It will be preserved in order to prevent
; 212  : 	an adversary from determining which file may have been used as keyfile. */
; 213  : 	src = CreateFile (keyFile->FileName,

  0002a	57		 push	 edi
  0002b	57		 push	 edi
  0002c	6a 03		 push	 3
  0002e	57		 push	 edi
  0002f	6a 03		 push	 3
  00031	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00036	50		 push	 eax
  00037	89 85 e8 ff fe
	ff		 mov	 DWORD PTR _keyFile$GSCopy$1$[ebp], eax
  0003d	83 cb ff	 or	 ebx, -1
  00040	89 b5 f4 ff fe
	ff		 mov	 DWORD PTR _totalRead$1$[ebp], esi
  00046	89 bd ec ff fe
	ff		 mov	 DWORD PTR _bTimeStampValid$1$[ebp], edi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00052	89 85 e4 ff fe
	ff		 mov	 DWORD PTR _src$1$[ebp], eax

; 214  : 		GENERIC_READ | GENERIC_WRITE,
; 215  : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 216  : 
; 217  : 	if (src != INVALID_HANDLE_VALUE)

  00058	83 f8 ff	 cmp	 eax, -1
  0005b	74 32		 je	 SHORT $LN8@KeyFilePro

; 218  : 	{
; 219  : 		if (GetFileTime ((HANDLE) src, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime))

  0005d	8d 8d d8 ff fe
	ff		 lea	 ecx, DWORD PTR _ftLastWriteTime$[ebp]
  00063	51		 push	 ecx
  00064	8d 8d d0 ff fe
	ff		 lea	 ecx, DWORD PTR _ftLastAccessTime$[ebp]
  0006a	51		 push	 ecx
  0006b	8d 8d c8 ff fe
	ff		 lea	 ecx, DWORD PTR _ftCreationTime$[ebp]
  00071	51		 push	 ecx
  00072	50		 push	 eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  00079	85 c0		 test	 eax, eax
  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	8b 85 e4 ff fe
	ff		 mov	 eax, DWORD PTR _src$1$[ebp]
  00086	0f 45 f9	 cmovne	 edi, ecx
  00089	89 bd ec ff fe
	ff		 mov	 DWORD PTR _bTimeStampValid$1$[ebp], edi
$LN8@KeyFilePro:

; 220  : 			bTimeStampValid = TRUE;
; 221  : 	}
; 222  : 
; 223  : 	finally_do_arg (HANDLE, src,
; 224  : 	{
; 225  : 		if (finally_arg != INVALID_HANDLE_VALUE)
; 226  : 			CloseHandle (finally_arg);
; 227  : 	});
; 228  : 
; 229  : 	f = fopen (keyFile->FileName, "rb");

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  00094	ff b5 e8 ff fe
	ff		 push	 DWORD PTR _keyFile$GSCopy$1$[ebp]
  0009a	89 85 e0 ff fe
	ff		 mov	 DWORD PTR _finally227$[ebp], eax
  000a0	e8 00 00 00 00	 call	 _fopen
  000a5	83 c4 08	 add	 esp, 8
  000a8	89 85 f8 ff fe
	ff		 mov	 DWORD PTR _f$1$[ebp], eax

; 230  : 	if (f == NULL) return FALSE;

  000ae	85 c0		 test	 eax, eax
  000b0	75 07		 jne	 SHORT $LN24@KeyFilePro
  000b2	33 db		 xor	 ebx, ebx
  000b4	e9 60 01 00 00	 jmp	 $LN21@KeyFilePro
$LN24@KeyFilePro:

; 231  : 
; 232  : 	while ((bytesRead = fread (buffer, 1, sizeof (buffer), f)) > 0)

  000b9	50		 push	 eax
  000ba	68 00 00 01 00	 push	 65536			; 00010000H
  000bf	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000c5	6a 01		 push	 1
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _fread
  000cd	8b f8		 mov	 edi, eax
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	85 ff		 test	 edi, edi
  000d4	0f 84 b2 00 00
	00		 je	 $LN3@KeyFilePro
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL2@KeyFilePro:

; 233  : 	{
; 234  : 		size_t i;
; 235  : 
; 236  : 		if (ferror (f))

  000e0	ff b5 f8 ff fe
	ff		 push	 DWORD PTR _f$1$[ebp]
  000e6	e8 00 00 00 00	 call	 _ferror
  000eb	83 c4 04	 add	 esp, 4
  000ee	85 c0		 test	 eax, eax
  000f0	0f 85 a8 00 00
	00		 jne	 $LN27@KeyFilePro

; 237  : 		{
; 238  : 			status = FALSE;
; 239  : 			goto close;
; 240  : 		}
; 241  : 
; 242  : 		for (i = 0; i < bytesRead; i++)

  000f6	33 c9		 xor	 ecx, ecx
  000f8	85 ff		 test	 edi, edi
  000fa	74 6a		 je	 SHORT $LN5@KeyFilePro
  000fc	8b d3		 mov	 edx, ebx
  000fe	c1 ea 08	 shr	 edx, 8
$LL6@KeyFilePro:

; 243  : 		{
; 244  : 			crc = UPDC32 (buffer[i], crc);

  00101	0f b6 84 0d fc
	ff fe ff	 movzx	 eax, BYTE PTR _buffer$[ebp+ecx]
  00109	33 c3		 xor	 eax, ebx
  0010b	0f b6 c0	 movzx	 eax, al
  0010e	8b 1c 85 00 00
	00 00		 mov	 ebx, DWORD PTR _crc_32_tab[eax*4]
  00115	33 da		 xor	 ebx, edx

; 245  : 
; 246  : 			keyPool[writePos++] += (unsigned __int8) (crc >> 24);

  00117	8b 95 f0 ff fe
	ff		 mov	 edx, DWORD PTR _keyPool$GSCopy$1$[ebp]
  0011d	8b c3		 mov	 eax, ebx
  0011f	c1 e8 18	 shr	 eax, 24			; 00000018H
  00122	00 04 32	 add	 BYTE PTR [edx+esi], al

; 247  : 			keyPool[writePos++] += (unsigned __int8) (crc >> 16);

  00125	8b c3		 mov	 eax, ebx
  00127	c1 e8 10	 shr	 eax, 16			; 00000010H
  0012a	00 44 32 01	 add	 BYTE PTR [edx+esi+1], al

; 248  : 			keyPool[writePos++] += (unsigned __int8) (crc >> 8);

  0012e	8b d3		 mov	 edx, ebx
  00130	8b 85 f0 ff fe
	ff		 mov	 eax, DWORD PTR _keyPool$GSCopy$1$[ebp]
  00136	c1 ea 08	 shr	 edx, 8
  00139	00 54 30 02	 add	 BYTE PTR [eax+esi+2], dl

; 249  : 			keyPool[writePos++] += (unsigned __int8) crc;

  0013d	00 5c 30 03	 add	 BYTE PTR [eax+esi+3], bl
  00141	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 250  : 
; 251  : 			if (writePos >= KEYFILE_POOL_SIZE)
; 252  : 				writePos = 0;
; 253  : 
; 254  : 			if (++totalRead >= KEYFILE_MAX_READ_LEN)

  00144	8b b5 f4 ff fe
	ff		 mov	 esi, DWORD PTR _totalRead$1$[ebp]
  0014a	46		 inc	 esi
  0014b	89 b5 f4 ff fe
	ff		 mov	 DWORD PTR _totalRead$1$[ebp], esi
  00151	81 fe 00 00 10
	00		 cmp	 esi, 1048576		; 00100000H
  00157	73 60		 jae	 SHORT $LN34@KeyFilePro

; 237  : 		{
; 238  : 			status = FALSE;
; 239  : 			goto close;
; 240  : 		}
; 241  : 
; 242  : 		for (i = 0; i < bytesRead; i++)

  00159	33 f6		 xor	 esi, esi
  0015b	41		 inc	 ecx
  0015c	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015f	0f 4c f0	 cmovl	 esi, eax
  00162	3b cf		 cmp	 ecx, edi
  00164	72 9b		 jb	 SHORT $LL6@KeyFilePro
$LN5@KeyFilePro:

; 231  : 
; 232  : 	while ((bytesRead = fread (buffer, 1, sizeof (buffer), f)) > 0)

  00166	ff b5 f8 ff fe
	ff		 push	 DWORD PTR _f$1$[ebp]
  0016c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00172	68 00 00 01 00	 push	 65536			; 00010000H
  00177	6a 01		 push	 1
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 _fread
  0017f	8b f8		 mov	 edi, eax
  00181	83 c4 10	 add	 esp, 16			; 00000010H
  00184	85 ff		 test	 edi, edi
  00186	0f 85 54 ff ff
	ff		 jne	 $LL2@KeyFilePro
$LN3@KeyFilePro:

; 255  : 				goto close;
; 256  : 		}
; 257  : 	}
; 258  : 
; 259  : 	if (ferror (f))

  0018c	ff b5 f8 ff fe
	ff		 push	 DWORD PTR _f$1$[ebp]
  00192	e8 00 00 00 00	 call	 _ferror
  00197	83 c4 04	 add	 esp, 4
  0019a	85 c0		 test	 eax, eax
  0019c	74 04		 je	 SHORT $LN15@KeyFilePro
$LN27@KeyFilePro:

; 260  : 	{
; 261  : 		status = FALSE;

  0019e	33 db		 xor	 ebx, ebx
  001a0	eb 1c		 jmp	 SHORT $LN35@KeyFilePro
$LN15@KeyFilePro:

; 262  : 	}
; 263  : 	else if (totalRead == 0)

  001a2	83 bd f4 ff fe
	ff 00		 cmp	 DWORD PTR _totalRead$1$[ebp], 0
  001a9	75 0e		 jne	 SHORT $LN34@KeyFilePro

; 264  : 	{
; 265  : 		status = FALSE;
; 266  : 		SetLastError (ERROR_HANDLE_EOF); 

  001ab	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetLastError@4
  001b1	33 db		 xor	 ebx, ebx
  001b3	6a 26		 push	 38			; 00000026H
  001b5	ff d7		 call	 edi
  001b7	eb 0b		 jmp	 SHORT $close$37
$LN34@KeyFilePro:
  001b9	bb 01 00 00 00	 mov	 ebx, 1
$LN35@KeyFilePro:
  001be	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetLastError@4
$close$37:

; 267  : 	}
; 268  : 
; 269  : close:
; 270  : 	DWORD err = GetLastError();

  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 271  : 	fclose (f);

  001ca	ff b5 f8 ff fe
	ff		 push	 DWORD PTR _f$1$[ebp]
  001d0	8b f0		 mov	 esi, eax
  001d2	e8 00 00 00 00	 call	 _fclose
  001d7	83 c4 04	 add	 esp, 4
  001da	83 bd ec ff fe
	ff 00		 cmp	 DWORD PTR _bTimeStampValid$1$[ebp], 0

; 272  : 
; 273  : 	if (bTimeStampValid && !IsFileOnReadOnlyFilesystem (keyFile->FileName))

  001e1	74 33		 je	 SHORT $LN18@KeyFilePro
  001e3	ff b5 e8 ff fe
	ff		 push	 DWORD PTR _keyFile$GSCopy$1$[ebp]
  001e9	e8 00 00 00 00	 call	 _IsFileOnReadOnlyFilesystem
  001ee	83 c4 04	 add	 esp, 4
  001f1	85 c0		 test	 eax, eax
  001f3	75 21		 jne	 SHORT $LN18@KeyFilePro

; 274  : 	{
; 275  : 		// Restore the keyfile timestamp
; 276  : 		SetFileTime (src, &ftCreationTime, &ftLastAccessTime, &ftLastWriteTime);

  001f5	8d 85 d8 ff fe
	ff		 lea	 eax, DWORD PTR _ftLastWriteTime$[ebp]
  001fb	50		 push	 eax
  001fc	8d 85 d0 ff fe
	ff		 lea	 eax, DWORD PTR _ftLastAccessTime$[ebp]
  00202	50		 push	 eax
  00203	8d 85 c8 ff fe
	ff		 lea	 eax, DWORD PTR _ftCreationTime$[ebp]
  00209	50		 push	 eax
  0020a	ff b5 e4 ff fe
	ff		 push	 DWORD PTR _src$1$[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16
$LN18@KeyFilePro:

; 277  : 	}
; 278  : 
; 279  : 	SetLastError (err);

  00216	56		 push	 esi
  00217	ff d7		 call	 edi
$LN21@KeyFilePro:

; 280  : 	return status;

  00219	8d 8d e0 ff fe
	ff		 lea	 ecx, DWORD PTR _finally227$[ebp]
  0021f	e8 00 00 00 00	 call	 ??1Finally227@?1??KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z@QAE@XZ ; `KeyFileProcess'::`2'::Finally227::~Finally227

; 281  : }

  00224	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00227	8b c3		 mov	 eax, ebx
  00229	5f		 pop	 edi
  0022a	5e		 pop	 esi
  0022b	33 cd		 xor	 ecx, ebp
  0022d	5b		 pop	 ebx
  0022e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z ENDP	; KeyFileProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT ?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z
_TEXT	SEGMENT
_firstKeyFile$ = 8					; size = 4
_keyFile$ = 12						; size = 4
?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z PROC	; KeyFileRemove, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 89   : 	KeyFile *prevkf = NULL, *kf = firstKeyFile;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _firstKeyFile$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	8b c3		 mov	 eax, ebx

; 90   : 
; 91   : 	if (firstKeyFile == NULL) return NULL;

  0000b	85 db		 test	 ebx, ebx
  0000d	75 03		 jne	 SHORT $LN47@KeyFileRem
  0000f	5b		 pop	 ebx

; 110  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN47@KeyFileRem:
  00012	57		 push	 edi

; 90   : 
; 91   : 	if (firstKeyFile == NULL) return NULL;

  00013	8b 7d 0c	 mov	 edi, DWORD PTR _keyFile$[ebp]
$LL4@KeyFileRem:

; 92   : 	do
; 93   : 	{
; 94   : 		if (kf == keyFile)

  00016	3b c7		 cmp	 eax, edi
  00018	74 12		 je	 SHORT $LN22@KeyFileRem

; 103  : 			break;
; 104  : 		}
; 105  : 		prevkf = kf;

  0001a	8b c8		 mov	 ecx, eax

; 106  : 	}
; 107  : 	while (kf = kf->Next);

  0001c	8b 80 04 01 00
	00		 mov	 eax, DWORD PTR [eax+260]
  00022	85 c0		 test	 eax, eax
  00024	75 f0		 jne	 SHORT $LL4@KeyFileRem

; 108  : 
; 109  : 	return firstKeyFile;

  00026	5f		 pop	 edi
  00027	8b c3		 mov	 eax, ebx
  00029	5b		 pop	 ebx

; 110  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN22@KeyFileRem:

; 95   : 		{
; 96   : 			if (prevkf == NULL)

  0002c	85 c9		 test	 ecx, ecx
  0002e	75 08		 jne	 SHORT $LN12@KeyFileRem

; 97   : 				firstKeyFile = kf->Next;

  00030	8b 98 04 01 00
	00		 mov	 ebx, DWORD PTR [eax+260]

; 98   : 			else

  00036	eb 0c		 jmp	 SHORT $LN7@KeyFileRem
$LN12@KeyFileRem:

; 99   : 				prevkf->Next = kf->Next;

  00038	8b 80 04 01 00
	00		 mov	 eax, DWORD PTR [eax+260]
  0003e	89 81 04 01 00
	00		 mov	 DWORD PTR [ecx+260], eax
$LN7@KeyFileRem:

; 100  : 
; 101  : 			burn (keyFile, sizeof(*keyFile));	// wipe

  00044	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  00049	8b cf		 mov	 ecx, edi
  0004b	56		 push	 esi
  0004c	8b f2		 mov	 esi, edx
  0004e	8b c7		 mov	 eax, edi
$LL16@KeyFileRem:
  00050	c6 00 00	 mov	 BYTE PTR [eax], 0
  00053	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00056	83 ee 01	 sub	 esi, 1
  00059	75 f5		 jne	 SHORT $LL16@KeyFileRem
  0005b	5e		 pop	 esi
  0005c	0f 1f 40 00	 npad	 4
$LL8@KeyFileRem:
  00060	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00063	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00066	83 ea 01	 sub	 edx, 1
  00069	75 f5		 jne	 SHORT $LL8@KeyFileRem

; 102  : 			free (keyFile);

  0006b	57		 push	 edi
  0006c	e8 00 00 00 00	 call	 _free
  00071	83 c4 04	 add	 esp, 4

; 108  : 
; 109  : 	return firstKeyFile;

  00074	8b c3		 mov	 eax, ebx
  00076	5f		 pop	 edi
  00077	5b		 pop	 ebx

; 110  : }

  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z ENDP	; KeyFileRemove
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z PROC		; GostCrypt::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z ENDP		; GostCrypt::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?InnerIsNotEnd@Container@ForEach@GostCrypt@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@GostCrypt@@QBE_NXZ PROC ; GostCrypt::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	33 c0		 xor	 eax, eax
  00002	38 41 05	 cmp	 BYTE PTR [ecx+5], al
  00005	0f 94 c0	 sete	 al
  00008	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000b	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@GostCrypt@@QBE_NXZ ENDP ; GostCrypt::ForEach::Container::InnerIsNotEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?Continue@Container@ForEach@GostCrypt@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@GostCrypt@@QBEXXZ PROC	; GostCrypt::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@GostCrypt@@QBEXXZ ENDP	; GostCrypt::ForEach::Container::Continue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??1Container@ForEach@GostCrypt@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@GostCrypt@@UAE@XZ PROC		; GostCrypt::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@GostCrypt@@UAE@XZ ENDP		; GostCrypt::ForEach::Container::~Container
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??0Container@ForEach@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@GostCrypt@@QAE@XZ PROC		; GostCrypt::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	66 c7 41 04 01
	00		 mov	 WORD PTR [ecx+4], 1
  0000e	c3		 ret	 0
??0Container@ForEach@GostCrypt@@QAE@XZ ENDP		; GostCrypt::ForEach::Container::Container
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1SecurityTokenKeyfile@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenKeyfile@GostCrypt@@QAE@XZ PROC		; GostCrypt::SecurityTokenKeyfile::~SecurityTokenKeyfile, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  00007	e8 00 00 00 00	 call	 ??1SecurityTokenInfo@GostCrypt@@QAE@XZ
  0000c	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0000f	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  00012	83 f8 10	 cmp	 eax, 16			; 00000010H
  00015	72 0b		 jb	 SHORT $LN9@SecurityTo
  00017	40		 inc	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	50		 push	 eax
  0001b	ff 36		 push	 DWORD PTR [esi]
  0001d	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN9@SecurityTo:
  00022	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00029	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0002d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00034	72 02		 jb	 SHORT $LN97@SecurityTo
  00036	8b 36		 mov	 esi, DWORD PTR [esi]
$LN97@SecurityTo:
  00038	c6 06 00	 mov	 BYTE PTR [esi], 0
  0003b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0003e	83 f8 08	 cmp	 eax, 8
  00041	72 0d		 jb	 SHORT $LN110@SecurityTo
  00043	40		 inc	 eax
  00044	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00047	50		 push	 eax
  00048	ff 77 04	 push	 DWORD PTR [edi+4]
  0004b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN110@SecurityTo:
  00050	c7 47 18 07 00
	00 00		 mov	 DWORD PTR [edi+24], 7
  00057	83 7f 18 08	 cmp	 DWORD PTR [edi+24], 8
  0005b	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00062	72 0b		 jb	 SHORT $LN200@SecurityTo
  00064	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00067	33 c9		 xor	 ecx, ecx
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	66 89 08	 mov	 WORD PTR [eax], cx
  0006e	c3		 ret	 0
$LN200@SecurityTo:
  0006f	33 c0		 xor	 eax, eax
  00071	66 89 47 04	 mov	 WORD PTR [edi+4], ax
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	c3		 ret	 0
??1SecurityTokenKeyfile@GostCrypt@@QAE@XZ ENDP		; GostCrypt::SecurityTokenKeyfile::~SecurityTokenKeyfile
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSecurityTokenKeyfilePath@GostCrypt@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSecurityTokenKeyfilePath@GostCrypt@@QAEPAXI@Z PROC	; GostCrypt::SecurityTokenKeyfilePath::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	83 f8 08	 cmp	 eax, 8
  0000c	72 09		 jb	 SHORT $LN13@scalar
  0000e	40		 inc	 eax
  0000f	50		 push	 eax
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN13@scalar:
  00017	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0001e	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00029	72 04		 jb	 SHORT $LN103@scalar
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	eb 02		 jmp	 SHORT $LN104@scalar
$LN103@scalar:
  0002f	8b c6		 mov	 eax, esi
$LN104@scalar:
  00031	33 c9		 xor	 ecx, ecx
  00033	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00037	66 89 08	 mov	 WORD PTR [eax], cx
  0003a	74 0b		 je	 SHORT $LN110@scalar
  0003c	6a 18		 push	 24			; 00000018H
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00044	83 c4 08	 add	 esp, 8
$LN110@scalar:
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??_GSecurityTokenKeyfilePath@GostCrypt@@QAEPAXI@Z ENDP	; GostCrypt::SecurityTokenKeyfilePath::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SecurityTokenKeyfilePath@GostCrypt@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0SecurityTokenKeyfilePath@GostCrypt@@QAE@ABU01@@Z PROC ; GostCrypt::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000f	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00016	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00020	66 89 06	 mov	 WORD PTR [esi], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??0SecurityTokenKeyfilePath@GostCrypt@@QAE@ABU01@@Z ENDP ; GostCrypt::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1SecurityTokenKeyfilePath@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenKeyfilePath@GostCrypt@@QAE@XZ PROC	; GostCrypt::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 08	 cmp	 eax, 8
  00009	72 09		 jb	 SHORT $LN9@SecurityTo
  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN9@SecurityTo:
  00014	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0001b	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	72 09		 jb	 SHORT $LN99@SecurityTo
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	33 c9		 xor	 ecx, ecx
  0002c	5e		 pop	 esi
  0002d	66 89 08	 mov	 WORD PTR [eax], cx
  00030	c3		 ret	 0
$LN99@SecurityTo:
  00031	33 c0		 xor	 eax, eax
  00033	66 89 06	 mov	 WORD PTR [esi], ax
  00036	5e		 pop	 esi
  00037	c3		 ret	 0
??1SecurityTokenKeyfilePath@GostCrypt@@QAE@XZ ENDP	; GostCrypt::SecurityTokenKeyfilePath::~SecurityTokenKeyfilePath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\securitytoken.h
;	COMDAT ??BSecurityTokenKeyfilePath@GostCrypt@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BSecurityTokenKeyfilePath@GostCrypt@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GostCrypt::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 66   : 		operator wstring () const { return Path; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	6a ff		 push	 -1
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00015	8b ce		 mov	 ecx, esi
  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00025	66 89 06	 mov	 WORD PTR [esi], ax
  00028	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??BSecurityTokenKeyfilePath@GostCrypt@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GostCrypt::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\securitytoken.h
;	COMDAT ??0SecurityTokenKeyfilePath@GostCrypt@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_path$ = 8						; size = 4
??0SecurityTokenKeyfilePath@GostCrypt@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; GostCrypt::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath, COMDAT
; _this$ = ecx

; 65   : 		SecurityTokenKeyfilePath (const wstring &path) : Path (path) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c0		 xor	 eax, eax
  00009	6a ff		 push	 -1
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR _path$[ebp]
  0000f	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00016	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00020	66 89 06	 mov	 WORD PTR [esi], ax
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??0SecurityTokenKeyfilePath@GostCrypt@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; GostCrypt::SecurityTokenKeyfilePath::SecurityTokenKeyfilePath
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1SecurityTokenInfo@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??1SecurityTokenInfo@GostCrypt@@QAE@XZ PROC		; GostCrypt::SecurityTokenInfo::~SecurityTokenInfo, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00007	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  0000a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000d	72 0b		 jb	 SHORT $LN9@SecurityTo
  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN9@SecurityTo:
  0001a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00021	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00025	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002c	72 02		 jb	 SHORT $LN97@SecurityTo
  0002e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN97@SecurityTo:
  00030	c6 06 00	 mov	 BYTE PTR [esi], 0
  00033	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00036	83 f8 08	 cmp	 eax, 8
  00039	72 0d		 jb	 SHORT $LN110@SecurityTo
  0003b	40		 inc	 eax
  0003c	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003f	50		 push	 eax
  00040	ff 77 08	 push	 DWORD PTR [edi+8]
  00043	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN110@SecurityTo:
  00048	c7 47 1c 07 00
	00 00		 mov	 DWORD PTR [edi+28], 7
  0004f	83 7f 1c 08	 cmp	 DWORD PTR [edi+28], 8
  00053	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0005a	72 0b		 jb	 SHORT $LN200@SecurityTo
  0005c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005f	33 c9		 xor	 ecx, ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	66 89 08	 mov	 WORD PTR [eax], cx
  00066	c3		 ret	 0
$LN200@SecurityTo:
  00067	33 c0		 xor	 eax, eax
  00069	66 89 47 08	 mov	 WORD PTR [edi+8], ax
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	c3		 ret	 0
??1SecurityTokenInfo@GostCrypt@@QAE@XZ ENDP		; GostCrypt::SecurityTokenInfo::~SecurityTokenInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT
; _this$ = ecx

; 2283 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset, COMDAT
; _this$ = ecx

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2271 : 		if (this->_Mysize() < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00009	72 04		 jb	 SHORT $LN17@Check_offs

; 2273 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN17@Check_offs:

; 2272 : 			_Xran();

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN19@Check_offs:
$LN16@Check_offs:
  00019	cc		 int	 3
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT
; _this$ = ecx

; 2266 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2248 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2249 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 29		 je	 SHORT $LN4@Tidy

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00010	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00014	72 23		 jb	 SHORT $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0e		 je	 SHORT $LN57@Tidy

; 2256 : 				_Traits::copy(this->_Bx()._Buf,

  0001d	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  00020	50		 push	 eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _memcpy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@Tidy:

; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0002b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002e	8b ce		 mov	 ecx, esi
  00030	40		 inc	 eax
  00031	50		 push	 eax
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
  00038	5b		 pop	 ebx
$LN4@Tidy:

; 2259 : 			}
; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00039	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 2261 : 		_Eos(_Newsize);

  00040	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00044	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00047	72 0e		 jb	 SHORT $LN94@Tidy
  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	33 c9		 xor	 ecx, ecx
  0004d	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 2262 : 		}

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8

; 2261 : 		_Eos(_Newsize);

$LN94@Tidy:
  00057	33 c0		 xor	 eax, eax
  00059	66 89 04 7e	 mov	 WORD PTR [esi+edi*2], ax
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 2262 : 		}

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2238 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 2e		 je	 SHORT $LN4@Inside
  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	83 f8 08	 cmp	 eax, 8
  00011	72 04		 jb	 SHORT $LN16@Inside
  00013	8b 31		 mov	 esi, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN17@Inside
$LN16@Inside:
  00017	8b f1		 mov	 esi, ecx
$LN17@Inside:
  00019	3b d6		 cmp	 edx, esi
  0001b	72 1c		 jb	 SHORT $LN4@Inside
  0001d	83 f8 08	 cmp	 eax, 8
  00020	72 04		 jb	 SHORT $LN30@Inside
  00022	8b 31		 mov	 esi, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN31@Inside
$LN30@Inside:
  00026	8b f1		 mov	 esi, ecx
$LN31@Inside:
  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  0002e	3b c2		 cmp	 eax, edx
  00030	76 07		 jbe	 SHORT $LN4@Inside

; 2242 : 		else
; 2243 : 			return (true);

  00032	b0 01		 mov	 al, 1
  00034	5e		 pop	 esi

; 2244 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  00039	32 c0		 xor	 al, al
  0003b	5e		 pop	 esi

; 2244 : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2225 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0000d	77 5b		 ja	 SHORT $LN89@Grow

; 2227 : 		if (this->_Myres() < _Newsize)

  0000f	39 71 14	 cmp	 DWORD PTR [ecx+20], esi
  00012	73 13		 jae	 SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00014	ff 71 10	 push	 DWORD PTR [ecx+16]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0001d	85 f6		 test	 esi, esi
  0001f	5e		 pop	 esi
  00020	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00027	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  0002b	74 1f		 je	 SHORT $LN5@Grow
  0002d	83 fe 08	 cmp	 esi, 8
  00030	73 1a		 jae	 SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  00032	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00035	3b f0		 cmp	 esi, eax
  00037	0f 42 c6	 cmovb	 eax, esi
  0003a	50		 push	 eax
  0003b	6a 01		 push	 1
  0003d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  00042	85 f6		 test	 esi, esi
  00044	5e		 pop	 esi
  00045	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  0004c	85 f6		 test	 esi, esi
  0004e	75 12		 jne	 SHORT $LN88@Grow

; 2233 : 			_Eos(0);	// new size is zero, just null terminate

  00050	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00054	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00057	72 02		 jb	 SHORT $LN80@Grow
  00059	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN80@Grow:
  0005b	33 c0		 xor	 eax, eax
  0005d	85 f6		 test	 esi, esi
  0005f	66 89 01	 mov	 WORD PTR [ecx], ax
$LN88@Grow:
  00062	0f 95 c0	 setne	 al
  00065	5e		 pop	 esi

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN89@Grow:

; 2226 : 			_Xlen();	// result too long

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0006f	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN91@Grow:
$LN87@Grow:
  00074	cc		 int	 3
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00003	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00007	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0000a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000d	72 0c		 jb	 SHORT $LN11@Eos
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	33 c9		 xor	 ecx, ecx
  00013	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx

; 2220 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

$LN11@Eos:
  0001b	33 c0		 xor	 eax, eax
  0001d	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 2220 : 		}

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$1$ = -24						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f8		 mov	 edi, eax
  00035	83 cf 07	 or	 edi, 7

; 2184 : 		if (max_size() < _Newres)

  00038	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f8		 mov	 edi, eax
  00042	eb 27		 jmp	 SHORT $LN108@Copy
$LN2@Copy:

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00044	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e7		 mul	 edi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b ca		 cmp	 ecx, edx
  00056	76 13		 jbe	 SHORT $LN108@Copy

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 2189 : 			_Newres = this->_Myres()

  0005d	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  00060	2b c1		 sub	 eax, ecx
  00062	3b d8		 cmp	 ebx, eax
  00064	76 05		 jbe	 SHORT $LN108@Copy

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()

  00066	bf fe ff ff 7f	 mov	 edi, 2147483646		; 7ffffffeH
$LN108@Copy:

; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  0006b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	50		 push	 eax
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  0007d	8b d0		 mov	 edx, eax
  0007f	eb 29		 jmp	 SHORT $LN429@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00081	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax
  0008a	40		 inc	 eax
  0008b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0008e	50		 push	 eax
  0008f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00093	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00098	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN426@Copy
  000a0	c3		 ret	 0
$LN426@Copy:
  000a1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000a4	8b 7d 08	 mov	 edi, DWORD PTR __Newres$[ebp]
  000a7	8b 55 e8	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN429@Copy:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

  000aa	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000ad	89 55 e8	 mov	 DWORD PTR __Ptr$1$[ebp], edx
  000b0	85 db		 test	 ebx, ebx
  000b2	74 1e		 je	 SHORT $LN260@Copy

; 2208 : 			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),

  000b4	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000b8	72 04		 jb	 SHORT $LN251@Copy
  000ba	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bc	eb 02		 jmp	 SHORT $LN252@Copy
$LN251@Copy:
  000be	8b ce		 mov	 ecx, esi
$LN252@Copy:
  000c0	85 db		 test	 ebx, ebx
  000c2	74 0e		 je	 SHORT $LN260@Copy
  000c4	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000c7	50		 push	 eax
  000c8	51		 push	 ecx
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 _memcpy
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN260@Copy:

; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);

  000d2	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d5	83 f8 08	 cmp	 eax, 8
  000d8	72 0b		 jb	 SHORT $LN266@Copy
  000da	40		 inc	 eax
  000db	8b ce		 mov	 ecx, esi
  000dd	50		 push	 eax
  000de	ff 36		 push	 DWORD PTR [esi]
  000e0	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN266@Copy:
  000e5	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  000ec	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000f0	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000f7	72 04		 jb	 SHORT $LN356@Copy
  000f9	8b 06		 mov	 eax, DWORD PTR [esi]
  000fb	eb 02		 jmp	 SHORT $LN357@Copy
$LN356@Copy:
  000fd	8b c6		 mov	 eax, esi
$LN357@Copy:
  000ff	33 c9		 xor	 ecx, ecx
  00101	66 89 08	 mov	 WORD PTR [eax], cx

; 2211 : 		this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);

  00104	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  00107	89 06		 mov	 DWORD PTR [esi], eax

; 2212 : 		this->_Myres() = _Newres;

  00109	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 2213 : 		_Eos(_Oldlen);

  0010c	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00110	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00113	72 02		 jb	 SHORT $LN420@Copy
  00115	8b f0		 mov	 esi, eax
$LN420@Copy:
  00117	33 c0		 xor	 eax, eax
  00119	66 89 04 5e	 mov	 WORD PTR [esi+ebx*2], ax

; 2214 : 		}

  0011d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00120	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00127	59		 pop	 ecx
  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00131	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00134	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00137	83 f8 08	 cmp	 eax, 8
  0013a	72 0b		 jb	 SHORT $LN144@Copy
  0013c	40		 inc	 eax
  0013d	8b ce		 mov	 ecx, esi
  0013f	50		 push	 eax
  00140	ff 36		 push	 DWORD PTR [esi]
  00142	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN144@Copy:
  00147	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0014e	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00152	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00159	72 02		 jb	 SHORT $LN235@Copy
  0015b	8b 36		 mov	 esi, DWORD PTR [esi]
$LN235@Copy:
  0015d	33 c0		 xor	 eax, eax

; 2203 : 			_RERAISE;

  0015f	50		 push	 eax
  00160	50		 push	 eax
  00161	66 89 06	 mov	 WORD PTR [esi], ax
  00164	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN430@Copy:
$LN428@Copy:
  00169	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]

; 2113 : 		if (_Size <= _Max_effective_size)

  00009	39 45 0c	 cmp	 DWORD PTR __Size$[ebp], eax
  0000c	0f 46 45 0c	 cmovbe	 eax, DWORD PTR __Size$[ebp]

; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::capacity, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Myres());

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1790 : 		}

  00003	c3		 ret	 0
?capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1772 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1765 : 		return (this->_Mysize());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1766 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1743 : 		return (this->_Myptr());

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN13@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1744 : 		}

  00008	c3		 ret	 0

; 1743 : 		return (this->_Myptr());

$LN13@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1744 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1348 : 		_Check_offset(_Off);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	0f 82 88 00 00
	00		 jb	 $LN95@erase

; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  00015	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00018	8b c7		 mov	 eax, edi
  0001a	2b c1		 sub	 eax, ecx
  0001c	3b c2		 cmp	 eax, edx
  0001e	77 27		 ja	 SHORT $LN2@erase

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

  00020	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00023	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00027	72 10		 jb	 SHORT $LN41@erase
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	33 d2		 xor	 edx, edx
  0002d	5f		 pop	 edi
  0002e	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1357 : 			}
; 1358 : 		return (*this);

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi

; 1359 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

$LN41@erase:
  00039	8b c6		 mov	 eax, esi
  0003b	33 d2		 xor	 edx, edx
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1359 : 		}

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@erase:

; 1351 : 		else if (0 < _Count)

  00047	85 d2		 test	 edx, edx
  00049	74 4a		 je	 SHORT $LN92@erase

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;

  0004b	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0004f	72 04		 jb	 SHORT $LN58@erase
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	eb 02		 jmp	 SHORT $LN59@erase
$LN58@erase:
  00055	8b c6		 mov	 eax, esi
$LN59@erase:

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  00057	2b fa		 sub	 edi, edx
  00059	53		 push	 ebx
  0005a	8d 1c 48	 lea	 ebx, DWORD PTR [eax+ecx*2]

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  0005d	8b c7		 mov	 eax, edi
  0005f	2b c1		 sub	 eax, ecx
  00061	74 10		 je	 SHORT $LN74@erase
  00063	03 c0		 add	 eax, eax
  00065	50		 push	 eax
  00066	8d 04 53	 lea	 eax, DWORD PTR [ebx+edx*2]
  00069	50		 push	 eax
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _memmove
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN74@erase:

; 1356 : 			_Eos(_Newsize);

  00073	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00077	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0007a	5b		 pop	 ebx
  0007b	72 10		 jb	 SHORT $LN87@erase
  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	33 c9		 xor	 ecx, ecx
  00081	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1357 : 			}
; 1358 : 		return (*this);

  00085	8b c6		 mov	 eax, esi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi

; 1359 : 		}

  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8

; 1356 : 			_Eos(_Newsize);

$LN87@erase:
  0008d	8b c6		 mov	 eax, esi
  0008f	33 c9		 xor	 ecx, ecx
  00091	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN92@erase:

; 1357 : 			}
; 1358 : 		return (*this);

  00095	5f		 pop	 edi
  00096	8b c6		 mov	 eax, esi
  00098	5e		 pop	 esi

; 1359 : 		}

  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN95@erase:

; 1348 : 		_Check_offset(_Off);

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  000a2	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN97@erase:
$LN94@erase:
  000a7	cc		 int	 3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1340 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 : 		_Check_offset(_Off);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	72 29		 jb	 SHORT $LN37@erase

; 1342 : 		_Eos(_Off);

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000e	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00012	72 10		 jb	 SHORT $LN29@erase
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	56		 push	 esi
  00017	33 f6		 xor	 esi, esi
  00019	66 89 34 42	 mov	 WORD PTR [edx+eax*2], si

; 1343 : 		return (*this);

  0001d	8b c1		 mov	 eax, ecx
  0001f	5e		 pop	 esi

; 1344 : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4

; 1342 : 		_Eos(_Off);

$LN29@erase:
  00024	8b d1		 mov	 edx, ecx
  00026	56		 push	 esi
  00027	33 f6		 xor	 esi, esi
  00029	66 89 34 42	 mov	 WORD PTR [edx+eax*2], si

; 1343 : 		return (*this);

  0002d	8b c1		 mov	 eax, ecx
  0002f	5e		 pop	 esi

; 1344 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN37@erase:

; 1341 : 		_Check_offset(_Off);

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00039	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN39@erase:
$LN36@erase:
  0003e	cc		 int	 3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
tv845 = 8						; size = 4
tv843 = 8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
tv846 = 16						; size = 4
__Roff$ = 16						; size = 4
tv848 = 20						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert, COMDAT
; _this$ = ecx

; 1223 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1224 : 		_Check_offset(_Off);

  00008	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000b	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0000e	0f 82 76 01 00
	00		 jb	 $LN291@insert

; 1225 : 		_Right._Check_offset(_Roff);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 55 10	 mov	 edx, DWORD PTR __Roff$[ebp]
  0001a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001d	3b c2		 cmp	 eax, edx
  0001f	0f 82 6f 01 00
	00		 jb	 $LN293@insert

; 1226 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00025	8b 7d 14	 mov	 edi, DWORD PTR __Count$[ebp]
  00028	2b c2		 sub	 eax, edx
  0002a	3b f8		 cmp	 edi, eax
  0002c	0f 47 f8	 cmova	 edi, eax

; 1227 : 		if (npos - this->_Mysize() <= _Count)

  0002f	8b c1		 mov	 eax, ecx
  00031	f7 d0		 not	 eax
  00033	3b c7		 cmp	 eax, edi
  00035	0f 86 63 01 00
	00		 jbe	 $LN294@insert

; 1229 : 
; 1230 : 		const size_type _Num = this->_Mysize() + _Count;

  0003b	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]

; 1231 : 		if (0 < _Count && _Grow(_Num))

  0003e	85 ff		 test	 edi, edi
  00040	0f 84 3b 01 00
	00		 je	 $LN285@insert
  00046	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  0004c	0f 87 56 01 00
	00		 ja	 $LN295@insert
  00052	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00055	73 20		 jae	 SHORT $LN75@insert
  00057	51		 push	 ecx
  00058	53		 push	 ebx
  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  00060	85 db		 test	 ebx, ebx
  00062	0f 84 19 01 00
	00		 je	 $LN285@insert
$LN289@insert:

; 1232 : 			{	// make room and insert new stuff
; 1233 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00068	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0006b	83 f8 08	 cmp	 eax, 8
  0006e	72 32		 jb	 SHORT $LN178@insert
  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00072	89 4d 14	 mov	 DWORD PTR tv848[ebp], ecx
  00075	eb 2e		 jmp	 SHORT $LN179@insert

; 1231 : 		if (0 < _Count && _Grow(_Num))

$LN75@insert:
  00077	85 db		 test	 ebx, ebx
  00079	75 ed		 jne	 SHORT $LN289@insert
  0007b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0007e	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00082	72 10		 jb	 SHORT $LN152@insert
  00084	8b 06		 mov	 eax, DWORD PTR [esi]
  00086	33 c9		 xor	 ecx, ecx
  00088	5f		 pop	 edi
  00089	66 89 08	 mov	 WORD PTR [eax], cx

; 1244 : 			}
; 1245 : 		return (*this);

  0008c	8b c6		 mov	 eax, esi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 1246 : 		}

  00090	5d		 pop	 ebp
  00091	c2 10 00	 ret	 16			; 00000010H

; 1231 : 		if (0 < _Count && _Grow(_Num))

$LN152@insert:
  00094	8b c6		 mov	 eax, esi
  00096	33 c9		 xor	 ecx, ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	66 89 08	 mov	 WORD PTR [eax], cx

; 1246 : 		}

  0009e	5d		 pop	 ebp
  0009f	c2 10 00	 ret	 16			; 00000010H

; 1232 : 			{	// make room and insert new stuff
; 1233 : 			_Traits::move(this->_Myptr() + _Off + _Count,

$LN178@insert:
  000a2	89 75 14	 mov	 DWORD PTR tv848[ebp], esi
$LN179@insert:
  000a5	83 f8 08	 cmp	 eax, 8
  000a8	72 04		 jb	 SHORT $LN192@insert
  000aa	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ac	eb 02		 jmp	 SHORT $LN193@insert
$LN192@insert:
  000ae	8b ce		 mov	 ecx, esi
$LN193@insert:
  000b0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000b3	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000b6	2b c2		 sub	 eax, edx
  000b8	74 1c		 je	 SHORT $LN199@insert
  000ba	03 c0		 add	 eax, eax
  000bc	50		 push	 eax
  000bd	8b 45 14	 mov	 eax, DWORD PTR tv848[ebp]
  000c0	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  000c3	50		 push	 eax
  000c4	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  000c7	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _memmove
  000d0	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN199@insert:

; 1234 : 				this->_Myptr() + _Off,
; 1235 : 				this->_Mysize() - _Off);	// empty out hole
; 1236 : 			if (this == &_Right)

  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  000d9	3b f1		 cmp	 esi, ecx
  000db	75 4c		 jne	 SHORT $LN4@insert

; 1237 : 				_Traits::move(this->_Myptr() + _Off,

  000dd	8b 45 10	 mov	 eax, DWORD PTR __Roff$[ebp]
  000e0	3b d0		 cmp	 edx, eax
  000e2	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000e5	0f 43 c8	 cmovae	 ecx, eax
  000e8	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000eb	83 f8 08	 cmp	 eax, 8
  000ee	72 0a		 jb	 SHORT $LN212@insert
  000f0	8b 16		 mov	 edx, DWORD PTR [esi]
  000f2	89 55 10	 mov	 DWORD PTR tv846[ebp], edx
  000f5	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000f8	eb 03		 jmp	 SHORT $LN213@insert
$LN212@insert:
  000fa	89 75 10	 mov	 DWORD PTR tv846[ebp], esi
$LN213@insert:
  000fd	83 f8 08	 cmp	 eax, 8
  00100	72 07		 jb	 SHORT $LN226@insert
  00102	8b 06		 mov	 eax, DWORD PTR [esi]
  00104	89 45 08	 mov	 DWORD PTR tv845[ebp], eax
  00107	eb 03		 jmp	 SHORT $LN227@insert
$LN226@insert:
  00109	89 75 08	 mov	 DWORD PTR tv845[ebp], esi
$LN227@insert:
  0010c	85 ff		 test	 edi, edi
  0010e	74 4f		 je	 SHORT $LN267@insert
  00110	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  00113	50		 push	 eax
  00114	8b 45 10	 mov	 eax, DWORD PTR tv846[ebp]
  00117	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0011a	50		 push	 eax
  0011b	8b 45 08	 mov	 eax, DWORD PTR tv845[ebp]
  0011e	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _memmove

; 1238 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1239 : 						_Count);	// substring
; 1240 : 			else

  00127	eb 33		 jmp	 SHORT $LN290@insert
$LN4@insert:

; 1241 : 				_Traits::copy(this->_Myptr() + _Off,

  00129	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  0012d	72 02		 jb	 SHORT $LN246@insert
  0012f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN246@insert:
  00131	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00135	72 07		 jb	 SHORT $LN260@insert
  00137	8b 06		 mov	 eax, DWORD PTR [esi]
  00139	89 45 08	 mov	 DWORD PTR tv843[ebp], eax
  0013c	eb 03		 jmp	 SHORT $LN261@insert
$LN260@insert:
  0013e	89 75 08	 mov	 DWORD PTR tv843[ebp], esi
$LN261@insert:
  00141	85 ff		 test	 edi, edi
  00143	74 1a		 je	 SHORT $LN267@insert
  00145	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  00148	50		 push	 eax
  00149	8b 45 10	 mov	 eax, DWORD PTR __Roff$[ebp]
  0014c	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  0014f	50		 push	 eax
  00150	8b 45 08	 mov	 eax, DWORD PTR tv843[ebp]
  00153	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _memcpy
$LN290@insert:
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN267@insert:

; 1242 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1243 : 			_Eos(_Num);

  0015f	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00163	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00166	72 11		 jb	 SHORT $LN280@insert
  00168	8b 06		 mov	 eax, DWORD PTR [esi]
  0016a	33 c9		 xor	 ecx, ecx
  0016c	5f		 pop	 edi
  0016d	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx

; 1244 : 			}
; 1245 : 		return (*this);

  00171	8b c6		 mov	 eax, esi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx

; 1246 : 		}

  00175	5d		 pop	 ebp
  00176	c2 10 00	 ret	 16			; 00000010H

; 1242 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1243 : 			_Eos(_Num);

$LN280@insert:
  00179	8b c6		 mov	 eax, esi
  0017b	33 c9		 xor	 ecx, ecx
  0017d	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx
$LN285@insert:

; 1244 : 			}
; 1245 : 		return (*this);

  00181	5f		 pop	 edi
  00182	8b c6		 mov	 eax, esi
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx

; 1246 : 		}

  00186	5d		 pop	 ebp
  00187	c2 10 00	 ret	 16			; 00000010H
$LN291@insert:

; 1224 : 		_Check_offset(_Off);

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0018f	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN296@insert:
$LN293@insert:

; 1225 : 		_Right._Check_offset(_Roff);

  00194	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00199	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN297@insert:
$LN294@insert:

; 1228 : 			_Xlen();	// result too long

  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  001a3	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN298@insert:
$LN295@insert:

; 1231 : 		if (0 < _Count && _Grow(_Num))

  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  001ad	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN299@insert:
$LN287@insert:
  001b2	cc		 int	 3
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert, COMDAT
; _this$ = ecx

; 1217 : 		{	// insert _Right at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1218 : 		return (insert(_Off, _Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  0000d	e8 00 00 00 00	 call	 ?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert

; 1219 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1180 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  0000d	75 0e		 jne	 SHORT $LN5@assign
  0000f	33 c0		 xor	 eax, eax
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00018	5e		 pop	 esi

; 1183 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

$LN5@assign:
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL7@assign:
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	83 c0 02	 add	 eax, 2
  00029	66 85 c9	 test	 cx, cx
  0002c	75 f5		 jne	 SHORT $LL7@assign
  0002e	2b c7		 sub	 eax, edi
  00030	8b ce		 mov	 ecx, esi
  00032	5f		 pop	 edi
  00033	d1 f8		 sar	 eax, 1
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0003c	5e		 pop	 esi

; 1183 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 48		 je	 SHORT $LN2@assign
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 08	 cmp	 ecx, 8
  00014	72 04		 jb	 SHORT $LN20@assign
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN21@assign
$LN20@assign:
  0001a	8b c6		 mov	 eax, esi
$LN21@assign:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 36		 jb	 SHORT $LN2@assign
  00020	83 f9 08	 cmp	 ecx, 8
  00023	72 04		 jb	 SHORT $LN34@assign
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN35@assign
$LN34@assign:
  00029	8b d6		 mov	 edx, esi
$LN35@assign:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00031	3b c3		 cmp	 eax, ebx
  00033	76 21		 jbe	 SHORT $LN2@assign

; 1168 : 			return (assign(*this,

  00035	83 f9 08	 cmp	 ecx, 8
  00038	72 04		 jb	 SHORT $LN57@assign
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	eb 02		 jmp	 SHORT $LN58@assign
$LN57@assign:
  0003e	8b c6		 mov	 eax, esi
$LN58@assign:
  00040	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00043	2b d8		 sub	 ebx, eax
  00045	8b ce		 mov	 ecx, esi
  00047	d1 fb		 sar	 ebx, 1
  00049	53		 push	 ebx
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx

; 1177 : 		}

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN2@assign:
  00056	57		 push	 edi

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  00057	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	0f 87 88 00 00
	00		 ja	 $LN189@assign
  00066	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00069	73 19		 jae	 SHORT $LN63@assign
  0006b	ff 76 10	 push	 DWORD PTR [esi+16]
  0006e	8b ce		 mov	 ecx, esi
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  00076	85 ff		 test	 edi, edi
  00078	74 6b		 je	 SHORT $LN183@assign
$LN188@assign:

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

  0007a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0007e	72 2f		 jb	 SHORT $LN158@assign
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	eb 2d		 jmp	 SHORT $LN159@assign

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN63@assign:
  00084	85 ff		 test	 edi, edi
  00086	75 f2		 jne	 SHORT $LN188@assign
  00088	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0008c	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0008f	72 10		 jb	 SHORT $LN140@assign
  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	33 c9		 xor	 ecx, ecx
  00095	5f		 pop	 edi
  00096	66 89 08	 mov	 WORD PTR [eax], cx

; 1175 : 			}
; 1176 : 		return (*this);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 1177 : 		}

  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN140@assign:
  000a1	8b c6		 mov	 eax, esi
  000a3	33 c9		 xor	 ecx, ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	66 89 08	 mov	 WORD PTR [eax], cx

; 1177 : 		}

  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

$LN158@assign:
  000af	8b ce		 mov	 ecx, esi
$LN159@assign:
  000b1	85 ff		 test	 edi, edi
  000b3	74 0e		 je	 SHORT $LN165@assign
  000b5	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  000b8	50		 push	 eax
  000b9	53		 push	 ebx
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _memcpy
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN165@assign:

; 1174 : 			_Eos(_Count);

  000c3	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000c7	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000ca	72 11		 jb	 SHORT $LN178@assign
  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	33 c9		 xor	 ecx, ecx
  000d0	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1175 : 			}
; 1176 : 		return (*this);

  000d4	8b c6		 mov	 eax, esi
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 1177 : 		}

  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8

; 1174 : 			_Eos(_Count);

$LN178@assign:
  000dd	8b c6		 mov	 eax, esi
  000df	33 c9		 xor	 ecx, ecx
  000e1	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN183@assign:

; 1175 : 			}
; 1176 : 		return (*this);

  000e5	5f		 pop	 edi
  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1177 : 		}

  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
$LN189@assign:

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f3	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN191@assign:
$LN186@assign:
  000f8	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1150 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 e3 00 00
	00		 jb	 $LN210@assign

; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00019	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
  0001c	2b c1		 sub	 eax, ecx
  0001e	3b f8		 cmp	 edi, eax
  00020	0f 47 f8	 cmova	 edi, eax

; 1152 : 
; 1153 : 		if (this == &_Right)

  00023	3b f3		 cmp	 esi, ebx
  00025	75 33		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  00027	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  0002a	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0002d	0f 82 d3 00 00
	00		 jb	 $LN212@assign
  00033	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00036	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0003a	72 04		 jb	 SHORT $LN63@assign
  0003c	8b 16		 mov	 edx, DWORD PTR [esi]
  0003e	eb 02		 jmp	 SHORT $LN64@assign
$LN63@assign:
  00040	8b d6		 mov	 edx, esi
$LN64@assign:
  00042	33 ff		 xor	 edi, edi
  00044	51		 push	 ecx
  00045	57		 push	 edi
  00046	8b ce		 mov	 ecx, esi
  00048	66 89 3c 42	 mov	 WORD PTR [edx+eax*2], di
  0004c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00051	5f		 pop	 edi

; 1160 : 			}
; 1161 : 		return (*this);

  00052	8b c6		 mov	 eax, esi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 1162 : 		}

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
$LN2@assign:

; 1155 : 		else if (_Grow(_Count))

  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	0f 87 aa 00 00
	00		 ja	 $LN213@assign
  00066	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00069	73 24		 jae	 SHORT $LN72@assign
  0006b	ff 76 10	 push	 DWORD PTR [esi+16]
  0006e	8b ce		 mov	 ecx, esi
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00079	85 ff		 test	 edi, edi
  0007b	74 76		 je	 SHORT $LN205@assign
$LN209@assign:

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

  0007d	83 7b 14 08	 cmp	 DWORD PTR [ebx+20], 8
  00081	72 02		 jb	 SHORT $LN166@assign
  00083	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN166@assign:
  00085	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00089	72 2f		 jb	 SHORT $LN180@assign
  0008b	8b 16		 mov	 edx, DWORD PTR [esi]
  0008d	eb 2d		 jmp	 SHORT $LN181@assign

; 1155 : 		else if (_Grow(_Count))

$LN72@assign:
  0008f	85 ff		 test	 edi, edi
  00091	75 ea		 jne	 SHORT $LN209@assign
  00093	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00097	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0009a	72 10		 jb	 SHORT $LN149@assign
  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1160 : 			}
; 1161 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1162 : 		}

  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH

; 1155 : 		else if (_Grow(_Count))

$LN149@assign:
  000ac	8b c6		 mov	 eax, esi
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	66 89 08	 mov	 WORD PTR [eax], cx

; 1162 : 		}

  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

$LN180@assign:
  000ba	8b d6		 mov	 edx, esi
$LN181@assign:
  000bc	85 ff		 test	 edi, edi
  000be	74 11		 je	 SHORT $LN187@assign
  000c0	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  000c3	50		 push	 eax
  000c4	8d 04 4b	 lea	 eax, DWORD PTR [ebx+ecx*2]
  000c7	50		 push	 eax
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _memcpy
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN187@assign:

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

  000d1	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000d5	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000d8	72 11		 jb	 SHORT $LN200@assign
  000da	8b 06		 mov	 eax, DWORD PTR [esi]
  000dc	33 c9		 xor	 ecx, ecx
  000de	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1160 : 			}
; 1161 : 		return (*this);

  000e2	8b c6		 mov	 eax, esi
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 1162 : 		}

  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

$LN200@assign:
  000eb	8b c6		 mov	 eax, esi
  000ed	33 c9		 xor	 ecx, ecx
  000ef	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN205@assign:

; 1160 : 			}
; 1161 : 		return (*this);

  000f3	5f		 pop	 edi
  000f4	8b c6		 mov	 eax, esi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 1162 : 		}

  000f8	5d		 pop	 ebp
  000f9	c2 0c 00	 ret	 12			; 0000000cH
$LN210@assign:

; 1150 : 		_Right._Check_offset(_Roff);

  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00101	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN214@assign:
$LN212@assign:

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0010b	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN215@assign:
$LN213@assign:

; 1155 : 		else if (_Grow(_Count))

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00115	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN216@assign:
$LN207@assign:
  0011a	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1105 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  0000d	75 0e		 jne	 SHORT $LN5@append
  0000f	33 c0		 xor	 eax, eax
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00018	5e		 pop	 esi

; 1108 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

$LN5@append:
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL7@append:
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	83 c0 02	 add	 eax, 2
  00029	66 85 c9	 test	 cx, cx
  0002c	75 f5		 jne	 SHORT $LL7@append
  0002e	2b c7		 sub	 eax, edi
  00030	8b ce		 mov	 ecx, esi
  00032	5f		 pop	 edi
  00033	d1 f8		 sar	 eax, 1
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0003c	5e		 pop	 esi

; 1108 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1087 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1088 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1089 : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 48		 je	 SHORT $LN2@append
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 08	 cmp	 ecx, 8
  00014	72 04		 jb	 SHORT $LN21@append
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN22@append
$LN21@append:
  0001a	8b c6		 mov	 eax, esi
$LN22@append:
  0001c	3b f8		 cmp	 edi, eax
  0001e	72 36		 jb	 SHORT $LN2@append
  00020	83 f9 08	 cmp	 ecx, 8
  00023	72 04		 jb	 SHORT $LN35@append
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN36@append
$LN35@append:
  00029	8b d6		 mov	 edx, esi
$LN36@append:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00031	3b c7		 cmp	 eax, edi
  00033	76 21		 jbe	 SHORT $LN2@append

; 1090 : 			return (append(*this,

  00035	83 f9 08	 cmp	 ecx, 8
  00038	72 04		 jb	 SHORT $LN58@append
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	eb 02		 jmp	 SHORT $LN59@append
$LN58@append:
  0003e	8b c6		 mov	 eax, esi
$LN59@append:
  00040	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00043	2b f8		 sub	 edi, eax
  00045	8b ce		 mov	 ecx, esi
  00047	d1 ff		 sar	 edi, 1
  00049	57		 push	 edi
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 1102 : 		}

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN2@append:

; 1091 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1092 : 		if (npos - this->_Mysize() <= _Count)

  00056	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00059	8b c2		 mov	 eax, edx
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005e	f7 d0		 not	 eax
  00060	3b c1		 cmp	 eax, ecx
  00062	0f 86 a7 00 00
	00		 jbe	 $LN219@append

; 1094 : 
; 1095 : 		const size_type _Num = this->_Mysize() + _Count;

  00068	53		 push	 ebx
  00069	8d 1c 0a	 lea	 ebx, DWORD PTR [edx+ecx]

; 1096 : 		if (0 < _Count && _Grow(_Num))

  0006c	85 c9		 test	 ecx, ecx
  0006e	0f 84 92 00 00
	00		 je	 $LN213@append
  00074	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  0007a	0f 87 99 00 00
	00		 ja	 $LN221@append
  00080	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00083	73 1a		 jae	 SHORT $LN85@append
  00085	52		 push	 edx
  00086	53		 push	 ebx
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0008e	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00091	85 db		 test	 ebx, ebx
  00093	74 71		 je	 SHORT $LN213@append
$LN218@append:

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

  00095	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00099	72 2f		 jb	 SHORT $LN179@append
  0009b	8b 16		 mov	 edx, DWORD PTR [esi]
  0009d	eb 2d		 jmp	 SHORT $LN180@append

; 1096 : 		if (0 < _Count && _Grow(_Num))

$LN85@append:
  0009f	85 db		 test	 ebx, ebx
  000a1	75 f2		 jne	 SHORT $LN218@append
  000a3	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000a6	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000aa	72 10		 jb	 SHORT $LN162@append
  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5b		 pop	 ebx
  000b1	5f		 pop	 edi
  000b2	66 89 08	 mov	 WORD PTR [eax], cx

; 1100 : 			}
; 1101 : 		return (*this);

  000b5	8b c6		 mov	 eax, esi
  000b7	5e		 pop	 esi

; 1102 : 		}

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8

; 1096 : 		if (0 < _Count && _Grow(_Num))

$LN162@append:
  000bc	8b c6		 mov	 eax, esi
  000be	33 c9		 xor	 ecx, ecx
  000c0	5b		 pop	 ebx
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	66 89 08	 mov	 WORD PTR [eax], cx

; 1102 : 		}

  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

$LN179@append:
  000ca	8b d6		 mov	 edx, esi
$LN180@append:
  000cc	85 c9		 test	 ecx, ecx
  000ce	74 14		 je	 SHORT $LN195@append
  000d0	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  000d3	50		 push	 eax
  000d4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d7	57		 push	 edi
  000d8	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _memcpy
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN195@append:

; 1099 : 			_Eos(_Num);

  000e4	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000e8	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000eb	72 11		 jb	 SHORT $LN208@append
  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	33 c9		 xor	 ecx, ecx
  000f1	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx

; 1100 : 			}
; 1101 : 		return (*this);

  000f5	8b c6		 mov	 eax, esi
  000f7	5b		 pop	 ebx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi

; 1102 : 		}

  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8

; 1099 : 			_Eos(_Num);

$LN208@append:
  000fe	8b c6		 mov	 eax, esi
  00100	33 c9		 xor	 ecx, ecx
  00102	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx
$LN213@append:

; 1100 : 			}
; 1101 : 		return (*this);

  00106	5b		 pop	 ebx
  00107	5f		 pop	 edi
  00108	8b c6		 mov	 eax, esi
  0010a	5e		 pop	 esi

; 1102 : 		}

  0010b	5d		 pop	 ebp
  0010c	c2 08 00	 ret	 8
$LN219@append:

; 1093 : 			_Xlen();	// result too long

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00114	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN222@append:
$LN221@append:

; 1096 : 		if (0 < _Count && _Grow(_Num))

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN223@append:
$LN216@append:
  00123	cc		 int	 3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1070 : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1071 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 d0 00 00
	00		 jb	 $LN203@append

; 1072 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1073 : 		if (npos - this->_Mysize() <= _Count)

  00019	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001c	2b c1		 sub	 eax, ecx
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00021	3b c8		 cmp	 ecx, eax
  00023	0f 47 c8	 cmova	 ecx, eax
  00026	8b c2		 mov	 eax, edx
  00028	f7 d0		 not	 eax
  0002a	89 4d 10	 mov	 DWORD PTR __Count$[ebp], ecx
  0002d	3b c1		 cmp	 eax, ecx
  0002f	0f 86 be 00 00
	00		 jbe	 $LN205@append

; 1075 : 
; 1076 : 		const size_type _Num = this->_Mysize() + _Count;

  00035	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1077 : 		if (0 < _Count && _Grow(_Num))

  00038	85 c9		 test	 ecx, ecx
  0003a	0f 84 a0 00 00
	00		 je	 $LN198@append
  00040	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00046	0f 87 b1 00 00
	00		 ja	 $LN206@append
  0004c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0004f	73 22		 jae	 SHORT $LN56@append
  00051	52		 push	 edx
  00052	57		 push	 edi
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005d	85 ff		 test	 edi, edi
  0005f	74 7f		 je	 SHORT $LN198@append
$LN202@append:

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

  00061	83 7b 14 08	 cmp	 DWORD PTR [ebx+20], 8
  00065	72 02		 jb	 SHORT $LN150@append
  00067	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN150@append:
  00069	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0006d	72 2f		 jb	 SHORT $LN164@append
  0006f	8b 16		 mov	 edx, DWORD PTR [esi]
  00071	eb 2d		 jmp	 SHORT $LN165@append

; 1077 : 		if (0 < _Count && _Grow(_Num))

$LN56@append:
  00073	85 ff		 test	 edi, edi
  00075	75 ea		 jne	 SHORT $LN202@append
  00077	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0007a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0007e	72 10		 jb	 SHORT $LN133@append
  00080	8b 06		 mov	 eax, DWORD PTR [esi]
  00082	33 c9		 xor	 ecx, ecx
  00084	5f		 pop	 edi
  00085	66 89 08	 mov	 WORD PTR [eax], cx

; 1082 : 			}
; 1083 : 		return (*this);

  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1084 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 0c 00	 ret	 12			; 0000000cH

; 1077 : 		if (0 < _Count && _Grow(_Num))

$LN133@append:
  00090	8b c6		 mov	 eax, esi
  00092	33 c9		 xor	 ecx, ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	66 89 08	 mov	 WORD PTR [eax], cx

; 1084 : 		}

  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

$LN164@append:
  0009e	8b d6		 mov	 edx, esi
$LN165@append:
  000a0	85 c9		 test	 ecx, ecx
  000a2	74 1a		 je	 SHORT $LN180@append
  000a4	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  000a7	50		 push	 eax
  000a8	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  000ab	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  000ae	50		 push	 eax
  000af	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000b2	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN180@append:

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

  000be	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000c2	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c5	72 11		 jb	 SHORT $LN193@append
  000c7	8b 06		 mov	 eax, DWORD PTR [esi]
  000c9	33 c9		 xor	 ecx, ecx
  000cb	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1082 : 			}
; 1083 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 1084 : 		}

  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

$LN193@append:
  000d8	8b c6		 mov	 eax, esi
  000da	33 c9		 xor	 ecx, ecx
  000dc	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN198@append:

; 1082 : 			}
; 1083 : 		return (*this);

  000e0	5f		 pop	 edi
  000e1	8b c6		 mov	 eax, esi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx

; 1084 : 		}

  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
$LN203@append:

; 1071 : 		_Right._Check_offset(_Roff);

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  000ee	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN207@append:
$LN205@append:

; 1074 : 			_Xlen();	// result too long

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f8	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN208@append:
$LN206@append:

; 1077 : 		if (0 < _Count && _Grow(_Num))

  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00102	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN209@append:
$LN200@append:
  00107	cc		 int	 3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1064 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1065 : 		return (append(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 1066 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1016 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1017 : 		_Tidy(true);

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 08	 cmp	 eax, 8
  00009	72 09		 jb	 SHORT $LN6@basic_stri
  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN6@basic_stri:
  00014	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0001b	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	72 09		 jb	 SHORT $LN96@basic_stri
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	33 c9		 xor	 ecx, ecx
  0002c	5e		 pop	 esi
  0002d	66 89 08	 mov	 WORD PTR [eax], cx

; 1018 : 		}

  00030	c3		 ret	 0

; 1017 : 		_Tidy(true);

$LN96@basic_stri:
  00031	33 c0		 xor	 eax, eax
  00033	66 89 06	 mov	 WORD PTR [esi], ax
  00036	5e		 pop	 esi

; 1018 : 		}

  00037	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv, COMDAT
; _this$ = ecx

; 961  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0000e	73 17		 jae	 SHORT $LN2@Assign_rv

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	83 c0 01	 add	 eax, 1
  00016	74 1d		 je	 SHORT $LN3@Assign_rv
  00018	03 c0		 add	 eax, eax
  0001a	50		 push	 eax
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 964  : 				_Right._Mysize() + 1);
; 965  : 		else

  00025	eb 0e		 jmp	 SHORT $LN3@Assign_rv
$LN2@Assign_rv:

; 966  : 			{	// copy pointer
; 967  : 			this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);

  00027	85 ff		 test	 edi, edi
  00029	74 04		 je	 SHORT $LN86@Assign_rv
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	89 07		 mov	 DWORD PTR [edi], eax
$LN86@Assign_rv:

; 968  : 			_Right._Bx()._Ptr = pointer();

  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@Assign_rv:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

  0003b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 972  : 		_Right._Tidy();

  00041	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00048	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0004c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00053	72 0d		 jb	 SHORT $LN231@Assign_rv
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	33 c9		 xor	 ecx, ecx
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	66 89 08	 mov	 WORD PTR [eax], cx

; 973  : 		}

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4

; 972  : 		_Right._Tidy();

$LN231@Assign_rv:
  00062	33 c0		 xor	 eax, eax
  00064	5f		 pop	 edi
  00065	66 89 06	 mov	 WORD PTR [esi], ax
  00068	5e		 pop	 esi

; 973  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 911  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 912  : 		_Tidy();
; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00019	66 89 06	 mov	 WORD PTR [esi], ax
  0001c	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv

; 914  : 		}

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 836  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00019	66 89 06	 mov	 WORD PTR [esi], ax
  0001c	66 39 02	 cmp	 WORD PTR [edx], ax
  0001f	75 12		 jne	 SHORT $LN113@basic_stri
  00021	33 c9		 xor	 ecx, ecx
  00023	51		 push	 ecx
  00024	52		 push	 edx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 839  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

$LN113@basic_stri:
  00033	8b ca		 mov	 ecx, edx
  00035	57		 push	 edi
  00036	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL115@basic_stri:
  00040	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00043	83 c1 02	 add	 ecx, 2
  00046	66 85 c0	 test	 ax, ax
  00049	75 f5		 jne	 SHORT $LL115@basic_stri
  0004b	2b cf		 sub	 ecx, edi
  0004d	d1 f9		 sar	 ecx, 1
  0004f	5f		 pop	 edi
  00050	51		 push	 ecx
  00051	52		 push	 edx
  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 839  : 		}

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  : 		_Tidy();

  00006	33 c0		 xor	 eax, eax

; 782  : 		assign(_Right, 0, npos);

  00008	6a ff		 push	 -1
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000e	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00015	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 783  : 		}

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres, COMDAT
; _this$ = ecx

; 739  : 		return (_Get_data()._Myres);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 740  : 		}

  00003	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres, COMDAT
; _this$ = ecx

; 734  : 		return (_Get_data()._Myres);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 735  : 		}

  00003	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 729  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 730  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 724  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 725  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx, COMDAT
; _this$ = ecx

; 714  : 		return (_Get_data()._Bx);

  00000	8b c1		 mov	 eax, ecx

; 715  : 		}

  00002	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 707  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 708  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 702  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 703  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 697  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 698  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 692  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 693  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 588  : 		: _Mypair(_Zero_then_variadic_args_t())

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 590  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 583  : 		return (_Get_data()._Myptr());

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 584  : 		}

  00008	c3		 ret	 0

; 583  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 584  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 578  : 		return (_Get_data()._Myptr());

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 579  : 		}

  00008	c3		 ret	 0

; 578  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 579  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 534  : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 499  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 1009 : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0000e	77 30		 ja	 SHORT $LN16@deallocate
  00010	03 c0		 add	 eax, eax
  00012	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00017	72 1a		 jb	 SHORT $LN7@deallocate
  00019	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001c	75 27		 jne	 SHORT $LN18@deallocate
  0001e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00021	3b c1		 cmp	 eax, ecx
  00023	73 25		 jae	 SHORT $LN19@deallocate
  00025	2b c8		 sub	 ecx, eax
  00027	83 f9 04	 cmp	 ecx, 4
  0002a	72 23		 jb	 SHORT $LN20@deallocate
  0002c	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0002f	77 23		 ja	 SHORT $LN21@deallocate
  00031	8b c8		 mov	 ecx, eax
$LN7@deallocate:
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4

; 988  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN16@deallocate:

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:
  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:
  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  00059	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		}

  00003	5d		 pop	 ebp

; 976  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 947  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 870  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 750  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00013	77 3b		 ja	 SHORT $LN14@allocate
  00015	03 c0		 add	 eax, eax
  00017	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001c	72 23		 jb	 SHORT $LN6@allocate
  0001e	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00021	3b c8		 cmp	 ecx, eax
  00023	76 30		 jbe	 SHORT $LN16@allocate
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	8b c8		 mov	 ecx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	85 c9		 test	 ecx, ecx
  00032	74 26		 je	 SHORT $LN17@allocate
  00034	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00037	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0003a	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	85 c0		 test	 eax, eax
  0004c	75 bc		 jne	 SHORT $LN12@allocate
  0004e	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:
  00050	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:
  00055	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:
  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:
  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00064	cc		 int	 3
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0000e	77 30		 ja	 SHORT $LN13@deallocate
  00010	03 c0		 add	 eax, eax
  00012	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00017	72 1a		 jb	 SHORT $LN5@deallocate
  00019	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001c	75 27		 jne	 SHORT $LN15@deallocate
  0001e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00021	3b c1		 cmp	 eax, ecx
  00023	73 25		 jae	 SHORT $LN16@deallocate
  00025	2b c8		 sub	 ecx, eax
  00027	83 f9 04	 cmp	 ecx, 4
  0002a	72 23		 jb	 SHORT $LN17@deallocate
  0002c	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0002f	77 23		 ja	 SHORT $LN18@deallocate
  00031	8b c8		 mov	 ecx, eax
$LN5@deallocate:
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4

; 721  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:
  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:
  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  00059	cc		 int	 3
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2283 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2271 : 		if (this->_Mysize() < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00009	72 04		 jb	 SHORT $LN17@Check_offs

; 2273 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN17@Check_offs:

; 2272 : 			_Xran();

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN19@Check_offs:
$LN16@Check_offs:
  00019	cc		 int	 3
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2266 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2248 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2249 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 26		 je	 SHORT $LN4@Tidy

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 20		 jb	 SHORT $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN57@Tidy

; 2256 : 				_Traits::copy(this->_Bx()._Buf,

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@Tidy:

; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00028	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002b	8b ce		 mov	 ecx, esi
  0002d	40		 inc	 eax
  0002e	50		 push	 eax
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
  00035	5b		 pop	 ebx
$LN4@Tidy:

; 2259 : 			}
; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00036	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2261 : 		_Eos(_Newsize);

  0003d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00041	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00044	72 0c		 jb	 SHORT $LN92@Tidy
  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 2262 : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8

; 2261 : 		_Eos(_Newsize);

$LN92@Tidy:
  00052	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 2262 : 		}

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2238 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 2d		 je	 SHORT $LN4@Inside
  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN16@Inside
  00013	8b 31		 mov	 esi, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN17@Inside
$LN16@Inside:
  00017	8b f1		 mov	 esi, ecx
$LN17@Inside:
  00019	3b d6		 cmp	 edx, esi
  0001b	72 1b		 jb	 SHORT $LN4@Inside
  0001d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN30@Inside
  00022	8b 31		 mov	 esi, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN31@Inside
$LN30@Inside:
  00026	8b f1		 mov	 esi, ecx
$LN31@Inside:
  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	03 c6		 add	 eax, esi
  0002d	3b c2		 cmp	 eax, edx
  0002f	76 07		 jbe	 SHORT $LN4@Inside

; 2242 : 		else
; 2243 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2244 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2244 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2225 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	77 59		 ja	 SHORT $LN89@Grow

; 2227 : 		if (this->_Myres() < _Newsize)

  0000c	39 71 14	 cmp	 DWORD PTR [ecx+20], esi
  0000f	73 13		 jae	 SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00011	ff 71 10	 push	 DWORD PTR [ecx+16]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0001a	85 f6		 test	 esi, esi
  0001c	5e		 pop	 esi
  0001d	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00024	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  00028	74 1f		 je	 SHORT $LN5@Grow
  0002a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0002d	73 1a		 jae	 SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  0002f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00032	3b f0		 cmp	 esi, eax
  00034	0f 42 c6	 cmovb	 eax, esi
  00037	50		 push	 eax
  00038	6a 01		 push	 1
  0003a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0003f	85 f6		 test	 esi, esi
  00041	5e		 pop	 esi
  00042	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 10		 jne	 SHORT $LN88@Grow

; 2233 : 			_Eos(0);	// new size is zero, just null terminate

  0004d	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00051	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00054	72 02		 jb	 SHORT $LN80@Grow
  00056	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN80@Grow:
  00058	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0005b	85 f6		 test	 esi, esi
$LN88@Grow:
  0005d	0f 95 c0	 setne	 al
  00060	5e		 pop	 esi

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN89@Grow:

; 2226 : 			_Xlen();	// result too long

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0006a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN91@Grow:
$LN87@Grow:
  0006f	cc		 int	 3
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0000a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000d	72 0a		 jb	 SHORT $LN11@Eos
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 2220 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

$LN11@Eos:
  00019	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 2220 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f8		 mov	 edi, eax
  00035	83 cf 0f	 or	 edi, 15			; 0000000fH

; 2184 : 		if (max_size() < _Newres)

  00038	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f8		 mov	 edi, eax
  0003f	eb 27		 jmp	 SHORT $LN108@Copy
$LN2@Copy:

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00041	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e7		 mul	 edi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN108@Copy

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 2189 : 			_Newres = this->_Myres()

  0005a	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN108@Copy

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()

  00063	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN108@Copy:

; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  00068	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00072	85 c0		 test	 eax, eax
  00074	75 04		 jne	 SHORT $LN136@Copy
  00076	33 db		 xor	 ebx, ebx
  00078	eb 6d		 jmp	 SHORT $LN19@Copy
$LN136@Copy:
  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 29		 jb	 SHORT $LN138@Copy
  00081	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00084	3b c8		 cmp	 ecx, eax
  00086	77 05		 ja	 SHORT $LN140@Copy
  00088	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN435@Copy:
$LN140@Copy:
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00093	83 c4 04	 add	 esp, 4
  00096	85 c0		 test	 eax, eax
  00098	75 05		 jne	 SHORT $LN141@Copy
  0009a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN436@Copy:
$LN141@Copy:
  0009f	8d 58 23	 lea	 ebx, DWORD PTR [eax+35]
  000a2	83 e3 e0	 and	 ebx, -32		; ffffffe0H
  000a5	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  000a8	eb 3d		 jmp	 SHORT $LN19@Copy
$LN138@Copy:
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b0	8b d8		 mov	 ebx, eax
  000b2	83 c4 04	 add	 esp, 4
  000b5	85 db		 test	 ebx, ebx
  000b7	75 2e		 jne	 SHORT $LN19@Copy
  000b9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN437@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000be	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  000c1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax
  000c7	40		 inc	 eax
  000c8	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000cb	50		 push	 eax
  000cc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000d0	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  000d5	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  000d8	b8 00 00 00 00	 mov	 eax, $LN432@Copy
  000dd	c3		 ret	 0
$LN432@Copy:
  000de	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e1	8b 7d 08	 mov	 edi, DWORD PTR __Newres$[ebp]
  000e4	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN19@Copy:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

  000e7	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  000ea	85 c0		 test	 eax, eax
  000ec	74 1b		 je	 SHORT $LN270@Copy

; 2208 : 			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),

  000ee	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000f2	72 04		 jb	 SHORT $LN261@Copy
  000f4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f6	eb 02		 jmp	 SHORT $LN262@Copy
$LN261@Copy:
  000f8	8b ce		 mov	 ecx, esi
$LN262@Copy:
  000fa	85 c0		 test	 eax, eax
  000fc	74 0b		 je	 SHORT $LN270@Copy
  000fe	50		 push	 eax
  000ff	51		 push	 ecx
  00100	53		 push	 ebx
  00101	e8 00 00 00 00	 call	 _memcpy
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN270@Copy:

; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);

  00109	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0010c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0010f	72 0b		 jb	 SHORT $LN274@Copy
  00111	40		 inc	 eax
  00112	8b ce		 mov	 ecx, esi
  00114	50		 push	 eax
  00115	ff 36		 push	 DWORD PTR [esi]
  00117	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN274@Copy:
  0011c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00123	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00127	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0012e	72 04		 jb	 SHORT $LN362@Copy
  00130	8b 06		 mov	 eax, DWORD PTR [esi]
  00132	eb 02		 jmp	 SHORT $LN363@Copy
$LN362@Copy:
  00134	8b c6		 mov	 eax, esi
$LN363@Copy:
  00136	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2211 : 		this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);
; 2212 : 		this->_Myres() = _Newres;
; 2213 : 		_Eos(_Oldlen);

  00139	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  0013c	89 1e		 mov	 DWORD PTR [esi], ebx
  0013e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00141	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00145	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00148	72 02		 jb	 SHORT $LN426@Copy
  0014a	8b f3		 mov	 esi, ebx
$LN426@Copy:
  0014c	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 2214 : 		}

  00150	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00153	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015a	59		 pop	 ecx
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00164	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00167	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0016a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0016d	72 0b		 jb	 SHORT $LN156@Copy
  0016f	40		 inc	 eax
  00170	8b ce		 mov	 ecx, esi
  00172	50		 push	 eax
  00173	ff 36		 push	 DWORD PTR [esi]
  00175	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN156@Copy:
  0017a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00181	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00185	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0018c	72 02		 jb	 SHORT $LN245@Copy
  0018e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN245@Copy:

; 2203 : 			_RERAISE;

  00190	6a 00		 push	 0
  00192	6a 00		 push	 0
  00194	c6 06 00	 mov	 BYTE PTR [esi], 0
  00197	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN438@Copy:
$LN434@Copy:
  0019c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]

; 2113 : 		if (_Size <= _Max_effective_size)

  00009	39 45 0c	 cmp	 DWORD PTR __Size$[ebp], eax
  0000c	0f 46 45 0c	 cmovbe	 eax, DWORD PTR __Size$[ebp]

; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1772 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1743 : 		return (this->_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN13@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1744 : 		}

  00008	c3		 ret	 0

; 1743 : 		return (this->_Myptr());

$LN13@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1744 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1348 : 		_Check_offset(_Off);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	72 7e		 jb	 SHORT $LN93@erase

; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  00011	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00014	8b c7		 mov	 eax, edi
  00016	2b c1		 sub	 eax, ecx
  00018	3b c2		 cmp	 eax, edx
  0001a	77 23		 ja	 SHORT $LN2@erase

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

  0001c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0001f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00023	72 0e		 jb	 SHORT $LN41@erase
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	5f		 pop	 edi
  00028	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1357 : 			}
; 1358 : 		return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 1359 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

$LN41@erase:
  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1359 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@erase:

; 1351 : 		else if (0 < _Count)

  0003f	85 d2		 test	 edx, edx
  00041	74 44		 je	 SHORT $LN90@erase

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;

  00043	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00047	72 04		 jb	 SHORT $LN58@erase
  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	eb 02		 jmp	 SHORT $LN59@erase
$LN58@erase:
  0004d	8b c6		 mov	 eax, esi
$LN59@erase:

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  0004f	2b fa		 sub	 edi, edx
  00051	53		 push	 ebx
  00052	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  00055	8b c7		 mov	 eax, edi
  00057	2b c1		 sub	 eax, ecx
  00059	74 0e		 je	 SHORT $LN74@erase
  0005b	50		 push	 eax
  0005c	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0005f	50		 push	 eax
  00060	53		 push	 ebx
  00061	e8 00 00 00 00	 call	 _memmove
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN74@erase:

; 1356 : 			_Eos(_Newsize);

  00069	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0006d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00070	5b		 pop	 ebx
  00071	72 0e		 jb	 SHORT $LN85@erase
  00073	8b 06		 mov	 eax, DWORD PTR [esi]
  00075	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1357 : 			}
; 1358 : 		return (*this);

  00079	8b c6		 mov	 eax, esi
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 1359 : 		}

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8

; 1356 : 			_Eos(_Newsize);

$LN85@erase:
  00081	8b c6		 mov	 eax, esi
  00083	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN90@erase:

; 1357 : 			}
; 1358 : 		return (*this);

  00087	5f		 pop	 edi
  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi

; 1359 : 		}

  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN93@erase:

; 1348 : 		_Check_offset(_Off);

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00094	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN95@erase:
$LN92@erase:
  00099	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1340 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 : 		_Check_offset(_Off);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	72 21		 jb	 SHORT $LN37@erase

; 1342 : 		_Eos(_Off);

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000e	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00012	72 0c		 jb	 SHORT $LN29@erase
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0

; 1343 : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 1344 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4

; 1342 : 		_Eos(_Off);

$LN29@erase:
  00020	8b d1		 mov	 edx, ecx
  00022	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0

; 1343 : 		return (*this);

  00026	8b c1		 mov	 eax, ecx

; 1344 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN37@erase:

; 1341 : 		_Check_offset(_Off);

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00031	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN39@erase:
$LN36@erase:
  00036	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1180 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN5@assign
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00015	5e		 pop	 esi

; 1183 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

$LN5@assign:
  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@assign:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL7@assign
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	5e		 pop	 esi

; 1183 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 57		 je	 SHORT $LN2@assign
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN20@assign
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN21@assign
$LN20@assign:
  0001a	8b c6		 mov	 eax, esi
$LN21@assign:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 45		 jb	 SHORT $LN2@assign
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN34@assign
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN35@assign
$LN34@assign:
  00029	8b d6		 mov	 edx, esi
$LN35@assign:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	03 c2		 add	 eax, edx
  00030	3b c3		 cmp	 eax, ebx
  00032	76 31		 jbe	 SHORT $LN2@assign

; 1168 : 			return (assign(*this,

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 16		 jb	 SHORT $LN57@assign
  00039	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	2b d8		 sub	 ebx, eax
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1177 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8

; 1168 : 			return (assign(*this,

$LN57@assign:
  0004f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00052	8b c6		 mov	 eax, esi
  00054	8b ce		 mov	 ecx, esi
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 1177 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN2@assign:
  00065	57		 push	 edi

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  00066	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00069	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006c	77 7d		 ja	 SHORT $LN187@assign
  0006e	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00071	73 19		 jae	 SHORT $LN63@assign
  00073	ff 76 10	 push	 DWORD PTR [esi+16]
  00076	8b ce		 mov	 ecx, esi
  00078	57		 push	 edi
  00079	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0007e	85 ff		 test	 edi, edi
  00080	74 60		 je	 SHORT $LN181@assign
$LN186@assign:

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

  00082	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00086	72 2b		 jb	 SHORT $LN158@assign
  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	eb 29		 jmp	 SHORT $LN159@assign

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN63@assign:
  0008c	85 ff		 test	 edi, edi
  0008e	75 f2		 jne	 SHORT $LN186@assign
  00090	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00094	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00097	72 0e		 jb	 SHORT $LN140@assign
  00099	8b 06		 mov	 eax, DWORD PTR [esi]
  0009b	5f		 pop	 edi
  0009c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1175 : 			}
; 1176 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1177 : 		}

  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN140@assign:
  000a7	8b c6		 mov	 eax, esi
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1177 : 		}

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

$LN158@assign:
  000b3	8b c6		 mov	 eax, esi
$LN159@assign:
  000b5	85 ff		 test	 edi, edi
  000b7	74 0b		 je	 SHORT $LN165@assign
  000b9	57		 push	 edi
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _memcpy
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN165@assign:

; 1174 : 			_Eos(_Count);

  000c4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c8	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000cb	72 0f		 jb	 SHORT $LN176@assign
  000cd	8b 06		 mov	 eax, DWORD PTR [esi]
  000cf	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1175 : 			}
; 1176 : 		return (*this);

  000d3	8b c6		 mov	 eax, esi
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 1177 : 		}

  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8

; 1174 : 			_Eos(_Count);

$LN176@assign:
  000dc	8b c6		 mov	 eax, esi
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN181@assign:

; 1175 : 			}
; 1176 : 		return (*this);

  000e2	5f		 pop	 edi
  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 1177 : 		}

  000e7	5d		 pop	 ebp
  000e8	c2 08 00	 ret	 8
$LN187@assign:

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f0	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN189@assign:
$LN184@assign:
  000f5	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1150 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 e9 00 00
	00		 jb	 $LN208@assign

; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00019	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
  0001c	2b c1		 sub	 eax, ecx
  0001e	3b f8		 cmp	 edi, eax
  00020	0f 47 f8	 cmova	 edi, eax

; 1152 : 
; 1153 : 		if (this == &_Right)

  00023	3b f3		 cmp	 esi, ebx
  00025	75 47		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  00027	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  0002a	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0002d	0f 82 d9 00 00
	00		 jb	 $LN210@assign
  00033	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00036	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0003a	72 19		 jb	 SHORT $LN63@assign
  0003c	8b 16		 mov	 edx, DWORD PTR [esi]
  0003e	51		 push	 ecx
  0003f	6a 00		 push	 0
  00041	8b ce		 mov	 ecx, esi
  00043	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  00047	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0004c	5f		 pop	 edi

; 1160 : 			}
; 1161 : 		return (*this);

  0004d	8b c6		 mov	 eax, esi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 1162 : 		}

  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

$LN63@assign:
  00055	8b d6		 mov	 edx, esi
  00057	51		 push	 ecx
  00058	6a 00		 push	 0
  0005a	8b ce		 mov	 ecx, esi
  0005c	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  00060	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00065	5f		 pop	 edi

; 1160 : 			}
; 1161 : 		return (*this);

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 1162 : 		}

  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
$LN2@assign:

; 1155 : 		else if (_Grow(_Count))

  0006e	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00071	0f 87 9f 00 00
	00		 ja	 $LN211@assign
  00077	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0007a	73 24		 jae	 SHORT $LN72@assign
  0007c	ff 76 10	 push	 DWORD PTR [esi+16]
  0007f	8b ce		 mov	 ecx, esi
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00087	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0008a	85 ff		 test	 edi, edi
  0008c	74 6b		 je	 SHORT $LN203@assign
$LN207@assign:

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

  0008e	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00092	72 02		 jb	 SHORT $LN166@assign
  00094	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN166@assign:
  00096	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0009a	72 2b		 jb	 SHORT $LN180@assign
  0009c	8b 16		 mov	 edx, DWORD PTR [esi]
  0009e	eb 29		 jmp	 SHORT $LN181@assign

; 1155 : 		else if (_Grow(_Count))

$LN72@assign:
  000a0	85 ff		 test	 edi, edi
  000a2	75 ea		 jne	 SHORT $LN207@assign
  000a4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000a8	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000ab	72 0e		 jb	 SHORT $LN149@assign
  000ad	8b 06		 mov	 eax, DWORD PTR [esi]
  000af	5f		 pop	 edi
  000b0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1160 : 			}
; 1161 : 		return (*this);

  000b3	8b c6		 mov	 eax, esi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 1162 : 		}

  000b7	5d		 pop	 ebp
  000b8	c2 0c 00	 ret	 12			; 0000000cH

; 1155 : 		else if (_Grow(_Count))

$LN149@assign:
  000bb	8b c6		 mov	 eax, esi
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1162 : 		}

  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

$LN180@assign:
  000c7	8b d6		 mov	 edx, esi
$LN181@assign:
  000c9	85 ff		 test	 edi, edi
  000cb	74 0e		 je	 SHORT $LN187@assign
  000cd	57		 push	 edi
  000ce	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  000d1	50		 push	 eax
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _memcpy
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN187@assign:

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

  000db	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000df	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000e2	72 0f		 jb	 SHORT $LN198@assign
  000e4	8b 06		 mov	 eax, DWORD PTR [esi]
  000e6	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1160 : 			}
; 1161 : 		return (*this);

  000ea	8b c6		 mov	 eax, esi
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx

; 1162 : 		}

  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

$LN198@assign:
  000f3	8b c6		 mov	 eax, esi
  000f5	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN203@assign:

; 1160 : 			}
; 1161 : 		return (*this);

  000f9	5f		 pop	 edi
  000fa	8b c6		 mov	 eax, esi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx

; 1162 : 		}

  000fe	5d		 pop	 ebp
  000ff	c2 0c 00	 ret	 12			; 0000000cH
$LN208@assign:

; 1150 : 		_Right._Check_offset(_Roff);

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00107	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN212@assign:
$LN210@assign:

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00111	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN213@assign:
$LN211@assign:

; 1155 : 		else if (_Grow(_Count))

  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN214@assign:
$LN205@assign:
  00120	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1016 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1017 : 		_Tidy(true);

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	72 09		 jb	 SHORT $LN6@basic_stri
  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN6@basic_stri:
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	72 07		 jb	 SHORT $LN94@basic_stri
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	5e		 pop	 esi
  0002b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1018 : 		}

  0002e	c3		 ret	 0

; 1017 : 		_Tidy(true);

$LN94@basic_stri:
  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	5e		 pop	 esi

; 1018 : 		}

  00033	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 836  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001a	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0001d	75 12		 jne	 SHORT $LN111@basic_stri
  0001f	33 d2		 xor	 edx, edx
  00021	52		 push	 edx
  00022	51		 push	 ecx
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 839  : 		}

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

$LN111@basic_stri:
  00031	8b d1		 mov	 edx, ecx
  00033	57		 push	 edi
  00034	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL113@basic_stri:
  00037	8a 02		 mov	 al, BYTE PTR [edx]
  00039	42		 inc	 edx
  0003a	84 c0		 test	 al, al
  0003c	75 f9		 jne	 SHORT $LL113@basic_stri
  0003e	2b d7		 sub	 edx, edi
  00040	5f		 pop	 edi
  00041	52		 push	 edx
  00042	51		 push	 ecx
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 839  : 		}

  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT
; _this$ = ecx

; 734  : 		return (_Get_data()._Myres);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 735  : 		}

  00003	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 729  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 730  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 724  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 725  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx, COMDAT
; _this$ = ecx

; 714  : 		return (_Get_data()._Bx);

  00000	8b c1		 mov	 eax, ecx

; 715  : 		}

  00002	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 707  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 708  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 702  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 703  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 697  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 698  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 692  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 693  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 588  : 		: _Mypair(_Zero_then_variadic_args_t())

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 590  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 583  : 		return (_Get_data()._Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 584  : 		}

  00008	c3		 ret	 0

; 583  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 584  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 578  : 		return (_Get_data()._Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 579  : 		}

  00008	c3		 ret	 0

; 578  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 579  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 534  : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 499  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	83 c8 ff	 or	 eax, -1

; 1009 : 		}

  00003	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Count$[ebp], 4096 ; 00001000H
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000d	72 19		 jb	 SHORT $LN7@deallocate
  0000f	a8 1f		 test	 al, 31			; 0000001fH
  00011	75 22		 jne	 SHORT $LN16@deallocate
  00013	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00016	3b c8		 cmp	 ecx, eax
  00018	73 20		 jae	 SHORT $LN18@deallocate
  0001a	2b c1		 sub	 eax, ecx
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	72 1e		 jb	 SHORT $LN19@deallocate
  00021	83 f8 23	 cmp	 eax, 35			; 00000023H
  00024	77 1e		 ja	 SHORT $LN20@deallocate
  00026	8b c1		 mov	 eax, ecx
$LN7@deallocate:
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4

; 988  : 		}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN16@deallocate:

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN18@deallocate:
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN19@deallocate:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN20@deallocate:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN15@deallocate:
  00049	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 976  : 		return (_Mybase::allocate(_Count));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN6@allocate
$LN15@allocate:

; 977  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 976  : 		return (_Mybase::allocate(_Count));

$LN6@allocate:
  0000e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00013	72 23		 jb	 SHORT $LN8@allocate
  00015	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00018	3b c8		 cmp	 ecx, eax
  0001a	76 2b		 jbe	 SHORT $LN17@allocate
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	8b c8		 mov	 ecx, eax
  00024	83 c4 04	 add	 esp, 4
  00027	85 c9		 test	 ecx, ecx
  00029	74 21		 je	 SHORT $LN19@allocate
  0002b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002e	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00031	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 977  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4

; 976  : 		return (_Mybase::allocate(_Count));

$LN8@allocate:
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 c5		 jne	 SHORT $LN15@allocate
  00045	eb 0a		 jmp	 SHORT $LN20@allocate
$LN17@allocate:
  00047	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN21@allocate:
$LN19@allocate:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN20@allocate:
  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@allocate:
$LN16@allocate:
  00056	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 870  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	83 c8 ff	 or	 eax, -1

; 750  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00013	72 23		 jb	 SHORT $LN6@allocate
  00015	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00018	3b c8		 cmp	 ecx, eax
  0001a	76 2b		 jbe	 SHORT $LN14@allocate
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	8b c8		 mov	 ecx, eax
  00024	83 c4 04	 add	 esp, 4
  00027	85 c9		 test	 ecx, ecx
  00029	74 21		 je	 SHORT $LN16@allocate
  0002b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002e	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00031	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 c5		 jne	 SHORT $LN12@allocate
  00045	eb 0a		 jmp	 SHORT $LN17@allocate
$LN14@allocate:
  00047	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN18@allocate:
$LN16@allocate:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@allocate:
$LN17@allocate:
  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@allocate:
$LN13@allocate:
  00056	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Count$[ebp], 4096 ; 00001000H
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000d	72 19		 jb	 SHORT $LN5@deallocate
  0000f	a8 1f		 test	 al, 31			; 0000001fH
  00011	75 22		 jne	 SHORT $LN13@deallocate
  00013	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00016	3b c8		 cmp	 ecx, eax
  00018	73 20		 jae	 SHORT $LN15@deallocate
  0001a	2b c1		 sub	 eax, ecx
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	72 1e		 jb	 SHORT $LN16@deallocate
  00021	83 f8 23	 cmp	 eax, 35			; 00000023H
  00024	77 1e		 ja	 SHORT $LN17@deallocate
  00026	8b c1		 mov	 eax, ecx
$LN5@deallocate:
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4

; 721  : 		}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN15@deallocate:
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN16@deallocate:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN17@deallocate:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN12@deallocate:
  00049	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 92   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 95   : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 133  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 48   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	void *_Ptr = 0;
; 50   : 
; 51   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 52   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 56   : 		_Xbad_alloc();	// report no memory
; 57   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 66   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 67   : 			_Xbad_alloc();	// report no memory
; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else
; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 564  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 565  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 566  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 552  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@move
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@move:

; 553  : 		return (_Count == 0 ? _First1

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  00012	5d		 pop	 ebp

; 553  : 		return (_Count == 0 ? _First1

  00013	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 529  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@copy
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@copy:

; 530  : 		return (_Count == 0 ? _First1

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  00012	5d		 pop	 ebp

; 530  : 		return (_Count == 0 ? _First1

  00013	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 523  : 		return (*_First == 0 ? 0

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	80 38 00	 cmp	 BYTE PTR [eax], 0
  00009	75 04		 jne	 SHORT $LN3@length
  0000b	33 c0		 xor	 eax, eax

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@length:

; 523  : 		return (*_First == 0 ? 0

  0000f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL5@length:
  00012	8a 08		 mov	 cl, BYTE PTR [eax]
  00014	40		 inc	 eax
  00015	84 c9		 test	 cl, cl
  00017	75 f9		 jne	 SHORT $LL5@length
  00019	2b c2		 sub	 eax, edx

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 344  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 345  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	66 8b 08	 mov	 cx, WORD PTR [eax]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	66 89 08	 mov	 WORD PTR [eax], cx

; 346  : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT

; 332  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@move
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 334  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));
; 335  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@move:

; 333  : 		return (_Count == 0 ? _First1

  0000f	03 c0		 add	 eax, eax
  00011	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 334  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));
; 335  : 		}

  00014	5d		 pop	 ebp

; 333  : 		return (_Count == 0 ? _First1

  00015	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT

; 309  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@copy
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 311  : 			: (_Elem *)_CSTD wmemcpy(_First1, _First2, _Count));
; 312  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@copy:

; 310  : 		return (_Count == 0 ? _First1

  0000f	03 c0		 add	 eax, eax
  00011	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 311  : 			: (_Elem *)_CSTD wmemcpy(_First1, _First2, _Count));
; 312  : 		}

  00014	5d		 pop	 ebp

; 310  : 		return (_Count == 0 ? _First1

  00015	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 302  : 		{	// find length of null-terminated sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 303  : 		return (*_First == 0 ? 0

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0000a	75 04		 jne	 SHORT $LN3@length
  0000c	33 c0		 xor	 eax, eax

; 304  : 			: _CSTD wcslen(_First));
; 305  : 		}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN3@length:

; 303  : 		return (*_First == 0 ? 0

  00010	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL5@length:
  00013	66 8b 08	 mov	 cx, WORD PTR [eax]
  00016	83 c0 02	 add	 eax, 2
  00019	66 85 c9	 test	 cx, cx
  0001c	75 f5		 jne	 SHORT $LL5@length
  0001e	2b c2		 sub	 eax, edx
  00020	d1 f8		 sar	 eax, 1

; 304  : 			: _CSTD wcslen(_First));
; 305  : 		}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 94   :         return;
; 95   :     }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT

; 244  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	89 45 10	 mov	 DWORD PTR __N$[ebp], eax

; 248  :         #pragma warning(pop)
; 249  :     }

  0000b	5d		 pop	 ebp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  0000c	e9 00 00 00 00	 jmp	 _memmove
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 231  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	89 45 10	 mov	 DWORD PTR __N$[ebp], eax

; 235  :         #pragma warning(pop)
; 236  :     }

  0000b	5d		 pop	 ebp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0000c	e9 00 00 00 00	 jmp	 _memcpy
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyfilesPopupMenu
_TEXT	SEGMENT
_$S2$1 = -92						; size = 24
_selectedTokenKeyfiles$2 = -68				; size = 8
_popup$1$ = -60						; size = 4
_hwndDlg$GSCopy$1$ = -56				; size = 4
_keyPath$1$ = -56					; size = 4
$T3 = -52						; size = 24
$T4 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_popupPosition$ = 12					; size = 8
_param$ = 20						; size = 4
_KeyfilesPopupMenu PROC					; COMDAT

; 741  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 14	 mov	 edi, DWORD PTR _param$[ebp]
  00019	89 45 c8	 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], eax

; 742  : 	HMENU popup = CreatePopupMenu ();

  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00022	8b f0		 mov	 esi, eax

; 743  : 	int sel;
; 744  : 	BOOL status = FALSE;

  00024	33 db		 xor	 ebx, ebx

; 745  : 
; 746  : 	AppendMenuW (popup, MF_STRING, IDM_KEYFILES_POPUP_ADD_FILES, GetString ("IDC_KEYADD"));

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CJIBJHKI@IDC_KEYADD?$AA@
  0002b	89 75 c4	 mov	 DWORD PTR _popup$1$[ebp], esi
  0002e	e8 00 00 00 00	 call	 _GetString
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	68 29 23 00 00	 push	 9001			; 00002329H
  0003c	53		 push	 ebx
  0003d	56		 push	 esi
  0003e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__AppendMenuW@16
  00044	ff d6		 call	 esi

; 747  : 	AppendMenuW (popup, MF_STRING, IDM_KEYFILES_POPUP_ADD_DIR, GetString ("IDC_ADD_KEYFILE_PATH"));

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NLAKGKFC@IDC_ADD_KEYFILE_PATH?$AA@
  0004b	e8 00 00 00 00	 call	 _GetString
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	68 2a 23 00 00	 push	 9002			; 0000232aH
  00059	53		 push	 ebx
  0005a	ff 75 c4	 push	 DWORD PTR _popup$1$[ebp]
  0005d	ff d6		 call	 esi

; 748  : 	AppendMenuW (popup, MF_STRING, IDM_KEYFILES_POPUP_ADD_TOKEN_FILES, GetString ("IDC_TOKEN_FILES_ADD"));

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CCFPMIGO@IDC_TOKEN_FILES_ADD?$AA@
  00064	e8 00 00 00 00	 call	 _GetString
  00069	83 c4 04	 add	 esp, 4
  0006c	50		 push	 eax
  0006d	68 2b 23 00 00	 push	 9003			; 0000232bH
  00072	53		 push	 ebx
  00073	ff 75 c4	 push	 DWORD PTR _popup$1$[ebp]
  00076	ff d6		 call	 esi

; 749  : 
; 750  : 	sel = TrackPopupMenu (popup, TPM_RETURNCMD | TPM_LEFTBUTTON, popupPosition.x, popupPosition.y, 0, hwndDlg, NULL);

  00078	8b 75 c8	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  0007b	53		 push	 ebx
  0007c	56		 push	 esi
  0007d	53		 push	 ebx
  0007e	ff 75 10	 push	 DWORD PTR _popupPosition$[ebp+4]
  00081	ff 75 0c	 push	 DWORD PTR _popupPosition$[ebp]
  00084	68 00 01 00 00	 push	 256			; 00000100H
  00089	ff 75 c4	 push	 DWORD PTR _popup$1$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackPopupMenu@28

; 751  : 
; 752  : 	switch (sel)

  00092	2d 29 23 00 00	 sub	 eax, 9001		; 00002329H
  00097	0f 84 2d 02 00
	00		 je	 $LN13@KeyfilesPo
  0009d	83 e8 01	 sub	 eax, 1
  000a0	0f 84 e7 01 00
	00		 je	 $LN15@KeyfilesPo
  000a6	83 e8 01	 sub	 eax, 1
  000a9	0f 85 79 02 00
	00		 jne	 $LN446@KeyfilesPo

; 784  : 			{
; 785  : 				free (kf);
; 786  : 			}
; 787  : 		}
; 788  : 		break;
; 789  : 
; 790  : 	case IDM_KEYFILES_POPUP_ADD_TOKEN_FILES:
; 791  : 		{
; 792  : 			list <SecurityTokenKeyfilePath> selectedTokenKeyfiles;

  000af	50		 push	 eax
  000b0	50		 push	 eax
  000b1	8d 4d bc	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  000b4	89 5d bc	 mov	 DWORD PTR _selectedTokenKeyfiles$2[ebp], ebx
  000b7	89 5d c0	 mov	 DWORD PTR _selectedTokenKeyfiles$2[ebp+4], ebx
  000ba	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@std@@QAEPAU?$_List_node@USecurityTokenKeyfilePath@GostCrypt@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >::_Buynode0
  000bf	89 45 bc	 mov	 DWORD PTR _selectedTokenKeyfiles$2[ebp], eax

; 793  : 			if (DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TOKEN_KEYFILES), hwndDlg, (DLGPROC) SecurityTokenKeyfileDlgProc, (LPARAM) &selectedTokenKeyfiles) == IDOK)

  000c2	8d 45 bc	 lea	 eax, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET _SecurityTokenKeyfileDlgProc@16
  000cb	56		 push	 esi
  000cc	68 1a 02 00 00	 push	 538			; 0000021aH
  000d1	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	0f 85 92 01 00
	00		 jne	 $LN379@KeyfilesPo

; 794  : 			{
; 795  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  000e6	8d 45 bc	 lea	 eax, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  000e9	50		 push	 eax
  000ea	8d 45 a4	 lea	 eax, DWORD PTR _$S2$1[ebp]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
  000f3	8b 45 a4	 mov	 eax, DWORD PTR _$S2$1[ebp]
  000f6	8d 4d a4	 lea	 ecx, DWORD PTR _$S2$1[ebp]
  000f9	83 c4 08	 add	 esp, 8
  000fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ff	ff d0		 call	 eax
  00101	84 c0		 test	 al, al
  00103	0f 84 5c 01 00
	00		 je	 $LN473@KeyfilesPo
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@KeyfilesPo:
  00110	8b 45 b8	 mov	 eax, DWORD PTR _$S2$1[ebp+20]
  00113	83 c0 08	 add	 eax, 8
  00116	89 45 c8	 mov	 DWORD PTR _keyPath$1$[ebp], eax
  00119	33 c0		 xor	 eax, eax
  0011b	38 45 a9	 cmp	 BYTE PTR _$S2$1[ebp+5], al
  0011e	0f 94 c0	 sete	 al
  00121	88 45 a9	 mov	 BYTE PTR _$S2$1[ebp+5], al
  00124	84 c0		 test	 al, al
  00126	0f 84 1d 01 00
	00		 je	 $LN7@KeyfilesPo
  0012c	0f 1f 40 00	 npad	 4
$LL12@KeyfilesPo:

; 796  : 				{
; 797  : 					KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00130	68 08 01 00 00	 push	 264			; 00000108H
  00135	e8 00 00 00 00	 call	 _malloc

; 798  : 					strcpy_s (kf->FileName, sizeof (kf->FileName), WideToSingleString (keyPath).c_str());

  0013a	8b 4d c8	 mov	 ecx, DWORD PTR _keyPath$1$[ebp]
  0013d	83 c4 04	 add	 esp, 4
  00140	8b f0		 mov	 esi, eax
  00142	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ??BSecurityTokenKeyfilePath@GostCrypt@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GostCrypt::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0014b	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  0014e	50		 push	 eax
  0014f	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  00158	83 c4 08	 add	 esp, 8
  0015b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0015f	72 02		 jb	 SHORT $LN71@KeyfilesPo
  00161	8b 00		 mov	 eax, DWORD PTR [eax]
$LN71@KeyfilesPo:
  00163	50		 push	 eax
  00164	68 04 01 00 00	 push	 260			; 00000104H
  00169	56		 push	 esi
  0016a	e8 00 00 00 00	 call	 _strcpy_s
  0016f	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp+20]
  00172	83 c4 0c	 add	 esp, 12			; 0000000cH
  00175	83 f8 10	 cmp	 eax, 16			; 00000010H
  00178	72 3e		 jb	 SHORT $LN161@KeyfilesPo
  0017a	8b 4d e4	 mov	 ecx, DWORD PTR $T4[ebp]
  0017d	40		 inc	 eax
  0017e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00183	72 2a		 jb	 SHORT $LN156@KeyfilesPo
  00185	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00188	0f 85 b6 01 00
	00		 jne	 $LN476@KeyfilesPo
  0018e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00191	3b c1		 cmp	 eax, ecx
  00193	0f 83 ab 01 00
	00		 jae	 $LN476@KeyfilesPo
  00199	2b c8		 sub	 ecx, eax
  0019b	83 f9 04	 cmp	 ecx, 4
  0019e	0f 82 a0 01 00
	00		 jb	 $LN476@KeyfilesPo
  001a4	83 f9 23	 cmp	 ecx, 35			; 00000023H
  001a7	0f 87 97 01 00
	00		 ja	 $LN476@KeyfilesPo
  001ad	8b c8		 mov	 ecx, eax
$LN156@KeyfilesPo:
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b5	83 c4 04	 add	 esp, 4
$LN161@KeyfilesPo:
  001b8	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp+20]
  001bb	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
  001c2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
  001c9	c6 45 e4 00	 mov	 BYTE PTR $T4[ebp], 0
  001cd	83 f8 08	 cmp	 eax, 8
  001d0	72 0d		 jb	 SHORT $LN199@KeyfilesPo
  001d2	40		 inc	 eax
  001d3	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  001d6	50		 push	 eax
  001d7	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  001da	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN199@KeyfilesPo:

; 799  : 
; 800  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  001df	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001e2	8b ca		 mov	 ecx, edx
  001e4	85 d2		 test	 edx, edx
  001e6	74 31		 je	 SHORT $LN299@KeyfilesPo
  001e8	83 ba 04 01 00
	00 00		 cmp	 DWORD PTR [edx+260], 0
  001ef	8d 82 04 01 00
	00		 lea	 eax, DWORD PTR [edx+260]
  001f5	74 1a		 je	 SHORT $LN298@KeyfilesPo
  001f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL297@KeyfilesPo:
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	83 b9 04 01 00
	00 00		 cmp	 DWORD PTR [ecx+260], 0
  00209	8d 81 04 01 00
	00		 lea	 eax, DWORD PTR [ecx+260]
  0020f	75 ef		 jne	 SHORT $LL297@KeyfilesPo
$LN298@KeyfilesPo:
  00211	89 b1 04 01 00
	00		 mov	 DWORD PTR [ecx+260], esi
  00217	eb 02		 jmp	 SHORT $LN300@KeyfilesPo
$LN299@KeyfilesPo:
  00219	8b d6		 mov	 edx, esi
$LN300@KeyfilesPo:
  0021b	c7 86 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+260], 0
  00225	33 c0		 xor	 eax, eax
  00227	38 45 a9	 cmp	 BYTE PTR _$S2$1[ebp+5], al

; 801  : 					param->EnableKeyFiles = TRUE;
; 802  : 					status = TRUE;

  0022a	bb 01 00 00 00	 mov	 ebx, 1
  0022f	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00232	0f 94 c0	 sete	 al
  00235	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
  0023b	88 5d a8	 mov	 BYTE PTR _$S2$1[ebp+4], bl
  0023e	88 45 a9	 mov	 BYTE PTR _$S2$1[ebp+5], al
  00241	84 c0		 test	 al, al
  00243	0f 85 e7 fe ff
	ff		 jne	 $LL12@KeyfilesPo
$LN7@KeyfilesPo:

; 794  : 			{
; 795  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  00249	8b 45 a4	 mov	 eax, DWORD PTR _$S2$1[ebp]
  0024c	8d 4d a4	 lea	 ecx, DWORD PTR _$S2$1[ebp]
  0024f	ff 50 08	 call	 DWORD PTR [eax+8]
  00252	8b 45 a4	 mov	 eax, DWORD PTR _$S2$1[ebp]
  00255	8d 4d a4	 lea	 ecx, DWORD PTR _$S2$1[ebp]
  00258	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0025b	ff d0		 call	 eax
  0025d	84 c0		 test	 al, al
  0025f	0f 85 ab fe ff
	ff		 jne	 $LL9@KeyfilesPo
$LN473@KeyfilesPo:

; 803  : 				}

  00265	8d 4d ac	 lea	 ecx, DWORD PTR _$S2$1[ebp+8]
  00268	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
  0026d	ff 75 ac	 push	 DWORD PTR _$S2$1[ebp+8]
  00270	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00275	83 c4 04	 add	 esp, 4
$LN379@KeyfilesPo:

; 804  : 			}
; 805  : 		}

  00278	8d 4d bc	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  0027b	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
  00280	ff 75 bc	 push	 DWORD PTR _selectedTokenKeyfiles$2[ebp]
  00283	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00288	e9 98 00 00 00	 jmp	 $LN475@KeyfilesPo
$LN15@KeyfilesPo:

; 770  : 		}
; 771  : 		break;
; 772  : 
; 773  : 	case IDM_KEYFILES_POPUP_ADD_DIR:
; 774  : 		{
; 775  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  0028d	68 08 01 00 00	 push	 264			; 00000108H
  00292	e8 00 00 00 00	 call	 _malloc
  00297	8b f0		 mov	 esi, eax

; 776  : 
; 777  : 			if (BrowseDirectories (hwndDlg,"SELECT_KEYFILE_PATH", kf->FileName))

  00299	56		 push	 esi
  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@
  0029f	ff 75 c8	 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  002a2	e8 00 00 00 00	 call	 _BrowseDirectories
  002a7	83 c4 10	 add	 esp, 16			; 00000010H

; 778  : 			{
; 779  : 				param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  002aa	56		 push	 esi
  002ab	85 c0		 test	 eax, eax
  002ad	74 71		 je	 SHORT $LN16@KeyfilesPo
  002af	ff 77 04	 push	 DWORD PTR [edi+4]
  002b2	e8 00 00 00 00	 call	 _KeyFileAdd
  002b7	83 c4 08	 add	 esp, 8
  002ba	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 780  : 				param->EnableKeyFiles = TRUE;

  002bd	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

; 781  : 				status = TRUE;

  002c3	bb 01 00 00 00	 mov	 ebx, 1

; 782  : 			}
; 783  : 			else

  002c8	eb 5e		 jmp	 SHORT $LN446@KeyfilesPo
$LN13@KeyfilesPo:

; 753  : 	{
; 754  : 	case IDM_KEYFILES_POPUP_ADD_FILES:
; 755  : 		{
; 756  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  002ca	68 08 01 00 00	 push	 264			; 00000108H
  002cf	e8 00 00 00 00	 call	 _malloc

; 757  : 			if (SelectMultipleFiles (hwndDlg, "SELECT_KEYFILE", kf->FileName, bHistory))

  002d4	ff 35 00 00 00
	00		 push	 DWORD PTR _bHistory
  002da	8b f0		 mov	 esi, eax
  002dc	56		 push	 esi
  002dd	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@
  002e2	ff 75 c8	 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  002e5	e8 00 00 00 00	 call	 _SelectMultipleFiles
  002ea	83 c4 14	 add	 esp, 20			; 00000014H
  002ed	85 c0		 test	 eax, eax
  002ef	74 2e		 je	 SHORT $LN14@KeyfilesPo
$LL6@KeyfilesPo:

; 758  : 			{
; 759  : 				do
; 760  : 				{
; 761  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  002f1	56		 push	 esi
  002f2	ff 77 04	 push	 DWORD PTR [edi+4]
  002f5	e8 00 00 00 00	 call	 _KeyFileAdd

; 762  : 					kf = (KeyFile *) malloc (sizeof (KeyFile));

  002fa	68 08 01 00 00	 push	 264			; 00000108H
  002ff	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00302	e8 00 00 00 00	 call	 _malloc
  00307	8b f0		 mov	 esi, eax

; 763  : 				} while (SelectMultipleFilesNext (kf->FileName));

  00309	56		 push	 esi
  0030a	e8 00 00 00 00	 call	 _SelectMultipleFilesNext
  0030f	83 c4 10	 add	 esp, 16			; 00000010H
  00312	85 c0		 test	 eax, eax
  00314	75 db		 jne	 SHORT $LL6@KeyfilesPo

; 764  : 
; 765  : 				param->EnableKeyFiles = TRUE;

  00316	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

; 766  : 				status = TRUE;

  0031c	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LN14@KeyfilesPo:

; 767  : 			}
; 768  : 
; 769  : 			free (kf);

  0031f	56		 push	 esi
$LN16@KeyfilesPo:
  00320	e8 00 00 00 00	 call	 _free
$LN475@KeyfilesPo:
  00325	83 c4 04	 add	 esp, 4

; 804  : 			}
; 805  : 		}

$LN446@KeyfilesPo:

; 806  : 		break;
; 807  : 	}
; 808  : 
; 809  : 	DestroyMenu (popup);

  00328	ff 75 c4	 push	 DWORD PTR _popup$1$[ebp]
  0032b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 810  : 	return status;
; 811  : }

  00331	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00334	8b c3		 mov	 eax, ebx
  00336	5f		 pop	 edi
  00337	5e		 pop	 esi
  00338	33 cd		 xor	 ecx, ebp
  0033a	5b		 pop	 ebx
  0033b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00340	8b e5		 mov	 esp, ebp
  00342	5d		 pop	 ebp
  00343	c3		 ret	 0
$LN476@KeyfilesPo:

; 798  : 					strcpy_s (kf->FileName, sizeof (kf->FileName), WideToSingleString (keyPath).c_str());

  00344	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN477@KeyfilesPo:
$LN474@KeyfilesPo:
  00349	cc		 int	 3
_KeyfilesPopupMenu ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyFilesDlgProc@16
_TEXT	SEGMENT
_$S1$1 = -120						; size = 24
_selectedTokenKeyfiles$2 = -96				; size = 8
_wParam$GSCopy$1$ = -92					; size = 4
_lParam$GSCopy$1$ = -88					; size = 4
_count$1$ = -88						; size = 4
_keyPath$1$ = -88					; size = 4
_hwndDlg$GSCopy$1$ = -84				; size = 4
_i$1$ = -84						; size = 4
$T3 = -80						; size = 24
_LvItem$4 = -56						; size = 52
_LvCol$5 = -36						; size = 32
$T6 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_KeyFilesDlgProc@16 PROC				; COMDAT

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 529  : 	static KeyFilesDlgParam *param;
; 530  : 	static KeyFilesDlgParam origParam;
; 531  : 
; 532  : 	WORD lw = LOWORD (wParam);
; 533  : 
; 534  : 	switch (msg)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00016	89 4d a8	 mov	 DWORD PTR _lParam$GSCopy$1$[ebp], ecx
  00019	53		 push	 ebx
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  0001d	89 5d ac	 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], ebx
  00020	56		 push	 esi
  00021	8b 75 10	 mov	 esi, DWORD PTR _wParam$[ebp]
  00024	89 75 a4	 mov	 DWORD PTR _wParam$GSCopy$1$[ebp], esi
  00027	57		 push	 edi
  00028	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0002d	0f 87 88 01 00
	00		 ja	 $LN39@KeyFilesDl
  00033	0f 84 87 00 00
	00		 je	 $LN17@KeyFilesDl
  00039	83 f8 10	 cmp	 eax, 16			; 00000010H
  0003c	74 4e		 je	 SHORT $LN35@KeyFilesDl
  0003e	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00041	0f 85 86 01 00
	00		 jne	 $LN2@KeyFilesDl

; 693  : 		}
; 694  : 		return 1;
; 695  : 
; 696  : 	case WM_NOTIFY:
; 697  : 		if (((LPNMHDR) lParam)->code == LVN_ITEMCHANGED)

  00047	83 79 08 9b	 cmp	 DWORD PTR [ecx+8], -101	; ffffff9bH
  0004b	0f 85 7c 01 00
	00		 jne	 $LN2@KeyFilesDl

; 698  : 		{
; 699  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_KEYREMOVE),

  00051	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  00057	6a 02		 push	 2
  00059	6a ff		 push	 -1
  0005b	68 0c 10 00 00	 push	 4108			; 0000100cH
  00060	68 b4 13 00 00	 push	 5044			; 000013b4H
  00065	53		 push	 ebx
  00066	ff d6		 call	 esi
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0006f	33 c9		 xor	 ecx, ecx
  00071	83 f8 ff	 cmp	 eax, -1
  00074	0f 95 c1	 setne	 cl
  00077	51		 push	 ecx
  00078	68 c3 13 00 00	 push	 5059			; 000013c3H
  0007d	53		 push	 ebx
  0007e	ff d6		 call	 esi
  00080	50		 push	 eax
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 700  : 				ListView_GetNextItem (GetDlgItem (hwndDlg, IDC_KEYLIST), -1, LVIS_SELECTED) != -1);
; 701  : 			return 1;

  00087	e9 4b 05 00 00	 jmp	 $LN447@KeyFilesDl
$LN35@KeyFilesDl:

; 702  : 		}
; 703  : 		break;
; 704  : 
; 705  : 	case WM_CLOSE:
; 706  : 		KeyFileRemoveAll (&param->FirstKeyFile);

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00091	83 c0 04	 add	 eax, 4
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 707  : 		*param = origParam;

  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  000a0	83 c4 04	 add	 esp, 4
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A
  000a8	89 01		 mov	 DWORD PTR [ecx], eax
  000aa	a1 04 00 00 00	 mov	 eax, DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A+4

; 708  : 
; 709  : 		EndDialog (hwndDlg, IDCLOSE);

  000af	6a 08		 push	 8
  000b1	53		 push	 ebx
  000b2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 710  : 		return 1;

  000bb	e9 17 05 00 00	 jmp	 $LN447@KeyFilesDl
$LN17@KeyFilesDl:

; 535  : 	{
; 536  : 	case WM_INITDIALOG:
; 537  : 		{
; 538  : 			LVCOLUMNW LvCol;
; 539  : 			HWND hList = GetDlgItem (hwndDlg, IDC_KEYLIST);

  000c0	68 b4 13 00 00	 push	 5044			; 000013b4H
  000c5	53		 push	 ebx
  000c6	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  000cc	ff d3		 call	 ebx
  000ce	8b f8		 mov	 edi, eax

; 540  : 
; 541  : 			param = (KeyFilesDlgParam *) lParam;

  000d0	8b 45 a8	 mov	 eax, DWORD PTR _lParam$GSCopy$1$[ebp]
  000d3	a3 00 00 00 00	 mov	 DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A, eax

; 542  : 			origParam = *(KeyFilesDlgParam *) lParam;

  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	89 0d 00 00 00
	00		 mov	 DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A, ecx
  000e0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 543  : 
; 544  : 			param->FirstKeyFile = KeyFileCloneAll (param->FirstKeyFile);

  000e3	51		 push	 ecx
  000e4	89 0d 04 00 00
	00		 mov	 DWORD PTR ?origParam@?1??KeyFilesDlgProc@@9@16@4UKeyFilesDlgParam@@A+4, ecx
  000ea	e8 00 00 00 00	 call	 _KeyFileCloneAll
  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A

; 545  : 
; 546  : 			LocalizeDialog (hwndDlg, "IDD_KEYFILES");

  000f5	8b 75 ac	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OGGIJBFO@IDD_KEYFILES?$AA@
  000fd	56		 push	 esi
  000fe	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00101	e8 00 00 00 00	 call	 _LocalizeDialog
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH

; 547  : 			DragAcceptFiles (hwndDlg, TRUE);

  00109	6a 01		 push	 1
  0010b	56		 push	 esi
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 548  : 
; 549  : 			SendMessageW (hList,LVM_SETEXTENDEDLISTVIEWSTYLE,0,

  00112	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageW@16
  00118	6a 30		 push	 48			; 00000030H
  0011a	6a 00		 push	 0
  0011c	68 36 10 00 00	 push	 4150			; 00001036H
  00121	57		 push	 edi
  00122	ff d6		 call	 esi
  00124	0f 57 c0	 xorps	 xmm0, xmm0

; 550  : 				LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP
; 551  : 				); 
; 552  : 
; 553  : 			memset (&LvCol,0,sizeof(LvCol));               

  00127	0f 11 45 dc	 movups	 XMMWORD PTR _LvCol$5[ebp], xmm0

; 554  : 			LvCol.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 555  : 			LvCol.pszText = GetString ("KEYFILE");                           

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_07BGLJIIHG@KEYFILE?$AA@
  00130	0f 11 45 ec	 movups	 XMMWORD PTR _LvCol$5[ebp+16], xmm0
  00134	c7 45 dc 0f 00
	00 00		 mov	 DWORD PTR _LvCol$5[ebp], 15 ; 0000000fH
  0013b	e8 00 00 00 00	 call	 _GetString

; 556  : 			LvCol.cx = CompensateXDPI (374);

  00140	68 76 01 00 00	 push	 374			; 00000176H
  00145	89 45 e8	 mov	 DWORD PTR _LvCol$5[ebp+12], eax
  00148	e8 00 00 00 00	 call	 _CompensateXDPI
  0014d	83 c4 08	 add	 esp, 8
  00150	89 45 e4	 mov	 DWORD PTR _LvCol$5[ebp+8], eax

; 557  : 			LvCol.fmt = LVCFMT_LEFT;
; 558  : 			SendMessageW (hList, LVM_INSERTCOLUMNW, 0, (LPARAM)&LvCol);

  00153	8d 45 dc	 lea	 eax, DWORD PTR _LvCol$5[ebp]
  00156	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _LvCol$5[ebp+4], 0
  0015d	50		 push	 eax
  0015e	6a 00		 push	 0
  00160	68 61 10 00 00	 push	 4193			; 00001061H
  00165	57		 push	 edi
  00166	ff d6		 call	 esi

; 559  : 
; 560  : 			LoadKeyList (hwndDlg, param->FirstKeyFile);

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0016d	8b 75 ac	 mov	 esi, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00170	ff 70 04	 push	 DWORD PTR [eax+4]
  00173	56		 push	 esi
  00174	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList

; 561  : 			SetCheckBox (hwndDlg, IDC_KEYFILES_ENABLE, param->EnableKeyFiles);

  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0017e	ff 30		 push	 DWORD PTR [eax]
  00180	68 c5 13 00 00	 push	 5061			; 000013c5H
  00185	56		 push	 esi
  00186	e8 00 00 00 00	 call	 _SetCheckBox

; 562  : 
; 563  : 			SetWindowTextW(GetDlgItem(hwndDlg, IDT_KEYFILES_NOTE), GetString ("KEYFILES_NOTE"));

  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JNGBBDK@KEYFILES_NOTE?$AA@
  00190	e8 00 00 00 00	 call	 _GetString
  00195	83 c4 18	 add	 esp, 24			; 00000018H
  00198	50		 push	 eax
  00199	68 d0 13 00 00	 push	 5072			; 000013d0H
  0019e	56		 push	 esi
  0019f	ff d3		 call	 ebx
  001a1	50		 push	 eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 564  : 
; 565  : 			ToHyperlink (hwndDlg, IDC_LINK_KEYFILES_INFO);

  001a8	68 ea 13 00 00	 push	 5098			; 000013eaH
  001ad	56		 push	 esi
  001ae	e8 00 00 00 00	 call	 _ToHyperlink
  001b3	83 c4 08	 add	 esp, 8

; 566  : 		}
; 567  : 		return 1;

  001b6	e9 1c 04 00 00	 jmp	 $LN447@KeyFilesDl
$LN39@KeyFilesDl:

; 529  : 	static KeyFilesDlgParam *param;
; 530  : 	static KeyFilesDlgParam origParam;
; 531  : 
; 532  : 	WORD lw = LOWORD (wParam);
; 533  : 
; 534  : 	switch (msg)

  001bb	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  001c0	74 20		 je	 SHORT $LN18@KeyFilesDl
  001c2	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  001c7	0f 84 9f 03 00
	00		 je	 $LN31@KeyFilesDl
$LN2@KeyFilesDl:
  001cd	5f		 pop	 edi
  001ce	5e		 pop	 esi

; 711  : 
; 712  : 		break;
; 713  : 
; 714  : 	}
; 715  : 
; 716  : 	return 0;

  001cf	33 c0		 xor	 eax, eax
  001d1	5b		 pop	 ebx

; 717  : }

  001d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d5	33 cd		 xor	 ecx, ebp
  001d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 10 00	 ret	 16			; 00000010H
$LN18@KeyFilesDl:

; 568  : 
; 569  : 	case WM_COMMAND:
; 570  : 
; 571  : 		if (lw == IDC_KEYADD)

  001e2	b8 c2 13 00 00	 mov	 eax, 5058		; 000013c2H
  001e7	66 3b f0	 cmp	 si, ax
  001ea	75 65		 jne	 SHORT $LN19@KeyFilesDl

; 572  : 		{
; 573  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  001ec	68 08 01 00 00	 push	 264			; 00000108H
  001f1	e8 00 00 00 00	 call	 _malloc

; 574  : 			if (SelectMultipleFiles (hwndDlg, "SELECT_KEYFILE", kf->FileName, bHistory))

  001f6	ff 35 00 00 00
	00		 push	 DWORD PTR _bHistory
  001fc	8b f8		 mov	 edi, eax
  001fe	57		 push	 edi
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CDPPHMOE@SELECT_KEYFILE?$AA@
  00204	53		 push	 ebx
  00205	e8 00 00 00 00	 call	 _SelectMultipleFiles
  0020a	83 c4 14	 add	 esp, 20			; 00000014H
  0020d	85 c0		 test	 eax, eax
  0020f	74 32		 je	 SHORT $LN5@KeyFilesDl
$LL6@KeyFilesDl:

; 575  : 			{
; 576  : 				do
; 577  : 				{
; 578  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  00211	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00217	57		 push	 edi
  00218	ff 76 04	 push	 DWORD PTR [esi+4]
  0021b	e8 00 00 00 00	 call	 _KeyFileAdd

; 579  : 					LoadKeyList (hwndDlg, param->FirstKeyFile);

  00220	50		 push	 eax
  00221	53		 push	 ebx
  00222	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00225	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList

; 580  : 
; 581  : 					kf = (KeyFile *) malloc (sizeof (KeyFile));

  0022a	68 08 01 00 00	 push	 264			; 00000108H
  0022f	e8 00 00 00 00	 call	 _malloc
  00234	8b f8		 mov	 edi, eax

; 582  : 				} while (SelectMultipleFilesNext (kf->FileName));

  00236	57		 push	 edi
  00237	e8 00 00 00 00	 call	 _SelectMultipleFilesNext
  0023c	83 c4 18	 add	 esp, 24			; 00000018H
  0023f	85 c0		 test	 eax, eax
  00241	75 ce		 jne	 SHORT $LL6@KeyFilesDl
$LN5@KeyFilesDl:

; 583  : 			}
; 584  : 
; 585  : 			free (kf);

  00243	57		 push	 edi
$LN22@KeyFilesDl:
  00244	e8 00 00 00 00	 call	 _free
  00249	83 c4 04	 add	 esp, 4

; 586  : 			return 1;

  0024c	e9 86 03 00 00	 jmp	 $LN447@KeyFilesDl
$LN19@KeyFilesDl:

; 587  : 		}
; 588  : 
; 589  : 		if (lw == IDC_ADD_KEYFILE_PATH)

  00251	b8 c7 13 00 00	 mov	 eax, 5063		; 000013c7H
  00256	66 3b f0	 cmp	 si, ax
  00259	75 40		 jne	 SHORT $LN21@KeyFilesDl

; 590  : 		{
; 591  : 			KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  0025b	68 08 01 00 00	 push	 264			; 00000108H
  00260	e8 00 00 00 00	 call	 _malloc
  00265	8b f8		 mov	 edi, eax

; 592  : 
; 593  : 			if (BrowseDirectories (hwndDlg,"SELECT_KEYFILE_PATH", kf->FileName))

  00267	57		 push	 edi
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EJPKDEGH@SELECT_KEYFILE_PATH?$AA@
  0026d	53		 push	 ebx
  0026e	e8 00 00 00 00	 call	 _BrowseDirectories
  00273	83 c4 10	 add	 esp, 16			; 00000010H

; 594  : 			{
; 595  : 				param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  00276	57		 push	 edi
  00277	85 c0		 test	 eax, eax
  00279	74 c9		 je	 SHORT $LN22@KeyFilesDl
  0027b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00281	ff 76 04	 push	 DWORD PTR [esi+4]
  00284	e8 00 00 00 00	 call	 _KeyFileAdd

; 596  : 				LoadKeyList (hwndDlg, param->FirstKeyFile);

  00289	50		 push	 eax
  0028a	53		 push	 ebx
  0028b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0028e	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  00293	83 c4 10	 add	 esp, 16			; 00000010H

; 597  : 			}
; 598  : 			else

  00296	e9 3c 03 00 00	 jmp	 $LN447@KeyFilesDl
$LN21@KeyFilesDl:

; 599  : 			{
; 600  : 				free (kf);
; 601  : 			}
; 602  : 			return 1;
; 603  : 		}
; 604  : 
; 605  : 		if (lw == IDC_TOKEN_FILES_ADD)

  0029b	b8 f0 13 00 00	 mov	 eax, 5104		; 000013f0H
  002a0	66 3b f0	 cmp	 si, ax
  002a3	0f 85 79 01 00
	00		 jne	 $LN24@KeyFilesDl

; 606  : 		{
; 607  : 			list <SecurityTokenKeyfilePath> selectedTokenKeyfiles;

  002a9	8d 4d a0	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  002ac	e8 00 00 00 00	 call	 ??0?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAE@XZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >

; 608  : 			if (DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TOKEN_KEYFILES), hwndDlg, (DLGPROC) SecurityTokenKeyfileDlgProc, (LPARAM) &selectedTokenKeyfiles) == IDOK)

  002b1	8d 45 a0	 lea	 eax, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  002b4	50		 push	 eax
  002b5	68 00 00 00 00	 push	 OFFSET _SecurityTokenKeyfileDlgProc@16
  002ba	53		 push	 ebx
  002bb	68 1a 02 00 00	 push	 538			; 0000021aH
  002c0	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20
  002cc	83 f8 01	 cmp	 eax, 1
  002cf	0f 85 35 01 00
	00		 jne	 $LN352@KeyFilesDl

; 609  : 			{
; 610  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  002d5	8d 45 a0	 lea	 eax, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  002d8	50		 push	 eax
  002d9	8d 45 88	 lea	 eax, DWORD PTR _$S1$1[ebp]
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@01@ABV?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> > >
  002e2	8b 45 88	 mov	 eax, DWORD PTR _$S1$1[ebp]
  002e5	8d 4d 88	 lea	 ecx, DWORD PTR _$S1$1[ebp]
  002e8	83 c4 08	 add	 esp, 8
  002eb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002ee	ff d0		 call	 eax
  002f0	84 c0		 test	 al, al
  002f2	0f 84 ff 00 00
	00		 je	 $LN8@KeyFilesDl
$LL9@KeyFilesDl:
  002f8	8b 75 9c	 mov	 esi, DWORD PTR _$S1$1[ebp+20]
  002fb	33 c0		 xor	 eax, eax
  002fd	83 c6 08	 add	 esi, 8
  00300	38 45 8d	 cmp	 BYTE PTR _$S1$1[ebp+5], al
  00303	89 75 a8	 mov	 DWORD PTR _keyPath$1$[ebp], esi
  00306	0f 94 c0	 sete	 al
  00309	88 45 8d	 mov	 BYTE PTR _$S1$1[ebp+5], al
  0030c	84 c0		 test	 al, al
  0030e	0f 84 c7 00 00
	00		 je	 $LN7@KeyFilesDl
$LL12@KeyFilesDl:

; 611  : 				{
; 612  : 					KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00314	68 08 01 00 00	 push	 264			; 00000108H
  00319	e8 00 00 00 00	 call	 _malloc
  0031e	83 c4 04	 add	 esp, 4
  00321	8b f8		 mov	 edi, eax

; 613  : 					strcpy_s (kf->FileName, sizeof (kf->FileName), WideToSingleString (keyPath).c_str());

  00323	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00326	8b ce		 mov	 ecx, esi
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 ??BSecurityTokenKeyfilePath@GostCrypt@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GostCrypt::SecurityTokenKeyfilePath::operator std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0032e	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00331	50		 push	 eax
  00332	8d 45 e4	 lea	 eax, DWORD PTR $T6[ebp]
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  0033b	83 c4 08	 add	 esp, 8
  0033e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00342	72 02		 jb	 SHORT $LN67@KeyFilesDl
  00344	8b 00		 mov	 eax, DWORD PTR [eax]
$LN67@KeyFilesDl:
  00346	50		 push	 eax
  00347	68 04 01 00 00	 push	 260			; 00000104H
  0034c	57		 push	 edi
  0034d	e8 00 00 00 00	 call	 _strcpy_s
  00352	8b 45 f8	 mov	 eax, DWORD PTR $T6[ebp+20]
  00355	83 c4 0c	 add	 esp, 12			; 0000000cH
  00358	83 f8 10	 cmp	 eax, 16			; 00000010H
  0035b	72 0d		 jb	 SHORT $LN77@KeyFilesDl
  0035d	40		 inc	 eax
  0035e	8d 4d e4	 lea	 ecx, DWORD PTR $T6[ebp]
  00361	50		 push	 eax
  00362	ff 75 e4	 push	 DWORD PTR $T6[ebp]
  00365	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN77@KeyFilesDl:
  0036a	8b 45 c4	 mov	 eax, DWORD PTR $T3[ebp+20]
  0036d	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH
  00374	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  0037b	c6 45 e4 00	 mov	 BYTE PTR $T6[ebp], 0
  0037f	83 f8 08	 cmp	 eax, 8
  00382	72 0d		 jb	 SHORT $LN178@KeyFilesDl
  00384	40		 inc	 eax
  00385	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  00388	50		 push	 eax
  00389	ff 75 b0	 push	 DWORD PTR $T3[ebp]
  0038c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN178@KeyFilesDl:

; 614  : 
; 615  : 					param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  00391	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00397	33 c0		 xor	 eax, eax
  00399	66 89 45 b0	 mov	 WORD PTR $T3[ebp], ax
  0039d	57		 push	 edi
  0039e	c7 45 c4 07 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 7
  003a5	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  003ac	ff 76 04	 push	 DWORD PTR [esi+4]
  003af	e8 00 00 00 00	 call	 _KeyFileAdd

; 616  : 					LoadKeyList (hwndDlg, param->FirstKeyFile);

  003b4	50		 push	 eax
  003b5	53		 push	 ebx
  003b6	89 46 04	 mov	 DWORD PTR [esi+4], eax
  003b9	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  003be	8b 75 a8	 mov	 esi, DWORD PTR _keyPath$1$[ebp]
  003c1	33 c0		 xor	 eax, eax
  003c3	83 c4 10	 add	 esp, 16			; 00000010H
  003c6	c6 45 8c 01	 mov	 BYTE PTR _$S1$1[ebp+4], 1
  003ca	38 45 8d	 cmp	 BYTE PTR _$S1$1[ebp+5], al
  003cd	0f 94 c0	 sete	 al
  003d0	88 45 8d	 mov	 BYTE PTR _$S1$1[ebp+5], al
  003d3	84 c0		 test	 al, al
  003d5	0f 85 39 ff ff
	ff		 jne	 $LL12@KeyFilesDl
$LN7@KeyFilesDl:

; 609  : 			{
; 610  : 				foreach (const SecurityTokenKeyfilePath &keyPath, selectedTokenKeyfiles)

  003db	8b 45 88	 mov	 eax, DWORD PTR _$S1$1[ebp]
  003de	8d 4d 88	 lea	 ecx, DWORD PTR _$S1$1[ebp]
  003e1	ff 50 08	 call	 DWORD PTR [eax+8]
  003e4	8b 45 88	 mov	 eax, DWORD PTR _$S1$1[ebp]
  003e7	8d 4d 88	 lea	 ecx, DWORD PTR _$S1$1[ebp]
  003ea	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003ed	ff d0		 call	 eax
  003ef	84 c0		 test	 al, al
  003f1	0f 85 01 ff ff
	ff		 jne	 $LL9@KeyFilesDl
$LN8@KeyFilesDl:

; 617  : 				}

  003f7	8d 4d 90	 lea	 ecx, DWORD PTR _$S1$1[ebp+8]
  003fa	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
  003ff	ff 75 90	 push	 DWORD PTR _$S1$1[ebp+8]
  00402	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00407	83 c4 04	 add	 esp, 4
$LN352@KeyFilesDl:

; 618  : 			}
; 619  : 
; 620  : 			return 1;

  0040a	8d 4d a0	 lea	 ecx, DWORD PTR _selectedTokenKeyfiles$2[ebp]
  0040d	e8 00 00 00 00	 call	 ?clear@?$list@USecurityTokenKeyfilePath@GostCrypt@@V?$allocator@USecurityTokenKeyfilePath@GostCrypt@@@std@@@std@@QAEXXZ ; std::list<GostCrypt::SecurityTokenKeyfilePath,std::allocator<GostCrypt::SecurityTokenKeyfilePath> >::clear
  00412	ff 75 a0	 push	 DWORD PTR _selectedTokenKeyfiles$2[ebp]
  00415	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0041a	83 c4 04	 add	 esp, 4
  0041d	e9 b5 01 00 00	 jmp	 $LN447@KeyFilesDl
$LN24@KeyFilesDl:

; 621  : 		}
; 622  : 
; 623  : 		if (lw == IDC_KEYREMOVE)

  00422	b8 c3 13 00 00	 mov	 eax, 5059		; 000013c3H
  00427	66 3b f0	 cmp	 si, ax
  0042a	0f 85 9b 00 00
	00		 jne	 $LN26@KeyFilesDl

; 624  : 		{
; 625  : 			HWND list = GetDlgItem (hwndDlg, IDC_KEYLIST);

  00430	68 b4 13 00 00	 push	 5044			; 000013b4H
  00435	53		 push	 ebx
  00436	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 626  : 			LVITEM LvItem;
; 627  : 			memset (&LvItem, 0, sizeof(LvItem));

  0043c	6a 34		 push	 52			; 00000034H
  0043e	8b f0		 mov	 esi, eax
  00440	8d 45 c8	 lea	 eax, DWORD PTR _LvItem$4[ebp]
  00443	6a 00		 push	 0
  00445	50		 push	 eax
  00446	e8 00 00 00 00	 call	 _memset

; 628  : 			LvItem.mask = LVIF_PARAM;   
; 629  : 			LvItem.iItem = -1;
; 630  : 
; 631  : 			while (-1 != (LvItem.iItem = ListView_GetNextItem (list, LvItem.iItem, LVIS_SELECTED)))

  0044b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00451	83 c4 0c	 add	 esp, 12			; 0000000cH
  00454	c7 45 c8 04 00
	00 00		 mov	 DWORD PTR _LvItem$4[ebp], 4
  0045b	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _LvItem$4[ebp+4], -1
  00462	6a 02		 push	 2
  00464	6a ff		 push	 -1
  00466	68 0c 10 00 00	 push	 4108			; 0000100cH
  0046b	56		 push	 esi
  0046c	ff d7		 call	 edi
  0046e	89 45 cc	 mov	 DWORD PTR _LvItem$4[ebp+4], eax
  00471	83 f8 ff	 cmp	 eax, -1
  00474	74 3f		 je	 SHORT $LN14@KeyFilesDl
$LL13@KeyFilesDl:

; 632  : 			{
; 633  : 				ListView_GetItem (list, &LvItem);

  00476	8d 45 c8	 lea	 eax, DWORD PTR _LvItem$4[ebp]
  00479	50		 push	 eax
  0047a	6a 00		 push	 0
  0047c	68 05 10 00 00	 push	 4101			; 00001005H
  00481	56		 push	 esi
  00482	ff d7		 call	 edi

; 634  : 				param->FirstKeyFile = KeyFileRemove (param->FirstKeyFile, (KeyFile *) LvItem.lParam);

  00484	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00489	ff 75 e8	 push	 DWORD PTR _LvItem$4[ebp+32]
  0048c	ff 70 04	 push	 DWORD PTR [eax+4]
  0048f	e8 00 00 00 00	 call	 ?KeyFileRemove@@YAPAUKeyFileStruct@@PAU1@0@Z ; KeyFileRemove
  00494	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  0049a	83 c4 08	 add	 esp, 8
  0049d	6a 02		 push	 2
  0049f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  004a2	ff 75 cc	 push	 DWORD PTR _LvItem$4[ebp+4]
  004a5	68 0c 10 00 00	 push	 4108			; 0000100cH
  004aa	56		 push	 esi
  004ab	ff d7		 call	 edi
  004ad	89 45 cc	 mov	 DWORD PTR _LvItem$4[ebp+4], eax
  004b0	83 f8 ff	 cmp	 eax, -1
  004b3	75 c1		 jne	 SHORT $LL13@KeyFilesDl
$LN14@KeyFilesDl:

; 635  : 			} 
; 636  : 			
; 637  : 			LoadKeyList (hwndDlg, param->FirstKeyFile);

  004b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  004ba	ff 70 04	 push	 DWORD PTR [eax+4]
  004bd	53		 push	 ebx
  004be	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  004c3	83 c4 08	 add	 esp, 8

; 638  :  			return 1;

  004c6	e9 0c 01 00 00	 jmp	 $LN447@KeyFilesDl
$LN26@KeyFilesDl:

; 639  : 		}
; 640  : 
; 641  : 		if (lw == IDC_KEYREMOVEALL)

  004cb	b8 c4 13 00 00	 mov	 eax, 5060		; 000013c4H
  004d0	66 3b f0	 cmp	 si, ax
  004d3	75 1e		 jne	 SHORT $LN27@KeyFilesDl

; 642  : 		{
; 643  : 			KeyFileRemoveAll (&param->FirstKeyFile);

  004d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  004da	83 c0 04	 add	 eax, 4
  004dd	50		 push	 eax
  004de	e8 00 00 00 00	 call	 _KeyFileRemoveAll

; 644  : 			LoadKeyList (hwndDlg, NULL);

  004e3	6a 00		 push	 0
  004e5	53		 push	 ebx
  004e6	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  004eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 645  : 			return 1;

  004ee	e9 e4 00 00 00	 jmp	 $LN447@KeyFilesDl
$LN27@KeyFilesDl:

; 646  : 		}
; 647  : 
; 648  : 		if (lw == IDC_GENERATE_KEYFILE)

  004f3	b8 ca 13 00 00	 mov	 eax, 5066		; 000013caH
  004f8	66 3b f0	 cmp	 si, ax
  004fb	75 1e		 jne	 SHORT $LN28@KeyFilesDl

; 649  : 		{
; 650  : 			DialogBoxParamW (hInst, 

  004fd	6a 00		 push	 0
  004ff	68 00 00 00 00	 push	 OFFSET _KeyfileGeneratorDlgProc@16
  00504	53		 push	 ebx
  00505	68 95 13 00 00	 push	 5013			; 00001395H
  0050a	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00510	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 651  : 				MAKEINTRESOURCEW (IDD_KEYFILE_GENERATOR), hwndDlg,
; 652  : 				(DLGPROC) KeyfileGeneratorDlgProc, (LPARAM) 0);
; 653  : 			return 1;

  00516	e9 bc 00 00 00	 jmp	 $LN447@KeyFilesDl
$LN28@KeyFilesDl:

; 654  : 		}
; 655  : 
; 656  : 		if (lw == IDC_LINK_KEYFILES_INFO)

  0051b	b8 ea 13 00 00	 mov	 eax, 5098		; 000013eaH
  00520	66 3b f0	 cmp	 si, ax
  00523	75 0f		 jne	 SHORT $LN29@KeyFilesDl

; 657  : 		{
; 658  : 			//Applink ("keyfiles", TRUE, "");
; 659  : 			Extlink("http://www.gostcrypt.org/redirect.php?a=2");

  00525	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
  0052a	e8 00 00 00 00	 call	 _Extlink
  0052f	83 c4 04	 add	 esp, 4

; 660  : 		}
; 661  : 
; 662  : 		if (lw == IDOK)

  00532	eb 38		 jmp	 SHORT $LN31@KeyFilesDl
$LN29@KeyFilesDl:
  00534	66 83 fe 01	 cmp	 si, 1
  00538	75 28		 jne	 SHORT $LN30@KeyFilesDl

; 663  : 		{
; 664  : 			param->EnableKeyFiles = IsButtonChecked (GetDlgItem (hwndDlg, IDC_KEYFILES_ENABLE));

  0053a	68 c5 13 00 00	 push	 5061			; 000013c5H
  0053f	53		 push	 ebx
  00540	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00546	50		 push	 eax
  00547	e8 00 00 00 00	 call	 _IsButtonChecked
  0054c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  00552	83 c4 04	 add	 esp, 4

; 665  : 			EndDialog (hwndDlg, IDOK);

  00555	6a 01		 push	 1
  00557	53		 push	 ebx
  00558	89 01		 mov	 DWORD PTR [ecx], eax
  0055a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 666  : 			return 1;

  00560	eb 75		 jmp	 SHORT $LN447@KeyFilesDl
$LN30@KeyFilesDl:

; 667  : 		}
; 668  : 
; 669  : 		if (lw == IDCANCEL)

  00562	66 83 fe 02	 cmp	 si, 2
  00566	0f 84 20 fb ff
	ff		 je	 $LN35@KeyFilesDl
$LN31@KeyFilesDl:

; 670  : 		{
; 671  : 			KeyFileRemoveAll (&param->FirstKeyFile);
; 672  : 			*param = origParam;
; 673  : 
; 674  : 			EndDialog (hwndDlg, IDCLOSE);
; 675  : 			return 1;
; 676  : 		}
; 677  : 
; 678  : 	case WM_DROPFILES:
; 679  : 		{
; 680  : 			HDROP hdrop = (HDROP) wParam;
; 681  : 
; 682  : 			int i = 0, count = DragQueryFile (hdrop, 0xFFFFFFFF, NULL, 0);

  0056c	6a 00		 push	 0
  0056e	6a 00		 push	 0
  00570	6a ff		 push	 -1
  00572	56		 push	 esi
  00573	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  0057a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16

; 683  : 
; 684  : 			while (count-- > 0)

  00580	85 c0		 test	 eax, eax
  00582	7e 4c		 jle	 SHORT $LN435@KeyFilesDl
$LL15@KeyFilesDl:
  00584	48		 dec	 eax

; 685  : 			{
; 686  : 				KeyFile *kf = (KeyFile *) malloc (sizeof (KeyFile));

  00585	68 08 01 00 00	 push	 264			; 00000108H
  0058a	89 45 a8	 mov	 DWORD PTR _count$1$[ebp], eax
  0058d	e8 00 00 00 00	 call	 _malloc
  00592	83 c4 04	 add	 esp, 4
  00595	8b f8		 mov	 edi, eax

; 687  : 				DragQueryFile (hdrop, i++, kf->FileName, sizeof (kf->FileName));

  00597	68 04 01 00 00	 push	 260			; 00000104H
  0059c	57		 push	 edi
  0059d	ff 75 ac	 push	 DWORD PTR _i$1$[ebp]
  005a0	56		 push	 esi
  005a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragQueryFileA@16

; 688  : 				param->FirstKeyFile = KeyFileAdd (param->FirstKeyFile, kf);

  005a7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?param@?1??KeyFilesDlgProc@@9@16@4PAUKeyFilesDlgParam@@A
  005ad	ff 45 ac	 inc	 DWORD PTR _i$1$[ebp]
  005b0	57		 push	 edi
  005b1	ff 76 04	 push	 DWORD PTR [esi+4]
  005b4	e8 00 00 00 00	 call	 _KeyFileAdd

; 689  : 				LoadKeyList (hwndDlg, param->FirstKeyFile);

  005b9	50		 push	 eax
  005ba	53		 push	 ebx
  005bb	89 46 04	 mov	 DWORD PTR [esi+4], eax
  005be	e8 00 00 00 00	 call	 ?LoadKeyList@@YAXPAUHWND__@@PAUKeyFileStruct@@@Z ; LoadKeyList
  005c3	8b 45 a8	 mov	 eax, DWORD PTR _count$1$[ebp]
  005c6	83 c4 10	 add	 esp, 16			; 00000010H
  005c9	8b 75 a4	 mov	 esi, DWORD PTR _wParam$GSCopy$1$[ebp]
  005cc	85 c0		 test	 eax, eax
  005ce	7f b4		 jg	 SHORT $LL15@KeyFilesDl
$LN435@KeyFilesDl:

; 690  : 			}
; 691  : 
; 692  : 			DragFinish (hdrop);

  005d0	56		 push	 esi
  005d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragFinish@4
$LN447@KeyFilesDl:

; 717  : }

  005d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005da	b8 01 00 00 00	 mov	 eax, 1
  005df	5f		 pop	 edi
  005e0	5e		 pop	 esi
  005e1	33 cd		 xor	 ecx, ebp
  005e3	5b		 pop	 ebx
  005e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005e9	8b e5		 mov	 esp, ebp
  005eb	5d		 pop	 ebp
  005ec	c2 10 00	 ret	 16			; 00000010H
_KeyFilesDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyFilesApply
_TEXT	SEGMENT
_e$2 = -1576						; size = 4
_password$GSCopy$1$ = -1572				; size = 4
_totalRead$1$ = -1568					; size = 4
$T3 = -1568						; size = 4
_keyfileData$4 = -1564					; size = 12
_searchHandle$1$ = -1552				; size = 4
_i$1$ = -1552						; size = 4
tv2888 = -1548						; size = 4
$T5 = -1548						; size = 4
_crc$1$ = -1544						; size = 4
_status$1$ = -1540					; size = 4
_fBuf$ = -1536						; size = 296
$T6 = -1240						; size = 112
_kfSubStruct$ = -1128					; size = 264
_fileAttributes$7 = -864				; size = 36
_statStruct$ = -828					; size = 48
$T8 = -780						; size = 24
$T9 = -756						; size = 24
$T10 = -732						; size = 24
$T11 = -708						; size = 24
$T12 = -684						; size = 24
$T13 = -660						; size = 24
$T14 = -636						; size = 24
$T15 = -612						; size = 24
$T16 = -588						; size = 24
$T17 = -564						; size = 24
_searchPath$ = -540					; size = 520
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_password$ = 8						; size = 4
_firstKeyFile$ = 12					; size = 4
_KeyFilesApply PROC					; COMDAT

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_KeyFilesApply
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 06 00
	00		 sub	 esp, 1564		; 0000061cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b 7d 0c	 mov	 edi, DWORD PTR _firstKeyFile$[ebp]

; 306  : 	BOOL status = TRUE;

  00034	be 01 00 00 00	 mov	 esi, 1
  00039	8b 45 08	 mov	 eax, DWORD PTR _password$[ebp]
  0003c	89 85 dc f9 ff
	ff		 mov	 DWORD PTR _password$GSCopy$1$[ebp], eax
  00042	89 b5 fc f9 ff
	ff		 mov	 DWORD PTR _status$1$[ebp], esi

; 307  : 	KeyFile kfSubStruct;
; 308  : 	KeyFile *kf;
; 309  : 	KeyFile *kfSub = &kfSubStruct;
; 310  : 	static unsigned __int8 keyPool [KEYFILE_POOL_SIZE];
; 311  : 	size_t i;
; 312  : 	struct stat statStruct;
; 313  : 	char searchPath [GST_MAX_PATH*2];
; 314  : 	struct _finddata_t fBuf;
; 315  : 	intptr_t searchHandle;
; 316  : 
; 317  : 	HiddenFilesPresentInKeyfilePath = FALSE;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _HiddenFilesPresentInKeyfilePath, 0

; 318  : 
; 319  : 	if (firstKeyFile == NULL) return TRUE;

  00052	85 ff		 test	 edi, edi
  00054	0f 84 f1 07 00
	00		 je	 $LN1366@KeyFilesAp

; 320  : 
; 321  : 	VirtualLock (keyPool, sizeof (keyPool));

  0005a	6a 40		 push	 64			; 00000040H
  0005c	68 00 00 00 00	 push	 OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualLock@8

; 322  : 	memset (keyPool, 0, sizeof (keyPool));

  00067	6a 40		 push	 64			; 00000040H
  00069	6a 00		 push	 0
  0006b	68 00 00 00 00	 push	 OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  00070	e8 00 00 00 00	 call	 _memset
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
$LL4@KeyFilesAp:

; 323  : 
; 324  : 	for (kf = firstKeyFile; kf != NULL; kf = kf->Next)

  00078	85 ff		 test	 edi, edi
  0007a	0f 84 75 07 00
	00		 je	 $LN3@KeyFilesAp

; 325  : 	{
; 326  : 		// Determine whether it's a security token path
; 327  : 		try
; 328  : 		{
; 329  : 			if (SecurityToken::IsKeyfilePathValid (SingleStringToWide (kf->FileName)))

  00080	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008a	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH
  00094	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+16], 0
  0009e	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR $T17[ebp], 0
  000a5	75 04		 jne	 SHORT $LN192@KeyFilesAp
  000a7	33 c9		 xor	 ecx, ecx
  000a9	eb 0e		 jmp	 SHORT $LN193@KeyFilesAp
$LN192@KeyFilesAp:
  000ab	8b cf		 mov	 ecx, edi
  000ad	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1349@KeyFilesAp:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL1349@KeyFilesAp
  000b7	2b ca		 sub	 ecx, edx
$LN193@KeyFilesAp:
  000b9	51		 push	 ecx
  000ba	57		 push	 edi
  000bb	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  000c1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000c6	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  000cc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000d0	50		 push	 eax
  000d1	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  000dd	83 c4 08	 add	 esp, 8
  000e0	50		 push	 eax
  000e1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000e5	e8 00 00 00 00	 call	 ?IsKeyfilePathValid@SecurityToken@GostCrypt@@SA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; GostCrypt::SecurityToken::IsKeyfilePathValid
  000ea	8a d8		 mov	 bl, al
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR $T14[ebp+20]
  000f5	83 f8 08	 cmp	 eax, 8
  000f8	72 13		 jb	 SHORT $LN201@KeyFilesAp
  000fa	40		 inc	 eax
  000fb	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00101	50		 push	 eax
  00102	ff b5 84 fd ff
	ff		 push	 DWORD PTR $T14[ebp]
  00108	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN201@KeyFilesAp:
  0010d	33 c0		 xor	 eax, eax
  0010f	c7 85 98 fd ff
	ff 07 00 00 00	 mov	 DWORD PTR $T14[ebp+20], 7
  00119	66 89 85 84 fd
	ff ff		 mov	 WORD PTR $T14[ebp], ax
  00120	88 45 fc	 mov	 BYTE PTR __$EHRec$[ebp+12], al
  00123	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR $T17[ebp+20]
  00129	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+16], 0
  00133	83 f8 10	 cmp	 eax, 16			; 00000010H
  00136	72 45		 jb	 SHORT $LN384@KeyFilesAp
  00138	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR $T17[ebp]
  0013e	40		 inc	 eax
  0013f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00144	72 2e		 jb	 SHORT $LN379@KeyFilesAp
  00146	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00149	74 05		 je	 SHORT $LN380@KeyFilesAp
  0014b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1369@KeyFilesAp:
$LN380@KeyFilesAp:
  00150	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00153	3b c1		 cmp	 eax, ecx
  00155	72 05		 jb	 SHORT $LN381@KeyFilesAp
  00157	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1370@KeyFilesAp:
$LN381@KeyFilesAp:
  0015c	2b c8		 sub	 ecx, eax
  0015e	83 f9 04	 cmp	 ecx, 4
  00161	73 05		 jae	 SHORT $LN382@KeyFilesAp
  00163	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1371@KeyFilesAp:
$LN382@KeyFilesAp:
  00168	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0016b	76 05		 jbe	 SHORT $LN383@KeyFilesAp
  0016d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1372@KeyFilesAp:
$LN383@KeyFilesAp:
  00172	8b c8		 mov	 ecx, eax
$LN379@KeyFilesAp:
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0017a	83 c4 04	 add	 esp, 4
$LN384@KeyFilesAp:
  0017d	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T17[ebp+20], 15 ; 0000000fH
  00187	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T17[ebp+16], 0
  00191	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR $T17[ebp], 0
  00198	84 db		 test	 bl, bl
  0019a	0f 84 6a 03 00
	00		 je	 $LN1248@KeyFilesAp

; 330  : 			{
; 331  : 				// Apply security token keyfile
; 332  : 				vector <byte> keyfileData;

  001a0	c7 85 e4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _keyfileData$4[ebp], 0
  001aa	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _keyfileData$4[ebp+4], 0
  001b4	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _keyfileData$4[ebp+8], 0

; 333  : 				SecurityToken::GetKeyfileData (SecurityTokenKeyfile (SingleStringToWide (kf->FileName)), keyfileData);

  001be	80 3f 00	 cmp	 BYTE PTR [edi], 0
  001c1	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  001c5	c7 85 b0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH
  001cf	c7 85 ac fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp+16], 0
  001d9	c6 85 9c fd ff
	ff 00		 mov	 BYTE PTR $T15[ebp], 0
  001e0	75 04		 jne	 SHORT $LN534@KeyFilesAp
  001e2	33 c9		 xor	 ecx, ecx
  001e4	eb 13		 jmp	 SHORT $LN535@KeyFilesAp
$LN534@KeyFilesAp:
  001e6	8b cf		 mov	 ecx, edi
  001e8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001eb	0f 1f 44 00 00	 npad	 5
$LL1350@KeyFilesAp:
  001f0	8a 01		 mov	 al, BYTE PTR [ecx]
  001f2	41		 inc	 ecx
  001f3	84 c0		 test	 al, al
  001f5	75 f9		 jne	 SHORT $LL1350@KeyFilesAp
  001f7	2b ca		 sub	 ecx, edx
$LN535@KeyFilesAp:
  001f9	51		 push	 ecx
  001fa	57		 push	 edi
  001fb	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00201	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00206	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0020c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00210	50		 push	 eax
  00211	8d 85 6c fd ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  0021d	83 c4 08	 add	 esp, 8
  00220	33 c9		 xor	 ecx, ecx
  00222	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00226	6a ff		 push	 -1
  00228	51		 push	 ecx
  00229	66 89 8d b4 fd
	ff ff		 mov	 WORD PTR $T16[ebp], cx
  00230	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00236	50		 push	 eax
  00237	c7 85 c8 fd ff
	ff 07 00 00 00	 mov	 DWORD PTR $T16[ebp+20], 7
  00241	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp+16], 0
  0024b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00250	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00256	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  0025a	50		 push	 eax
  0025b	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00261	e8 00 00 00 00	 call	 ??0SecurityTokenKeyfile@GostCrypt@@QAE@ABUSecurityTokenKeyfilePath@1@@Z ; GostCrypt::SecurityTokenKeyfile::SecurityTokenKeyfile
  00266	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR _keyfileData$4[ebp]
  0026c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00270	51		 push	 ecx
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?GetKeyfileData@SecurityToken@GostCrypt@@SAXABUSecurityTokenKeyfile@2@AAV?$vector@EV?$allocator@E@std@@@std@@@Z ; GostCrypt::SecurityToken::GetKeyfileData
  00277	83 c4 08	 add	 esp, 8
  0027a	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00280	e8 00 00 00 00	 call	 ??1SecurityTokenKeyfile@GostCrypt@@QAE@XZ
  00285	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR $T16[ebp+20]
  0028b	83 f8 08	 cmp	 eax, 8
  0028e	72 13		 jb	 SHORT $LN675@KeyFilesAp
  00290	40		 inc	 eax
  00291	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00297	50		 push	 eax
  00298	ff b5 b4 fd ff
	ff		 push	 DWORD PTR $T16[ebp]
  0029e	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN675@KeyFilesAp:
  002a3	33 c0		 xor	 eax, eax
  002a5	c7 85 c8 fd ff
	ff 07 00 00 00	 mov	 DWORD PTR $T16[ebp+20], 7
  002af	66 89 85 b4 fd
	ff ff		 mov	 WORD PTR $T16[ebp], ax
  002b6	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR $T13[ebp+20]
  002bc	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T16[ebp+16], 0
  002c6	83 f8 08	 cmp	 eax, 8
  002c9	72 13		 jb	 SHORT $LN778@KeyFilesAp
  002cb	40		 inc	 eax
  002cc	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  002d2	50		 push	 eax
  002d3	ff b5 6c fd ff
	ff		 push	 DWORD PTR $T13[ebp]
  002d9	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN778@KeyFilesAp:
  002de	33 c0		 xor	 eax, eax
  002e0	c7 85 80 fd ff
	ff 07 00 00 00	 mov	 DWORD PTR $T13[ebp+20], 7
  002ea	66 89 85 6c fd
	ff ff		 mov	 WORD PTR $T13[ebp], ax
  002f1	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR $T15[ebp+20]
  002f7	c7 85 7c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+16], 0
  00301	83 f8 10	 cmp	 eax, 16			; 00000010H
  00304	72 13		 jb	 SHORT $LN881@KeyFilesAp
  00306	40		 inc	 eax
  00307	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  0030d	50		 push	 eax
  0030e	ff b5 9c fd ff
	ff		 push	 DWORD PTR $T15[ebp]
  00314	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN881@KeyFilesAp:

; 334  : 
; 335  : 				if (keyfileData.empty())

  00319	8b 85 e4 f9 ff
	ff		 mov	 eax, DWORD PTR _keyfileData$4[ebp]
  0031f	8b 95 e8 f9 ff
	ff		 mov	 edx, DWORD PTR _keyfileData$4[ebp+4]
  00325	3b c2		 cmp	 eax, edx
  00327	c7 85 b0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH
  00331	0f 94 c1	 sete	 cl
  00334	c7 85 ac fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T15[ebp+16], 0
  0033e	c6 85 9c fd ff
	ff 00		 mov	 BYTE PTR $T15[ebp], 0
  00345	84 c9		 test	 cl, cl
  00347	74 45		 je	 SHORT $LN32@KeyFilesAp

; 336  : 				{
; 337  : 					SetLastError (ERROR_HANDLE_EOF); 

  00349	6a 26		 push	 38			; 00000026H
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 338  : 					handleWin32Error (MainDlg);

  00351	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00357	e8 00 00 00 00	 call	 _handleWin32Error

; 339  : 					Error ("ERR_PROCESS_KEYFILE");

  0035c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  00361	e8 00 00 00 00	 call	 _Error
  00366	83 c4 08	 add	 esp, 8

; 340  : 					status = FALSE;
; 341  : 					continue;

  00369	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR _keyfileData$4[ebp]
  0036f	33 f6		 xor	 esi, esi
  00371	89 b5 fc f9 ff
	ff		 mov	 DWORD PTR _status$1$[ebp], esi
  00377	e8 00 00 00 00	 call	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
  0037c	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]

; 475  : }

  00382	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00389	e9 ea fc ff ff	 jmp	 $LL4@KeyFilesAp
$LN32@KeyFilesAp:

; 342  : 				}
; 343  : 
; 344  : 				unsigned __int32 crc = 0xffffffff;
; 345  : 				int writePos = 0;

  0038e	33 f6		 xor	 esi, esi
  00390	c7 85 f8 f9 ff
	ff ff ff ff ff	 mov	 DWORD PTR _crc$1$[ebp], -1

; 346  : 				size_t totalRead = 0;
; 347  : 
; 348  : 				for (size_t i = 0; i < keyfileData.size(); i++)

  0039a	33 db		 xor	 ebx, ebx
  0039c	89 b5 e0 f9 ff
	ff		 mov	 DWORD PTR _totalRead$1$[ebp], esi
  003a2	89 9d f0 f9 ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
  003a8	2b d0		 sub	 edx, eax
  003aa	0f 84 9a 00 00
	00		 je	 $LN10@KeyFilesAp
  003b0	c7 85 f4 f9 ff
	ff ff ff ff 00	 mov	 DWORD PTR tv2888[ebp], 16777215 ; 00ffffffH
  003ba	66 0f 1f 44 00
	00		 npad	 6
$LL7@KeyFilesAp:

; 349  : 				{
; 350  : 					crc = UPDC32 (keyfileData[i], crc);

  003c0	0f b6 0c 18	 movzx	 ecx, BYTE PTR [eax+ebx]
  003c4	33 8d f8 f9 ff
	ff		 xor	 ecx, DWORD PTR _crc$1$[ebp]
  003ca	0f b6 c9	 movzx	 ecx, cl
  003cd	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _crc_32_tab[ecx*4]
  003d4	33 8d f4 f9 ff
	ff		 xor	 ecx, DWORD PTR tv2888[ebp]
  003da	89 8d f8 f9 ff
	ff		 mov	 DWORD PTR _crc$1$[ebp], ecx

; 351  : 
; 352  : 					keyPool[writePos++] += (unsigned __int8) (crc >> 24);

  003e0	c1 e9 18	 shr	 ecx, 24			; 00000018H
  003e3	00 8e 00 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[esi], cl

; 353  : 					keyPool[writePos++] += (unsigned __int8) (crc >> 16);

  003e9	8b 8d f8 f9 ff
	ff		 mov	 ecx, DWORD PTR _crc$1$[ebp]
  003ef	c1 e9 10	 shr	 ecx, 16			; 00000010H
  003f2	00 8e 01 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[esi+1], cl

; 354  : 					keyPool[writePos++] += (unsigned __int8) (crc >> 8);

  003f8	8b 8d f8 f9 ff
	ff		 mov	 ecx, DWORD PTR _crc$1$[ebp]
  003fe	8b d9		 mov	 ebx, ecx
  00400	c1 eb 08	 shr	 ebx, 8
  00403	00 9e 02 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[esi+2], bl

; 355  : 					keyPool[writePos++] += (unsigned __int8) crc;

  00409	00 8e 03 00 00
	00		 add	 BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[esi+3], cl
  0040f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00412	33 f6		 xor	 esi, esi
  00414	89 9d f4 f9 ff
	ff		 mov	 DWORD PTR tv2888[ebp], ebx

; 356  : 
; 357  : 					if (writePos >= KEYFILE_POOL_SIZE)
; 358  : 						writePos = 0;
; 359  : 
; 360  : 					if (++totalRead >= KEYFILE_MAX_READ_LEN)

  0041a	8b 9d f0 f9 ff
	ff		 mov	 ebx, DWORD PTR _i$1$[ebp]
  00420	83 f9 40	 cmp	 ecx, 64			; 00000040H
  00423	0f 4c f1	 cmovl	 esi, ecx
  00426	8b 8d e0 f9 ff
	ff		 mov	 ecx, DWORD PTR _totalRead$1$[ebp]
  0042c	41		 inc	 ecx
  0042d	89 8d e0 f9 ff
	ff		 mov	 DWORD PTR _totalRead$1$[ebp], ecx
  00433	81 f9 00 00 10
	00		 cmp	 ecx, 1048576		; 00100000H
  00439	73 0f		 jae	 SHORT $LN10@KeyFilesAp

; 346  : 				size_t totalRead = 0;
; 347  : 
; 348  : 				for (size_t i = 0; i < keyfileData.size(); i++)

  0043b	43		 inc	 ebx
  0043c	89 9d f0 f9 ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
  00442	3b da		 cmp	 ebx, edx
  00444	0f 82 76 ff ff
	ff		 jb	 $LL7@KeyFilesAp
$LN10@KeyFilesAp:

; 361  : 						break;
; 362  : 				}
; 363  : 
; 364  : 				burn (&keyfileData.front(), keyfileData.size());

  0044a	89 85 e0 f9 ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00450	8b c8		 mov	 ecx, eax
  00452	89 85 f4 f9 ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00458	8b f2		 mov	 esi, edx
  0045a	85 d2		 test	 edx, edx
  0045c	74 28		 je	 SHORT $LN1290@KeyFilesAp
  0045e	66 90		 npad	 2
$LL1135@KeyFilesAp:
  00460	c6 00 00	 mov	 BYTE PTR [eax], 0
  00463	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00466	83 ee 01	 sub	 esi, 1
  00469	75 f5		 jne	 SHORT $LL1135@KeyFilesAp
  0046b	8b 85 e4 f9 ff
	ff		 mov	 eax, DWORD PTR _keyfileData$4[ebp]
  00471	85 d2		 test	 edx, edx
  00473	74 11		 je	 SHORT $LN1290@KeyFilesAp
$LL11@KeyFilesAp:
  00475	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00478	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0047b	83 ea 01	 sub	 edx, 1
  0047e	75 f5		 jne	 SHORT $LL11@KeyFilesAp
  00480	8b 85 e4 f9 ff
	ff		 mov	 eax, DWORD PTR _keyfileData$4[ebp]
$LN1290@KeyFilesAp:

; 365  : 				continue;

  00486	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0048a	85 c0		 test	 eax, eax
  0048c	74 64		 je	 SHORT $LN1142@KeyFilesAp
  0048e	8b 8d ec f9 ff
	ff		 mov	 ecx, DWORD PTR _keyfileData$4[ebp+8]
  00494	2b c8		 sub	 ecx, eax
  00496	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0049c	72 2d		 jb	 SHORT $LN1210@KeyFilesAp
  0049e	a8 1f		 test	 al, 31			; 0000001fH
  004a0	74 05		 je	 SHORT $LN1211@KeyFilesAp
  004a2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1373@KeyFilesAp:
$LN1211@KeyFilesAp:
  004a7	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  004aa	3b c8		 cmp	 ecx, eax
  004ac	72 05		 jb	 SHORT $LN1212@KeyFilesAp
  004ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1374@KeyFilesAp:
$LN1212@KeyFilesAp:
  004b3	2b c1		 sub	 eax, ecx
  004b5	83 f8 04	 cmp	 eax, 4
  004b8	73 05		 jae	 SHORT $LN1213@KeyFilesAp
  004ba	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1375@KeyFilesAp:
$LN1213@KeyFilesAp:
  004bf	83 f8 23	 cmp	 eax, 35			; 00000023H
  004c2	76 05		 jbe	 SHORT $LN1214@KeyFilesAp
  004c4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1376@KeyFilesAp:
$LN1214@KeyFilesAp:
  004c9	8b c1		 mov	 eax, ecx
$LN1210@KeyFilesAp:
  004cb	50		 push	 eax
  004cc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004d1	83 c4 04	 add	 esp, 4
  004d4	c7 85 e4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _keyfileData$4[ebp], 0
  004de	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _keyfileData$4[ebp+4], 0
  004e8	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _keyfileData$4[ebp+8], 0
$LN1142@KeyFilesAp:

; 475  : }

  004f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN1363@KeyFilesAp:
  004f9	8b b5 fc f9 ff
	ff		 mov	 esi, DWORD PTR _status$1$[ebp]
$LN2@KeyFilesAp:

; 323  : 
; 324  : 	for (kf = firstKeyFile; kf != NULL; kf = kf->Next)

  004ff	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]
  00505	e9 6e fb ff ff	 jmp	 $LL4@KeyFilesAp

; 366  : 			}

$LN1248@KeyFilesAp:

; 372  : 		}
; 373  : 
; 374  : 		// Determine whether it's a path or a file
; 375  : 		if (stat (kf->FileName, &statStruct) != 0)

  0050a	8d 85 c4 fc ff
	ff		 lea	 eax, DWORD PTR _statStruct$[ebp]
  00510	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00517	50		 push	 eax
  00518	57		 push	 edi
  00519	e8 00 00 00 00	 call	 __stat64i32
  0051e	83 c4 08	 add	 esp, 8
  00521	85 c0		 test	 eax, eax
  00523	74 2b		 je	 SHORT $LN35@KeyFilesAp
$LN1368@KeyFilesAp:

; 376  : 		{
; 377  : 			handleWin32Error (MainDlg);

  00525	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0052b	e8 00 00 00 00	 call	 _handleWin32Error

; 378  : 			Error ("ERR_PROCESS_KEYFILE");

  00530	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  00535	e8 00 00 00 00	 call	 _Error
  0053a	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]
  00540	83 c4 08	 add	 esp, 8

; 379  : 			status = FALSE;

  00543	33 f6		 xor	 esi, esi
  00545	89 b5 fc f9 ff
	ff		 mov	 DWORD PTR _status$1$[ebp], esi
  0054b	e9 28 fb ff ff	 jmp	 $LL4@KeyFilesAp
$LN35@KeyFilesAp:

; 380  : 			continue;
; 381  : 		}
; 382  : 
; 383  : 		if (statStruct.st_mode & S_IFDIR)		// If it's a directory

  00550	f7 85 ca fc ff
	ff 00 40 00 00	 test	 DWORD PTR _statStruct$[ebp+6], 16384 ; 00004000H

; 384  : 		{
; 385  : 			/* Find and process all keyfiles in the directory */
; 386  : 			int keyfileCount = 0;
; 387  : 
; 388  : 			snprintf (searchPath, sizeof (searchPath), "%s\\*.*", kf->FileName);

  0055a	57		 push	 edi
  0055b	0f 84 64 02 00
	00		 je	 $LN36@KeyFilesAp
  00561	68 00 00 00 00	 push	 OFFSET ??_C@_06BNHEIDIH@?$CFs?2?$CK?4?$CK?$AA@
  00566	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _searchPath$[ebp]
  0056c	33 db		 xor	 ebx, ebx
  0056e	68 08 02 00 00	 push	 520			; 00000208H
  00573	50		 push	 eax
  00574	e8 00 00 00 00	 call	 __snprintf

; 389  : 			if ((searchHandle = _findfirst (searchPath, &fBuf)) == -1)

  00579	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _fBuf$[ebp]
  0057f	50		 push	 eax
  00580	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _searchPath$[ebp]
  00586	50		 push	 eax
  00587	e8 00 00 00 00	 call	 __findfirst64i32
  0058c	8b f0		 mov	 esi, eax
  0058e	83 c4 18	 add	 esp, 24			; 00000018H
  00591	89 b5 f0 f9 ff
	ff		 mov	 DWORD PTR _searchHandle$1$[ebp], esi
  00597	83 fe ff	 cmp	 esi, -1
  0059a	75 2b		 jne	 SHORT $LL15@KeyFilesAp

; 390  : 			{
; 391  : 				handleWin32Error (MainDlg);

  0059c	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  005a2	e8 00 00 00 00	 call	 _handleWin32Error

; 392  : 				Error ("ERR_PROCESS_KEYFILE_PATH");

  005a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LAFEHOHO@ERR_PROCESS_KEYFILE_PATH?$AA@
  005ac	e8 00 00 00 00	 call	 _Error
  005b1	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]
  005b7	83 c4 08	 add	 esp, 8

; 393  : 				status = FALSE;

  005ba	33 f6		 xor	 esi, esi
  005bc	89 b5 fc f9 ff
	ff		 mov	 DWORD PTR _status$1$[ebp], esi
  005c2	e9 b1 fa ff ff	 jmp	 $LL4@KeyFilesAp
$LL15@KeyFilesAp:

; 394  : 				continue;
; 395  : 			}
; 396  : 
; 397  : 			do
; 398  : 			{
; 399  : 				WIN32_FILE_ATTRIBUTE_DATA fileAttributes;
; 400  : 
; 401  : 				snprintf (kfSub->FileName, sizeof(kfSub->FileName), "%s%c%s", kf->FileName,

  005c7	8d 85 24 fa ff
	ff		 lea	 eax, DWORD PTR _fBuf$[ebp+36]
  005cd	50		 push	 eax
  005ce	6a 5c		 push	 92			; 0000005cH
  005d0	57		 push	 edi
  005d1	68 00 00 00 00	 push	 OFFSET ??_C@_06GIIGBPHC@?$CFs?$CFc?$CFs?$AA@
  005d6	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _kfSubStruct$[ebp]
  005dc	68 04 01 00 00	 push	 260			; 00000104H
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 __snprintf

; 402  : 					'\\',
; 403  : 					fBuf.name
; 404  : 					);
; 405  : 
; 406  : 				// Determine whether it's a path or a file
; 407  : 				if (stat (kfSub->FileName, &statStruct) != 0)

  005e7	8d 85 c4 fc ff
	ff		 lea	 eax, DWORD PTR _statStruct$[ebp]
  005ed	50		 push	 eax
  005ee	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _kfSubStruct$[ebp]
  005f4	50		 push	 eax
  005f5	e8 00 00 00 00	 call	 __stat64i32
  005fa	83 c4 20	 add	 esp, 32			; 00000020H
  005fd	85 c0		 test	 eax, eax
  005ff	74 28		 je	 SHORT $LN39@KeyFilesAp

; 408  : 				{
; 409  : 					handleWin32Error (MainDlg);

  00601	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00607	e8 00 00 00 00	 call	 _handleWin32Error

; 410  : 					Error ("ERR_PROCESS_KEYFILE");

  0060c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  00611	e8 00 00 00 00	 call	 _Error
  00616	83 c4 08	 add	 esp, 8

; 411  : 					status = FALSE;

  00619	33 f6		 xor	 esi, esi
  0061b	89 b5 fc f9 ff
	ff		 mov	 DWORD PTR _status$1$[ebp], esi

; 412  : 					continue;

  00621	8b b5 f0 f9 ff
	ff		 mov	 esi, DWORD PTR _searchHandle$1$[ebp]
  00627	eb 76		 jmp	 SHORT $LN13@KeyFilesAp
$LN39@KeyFilesAp:

; 413  : 				}
; 414  : 				else if (statStruct.st_mode & S_IFDIR)		// If it's a directory

  00629	f7 85 ca fc ff
	ff 00 40 00 00	 test	 DWORD PTR _statStruct$[ebp+6], 16384 ; 00004000H
  00633	75 6a		 jne	 SHORT $LN13@KeyFilesAp

; 415  : 				{
; 416  : 					// Prevent recursive folder scanning
; 417  : 					continue;	 
; 418  : 				}
; 419  : 
; 420  : 				// Skip hidden files
; 421  : 				if (GetFileAttributesEx (kfSub->FileName, GetFileExInfoStandard, &fileAttributes)
; 422  : 					&& (fileAttributes.dwFileAttributes & FILE_ATTRIBUTE_HIDDEN) != 0)

  00635	8d 85 a0 fc ff
	ff		 lea	 eax, DWORD PTR _fileAttributes$7[ebp]
  0063b	50		 push	 eax
  0063c	6a 00		 push	 0
  0063e	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _kfSubStruct$[ebp]
  00644	50		 push	 eax
  00645	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesExA@12
  0064b	85 c0		 test	 eax, eax
  0064d	74 15		 je	 SHORT $LN42@KeyFilesAp
  0064f	f6 85 a0 fc ff
	ff 02		 test	 BYTE PTR _fileAttributes$7[ebp], 2
  00656	74 0c		 je	 SHORT $LN42@KeyFilesAp

; 423  : 				{
; 424  : 					HiddenFilesPresentInKeyfilePath = TRUE;

  00658	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _HiddenFilesPresentInKeyfilePath, 1

; 425  : 					continue;	 

  00662	eb 3b		 jmp	 SHORT $LN13@KeyFilesAp
$LN42@KeyFilesAp:

; 426  : 				}
; 427  : 
; 428  : 				++keyfileCount;
; 429  : 
; 430  : 				// Apply keyfile to the pool
; 431  : 				if (!KeyFileProcess (keyPool, kfSub))

  00664	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _kfSubStruct$[ebp]
  0066a	43		 inc	 ebx
  0066b	50		 push	 eax
  0066c	68 00 00 00 00	 push	 OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  00671	e8 00 00 00 00	 call	 ?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z ; KeyFileProcess
  00676	83 c4 08	 add	 esp, 8
  00679	85 c0		 test	 eax, eax
  0067b	75 22		 jne	 SHORT $LN13@KeyFilesAp

; 432  : 				{
; 433  : 					handleWin32Error (MainDlg);

  0067d	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00683	e8 00 00 00 00	 call	 _handleWin32Error

; 434  : 					Error ("ERR_PROCESS_KEYFILE");

  00688	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BKNFAOGD@ERR_PROCESS_KEYFILE?$AA@
  0068d	e8 00 00 00 00	 call	 _Error
  00692	83 c4 08	 add	 esp, 8

; 435  : 					status = FALSE;

  00695	c7 85 fc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _status$1$[ebp], 0
$LN13@KeyFilesAp:

; 436  : 				}
; 437  : 
; 438  : 			} while (_findnext (searchHandle, &fBuf) != -1);

  0069f	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _fBuf$[ebp]
  006a5	50		 push	 eax
  006a6	56		 push	 esi
  006a7	e8 00 00 00 00	 call	 __findnext64i32
  006ac	83 c4 08	 add	 esp, 8
  006af	83 f8 ff	 cmp	 eax, -1
  006b2	0f 85 0f ff ff
	ff		 jne	 $LL15@KeyFilesAp

; 439  : 			_findclose (searchHandle);

  006b8	56		 push	 esi
  006b9	e8 00 00 00 00	 call	 __findclose

; 440  : 
; 441  : 			burn (&kfSubStruct, sizeof (kfSubStruct));

  006be	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR _kfSubStruct$[ebp]
  006c4	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  006c9	83 c4 04	 add	 esp, 4
  006cc	8b f1		 mov	 esi, ecx
  006ce	8b d0		 mov	 edx, eax
$LL1251@KeyFilesAp:
  006d0	c6 02 00	 mov	 BYTE PTR [edx], 0
  006d3	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  006d6	83 ee 01	 sub	 esi, 1
  006d9	75 f5		 jne	 SHORT $LL1251@KeyFilesAp
  006db	0f 1f 44 00 00	 npad	 5
$LL19@KeyFilesAp:
  006e0	c6 00 00	 mov	 BYTE PTR [eax], 0
  006e3	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  006e6	83 e9 01	 sub	 ecx, 1
  006e9	75 f5		 jne	 SHORT $LL19@KeyFilesAp

; 442  : 
; 443  : 
; 444  : 			if (keyfileCount == 0)

  006eb	85 db		 test	 ebx, ebx
  006ed	0f 85 06 fe ff
	ff		 jne	 $LN1363@KeyFilesAp

; 445  : 			{
; 446  : 				ErrorDirect ((wstring (GetString ("ERR_KEYFILE_PATH_EMPTY")) + L"\n\n" + SingleStringToWide (kf->FileName)).c_str());

  006f3	57		 push	 edi
  006f4	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  006fa	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  006ff	8d 85 54 fd ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00705	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 9
  0070c	50		 push	 eax
  0070d	8d 85 f4 fc ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00713	50		 push	 eax
  00714	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00719	8b f0		 mov	 esi, eax
  0071b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EHNHOJEI@ERR_KEYFILE_PATH_EMPTY?$AA@
  00720	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00724	e8 00 00 00 00	 call	 _GetString
  00729	83 c4 0c	 add	 esp, 12			; 0000000cH
  0072c	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00738	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  0073d	50		 push	 eax
  0073e	8d 85 24 fd ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00744	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
  00748	50		 push	 eax
  00749	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0074e	56		 push	 esi
  0074f	50		 push	 eax
  00750	8d 85 3c fd ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00756	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  0075a	50		 push	 eax
  0075b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@0@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00760	83 c4 18	 add	 esp, 24			; 00000018H
  00763	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00767	72 02		 jb	 SHORT $LN1268@KeyFilesAp
  00769	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1268@KeyFilesAp:
  0076b	50		 push	 eax
  0076c	e8 00 00 00 00	 call	 _ErrorDirect
  00771	83 c4 04	 add	 esp, 4
  00774	8d 8d 3c fd ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0077a	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0077f	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00785	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0078a	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00790	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00795	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0079b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  007a0	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  007a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  007ad	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  007b2	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]

; 447  : 				status = FALSE;

  007b8	33 f6		 xor	 esi, esi
  007ba	89 b5 fc f9 ff
	ff		 mov	 DWORD PTR _status$1$[ebp], esi
  007c0	e9 b3 f8 ff ff	 jmp	 $LL4@KeyFilesAp
$LN36@KeyFilesAp:

; 448  : 			}
; 449  : 		}
; 450  : 		// Apply keyfile to the pool
; 451  : 		else if (!KeyFileProcess (keyPool, kf))

  007c5	68 00 00 00 00	 push	 OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  007ca	e8 00 00 00 00	 call	 ?KeyFileProcess@@YAHPAEPAUKeyFileStruct@@@Z ; KeyFileProcess
  007cf	83 c4 08	 add	 esp, 8
  007d2	85 c0		 test	 eax, eax
  007d4	0f 85 25 fd ff
	ff		 jne	 $LN2@KeyFilesAp

; 452  : 		{
; 453  : 			handleWin32Error (MainDlg);
; 454  : 			Error ("ERR_PROCESS_KEYFILE");
; 455  : 			status = FALSE;

  007da	e9 46 fd ff ff	 jmp	 $LN1368@KeyFilesAp
__catch$_KeyFilesApply$0:

; 367  : 		}
; 368  : 		catch (Exception &e)
; 369  : 		{
; 370  : 			e.Show (NULL);

  007df	8b 8d d8 f9 ff
	ff		 mov	 ecx, DWORD PTR _e$2[ebp]
  007e5	6a 00		 push	 0
  007e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  007e9	ff 10		 call	 DWORD PTR [eax]

; 371  : 			return FALSE;

  007eb	b8 00 00 00 00	 mov	 eax, $LN65@KeyFilesAp
  007f0	c3		 ret	 0
$LN65@KeyFilesAp:
  007f1	33 c0		 xor	 eax, eax
  007f3	eb 58		 jmp	 SHORT $LN1@KeyFilesAp
$LN3@KeyFilesAp:
  007f5	8b 9d dc f9 ff
	ff		 mov	 ebx, DWORD PTR _password$GSCopy$1$[ebp]

; 456  : 		}
; 457  : 	}
; 458  : 
; 459  : 	/* Mix the keyfile pool contents into the password */
; 460  : 
; 461  : 	for (i = 0; i < sizeof (keyPool); i++)

  007fb	33 c9		 xor	 ecx, ecx
  007fd	0f 1f 00	 npad	 3
$LL23@KeyFilesAp:

; 462  : 	{
; 463  : 		if (i < password->Length)
; 464  : 			password->Text[i] += keyPool[i];

  00800	8a 81 00 00 00
	00		 mov	 al, BYTE PTR ?keyPool@?1??KeyFilesApply@@9@4PAEA[ecx]
  00806	3b 0b		 cmp	 ecx, DWORD PTR [ebx]
  00808	73 06		 jae	 SHORT $LN46@KeyFilesAp
  0080a	00 44 0b 04	 add	 BYTE PTR [ebx+ecx+4], al

; 465  : 		else

  0080e	eb 04		 jmp	 SHORT $LN21@KeyFilesAp
$LN46@KeyFilesAp:

; 466  : 			password->Text[i] = keyPool[i];

  00810	88 44 0b 04	 mov	 BYTE PTR [ebx+ecx+4], al
$LN21@KeyFilesAp:

; 456  : 		}
; 457  : 	}
; 458  : 
; 459  : 	/* Mix the keyfile pool contents into the password */
; 460  : 
; 461  : 	for (i = 0; i < sizeof (keyPool); i++)

  00814	41		 inc	 ecx
  00815	83 f9 40	 cmp	 ecx, 64			; 00000040H
  00818	72 e6		 jb	 SHORT $LL23@KeyFilesAp

; 467  : 	}
; 468  : 
; 469  : 	if (password->Length < (int)sizeof (keyPool))

  0081a	83 3b 40	 cmp	 DWORD PTR [ebx], 64	; 00000040H
  0081d	73 06		 jae	 SHORT $LN26@KeyFilesAp

; 470  :         password->Length = sizeof (keyPool);

  0081f	c7 03 40 00 00
	00		 mov	 DWORD PTR [ebx], 64	; 00000040H
$LN26@KeyFilesAp:

; 471  : 
; 472  : 	burn (keyPool, sizeof (keyPool));

  00825	b9 00 00 00 00	 mov	 ecx, OFFSET ?keyPool@?1??KeyFilesApply@@9@4PAEA
  0082a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0082f	8b fa		 mov	 edi, edx
  00831	8b c1		 mov	 eax, ecx
$LL1272@KeyFilesAp:
  00833	c6 00 00	 mov	 BYTE PTR [eax], 0
  00836	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00839	83 ef 01	 sub	 edi, 1
  0083c	75 f5		 jne	 SHORT $LL1272@KeyFilesAp
  0083e	66 90		 npad	 2
$LL27@KeyFilesAp:
  00840	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00843	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00846	83 ea 01	 sub	 edx, 1
  00849	75 f5		 jne	 SHORT $LL27@KeyFilesAp
$LN1366@KeyFilesAp:

; 473  : 
; 474  : 	return status;

  0084b	8b c6		 mov	 eax, esi
$LN1@KeyFilesAp:

; 475  : }

  0084d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00850	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00857	59		 pop	 ecx
  00858	5f		 pop	 edi
  00859	5e		 pop	 esi
  0085a	5b		 pop	 ebx
  0085b	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0085e	33 cd		 xor	 ecx, ebp
  00860	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00865	8b e5		 mov	 esp, ebp
  00867	5d		 pop	 ebp
  00868	c3		 ret	 0
$LN1365@KeyFilesAp:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_KeyFilesApply$2:
  00000	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_KeyFilesApply$3:
  0000b	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$4:
  00016	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR _keyfileData$4[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$_KeyFilesApply$5:
  00021	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_KeyFilesApply$6:
  0002c	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$7:
  00037	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfilePath@GostCrypt@@QAE@XZ
__unwindfunclet$_KeyFilesApply$8:
  00042	8d 8d 28 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1SecurityTokenKeyfile@GostCrypt@@QAE@XZ
__unwindfunclet$_KeyFilesApply$9:
  0004d	8d 8d 54 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_KeyFilesApply$10:
  00058	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$11:
  00063	8d 8d 0c fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$_KeyFilesApply$12:
  0006e	8d 8d 24 fd ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$_KeyFilesApply:
  00079	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0007d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00080	8b 8a d4 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1580]
  00086	33 c8		 xor	 ecx, eax
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00090	33 c8		 xor	 ecx, eax
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_KeyFilesApply
  0009c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_KeyFilesApply ENDP
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyFileCloneAll
_TEXT	SEGMENT
_clone$1$ = -4						; size = 4
tv287 = 8						; size = 4
_firstKeyFile$ = 8					; size = 4
_KeyFileCloneAll PROC					; COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 167  : 	KeyFile *cloneFirstKeyFile = KeyFileClone (firstKeyFile);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _firstKeyFile$[ebp]
  00008	85 ff		 test	 edi, edi
  0000a	0f 84 b8 00 00
	00		 je	 $LN34@KeyFileClo
  00010	56		 push	 esi
  00011	68 08 01 00 00	 push	 264			; 00000108H
  00016	e8 00 00 00 00	 call	 _malloc
  0001b	8b f0		 mov	 esi, eax
  0001d	89 45 fc	 mov	 DWORD PTR _clone$1$[ebp], eax
  00020	83 c4 04	 add	 esp, 4
  00023	8b d7		 mov	 edx, edi
  00025	2b f7		 sub	 esi, edi
$LL9@KeyFileClo:
  00027	8a 0a		 mov	 cl, BYTE PTR [edx]
  00029	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0002c	88 4c 16 ff	 mov	 BYTE PTR [esi+edx-1], cl
  00030	84 c9		 test	 cl, cl
  00032	75 f3		 jne	 SHORT $LL9@KeyFileClo
  00034	05 04 01 00 00	 add	 eax, 260		; 00000104H
  00039	89 45 08	 mov	 DWORD PTR tv287[ebp], eax
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 171  : 	kf = firstKeyFile->Next;

  00042	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]

; 172  : 	while (kf != NULL)

  00048	85 ff		 test	 edi, edi
  0004a	74 73		 je	 SHORT $LN3@KeyFileClo
  0004c	53		 push	 ebx

; 173  : 	{
; 174  : 		KeyFileAdd (cloneFirstKeyFile, KeyFileClone (kf));

$LN11@KeyFileClo:
  0004d	68 08 01 00 00	 push	 264			; 00000108H
  00052	e8 00 00 00 00	 call	 _malloc
  00057	8b d8		 mov	 ebx, eax
  00059	83 c4 04	 add	 esp, 4
  0005c	8b f3		 mov	 esi, ebx
  0005e	8b cf		 mov	 ecx, edi
  00060	2b f7		 sub	 esi, edi
$LL13@KeyFileClo:
  00062	8a 11		 mov	 dl, BYTE PTR [ecx]
  00064	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00067	88 54 0e ff	 mov	 BYTE PTR [esi+ecx-1], dl
  0006b	84 d2		 test	 dl, dl
  0006d	75 f3		 jne	 SHORT $LL13@KeyFileClo
  0006f	8b 45 08	 mov	 eax, DWORD PTR tv287[ebp]
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _clone$1$[ebp]
  00075	c7 83 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+260], 0
  0007f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00082	74 20		 je	 SHORT $LN16@KeyFileClo
  00084	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL15@KeyFileClo:
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	83 b9 04 01 00
	00 00		 cmp	 DWORD PTR [ecx+260], 0
  00099	8d 81 04 01 00
	00		 lea	 eax, DWORD PTR [ecx+260]
  0009f	75 ef		 jne	 SHORT $LL15@KeyFileClo
  000a1	8b 45 08	 mov	 eax, DWORD PTR tv287[ebp]
$LN16@KeyFileClo:
  000a4	89 99 04 01 00
	00		 mov	 DWORD PTR [ecx+260], ebx
  000aa	c7 83 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+260], 0

; 175  : 		kf = kf->Next;

  000b4	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]
  000ba	85 ff		 test	 edi, edi
  000bc	75 8f		 jne	 SHORT $LN11@KeyFileClo
  000be	5b		 pop	 ebx
$LN3@KeyFileClo:

; 176  : 	}
; 177  : 
; 178  : 	return cloneFirstKeyFile;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _clone$1$[ebp]
  000c2	5e		 pop	 esi
  000c3	5f		 pop	 edi

; 179  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN34@KeyFileClo:

; 168  : 	KeyFile *kf;
; 169  : 
; 170  : 	if (firstKeyFile == NULL) return NULL;

  000c8	33 c0		 xor	 eax, eax
  000ca	5f		 pop	 edi

; 179  : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_KeyFileCloneAll ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyFileClone
_TEXT	SEGMENT
_keyFile$ = 8						; size = 4
_KeyFileClone PROC					; COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 146  : 	KeyFile *clone;
; 147  : 
; 148  : 	if (keyFile == NULL) return NULL;

  00004	8b 75 08	 mov	 esi, DWORD PTR _keyFile$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@KeyFileClo
  0000b	33 c0		 xor	 eax, eax
  0000d	5e		 pop	 esi

; 153  : 	return clone;
; 154  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@KeyFileClo:

; 149  : 
; 150  : 	clone = (KeyFile *) malloc (sizeof (KeyFile));

  00010	68 08 01 00 00	 push	 264			; 00000108H
  00015	e8 00 00 00 00	 call	 _malloc

; 151  : 	strcpy (clone->FileName, keyFile->FileName);

  0001a	8b d0		 mov	 edx, eax
  0001c	83 c4 04	 add	 esp, 4
  0001f	2b d6		 sub	 edx, esi
$LL4@KeyFileClo:
  00021	8a 0e		 mov	 cl, BYTE PTR [esi]
  00023	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00026	88 4c 32 ff	 mov	 BYTE PTR [edx+esi-1], cl
  0002a	84 c9		 test	 cl, cl
  0002c	75 f3		 jne	 SHORT $LL4@KeyFileClo

; 152  : 	clone->Next = NULL;

  0002e	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0
  00038	5e		 pop	 esi

; 153  : 	return clone;
; 154  : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_KeyFileClone ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyFileRemoveAll
_TEXT	SEGMENT
_firstKeyFile$ = 8					; size = 4
_KeyFileRemoveAll PROC					; COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 	KeyFile *kf = *firstKeyFile;

  00003	8b 45 08	 mov	 eax, DWORD PTR _firstKeyFile$[ebp]
  00006	57		 push	 edi
  00007	8b 38		 mov	 edi, DWORD PTR [eax]

; 124  : 	while (kf != NULL)

  00009	85 ff		 test	 edi, edi
  0000b	74 40		 je	 SHORT $LN31@KeyFileRem
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	90		 npad	 1
$LL2@KeyFileRem:

; 125  : 	{
; 126  : 		KeyFile *d = kf;

  00010	8b df		 mov	 ebx, edi

; 127  : 		kf = kf->Next;
; 128  : 		burn (d, sizeof(*d));	// wipe

  00012	b8 08 01 00 00	 mov	 eax, 264		; 00000108H
  00017	8b bf 04 01 00
	00		 mov	 edi, DWORD PTR [edi+260]
  0001d	8b cb		 mov	 ecx, ebx
  0001f	8b f0		 mov	 esi, eax
  00021	8b d3		 mov	 edx, ebx
$LL11@KeyFileRem:
  00023	c6 02 00	 mov	 BYTE PTR [edx], 0
  00026	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00029	83 ee 01	 sub	 esi, 1
  0002c	75 f5		 jne	 SHORT $LL11@KeyFileRem
  0002e	66 90		 npad	 2
$LL7@KeyFileRem:
  00030	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00033	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00036	83 e8 01	 sub	 eax, 1
  00039	75 f5		 jne	 SHORT $LL7@KeyFileRem

; 129  : 		free (d);

  0003b	53		 push	 ebx
  0003c	e8 00 00 00 00	 call	 _free
  00041	83 c4 04	 add	 esp, 4
  00044	85 ff		 test	 edi, edi
  00046	75 c8		 jne	 SHORT $LL2@KeyFileRem

; 130  : 	}
; 131  : 
; 132  : 	*firstKeyFile = NULL;

  00048	8b 45 08	 mov	 eax, DWORD PTR _firstKeyFile$[ebp]
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
$LN31@KeyFileRem:
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00053	5f		 pop	 edi

; 133  : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_KeyFileRemoveAll ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\keyfiles.c
;	COMDAT _KeyFileAdd
_TEXT	SEGMENT
_firstKeyFile$ = 8					; size = 4
_keyFile$ = 12						; size = 4
_KeyFileAdd PROC					; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	KeyFile *kf = firstKeyFile;

  00003	8b 55 08	 mov	 edx, DWORD PTR _firstKeyFile$[ebp]
  00006	8b c2		 mov	 eax, edx

; 61   : 
; 62   : 	if (firstKeyFile != NULL)

  00008	85 d2		 test	 edx, edx
  0000a	74 3c		 je	 SHORT $LN4@KeyFileAdd

; 63   : 	{
; 64   : 		while (kf->Next)

  0000c	83 ba 04 01 00
	00 00		 cmp	 DWORD PTR [edx+260], 0
  00013	8d 8a 04 01 00
	00		 lea	 ecx, DWORD PTR [edx+260]
  00019	74 16		 je	 SHORT $LN3@KeyFileAdd
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@KeyFileAdd:

; 65   : 			kf = kf->Next;

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [eax+260], 0
  00029	8d 88 04 01 00
	00		 lea	 ecx, DWORD PTR [eax+260]
  0002f	75 ef		 jne	 SHORT $LL2@KeyFileAdd
$LN3@KeyFileAdd:

; 66   : 
; 67   : 		kf->Next = keyFile;

  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _keyFile$[ebp]
  00034	89 88 04 01 00
	00		 mov	 DWORD PTR [eax+260], ecx

; 73   : 
; 74   : 	return firstKeyFile;

  0003a	8b c2		 mov	 eax, edx
  0003c	c7 81 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+260], 0

; 75   : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN4@KeyFileAdd:

; 68   : 	}
; 69   : 	else
; 70   : 		firstKeyFile = keyFile;

  00048	8b 45 0c	 mov	 eax, DWORD PTR _keyFile$[ebp]

; 71   : 
; 72   : 	keyFile->Next = NULL;

  0004b	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0

; 75   : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_KeyFileAdd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1960 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1961 :     int _Result;
; 1962 :     va_list _ArgList;
; 1963 :     __crt_va_start(_ArgList, _Format);
; 1964 : #pragma warning(suppress:28719)    // __WARNING_BANNED_API_USAGE
; 1965 :     _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1966 :     __crt_va_end(_ArgList);
; 1967 :     return _Result;
; 1968 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1406 :     #pragma warning(push)
; 1407 :     #pragma warning(disable: 4996) // Deprecation
; 1408 :     return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1409 :     #pragma warning(pop)
; 1410 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 17787: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17788:     volatile char *vptr = (volatile char *)ptr;
; 17789: 
; 17790: #if defined(_M_AMD64)
; 17791: 
; 17792:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 17793: 
; 17794: #else
; 17795: 
; 17796:     while (cnt) {

  00003	8b 55 0c	 mov	 edx, DWORD PTR _cnt$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  00009	8b c8		 mov	 ecx, eax
  0000b	85 d2		 test	 edx, edx
  0000d	74 0c		 je	 SHORT $LN3@RtlSecureZ
  0000f	90		 npad	 1
$LL2@RtlSecureZ:

; 17797: 
; 17798: #if !defined(_M_CEE) && defined(_M_ARM)
; 17799: 
; 17800:         __iso_volatile_store8(vptr, 0);
; 17801: 
; 17802: #else
; 17803: 
; 17804:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 17805: 
; 17806: #endif
; 17807: 
; 17808:         vptr++;

  00013	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]

; 17809:         cnt--;

  00016	83 ea 01	 sub	 edx, 1
  00019	75 f5		 jne	 SHORT $LL2@RtlSecureZ
$LN3@RtlSecureZ:

; 17810:     }
; 17811: 
; 17812: #endif // _M_AMD64
; 17813: 
; 17814:     return ptr;
; 17815: }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
END
