; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Mount\MainCom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@BEBMGMDO@atlTraceDBClient?$AA@	; `string'
PUBLIC	??_C@_0BD@KOADKDIA@atlTraceDBProvider?$AA@	; `string'
PUBLIC	??_C@_0P@LNEGBOLO@atlTraceSnapin?$AA@		; `string'
PUBLIC	??_C@_0BA@MCBFIDIC@atlTraceNotImpl?$AA@		; `string'
PUBLIC	??_C@_0BD@PJPCCAKP@atlTraceAllocation?$AA@	; `string'
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException?$AA@	; `string'
PUBLIC	??_C@_0N@BNNILHBE@atlTraceTime?$AA@		; `string'
PUBLIC	??_C@_0O@MEOJAOKK@atlTraceCache?$AA@		; `string'
PUBLIC	??_C@_0BA@IDBKCKK@atlTraceStencil?$AA@		; `string'
PUBLIC	??_C@_0P@MBNHGHMI@atlTraceString?$AA@		; `string'
PUBLIC	??_C@_0M@IOBBMAHG@atlTraceMap?$AA@		; `string'
PUBLIC	??_C@_0N@FEAAACHD@atlTraceUtil?$AA@		; `string'
PUBLIC	??_C@_0BB@DNJDADMG@atlTraceSecurity?$AA@	; `string'
PUBLIC	??_C@_0N@KLPNCFEE@atlTraceSync?$AA@		; `string'
PUBLIC	??_C@_0O@KHOBHOBJ@atlTraceISAPI?$AA@		; `string'
PUBLIC	??_C@_0BA@MKMIKKJB@atlTraceGeneral?$AA@		; `string'
PUBLIC	??_C@_0M@DGPFJEBB@atlTraceCOM?$AA@		; `string'
PUBLIC	_LIBID_GostCryptMainCom
PUBLIC	_IID_IGostCryptMainCom
PUBLIC	??_C@_0L@LHELAKBP@atlTraceQI?$AA@		; `string'
PUBLIC	_CLSID_GostCryptMainCom
PUBLIC	??_C@_0BC@MALHFBAO@atlTraceRegistrar?$AA@	; `string'
PUBLIC	??_C@_0BB@ILPPDKFL@atlTraceRefcount?$AA@	; `string'
PUBLIC	??_C@_0BC@DGHHNKDC@atlTraceWindowing?$AA@	; `string'
PUBLIC	??_C@_0BB@GHKJKKIE@atlTraceControls?$AA@	; `string'
PUBLIC	??_C@_0BA@DKOAAGGM@atlTraceHosting?$AA@		; `string'
_BSS	SEGMENT
?ObjectCount@@3JC DD 01H DUP (?)			; ObjectCount
_BSS	ENDS
;	COMDAT ??_C@_0BA@DKOAAGGM@atlTraceHosting?$AA@
CONST	SEGMENT
??_C@_0BA@DKOAAGGM@atlTraceHosting?$AA@ DB 'atlTraceHosting', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GHKJKKIE@atlTraceControls?$AA@
CONST	SEGMENT
??_C@_0BB@GHKJKKIE@atlTraceControls?$AA@ DB 'atlTraceControls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DGHHNKDC@atlTraceWindowing?$AA@
CONST	SEGMENT
??_C@_0BC@DGHHNKDC@atlTraceWindowing?$AA@ DB 'atlTraceWindowing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ILPPDKFL@atlTraceRefcount?$AA@
CONST	SEGMENT
??_C@_0BB@ILPPDKFL@atlTraceRefcount?$AA@ DB 'atlTraceRefcount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MALHFBAO@atlTraceRegistrar?$AA@
CONST	SEGMENT
??_C@_0BC@MALHFBAO@atlTraceRegistrar?$AA@ DB 'atlTraceRegistrar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LHELAKBP@atlTraceQI?$AA@
CONST	SEGMENT
??_C@_0L@LHELAKBP@atlTraceQI?$AA@ DB 'atlTraceQI', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_LIBID_GostCryptMainCom DD 01770f56cH
	DW	07881H
	DW	04591H
	DB	0a1H
	DB	079H
	DB	079H
	DB	0b8H
	DB	00H
	DB	01cH
	DB	07dH
	DB	042H
_IID_IGostCryptMainCom DD 0252c9de6H
	DW	0d4b9H
	DW	04a59H
	DB	08aH
	DB	010H
	DB	09cH
	DB	0a7H
	DB	032H
	DB	017H
	DB	0b3H
	DB	0d0H
_CLSID_GostCryptMainCom DD 0cecbc0eeH
	DW	078d9H
	DW	041e6H
	DB	0bcH
	DB	0f1H
	DB	0bcH
	DB	022H
	DB	02bH
	DB	0b2H
	DB	024H
	DB	0baH
CONST	ENDS
;	COMDAT ??_C@_0M@DGPFJEBB@atlTraceCOM?$AA@
CONST	SEGMENT
??_C@_0M@DGPFJEBB@atlTraceCOM?$AA@ DB 'atlTraceCOM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MKMIKKJB@atlTraceGeneral?$AA@
CONST	SEGMENT
??_C@_0BA@MKMIKKJB@atlTraceGeneral?$AA@ DB 'atlTraceGeneral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHOBHOBJ@atlTraceISAPI?$AA@
CONST	SEGMENT
??_C@_0O@KHOBHOBJ@atlTraceISAPI?$AA@ DB 'atlTraceISAPI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLPNCFEE@atlTraceSync?$AA@
CONST	SEGMENT
??_C@_0N@KLPNCFEE@atlTraceSync?$AA@ DB 'atlTraceSync', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DNJDADMG@atlTraceSecurity?$AA@
CONST	SEGMENT
??_C@_0BB@DNJDADMG@atlTraceSecurity?$AA@ DB 'atlTraceSecurity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEAAACHD@atlTraceUtil?$AA@
CONST	SEGMENT
??_C@_0N@FEAAACHD@atlTraceUtil?$AA@ DB 'atlTraceUtil', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IOBBMAHG@atlTraceMap?$AA@
CONST	SEGMENT
??_C@_0M@IOBBMAHG@atlTraceMap?$AA@ DB 'atlTraceMap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBNHGHMI@atlTraceString?$AA@
CONST	SEGMENT
??_C@_0P@MBNHGHMI@atlTraceString?$AA@ DB 'atlTraceString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDBKCKK@atlTraceStencil?$AA@
CONST	SEGMENT
??_C@_0BA@IDBKCKK@atlTraceStencil?$AA@ DB 'atlTraceStencil', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEOJAOKK@atlTraceCache?$AA@
CONST	SEGMENT
??_C@_0O@MEOJAOKK@atlTraceCache?$AA@ DB 'atlTraceCache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BNNILHBE@atlTraceTime?$AA@
CONST	SEGMENT
??_C@_0N@BNNILHBE@atlTraceTime?$AA@ DB 'atlTraceTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException?$AA@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException?$AA@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJPCCAKP@atlTraceAllocation?$AA@
CONST	SEGMENT
??_C@_0BD@PJPCCAKP@atlTraceAllocation?$AA@ DB 'atlTraceAllocation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCBFIDIC@atlTraceNotImpl?$AA@
CONST	SEGMENT
??_C@_0BA@MCBFIDIC@atlTraceNotImpl?$AA@ DB 'atlTraceNotImpl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LNEGBOLO@atlTraceSnapin?$AA@
CONST	SEGMENT
??_C@_0P@LNEGBOLO@atlTraceSnapin?$AA@ DB 'atlTraceSnapin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOADKDIA@atlTraceDBProvider?$AA@
CONST	SEGMENT
??_C@_0BD@KOADKDIA@atlTraceDBProvider?$AA@ DB 'atlTraceDBProvider', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BEBMGMDO@atlTraceDBClient?$AA@
CONST	SEGMENT
??_C@_0BB@BEBMGMDO@atlTraceDBClient?$AA@ DB 'atlTraceDBClient', 00H ; `string'
CONST	ENDS
PUBLIC	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	??0CComBSTR@ATL@@QAE@PBD@Z			; ATL::CComBSTR::CComBSTR
PUBLIC	??0Exception@GostCrypt@@QAE@ABU01@@Z		; GostCrypt::Exception::Exception
PUBLIC	?Show@UserAbort@GostCrypt@@UBEXPAUHWND__@@@Z	; GostCrypt::UserAbort::Show
PUBLIC	??0UserAbort@GostCrypt@@QAE@ABU01@@Z		; GostCrypt::UserAbort::UserAbort
PUBLIC	?GetElevatedInstance@@YAPAUIGostCryptMainCom@@PAUHWND__@@@Z ; GetElevatedInstance
PUBLIC	_ComServerMain
PUBLIC	_UacAnalyzeKernelMiniDump
PUBLIC	_UacBackupVolumeHeader
PUBLIC	_UacRestoreVolumeHeader
PUBLIC	_UacChangePwd
PUBLIC	?AddRef@GostCryptMainCom@@UAGKXZ		; GostCryptMainCom::AddRef
PUBLIC	?Release@GostCryptMainCom@@UAGKXZ		; GostCryptMainCom::Release
PUBLIC	?QueryInterface@GostCryptMainCom@@UAGJABU_GUID@@PAPAX@Z ; GostCryptMainCom::QueryInterface
PUBLIC	?AnalyzeKernelMiniDump@GostCryptMainCom@@UAGXJ@Z ; GostCryptMainCom::AnalyzeKernelMiniDump
PUBLIC	?BackupVolumeHeader@GostCryptMainCom@@UAGHJHPA_W@Z ; GostCryptMainCom::BackupVolumeHeader
PUBLIC	?RestoreVolumeHeader@GostCryptMainCom@@UAGHJPA_W@Z ; GostCryptMainCom::RestoreVolumeHeader
PUBLIC	?CallDriver@GostCryptMainCom@@UAGKKPA_WPAPA_W@Z	; GostCryptMainCom::CallDriver
PUBLIC	?ChangePassword@GostCryptMainCom@@UAGHPA_WPAUPassword@@1HJ@Z ; GostCryptMainCom::ChangePassword
PUBLIC	?CopyFileA@GostCryptMainCom@@UAGKPA_W0@Z	; GostCryptMainCom::CopyFileA
PUBLIC	?DeleteFileA@GostCryptMainCom@@UAGKPA_W@Z	; GostCryptMainCom::DeleteFileA
PUBLIC	?IsPagingFileActive@GostCryptMainCom@@UAGHH@Z	; GostCryptMainCom::IsPagingFileActive
PUBLIC	?ReadWriteFile@GostCryptMainCom@@UAGKHHPA_WPAPA_W_KIPAK@Z ; GostCryptMainCom::ReadWriteFile
PUBLIC	?RegisterFilterDriver@GostCryptMainCom@@UAGKHH@Z ; GostCryptMainCom::RegisterFilterDriver
PUBLIC	?RegisterSystemFavoritesService@GostCryptMainCom@@UAGKH@Z ; GostCryptMainCom::RegisterSystemFavoritesService
PUBLIC	?SetDriverServiceStartType@GostCryptMainCom@@UAGKK@Z ; GostCryptMainCom::SetDriverServiceStartType
PUBLIC	?WriteLocalMachineRegistryDwordValue@GostCryptMainCom@@UAGKPA_W0K@Z ; GostCryptMainCom::WriteLocalMachineRegistryDwordValue
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z		; ATL::CW2AEX<128>::Init
PUBLIC	?AddRef@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ ; GostCryptFactory<GostCryptMainCom>::AddRef
PUBLIC	?Release@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ ; GostCryptFactory<GostCryptMainCom>::Release
PUBLIC	?QueryInterface@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJABU_GUID@@PAPAX@Z ; GostCryptFactory<GostCryptMainCom>::QueryInterface
PUBLIC	?CreateInstance@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z ; GostCryptFactory<GostCryptMainCom>::CreateInstance
PUBLIC	?LockServer@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJH@Z ; GostCryptFactory<GostCryptMainCom>::LockServer
PUBLIC	?IsServerLocked@?$GostCryptFactory@VGostCryptMainCom@@@@UAE_NXZ ; GostCryptFactory<GostCryptMainCom>::IsServerLocked
PUBLIC	??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z	; ATL::AtlConvAllocMemory<char>
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
PUBLIC	??_7Exception@GostCrypt@@6B@			; GostCrypt::Exception::`vftable'
PUBLIC	??_7UserAbort@GostCrypt@@6B@			; GostCrypt::UserAbort::`vftable'
PUBLIC	??_7GostCryptMainCom@@6B@			; GostCryptMainCom::`vftable'
PUBLIC	??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@	; GostCryptFactory<GostCryptMainCom>::`vftable'
PUBLIC	__TI2?AUUserAbort@GostCrypt@@
PUBLIC	__CTA2?AUUserAbort@GostCrypt@@
PUBLIC	??_R0?AUUserAbort@GostCrypt@@@8			; GostCrypt::UserAbort `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUUserAbort@GostCrypt@@@8??0UserAbort@GostCrypt@@QAE@ABU01@@Z4
PUBLIC	??_R0?AUException@GostCrypt@@@8			; GostCrypt::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIClassFactory@@@8			; IClassFactory `RTTI Type Descriptor'
PUBLIC	??_R3IClassFactory@@8				; IClassFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IClassFactory@@8				; IClassFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IClassFactory@@8			; IClassFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@GostCrypt@@6B@			; GostCrypt::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@GostCrypt@@8			; GostCrypt::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@GostCrypt@@8			; GostCrypt::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@GostCrypt@@8		; GostCrypt::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4UserAbort@GostCrypt@@6B@			; GostCrypt::UserAbort::`RTTI Complete Object Locator'
PUBLIC	??_R3UserAbort@GostCrypt@@8			; GostCrypt::UserAbort::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UserAbort@GostCrypt@@8			; GostCrypt::UserAbort::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UserAbort@GostCrypt@@8		; GostCrypt::UserAbort::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIGostCryptMainCom@@@8			; IGostCryptMainCom `RTTI Type Descriptor'
PUBLIC	??_R3IGostCryptMainCom@@8			; IGostCryptMainCom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IGostCryptMainCom@@8			; IGostCryptMainCom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IGostCryptMainCom@@8		; IGostCryptMainCom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4GostCryptMainCom@@6B@			; GostCryptMainCom::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGostCryptMainCom@@@8			; GostCryptMainCom `RTTI Type Descriptor'
PUBLIC	??_R3GostCryptMainCom@@8			; GostCryptMainCom::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GostCryptMainCom@@8			; GostCryptMainCom::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GostCryptMainCom@@8		; GostCryptMainCom::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$GostCryptFactory@VGostCryptMainCom@@@@6B@ ; GostCryptFactory<GostCryptMainCom>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$GostCryptFactory@VGostCryptMainCom@@@@@8 ; GostCryptFactory<GostCryptMainCom> `RTTI Type Descriptor'
PUBLIC	??_R3?$GostCryptFactory@VGostCryptMainCom@@@@8	; GostCryptFactory<GostCryptMainCom>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$GostCryptFactory@VGostCryptMainCom@@@@8	; GostCryptFactory<GostCryptMainCom>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$GostCryptFactory@VGostCryptMainCom@@@@8 ; GostCryptFactory<GostCryptMainCom>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	__recalloc:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__InitializeCriticalSectionEx@12:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__SetProcessShutdownParameters@8:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PostThreadMessageA@16:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoRegisterClassObject@20:PROC
EXTRN	__imp__CoRevokeClassObject@4:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp__SysAllocStringLen@8:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z:PROC	; BaseCom::CallDriver
EXTRN	?CopyFileA@BaseCom@@SAKPA_W0@Z:PROC		; BaseCom::CopyFileA
EXTRN	?DeleteFileA@BaseCom@@SAKPA_W@Z:PROC		; BaseCom::DeleteFileA
EXTRN	?IsPagingFileActive@BaseCom@@SAHH@Z:PROC	; BaseCom::IsPagingFileActive
EXTRN	?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z:PROC ; BaseCom::ReadWriteFile
EXTRN	?RegisterFilterDriver@BaseCom@@SAKHH@Z:PROC	; BaseCom::RegisterFilterDriver
EXTRN	?RegisterSystemFavoritesService@BaseCom@@SAKH@Z:PROC ; BaseCom::RegisterSystemFavoritesService
EXTRN	?SetDriverServiceStartType@BaseCom@@SAKK@Z:PROC	; BaseCom::SetDriverServiceStartType
EXTRN	?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z:PROC ; BaseCom::WriteLocalMachineRegistryDwordValue
EXTRN	?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z:PROC ; ComGetInstanceBase
EXTRN	_ChangePwd:PROC
EXTRN	_WaitCursor:PROC
EXTRN	_NormalCursor:PROC
EXTRN	_IsUacSupported:PROC
EXTRN	_BackupVolumeHeader:PROC
EXTRN	_RestoreVolumeHeader:PROC
EXTRN	_AnalyzeKernelMiniDump:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_IID_IUnknown:BYTE
EXTRN	_IID_IClassFactory:BYTE
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	_MainDlg:DWORD
EXTRN	_UacElevated:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$GostCryptFactory@VGostCryptMainCom@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$GostCryptFactory@VGostCryptMainCom@@@@8 DD FLAT:??_R0?AV?$GostCryptFactory@VGostCryptMainCom@@@@@8 ; GostCryptFactory<GostCryptMainCom>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$GostCryptFactory@VGostCryptMainCom@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$GostCryptFactory@VGostCryptMainCom@@@@8
rdata$r	SEGMENT
??_R2?$GostCryptFactory@VGostCryptMainCom@@@@8 DD FLAT:??_R1A@?0A@EA@?$GostCryptFactory@VGostCryptMainCom@@@@8 ; GostCryptFactory<GostCryptMainCom>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IClassFactory@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3?$GostCryptFactory@VGostCryptMainCom@@@@8
rdata$r	SEGMENT
??_R3?$GostCryptFactory@VGostCryptMainCom@@@@8 DD 00H	; GostCryptFactory<GostCryptMainCom>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$GostCryptFactory@VGostCryptMainCom@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$GostCryptFactory@VGostCryptMainCom@@@@@8
data$r	SEGMENT
??_R0?AV?$GostCryptFactory@VGostCryptMainCom@@@@@8 DD FLAT:??_7type_info@@6B@ ; GostCryptFactory<GostCryptMainCom> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$GostCryptFactory@VGostCryptMainCom@@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$GostCryptFactory@VGostCryptMainCom@@@@6B@
rdata$r	SEGMENT
??_R4?$GostCryptFactory@VGostCryptMainCom@@@@6B@ DD 00H	; GostCryptFactory<GostCryptMainCom>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$GostCryptFactory@VGostCryptMainCom@@@@@8
	DD	FLAT:??_R3?$GostCryptFactory@VGostCryptMainCom@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@GostCryptMainCom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GostCryptMainCom@@8 DD FLAT:??_R0?AVGostCryptMainCom@@@8 ; GostCryptMainCom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GostCryptMainCom@@8
rdata$r	ENDS
;	COMDAT ??_R2GostCryptMainCom@@8
rdata$r	SEGMENT
??_R2GostCryptMainCom@@8 DD FLAT:??_R1A@?0A@EA@GostCryptMainCom@@8 ; GostCryptMainCom::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IGostCryptMainCom@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3GostCryptMainCom@@8
rdata$r	SEGMENT
??_R3GostCryptMainCom@@8 DD 00H				; GostCryptMainCom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2GostCryptMainCom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGostCryptMainCom@@@8
data$r	SEGMENT
??_R0?AVGostCryptMainCom@@@8 DD FLAT:??_7type_info@@6B@	; GostCryptMainCom `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGostCryptMainCom@@', 00H
data$r	ENDS
;	COMDAT ??_R4GostCryptMainCom@@6B@
rdata$r	SEGMENT
??_R4GostCryptMainCom@@6B@ DD 00H			; GostCryptMainCom::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGostCryptMainCom@@@8
	DD	FLAT:??_R3GostCryptMainCom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IGostCryptMainCom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IGostCryptMainCom@@8 DD FLAT:??_R0?AUIGostCryptMainCom@@@8 ; IGostCryptMainCom::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IGostCryptMainCom@@8
rdata$r	ENDS
;	COMDAT ??_R2IGostCryptMainCom@@8
rdata$r	SEGMENT
??_R2IGostCryptMainCom@@8 DD FLAT:??_R1A@?0A@EA@IGostCryptMainCom@@8 ; IGostCryptMainCom::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IGostCryptMainCom@@8
rdata$r	SEGMENT
??_R3IGostCryptMainCom@@8 DD 00H			; IGostCryptMainCom::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IGostCryptMainCom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIGostCryptMainCom@@@8
data$r	SEGMENT
??_R0?AUIGostCryptMainCom@@@8 DD FLAT:??_7type_info@@6B@ ; IGostCryptMainCom `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIGostCryptMainCom@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UserAbort@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UserAbort@GostCrypt@@8 DD FLAT:??_R0?AUUserAbort@GostCrypt@@@8 ; GostCrypt::UserAbort::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UserAbort@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2UserAbort@GostCrypt@@8
rdata$r	SEGMENT
??_R2UserAbort@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@UserAbort@GostCrypt@@8 ; GostCrypt::UserAbort::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R3UserAbort@GostCrypt@@8
rdata$r	SEGMENT
??_R3UserAbort@GostCrypt@@8 DD 00H			; GostCrypt::UserAbort::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UserAbort@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R4UserAbort@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4UserAbort@GostCrypt@@6B@ DD 00H			; GostCrypt::UserAbort::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUUserAbort@GostCrypt@@@8
	DD	FLAT:??_R3UserAbort@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@GostCrypt@@8 DD FLAT:??_R0?AUException@GostCrypt@@@8 ; GostCrypt::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@GostCrypt@@8
rdata$r	SEGMENT
??_R2Exception@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@Exception@GostCrypt@@8 ; GostCrypt::Exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Exception@GostCrypt@@8
rdata$r	SEGMENT
??_R3Exception@GostCrypt@@8 DD 00H			; GostCrypt::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4Exception@GostCrypt@@6B@ DD 00H			; GostCrypt::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUException@GostCrypt@@@8
	DD	FLAT:??_R3Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IClassFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IClassFactory@@8 DD FLAT:??_R0?AUIClassFactory@@@8 ; IClassFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IClassFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2IClassFactory@@8
rdata$r	SEGMENT
??_R2IClassFactory@@8 DD FLAT:??_R1A@?0A@EA@IClassFactory@@8 ; IClassFactory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IClassFactory@@8
rdata$r	SEGMENT
??_R3IClassFactory@@8 DD 00H				; IClassFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IClassFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIClassFactory@@@8
data$r	SEGMENT
??_R0?AUIClassFactory@@@8 DD FLAT:??_7type_info@@6B@	; IClassFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIClassFactory@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
data$r	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUException@GostCrypt@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0Exception@GostCrypt@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUException@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUException@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AUUserAbort@GostCrypt@@@8??0UserAbort@GostCrypt@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUUserAbort@GostCrypt@@@8??0UserAbort@GostCrypt@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUUserAbort@GostCrypt@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0UserAbort@GostCrypt@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUUserAbort@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUUserAbort@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::UserAbort `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUUserAbort@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AUUserAbort@GostCrypt@@
xdata$x	SEGMENT
__CTA2?AUUserAbort@GostCrypt@@ DD 02H
	DD	FLAT:__CT??_R0?AUUserAbort@GostCrypt@@@8??0UserAbort@GostCrypt@@QAE@ABU01@@Z4
	DD	FLAT:__CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUUserAbort@GostCrypt@@
xdata$x	SEGMENT
__TI2?AUUserAbort@GostCrypt@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUUserAbort@GostCrypt@@
xdata$x	ENDS
;	COMDAT ??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@
CONST	SEGMENT
??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@ DD FLAT:??_R4?$GostCryptFactory@VGostCryptMainCom@@@@6B@ ; GostCryptFactory<GostCryptMainCom>::`vftable'
	DD	FLAT:?QueryInterface@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ
	DD	FLAT:?Release@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ
	DD	FLAT:?CreateInstance@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z
	DD	FLAT:?LockServer@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJH@Z
	DD	FLAT:?IsServerLocked@?$GostCryptFactory@VGostCryptMainCom@@@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_7GostCryptMainCom@@6B@
CONST	SEGMENT
??_7GostCryptMainCom@@6B@ DD FLAT:??_R4GostCryptMainCom@@6B@ ; GostCryptMainCom::`vftable'
	DD	FLAT:?QueryInterface@GostCryptMainCom@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@GostCryptMainCom@@UAGKXZ
	DD	FLAT:?Release@GostCryptMainCom@@UAGKXZ
	DD	FLAT:?AnalyzeKernelMiniDump@GostCryptMainCom@@UAGXJ@Z
	DD	FLAT:?BackupVolumeHeader@GostCryptMainCom@@UAGHJHPA_W@Z
	DD	FLAT:?CallDriver@GostCryptMainCom@@UAGKKPA_WPAPA_W@Z
	DD	FLAT:?ChangePassword@GostCryptMainCom@@UAGHPA_WPAUPassword@@1HJ@Z
	DD	FLAT:?CopyFileA@GostCryptMainCom@@UAGKPA_W0@Z
	DD	FLAT:?DeleteFileA@GostCryptMainCom@@UAGKPA_W@Z
	DD	FLAT:?IsPagingFileActive@GostCryptMainCom@@UAGHH@Z
	DD	FLAT:?ReadWriteFile@GostCryptMainCom@@UAGKHHPA_WPAPA_W_KIPAK@Z
	DD	FLAT:?RegisterFilterDriver@GostCryptMainCom@@UAGKHH@Z
	DD	FLAT:?RegisterSystemFavoritesService@GostCryptMainCom@@UAGKH@Z
	DD	FLAT:?RestoreVolumeHeader@GostCryptMainCom@@UAGHJPA_W@Z
	DD	FLAT:?SetDriverServiceStartType@GostCryptMainCom@@UAGKK@Z
	DD	FLAT:?WriteLocalMachineRegistryDwordValue@GostCryptMainCom@@UAGKPA_W0K@Z
CONST	ENDS
;	COMDAT ??_7UserAbort@GostCrypt@@6B@
CONST	SEGMENT
??_7UserAbort@GostCrypt@@6B@ DD FLAT:??_R4UserAbort@GostCrypt@@6B@ ; GostCrypt::UserAbort::`vftable'
	DD	FLAT:?Show@UserAbort@GostCrypt@@UBEXPAUHWND__@@@Z
CONST	ENDS
;	COMDAT ??_7Exception@GostCrypt@@6B@
CONST	SEGMENT
??_7Exception@GostCrypt@@6B@ DD FLAT:??_R4Exception@GostCrypt@@6B@ ; GostCrypt::Exception::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
data$r	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z
_TEXT	SEGMENT
_ppBuff$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFixedBuffer$ = 16					; size = 4
_nFixedBufferLength$ = 20				; size = 4
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z PROC	; ATL::AtlConvAllocMemory<char>, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 120  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00004	8b 75 08	 mov	 esi, DWORD PTR _ppBuff$[ebp]
  00007	57		 push	 edi
  00008	85 f6		 test	 esi, esi
  0000a	74 55		 je	 SHORT $LN33@AtlConvAll

; 121  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	78 58		 js	 SHORT $LN35@AtlConvAll

; 122  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  00013	8b 7d 10	 mov	 edi, DWORD PTR _pszFixedBuffer$[ebp]
  00016	85 ff		 test	 edi, edi
  00018	74 5b		 je	 SHORT $LN36@AtlConvAll

; 123  : 
; 124  : 	//if buffer malloced, try to realloc.
; 125  : 	if (*ppBuff != pszFixedBuffer)

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001c	3b cf		 cmp	 ecx, edi
  0001e	74 2b		 je	 SHORT $LN23@AtlConvAll

; 126  : 	{
; 127  : 		if( nLength > nFixedBufferLength )

  00020	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00023	7e 12		 jle	 SHORT $LN25@AtlConvAll

; 128  : 		{
; 129  : 			_CharType* ppReallocBuf = static_cast< _CharType* >( _recalloc(*ppBuff, nLength,sizeof( _CharType ) ) );

  00025	6a 01		 push	 1
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 __recalloc
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 130  : 			if (ppReallocBuf == NULL) 

  00031	85 c0		 test	 eax, eax
  00033	75 26		 jne	 SHORT $LN27@AtlConvAll
  00035	eb 48		 jmp	 SHORT $LN37@AtlConvAll
$LN25@AtlConvAll:

; 133  : 			}
; 134  : 			*ppBuff = ppReallocBuf;
; 135  : 		} else
; 136  : 		{
; 137  : 			free(*ppBuff);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _free
  0003d	83 c4 04	 add	 esp, 4
$LN28@AtlConvAll:

; 147  : 		{			
; 148  : 			*ppBuff=pszFixedBuffer;

  00040	89 3e		 mov	 DWORD PTR [esi], edi
$LN29@AtlConvAll:

; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	if (*ppBuff == NULL)

  00042	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	75 16		 jne	 SHORT $LN30@AtlConvAll
  00049	eb 3e		 jmp	 SHORT $LN38@AtlConvAll
$LN23@AtlConvAll:

; 138  : 			*ppBuff=pszFixedBuffer;
; 139  : 		}
; 140  : 
; 141  : 	} else //Buffer is not currently malloced.
; 142  : 	{
; 143  : 		if( nLength > nFixedBufferLength )

  0004b	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  0004e	7e f0		 jle	 SHORT $LN28@AtlConvAll

; 144  : 		{
; 145  : 			*ppBuff = static_cast< _CharType* >( calloc(nLength,sizeof( _CharType ) ) );

  00050	6a 01		 push	 1
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _calloc
  00058	83 c4 08	 add	 esp, 8
$LN27@AtlConvAll:
  0005b	89 06		 mov	 DWORD PTR [esi], eax

; 146  : 		} else

  0005d	eb e3		 jmp	 SHORT $LN29@AtlConvAll
$LN30@AtlConvAll:

; 155  : 	}
; 156  : }

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN33@AtlConvAll:

; 120  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00061	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00066	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN39@AtlConvAll:
$LN35@AtlConvAll:

; 121  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  0006b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00070	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN40@AtlConvAll:
$LN36@AtlConvAll:

; 122  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  00075	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0007a	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN41@AtlConvAll:
$LN37@AtlConvAll:

; 131  : 			{
; 132  : 				AtlThrow( E_OUTOFMEMORY );

  0007f	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00084	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN42@AtlConvAll:
$LN38@AtlConvAll:

; 153  : 	{
; 154  : 		AtlThrow( E_OUTOFMEMORY );

  00089	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  0008e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN43@AtlConvAll:
$LN32@AtlConvAll:
  00093	cc		 int	 3
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ENDP	; ATL::AtlConvAllocMemory<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z
_TEXT	SEGMENT
_pBuff$ = 8						; size = 4
_pszFixedBuffer$ = 12					; size = 4
_nFixedBufferLength$ = 16				; size = 4
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z PROC		; ATL::AtlConvFreeMemory<char>, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 164  : 	(nFixedBufferLength);
; 165  : 	if( pBuff != pszFixedBuffer )

  00003	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR _pszFixedBuffer$[ebp]
  00009	74 09		 je	 SHORT $LN2@AtlConvFre

; 166  : 	{
; 167  : 		free( pBuff );

  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _free
  00011	83 c4 04	 add	 esp, 4
$LN2@AtlConvFre:

; 168  : 	} 	
; 169  : #ifdef _DEBUG
; 170  : 	else
; 171  : 	{		
; 172  : 		memset(pszFixedBuffer,ATLCONV_DEADLAND_FILL,nFixedBufferLength*sizeof(_CharType));
; 173  : 	}
; 174  : #endif
; 175  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ENDP		; ATL::AtlConvFreeMemory<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IGostCryptMainCom>::~CComPtr<IGostCryptMainCom>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN4@CComPtr
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	51		 push	 ecx
  0002b	ff 50 08	 call	 DWORD PTR [eax+8]
$LN4@CComPtr:
  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IGostCryptMainCom>::~CComPtr<IGostCryptMainCom>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IGostCryptMainCom>::CComPtr<IGostCryptMainCom>, COMDAT
; _this$ = ecx

; 320  :     {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 321  :     }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$CComPtr@UIGostCryptMainCom@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IGostCryptMainCom>::CComPtr<IGostCryptMainCom>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??C?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIGostCryptMainCom@@@1@XZ
_TEXT	SEGMENT
??C?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIGostCryptMainCom@@@1@XZ PROC ; ATL::CComPtrBase<IGostCryptMainCom>::operator->, COMDAT
; _this$ = ecx

; 197  :         ATLASSERT(p!=NULL);
; 198  :         return (_NoAddRefReleaseOnCComPtr<T>*)p;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 199  :     }

  00002	c3		 ret	 0
??C?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIGostCryptMainCom@@@1@XZ ENDP ; ATL::CComPtrBase<IGostCryptMainCom>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??I?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QAEPAPAUIGostCryptMainCom@@XZ
_TEXT	SEGMENT
??I?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QAEPAPAUIGostCryptMainCom@@XZ PROC ; ATL::CComPtrBase<IGostCryptMainCom>::operator&, COMDAT
; _this$ = ecx

; 192  :         ATLASSERT(p==NULL);
; 193  :         return &p;

  00000	8b c1		 mov	 eax, ecx

; 194  :     }

  00002	c3		 ret	 0
??I?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QAEPAPAUIGostCryptMainCom@@XZ ENDP ; ATL::CComPtrBase<IGostCryptMainCom>::operator&
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IGostCryptMainCom>::~CComPtrBase<IGostCryptMainCom>, COMDAT
; _this$ = ecx

; 176  :         if (p)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN2@CComPtrBas

; 177  :             p->Release();

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	51		 push	 ecx
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@CComPtrBas:

; 178  :     }

  0000c	c3		 ret	 0
??1?$CComPtrBase@UIGostCryptMainCom@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IGostCryptMainCom>::~CComPtrBase<IGostCryptMainCom>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIGostCryptMainCom@@@ATL@@IAE@XZ
_TEXT	SEGMENT
??0?$CComPtrBase@UIGostCryptMainCom@@@ATL@@IAE@XZ PROC	; ATL::CComPtrBase<IGostCryptMainCom>::CComPtrBase<IGostCryptMainCom>, COMDAT
; _this$ = ecx

; 157  :     {
; 158  :         p = NULL;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 159  :     }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$CComPtrBase@UIGostCryptMainCom@@@ATL@@IAE@XZ ENDP	; ATL::CComPtrBase<IGostCryptMainCom>::CComPtrBase<IGostCryptMainCom>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?ComGetInstance@@YAHPAUHWND__@@PAPAUIGostCryptMainCom@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_gstServer$ = 12					; size = 4
?ComGetInstance@@YAHPAUHWND__@@PAPAUIGostCryptMainCom@@@Z PROC ; ComGetInstance, COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 361  : 	return ComGetInstanceBase (hWnd, CLSID_GostCryptMainCom, IID_IGostCryptMainCom, (void **) gstServer);

  00003	ff 75 0c	 push	 DWORD PTR _gstServer$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET _IID_IGostCryptMainCom
  0000b	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  00010	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  00013	e8 00 00 00 00	 call	 ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
  00018	83 c4 10	 add	 esp, 16			; 00000010H

; 362  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?ComGetInstance@@YAHPAUHWND__@@PAPAUIGostCryptMainCom@@@Z ENDP ; ComGetInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$GostCryptFactory@VGostCryptMainCom@@@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$GostCryptFactory@VGostCryptMainCom@@@@QAEPAXI@Z PROC ; GostCryptFactory<GostCryptMainCom>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 10		 push	 16			; 00000010H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$GostCryptFactory@VGostCryptMainCom@@@@QAEPAXI@Z ENDP ; GostCryptFactory<GostCryptMainCom>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ?IsServerLocked@?$GostCryptFactory@VGostCryptMainCom@@@@UAE_NXZ
_TEXT	SEGMENT
?IsServerLocked@?$GostCryptFactory@VGostCryptMainCom@@@@UAE_NXZ PROC ; GostCryptFactory<GostCryptMainCom>::IsServerLocked, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	0f 9f c0	 setg	 al

; 87   : 		return ServerLockCount > 0;
; 88   : 	}

  00007	c3		 ret	 0
?IsServerLocked@?$GostCryptFactory@VGostCryptMainCom@@@@UAE_NXZ ENDP ; GostCryptFactory<GostCryptMainCom>::IsServerLocked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ?LockServer@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_fLock$ = 12						; size = 4
?LockServer@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJH@Z PROC ; GostCryptFactory<GostCryptMainCom>::LockServer, COMDAT

; 71   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 		if (fLock)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _fLock$[ebp], 0
  00007	74 0d		 je	 SHORT $LN2@LockServer

; 73   : 		{
; 74   : 			InterlockedIncrement (&ServerLockCount);

  00009	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	f0 ff 40 0c	 lock	  inc	 DWORD PTR [eax+12]

; 80   : 		}
; 81   : 
; 82   : 		return S_OK;

  00010	33 c0		 xor	 eax, eax

; 83   : 	}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
$LN2@LockServer:

; 75   : 		}
; 76   : 		else
; 77   : 		{
; 78   : 			if (!InterlockedDecrement (&ServerLockCount))

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c8 ff	 or	 eax, -1
  0001c	f0 0f c1 41 0c	 lock	  xadd	 DWORD PTR [ecx+12], eax
  00021	75 12		 jne	 SHORT $LN6@LockServer

; 79   : 				PostThreadMessage (MessageThreadId, WM_APP, 0, 0);

  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	68 00 80 00 00	 push	 32768			; 00008000H
  0002c	ff 71 04	 push	 DWORD PTR [ecx+4]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16
$LN6@LockServer:

; 80   : 		}
; 81   : 
; 82   : 		return S_OK;

  00035	33 c0		 xor	 eax, eax

; 83   : 	}

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?LockServer@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJH@Z ENDP ; GostCryptFactory<GostCryptMainCom>::LockServer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ?CreateInstance@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
$T1 = 12						; size = 4
_pUnkOuter$ = 12					; size = 4
_riid$ = 16						; size = 4
_ppvObject$ = 20					; size = 4
?CreateInstance@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z PROC ; GostCryptFactory<GostCryptMainCom>::CreateInstance, COMDAT

; 54   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 		if (pUnkOuter != NULL)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _pUnkOuter$[ebp], 0
  00007	74 09		 je	 SHORT $LN2@CreateInst

; 56   : 			return CLASS_E_NOAGGREGATION;

  00009	b8 10 01 04 80	 mov	 eax, -2147221232	; 80040110H

; 68   : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 10 00	 ret	 16			; 00000010H
$LN2@CreateInst:
  00012	56		 push	 esi

; 57   : 
; 58   : 		GSTlass *gst = new GSTlass (MessageThreadId);

  00013	6a 0c		 push	 12			; 0000000cH
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	8b f0		 mov	 esi, eax
  0001c	83 c4 04	 add	 esp, 4
  0001f	89 75 0c	 mov	 DWORD PTR $T1[ebp], esi
  00022	85 f6		 test	 esi, esi
  00024	74 67		 je	 SHORT $LN21@CreateInst
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	57		 push	 edi
  0002a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7GostCryptMainCom@@6B@
  00033	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00036	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0003d	f0 ff 05 00 00
	00 00		 lock	  inc	 DWORD PTR ?ObjectCount@@3JC

; 61   : 
; 62   : 		HRESULT hr = gst->QueryInterface (riid, ppvObject);

  00044	ff 75 14	 push	 DWORD PTR _ppvObject$[ebp]
  00047	8b 06		 mov	 eax, DWORD PTR [esi]
  00049	ff 75 10	 push	 DWORD PTR _riid$[ebp]
  0004c	56		 push	 esi
  0004d	ff 10		 call	 DWORD PTR [eax]
  0004f	8b f8		 mov	 edi, eax

; 63   : 
; 64   : 		if (hr)

  00051	85 ff		 test	 edi, edi
  00053	74 30		 je	 SHORT $LN14@CreateInst

; 65   : 			delete gst;

  00055	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7GostCryptMainCom@@6B@
  0005b	83 c9 ff	 or	 ecx, -1
  0005e	f0 0f c1 0d 00
	00 00 00	 lock	  xadd	 DWORD PTR ?ObjectCount@@3JC, ecx
  00066	75 12		 jne	 SHORT $LN18@CreateInst
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	68 00 80 00 00	 push	 32768			; 00008000H
  00071	ff 76 04	 push	 DWORD PTR [esi+4]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16
$LN18@CreateInst:
  0007a	6a 0c		 push	 12			; 0000000cH
  0007c	56		 push	 esi
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00082	83 c4 08	 add	 esp, 8
$LN14@CreateInst:

; 66   : 
; 67   : 		return hr;

  00085	8b c7		 mov	 eax, edi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi

; 68   : 	}

  00089	5d		 pop	 ebp
  0008a	c2 10 00	 ret	 16			; 00000010H
$LN21@CreateInst:

; 59   : 		if (gst == NULL)
; 60   : 			return E_OUTOFMEMORY;

  0008d	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00092	5e		 pop	 esi

; 68   : 	}

  00093	5d		 pop	 ebp
  00094	c2 10 00	 ret	 16			; 00000010H
?CreateInstance@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJPAUIUnknown@@ABU_GUID@@PAPAX@Z ENDP ; GostCryptFactory<GostCryptMainCom>::CreateInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ?QueryInterface@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppvObject$ = 16					; size = 4
?QueryInterface@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJABU_GUID@@PAPAX@Z PROC ; GostCryptFactory<GostCryptMainCom>::QueryInterface, COMDAT

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 		if (riid == IID_IUnknown || riid == IID_IClassFactory)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	be 00 00 00 00	 mov	 esi, OFFSET _IID_IUnknown
  0000f	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
$LL16@QueryInter:
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 0d		 jne	 SHORT $LN15@QueryInter
  0001a	83 c2 04	 add	 edx, 4
  0001d	83 c6 04	 add	 esi, 4
  00020	83 ef 04	 sub	 edi, 4
  00023	73 ef		 jae	 SHORT $LL16@QueryInter
  00025	eb 1b		 jmp	 SHORT $LN4@QueryInter
$LN15@QueryInter:
  00027	ba 00 00 00 00	 mov	 edx, OFFSET _IID_IClassFactory
  0002c	be 0c 00 00 00	 mov	 esi, 12			; 0000000cH
$LL19@QueryInter:
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	3b 02		 cmp	 eax, DWORD PTR [edx]
  00035	75 21		 jne	 SHORT $LN18@QueryInter
  00037	83 c1 04	 add	 ecx, 4
  0003a	83 c2 04	 add	 edx, 4
  0003d	83 ee 04	 sub	 esi, 4
  00040	73 ef		 jae	 SHORT $LL19@QueryInter
$LN4@QueryInter:

; 42   : 			*ppvObject = this;

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 45 10	 mov	 eax, DWORD PTR _ppvObject$[ebp]

; 47   : 		}
; 48   : 
; 49   : 		AddRef ();

  00048	51		 push	 ecx
  00049	89 08		 mov	 DWORD PTR [eax], ecx
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 04	 call	 DWORD PTR [eax+4]
  00050	5f		 pop	 edi

; 50   : 		return S_OK;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 51   : 	}

  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
$LN18@QueryInter:

; 43   : 		else
; 44   : 		{
; 45   : 			*ppvObject = NULL;

  00058	8b 45 10	 mov	 eax, DWORD PTR _ppvObject$[ebp]
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 46   : 			return E_NOINTERFACE;

  00063	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H

; 51   : 	}

  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@?$GostCryptFactory@VGostCryptMainCom@@@@UAGJABU_GUID@@PAPAX@Z ENDP ; GostCryptFactory<GostCryptMainCom>::QueryInterface
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ?Release@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Release@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ PROC ; GostCryptFactory<GostCryptMainCom>::Release, COMDAT

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 		ULONG r = InterlockedDecrement (&RefCount) + 1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	56		 push	 esi
  00007	83 ce ff	 or	 esi, -1
  0000a	f0 0f c1 70 08	 lock	  xadd	 DWORD PTR [eax+8], esi
  0000f	4e		 dec	 esi
  00010	83 c6 01	 add	 esi, 1

; 32   : 
; 33   : 		if (r == 0)

  00013	75 15		 jne	 SHORT $LN14@Release

; 34   : 			delete this;

  00015	85 c0		 test	 eax, eax
  00017	74 11		 je	 SHORT $LN14@Release
  00019	6a 10		 push	 16			; 00000010H
  0001b	50		 push	 eax
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN14@Release:

; 35   : 
; 36   : 		return r;

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 37   : 	}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Release@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ ENDP ; GostCryptFactory<GostCryptMainCom>::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ?AddRef@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ PROC ; GostCryptFactory<GostCryptMainCom>::AddRef, COMDAT

; 25   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 		return InterlockedIncrement (&RefCount) - 1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	f0 0f c1 41 08	 lock	  xadd	 DWORD PTR [ecx+8], eax
  00010	40		 inc	 eax
  00011	48		 dec	 eax

; 27   : 	}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?AddRef@?$GostCryptFactory@VGostCryptMainCom@@@@UAGKXZ ENDP ; GostCryptFactory<GostCryptMainCom>::AddRef
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ??1?$GostCryptFactory@VGostCryptMainCom@@@@QAE@XZ
_TEXT	SEGMENT
??1?$GostCryptFactory@VGostCryptMainCom@@@@QAE@XZ PROC	; GostCryptFactory<GostCryptMainCom>::~GostCryptFactory<GostCryptMainCom>, COMDAT
; _this$ = ecx

; 22   : 	~GostCryptFactory () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@
  00006	c3		 ret	 0
??1?$GostCryptFactory@VGostCryptMainCom@@@@QAE@XZ ENDP	; GostCryptFactory<GostCryptMainCom>::~GostCryptFactory<GostCryptMainCom>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\basecom.h
;	COMDAT ??0?$GostCryptFactory@VGostCryptMainCom@@@@QAE@K@Z
_TEXT	SEGMENT
_messageThreadId$ = 8					; size = 4
??0?$GostCryptFactory@VGostCryptMainCom@@@@QAE@K@Z PROC	; GostCryptFactory<GostCryptMainCom>::GostCryptFactory<GostCryptMainCom>, COMDAT
; _this$ = ecx

; 20   : 		RefCount (1), ServerLockCount (0), MessageThreadId (messageThreadId) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _messageThreadId$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@
  00011	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [ecx+8], 1
  00018	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$GostCryptFactory@VGostCryptMainCom@@@@QAE@K@Z ENDP	; GostCryptFactory<GostCryptMainCom>::GostCryptFactory<GostCryptMainCom>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT
_nLengthW$1$ = 8					; size = 4
_psz$ = 8						; size = 4
_nConvertCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z PROC		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 446  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 447  : 		if (psz == NULL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _psz$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	75 08		 jne	 SHORT $LN2@Init

; 448  : 		{
; 449  : 			m_psz = NULL;

  0000e	89 1f		 mov	 DWORD PTR [edi], ebx
$LN5@Init:
  00010	5f		 pop	 edi
  00011	5b		 pop	 ebx

; 473  : 		}
; 474  : 	}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
$LN2@Init:

; 450  : 			return;
; 451  : 		}
; 452  : 		int nLengthW = static_cast<int>(wcslen( psz ))+1;

  00016	8b cb		 mov	 ecx, ebx
  00018	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  0001b	0f 1f 44 00 00	 npad	 5
$LL10@Init:
  00020	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00023	83 c1 02	 add	 ecx, 2
  00026	66 85 c0	 test	 ax, ax
  00029	75 f5		 jne	 SHORT $LL10@Init
  0002b	2b ca		 sub	 ecx, edx
  0002d	d1 f9		 sar	 ecx, 1
  0002f	56		 push	 esi

; 453  : 		int nLengthA = nLengthW*4;
; 454  : 		
; 455  : 		AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  00030	68 80 00 00 00	 push	 128			; 00000080H
  00035	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00038	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0003f	89 45 08	 mov	 DWORD PTR _nLengthW$1$[ebp], eax
  00042	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00045	50		 push	 eax
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 456  : 
; 457  : 		BOOL bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	56		 push	 esi
  00055	ff 37		 push	 DWORD PTR [edi]
  00057	ff 75 08	 push	 DWORD PTR _nLengthW$1$[ebp]
  0005a	53		 push	 ebx
  0005b	6a 00		 push	 0
  0005d	ff 75 0c	 push	 DWORD PTR _nConvertCodePage$[ebp]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  00066	8b f0		 mov	 esi, eax
  00068	f7 de		 neg	 esi
  0006a	1b f6		 sbb	 esi, esi
  0006c	83 c6 01	 add	 esi, 1

; 458  : 		if (bFailed)

  0006f	74 54		 je	 SHORT $LN4@Init

; 459  : 		{
; 460  : 			if (GetLastError()==ERROR_INSUFFICIENT_BUFFER)

  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00077	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0007a	75 49		 jne	 SHORT $LN4@Init

; 461  : 			{
; 462  : 				nLengthA = ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, NULL, 0, NULL, NULL );

  0007c	6a 00		 push	 0
  0007e	6a 00		 push	 0
  00080	6a 00		 push	 0
  00082	6a 00		 push	 0
  00084	ff 75 08	 push	 DWORD PTR _nLengthW$1$[ebp]
  00087	53		 push	 ebx
  00088	6a 00		 push	 0
  0008a	ff 75 0c	 push	 DWORD PTR _nConvertCodePage$[ebp]
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  00093	8b f0		 mov	 esi, eax

; 463  : ATLPREFAST_SUPPRESS(6102)
; 464  :                 AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  00095	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00098	68 80 00 00 00	 push	 128			; 00000080H
  0009d	50		 push	 eax
  0009e	56		 push	 esi
  0009f	57		 push	 edi
  000a0	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>
  000a5	83 c4 10	 add	 esp, 16			; 00000010H

; 465  : ATLPREFAST_UNSUPPRESS()
; 466  : 				bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  000a8	6a 00		 push	 0
  000aa	6a 00		 push	 0
  000ac	56		 push	 esi
  000ad	ff 37		 push	 DWORD PTR [edi]
  000af	ff 75 08	 push	 DWORD PTR _nLengthW$1$[ebp]
  000b2	53		 push	 ebx
  000b3	6a 00		 push	 0
  000b5	ff 75 0c	 push	 DWORD PTR _nConvertCodePage$[ebp]
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000be	8b f0		 mov	 esi, eax
  000c0	f7 de		 neg	 esi
  000c2	1b f6		 sbb	 esi, esi
  000c4	46		 inc	 esi
$LN4@Init:

; 467  : 			}			
; 468  : 		}
; 469  : 		if (bFailed)

  000c5	85 f6		 test	 esi, esi
  000c7	5e		 pop	 esi
  000c8	0f 84 42 ff ff
	ff		 je	 $LN5@Init

; 470  : 		{
; 471  : 			AtlConvFreeMemory(m_psz, m_szBuffer, t_nBufferLength);

  000ce	8b 07		 mov	 eax, DWORD PTR [edi]
  000d0	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000d3	3b c1		 cmp	 eax, ecx
  000d5	74 09		 je	 SHORT $LN8@Init
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _free
  000dd	83 c4 04	 add	 esp, 4
$LN8@Init:

; 472  : 			AtlThrowLastWin32();

  000e0	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$LN14@Init:
$LN11@Init:
  000e5	cc		 int	 3
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC			; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 439  : 		return( m_psz );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 440  : 	}

  00002	c3		 ret	 0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 434  : 		AtlConvFreeMemory(m_psz,m_szBuffer,t_nBufferLength);

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00005	3b d0		 cmp	 edx, eax
  00007	74 07		 je	 SHORT $LN4@CW2AEX
  00009	52		 push	 edx
  0000a	e8 00 00 00 00	 call	 _free
  0000f	59		 pop	 ecx
$LN4@CW2AEX:

; 435  : 	}

  00010	c3		 ret	 0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z PROC			; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 422  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 423  : 		Init( psz, _AtlGetConversionACP() );

  00006	6a 03		 push	 3
  00008	ff 75 08	 push	 DWORD PTR _psz$[ebp]
  0000b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000e	89 06		 mov	 DWORD PTR [esi], eax
  00010	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init

; 424  : 	}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GGostCryptMainCom@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GGostCryptMainCom@@QAEPAXI@Z PROC			; GostCryptMainCom::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 c8 ff	 or	 eax, -1
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7GostCryptMainCom@@6B@
  0000f	f0 0f c1 05 00
	00 00 00	 lock	  xadd	 DWORD PTR ?ObjectCount@@3JC, eax
  00017	75 12		 jne	 SHORT $LN5@scalar
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	68 00 80 00 00	 push	 32768			; 00008000H
  00022	ff 76 04	 push	 DWORD PTR [esi+4]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16
$LN5@scalar:
  0002b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0002f	74 0b		 je	 SHORT $LN8@scalar
  00031	6a 0c		 push	 12			; 0000000cH
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN8@scalar:
  0003c	8b c6		 mov	 eax, esi
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
??_GGostCryptMainCom@@QAEPAXI@Z ENDP			; GostCryptMainCom::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?WriteLocalMachineRegistryDwordValue@GostCryptMainCom@@UAGKPA_W0K@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_keyPath$ = 12						; size = 4
_valueName$ = 16					; size = 4
_value$ = 20						; size = 4
?WriteLocalMachineRegistryDwordValue@GostCryptMainCom@@UAGKPA_W0K@Z PROC ; GostCryptMainCom::WriteLocalMachineRegistryDwordValue, COMDAT

; 297  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 298  : 		return BaseCom::WriteLocalMachineRegistryDwordValue (keyPath, valueName, value);

  00003	ff 75 14	 push	 DWORD PTR _value$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _valueName$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _keyPath$[ebp]
  0000c	e8 00 00 00 00	 call	 ?WriteLocalMachineRegistryDwordValue@BaseCom@@SAKPA_W0K@Z ; BaseCom::WriteLocalMachineRegistryDwordValue
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 	}

  00014	5d		 pop	 ebp
  00015	c2 10 00	 ret	 16			; 00000010H
?WriteLocalMachineRegistryDwordValue@GostCryptMainCom@@UAGKPA_W0K@Z ENDP ; GostCryptMainCom::WriteLocalMachineRegistryDwordValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?SetDriverServiceStartType@GostCryptMainCom@@UAGKK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_startType$ = 12					; size = 4
?SetDriverServiceStartType@GostCryptMainCom@@UAGKK@Z PROC ; GostCryptMainCom::SetDriverServiceStartType, COMDAT

; 282  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 		return BaseCom::SetDriverServiceStartType (startType);

  00003	ff 75 0c	 push	 DWORD PTR _startType$[ebp]
  00006	e8 00 00 00 00	 call	 ?SetDriverServiceStartType@BaseCom@@SAKK@Z ; BaseCom::SetDriverServiceStartType
  0000b	83 c4 04	 add	 esp, 4

; 284  : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?SetDriverServiceStartType@GostCryptMainCom@@UAGKK@Z ENDP ; GostCryptMainCom::SetDriverServiceStartType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?RegisterSystemFavoritesService@GostCryptMainCom@@UAGKH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_registerService$ = 12					; size = 4
?RegisterSystemFavoritesService@GostCryptMainCom@@UAGKH@Z PROC ; GostCryptMainCom::RegisterSystemFavoritesService, COMDAT

; 269  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 270  : 		return BaseCom::RegisterSystemFavoritesService (registerService);

  00003	ff 75 0c	 push	 DWORD PTR _registerService$[ebp]
  00006	e8 00 00 00 00	 call	 ?RegisterSystemFavoritesService@BaseCom@@SAKH@Z ; BaseCom::RegisterSystemFavoritesService
  0000b	83 c4 04	 add	 esp, 4

; 271  : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?RegisterSystemFavoritesService@GostCryptMainCom@@UAGKH@Z ENDP ; GostCryptMainCom::RegisterSystemFavoritesService
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?RegisterFilterDriver@GostCryptMainCom@@UAGKHH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_registerDriver$ = 12					; size = 4
_filterType$ = 16					; size = 4
?RegisterFilterDriver@GostCryptMainCom@@UAGKHH@Z PROC	; GostCryptMainCom::RegisterFilterDriver, COMDAT

; 256  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  : 		return BaseCom::RegisterFilterDriver (registerDriver, filterType);

  00003	ff 75 10	 push	 DWORD PTR _filterType$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _registerDriver$[ebp]
  00009	e8 00 00 00 00	 call	 ?RegisterFilterDriver@BaseCom@@SAKHH@Z ; BaseCom::RegisterFilterDriver
  0000e	83 c4 08	 add	 esp, 8

; 258  : 	}

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?RegisterFilterDriver@GostCryptMainCom@@UAGKHH@Z ENDP	; GostCryptMainCom::RegisterFilterDriver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?ReadWriteFile@GostCryptMainCom@@UAGKHHPA_WPAPA_W_KIPAK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_write$ = 12						; size = 4
_device$ = 16						; size = 4
_filePath$ = 20						; size = 4
_bufferBstr$ = 24					; size = 4
_offset$ = 28						; size = 8
_size$ = 36						; size = 4
_sizeDone$ = 40						; size = 4
?ReadWriteFile@GostCryptMainCom@@UAGKHHPA_WPAPA_W_KIPAK@Z PROC ; GostCryptMainCom::ReadWriteFile, COMDAT

; 242  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 		return BaseCom::ReadWriteFile (write, device, filePath, bufferBstr, offset, size, sizeDone);

  00003	ff 75 28	 push	 DWORD PTR _sizeDone$[ebp]
  00006	ff 75 24	 push	 DWORD PTR _size$[ebp]
  00009	ff 75 20	 push	 DWORD PTR _offset$[ebp+4]
  0000c	ff 75 1c	 push	 DWORD PTR _offset$[ebp]
  0000f	ff 75 18	 push	 DWORD PTR _bufferBstr$[ebp]
  00012	ff 75 14	 push	 DWORD PTR _filePath$[ebp]
  00015	ff 75 10	 push	 DWORD PTR _device$[ebp]
  00018	ff 75 0c	 push	 DWORD PTR _write$[ebp]
  0001b	e8 00 00 00 00	 call	 ?ReadWriteFile@BaseCom@@SAKHHPA_WPAPA_W_KIPAK@Z ; BaseCom::ReadWriteFile
  00020	83 c4 20	 add	 esp, 32			; 00000020H

; 244  : 	}

  00023	5d		 pop	 ebp
  00024	c2 24 00	 ret	 36			; 00000024H
?ReadWriteFile@GostCryptMainCom@@UAGKHHPA_WPAPA_W_KIPAK@Z ENDP ; GostCryptMainCom::ReadWriteFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?IsPagingFileActive@GostCryptMainCom@@UAGHH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_checkNonWindowsPartitionsOnly$ = 12			; size = 4
?IsPagingFileActive@GostCryptMainCom@@UAGHH@Z PROC	; GostCryptMainCom::IsPagingFileActive, COMDAT

; 223  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 224  : 		return BaseCom::IsPagingFileActive (checkNonWindowsPartitionsOnly);

  00003	ff 75 0c	 push	 DWORD PTR _checkNonWindowsPartitionsOnly$[ebp]
  00006	e8 00 00 00 00	 call	 ?IsPagingFileActive@BaseCom@@SAHH@Z ; BaseCom::IsPagingFileActive
  0000b	83 c4 04	 add	 esp, 4

; 225  : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?IsPagingFileActive@GostCryptMainCom@@UAGHH@Z ENDP	; GostCryptMainCom::IsPagingFileActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?DeleteFileA@GostCryptMainCom@@UAGKPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_file$ = 12						; size = 4
?DeleteFileA@GostCryptMainCom@@UAGKPA_W@Z PROC		; GostCryptMainCom::DeleteFileA, COMDAT

; 210  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 211  : 		return BaseCom::DeleteFile (file);

  00003	ff 75 0c	 push	 DWORD PTR _file$[ebp]
  00006	e8 00 00 00 00	 call	 ?DeleteFileA@BaseCom@@SAKPA_W@Z ; BaseCom::DeleteFileA
  0000b	83 c4 04	 add	 esp, 4

; 212  : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?DeleteFileA@GostCryptMainCom@@UAGKPA_W@Z ENDP		; GostCryptMainCom::DeleteFileA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?CopyFileA@GostCryptMainCom@@UAGKPA_W0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_sourceFile$ = 12					; size = 4
_destinationFile$ = 16					; size = 4
?CopyFileA@GostCryptMainCom@@UAGKPA_W0@Z PROC		; GostCryptMainCom::CopyFileA, COMDAT

; 197  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 		return BaseCom::CopyFile (sourceFile, destinationFile);

  00003	ff 75 10	 push	 DWORD PTR _destinationFile$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _sourceFile$[ebp]
  00009	e8 00 00 00 00	 call	 ?CopyFileA@BaseCom@@SAKPA_W0@Z ; BaseCom::CopyFileA
  0000e	83 c4 08	 add	 esp, 8

; 199  : 	}

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
?CopyFileA@GostCryptMainCom@@UAGKPA_W0@Z ENDP		; GostCryptMainCom::CopyFileA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?ChangePassword@GostCryptMainCom@@UAGHPA_WPAUPassword@@1HJ@Z
_TEXT	SEGMENT
$T1 = -136						; size = 132
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_volumePath$ = 12					; size = 4
_oldPassword$ = 16					; size = 4
_newPassword$ = 20					; size = 4
_pkcs5$ = 24						; size = 4
_hWnd$ = 28						; size = 4
?ChangePassword@GostCryptMainCom@@UAGHPA_WPAUPassword@@1HJ@Z PROC ; GostCryptMainCom::ChangePassword, COMDAT

; 181  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _volumePath$[ebp]

; 182  : 		USES_CONVERSION;
; 183  : 		MainDlg = (HWND) hWnd;
; 184  : 		return ::ChangePwd (CW2A (volumePath), oldPassword, newPassword, pkcs5, (HWND) hWnd);

  00016	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp+4]
  0001c	53		 push	 ebx
  0001d	8b 5d 10	 mov	 ebx, DWORD PTR _oldPassword$[ebp]
  00020	56		 push	 esi
  00021	8b 75 1c	 mov	 esi, DWORD PTR _hWnd$[ebp]
  00024	57		 push	 edi
  00025	8b 7d 14	 mov	 edi, DWORD PTR _newPassword$[ebp]
  00028	6a 03		 push	 3
  0002a	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00030	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00036	50		 push	 eax
  00037	89 35 00 00 00
	00		 mov	 DWORD PTR _MainDlg, esi
  0003d	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  00042	56		 push	 esi
  00043	ff 75 18	 push	 DWORD PTR _pkcs5$[ebp]
  00046	57		 push	 edi
  00047	53		 push	 ebx
  00048	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T1[ebp]
  0004e	e8 00 00 00 00	 call	 _ChangePwd
  00053	8b f0		 mov	 esi, eax
  00055	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp+4]
  0005b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00061	83 c4 14	 add	 esp, 20			; 00000014H
  00064	3b c1		 cmp	 eax, ecx
  00066	74 09		 je	 SHORT $LN17@ChangePass
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _free
  0006e	83 c4 04	 add	 esp, 4
$LN17@ChangePass:

; 185  : 	}

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	8b c6		 mov	 eax, esi
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	33 cd		 xor	 ecx, ebp
  0007a	5b		 pop	 ebx
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 18 00	 ret	 24			; 00000018H
?ChangePassword@GostCryptMainCom@@UAGHPA_WPAUPassword@@1HJ@Z ENDP ; GostCryptMainCom::ChangePassword
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?CallDriver@GostCryptMainCom@@UAGKKPA_WPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ioctl$ = 12						; size = 4
_input$ = 16						; size = 4
_output$ = 20						; size = 4
?CallDriver@GostCryptMainCom@@UAGKKPA_WPAPA_W@Z PROC	; GostCryptMainCom::CallDriver, COMDAT

; 164  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 165  : 		return BaseCom::CallDriver (ioctl, input, output);

  00003	ff 75 14	 push	 DWORD PTR _output$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _input$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _ioctl$[ebp]
  0000c	e8 00 00 00 00	 call	 ?CallDriver@BaseCom@@SAKKPA_WPAPA_W@Z ; BaseCom::CallDriver
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : 	}

  00014	5d		 pop	 ebp
  00015	c2 10 00	 ret	 16			; 00000010H
?CallDriver@GostCryptMainCom@@UAGKKPA_WPAPA_W@Z ENDP	; GostCryptMainCom::CallDriver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?RestoreVolumeHeader@GostCryptMainCom@@UAGHJPA_W@Z
_TEXT	SEGMENT
$T1 = -136						; size = 132
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_hwndDlg$ = 12						; size = 4
_lpszVolume$ = 16					; size = 4
?RestoreVolumeHeader@GostCryptMainCom@@UAGHJPA_W@Z PROC	; GostCryptMainCom::RestoreVolumeHeader, COMDAT

; 147  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _lpszVolume$[ebp]

; 148  : 		USES_CONVERSION;
; 149  : 		MainDlg = (HWND) hwndDlg;
; 150  : 		return ::RestoreVolumeHeader ((HWND) hwndDlg, CW2A (lpszVolume));

  00016	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp+4]
  0001c	56		 push	 esi
  0001d	8b 75 0c	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00020	6a 03		 push	 3
  00022	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00028	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002e	50		 push	 eax
  0002f	89 35 00 00 00
	00		 mov	 DWORD PTR _MainDlg, esi
  00035	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  0003a	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T1[ebp]
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 _RestoreVolumeHeader
  00046	8b f0		 mov	 esi, eax
  00048	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp+4]
  0004e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00054	83 c4 08	 add	 esp, 8
  00057	3b c1		 cmp	 eax, ecx
  00059	74 09		 je	 SHORT $LN17@RestoreVol
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _free
  00061	83 c4 04	 add	 esp, 4
$LN17@RestoreVol:

; 151  : 	}

  00064	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00067	8b c6		 mov	 eax, esi
  00069	33 cd		 xor	 ecx, ebp
  0006b	5e		 pop	 esi
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 0c 00	 ret	 12			; 0000000cH
?RestoreVolumeHeader@GostCryptMainCom@@UAGHJPA_W@Z ENDP	; GostCryptMainCom::RestoreVolumeHeader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?BackupVolumeHeader@GostCryptMainCom@@UAGHJHPA_W@Z
_TEXT	SEGMENT
$T1 = -136						; size = 132
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_hwndDlg$ = 12						; size = 4
_bRequireConfirmation$ = 16				; size = 4
_lpszVolume$ = 20					; size = 4
?BackupVolumeHeader@GostCryptMainCom@@UAGHJHPA_W@Z PROC	; GostCryptMainCom::BackupVolumeHeader, COMDAT

; 131  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 14	 mov	 eax, DWORD PTR _lpszVolume$[ebp]

; 132  : 		USES_CONVERSION;
; 133  : 		MainDlg = (HWND) hwndDlg;
; 134  : 		return ::BackupVolumeHeader ((HWND) hwndDlg, bRequireConfirmation, CW2A (lpszVolume));

  00016	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp+4]
  0001c	56		 push	 esi
  0001d	8b 75 0c	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00020	6a 03		 push	 3
  00022	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00028	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002e	50		 push	 eax
  0002f	89 35 00 00 00
	00		 mov	 DWORD PTR _MainDlg, esi
  00035	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init
  0003a	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T1[ebp]
  00040	ff 75 10	 push	 DWORD PTR _bRequireConfirmation$[ebp]
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _BackupVolumeHeader
  00049	8b f0		 mov	 esi, eax
  0004b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp+4]
  00051	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	3b c1		 cmp	 eax, ecx
  0005c	74 09		 je	 SHORT $LN17@BackupVolu
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _free
  00064	83 c4 04	 add	 esp, 4
$LN17@BackupVolu:

; 135  : 	}

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	8b c6		 mov	 eax, esi
  0006c	33 cd		 xor	 ecx, ebp
  0006e	5e		 pop	 esi
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 10 00	 ret	 16			; 00000010H
?BackupVolumeHeader@GostCryptMainCom@@UAGHJHPA_W@Z ENDP	; GostCryptMainCom::BackupVolumeHeader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?AnalyzeKernelMiniDump@GostCryptMainCom@@UAGXJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_hwndDlg$ = 12						; size = 4
?AnalyzeKernelMiniDump@GostCryptMainCom@@UAGXJ@Z PROC	; GostCryptMainCom::AnalyzeKernelMiniDump, COMDAT

; 115  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 116  : 		MainDlg = (HWND) hwndDlg;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _hwndDlg$[ebp]

; 117  : 		::AnalyzeKernelMiniDump ((HWND) hwndDlg);

  00006	50		 push	 eax
  00007	a3 00 00 00 00	 mov	 DWORD PTR _MainDlg, eax
  0000c	e8 00 00 00 00	 call	 _AnalyzeKernelMiniDump
  00011	83 c4 04	 add	 esp, 4

; 118  : 	}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?AnalyzeKernelMiniDump@GostCryptMainCom@@UAGXJ@Z ENDP	; GostCryptMainCom::AnalyzeKernelMiniDump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?QueryInterface@GostCryptMainCom@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppvObject$ = 16					; size = 4
?QueryInterface@GostCryptMainCom@@UAGJABU_GUID@@PAPAX@Z PROC ; GostCryptMainCom::QueryInterface, COMDAT

; 93   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 		if (riid == IID_IUnknown || riid == IID_IGostCryptMainCom)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	be 00 00 00 00	 mov	 esi, OFFSET _IID_IUnknown
  0000f	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
$LL16@QueryInter:
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 0d		 jne	 SHORT $LN15@QueryInter
  0001a	83 c2 04	 add	 edx, 4
  0001d	83 c6 04	 add	 esi, 4
  00020	83 ef 04	 sub	 edi, 4
  00023	73 ef		 jae	 SHORT $LL16@QueryInter
  00025	eb 1b		 jmp	 SHORT $LN4@QueryInter
$LN15@QueryInter:
  00027	ba 00 00 00 00	 mov	 edx, OFFSET _IID_IGostCryptMainCom
  0002c	be 0c 00 00 00	 mov	 esi, 12			; 0000000cH
$LL19@QueryInter:
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	3b 02		 cmp	 eax, DWORD PTR [edx]
  00035	75 21		 jne	 SHORT $LN18@QueryInter
  00037	83 c1 04	 add	 ecx, 4
  0003a	83 c2 04	 add	 edx, 4
  0003d	83 ee 04	 sub	 esi, 4
  00040	73 ef		 jae	 SHORT $LL19@QueryInter
$LN4@QueryInter:

; 95   : 			*ppvObject = this;

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 45 10	 mov	 eax, DWORD PTR _ppvObject$[ebp]

; 100  : 		}
; 101  : 
; 102  : 		AddRef ();

  00048	51		 push	 ecx
  00049	89 08		 mov	 DWORD PTR [eax], ecx
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 04	 call	 DWORD PTR [eax+4]
  00050	5f		 pop	 edi

; 103  : 		return S_OK;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 104  : 	}

  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
$LN18@QueryInter:

; 96   : 		else
; 97   : 		{
; 98   : 			*ppvObject = NULL;

  00058	8b 45 10	 mov	 eax, DWORD PTR _ppvObject$[ebp]
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 99   : 			return E_NOINTERFACE;

  00063	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H

; 104  : 	}

  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@GostCryptMainCom@@UAGJABU_GUID@@PAPAX@Z ENDP ; GostCryptMainCom::QueryInterface
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?Release@GostCryptMainCom@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Release@GostCryptMainCom@@UAGKXZ PROC			; GostCryptMainCom::Release, COMDAT

; 72   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 73   : 		if (!InterlockedDecrement (&RefCount))

  00004	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00007	83 c9 ff	 or	 ecx, -1
  0000a	8b c1		 mov	 eax, ecx
  0000c	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0000f	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00013	75 39		 jne	 SHORT $LN2@Release

; 74   : 		{
; 75   : 			delete this;

  00015	85 f6		 test	 esi, esi
  00017	74 2e		 je	 SHORT $LN7@Release
  00019	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7GostCryptMainCom@@6B@
  0001f	f0 0f c1 0d 00
	00 00 00	 lock	  xadd	 DWORD PTR ?ObjectCount@@3JC, ecx
  00027	49		 dec	 ecx
  00028	75 12		 jne	 SHORT $LN11@Release
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	68 00 80 00 00	 push	 32768			; 00008000H
  00033	ff 76 04	 push	 DWORD PTR [esi+4]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16
$LN11@Release:
  0003c	6a 0c		 push	 12			; 0000000cH
  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00044	83 c4 08	 add	 esp, 8
$LN7@Release:

; 76   : 			return 0;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 80   : 	}

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN2@Release:

; 77   : 		}
; 78   : 
; 79   : 		return RefCount;

  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	5e		 pop	 esi

; 80   : 	}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?Release@GostCryptMainCom@@UAGKXZ ENDP			; GostCryptMainCom::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?AddRef@GostCryptMainCom@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@GostCryptMainCom@@UAGKXZ PROC			; GostCryptMainCom::AddRef, COMDAT

; 59   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 		return InterlockedIncrement (&RefCount);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	f0 0f c1 41 08	 lock	  xadd	 DWORD PTR [ecx+8], eax
  00010	40		 inc	 eax

; 61   : 	}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?AddRef@GostCryptMainCom@@UAGKXZ ENDP			; GostCryptMainCom::AddRef
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ??1GostCryptMainCom@@QAE@XZ
_TEXT	SEGMENT
??1GostCryptMainCom@@QAE@XZ PROC			; GostCryptMainCom::~GostCryptMainCom, COMDAT
; _this$ = ecx

; 46   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7GostCryptMainCom@@6B@

; 47   : 		if (InterlockedDecrement (&ObjectCount) == 0)

  00006	83 c8 ff	 or	 eax, -1
  00009	f0 0f c1 05 00
	00 00 00	 lock	  xadd	 DWORD PTR ?ObjectCount@@3JC, eax
  00011	75 12		 jne	 SHORT $LN2@GostCryptM

; 48   : 			PostThreadMessage (MessageThreadId, WM_APP, 0, 0);

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	68 00 80 00 00	 push	 32768			; 00008000H
  0001c	ff 71 04	 push	 DWORD PTR [ecx+4]
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16
$LN2@GostCryptM:

; 49   : 	}

  00025	c3		 ret	 0
??1GostCryptMainCom@@QAE@XZ ENDP			; GostCryptMainCom::~GostCryptMainCom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ??0GostCryptMainCom@@QAE@K@Z
_TEXT	SEGMENT
_messageThreadId$ = 8					; size = 4
??0GostCryptMainCom@@QAE@K@Z PROC			; GostCryptMainCom::GostCryptMainCom, COMDAT
; _this$ = ecx

; 41   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	GostCryptMainCom (DWORD messageThreadId) : RefCount (0), MessageThreadId (messageThreadId)

  00003	8b 45 08	 mov	 eax, DWORD PTR _messageThreadId$[ebp]

; 41   : 	{

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7GostCryptMainCom@@6B@
  0000c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 42   : 		InterlockedIncrement (&ObjectCount);

  00016	f0 ff 05 00 00
	00 00		 lock	  inc	 DWORD PTR ?ObjectCount@@3JC

; 43   : 	}

  0001d	8b c1		 mov	 eax, ecx
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0GostCryptMainCom@@QAE@K@Z ENDP			; GostCryptMainCom::GostCryptMainCom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT _UacChangePwd
_TEXT	SEGMENT
$T1 = -8						; size = 4
_gst$ = -4						; size = 4
_lpszVolume$ = 8					; size = 4
_oldPassword$ = 12					; size = 4
_newPassword$ = 16					; size = 4
_pkcs5$ = 20						; size = 4
_hwndDlg$ = 24						; size = 4
_UacChangePwd PROC					; COMDAT

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 478  : 	CComPtr<IGostCryptMainCom> gst;
; 479  : 	int r;
; 480  : 
; 481  : 	if (ComGetInstance (hwndDlg, &gst))

  00007	8d 45 fc	 lea	 eax, DWORD PTR _gst$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gst$[ebp], 0
  00011	50		 push	 eax
  00012	68 00 00 00 00	 push	 OFFSET _IID_IGostCryptMainCom
  00017	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  0001c	ff 75 18	 push	 DWORD PTR _hwndDlg$[ebp]
  0001f	e8 00 00 00 00	 call	 ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	85 c0		 test	 eax, eax
  00029	74 39		 je	 SHORT $LN2@UacChangeP

; 482  : 	{
; 483  : 		WaitCursor ();

  0002b	e8 00 00 00 00	 call	 _WaitCursor

; 484  : 		r = gst->ChangePassword (CComBSTR (lpszVolume), oldPassword, newPassword, pkcs5, (LONG_PTR) hwndDlg);

  00030	ff 75 08	 push	 DWORD PTR _lpszVolume$[ebp]
  00033	8b 75 fc	 mov	 esi, DWORD PTR _gst$[ebp]
  00036	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  00039	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  0003e	ff 75 18	 push	 DWORD PTR _hwndDlg$[ebp]
  00041	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00043	ff 75 14	 push	 DWORD PTR _pkcs5$[ebp]
  00046	ff 75 10	 push	 DWORD PTR _newPassword$[ebp]
  00049	ff 75 0c	 push	 DWORD PTR _oldPassword$[ebp]
  0004c	ff 30		 push	 DWORD PTR [eax]
  0004e	56		 push	 esi
  0004f	ff 51 18	 call	 DWORD PTR [ecx+24]
  00052	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  00055	8b f0		 mov	 esi, eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 485  : 		NormalCursor ();

  0005d	e8 00 00 00 00	 call	 _NormalCursor

; 486  : 	}
; 487  : 	else

  00062	eb 03		 jmp	 SHORT $LN3@UacChangeP
$LN2@UacChangeP:

; 488  : 		r = -1;

  00064	83 ce ff	 or	 esi, -1
$LN3@UacChangeP:

; 489  : 
; 490  : 	return r;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _gst$[ebp]
  0006a	85 c0		 test	 eax, eax
  0006c	74 06		 je	 SHORT $LN25@UacChangeP
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	50		 push	 eax
  00071	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN25@UacChangeP:
  00074	8b c6		 mov	 eax, esi
  00076	5e		 pop	 esi

; 491  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_UacChangePwd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT _UacRestoreVolumeHeader
_TEXT	SEGMENT
$T1 = -8						; size = 4
_gst$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_lpszVolume$ = 12					; size = 4
_UacRestoreVolumeHeader PROC				; COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 448  : 	CComPtr<IGostCryptMainCom> gst;
; 449  : 	int r;
; 450  : 
; 451  : 	CoInitialize (NULL);

  00007	6a 00		 push	 0
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gst$[ebp], 0
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 452  : 
; 453  : 	if (ComGetInstance (hwndDlg, &gst))

  00016	8d 45 fc	 lea	 eax, DWORD PTR _gst$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _IID_IGostCryptMainCom
  0001f	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  00024	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00027	e8 00 00 00 00	 call	 ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	85 c0		 test	 eax, eax
  00031	74 26		 je	 SHORT $LN2@UacRestore

; 454  : 		r = gst->RestoreVolumeHeader ((LONG_PTR) hwndDlg, CComBSTR (lpszVolume));

  00033	ff 75 0c	 push	 DWORD PTR _lpszVolume$[ebp]
  00036	8b 75 fc	 mov	 esi, DWORD PTR _gst$[ebp]
  00039	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  00041	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00043	ff 30		 push	 DWORD PTR [eax]
  00045	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00048	56		 push	 esi
  00049	ff 51 34	 call	 DWORD PTR [ecx+52]
  0004c	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  0004f	8b f0		 mov	 esi, eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 455  : 	else

  00057	eb 03		 jmp	 SHORT $LN3@UacRestore
$LN2@UacRestore:

; 456  : 		r = -1;

  00059	83 ce ff	 or	 esi, -1
$LN3@UacRestore:

; 457  : 
; 458  : 	CoUninitialize ();

  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 459  : 
; 460  : 	return r;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _gst$[ebp]
  00065	85 c0		 test	 eax, eax
  00067	74 06		 je	 SHORT $LN25@UacRestore
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	50		 push	 eax
  0006c	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN25@UacRestore:
  0006f	8b c6		 mov	 eax, esi
  00071	5e		 pop	 esi

; 461  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_UacRestoreVolumeHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT _UacBackupVolumeHeader
_TEXT	SEGMENT
$T1 = -8						; size = 4
_gst$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_bRequireConfirmation$ = 12				; size = 4
_lpszVolume$ = 16					; size = 4
_UacBackupVolumeHeader PROC				; COMDAT

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 421  : 	CComPtr<IGostCryptMainCom> gst;
; 422  : 	int r;
; 423  : 
; 424  : 	CoInitialize (NULL);

  00007	6a 00		 push	 0
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gst$[ebp], 0
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 425  : 
; 426  : 	if (ComGetInstance (hwndDlg, &gst))

  00016	8d 45 fc	 lea	 eax, DWORD PTR _gst$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET _IID_IGostCryptMainCom
  0001f	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  00024	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00027	e8 00 00 00 00	 call	 ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	85 c0		 test	 eax, eax
  00031	74 29		 je	 SHORT $LN2@UacBackupV

; 427  : 		r = gst->BackupVolumeHeader ((LONG_PTR) hwndDlg, bRequireConfirmation, CComBSTR (lpszVolume));

  00033	ff 75 10	 push	 DWORD PTR _lpszVolume$[ebp]
  00036	8b 75 fc	 mov	 esi, DWORD PTR _gst$[ebp]
  00039	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CComBSTR@ATL@@QAE@PBD@Z ; ATL::CComBSTR::CComBSTR
  00041	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00043	ff 30		 push	 DWORD PTR [eax]
  00045	ff 75 0c	 push	 DWORD PTR _bRequireConfirmation$[ebp]
  00048	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0004b	56		 push	 esi
  0004c	ff 51 10	 call	 DWORD PTR [ecx+16]
  0004f	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  00052	8b f0		 mov	 esi, eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 428  : 	else

  0005a	eb 03		 jmp	 SHORT $LN3@UacBackupV
$LN2@UacBackupV:

; 429  : 		r = -1;

  0005c	83 ce ff	 or	 esi, -1
$LN3@UacBackupV:

; 430  : 
; 431  : 	CoUninitialize ();

  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 432  : 
; 433  : 	return r;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _gst$[ebp]
  00068	85 c0		 test	 eax, eax
  0006a	74 06		 je	 SHORT $LN25@UacBackupV
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	50		 push	 eax
  0006f	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN25@UacBackupV:
  00072	8b c6		 mov	 eax, esi
  00074	5e		 pop	 esi

; 434  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_UacBackupVolumeHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT _UacAnalyzeKernelMiniDump
_TEXT	SEGMENT
_gst$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_UacAnalyzeKernelMiniDump PROC				; COMDAT

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 394  : 	CComPtr<IGostCryptMainCom> gst;
; 395  : 
; 396  : 	CoInitialize (NULL);

  00004	6a 00		 push	 0
  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _gst$[ebp], 0
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 397  : 
; 398  : 	if (ComGetInstance (hwndDlg, &gst))

  00013	8d 45 fc	 lea	 eax, DWORD PTR _gst$[ebp]
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET _IID_IGostCryptMainCom
  0001c	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  00021	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00024	e8 00 00 00 00	 call	 ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	85 c0		 test	 eax, eax
  0002e	74 16		 je	 SHORT $LN2@UacAnalyze

; 399  : 	{
; 400  : 		WaitCursor();

  00030	e8 00 00 00 00	 call	 _WaitCursor

; 401  : 		gst->AnalyzeKernelMiniDump ((LONG_PTR) hwndDlg);

  00035	8b 45 fc	 mov	 eax, DWORD PTR _gst$[ebp]
  00038	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0003b	50		 push	 eax
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	ff 51 0c	 call	 DWORD PTR [ecx+12]

; 402  : 		NormalCursor();

  00041	e8 00 00 00 00	 call	 _NormalCursor
$LN2@UacAnalyze:

; 403  : 	}
; 404  : 
; 405  : 	CoUninitialize ();

  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 406  : }

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _gst$[ebp]
  0004f	85 c0		 test	 eax, eax
  00051	74 06		 je	 SHORT $LN18@UacAnalyze
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	50		 push	 eax
  00056	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN18@UacAnalyze:
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_UacAnalyzeKernelMiniDump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT _ComServerMain
_TEXT	SEGMENT
_msg$ = -48						; size = 28
_factory$ = -20						; size = 16
_cookie$ = -4						; size = 4
_ComServerMain PROC					; COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 318  : 	SetProcessShutdownParameters (0x100, 0);

  00009	6a 00		 push	 0
  0000b	68 00 01 00 00	 push	 256			; 00000100H
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetProcessShutdownParameters@8

; 319  : 
; 320  : 	GostCryptFactory<GostCryptMainCom> factory (GetCurrentThreadId ());

  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  0001c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _factory$[ebp], OFFSET ??_7?$GostCryptFactory@VGostCryptMainCom@@@@6B@
  00023	89 45 f0	 mov	 DWORD PTR _factory$[ebp+4], eax
  00026	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _factory$[ebp+8], 1
  0002d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _factory$[ebp+12], 0

; 321  : 	DWORD cookie;
; 322  : 
; 323  : 	if (IsUacSupported ())

  00034	e8 00 00 00 00	 call	 _IsUacSupported
  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _UacElevated
  0003f	85 c0		 test	 eax, eax

; 324  : 		UacElevated = TRUE;
; 325  : 
; 326  : 	if (CoRegisterClassObject (CLSID_GostCryptMainCom, (LPUNKNOWN) &factory,
; 327  : 		CLSCTX_LOCAL_SERVER, REGCLS_SINGLEUSE, &cookie) != S_OK)

  00041	8d 45 fc	 lea	 eax, DWORD PTR _cookie$[ebp]
  00044	ba 01 00 00 00	 mov	 edx, 1
  00049	50		 push	 eax
  0004a	6a 00		 push	 0
  0004c	6a 04		 push	 4
  0004e	8d 45 ec	 lea	 eax, DWORD PTR _factory$[ebp]
  00051	0f 45 ca	 cmovne	 ecx, edx
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  0005a	89 0d 00 00 00
	00		 mov	 DWORD PTR _UacElevated, ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoRegisterClassObject@20
  00066	85 c0		 test	 eax, eax
  00068	75 74		 jne	 SHORT $LN25@ComServerM

; 328  : 		return FALSE;
; 329  : 
; 330  : 	MSG msg;
; 331  : 	while (int r = GetMessage (&msg, NULL, 0, 0))

  0006a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetMessageA@16
  00070	50		 push	 eax
  00071	50		 push	 eax
  00072	50		 push	 eax
  00073	8d 45 d0	 lea	 eax, DWORD PTR _msg$[ebp]
  00076	50		 push	 eax
  00077	ff d6		 call	 esi
  00079	85 c0		 test	 eax, eax
  0007b	74 4c		 je	 SHORT $LN26@ComServerM
  0007d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__TranslateMessage@4
  00083	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DispatchMessageA@4
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ComServerM:

; 332  : 	{
; 333  : 		if (r == -1)

  00090	83 f8 ff	 cmp	 eax, -1
  00093	74 49		 je	 SHORT $LN25@ComServerM

; 334  : 			return FALSE;
; 335  : 
; 336  : 		TranslateMessage (&msg);

  00095	8d 45 d0	 lea	 eax, DWORD PTR _msg$[ebp]
  00098	50		 push	 eax
  00099	ff d7		 call	 edi

; 337  : 		DispatchMessage (&msg);

  0009b	8d 45 d0	 lea	 eax, DWORD PTR _msg$[ebp]
  0009e	50		 push	 eax
  0009f	ff d3		 call	 ebx

; 338  : 
; 339  : 		if (msg.message == WM_APP
; 340  : 			&& ObjectCount < 1
; 341  : 			&& !factory.IsServerLocked ())

  000a1	81 7d d4 00 80
	00 00		 cmp	 DWORD PTR _msg$[ebp+4], 32768 ; 00008000H
  000a8	75 0f		 jne	 SHORT $LN7@ComServerM
  000aa	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ObjectCount@@3JC, 1
  000b1	7d 06		 jge	 SHORT $LN7@ComServerM
  000b3	83 7d f8 00	 cmp	 DWORD PTR _factory$[ebp+12], 0
  000b7	7e 10		 jle	 SHORT $LN26@ComServerM
$LN7@ComServerM:

; 328  : 		return FALSE;
; 329  : 
; 330  : 	MSG msg;
; 331  : 	while (int r = GetMessage (&msg, NULL, 0, 0))

  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	8d 45 d0	 lea	 eax, DWORD PTR _msg$[ebp]
  000c2	50		 push	 eax
  000c3	ff d6		 call	 esi
  000c5	85 c0		 test	 eax, eax
  000c7	75 c7		 jne	 SHORT $LL2@ComServerM
$LN26@ComServerM:

; 342  : 			break;
; 343  : 	}
; 344  : 	CoRevokeClassObject (cookie);

  000c9	ff 75 fc	 push	 DWORD PTR _cookie$[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoRevokeClassObject@4
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 345  : 
; 346  : 	return TRUE;

  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	5b		 pop	 ebx

; 347  : }

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$LN25@ComServerM:
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi

; 345  : 
; 346  : 	return TRUE;

  000e0	33 c0		 xor	 eax, eax
  000e2	5b		 pop	 ebx

; 347  : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_ComServerMain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\maincom.cpp
;	COMDAT ?GetElevatedInstance@@YAPAUIGostCryptMainCom@@PAUHWND__@@@Z
_TEXT	SEGMENT
_instance$ = -8						; size = 4
$T1 = -4						; size = 4
_parent$ = 8						; size = 4
?GetElevatedInstance@@YAPAUIGostCryptMainCom@@PAUHWND__@@@Z PROC ; GetElevatedInstance, COMDAT

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 375  : 	IGostCryptMainCom *instance;
; 376  : 
; 377  : 	if (!ComGetInstance (parent, &instance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _instance$[ebp]
  00009	50		 push	 eax
  0000a	68 00 00 00 00	 push	 OFFSET _IID_IGostCryptMainCom
  0000f	68 00 00 00 00	 push	 OFFSET _CLSID_GostCryptMainCom
  00014	ff 75 08	 push	 DWORD PTR _parent$[ebp]
  00017	e8 00 00 00 00	 call	 ?ComGetInstanceBase@@YAHPAUHWND__@@ABU_GUID@@1PAPAX@Z ; ComGetInstanceBase
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	85 c0		 test	 eax, eax
  00021	74 07		 je	 SHORT $LN12@GetElevate

; 379  : 
; 380  : 	return instance;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _instance$[ebp]

; 381  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN12@GetElevate:

; 378  : 		throw UserAbort (SRC_POS);

  0002a	68 00 00 00 00	 push	 OFFSET __TI2?AUUserAbort@GostCrypt@@
  0002f	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ??_7UserAbort@GostCrypt@@6B@
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@GetElevate:
$LN11@GetElevate:
  0003f	cc		 int	 3
?GetElevatedInstance@@YAPAUIGostCryptMainCom@@PAUHWND__@@@Z ENDP ; GetElevatedInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0IGostCryptMainCom@@QAE@XZ
_TEXT	SEGMENT
??0IGostCryptMainCom@@QAE@XZ PROC			; IGostCryptMainCom::IGostCryptMainCom, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0IGostCryptMainCom@@QAE@XZ ENDP			; IGostCryptMainCom::IGostCryptMainCom
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0UserAbort@GostCrypt@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0UserAbort@GostCrypt@@QAE@ABU01@@Z PROC		; GostCrypt::UserAbort::UserAbort, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7UserAbort@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??0UserAbort@GostCrypt@@QAE@ABU01@@Z ENDP		; GostCrypt::UserAbort::UserAbort
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\exception.h
;	COMDAT ?Show@UserAbort@GostCrypt@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@UserAbort@GostCrypt@@UBEXPAUHWND__@@@Z PROC	; GostCrypt::UserAbort::Show, COMDAT
; _this$ = ecx

; 74   : 		void Show (HWND parent) const { }

  00000	c2 04 00	 ret	 4
?Show@UserAbort@GostCrypt@@UBEXPAUHWND__@@@Z ENDP	; GostCrypt::UserAbort::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\exception.h
;	COMDAT ??0UserAbort@GostCrypt@@QAE@PBD@Z
_TEXT	SEGMENT
_srcPos$ = 8						; size = 4
??0UserAbort@GostCrypt@@QAE@PBD@Z PROC			; GostCrypt::UserAbort::UserAbort, COMDAT
; _this$ = ecx

; 73   : 		UserAbort (const char *srcPos) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7UserAbort@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??0UserAbort@GostCrypt@@QAE@PBD@Z ENDP			; GostCrypt::UserAbort::UserAbort
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Exception@GostCrypt@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Exception@GostCrypt@@QAE@ABU01@@Z PROC		; GostCrypt::Exception::Exception, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??0Exception@GostCrypt@@QAE@ABU01@@Z ENDP		; GostCrypt::Exception::Exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Exception@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??0Exception@GostCrypt@@QAE@XZ PROC			; GostCrypt::Exception::Exception, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0Exception@GostCrypt@@QAE@XZ ENDP			; GostCrypt::Exception::Exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??0CComBSTR@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
__AtlSafeAllocaManager$1 = -4				; size = 4
_nConvertedLen$1$ = 8					; size = 4
_pSrc$ = 8						; size = 4
??0CComBSTR@ATL@@QAE@PBD@Z PROC				; ATL::CComBSTR::CComBSTR, COMDAT
; _this$ = ecx

; 1370 :     CComBSTR(_In_opt_z_ LPCSTR pSrc)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1371 :     {
; 1372 :         if (pSrc != NULL)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _pSrc$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	85 db		 test	 ebx, ebx
  0000e	74 62		 je	 SHORT $LN2@CComBSTR

; 1373 :         {
; 1374 :             m_str = A2WBSTR(pSrc);

  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	6a ff		 push	 -1
  00016	53		 push	 ebx
  00017	6a 00		 push	 0
  00019	6a 03		 push	 3
  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __AtlSafeAllocaManager$1[ebp], 0
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00028	89 45 08	 mov	 DWORD PTR _nConvertedLen$1$[ebp], eax
  0002b	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  0002e	51		 push	 ecx
  0002f	6a 00		 push	 0
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocStringLen@8
  00037	8b f8		 mov	 edi, eax
  00039	85 ff		 test	 edi, edi
  0003b	74 2d		 je	 SHORT $LN11@CComBSTR
  0003d	ff 75 08	 push	 DWORD PTR _nConvertedLen$1$[ebp]
  00040	57		 push	 edi
  00041	6a ff		 push	 -1
  00043	53		 push	 ebx
  00044	6a 00		 push	 0
  00046	6a 03		 push	 3
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0004e	3b 45 08	 cmp	 eax, DWORD PTR _nConvertedLen$1$[ebp]
  00051	74 17		 je	 SHORT $LN11@CComBSTR
  00053	57		 push	 edi
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  0005a	8d 4d fc	 lea	 ecx, DWORD PTR __AtlSafeAllocaManager$1[ebp]
  0005d	e8 00 00 00 00	 call	 ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
  00062	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00068	eb 19		 jmp	 SHORT $LN32@CComBSTR
$LN11@CComBSTR:
  0006a	89 3e		 mov	 DWORD PTR [esi], edi

; 1375 :             if (!*this)

  0006c	85 ff		 test	 edi, edi
  0006e	75 08		 jne	 SHORT $LN3@CComBSTR
  00070	eb 11		 jmp	 SHORT $LN32@CComBSTR
$LN2@CComBSTR:

; 1378 :             }
; 1379 :         }
; 1380 :         else
; 1381 :         {
; 1382 :             m_str = NULL;

  00072	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@CComBSTR:
  00078	5f		 pop	 edi

; 1383 :         }
; 1384 :     }

  00079	8b c6		 mov	 eax, esi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN32@CComBSTR:

; 1376 :             {
; 1377 :                 AtlThrow(E_OUTOFMEMORY);

  00083	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00088	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN34@CComBSTR:
$LN31@CComBSTR:
  0008d	cc		 int	 3
??0CComBSTR@ATL@@QAE@PBD@Z ENDP				; ATL::CComBSTR::CComBSTR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??7CComBSTR@ATL@@QBE_NXZ
_TEXT	SEGMENT
??7CComBSTR@ATL@@QBE_NXZ PROC				; ATL::CComBSTR::operator!, COMDAT
; _this$ = ecx

; 972  :     {

  00000	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00003	0f 94 c0	 sete	 al

; 973  :         return (m_str == NULL);
; 974  :     }

  00006	c3		 ret	 0
??7CComBSTR@ATL@@QBE_NXZ ENDP				; ATL::CComBSTR::operator!
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??BCComBSTR@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
??BCComBSTR@ATL@@QBEPA_WXZ PROC				; ATL::CComBSTR::operator wchar_t *, COMDAT
; _this$ = ecx

; 877  :         return m_str;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 878  :     }

  00002	c3		 ret	 0
??BCComBSTR@ATL@@QBEPA_WXZ ENDP				; ATL::CComBSTR::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlcomcli.h
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CComBSTR@ATL@@QAE@XZ PROC				; ATL::CComBSTR::~CComBSTR, COMDAT
; _this$ = ecx

; 1661 :     ::SysFreeString(m_str);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4

; 1662 : }

  00008	c3		 ret	 0
??1CComBSTR@ATL@@QAE@XZ ENDP				; ATL::CComBSTR::~CComBSTR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
_lpCriticalSection$ = 8					; size = 4
_dwSpinCount$ = 12					; size = 4
_Flags$ = 16						; size = 4
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

  00003	ff 75 10	 push	 DWORD PTR _Flags$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwSpinCount$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _lpCriticalSection$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionEx@12

; 731  : #else
; 732  : 	UNREFERENCED_PARAMETER(Flags);
; 733  : 
; 734  : 	// ...otherwise fall back to using InitializeCriticalSectionAndSpinCount.
; 735  : 	return ::InitializeCriticalSectionAndSpinCount(lpCriticalSection, dwSpinCount);
; 736  : #endif
; 737  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
?AtlThrowLastWin32@ATL@@YGXXZ PROC			; ATL::AtlThrowLastWin32, COMDAT

; 85   : 	DWORD dwError = ::GetLastError();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 86   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

  00006	85 c0		 test	 eax, eax
  00008	7e 08		 jle	 SHORT $LN6@AtlThrowLa
  0000a	0f b7 c0	 movzx	 eax, ax
  0000d	0d 00 00 07 80	 or	 eax, -2147024896	; 80070000H
$LN6@AtlThrowLa:
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@AtlThrowLa:
$LN7@AtlThrowLa:
  00018	cc		 int	 3
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )
; 69   : 	{
; 70   : 		AfxThrowMemoryException();
; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );
; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  00009	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	68 00 00 00 00	 push	 OFFSET __TI1?AVCAtlException@ATL@@
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@AtlThrowIm:
$LN5@AtlThrowIm:
  00017	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 44   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		m_hr( hr )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 	}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 712  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 713  : 		// Walk the list and free the buffers
; 714  : 		while (m_pHead != NULL)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 14		 je	 SHORT $LN3@CAtlSafeAl
$LL2@CAtlSafeAl:

; 715  : 		{
; 716  : 			CAtlSafeAllocBufferNode* p = m_pHead;

  00008	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 717  : 			m_pHead = m_pHead->m_pNext;
; 718  : 			Allocator::Free(p);

  0000a	51		 push	 ecx
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000d	89 06		 mov	 DWORD PTR [esi], eax
  0000f	e8 00 00 00 00	 call	 _free
  00014	83 c4 04	 add	 esp, 4
  00017	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0001a	75 ec		 jne	 SHORT $LL2@CAtlSafeAl
$LN3@CAtlSafeAl:
  0001c	5e		 pop	 esi

; 719  : 		}
; 720  : 	}

  0001d	c3		 ret	 0
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 696  : 	CAtlSafeAllocBufferManager() : m_pHead(NULL)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 698  : 	}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?A2WBSTR@@YAPA_WPBDH@Z
_TEXT	SEGMENT
_nConvertedLen$1$ = 8					; size = 4
_lp$ = 8						; size = 4
_nLen$ = 12						; size = 4
?A2WBSTR@@YAPA_WPBDH@Z PROC				; A2WBSTR, COMDAT

; 1144 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1145 : 	if (lp == NULL || nLen == 0)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lp$[ebp]
  00007	57		 push	 edi
  00008	85 db		 test	 ebx, ebx
  0000a	74 5b		 je	 SHORT $LN3@A2WBSTR
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _nLen$[ebp]
  0000f	85 ff		 test	 edi, edi
  00011	74 54		 je	 SHORT $LN3@A2WBSTR

; 1147 : 	USES_CONVERSION_EX;
; 1148 : 	BSTR str = NULL;
; 1149 : 
; 1150 : 	int nConvertedLen = MultiByteToWideChar(_acp_ex, 0, lp, nLen, NULL, 0);

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	57		 push	 edi
  00018	53		 push	 ebx
  00019	6a 00		 push	 0
  0001b	6a 03		 push	 3
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00023	89 45 08	 mov	 DWORD PTR _nConvertedLen$1$[ebp], eax

; 1151 : 
; 1152 : 	int nAllocLen = nConvertedLen;

  00026	8b c8		 mov	 ecx, eax

; 1153 : 	if (nLen == -1)

  00028	83 ff ff	 cmp	 edi, -1
  0002b	75 03		 jne	 SHORT $LN4@A2WBSTR

; 1154 : 		nAllocLen -= 1;  // Don't allocate terminating '\0'

  0002d	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
$LN4@A2WBSTR:
  00030	56		 push	 esi

; 1155 : 	str = ::SysAllocStringLen(NULL, nAllocLen);

  00031	51		 push	 ecx
  00032	6a 00		 push	 0
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocStringLen@8
  0003a	8b f0		 mov	 esi, eax

; 1156 : 
; 1157 : 	if (str != NULL)

  0003c	85 f6		 test	 esi, esi
  0003e	74 20		 je	 SHORT $LL15@A2WBSTR

; 1158 : 	{
; 1159 : 		int nResult;
; 1160 : 		nResult = MultiByteToWideChar(_acp_ex, 0, lp, nLen, str, nConvertedLen);

  00040	ff 75 08	 push	 DWORD PTR _nConvertedLen$1$[ebp]
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	53		 push	 ebx
  00046	6a 00		 push	 0
  00048	6a 03		 push	 3
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1161 : 		ATLASSERT(nResult == nConvertedLen);
; 1162 : 		if (nResult != nConvertedLen)

  00050	3b 45 08	 cmp	 eax, DWORD PTR _nConvertedLen$1$[ebp]
  00053	74 0b		 je	 SHORT $LL15@A2WBSTR

; 1163 : 		{
; 1164 : ATLPREFAST_SUPPRESS(6102)
; 1165 : 			SysFreeString(str);

  00055	56		 push	 esi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  0005c	33 f6		 xor	 esi, esi
  0005e	66 90		 npad	 2

; 1166 : ATLPREFAST_UNSUPPRESS()
; 1167 : 			return NULL;
; 1168 : 		}
; 1169 : 
; 1170 : 	}
; 1171 : 	return str;

$LL15@A2WBSTR:
  00060	8b c6		 mov	 eax, esi
  00062	5e		 pop	 esi
  00063	5f		 pop	 edi
  00064	5b		 pop	 ebx

; 1172 : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN3@A2WBSTR:
  00067	5f		 pop	 edi

; 1146 : 		return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	5b		 pop	 ebx

; 1172 : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?A2WBSTR@@YAPA_WPBDH@Z ENDP				; A2WBSTR
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC			; ATL::_AtlGetConversionACP, COMDAT

; 106  : #ifdef _CONVERSION_DONT_USE_THREAD_LOCALE
; 107  : 	return CP_ACP;
; 108  : #else
; 109  : 	return CP_THREAD_ACP;

  00000	b8 03 00 00 00	 mov	 eax, 3

; 110  : #endif
; 111  : }

  00005	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 282  : 		free(p);

  00000	e9 00 00 00 00	 jmp	 _free
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0IClassFactory@@QAE@XZ
_TEXT	SEGMENT
??0IClassFactory@@QAE@XZ PROC				; IClassFactory::IClassFactory, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0IClassFactory@@QAE@XZ ENDP				; IClassFactory::IClassFactory
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	7e 08		 jle	 SHORT $LN4@HRESULT_FR
  0000a	0f b7 c0	 movzx	 eax, ax
  0000d	0d 00 00 07 80	 or	 eax, -2147024896	; 80070000H
$LN4@HRESULT_FR:
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv79 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00004	8b 55 08	 mov	 edx, DWORD PTR _guidOne$[ebp]
  00007	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000a	56		 push	 esi
  0000b	be 0c 00 00 00	 mov	 esi, 12			; 0000000cH
$LL7@:
  00010	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00012	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00014	75 1a		 jne	 SHORT $LN6@
  00016	83 c2 04	 add	 edx, 4
  00019	83 c0 04	 add	 eax, 4
  0001c	83 ee 04	 sub	 esi, 4
  0001f	73 ef		 jae	 SHORT $LL7@
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  00028	8a 45 fc	 mov	 al, BYTE PTR tv79[ebp]
  0002b	5e		 pop	 esi

; 195  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN6@:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
  00037	8a 45 fc	 mov	 al, BYTE PTR tv79[ebp]
  0003a	5e		 pop	 esi

; 195  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	8b 55 08	 mov	 edx, DWORD PTR _rguid1$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00009	56		 push	 esi
  0000a	be 0c 00 00 00	 mov	 esi, 12			; 0000000cH
  0000f	90		 npad	 1
$LL5@IsEqualGUI:
  00010	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00012	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00014	75 13		 jne	 SHORT $LN4@IsEqualGUI
  00016	83 c2 04	 add	 edx, 4
  00019	83 c0 04	 add	 eax, 4
  0001c	83 ee 04	 sub	 esi, 4
  0001f	73 ef		 jae	 SHORT $LL5@IsEqualGUI
  00021	b8 01 00 00 00	 mov	 eax, 1
  00026	5e		 pop	 esi

; 162  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN4@IsEqualGUI:

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 162  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
END
