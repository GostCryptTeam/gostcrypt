; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Mount\Hotkeys.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_Hotkeys:QWORD:09H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	_HotkeysDlgProc@16
PUBLIC	_GetKeyName
PUBLIC	_UnregisterAllHotkeys
PUBLIC	_RegisterAllHotkeys
PUBLIC	??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@	; `string'
PUBLIC	??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@	; `string'
PUBLIC	??_C@_09LOOKHEPK@VK_NUMPAD?$AA@			; `string'
PUBLIC	??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@ ; `string'
PUBLIC	??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@ ; `string'
PUBLIC	??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@ ; `string'
PUBLIC	??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@		; `string'
PUBLIC	??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@ ; `string'
PUBLIC	??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@ ; `string'
PUBLIC	??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@	; `string'
PUBLIC	??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@		; `string'
PUBLIC	??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@	; `string'
PUBLIC	??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@		; `string'
PUBLIC	??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@		; `string'
PUBLIC	??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@ ; `string'
PUBLIC	??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@ ; `string'
PUBLIC	??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@ ; `string'
PUBLIC	??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@ ; `string'
PUBLIC	??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@ ; `string'
PUBLIC	??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@ ; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0L@GEFMOENA@VK_CONTROL?$AA@		; `string'
PUBLIC	??_C@_08BHJBIDAM@VK_SHIFT?$AA@			; `string'
PUBLIC	??_C@_06HJLFINBF@VK_ALT?$AA@			; `string'
PUBLIC	??_C@_06LKCBLNGG@VK_WIN?$AA@			; `string'
PUBLIC	??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_06DHJAPAEE@ACTION?$AA@			; `string'
PUBLIC	??_C@_08KLMGAJAF@SHORTCUT?$AA@			; `string'
PUBLIC	??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@		; `string'
PUBLIC	??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@	; `string'
PUBLIC	??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@	; `string'
PUBLIC	??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@	; `string'
EXTRN	_wcsncpy:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	__imp__RegisterHotKey@16:PROC
EXTRN	__imp__UnregisterHotKey@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__SetTimer@16:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__GetWindowTextLengthW@4:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_handleWin32Error:PROC
EXTRN	_LocalizeDialog:PROC
EXTRN	_SetCheckBox:PROC
EXTRN	_GetCheckBox:PROC
EXTRN	_Error:PROC
EXTRN	_CompensateXDPI:PROC
EXTRN	_GetString:PROC
EXTRN	_SaveSettings:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	_UnknownString:BYTE
EXTRN	_bPlaySoundOnSuccessfulHkDismount:DWORD
EXTRN	_bDisplayBalloonOnSuccessfulHkDismount:DWORD
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_tmpHotkeys DQ	09H DUP (?)
_nSelectedHotkeyId DD 01H DUP (?)
_currentVKeyCode DD 01H DUP (?)
?bKeyScanOn@?1??HotkeysDlgProc@@9@9 DD 01H DUP (?)	; `HotkeysDlgProc'::`2'::bKeyScanOn
?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9 DD 01H DUP (?) ; `HotkeysDlgProc'::`2'::bTPlaySoundOnSuccessfulHkDismount
?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9 DD 01H DUP (?) ; `HotkeysDlgProc'::`2'::bTDisplayBalloonOnSuccessfulHkDismount
_BSS	ENDS
;	COMDAT ??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@
CONST	SEGMENT
??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@ DB 'CANNOT_USE_RESERVED_K'
	DB	'EY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@
CONST	SEGMENT
??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@ DB 'SHORTCUT_ALREADY_IN_U'
	DB	'SE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@
CONST	SEGMENT
??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@ DB 'PRESS_A_KEY_TO_ASSIGN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@
CONST	SEGMENT
??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@ DB 'IDD_HOTKEYS_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLMGAJAF@SHORTCUT?$AA@
CONST	SEGMENT
??_C@_08KLMGAJAF@SHORTCUT?$AA@ DB 'SHORTCUT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHJAPAEE@ACTION?$AA@
CONST	SEGMENT
??_C@_06DHJAPAEE@ACTION?$AA@ DB 'ACTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKCBLNGG@VK_WIN?$AA@
CONST	SEGMENT
??_C@_06LKCBLNGG@VK_WIN?$AA@ DB 'VK_WIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJLFINBF@VK_ALT?$AA@
CONST	SEGMENT
??_C@_06HJLFINBF@VK_ALT?$AA@ DB 'VK_ALT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHJBIDAM@VK_SHIFT?$AA@
CONST	SEGMENT
??_C@_08BHJBIDAM@VK_SHIFT?$AA@ DB 'VK_SHIFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GEFMOENA@VK_CONTROL?$AA@
CONST	SEGMENT
??_C@_0L@GEFMOENA@VK_CONTROL?$AA@ DB 'VK_CONTROL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@
CONST	SEGMENT
??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@ DB '[', 00H, '?', 00H, ']'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@
CONST	SEGMENT
??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@ DB 'IDM_CLOSE_ALL_TO'
	DB	'KEN_SESSIONS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@
CONST	SEGMENT
??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@ DB 'HK_SHOW_HIDE_MAIN_WI'
	DB	'NDOW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@ DB 'HK_MOUNT_FAVORITE_V'
	DB	'OLUMES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@
CONST	SEGMENT
??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@ DB 'HK_FORCE_DISMOUN'
	DB	'T_ALL_AND_WIPE_AND_EXIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@
CONST	SEGMENT
??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@ DB 'HK_FORCE_DISMO'
	DB	'UNT_ALL_AND_WIPE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@
CONST	SEGMENT
??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@ DB 'HK_DISMOUNT_ALL_AND_'
	DB	'WIPE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@
CONST	SEGMENT
??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@ DB 'HK_WIPE_CACHE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@
CONST	SEGMENT
??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@ DB 'HK_DISMOUNT_ALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@
CONST	SEGMENT
??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@ DB 'HK_AUTOMOUNT_DEVICES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@
CONST	SEGMENT
??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@ DB 'VKEY_%02X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@ DB 'P', 00H, 'A', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@ DB 'E'
	DB	00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'E', 00H
	DB	'O', 00H, 'F', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@ DB 'E', 00H, 'x', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@ DB 'C', 00H, 'r', 00H
	DB	'S', 00H, 'e', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@ DB 'A', 00H, 't', 00H, 't', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@ DB 'I'
	DB	00H, 'C', 00H, 'O', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'E', 00H
	DB	'A', 00H, 'R', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@ DB 'I', 00H, 'C'
	DB	00H, 'O', 00H, '_', 00H, '0', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@ DB 'I'
	DB	00H, 'C', 00H, 'O', 00H, '_', 00H, 'H', 00H, 'E', 00H, 'L', 00H
	DB	'P', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@ DB 'O', 00H
	DB	'E', 00H, 'M', 00H, ' ', 00H, '1', 00H, '0', 00H, '2', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@ DB 'O', 00H, 'E'
	DB	00H, 'M', 00H, ' ', 00H, 'A', 00H, 'X', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@ DB 'O', 00H, 'E', 00H
	DB	'M', 00H, ' ', 00H, '8', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '7', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '6', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, ']', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '5', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, '\', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '4', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, '[', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '3', 00H, ' ', 00H, '(', 00H
	DB	'`', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '2', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, '/', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@ DB '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@ DB 'O'
	DB	00H, 'E', 00H, 'M', 00H, ' ', 00H, '1', 00H, ' ', 00H, '(', 00H
	DB	'''', 00H, ';', 00H, '''', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@
CONST	SEGMENT
??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '/', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@
CONST	SEGMENT
??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '.', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@
CONST	SEGMENT
??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '-', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@ DB '%'
	DB	00H, 's', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '+', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@
CONST	SEGMENT
??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@ DB '%', 00H, 's', 00H
	DB	' ', 00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ DB '%', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
CONST	SEGMENT
??_C@_09LOOKHEPK@VK_NUMPAD?$AA@ DB 'VK_NUMPAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@ DB 'F', 00H, '%', 00H, 'd', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@ DB 'O', 00H
	DB	'E', 00H, 'M', 00H, '-', 00H, '%', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@ DB '%', 00H, 'h', 00H, 'c', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _DisplayHotkeyList
_TEXT	SEGMENT
_item$ = -2140						; size = 52
_hList$1$ = -2088					; size = 4
_ShortcutFinal$ = -2084					; size = 1040
_Shortcut$ = -1044					; size = 520
_ShortcutMod$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_DisplayHotkeyList PROC					; COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 08 00
	00		 sub	 esp, 2140		; 0000085cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 233  : 	LVITEMW item;
; 234  : 	HWND hList = GetDlgItem (hwndDlg, IDC_HOTKEY_LIST);

  00019	68 41 04 00 00	 push	 1089			; 00000441H
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00025	8b f0		 mov	 esi, eax

; 235  : 	int i;
; 236  : 	wchar_t ShortcutMod [MAX_KEY_COMB_NAME_LEN];
; 237  : 	wchar_t ShortcutFinal [MAX_KEY_COMB_NAME_LEN*2];
; 238  : 	wchar_t Shortcut [MAX_KEY_COMB_NAME_LEN];
; 239  : 
; 240  : 	SendMessage (hList, LVM_DELETEALLITEMS,0, (LPARAM)&item);

  00027	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _item$[ebp]
  0002d	50		 push	 eax
  0002e	6a 00		 push	 0
  00030	68 09 10 00 00	 push	 4105			; 00001009H
  00035	56		 push	 esi
  00036	89 b5 d8 f7 ff
	ff		 mov	 DWORD PTR _hList$1$[ebp], esi
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 241  : 
; 242  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00042	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  00048	33 db		 xor	 ebx, ebx
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL4@DisplayHot:

; 243  : 	{
; 244  : 		memset (&item,0,sizeof(item));

  00050	6a 34		 push	 52			; 00000034H
  00052	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _item$[ebp]
  00058	6a 00		 push	 0
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 245  : 		item.mask = LVIF_TEXT;

  00063	c7 85 a4 f7 ff
	ff 01 00 00 00	 mov	 DWORD PTR _item$[ebp], 1

; 246  : 		item.iItem = i;

  0006d	89 9d a8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+4], ebx

; 247  : 		item.iSubItem = 0;

  00073	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _item$[ebp+8], 0

; 248  : 
; 249  : 		switch (i)

  0007d	83 fb 08	 cmp	 ebx, 8
  00080	0f 87 cd 00 00
	00		 ja	 $LN16@DisplayHot
  00086	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN41@DisplayHot[ebx*4]
$LN7@DisplayHot:

; 250  : 		{
; 251  : 			
; 252  : 		case HK_AUTOMOUNT_DEVICES:	
; 253  : 			item.pszText = GetString ("HK_AUTOMOUNT_DEVICES");

  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BHDAGLNG@HK_AUTOMOUNT_DEVICES?$AA@
  00092	e8 00 00 00 00	 call	 _GetString
  00097	83 c4 04	 add	 esp, 4
  0009a	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 254  : 			break;

  000a0	e9 b8 00 00 00	 jmp	 $LN5@DisplayHot
$LN8@DisplayHot:

; 255  : 
; 256  : 		case HK_DISMOUNT_ALL:	
; 257  : 			item.pszText = GetString ("HK_DISMOUNT_ALL");

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FCDOFIMA@HK_DISMOUNT_ALL?$AA@
  000aa	e8 00 00 00 00	 call	 _GetString
  000af	83 c4 04	 add	 esp, 4
  000b2	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 258  : 			break;

  000b8	e9 a0 00 00 00	 jmp	 $LN5@DisplayHot
$LN9@DisplayHot:

; 259  : 
; 260  : 		case HK_WIPE_CACHE:	
; 261  : 			item.pszText = GetString ("HK_WIPE_CACHE");

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CLOOONDG@HK_WIPE_CACHE?$AA@
  000c2	e8 00 00 00 00	 call	 _GetString
  000c7	83 c4 04	 add	 esp, 4
  000ca	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 262  : 			break;

  000d0	e9 88 00 00 00	 jmp	 $LN5@DisplayHot
$LN10@DisplayHot:

; 263  : 
; 264  : 		case HK_DISMOUNT_ALL_AND_WIPE:	
; 265  : 			item.pszText = GetString ("HK_DISMOUNT_ALL_AND_WIPE");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PKPOPMEC@HK_DISMOUNT_ALL_AND_WIPE?$AA@
  000da	e8 00 00 00 00	 call	 _GetString
  000df	83 c4 04	 add	 esp, 4
  000e2	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 266  : 			break;

  000e8	eb 73		 jmp	 SHORT $LN5@DisplayHot
$LN11@DisplayHot:

; 267  : 
; 268  : 		case HK_FORCE_DISMOUNT_ALL_AND_WIPE:	
; 269  : 			item.pszText = GetString ("HK_FORCE_DISMOUNT_ALL_AND_WIPE");

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BAOJNMID@HK_FORCE_DISMOUNT_ALL_AND_WIPE?$AA@
  000ef	e8 00 00 00 00	 call	 _GetString
  000f4	83 c4 04	 add	 esp, 4
  000f7	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 270  : 			break;

  000fd	eb 5e		 jmp	 SHORT $LN5@DisplayHot
$LN12@DisplayHot:

; 271  : 
; 272  : 		case HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT:	
; 273  : 			item.pszText = GetString ("HK_FORCE_DISMOUNT_ALL_AND_WIPE_AND_EXIT");

  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FEMPJBPL@HK_FORCE_DISMOUNT_ALL_AND_WIPE_A@
  00104	e8 00 00 00 00	 call	 _GetString
  00109	83 c4 04	 add	 esp, 4
  0010c	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 274  : 			break;

  00112	eb 49		 jmp	 SHORT $LN5@DisplayHot
$LN13@DisplayHot:

; 275  : 
; 276  : 		case HK_MOUNT_FAVORITE_VOLUMES:	
; 277  : 			item.pszText = GetString ("HK_MOUNT_FAVORITE_VOLUMES");

  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@KFKHOBIO@HK_MOUNT_FAVORITE_VOLUMES?$AA@
  00119	e8 00 00 00 00	 call	 _GetString
  0011e	83 c4 04	 add	 esp, 4
  00121	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 278  : 			break;

  00127	eb 34		 jmp	 SHORT $LN5@DisplayHot
$LN14@DisplayHot:

; 279  : 
; 280  : 		case HK_SHOW_HIDE_MAIN_WINDOW:	
; 281  : 			item.pszText = GetString ("HK_SHOW_HIDE_MAIN_WINDOW");

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PKJKCAHL@HK_SHOW_HIDE_MAIN_WINDOW?$AA@
  0012e	e8 00 00 00 00	 call	 _GetString
  00133	83 c4 04	 add	 esp, 4
  00136	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 282  : 			break;

  0013c	eb 1f		 jmp	 SHORT $LN5@DisplayHot
$LN15@DisplayHot:

; 283  : 
; 284  : 		case HK_CLOSE_SECURITY_TOKEN_SESSIONS:
; 285  : 			item.pszText = GetString ("IDM_CLOSE_ALL_TOKEN_SESSIONS");

  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BCAFOOJE@IDM_CLOSE_ALL_TOKEN_SESSIONS?$AA@
  00143	e8 00 00 00 00	 call	 _GetString
  00148	83 c4 04	 add	 esp, 4
  0014b	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax

; 286  : 			break;

  00151	eb 0a		 jmp	 SHORT $LN5@DisplayHot
$LN16@DisplayHot:

; 287  : 
; 288  : 		default:		
; 289  : 			item.pszText = L"[?]";

  00153	c7 85 b8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _item$[ebp+20], OFFSET ??_C@_17FONKKNAB@?$AA?$FL?$AA?$DP?$AA?$FN?$AA?$AA@
$LN5@DisplayHot:

; 290  : 		}
; 291  : 
; 292  : 		SendMessageW (hList,LVM_INSERTITEMW,0,(LPARAM)&item);

  0015d	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _item$[ebp]
  00163	50		 push	 eax
  00164	6a 00		 push	 0
  00166	68 4d 10 00 00	 push	 4173			; 0000104dH
  0016b	56		 push	 esi
  0016c	ff d7		 call	 edi

; 293  : 
; 294  : 		item.iSubItem = 1;
; 295  : 		wcscpy (Shortcut, L"");

  0016e	33 c0		 xor	 eax, eax
  00170	c7 85 ac f7 ff
	ff 01 00 00 00	 mov	 DWORD PTR _item$[ebp+8], 1
  0017a	66 89 85 ec fb
	ff ff		 mov	 WORD PTR _Shortcut$[ebp], ax

; 296  : 		wcscpy (ShortcutMod, L"");

  00181	66 89 85 f4 fd
	ff ff		 mov	 WORD PTR _ShortcutMod$[ebp], ax

; 297  : 
; 298  : 		if (GetKeyName (tmpHotkeys[i].vKeyCode, Shortcut))

  00188	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _Shortcut$[ebp]
  0018e	50		 push	 eax
  0018f	ff 34 dd 00 00
	00 00		 push	 DWORD PTR _tmpHotkeys[ebx*8]
  00196	e8 00 00 00 00	 call	 _GetKeyName
  0019b	83 c4 08	 add	 esp, 8
  0019e	85 c0		 test	 eax, eax
  001a0	0f 84 fa 01 00
	00		 je	 $LN17@DisplayHot

; 299  : 		{
; 300  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_CONTROL)

  001a6	f6 04 dd 04 00
	00 00 02	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 2
  001ae	74 66		 je	 SHORT $LN19@DisplayHot

; 301  : 			{
; 302  : 				wcscat (ShortcutMod, GetString ("VK_CONTROL"));

  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GEFMOENA@VK_CONTROL?$AA@
  001b5	e8 00 00 00 00	 call	 _GetString
  001ba	8b d0		 mov	 edx, eax
  001bc	83 c4 04	 add	 esp, 4
  001bf	8b f2		 mov	 esi, edx
$LL28@DisplayHot:
  001c1	66 8b 02	 mov	 ax, WORD PTR [edx]
  001c4	83 c2 02	 add	 edx, 2
  001c7	66 85 c0	 test	 ax, ax
  001ca	75 f5		 jne	 SHORT $LL28@DisplayHot
  001cc	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  001d2	2b d6		 sub	 edx, esi
  001d4	83 c7 fe	 add	 edi, -2			; fffffffeH
  001d7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL29@DisplayHot:
  001e0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  001e4	83 c7 02	 add	 edi, 2
  001e7	66 85 c0	 test	 ax, ax
  001ea	75 f4		 jne	 SHORT $LL29@DisplayHot
  001ec	8b ca		 mov	 ecx, edx
  001ee	c1 e9 02	 shr	 ecx, 2
  001f1	f3 a5		 rep movsd
  001f3	8b ca		 mov	 ecx, edx
  001f5	83 e1 03	 and	 ecx, 3
  001f8	f3 a4		 rep movsb

; 303  : 				wcscat (ShortcutMod, L"+");

  001fa	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  00200	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL30@DisplayHot:
  00203	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00207	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  0020a	66 85 c0	 test	 ax, ax
  0020d	75 f4		 jne	 SHORT $LL30@DisplayHot
  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00214	89 07		 mov	 DWORD PTR [edi], eax
$LN19@DisplayHot:

; 304  : 			}
; 305  : 
; 306  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_SHIFT)

  00216	f6 04 dd 04 00
	00 00 04	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 4
  0021e	74 66		 je	 SHORT $LN20@DisplayHot

; 307  : 			{
; 308  : 				wcscat (ShortcutMod, GetString ("VK_SHIFT"));

  00220	68 00 00 00 00	 push	 OFFSET ??_C@_08BHJBIDAM@VK_SHIFT?$AA@
  00225	e8 00 00 00 00	 call	 _GetString
  0022a	8b d0		 mov	 edx, eax
  0022c	83 c4 04	 add	 esp, 4
  0022f	8b f2		 mov	 esi, edx
$LL31@DisplayHot:
  00231	66 8b 02	 mov	 ax, WORD PTR [edx]
  00234	83 c2 02	 add	 edx, 2
  00237	66 85 c0	 test	 ax, ax
  0023a	75 f5		 jne	 SHORT $LL31@DisplayHot
  0023c	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  00242	2b d6		 sub	 edx, esi
  00244	83 c7 fe	 add	 edi, -2			; fffffffeH
  00247	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL32@DisplayHot:
  00250	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00254	83 c7 02	 add	 edi, 2
  00257	66 85 c0	 test	 ax, ax
  0025a	75 f4		 jne	 SHORT $LL32@DisplayHot
  0025c	8b ca		 mov	 ecx, edx
  0025e	c1 e9 02	 shr	 ecx, 2
  00261	f3 a5		 rep movsd
  00263	8b ca		 mov	 ecx, edx
  00265	83 e1 03	 and	 ecx, 3
  00268	f3 a4		 rep movsb

; 309  : 				wcscat (ShortcutMod, L"+");

  0026a	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  00270	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL33@DisplayHot:
  00273	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00277	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  0027a	66 85 c0	 test	 ax, ax
  0027d	75 f4		 jne	 SHORT $LL33@DisplayHot
  0027f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00284	89 07		 mov	 DWORD PTR [edi], eax
$LN20@DisplayHot:

; 310  : 			}
; 311  : 
; 312  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_ALT)

  00286	f6 04 dd 04 00
	00 00 01	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 1
  0028e	74 66		 je	 SHORT $LN21@DisplayHot

; 313  : 			{
; 314  : 				wcscat (ShortcutMod, GetString ("VK_ALT"));

  00290	68 00 00 00 00	 push	 OFFSET ??_C@_06HJLFINBF@VK_ALT?$AA@
  00295	e8 00 00 00 00	 call	 _GetString
  0029a	8b d0		 mov	 edx, eax
  0029c	83 c4 04	 add	 esp, 4
  0029f	8b f2		 mov	 esi, edx
$LL34@DisplayHot:
  002a1	66 8b 02	 mov	 ax, WORD PTR [edx]
  002a4	83 c2 02	 add	 edx, 2
  002a7	66 85 c0	 test	 ax, ax
  002aa	75 f5		 jne	 SHORT $LL34@DisplayHot
  002ac	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  002b2	2b d6		 sub	 edx, esi
  002b4	83 c7 fe	 add	 edi, -2			; fffffffeH
  002b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL35@DisplayHot:
  002c0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  002c4	83 c7 02	 add	 edi, 2
  002c7	66 85 c0	 test	 ax, ax
  002ca	75 f4		 jne	 SHORT $LL35@DisplayHot
  002cc	8b ca		 mov	 ecx, edx
  002ce	c1 e9 02	 shr	 ecx, 2
  002d1	f3 a5		 rep movsd
  002d3	8b ca		 mov	 ecx, edx
  002d5	83 e1 03	 and	 ecx, 3
  002d8	f3 a4		 rep movsb

; 315  : 				wcscat (ShortcutMod, L"+");

  002da	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  002e0	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL36@DisplayHot:
  002e3	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  002e7	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  002ea	66 85 c0	 test	 ax, ax
  002ed	75 f4		 jne	 SHORT $LL36@DisplayHot
  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  002f4	89 07		 mov	 DWORD PTR [edi], eax
$LN21@DisplayHot:

; 316  : 			}
; 317  : 
; 318  : 			if (tmpHotkeys[i].vKeyModifiers & MOD_WIN)

  002f6	f6 04 dd 04 00
	00 00 08	 test	 BYTE PTR _tmpHotkeys[ebx*8+4], 8
  002fe	74 63		 je	 SHORT $LN22@DisplayHot

; 319  : 			{
; 320  : 				wcscat (ShortcutMod, GetString ("VK_WIN"));

  00300	68 00 00 00 00	 push	 OFFSET ??_C@_06LKCBLNGG@VK_WIN?$AA@
  00305	e8 00 00 00 00	 call	 _GetString
  0030a	83 c4 04	 add	 esp, 4
  0030d	8b f0		 mov	 esi, eax
  0030f	90		 npad	 1
$LL37@DisplayHot:
  00310	66 8b 08	 mov	 cx, WORD PTR [eax]
  00313	83 c0 02	 add	 eax, 2
  00316	66 85 c9	 test	 cx, cx
  00319	75 f5		 jne	 SHORT $LL37@DisplayHot
  0031b	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  00321	2b c6		 sub	 eax, esi
  00323	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL38@DisplayHot:
  00326	66 8b 4f 02	 mov	 cx, WORD PTR [edi+2]
  0032a	83 c7 02	 add	 edi, 2
  0032d	66 85 c9	 test	 cx, cx
  00330	75 f4		 jne	 SHORT $LL38@DisplayHot
  00332	8b c8		 mov	 ecx, eax
  00334	c1 e9 02	 shr	 ecx, 2
  00337	f3 a5		 rep movsd
  00339	8b c8		 mov	 ecx, eax
  0033b	83 e1 03	 and	 ecx, 3
  0033e	f3 a4		 rep movsb

; 321  : 				wcscat (ShortcutMod, L"+");

  00340	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _ShortcutMod$[ebp]
  00346	83 c7 fe	 add	 edi, -2			; fffffffeH
  00349	0f 1f 80 00 00
	00 00		 npad	 7
$LL39@DisplayHot:
  00350	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  00354	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  00357	66 85 c0	 test	 ax, ax
  0035a	75 f4		 jne	 SHORT $LL39@DisplayHot
  0035c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13KJIIAINM@?$AA?$CL?$AA?$AA@
  00361	89 07		 mov	 DWORD PTR [edi], eax
$LN22@DisplayHot:

; 322  : 			}
; 323  : 
; 324  : 			wsprintfW (ShortcutFinal, L"%s%s", ShortcutMod, Shortcut);

  00363	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _Shortcut$[ebp]
  00369	50		 push	 eax
  0036a	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _ShortcutMod$[ebp]
  00370	50		 push	 eax
  00371	8d 85 dc f7 ff
	ff		 lea	 eax, DWORD PTR _ShortcutFinal$[ebp]
  00377	68 00 00 00 00	 push	 OFFSET ??_C@_19LJDFFCJJ@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
  0037c	50		 push	 eax
  0037d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 325  : 			item.pszText = ShortcutFinal;
; 326  : 		}

  00383	8b b5 d8 f7 ff
	ff		 mov	 esi, DWORD PTR _hList$1$[ebp]
  00389	8d 85 dc f7 ff
	ff		 lea	 eax, DWORD PTR _ShortcutFinal$[ebp]
  0038f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  00395	83 c4 10	 add	 esp, 16			; 00000010H
  00398	89 85 b8 f7 ff
	ff		 mov	 DWORD PTR _item$[ebp+20], eax
  0039e	eb 0a		 jmp	 SHORT $LN18@DisplayHot
$LN17@DisplayHot:

; 327  : 		else
; 328  : 			item.pszText = L"";

  003a0	c7 85 b8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _item$[ebp+20], OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
$LN18@DisplayHot:

; 329  : 
; 330  : 		SendMessageW (hList, LVM_SETITEMW, 0, (LPARAM)&item); 

  003aa	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _item$[ebp]
  003b0	50		 push	 eax
  003b1	6a 00		 push	 0
  003b3	68 4c 10 00 00	 push	 4172			; 0000104cH
  003b8	56		 push	 esi
  003b9	ff d7		 call	 edi
  003bb	43		 inc	 ebx
  003bc	83 fb 09	 cmp	 ebx, 9
  003bf	0f 8c 8b fc ff
	ff		 jl	 $LL4@DisplayHot

; 331  : 	}
; 332  : }

  003c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	33 cd		 xor	 ecx, ebp
  003cc	5b		 pop	 ebx
  003cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d2	8b e5		 mov	 esp, ebp
  003d4	5d		 pop	 ebp
  003d5	c3		 ret	 0
  003d6	66 90		 npad	 2
$LN41@DisplayHot:
  003d8	00 00 00 00	 DD	 $LN7@DisplayHot
  003dc	00 00 00 00	 DD	 $LN15@DisplayHot
  003e0	00 00 00 00	 DD	 $LN8@DisplayHot
  003e4	00 00 00 00	 DD	 $LN10@DisplayHot
  003e8	00 00 00 00	 DD	 $LN11@DisplayHot
  003ec	00 00 00 00	 DD	 $LN12@DisplayHot
  003f0	00 00 00 00	 DD	 $LN13@DisplayHot
  003f4	00 00 00 00	 DD	 $LN14@DisplayHot
  003f8	00 00 00 00	 DD	 $LN9@DisplayHot
_DisplayHotkeyList ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _ShortcutInUse
_TEXT	SEGMENT
_vKeyCode$ = 8						; size = 4
_modifiers$ = 12					; size = 4
_hotkeys$ = 16						; size = 4
_ShortcutInUse PROC					; COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 165  : 	int i;
; 166  : 
; 167  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _hotkeys$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	8b 55 0c	 mov	 edx, DWORD PTR _modifiers$[ebp]
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR _vKeyCode$[ebp]
  0000f	90		 npad	 1
$LL4@ShortcutIn:

; 168  : 	{
; 169  : 		if (hotkeys[i].vKeyCode == vKeyCode && hotkeys[i].vKeyModifiers == modifiers)

  00010	39 34 c1	 cmp	 DWORD PTR [ecx+eax*8], esi
  00013	75 06		 jne	 SHORT $LN2@ShortcutIn
  00015	39 54 c1 04	 cmp	 DWORD PTR [ecx+eax*8+4], edx
  00019	74 0b		 je	 SHORT $LN8@ShortcutIn
$LN2@ShortcutIn:

; 165  : 	int i;
; 166  : 
; 167  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  0001b	40		 inc	 eax
  0001c	83 f8 09	 cmp	 eax, 9
  0001f	7c ef		 jl	 SHORT $LL4@ShortcutIn

; 171  : 	}
; 172  : 	return FALSE;

  00021	33 c0		 xor	 eax, eax
  00023	5e		 pop	 esi

; 173  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN8@ShortcutIn:

; 170  : 			return TRUE;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	5e		 pop	 esi

; 173  : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_ShortcutInUse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _ScanAndProcessKey
_TEXT	SEGMENT
_vKeyCode$ = 8						; size = 4
_keyName$ = 12						; size = 4
_ScanAndProcessKey PROC					; COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 48   : 	UINT vKey;
; 49   : 	*vKeyCode = 0;
; 50   : 
; 51   : 	for (vKey = 0; vKey <= 0xFF; vKey++)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _keyName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _vKeyCode$[ebp]
  0000c	33 f6		 xor	 esi, esi
  0000e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LL4@ScanAndPro:

; 52   : 	{
; 53   : 		if (GetAsyncKeyState (vKey) < 0)

  00014	56		 push	 esi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  0001b	66 85 c0	 test	 ax, ax
  0001e	79 10		 jns	 SHORT $LN2@ScanAndPro

; 54   : 		{
; 55   : 			if (GetKeyName (vKey, keyName))	// If the key is allowed and its name has been resolved

  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _GetKeyName
  00027	83 c4 08	 add	 esp, 8
  0002a	85 c0		 test	 eax, eax
  0002c	74 02		 je	 SHORT $LN2@ScanAndPro

; 56   : 				*vKeyCode = vKey;

  0002e	89 37		 mov	 DWORD PTR [edi], esi
$LN2@ScanAndPro:

; 48   : 	UINT vKey;
; 49   : 	*vKeyCode = 0;
; 50   : 
; 51   : 	for (vKey = 0; vKey <= 0xFF; vKey++)

  00030	46		 inc	 esi
  00031	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00037	76 db		 jbe	 SHORT $LL4@ScanAndPro
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 57   : 		}
; 58   : 	}
; 59   : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_ScanAndProcessKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _RegisterAllHotkeys
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_hotkeys$ = 12						; size = 4
_RegisterAllHotkeys PROC				; COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 209  : 	BOOL result = TRUE;
; 210  : 	int i;
; 211  : 
; 212  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _hotkeys$[ebp]
  00009	bb 01 00 00 00	 mov	 ebx, 1
  0000e	33 f6		 xor	 esi, esi
$LL4@RegisterAl:

; 213  : 	{
; 214  : 		if (hotkeys[i].vKeyCode != 0
; 215  : 		&& !RegisterHotKey (hwndDlg, i, hotkeys[i].vKeyModifiers, hotkeys[i].vKeyCode))

  00010	8b 04 f7	 mov	 eax, DWORD PTR [edi+esi*8]
  00013	85 c0		 test	 eax, eax
  00015	74 15		 je	 SHORT $LN2@RegisterAl
  00017	50		 push	 eax
  00018	ff 74 f7 04	 push	 DWORD PTR [edi+esi*8+4]
  0001c	56		 push	 esi
  0001d	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterHotKey@16
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	23 d8		 and	 ebx, eax
$LN2@RegisterAl:

; 209  : 	BOOL result = TRUE;
; 210  : 	int i;
; 211  : 
; 212  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  0002c	46		 inc	 esi
  0002d	83 fe 09	 cmp	 esi, 9
  00030	7c de		 jl	 SHORT $LL4@RegisterAl

; 216  : 			result = FALSE;
; 217  : 	}
; 218  : 
; 219  : 	return result;

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	8b c3		 mov	 eax, ebx
  00036	5b		 pop	 ebx

; 220  : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_RegisterAllHotkeys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _UnregisterAllHotkeys
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_hotkeys$ = 12						; size = 4
_UnregisterAllHotkeys PROC				; COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 187  : 	int i;
; 188  : 
; 189  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR _hotkeys$[ebp]
  0000c	33 f6		 xor	 esi, esi
  0000e	66 90		 npad	 2
$LL4@Unregister:

; 190  : 	{
; 191  : 		if (hotkeys[i].vKeyCode != 0)

  00010	83 3c f7 00	 cmp	 DWORD PTR [edi+esi*8], 0
  00014	74 08		 je	 SHORT $LN2@Unregister

; 192  : 			UnregisterHotKey (hwndDlg, i);

  00016	56		 push	 esi
  00017	53		 push	 ebx
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterHotKey@8
$LN2@Unregister:

; 187  : 	int i;
; 188  : 
; 189  : 	for (i = 0; i < NBR_HOTKEYS; i++)

  0001e	46		 inc	 esi
  0001f	83 fe 09	 cmp	 esi, 9
  00022	7c ec		 jl	 SHORT $LL4@Unregister
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx

; 193  : 
; 194  : 	}
; 195  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_UnregisterAllHotkeys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _GetKeyName
_TEXT	SEGMENT
_key$1 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_vKey$ = 8						; size = 4
_keyName$ = 12						; size = 4
_GetKeyName PROC					; COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 73   : 	BOOL result = TRUE;
; 74   : 
; 75   : 	if (vKey >= 0x30 && vKey <= 0x5a)	

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _vKey$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _keyName$[ebp]
  00017	57		 push	 edi
  00018	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0001b	bf 01 00 00 00	 mov	 edi, 1
  00020	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00023	77 15		 ja	 SHORT $LN4@GetKeyName

; 76   : 	{
; 77   : 		// ASCII characters
; 78   : 		wsprintfW (keyName, L"%hc", (char) vKey);

  00025	0f be c1	 movsx	 eax, cl
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_17OGHPJJHO@?$AA?$CF?$AAh?$AAc?$AA?$AA@
  0002e	56		 push	 esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 79   : 	}

  00035	e9 46 05 00 00	 jmp	 $LN49@GetKeyName
$LN4@GetKeyName:

; 80   : 	else if (vKey >= 0xE9 && vKey <= 0xF5)	

  0003a	8d 81 17 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-233]
  00040	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00043	77 12		 ja	 SHORT $LN6@GetKeyName

; 81   : 	{
; 82   : 		// OEM-specific
; 83   : 		wsprintfW (keyName, L"OEM-%d", vKey);

  00045	51		 push	 ecx
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_1O@HLLLAKJJ@?$AAO?$AAE?$AAM?$AA?9?$AA?$CF?$AAd?$AA?$AA@
  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 84   : 	}

  00052	e9 29 05 00 00	 jmp	 $LN49@GetKeyName
$LN6@GetKeyName:

; 85   : 	else if (vKey >= VK_F1 && vKey <= VK_F24)

  00057	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  0005a	83 f8 17	 cmp	 eax, 23			; 00000017H
  0005d	77 15		 ja	 SHORT $LN8@GetKeyName

; 86   : 	{
; 87   : 		// F1-F24
; 88   : 		wsprintfW (keyName, L"F%d", vKey - VK_F1 + 1);

  0005f	8d 41 91	 lea	 eax, DWORD PTR [ecx-111]
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_17JGAKBPCN@?$AAF?$AA?$CF?$AAd?$AA?$AA@
  00068	56		 push	 esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 89   : 	}

  0006f	e9 0c 05 00 00	 jmp	 $LN49@GetKeyName
$LN8@GetKeyName:

; 90   : 	else if (vKey >= VK_NUMPAD0 && vKey <= VK_NUMPAD9)

  00074	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  00077	83 f8 09	 cmp	 eax, 9
  0007a	77 33		 ja	 SHORT $LN10@GetKeyName

; 91   : 	{
; 92   : 		// Numpad numbers
; 93   : 		wsprintfW (keyName, L"%s %d", GetString ("VK_NUMPAD"), vKey - VK_NUMPAD0); 

  0007c	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  0007f	50		 push	 eax
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00085	e8 00 00 00 00	 call	 _GetString
  0008a	83 c4 04	 add	 esp, 4
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
  00093	56		 push	 esi
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0009a	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0009d	8b c7		 mov	 eax, edi
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi

; 149  : }

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
$LN10@GetKeyName:

; 94   : 	}
; 95   : 	else
; 96   : 	{
; 97   : 		switch (vKey)

  000af	81 f9 db 00 00
	00		 cmp	 ecx, 219		; 000000dbH
  000b5	0f 87 27 02 00
	00		 ja	 $LN46@GetKeyName
  000bb	0f 84 f8 01 00
	00		 je	 $LN25@GetKeyName
  000c1	81 f9 c0 00 00
	00		 cmp	 ecx, 192		; 000000c0H
  000c7	0f 87 71 04 00
	00		 ja	 $LN42@GetKeyName
  000cd	0f b6 81 00 00
	00 00		 movzx	 eax, BYTE PTR $LN47@GetKeyName[ecx]
  000d4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN51@GetKeyName[eax*4]
$LN12@GetKeyName:

; 98   : 		{
; 99   : 		case VK_MULTIPLY:	wsprintfW (keyName, L"%s *", GetString ("VK_NUMPAD")); break;

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  000e0	e8 00 00 00 00	 call	 _GetString
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_19FPPNIDAC@?$AA?$CF?$AAs?$AA?5?$AA?$CK?$AA?$AA@
  000eb	56		 push	 esi
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  000f2	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  000f5	8b c7		 mov	 eax, edi
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi

; 149  : }

  000f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
$LN13@GetKeyName:

; 100  : 		case VK_ADD:		wsprintfW (keyName, L"%s +", GetString ("VK_NUMPAD")); break;

  00107	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  0010c	e8 00 00 00 00	 call	 _GetString
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_19OHEBOEGH@?$AA?$CF?$AAs?$AA?5?$AA?$CL?$AA?$AA@
  00117	56		 push	 esi
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0011e	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00121	8b c7		 mov	 eax, edi
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi

; 149  : }

  00125	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00128	33 cd		 xor	 ecx, ebp
  0012a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
$LN14@GetKeyName:

; 101  : 		case VK_SEPARATOR:	wsprintfW (keyName, L"%s Separator", GetString ("VK_NUMPAD")); break;

  00133	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00138	e8 00 00 00 00	 call	 _GetString
  0013d	50		 push	 eax
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@DEGHIJPD@?$AA?$CF?$AAs?$AA?5?$AAS?$AAe?$AAp?$AAa?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$AA@
  00143	56		 push	 esi
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0014a	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0014d	8b c7		 mov	 eax, edi
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi

; 149  : }

  00151	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00154	33 cd		 xor	 ecx, ebp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
$LN15@GetKeyName:

; 102  : 		case VK_SUBTRACT:	wsprintfW (keyName, L"%s -", GetString ("VK_NUMPAD")); break;

  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00164	e8 00 00 00 00	 call	 _GetString
  00169	50		 push	 eax
  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_19MCCKLLLL@?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?$AA@
  0016f	56		 push	 esi
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00176	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00179	8b c7		 mov	 eax, edi
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi

; 149  : }

  0017d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 cd		 xor	 ecx, ebp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
$LN16@GetKeyName:

; 103  : 		case VK_DECIMAL:	wsprintfW (keyName, L"%s .", GetString ("VK_NUMPAD")); break;

  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  00190	e8 00 00 00 00	 call	 _GetString
  00195	50		 push	 eax
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_19NAJPBEFF@?$AA?$CF?$AAs?$AA?5?$AA?4?$AA?$AA@
  0019b	56		 push	 esi
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  001a2	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  001a5	8b c7		 mov	 eax, edi
  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi

; 149  : }

  001a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ac	33 cd		 xor	 ecx, ebp
  001ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
$LN17@GetKeyName:

; 104  : 		case VK_DIVIDE:		wsprintfW (keyName, L"%s /", GetString ("VK_NUMPAD")); break;

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_09LOOKHEPK@VK_NUMPAD?$AA@
  001bc	e8 00 00 00 00	 call	 _GetString
  001c1	50		 push	 eax
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_19GICDHDDA@?$AA?$CF?$AAs?$AA?5?$AA?1?$AA?$AA@
  001c7	56		 push	 esi
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  001ce	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  001d1	8b c7		 mov	 eax, edi
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi

; 149  : }

  001d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d8	33 cd		 xor	 ecx, ebp
  001da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
$LN18@GetKeyName:

; 105  : 		case VK_OEM_1:		wcscpy (keyName, L"OEM 1 (';')"); break;

  001e3	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  001ea	8b c7		 mov	 eax, edi
  001ec	5f		 pop	 edi
  001ed	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  001f0	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BI@PIEDINDL@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA?5?$AA?$CI?$AA?8?$AA?$DL?$AA?8?$AA?$CJ?$AA?$AA@+16
  001f8	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  001fd	5e		 pop	 esi

; 149  : }

  001fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00201	33 cd		 xor	 ecx, ebp
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
$LN19@GetKeyName:

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0020c	8b c7		 mov	 eax, edi
  0020e	c7 06 2b 00 00
	00		 mov	 DWORD PTR [esi], 43	; 0000002bH
  00214	5f		 pop	 edi
  00215	5e		 pop	 esi

; 149  : }

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	33 cd		 xor	 ecx, ebp
  0021b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c3		 ret	 0
$LN20@GetKeyName:

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00224	8b c7		 mov	 eax, edi
  00226	c7 06 2c 00 00
	00		 mov	 DWORD PTR [esi], 44	; 0000002cH
  0022c	5f		 pop	 edi
  0022d	5e		 pop	 esi

; 149  : }

  0022e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00231	33 cd		 xor	 ecx, ebp
  00233	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c3		 ret	 0
$LN21@GetKeyName:

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0023c	8b c7		 mov	 eax, edi
  0023e	c7 06 2d 00 00
	00		 mov	 DWORD PTR [esi], 45	; 0000002dH
  00244	5f		 pop	 edi
  00245	5e		 pop	 esi

; 149  : }

  00246	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00249	33 cd		 xor	 ecx, ebp
  0024b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c3		 ret	 0
$LN22@GetKeyName:

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00254	8b c7		 mov	 eax, edi
  00256	c7 06 2e 00 00
	00		 mov	 DWORD PTR [esi], 46	; 0000002eH
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi

; 149  : }

  0025e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00261	33 cd		 xor	 ecx, ebp
  00263	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c3		 ret	 0
$LN23@GetKeyName:

; 106  : 		case VK_OEM_PLUS:	wcscpy (keyName, L"+"); break;
; 107  : 		case VK_OEM_COMMA:	wcscpy (keyName, L","); break;
; 108  : 		case VK_OEM_MINUS:	wcscpy (keyName, L"-"); break;
; 109  : 		case VK_OEM_PERIOD:	wcscpy (keyName, L".");	break;
; 110  : 		case VK_OEM_2:		wcscpy (keyName, L"OEM 2 ('/')"); break;

  0026c	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00273	8b c7		 mov	 eax, edi
  00275	5f		 pop	 edi
  00276	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00279	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BI@CJHKAGBI@?$AAO?$AAE?$AAM?$AA?5?$AA2?$AA?5?$AA?$CI?$AA?8?$AA?1?$AA?8?$AA?$CJ?$AA?$AA@+16
  00281	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00286	5e		 pop	 esi

; 149  : }

  00287	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028a	33 cd		 xor	 ecx, ebp
  0028c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00291	8b e5		 mov	 esp, ebp
  00293	5d		 pop	 ebp
  00294	c3		 ret	 0
$LN24@GetKeyName:

; 111  : 		case VK_OEM_3:		wcscpy (keyName, L"OEM 3 (`)"); break;

  00295	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@
  0029c	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0029f	a1 10 00 00 00	 mov	 eax, DWORD PTR ??_C@_1BE@NONNBIJA@?$AAO?$AAE?$AAM?$AA?5?$AA3?$AA?5?$AA?$CI?$AA?$GA?$AA?$CJ?$AA?$AA@+16
  002a4	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  002a7	8b c7		 mov	 eax, edi
  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi

; 149  : }

  002ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ae	33 cd		 xor	 ecx, ebp
  002b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b5	8b e5		 mov	 esp, ebp
  002b7	5d		 pop	 ebp
  002b8	c3		 ret	 0
$LN25@GetKeyName:

; 112  : 		case VK_OEM_4:		wcscpy (keyName, L"OEM 4 ('[')"); break;

  002b9	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  002c0	8b c7		 mov	 eax, edi
  002c2	5f		 pop	 edi
  002c3	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  002c6	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BI@FCPBPAJG@?$AAO?$AAE?$AAM?$AA?5?$AA4?$AA?5?$AA?$CI?$AA?8?$AA?$FL?$AA?8?$AA?$CJ?$AA?$AA@+16
  002ce	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  002d3	5e		 pop	 esi

; 149  : }

  002d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d7	33 cd		 xor	 ecx, ebp
  002d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c3		 ret	 0
$LN46@GetKeyName:

; 94   : 	}
; 95   : 	else
; 96   : 	{
; 97   : 		switch (vKey)

  002e2	8d 81 24 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-220]
  002e8	83 f8 23	 cmp	 eax, 35			; 00000023H
  002eb	0f 87 4d 02 00
	00		 ja	 $LN42@GetKeyName
  002f1	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN48@GetKeyName[eax]
  002f8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN52@GetKeyName[eax*4]
$LN26@GetKeyName:

; 113  : 		case VK_OEM_5:		wcscpy (keyName, L"OEM 5 ('\\')"); break;

  002ff	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00306	8b c7		 mov	 eax, edi
  00308	5f		 pop	 edi
  00309	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0030c	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BI@PGFMGIBO@?$AAO?$AAE?$AAM?$AA?5?$AA5?$AA?5?$AA?$CI?$AA?8?$AA?2?$AA?8?$AA?$CJ?$AA?$AA@+16
  00314	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00319	5e		 pop	 esi

; 149  : }

  0031a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031d	33 cd		 xor	 ecx, ebp
  0031f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00324	8b e5		 mov	 esp, ebp
  00326	5d		 pop	 ebp
  00327	c3		 ret	 0
$LN27@GetKeyName:

; 114  : 		case VK_OEM_6:		wcscpy (keyName, L"OEM 6 (']')"); break;

  00328	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0032f	8b c7		 mov	 eax, edi
  00331	5f		 pop	 edi
  00332	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00335	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BI@BDDONMHC@?$AAO?$AAE?$AAM?$AA?5?$AA6?$AA?5?$AA?$CI?$AA?8?$AA?$FN?$AA?8?$AA?$CJ?$AA?$AA@+16
  0033d	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00342	5e		 pop	 esi

; 149  : }

  00343	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00346	33 cd		 xor	 ecx, ebp
  00348	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034d	8b e5		 mov	 esp, ebp
  0034f	5d		 pop	 ebp
  00350	c3		 ret	 0
$LN28@GetKeyName:

; 115  : 		case VK_OEM_7:		wcscpy (keyName, L"OEM 7 (')"); break;

  00351	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@
  00358	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0035b	a1 10 00 00 00	 mov	 eax, DWORD PTR ??_C@_1BE@MPIGBJDL@?$AAO?$AAE?$AAM?$AA?5?$AA7?$AA?5?$AA?$CI?$AA?8?$AA?$CJ?$AA?$AA@+16
  00360	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00363	8b c7		 mov	 eax, edi
  00365	5f		 pop	 edi
  00366	5e		 pop	 esi

; 149  : }

  00367	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036a	33 cd		 xor	 ecx, ebp
  0036c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00371	8b e5		 mov	 esp, ebp
  00373	5d		 pop	 ebp
  00374	c3		 ret	 0
$LN29@GetKeyName:

; 116  : 		case VK_OEM_8:		wcscpy (keyName, L"OEM 8"); break;

  00375	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@
  0037d	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00381	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_1M@DOOFNPLB@?$AAO?$AAE?$AAM?$AA?5?$AA8?$AA?$AA@+8
  00386	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00389	8b c7		 mov	 eax, edi
  0038b	5f		 pop	 edi
  0038c	5e		 pop	 esi

; 149  : }

  0038d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00390	33 cd		 xor	 ecx, ebp
  00392	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00397	8b e5		 mov	 esp, ebp
  00399	5d		 pop	 ebp
  0039a	c3		 ret	 0
$LN30@GetKeyName:

; 117  : 		case VK_OEM_AX:		wcscpy (keyName, L"OEM AX"); break;

  0039b	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@
  003a3	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  003a7	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@+8
  003ac	89 46 08	 mov	 DWORD PTR [esi+8], eax
  003af	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_1O@MJCGBFBN@?$AAO?$AAE?$AAM?$AA?5?$AAA?$AAX?$AA?$AA@+12
  003b5	66 89 46 0c	 mov	 WORD PTR [esi+12], ax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  003b9	8b c7		 mov	 eax, edi
  003bb	5f		 pop	 edi
  003bc	5e		 pop	 esi

; 149  : }

  003bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c0	33 cd		 xor	 ecx, ebp
  003c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c7	8b e5		 mov	 esp, ebp
  003c9	5d		 pop	 ebp
  003ca	c3		 ret	 0
$LN31@GetKeyName:

; 118  : 		case VK_OEM_102:	wcscpy (keyName, L"OEM 102"); break;

  003cb	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BA@IAGEGNFM@?$AAO?$AAE?$AAM?$AA?5?$AA1?$AA0?$AA2?$AA?$AA@

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  003d2	8b c7		 mov	 eax, edi
  003d4	5f		 pop	 edi
  003d5	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  003d8	5e		 pop	 esi

; 149  : }

  003d9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003dc	33 cd		 xor	 ecx, ebp
  003de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e3	8b e5		 mov	 esp, ebp
  003e5	5d		 pop	 ebp
  003e6	c3		 ret	 0
$LN32@GetKeyName:

; 119  : 		case VK_ICO_HELP:	wcscpy (keyName, L"ICO_HELP"); break;

  003e7	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@
  003ee	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  003f1	66 a1 10 00 00
	00		 mov	 ax, WORD PTR ??_C@_1BC@NLJJNCCF@?$AAI?$AAC?$AAO?$AA_?$AAH?$AAE?$AAL?$AAP?$AA?$AA@+16
  003f7	66 89 46 10	 mov	 WORD PTR [esi+16], ax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  003fb	8b c7		 mov	 eax, edi
  003fd	5f		 pop	 edi
  003fe	5e		 pop	 esi

; 149  : }

  003ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00402	33 cd		 xor	 ecx, ebp
  00404	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00409	8b e5		 mov	 esp, ebp
  0040b	5d		 pop	 ebp
  0040c	c3		 ret	 0
$LN33@GetKeyName:

; 120  : 		case VK_ICO_00:		wcscpy (keyName, L"ICO_00"); break;

  0040d	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@
  00415	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00419	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@+8
  0041e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00421	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_1O@JBLAKJMC@?$AAI?$AAC?$AAO?$AA_?$AA0?$AA0?$AA?$AA@+12
  00427	66 89 46 0c	 mov	 WORD PTR [esi+12], ax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0042b	8b c7		 mov	 eax, edi
  0042d	5f		 pop	 edi
  0042e	5e		 pop	 esi

; 149  : }

  0042f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00432	33 cd		 xor	 ecx, ebp
  00434	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00439	8b e5		 mov	 esp, ebp
  0043b	5d		 pop	 ebp
  0043c	c3		 ret	 0
$LN34@GetKeyName:

; 121  : 		case VK_ICO_CLEAR:	wcscpy (keyName, L"ICO_CLEAR"); break;

  0043d	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@
  00444	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00447	a1 10 00 00 00	 mov	 eax, DWORD PTR ??_C@_1BE@LLGIDKHO@?$AAI?$AAC?$AAO?$AA_?$AAC?$AAL?$AAE?$AAA?$AAR?$AA?$AA@+16
  0044c	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0044f	8b c7		 mov	 eax, edi
  00451	5f		 pop	 edi
  00452	5e		 pop	 esi

; 149  : }

  00453	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00456	33 cd		 xor	 ecx, ebp
  00458	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0045d	8b e5		 mov	 esp, ebp
  0045f	5d		 pop	 ebp
  00460	c3		 ret	 0
$LN35@GetKeyName:

; 122  : 		case VK_ATTN:		wcscpy (keyName, L"Attn"); break;

  00461	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@
  00469	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0046d	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ??_C@_19OFNKLJK@?$AAA?$AAt?$AAt?$AAn?$AA?$AA@+8
  00473	66 89 46 08	 mov	 WORD PTR [esi+8], ax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00477	8b c7		 mov	 eax, edi
  00479	5f		 pop	 edi
  0047a	5e		 pop	 esi

; 149  : }

  0047b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047e	33 cd		 xor	 ecx, ebp
  00480	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00485	8b e5		 mov	 esp, ebp
  00487	5d		 pop	 ebp
  00488	c3		 ret	 0
$LN36@GetKeyName:

; 123  : 		case VK_CRSEL:		wcscpy (keyName, L"CrSel"); break;

  00489	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@
  00491	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00495	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_1M@MDALCLEC@?$AAC?$AAr?$AAS?$AAe?$AAl?$AA?$AA@+8
  0049a	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0049d	8b c7		 mov	 eax, edi
  0049f	5f		 pop	 edi
  004a0	5e		 pop	 esi

; 149  : }

  004a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a4	33 cd		 xor	 ecx, ebp
  004a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ab	8b e5		 mov	 esp, ebp
  004ad	5d		 pop	 ebp
  004ae	c3		 ret	 0
$LN37@GetKeyName:

; 124  : 		case VK_EXSEL:		wcscpy (keyName, L"ExSel"); break;

  004af	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@
  004b7	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  004bb	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_1M@DLBEBOGL@?$AAE?$AAx?$AAS?$AAe?$AAl?$AA?$AA@+8
  004c0	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  004c3	8b c7		 mov	 eax, edi
  004c5	5f		 pop	 edi
  004c6	5e		 pop	 esi

; 149  : }

  004c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ca	33 cd		 xor	 ecx, ebp
  004cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d1	8b e5		 mov	 esp, ebp
  004d3	5d		 pop	 ebp
  004d4	c3		 ret	 0
$LN38@GetKeyName:

; 125  : 		case VK_EREOF:		wcscpy (keyName, L"Erase EOF"); break;

  004d5	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@
  004dc	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  004df	a1 10 00 00 00	 mov	 eax, DWORD PTR ??_C@_1BE@PNGDAKCB@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAE?$AAO?$AAF?$AA?$AA@+16
  004e4	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  004e7	8b c7		 mov	 eax, edi
  004e9	5f		 pop	 edi
  004ea	5e		 pop	 esi

; 149  : }

  004eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ee	33 cd		 xor	 ecx, ebp
  004f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f5	8b e5		 mov	 esp, ebp
  004f7	5d		 pop	 ebp
  004f8	c3		 ret	 0
$LN39@GetKeyName:

; 126  : 		case VK_PA1:		wcscpy (keyName, L"PA1"); break;

  004f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@
  004fe	89 06		 mov	 DWORD PTR [esi], eax
  00500	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_17EDGIJFFN@?$AAP?$AAA?$AA1?$AA?$AA@+4
  00505	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00508	8b c7		 mov	 eax, edi
  0050a	5f		 pop	 edi
  0050b	5e		 pop	 esi

; 149  : }

  0050c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0050f	33 cd		 xor	 ecx, ebp
  00511	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00516	8b e5		 mov	 esp, ebp
  00518	5d		 pop	 ebp
  00519	c3		 ret	 0
$LN40@GetKeyName:

; 127  : 		case VK_OEM_CLEAR:	wcscpy (keyName, L"OEM Clear"); break;

  0051a	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@
  00521	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00524	a1 10 00 00 00	 mov	 eax, DWORD PTR ??_C@_1BE@BLNJPCHA@?$AAO?$AAE?$AAM?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AA?$AA@+16
  00529	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  0052c	8b c7		 mov	 eax, edi
  0052e	5f		 pop	 edi
  0052f	5e		 pop	 esi

; 149  : }

  00530	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00533	33 cd		 xor	 ecx, ebp
  00535	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0053a	8b e5		 mov	 esp, ebp
  0053c	5d		 pop	 ebp
  0053d	c3		 ret	 0
$LN42@GetKeyName:

; 128  : 
; 129  : 		case 0:
; 130  : 		case 1:
; 131  : 		case 0xFF:
; 132  : 			result = FALSE;
; 133  : 			break;
; 134  : 
; 135  : 		default:
; 136  : 			{
; 137  : 				char key[16];
; 138  : 				wchar_t *desc;
; 139  : 				sprintf (key, "VKEY_%02X", vKey);

  0053e	51		 push	 ecx
  0053f	8d 45 ec	 lea	 eax, DWORD PTR _key$1[ebp]
  00542	68 00 00 00 00	 push	 OFFSET ??_C@_09HCNHJIOE@VKEY_?$CF02X?$AA@
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 _sprintf

; 140  : 				desc = GetString (key);

  0054d	8d 45 ec	 lea	 eax, DWORD PTR _key$1[ebp]
  00550	50		 push	 eax
  00551	e8 00 00 00 00	 call	 _GetString
  00556	83 c4 10	 add	 esp, 16			; 00000010H

; 141  : 				if (desc == UnknownString)

  00559	3d 00 00 00 00	 cmp	 eax, OFFSET _UnknownString
  0055e	75 14		 jne	 SHORT $LN43@GetKeyName
$LN41@GetKeyName:

; 142  : 					result = FALSE;

  00560	33 ff		 xor	 edi, edi

; 145  : 			}
; 146  : 		}
; 147  : 	}
; 148  : 	return result;

  00562	8b c7		 mov	 eax, edi
  00564	5f		 pop	 edi
  00565	5e		 pop	 esi

; 149  : }

  00566	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00569	33 cd		 xor	 ecx, ebp
  0056b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00570	8b e5		 mov	 esp, ebp
  00572	5d		 pop	 ebp
  00573	c3		 ret	 0
$LN43@GetKeyName:

; 143  : 				else
; 144  : 					wcsncpy (keyName, desc, MAX_KEY_COMB_NAME_LEN);

  00574	68 04 01 00 00	 push	 260			; 00000104H
  00579	50		 push	 eax
  0057a	56		 push	 esi
  0057b	e8 00 00 00 00	 call	 _wcsncpy
$LN49@GetKeyName:

; 149  : }

  00580	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00583	83 c4 0c	 add	 esp, 12			; 0000000cH
  00586	8b c7		 mov	 eax, edi
  00588	33 cd		 xor	 ecx, ebp
  0058a	5f		 pop	 edi
  0058b	5e		 pop	 esi
  0058c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00591	8b e5		 mov	 esp, ebp
  00593	5d		 pop	 ebp
  00594	c3		 ret	 0
  00595	0f 1f 00	 npad	 3
$LN51@GetKeyName:
  00598	00 00 00 00	 DD	 $LN41@GetKeyName
  0059c	00 00 00 00	 DD	 $LN12@GetKeyName
  005a0	00 00 00 00	 DD	 $LN13@GetKeyName
  005a4	00 00 00 00	 DD	 $LN14@GetKeyName
  005a8	00 00 00 00	 DD	 $LN15@GetKeyName
  005ac	00 00 00 00	 DD	 $LN16@GetKeyName
  005b0	00 00 00 00	 DD	 $LN17@GetKeyName
  005b4	00 00 00 00	 DD	 $LN18@GetKeyName
  005b8	00 00 00 00	 DD	 $LN19@GetKeyName
  005bc	00 00 00 00	 DD	 $LN20@GetKeyName
  005c0	00 00 00 00	 DD	 $LN21@GetKeyName
  005c4	00 00 00 00	 DD	 $LN22@GetKeyName
  005c8	00 00 00 00	 DD	 $LN23@GetKeyName
  005cc	00 00 00 00	 DD	 $LN24@GetKeyName
  005d0	00 00 00 00	 DD	 $LN42@GetKeyName
$LN47@GetKeyName:
  005d4	00		 DB	 0
  005d5	00		 DB	 0
  005d6	0e		 DB	 14			; 0000000eH
  005d7	0e		 DB	 14			; 0000000eH
  005d8	0e		 DB	 14			; 0000000eH
  005d9	0e		 DB	 14			; 0000000eH
  005da	0e		 DB	 14			; 0000000eH
  005db	0e		 DB	 14			; 0000000eH
  005dc	0e		 DB	 14			; 0000000eH
  005dd	0e		 DB	 14			; 0000000eH
  005de	0e		 DB	 14			; 0000000eH
  005df	0e		 DB	 14			; 0000000eH
  005e0	0e		 DB	 14			; 0000000eH
  005e1	0e		 DB	 14			; 0000000eH
  005e2	0e		 DB	 14			; 0000000eH
  005e3	0e		 DB	 14			; 0000000eH
  005e4	0e		 DB	 14			; 0000000eH
  005e5	0e		 DB	 14			; 0000000eH
  005e6	0e		 DB	 14			; 0000000eH
  005e7	0e		 DB	 14			; 0000000eH
  005e8	0e		 DB	 14			; 0000000eH
  005e9	0e		 DB	 14			; 0000000eH
  005ea	0e		 DB	 14			; 0000000eH
  005eb	0e		 DB	 14			; 0000000eH
  005ec	0e		 DB	 14			; 0000000eH
  005ed	0e		 DB	 14			; 0000000eH
  005ee	0e		 DB	 14			; 0000000eH
  005ef	0e		 DB	 14			; 0000000eH
  005f0	0e		 DB	 14			; 0000000eH
  005f1	0e		 DB	 14			; 0000000eH
  005f2	0e		 DB	 14			; 0000000eH
  005f3	0e		 DB	 14			; 0000000eH
  005f4	0e		 DB	 14			; 0000000eH
  005f5	0e		 DB	 14			; 0000000eH
  005f6	0e		 DB	 14			; 0000000eH
  005f7	0e		 DB	 14			; 0000000eH
  005f8	0e		 DB	 14			; 0000000eH
  005f9	0e		 DB	 14			; 0000000eH
  005fa	0e		 DB	 14			; 0000000eH
  005fb	0e		 DB	 14			; 0000000eH
  005fc	0e		 DB	 14			; 0000000eH
  005fd	0e		 DB	 14			; 0000000eH
  005fe	0e		 DB	 14			; 0000000eH
  005ff	0e		 DB	 14			; 0000000eH
  00600	0e		 DB	 14			; 0000000eH
  00601	0e		 DB	 14			; 0000000eH
  00602	0e		 DB	 14			; 0000000eH
  00603	0e		 DB	 14			; 0000000eH
  00604	0e		 DB	 14			; 0000000eH
  00605	0e		 DB	 14			; 0000000eH
  00606	0e		 DB	 14			; 0000000eH
  00607	0e		 DB	 14			; 0000000eH
  00608	0e		 DB	 14			; 0000000eH
  00609	0e		 DB	 14			; 0000000eH
  0060a	0e		 DB	 14			; 0000000eH
  0060b	0e		 DB	 14			; 0000000eH
  0060c	0e		 DB	 14			; 0000000eH
  0060d	0e		 DB	 14			; 0000000eH
  0060e	0e		 DB	 14			; 0000000eH
  0060f	0e		 DB	 14			; 0000000eH
  00610	0e		 DB	 14			; 0000000eH
  00611	0e		 DB	 14			; 0000000eH
  00612	0e		 DB	 14			; 0000000eH
  00613	0e		 DB	 14			; 0000000eH
  00614	0e		 DB	 14			; 0000000eH
  00615	0e		 DB	 14			; 0000000eH
  00616	0e		 DB	 14			; 0000000eH
  00617	0e		 DB	 14			; 0000000eH
  00618	0e		 DB	 14			; 0000000eH
  00619	0e		 DB	 14			; 0000000eH
  0061a	0e		 DB	 14			; 0000000eH
  0061b	0e		 DB	 14			; 0000000eH
  0061c	0e		 DB	 14			; 0000000eH
  0061d	0e		 DB	 14			; 0000000eH
  0061e	0e		 DB	 14			; 0000000eH
  0061f	0e		 DB	 14			; 0000000eH
  00620	0e		 DB	 14			; 0000000eH
  00621	0e		 DB	 14			; 0000000eH
  00622	0e		 DB	 14			; 0000000eH
  00623	0e		 DB	 14			; 0000000eH
  00624	0e		 DB	 14			; 0000000eH
  00625	0e		 DB	 14			; 0000000eH
  00626	0e		 DB	 14			; 0000000eH
  00627	0e		 DB	 14			; 0000000eH
  00628	0e		 DB	 14			; 0000000eH
  00629	0e		 DB	 14			; 0000000eH
  0062a	0e		 DB	 14			; 0000000eH
  0062b	0e		 DB	 14			; 0000000eH
  0062c	0e		 DB	 14			; 0000000eH
  0062d	0e		 DB	 14			; 0000000eH
  0062e	0e		 DB	 14			; 0000000eH
  0062f	0e		 DB	 14			; 0000000eH
  00630	0e		 DB	 14			; 0000000eH
  00631	0e		 DB	 14			; 0000000eH
  00632	0e		 DB	 14			; 0000000eH
  00633	0e		 DB	 14			; 0000000eH
  00634	0e		 DB	 14			; 0000000eH
  00635	0e		 DB	 14			; 0000000eH
  00636	0e		 DB	 14			; 0000000eH
  00637	0e		 DB	 14			; 0000000eH
  00638	0e		 DB	 14			; 0000000eH
  00639	0e		 DB	 14			; 0000000eH
  0063a	0e		 DB	 14			; 0000000eH
  0063b	0e		 DB	 14			; 0000000eH
  0063c	0e		 DB	 14			; 0000000eH
  0063d	0e		 DB	 14			; 0000000eH
  0063e	01		 DB	 1
  0063f	02		 DB	 2
  00640	03		 DB	 3
  00641	04		 DB	 4
  00642	05		 DB	 5
  00643	06		 DB	 6
  00644	0e		 DB	 14			; 0000000eH
  00645	0e		 DB	 14			; 0000000eH
  00646	0e		 DB	 14			; 0000000eH
  00647	0e		 DB	 14			; 0000000eH
  00648	0e		 DB	 14			; 0000000eH
  00649	0e		 DB	 14			; 0000000eH
  0064a	0e		 DB	 14			; 0000000eH
  0064b	0e		 DB	 14			; 0000000eH
  0064c	0e		 DB	 14			; 0000000eH
  0064d	0e		 DB	 14			; 0000000eH
  0064e	0e		 DB	 14			; 0000000eH
  0064f	0e		 DB	 14			; 0000000eH
  00650	0e		 DB	 14			; 0000000eH
  00651	0e		 DB	 14			; 0000000eH
  00652	0e		 DB	 14			; 0000000eH
  00653	0e		 DB	 14			; 0000000eH
  00654	0e		 DB	 14			; 0000000eH
  00655	0e		 DB	 14			; 0000000eH
  00656	0e		 DB	 14			; 0000000eH
  00657	0e		 DB	 14			; 0000000eH
  00658	0e		 DB	 14			; 0000000eH
  00659	0e		 DB	 14			; 0000000eH
  0065a	0e		 DB	 14			; 0000000eH
  0065b	0e		 DB	 14			; 0000000eH
  0065c	0e		 DB	 14			; 0000000eH
  0065d	0e		 DB	 14			; 0000000eH
  0065e	0e		 DB	 14			; 0000000eH
  0065f	0e		 DB	 14			; 0000000eH
  00660	0e		 DB	 14			; 0000000eH
  00661	0e		 DB	 14			; 0000000eH
  00662	0e		 DB	 14			; 0000000eH
  00663	0e		 DB	 14			; 0000000eH
  00664	0e		 DB	 14			; 0000000eH
  00665	0e		 DB	 14			; 0000000eH
  00666	0e		 DB	 14			; 0000000eH
  00667	0e		 DB	 14			; 0000000eH
  00668	0e		 DB	 14			; 0000000eH
  00669	0e		 DB	 14			; 0000000eH
  0066a	0e		 DB	 14			; 0000000eH
  0066b	0e		 DB	 14			; 0000000eH
  0066c	0e		 DB	 14			; 0000000eH
  0066d	0e		 DB	 14			; 0000000eH
  0066e	0e		 DB	 14			; 0000000eH
  0066f	0e		 DB	 14			; 0000000eH
  00670	0e		 DB	 14			; 0000000eH
  00671	0e		 DB	 14			; 0000000eH
  00672	0e		 DB	 14			; 0000000eH
  00673	0e		 DB	 14			; 0000000eH
  00674	0e		 DB	 14			; 0000000eH
  00675	0e		 DB	 14			; 0000000eH
  00676	0e		 DB	 14			; 0000000eH
  00677	0e		 DB	 14			; 0000000eH
  00678	0e		 DB	 14			; 0000000eH
  00679	0e		 DB	 14			; 0000000eH
  0067a	0e		 DB	 14			; 0000000eH
  0067b	0e		 DB	 14			; 0000000eH
  0067c	0e		 DB	 14			; 0000000eH
  0067d	0e		 DB	 14			; 0000000eH
  0067e	0e		 DB	 14			; 0000000eH
  0067f	0e		 DB	 14			; 0000000eH
  00680	0e		 DB	 14			; 0000000eH
  00681	0e		 DB	 14			; 0000000eH
  00682	0e		 DB	 14			; 0000000eH
  00683	0e		 DB	 14			; 0000000eH
  00684	0e		 DB	 14			; 0000000eH
  00685	0e		 DB	 14			; 0000000eH
  00686	0e		 DB	 14			; 0000000eH
  00687	0e		 DB	 14			; 0000000eH
  00688	0e		 DB	 14			; 0000000eH
  00689	0e		 DB	 14			; 0000000eH
  0068a	0e		 DB	 14			; 0000000eH
  0068b	0e		 DB	 14			; 0000000eH
  0068c	0e		 DB	 14			; 0000000eH
  0068d	0e		 DB	 14			; 0000000eH
  0068e	07		 DB	 7
  0068f	08		 DB	 8
  00690	09		 DB	 9
  00691	0a		 DB	 10			; 0000000aH
  00692	0b		 DB	 11			; 0000000bH
  00693	0c		 DB	 12			; 0000000cH
  00694	0d		 DB	 13			; 0000000dH
  00695	0f 1f 00	 npad	 3
$LN52@GetKeyName:
  00698	00 00 00 00	 DD	 $LN26@GetKeyName
  0069c	00 00 00 00	 DD	 $LN27@GetKeyName
  006a0	00 00 00 00	 DD	 $LN28@GetKeyName
  006a4	00 00 00 00	 DD	 $LN29@GetKeyName
  006a8	00 00 00 00	 DD	 $LN30@GetKeyName
  006ac	00 00 00 00	 DD	 $LN31@GetKeyName
  006b0	00 00 00 00	 DD	 $LN32@GetKeyName
  006b4	00 00 00 00	 DD	 $LN33@GetKeyName
  006b8	00 00 00 00	 DD	 $LN34@GetKeyName
  006bc	00 00 00 00	 DD	 $LN35@GetKeyName
  006c0	00 00 00 00	 DD	 $LN36@GetKeyName
  006c4	00 00 00 00	 DD	 $LN37@GetKeyName
  006c8	00 00 00 00	 DD	 $LN38@GetKeyName
  006cc	00 00 00 00	 DD	 $LN39@GetKeyName
  006d0	00 00 00 00	 DD	 $LN40@GetKeyName
  006d4	00 00 00 00	 DD	 $LN41@GetKeyName
  006d8	00 00 00 00	 DD	 $LN42@GetKeyName
$LN48@GetKeyName:
  006dc	00		 DB	 0
  006dd	01		 DB	 1
  006de	02		 DB	 2
  006df	03		 DB	 3
  006e0	10		 DB	 16			; 00000010H
  006e1	04		 DB	 4
  006e2	05		 DB	 5
  006e3	06		 DB	 6
  006e4	07		 DB	 7
  006e5	10		 DB	 16			; 00000010H
  006e6	08		 DB	 8
  006e7	10		 DB	 16			; 00000010H
  006e8	10		 DB	 16			; 00000010H
  006e9	10		 DB	 16			; 00000010H
  006ea	10		 DB	 16			; 00000010H
  006eb	10		 DB	 16			; 00000010H
  006ec	10		 DB	 16			; 00000010H
  006ed	10		 DB	 16			; 00000010H
  006ee	10		 DB	 16			; 00000010H
  006ef	10		 DB	 16			; 00000010H
  006f0	10		 DB	 16			; 00000010H
  006f1	10		 DB	 16			; 00000010H
  006f2	10		 DB	 16			; 00000010H
  006f3	10		 DB	 16			; 00000010H
  006f4	10		 DB	 16			; 00000010H
  006f5	10		 DB	 16			; 00000010H
  006f6	09		 DB	 9
  006f7	0a		 DB	 10			; 0000000aH
  006f8	0b		 DB	 11			; 0000000bH
  006f9	0c		 DB	 12			; 0000000cH
  006fa	10		 DB	 16			; 00000010H
  006fb	10		 DB	 16			; 00000010H
  006fc	10		 DB	 16			; 00000010H
  006fd	0d		 DB	 13			; 0000000dH
  006fe	0e		 DB	 14			; 0000000eH
  006ff	0f		 DB	 15			; 0000000fH
_GetKeyName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\mount\hotkeys.c
;	COMDAT _HotkeysDlgProc@16
_TEXT	SEGMENT
_col$1 = -572						; size = 32
_lParam$GSCopy$1$ = -540				; size = 4
_hw$1$ = -536						; size = 4
_hList$1$ = -532					; size = 4
_hwndMainDlg$1$ = -528					; size = 4
_tmpVKeyCode$2 = -528					; size = 4
_keyName$3 = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_HotkeysDlgProc@16 PROC					; COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 02 00
	00		 sub	 esp, 572		; 0000023cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00016	53		 push	 ebx

; 366  : 	HWND hList = GetDlgItem (hwndDlg, IDC_HOTKEY_LIST);

  00017	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _hwndDlg$[ebp]
  00022	68 41 04 00 00	 push	 1089			; 00000441H
  00027	57		 push	 edi
  00028	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _lParam$GSCopy$1$[ebp], eax
  0002e	ff d3		 call	 ebx

; 367  : 	HWND hwndMainDlg = hwndDlg;
; 368  : 	WORD lw = LOWORD (wParam);
; 369  : 	WORD hw = HIWORD (wParam);

  00030	8b 75 10	 mov	 esi, DWORD PTR _wParam$[ebp]
  00033	89 85 ec fd ff
	ff		 mov	 DWORD PTR _hList$1$[ebp], eax
  00039	8b c6		 mov	 eax, esi
  0003b	c1 e8 10	 shr	 eax, 16			; 00000010H

; 370  : 	static BOOL bKeyScanOn;
; 371  : 	static BOOL bTPlaySoundOnSuccessfulHkDismount;
; 372  : 	static BOOL bTDisplayBalloonOnSuccessfulHkDismount;
; 373  : 
; 374  : 	while (GetParent (hwndMainDlg) != NULL)

  0003e	57		 push	 edi
  0003f	89 bd f0 fd ff
	ff		 mov	 DWORD PTR _hwndMainDlg$1$[ebp], edi
  00045	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _hw$1$[ebp], eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00051	85 c0		 test	 eax, eax
  00053	74 22		 je	 SHORT $LN3@HotkeysDlg
  00055	8b df		 mov	 ebx, edi
$LL2@HotkeysDlg:

; 375  : 	{
; 376  : 		hwndMainDlg = GetParent (hwndMainDlg);

  00057	53		 push	 ebx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  0005e	8b d8		 mov	 ebx, eax
  00060	53		 push	 ebx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  00067	85 c0		 test	 eax, eax
  00069	75 ec		 jne	 SHORT $LL2@HotkeysDlg
  0006b	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _hwndMainDlg$1$[ebp], ebx
  00071	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetDlgItem@8
$LN3@HotkeysDlg:

; 377  : 	}
; 378  : 
; 379  : 	switch (msg)

  00077	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  0007a	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  0007f	0f 87 03 02 00
	00		 ja	 $LN45@HotkeysDlg
  00085	74 27		 je	 SHORT $LN11@HotkeysDlg
  00087	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008a	0f 84 77 07 00
	00		 je	 $LN39@HotkeysDlg
  00090	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00093	0f 84 6e 02 00
	00		 je	 $LN15@HotkeysDlg
$LN40@HotkeysDlg:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 607  : 		}
; 608  : 		return 0;

  0009b	33 c0		 xor	 eax, eax
  0009d	5b		 pop	 ebx

; 609  : 
; 610  : 	case WM_CLOSE:
; 611  : 
; 612  : 		KillTimer (hwndDlg, 0xfe);
; 613  : 		EndDialog (hwndDlg, IDCANCEL);
; 614  : 		return 1;
; 615  : 	}
; 616  : 	return 0;
; 617  : }

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	33 cd		 xor	 ecx, ebp
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 10 00	 ret	 16			; 00000010H
$LN11@HotkeysDlg:

; 380  : 	{
; 381  : 	case WM_INITDIALOG:
; 382  : 		{
; 383  : 			LVCOLUMNW col;
; 384  : 
; 385  : 			bKeyScanOn = FALSE;
; 386  : 			nSelectedHotkeyId = -1;
; 387  : 			currentVKeyCode = 0;
; 388  : 			memcpy (tmpHotkeys, Hotkeys, sizeof(tmpHotkeys));

  000ae	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR _Hotkeys

; 389  : 
; 390  : 			SendMessageW (hList,LVM_SETEXTENDEDLISTVIEWSTYLE,0,

  000b5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageW@16
  000bb	68 30 40 00 00	 push	 16432			; 00004030H
  000c0	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR _tmpHotkeys, xmm0
  000c7	6a 00		 push	 0
  000c9	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR _Hotkeys+16
  000d0	68 36 10 00 00	 push	 4150			; 00001036H
  000d5	ff b5 ec fd ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  000db	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR _tmpHotkeys+16, xmm0
  000e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, 0
  000ec	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR _Hotkeys+32
  000f3	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _nSelectedHotkeyId, -1
  000fd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _currentVKeyCode, 0
  00107	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR _tmpHotkeys+32, xmm0
  0010e	0f 10 05 30 00
	00 00		 movups	 xmm0, XMMWORD PTR _Hotkeys+48
  00115	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR _tmpHotkeys+48, xmm0
  0011c	f3 0f 7e 05 40
	00 00 00	 movq	 xmm0, QWORD PTR _Hotkeys+64
  00124	66 0f d6 05 40
	00 00 00	 movq	 QWORD PTR _tmpHotkeys+64, xmm0
  0012c	ff d6		 call	 esi
  0012e	0f 57 c0	 xorps	 xmm0, xmm0

; 391  : 				LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_LABELTIP 
; 392  : 				); 
; 393  : 
; 394  : 			memset (&col,0,sizeof(col));               

  00131	0f 11 85 c4 fd
	ff ff		 movups	 XMMWORD PTR _col$1[ebp], xmm0

; 395  : 			col.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 396  : 			col.pszText = GetString ("ACTION");                           

  00138	68 00 00 00 00	 push	 OFFSET ??_C@_06DHJAPAEE@ACTION?$AA@
  0013d	0f 11 85 d4 fd
	ff ff		 movups	 XMMWORD PTR _col$1[ebp+16], xmm0
  00144	c7 85 c4 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _col$1[ebp], 15 ; 0000000fH
  0014e	e8 00 00 00 00	 call	 _GetString

; 397  : 			col.cx = CompensateXDPI (341);

  00153	68 55 01 00 00	 push	 341			; 00000155H
  00158	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _col$1[ebp+12], eax
  0015e	e8 00 00 00 00	 call	 _CompensateXDPI
  00163	83 c4 08	 add	 esp, 8
  00166	89 85 cc fd ff
	ff		 mov	 DWORD PTR _col$1[ebp+8], eax

; 398  : 			col.fmt = LVCFMT_LEFT;
; 399  : 			SendMessageW (hList,LVM_INSERTCOLUMNW,0,(LPARAM)&col);

  0016c	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _col$1[ebp]
  00172	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _col$1[ebp+4], 0
  0017c	50		 push	 eax
  0017d	6a 00		 push	 0
  0017f	68 61 10 00 00	 push	 4193			; 00001061H
  00184	ff b5 ec fd ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  0018a	ff d6		 call	 esi

; 400  : 
; 401  : 			col.pszText = GetString ("SHORTCUT");  

  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_08KLMGAJAF@SHORTCUT?$AA@
  00191	e8 00 00 00 00	 call	 _GetString

; 402  : 			col.cx = CompensateXDPI (190);           

  00196	68 be 00 00 00	 push	 190			; 000000beH
  0019b	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _col$1[ebp+12], eax
  001a1	e8 00 00 00 00	 call	 _CompensateXDPI
  001a6	83 c4 08	 add	 esp, 8
  001a9	89 85 cc fd ff
	ff		 mov	 DWORD PTR _col$1[ebp+8], eax

; 403  : 			col.fmt = LVCFMT_LEFT;
; 404  : 			SendMessageW (hList,LVM_INSERTCOLUMNW,1,(LPARAM)&col);

  001af	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _col$1[ebp]
  001b5	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _col$1[ebp+4], 0
  001bf	50		 push	 eax
  001c0	6a 01		 push	 1
  001c2	68 61 10 00 00	 push	 4193			; 00001061H
  001c7	ff b5 ec fd ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  001cd	ff d6		 call	 esi

; 405  : 
; 406  : 			LocalizeDialog (hwndDlg, "IDD_HOTKEYS_DLG");

  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HMGJHPFD@IDD_HOTKEYS_DLG?$AA@
  001d4	57		 push	 edi
  001d5	e8 00 00 00 00	 call	 _LocalizeDialog

; 407  : 
; 408  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_CTRL, TRUE);

  001da	6a 01		 push	 1
  001dc	68 46 04 00 00	 push	 1094			; 00000446H
  001e1	57		 push	 edi
  001e2	e8 00 00 00 00	 call	 _SetCheckBox

; 409  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_SHIFT, FALSE);

  001e7	6a 00		 push	 0
  001e9	68 45 04 00 00	 push	 1093			; 00000445H
  001ee	57		 push	 edi
  001ef	e8 00 00 00 00	 call	 _SetCheckBox

; 410  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_ALT, TRUE);

  001f4	6a 01		 push	 1
  001f6	68 47 04 00 00	 push	 1095			; 00000447H
  001fb	57		 push	 edi
  001fc	e8 00 00 00 00	 call	 _SetCheckBox

; 411  : 			SetCheckBox (hwndDlg, IDC_HK_MOD_WIN, FALSE);

  00201	6a 00		 push	 0
  00203	68 48 04 00 00	 push	 1096			; 00000448H
  00208	57		 push	 edi
  00209	e8 00 00 00 00	 call	 _SetCheckBox

; 412  : 
; 413  : 			SetCheckBox (hwndDlg, IDC_HK_DISMOUNT_PLAY_SOUND, bPlaySoundOnSuccessfulHkDismount);

  0020e	ff 35 00 00 00
	00		 push	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount
  00214	68 3c 04 00 00	 push	 1084			; 0000043cH
  00219	57		 push	 edi
  0021a	e8 00 00 00 00	 call	 _SetCheckBox
  0021f	83 c4 44	 add	 esp, 68			; 00000044H

; 414  : 			SetCheckBox (hwndDlg, IDC_HK_DISMOUNT_BALLOON_TOOLTIP, bDisplayBalloonOnSuccessfulHkDismount);

  00222	ff 35 00 00 00
	00		 push	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount
  00228	68 3a 04 00 00	 push	 1082			; 0000043aH
  0022d	57		 push	 edi
  0022e	e8 00 00 00 00	 call	 _SetCheckBox

; 415  : 
; 416  : 			bTPlaySoundOnSuccessfulHkDismount = bPlaySoundOnSuccessfulHkDismount;

  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR _bPlaySoundOnSuccessfulHkDismount
  00238	83 c4 0c	 add	 esp, 12			; 0000000cH

; 417  : 			bTDisplayBalloonOnSuccessfulHkDismount = bDisplayBalloonOnSuccessfulHkDismount;
; 418  : 
; 419  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  0023b	6a 00		 push	 0
  0023d	68 3d 04 00 00	 push	 1085			; 0000043dH
  00242	a3 00 00 00 00	 mov	 DWORD PTR ?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount
  0024c	57		 push	 edi
  0024d	a3 00 00 00 00	 mov	 DWORD PTR ?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax
  00252	ff d3		 call	 ebx
  00254	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  0025a	50		 push	 eax
  0025b	ff d6		 call	 esi

; 420  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);

  0025d	6a 00		 push	 0
  0025f	68 3e 04 00 00	 push	 1086			; 0000043eH
  00264	57		 push	 edi
  00265	ff d3		 call	 ebx
  00267	50		 push	 eax
  00268	ff d6		 call	 esi

; 421  : 
; 422  : 			DisplayHotkeyList(hwndDlg);

  0026a	57		 push	 edi
  0026b	e8 00 00 00 00	 call	 _DisplayHotkeyList
  00270	83 c4 04	 add	 esp, 4

; 423  : 			
; 424  : 			SetTimer (hwndDlg, 0xfe, 10, NULL);

  00273	6a 00		 push	 0
  00275	6a 0a		 push	 10			; 0000000aH
  00277	68 fe 00 00 00	 push	 254			; 000000feH
  0027c	57		 push	 edi
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16

; 425  : 			return 1;

  00283	e9 94 05 00 00	 jmp	 $LN70@HotkeysDlg
$LN45@HotkeysDlg:

; 377  : 	}
; 378  : 
; 379  : 	switch (msg)

  00288	2d 11 01 00 00	 sub	 eax, 273		; 00000111H
  0028d	74 78		 je	 SHORT $LN15@HotkeysDlg
  0028f	83 e8 02	 sub	 eax, 2
  00292	0f 85 01 fe ff
	ff		 jne	 $LN40@HotkeysDlg

; 426  : 		}
; 427  : 
; 428  : 	case WM_TIMER:
; 429  : 		{
; 430  : 			if (nSelectedHotkeyId > -1)

  00298	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _nSelectedHotkeyId, -1
  0029f	0f 8e 77 05 00
	00		 jle	 $LN70@HotkeysDlg

; 431  : 			{
; 432  : 				wchar_t keyName [MAX_KEY_COMB_NAME_LEN];
; 433  : 				UINT tmpVKeyCode;
; 434  : 
; 435  : 				keyName[0] = 0;

  002a5	66 89 85 f4 fd
	ff ff		 mov	 WORD PTR _keyName$3[ebp], ax

; 436  : 
; 437  : 				ScanAndProcessKey (&tmpVKeyCode, &keyName[0]);

  002ac	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _keyName$3[ebp]
  002b2	50		 push	 eax
  002b3	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _tmpVKeyCode$2[ebp]
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 _ScanAndProcessKey
  002bf	83 c4 08	 add	 esp, 8

; 438  : 
; 439  : 				if (keyName[0] != 0)

  002c2	66 83 bd f4 fd
	ff ff 00	 cmp	 WORD PTR _keyName$3[ebp], 0
  002ca	0f 84 4c 05 00
	00		 je	 $LN70@HotkeysDlg

; 440  : 				{
; 441  : 					currentVKeyCode = tmpVKeyCode;

  002d0	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _tmpVKeyCode$2[ebp]
  002d6	a3 00 00 00 00	 mov	 DWORD PTR _currentVKeyCode, eax

; 442  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), keyName);

  002db	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _keyName$3[ebp]
  002e1	50		 push	 eax
  002e2	68 3f 04 00 00	 push	 1087			; 0000043fH
  002e7	57		 push	 edi
  002e8	ff d3		 call	 ebx
  002ea	50		 push	 eax
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 443  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), TRUE);

  002f1	6a 01		 push	 1
  002f3	68 3d 04 00 00	 push	 1085			; 0000043dH
  002f8	57		 push	 edi
  002f9	ff d3		 call	 ebx
  002fb	50		 push	 eax
  002fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 444  : 				}
; 445  : 			}
; 446  : 			return 1;

  00302	e9 15 05 00 00	 jmp	 $LN70@HotkeysDlg
$LN15@HotkeysDlg:

; 447  : 		}
; 448  : 
; 449  : 	case WM_COMMAND:
; 450  : 	case WM_NOTIFY:
; 451  : 
; 452  : 		if (lw == IDC_HOTKEY_KEY && hw == EN_CHANGE)

  00307	b8 3f 04 00 00	 mov	 eax, 1087		; 0000043fH
  0030c	66 3b f0	 cmp	 si, ax
  0030f	75 47		 jne	 SHORT $LN68@HotkeysDlg
  00311	b8 00 03 00 00	 mov	 eax, 768		; 00000300H
  00316	66 39 85 e8 fd
	ff ff		 cmp	 WORD PTR _hw$1$[ebp], ax
  0031d	75 39		 jne	 SHORT $LN68@HotkeysDlg

; 453  : 		{
; 454  : 			if (!bKeyScanOn && nSelectedHotkeyId < 0 && GetWindowTextLengthW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY)))

  0031f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, 0
  00326	75 30		 jne	 SHORT $LN68@HotkeysDlg
  00328	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
  0032d	85 c0		 test	 eax, eax
  0032f	79 2c		 jns	 SHORT $LN17@HotkeysDlg
  00331	68 3f 04 00 00	 push	 1087			; 0000043fH
  00336	57		 push	 edi
  00337	ff d3		 call	 ebx
  00339	50		 push	 eax
  0033a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthW@4
  00340	85 c0		 test	 eax, eax
  00342	74 14		 je	 SHORT $LN68@HotkeysDlg

; 455  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  00344	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00349	68 3f 04 00 00	 push	 1087			; 0000043fH
  0034e	57		 push	 edi
  0034f	ff d3		 call	 ebx
  00351	50		 push	 eax
  00352	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN68@HotkeysDlg:
  00358	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
$LN17@HotkeysDlg:

; 456  : 		}
; 457  : 
; 458  : 		if (msg == WM_NOTIFY && wParam == IDC_HOTKEY_LIST)

  0035d	83 7d 0c 4e	 cmp	 DWORD PTR _msg$[ebp], 78 ; 0000004eH
  00361	0f 85 92 00 00
	00		 jne	 $LN19@HotkeysDlg
  00367	81 fe 41 04 00
	00		 cmp	 esi, 1089		; 00000441H
  0036d	0f 85 86 00 00
	00		 jne	 $LN19@HotkeysDlg

; 459  : 		{
; 460  : 			if (((LPNMHDR) lParam)->code == LVN_ITEMACTIVATE
; 461  : 				|| ((LPNMHDR) lParam)->code == LVN_ITEMCHANGED && (((LPNMLISTVIEW) lParam)->uNewState & LVIS_FOCUSED))

  00373	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _lParam$GSCopy$1$[ebp]
  00379	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0037c	83 f8 8e	 cmp	 eax, -114		; ffffff8eH
  0037f	74 13		 je	 SHORT $LN20@HotkeysDlg
  00381	83 f8 9b	 cmp	 eax, -101		; ffffff9bH
  00384	0f 85 0f fd ff
	ff		 jne	 $LN40@HotkeysDlg
  0038a	f6 41 14 01	 test	 BYTE PTR [ecx+20], 1
  0038e	0f 84 05 fd ff
	ff		 je	 $LN40@HotkeysDlg
$LN20@HotkeysDlg:

; 462  : 			{
; 463  : 				LVITEM item;
; 464  : 				memset(&item,0,sizeof(item));
; 465  : 				nSelectedHotkeyId = ((LPNMLISTVIEW) lParam)->iItem;

  00394	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 466  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), GetString ("PRESS_A_KEY_TO_ASSIGN"));

  00397	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BHHJNFFK@PRESS_A_KEY_TO_ASSIGN?$AA@
  0039c	a3 00 00 00 00	 mov	 DWORD PTR _nSelectedHotkeyId, eax
  003a1	e8 00 00 00 00	 call	 _GetString
  003a6	83 c4 04	 add	 esp, 4
  003a9	50		 push	 eax
  003aa	68 3f 04 00 00	 push	 1087			; 0000043fH
  003af	57		 push	 edi
  003b0	ff d3		 call	 ebx
  003b2	50		 push	 eax
  003b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 467  : 
; 468  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), (tmpHotkeys[nSelectedHotkeyId].vKeyCode > 0));

  003b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
  003be	33 c9		 xor	 ecx, ecx
  003c0	3b 0c c5 00 00
	00 00		 cmp	 ecx, DWORD PTR _tmpHotkeys[eax*8]
  003c7	1b c0		 sbb	 eax, eax
  003c9	f7 d8		 neg	 eax
  003cb	50		 push	 eax
  003cc	68 3e 04 00 00	 push	 1086			; 0000043eH
  003d1	57		 push	 edi
  003d2	ff d3		 call	 ebx
  003d4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  003da	50		 push	 eax
  003db	ff d6		 call	 esi

; 469  : 
; 470  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  003dd	6a 00		 push	 0
  003df	68 3d 04 00 00	 push	 1085			; 0000043dH
  003e4	57		 push	 edi
  003e5	ff d3		 call	 ebx
  003e7	50		 push	 eax
  003e8	ff d6		 call	 esi

; 471  : 				bKeyScanOn = TRUE;

  003ea	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, 1

; 472  : 				return 1;

  003f4	e9 23 04 00 00	 jmp	 $LN70@HotkeysDlg
$LN19@HotkeysDlg:

; 473  : 			}
; 474  : 		}
; 475  : 
; 476  : 		if (lw == IDC_HOTKEY_ASSIGN)

  003f9	b9 3d 04 00 00	 mov	 ecx, 1085		; 0000043dH
  003fe	66 3b f1	 cmp	 si, cx
  00401	0f 85 7e 01 00
	00		 jne	 $LN21@HotkeysDlg

; 477  : 		{
; 478  : 			BOOL bOwnActiveShortcut = FALSE;
; 479  : 
; 480  : 			if (nSelectedHotkeyId >= 0 && currentVKeyCode != 0)

  00407	85 c0		 test	 eax, eax
  00409	0f 88 68 01 00
	00		 js	 $LN31@HotkeysDlg
  0040f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _currentVKeyCode, 0
  00416	0f 84 5b 01 00
	00		 je	 $LN31@HotkeysDlg

; 481  : 			{
; 482  : 				UINT modifiers = 0; 
; 483  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_CTRL))

  0041c	68 46 04 00 00	 push	 1094			; 00000446H
  00421	57		 push	 edi
  00422	33 f6		 xor	 esi, esi
  00424	e8 00 00 00 00	 call	 _GetCheckBox
  00429	85 c0		 test	 eax, eax
  0042b	b9 02 00 00 00	 mov	 ecx, 2

; 484  : 					modifiers = MOD_CONTROL;
; 485  : 
; 486  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_ALT))

  00430	68 47 04 00 00	 push	 1095			; 00000447H
  00435	57		 push	 edi
  00436	0f 45 f1	 cmovne	 esi, ecx
  00439	e8 00 00 00 00	 call	 _GetCheckBox
  0043e	83 c4 10	 add	 esp, 16			; 00000010H
  00441	85 c0		 test	 eax, eax
  00443	74 03		 je	 SHORT $LN24@HotkeysDlg

; 487  : 					modifiers |= MOD_ALT;

  00445	83 ce 01	 or	 esi, 1
$LN24@HotkeysDlg:

; 488  : 
; 489  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_SHIFT))

  00448	68 45 04 00 00	 push	 1093			; 00000445H
  0044d	57		 push	 edi
  0044e	e8 00 00 00 00	 call	 _GetCheckBox
  00453	83 c4 08	 add	 esp, 8
  00456	85 c0		 test	 eax, eax
  00458	74 03		 je	 SHORT $LN25@HotkeysDlg

; 490  : 					modifiers |= MOD_SHIFT;

  0045a	83 ce 04	 or	 esi, 4
$LN25@HotkeysDlg:

; 491  : 
; 492  : 				if (GetCheckBox (hwndDlg, IDC_HK_MOD_WIN))

  0045d	68 48 04 00 00	 push	 1096			; 00000448H
  00462	57		 push	 edi
  00463	e8 00 00 00 00	 call	 _GetCheckBox
  00468	83 c4 08	 add	 esp, 8
  0046b	85 c0		 test	 eax, eax
  0046d	74 03		 je	 SHORT $LN26@HotkeysDlg

; 493  : 					modifiers |= MOD_WIN;

  0046f	83 ce 08	 or	 esi, 8
$LN26@HotkeysDlg:

; 494  : 
; 495  : 				// Check if it's not already assigned
; 496  : 				if (ShortcutInUse (currentVKeyCode, modifiers, tmpHotkeys))

  00472	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentVKeyCode
  00478	68 00 00 00 00	 push	 OFFSET _tmpHotkeys
  0047d	56		 push	 esi
  0047e	51		 push	 ecx
  0047f	e8 00 00 00 00	 call	 _ShortcutInUse
  00484	83 c4 0c	 add	 esp, 12			; 0000000cH
  00487	85 c0		 test	 eax, eax
  00489	74 12		 je	 SHORT $LN27@HotkeysDlg

; 497  : 				{
; 498  : 					Error ("SHORTCUT_ALREADY_IN_USE");

  0048b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFJLLBFG@SHORTCUT_ALREADY_IN_USE?$AA@
  00490	e8 00 00 00 00	 call	 _Error
  00495	83 c4 04	 add	 esp, 4

; 499  : 					return 1;

  00498	e9 7f 03 00 00	 jmp	 $LN70@HotkeysDlg
$LN27@HotkeysDlg:

; 500  : 				}
; 501  : 
; 502  : 				// Check for reserved system keys
; 503  : 				switch (currentVKeyCode)

  0049d	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentVKeyCode
  004a2	83 f8 70	 cmp	 eax, 112		; 00000070H
  004a5	74 05		 je	 SHORT $LN28@HotkeysDlg
  004a7	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  004aa	75 16		 jne	 SHORT $LN29@HotkeysDlg
$LN28@HotkeysDlg:

; 504  : 				{
; 505  : 				case VK_F1:
; 506  : 				case VK_F12:
; 507  : 					/* F1 is help and F12 is reserved for use by the debugger at all times */
; 508  : 					if (modifiers == 0)

  004ac	85 f6		 test	 esi, esi
  004ae	75 12		 jne	 SHORT $LN29@HotkeysDlg

; 509  : 					{
; 510  : 						Error ("CANNOT_USE_RESERVED_KEY");

  004b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CPPIEFFH@CANNOT_USE_RESERVED_KEY?$AA@
  004b5	e8 00 00 00 00	 call	 _Error
  004ba	83 c4 04	 add	 esp, 4

; 511  : 						return 1;

  004bd	e9 5a 03 00 00	 jmp	 $LN70@HotkeysDlg
$LN29@HotkeysDlg:

; 512  : 					}
; 513  : 					break;
; 514  : 				}
; 515  : 
; 516  : 				bOwnActiveShortcut = ShortcutInUse (currentVKeyCode, modifiers, Hotkeys);

  004c2	68 00 00 00 00	 push	 OFFSET _Hotkeys
  004c7	56		 push	 esi
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 _ShortcutInUse
  004ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 517  : 
; 518  : 				// Test if the shortcut can be assigned without errors
; 519  : 				if (!bOwnActiveShortcut
; 520  : 					&& !RegisterHotKey (hwndDlg, nSelectedHotkeyId, modifiers, currentVKeyCode))

  004d1	85 c0		 test	 eax, eax
  004d3	75 41		 jne	 SHORT $LN69@HotkeysDlg
  004d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentVKeyCode
  004db	51		 push	 ecx
  004dc	56		 push	 esi
  004dd	ff 35 00 00 00
	00		 push	 DWORD PTR _nSelectedHotkeyId
  004e3	57		 push	 edi
  004e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterHotKey@16
  004ea	85 c0		 test	 eax, eax
  004ec	75 0e		 jne	 SHORT $LN63@HotkeysDlg

; 521  : 				{
; 522  : 					handleWin32Error(hwndDlg);

  004ee	57		 push	 edi
  004ef	e8 00 00 00 00	 call	 _handleWin32Error
  004f4	83 c4 04	 add	 esp, 4

; 523  : 					return 1;

  004f7	e9 20 03 00 00	 jmp	 $LN70@HotkeysDlg
$LN63@HotkeysDlg:

; 524  : 				}
; 525  : 				else
; 526  : 				{
; 527  : 					if (!bOwnActiveShortcut && !UnregisterHotKey (hwndDlg, nSelectedHotkeyId))

  004fc	ff 35 00 00 00
	00		 push	 DWORD PTR _nSelectedHotkeyId
  00502	57		 push	 edi
  00503	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterHotKey@8
  00509	85 c0		 test	 eax, eax
  0050b	75 09		 jne	 SHORT $LN69@HotkeysDlg

; 528  : 						handleWin32Error(hwndDlg);

  0050d	57		 push	 edi
  0050e	e8 00 00 00 00	 call	 _handleWin32Error
  00513	83 c4 04	 add	 esp, 4
$LN69@HotkeysDlg:

; 529  : 
; 530  : 					tmpHotkeys[nSelectedHotkeyId].vKeyCode = currentVKeyCode;

  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR _nSelectedHotkeyId
  0051b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _currentVKeyCode

; 531  : 					tmpHotkeys[nSelectedHotkeyId].vKeyModifiers = modifiers;
; 532  : 
; 533  : 					SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  00521	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00526	68 3f 04 00 00	 push	 1087			; 0000043fH
  0052b	89 0c c5 00 00
	00 00		 mov	 DWORD PTR _tmpHotkeys[eax*8], ecx
  00532	57		 push	 edi
  00533	89 34 c5 04 00
	00 00		 mov	 DWORD PTR _tmpHotkeys[eax*8+4], esi
  0053a	ff d3		 call	 ebx
  0053c	50		 push	 eax
  0053d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 534  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  00543	6a 00		 push	 0
  00545	68 3d 04 00 00	 push	 1085			; 0000043dH
  0054a	57		 push	 edi
  0054b	ff d3		 call	 ebx
  0054d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  00553	50		 push	 eax
  00554	ff d6		 call	 esi

; 535  : 					EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);

  00556	6a 00		 push	 0
  00558	68 3e 04 00 00	 push	 1086			; 0000043eH
  0055d	57		 push	 edi
  0055e	ff d3		 call	 ebx
  00560	50		 push	 eax
  00561	ff d6		 call	 esi

; 536  : 					nSelectedHotkeyId = -1;

  00563	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _nSelectedHotkeyId, -1

; 537  : 					bKeyScanOn = FALSE;

  0056d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, 0
$LN31@HotkeysDlg:

; 538  : 				}
; 539  : 			}
; 540  : 			DisplayHotkeyList(hwndDlg);

  00577	57		 push	 edi
  00578	e8 00 00 00 00	 call	 _DisplayHotkeyList
  0057d	83 c4 04	 add	 esp, 4

; 541  : 			return 1;

  00580	e9 97 02 00 00	 jmp	 $LN70@HotkeysDlg
$LN21@HotkeysDlg:

; 542  : 		}
; 543  : 
; 544  : 		if (lw == IDC_HOTKEY_REMOVE)

  00585	b9 3e 04 00 00	 mov	 ecx, 1086		; 0000043eH
  0058a	66 3b f1	 cmp	 si, cx
  0058d	75 74		 jne	 SHORT $LN33@HotkeysDlg

; 545  : 		{
; 546  : 			if (nSelectedHotkeyId >= 0)

  0058f	85 c0		 test	 eax, eax
  00591	0f 88 85 02 00
	00		 js	 $LN70@HotkeysDlg

; 547  : 			{
; 548  : 				tmpHotkeys[nSelectedHotkeyId].vKeyCode = 0;
; 549  : 				tmpHotkeys[nSelectedHotkeyId].vKeyModifiers = 0;
; 550  : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  00597	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  0059c	68 3f 04 00 00	 push	 1087			; 0000043fH
  005a1	c7 04 c5 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _tmpHotkeys[eax*8], 0
  005ac	57		 push	 edi
  005ad	c7 04 c5 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _tmpHotkeys[eax*8+4], 0
  005b8	ff d3		 call	 ebx
  005ba	50		 push	 eax
  005bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 551  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  005c1	6a 00		 push	 0
  005c3	68 3d 04 00 00	 push	 1085			; 0000043dH
  005c8	57		 push	 edi
  005c9	ff d3		 call	 ebx
  005cb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  005d1	50		 push	 eax
  005d2	ff d6		 call	 esi

; 552  : 				EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);

  005d4	6a 00		 push	 0
  005d6	68 3e 04 00 00	 push	 1086			; 0000043eH
  005db	57		 push	 edi
  005dc	ff d3		 call	 ebx
  005de	50		 push	 eax
  005df	ff d6		 call	 esi

; 553  : 				nSelectedHotkeyId = -1;
; 554  : 				bKeyScanOn = FALSE;
; 555  : 				DisplayHotkeyList(hwndDlg);

  005e1	57		 push	 edi
  005e2	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _nSelectedHotkeyId, -1
  005ec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, 0
  005f6	e8 00 00 00 00	 call	 _DisplayHotkeyList
  005fb	83 c4 04	 add	 esp, 4

; 556  : 			}
; 557  : 			return 1;

  005fe	e9 19 02 00 00	 jmp	 $LN70@HotkeysDlg
$LN33@HotkeysDlg:

; 558  : 		}
; 559  : 
; 560  : 		if (lw == IDC_RESET_HOTKEYS)

  00603	b8 42 04 00 00	 mov	 eax, 1090		; 00000442H
  00608	66 3b f0	 cmp	 si, ax
  0060b	0f 85 0a 01 00
	00		 jne	 $LN35@HotkeysDlg

; 561  : 		{
; 562  : 			int i;
; 563  : 
; 564  : 			for (i = 0; i < NBR_HOTKEYS; i++)
; 565  : 			{
; 566  : 				tmpHotkeys[i].vKeyCode = 0;
; 567  : 				tmpHotkeys[i].vKeyModifiers = 0;
; 568  : 			}
; 569  : 			SetWindowTextW (GetDlgItem (hwndDlg, IDC_HOTKEY_KEY), L"");

  00611	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
  00616	68 3f 04 00 00	 push	 1087			; 0000043fH
  0061b	57		 push	 edi
  0061c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys, 0
  00626	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+4, 0
  00630	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+8, 0
  0063a	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+12, 0
  00644	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+16, 0
  0064e	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+20, 0
  00658	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+24, 0
  00662	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+28, 0
  0066c	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+32, 0
  00676	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+36, 0
  00680	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+40, 0
  0068a	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+44, 0
  00694	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+48, 0
  0069e	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+52, 0
  006a8	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+56, 0
  006b2	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+60, 0
  006bc	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+64, 0
  006c6	c7 05 44 00 00
	00 00 00 00 00	 mov	 DWORD PTR _tmpHotkeys+68, 0
  006d0	ff d3		 call	 ebx
  006d2	50		 push	 eax
  006d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 570  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_ASSIGN), FALSE);

  006d9	6a 00		 push	 0
  006db	68 3d 04 00 00	 push	 1085			; 0000043dH
  006e0	57		 push	 edi
  006e1	ff d3		 call	 ebx
  006e3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__EnableWindow@8
  006e9	50		 push	 eax
  006ea	ff d6		 call	 esi

; 571  : 			EnableWindow (GetDlgItem (hwndDlg, IDC_HOTKEY_REMOVE), FALSE);

  006ec	6a 00		 push	 0
  006ee	68 3e 04 00 00	 push	 1086			; 0000043eH
  006f3	57		 push	 edi
  006f4	ff d3		 call	 ebx
  006f6	50		 push	 eax
  006f7	ff d6		 call	 esi

; 572  : 			nSelectedHotkeyId = -1;
; 573  : 			bKeyScanOn = FALSE;
; 574  : 			DisplayHotkeyList(hwndDlg);

  006f9	57		 push	 edi
  006fa	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _nSelectedHotkeyId, -1
  00704	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?bKeyScanOn@?1??HotkeysDlgProc@@9@9, 0
  0070e	e8 00 00 00 00	 call	 _DisplayHotkeyList
  00713	83 c4 04	 add	 esp, 4

; 575  : 			return 1;

  00716	e9 01 01 00 00	 jmp	 $LN70@HotkeysDlg
$LN35@HotkeysDlg:

; 576  : 		}
; 577  : 
; 578  : 		if (lw == IDC_HK_DISMOUNT_PLAY_SOUND)

  0071b	b8 3c 04 00 00	 mov	 eax, 1084		; 0000043cH
  00720	66 3b f0	 cmp	 si, ax
  00723	75 14		 jne	 SHORT $LN36@HotkeysDlg

; 579  : 		{
; 580  : 			bTPlaySoundOnSuccessfulHkDismount = GetCheckBox (hwndDlg, IDC_HK_DISMOUNT_PLAY_SOUND);

  00725	50		 push	 eax
  00726	57		 push	 edi
  00727	e8 00 00 00 00	 call	 _GetCheckBox
  0072c	83 c4 08	 add	 esp, 8
  0072f	a3 00 00 00 00	 mov	 DWORD PTR ?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax

; 581  : 		}
; 582  : 
; 583  : 		if (lw == IDC_HK_DISMOUNT_BALLOON_TOOLTIP)

  00734	e9 60 f9 ff ff	 jmp	 $LN40@HotkeysDlg
$LN36@HotkeysDlg:
  00739	b8 3a 04 00 00	 mov	 eax, 1082		; 0000043aH
  0073e	66 3b f0	 cmp	 si, ax
  00741	75 14		 jne	 SHORT $LN37@HotkeysDlg

; 584  : 		{
; 585  : 			bTDisplayBalloonOnSuccessfulHkDismount = GetCheckBox (hwndDlg, IDC_HK_DISMOUNT_BALLOON_TOOLTIP);

  00743	50		 push	 eax
  00744	57		 push	 edi
  00745	e8 00 00 00 00	 call	 _GetCheckBox
  0074a	83 c4 08	 add	 esp, 8
  0074d	a3 00 00 00 00	 mov	 DWORD PTR ?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9, eax

; 586  : 		}
; 587  : 
; 588  : 		if (lw == IDCANCEL || lw == IDCLOSE)

  00752	e9 42 f9 ff ff	 jmp	 $LN40@HotkeysDlg
$LN37@HotkeysDlg:
  00757	66 83 fe 02	 cmp	 si, 2
  0075b	0f 84 a6 00 00
	00		 je	 $LN39@HotkeysDlg
  00761	66 83 fe 08	 cmp	 si, 8
  00765	0f 84 9c 00 00
	00		 je	 $LN39@HotkeysDlg

; 592  : 			return 1;
; 593  : 		}
; 594  : 
; 595  : 		if (lw == IDOK)

  0076b	66 83 fe 01	 cmp	 si, 1
  0076f	0f 85 24 f9 ff
	ff		 jne	 $LN40@HotkeysDlg

; 596  : 		{
; 597  : 			UnregisterAllHotkeys (hwndMainDlg, Hotkeys);

  00775	8b b5 f0 fd ff
	ff		 mov	 esi, DWORD PTR _hwndMainDlg$1$[ebp]
  0077b	68 00 00 00 00	 push	 OFFSET _Hotkeys
  00780	56		 push	 esi
  00781	e8 00 00 00 00	 call	 _UnregisterAllHotkeys

; 598  : 			memcpy (Hotkeys, tmpHotkeys, sizeof(Hotkeys));

  00786	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR _tmpHotkeys

; 599  : 			RegisterAllHotkeys (hwndMainDlg, Hotkeys);

  0078d	68 00 00 00 00	 push	 OFFSET _Hotkeys
  00792	56		 push	 esi
  00793	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR _Hotkeys, xmm0
  0079a	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR _tmpHotkeys+16
  007a1	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR _Hotkeys+16, xmm0
  007a8	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR _tmpHotkeys+32
  007af	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR _Hotkeys+32, xmm0
  007b6	0f 10 05 30 00
	00 00		 movups	 xmm0, XMMWORD PTR _tmpHotkeys+48
  007bd	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR _Hotkeys+48, xmm0
  007c4	f3 0f 7e 05 40
	00 00 00	 movq	 xmm0, QWORD PTR _tmpHotkeys+64
  007cc	66 0f d6 05 40
	00 00 00	 movq	 QWORD PTR _Hotkeys+64, xmm0
  007d4	e8 00 00 00 00	 call	 _RegisterAllHotkeys
  007d9	83 c4 10	 add	 esp, 16			; 00000010H

; 600  : 			KillTimer (hwndDlg, 0xfe);

  007dc	68 fe 00 00 00	 push	 254			; 000000feH
  007e1	57		 push	 edi
  007e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8

; 601  : 			bPlaySoundOnSuccessfulHkDismount = bTPlaySoundOnSuccessfulHkDismount;

  007e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bTPlaySoundOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9
  007ed	a3 00 00 00 00	 mov	 DWORD PTR _bPlaySoundOnSuccessfulHkDismount, eax

; 602  : 			bDisplayBalloonOnSuccessfulHkDismount = bTDisplayBalloonOnSuccessfulHkDismount;

  007f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bTDisplayBalloonOnSuccessfulHkDismount@?1??HotkeysDlgProc@@9@9

; 603  : 
; 604  : 			SaveSettings (hwndDlg);

  007f7	57		 push	 edi
  007f8	a3 00 00 00 00	 mov	 DWORD PTR _bDisplayBalloonOnSuccessfulHkDismount, eax
  007fd	e8 00 00 00 00	 call	 _SaveSettings
  00802	83 c4 04	 add	 esp, 4

; 605  : 			EndDialog (hwndDlg, IDCANCEL);
; 606  : 			return 1;

  00805	eb 0c		 jmp	 SHORT $LN71@HotkeysDlg
$LN39@HotkeysDlg:

; 589  : 		{
; 590  : 			KillTimer (hwndDlg, 0xfe);

  00807	68 fe 00 00 00	 push	 254			; 000000feH
  0080c	57		 push	 edi
  0080d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
$LN71@HotkeysDlg:

; 591  : 			EndDialog (hwndDlg, IDCANCEL);

  00813	6a 02		 push	 2
  00815	57		 push	 edi
  00816	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN70@HotkeysDlg:

; 609  : 
; 610  : 	case WM_CLOSE:
; 611  : 
; 612  : 		KillTimer (hwndDlg, 0xfe);
; 613  : 		EndDialog (hwndDlg, IDCANCEL);
; 614  : 		return 1;
; 615  : 	}
; 616  : 	return 0;
; 617  : }

  0081c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0081f	b8 01 00 00 00	 mov	 eax, 1
  00824	5f		 pop	 edi
  00825	5e		 pop	 esi
  00826	33 cd		 xor	 ecx, ebp
  00828	5b		 pop	 ebx
  00829	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0082e	8b e5		 mov	 esp, ebp
  00830	5d		 pop	 ebp
  00831	c2 10 00	 ret	 16			; 00000010H
_HotkeysDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
