; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Common\Registry.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	_ReadLocalMachineRegistryDword
PUBLIC	_ReadLocalMachineRegistryMultiString
PUBLIC	_ReadLocalMachineRegistryString
PUBLIC	_ReadLocalMachineRegistryStringNonReflected
PUBLIC	_ReadRegistryInt
PUBLIC	_ReadRegistryString
PUBLIC	_ReadRegistryBytes
PUBLIC	_WriteRegistryInt
PUBLIC	_WriteLocalMachineRegistryDword
PUBLIC	_WriteLocalMachineRegistryMultiString
PUBLIC	_WriteLocalMachineRegistryString
PUBLIC	_WriteRegistryString
PUBLIC	_WriteRegistryBytes
PUBLIC	_DeleteLocalMachineRegistryKey
PUBLIC	_DeleteRegistryValue
PUBLIC	_GetStartupRegKeyName
PUBLIC	??_C@_0N@PGJGCAIL@tVersion?2Run?$AA@		; `string'
PUBLIC	??_C@_0CC@HPOBEDNL@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
EXTRN	_strncpy:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegCreateKeyExA@36:PROC
EXTRN	__imp__RegDeleteKeyA@8:PROC
EXTRN	__imp__RegDeleteValueA@8:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__RegSetValueExA@24:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HPOBEDNL@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0CC@HPOBEDNL@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\Curren', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGJGCAIL@tVersion?2Run?$AA@
CONST	SEGMENT
??_C@_0N@PGJGCAIL@tVersion?2Run?$AA@ DB 'tVersion\Run', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _GetStartupRegKeyName
_TEXT	SEGMENT
_regk$ = 8						; size = 4
_GetStartupRegKeyName PROC				; COMDAT

; 475  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 476  : 	// The string is split in order to prevent some antivirus packages from falsely reporting  
; 477  : 	// GostCrypt.exe to contain a possible Trojan horse because of this string (heuristic scan).
; 478  : 	sprintf (regk, "%s%s", "Software\\Microsoft\\Windows\\Curren", "tVersion\\Run");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PGJGCAIL@tVersion?2Run?$AA@
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HPOBEDNL@Software?2Microsoft?2Windows?2Curre@
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
  00012	ff 75 08	 push	 DWORD PTR _regk$[ebp]
  00015	e8 00 00 00 00	 call	 _sprintf
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 479  : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
_GetStartupRegKeyName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _DeleteRegistryValue
_TEXT	SEGMENT
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_DeleteRegistryValue PROC				; COMDAT

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 456  : 	HKEY hkey = 0;
; 457  : 
; 458  : 	if (RegOpenKeyEx (HKEY_CURRENT_USER, subKey, 0, KEY_WRITE, &hkey) != ERROR_SUCCESS)

  00004	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00007	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  0000e	50		 push	 eax
  0000f	68 06 00 02 00	 push	 131078			; 00020006H
  00014	6a 00		 push	 0
  00016	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  00019	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00024	85 c0		 test	 eax, eax
  00026	75 15		 jne	 SHORT $LN1@DeleteRegi

; 459  : 		return;
; 460  : 
; 461  : 	RegDeleteValue (hkey, name);

  00028	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  0002b	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegDeleteValueA@8

; 462  : 	RegCloseKey (hkey);

  00034	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN1@DeleteRegi:

; 463  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_DeleteRegistryValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _DeleteLocalMachineRegistryKey
_TEXT	SEGMENT
_hkey$ = -4						; size = 4
_parentKey$ = 8						; size = 4
_subKeyToDelete$ = 12					; size = 4
_DeleteLocalMachineRegistryKey PROC			; COMDAT

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 425  : 	LONG status;
; 426  : 	HKEY hkey = 0;
; 427  : 
; 428  : 	if ((status = RegOpenKeyEx (HKEY_LOCAL_MACHINE, parentKey, 0, KEY_WRITE, &hkey)) != ERROR_SUCCESS)

  00004	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00007	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  0000e	50		 push	 eax
  0000f	68 06 00 02 00	 push	 131078			; 00020006H
  00014	6a 00		 push	 0
  00016	ff 75 08	 push	 DWORD PTR _parentKey$[ebp]
  00019	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00024	85 c0		 test	 eax, eax
  00026	74 0d		 je	 SHORT $LN2@DeleteLoca

; 429  : 	{
; 430  : 		SetLastError (status);

  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 431  : 		return FALSE;

  0002f	33 c0		 xor	 eax, eax

; 443  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN2@DeleteLoca:
  00035	56		 push	 esi

; 432  : 	}
; 433  : 
; 434  : 	if ((status = RegDeleteKey (hkey, subKeyToDelete)) != ERROR_SUCCESS)

  00036	ff 75 0c	 push	 DWORD PTR _subKeyToDelete$[ebp]
  00039	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegDeleteKeyA@8

; 435  : 	{
; 436  : 		RegCloseKey (hkey);

  00042	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00045	8b f0		 mov	 esi, eax
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  0004d	85 f6		 test	 esi, esi
  0004f	74 0e		 je	 SHORT $LN3@DeleteLoca

; 437  : 		SetLastError (status);

  00051	56		 push	 esi
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 438  : 		return FALSE;

  00058	33 c0		 xor	 eax, eax
  0005a	5e		 pop	 esi

; 443  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN3@DeleteLoca:

; 439  : 	}
; 440  : 
; 441  : 	RegCloseKey (hkey);
; 442  : 	return TRUE;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	5e		 pop	 esi

; 443  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_DeleteLocalMachineRegistryKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _WriteRegistryBytes
_TEXT	SEGMENT
_disp$ = -8						; size = 4
_hkey$ = -4						; size = 4
_path$ = 8						; size = 4
_name$ = 12						; size = 4
_str$ = 16						; size = 4
_size$ = 20						; size = 4
_WriteRegistryBytes PROC				; COMDAT

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 399  : 	HKEY hkey = 0;
; 400  : 	DWORD disp;
; 401  : 	BOOL res;
; 402  : 
; 403  : 	if (RegCreateKeyEx (HKEY_CURRENT_USER, path,
; 404  : 		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hkey, &disp) != ERROR_SUCCESS)

  00006	8d 45 f8	 lea	 eax, DWORD PTR _disp$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	68 06 00 02 00	 push	 131078			; 00020006H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00025	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyExA@36
  00030	85 c0		 test	 eax, eax
  00032	74 06		 je	 SHORT $LN2@WriteRegis

; 405  : 		return FALSE;

  00034	33 c0		 xor	 eax, eax

; 410  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN2@WriteRegis:
  0003a	56		 push	 esi

; 406  : 
; 407  : 	res = RegSetValueEx (hkey, name, 0, REG_BINARY, (BYTE *) str, size);

  0003b	ff 75 14	 push	 DWORD PTR _size$[ebp]
  0003e	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00041	6a 03		 push	 3
  00043	6a 00		 push	 0
  00045	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00048	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 408  : 	RegCloseKey (hkey);

  00051	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00054	8b f0		 mov	 esi, eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 409  : 	return res == ERROR_SUCCESS;

  0005c	33 c0		 xor	 eax, eax
  0005e	85 f6		 test	 esi, esi
  00060	5e		 pop	 esi
  00061	0f 94 c0	 sete	 al

; 410  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_WriteRegistryBytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _WriteRegistryString
_TEXT	SEGMENT
_disp$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_str$ = 16						; size = 4
_WriteRegistryString PROC				; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 374  : 	HKEY hkey = 0;
; 375  : 	DWORD disp;
; 376  : 
; 377  : 	if (RegCreateKeyEx (HKEY_CURRENT_USER, subKey,
; 378  : 		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hkey, &disp) != ERROR_SUCCESS)

  00006	8d 45 f8	 lea	 eax, DWORD PTR _disp$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	68 06 00 02 00	 push	 131078			; 00020006H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  00025	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyExA@36
  00030	85 c0		 test	 eax, eax
  00032	75 34		 jne	 SHORT $LN1@WriteRegis

; 379  : 		return;
; 380  : 
; 381  : 	RegSetValueEx (hkey, name, 0, REG_SZ, (BYTE *) str, strlen (str) + 1);

  00034	8b 55 10	 mov	 edx, DWORD PTR _str$[ebp]
  00037	8b ca		 mov	 ecx, edx
  00039	56		 push	 esi
  0003a	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0003d	0f 1f 00	 npad	 3
$LL4@WriteRegis:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL4@WriteRegis
  00047	2b ce		 sub	 ecx, esi
  00049	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0004c	50		 push	 eax
  0004d	52		 push	 edx
  0004e	6a 01		 push	 1
  00050	6a 00		 push	 0
  00052	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00055	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 382  : 	RegCloseKey (hkey);

  0005e	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  00067	5e		 pop	 esi
$LN1@WriteRegis:

; 383  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_WriteRegistryString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _WriteLocalMachineRegistryString
_TEXT	SEGMENT
_disp$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_str$ = 16						; size = 4
_expandable$ = 20					; size = 4
_WriteLocalMachineRegistryString PROC			; COMDAT

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 340  : 	HKEY hkey = 0;
; 341  : 	DWORD disp;
; 342  : 	LONG status;
; 343  : 
; 344  : 	if ((status = RegCreateKeyEx (HKEY_LOCAL_MACHINE, subKey,
; 345  : 		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hkey, &disp)) != ERROR_SUCCESS)

  00006	8d 45 f8	 lea	 eax, DWORD PTR _disp$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	68 06 00 02 00	 push	 131078			; 00020006H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  00025	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyExA@36
  00030	85 c0		 test	 eax, eax
  00032	74 0d		 je	 SHORT $LN2@WriteLocal

; 346  : 	{
; 347  : 		SetLastError (status);

  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 348  : 		return FALSE;

  0003b	33 c0		 xor	 eax, eax

; 360  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN2@WriteLocal:

; 349  : 	}
; 350  : 
; 351  : 	if ((status = RegSetValueEx (hkey, name, 0, expandable ? REG_EXPAND_SZ : REG_SZ, (BYTE *) str, strlen (str) + 1)) != ERROR_SUCCESS)

  00041	8b 55 10	 mov	 edx, DWORD PTR _str$[ebp]
  00044	8b ca		 mov	 ecx, edx
  00046	56		 push	 esi
  00047	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL5@WriteLocal:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL5@WriteLocal
  00057	2b ce		 sub	 ecx, esi
  00059	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0005c	50		 push	 eax
  0005d	33 c0		 xor	 eax, eax
  0005f	39 45 14	 cmp	 DWORD PTR _expandable$[ebp], eax
  00062	52		 push	 edx
  00063	0f 95 c0	 setne	 al
  00066	40		 inc	 eax
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  0006d	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 352  : 	{
; 353  : 		RegCloseKey (hkey);

  00076	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00079	8b f0		 mov	 esi, eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  00081	85 f6		 test	 esi, esi
  00083	74 0e		 je	 SHORT $LN3@WriteLocal

; 354  : 		SetLastError (status);

  00085	56		 push	 esi
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 355  : 		return FALSE;

  0008c	33 c0		 xor	 eax, eax
  0008e	5e		 pop	 esi

; 360  : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN3@WriteLocal:

; 356  : 	}
; 357  : 
; 358  : 	RegCloseKey (hkey);
; 359  : 	return TRUE;

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	5e		 pop	 esi

; 360  : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_WriteLocalMachineRegistryString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _WriteLocalMachineRegistryMultiString
_TEXT	SEGMENT
_disp$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_multiString$ = 16					; size = 4
_size$ = 20						; size = 4
_WriteLocalMachineRegistryMultiString PROC		; COMDAT

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 303  : 	HKEY hkey = 0;
; 304  : 	DWORD disp;
; 305  : 	LONG status;
; 306  : 
; 307  : 	if ((status = RegCreateKeyEx (HKEY_LOCAL_MACHINE, subKey,
; 308  : 		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hkey, &disp)) != ERROR_SUCCESS)

  00006	8d 45 f8	 lea	 eax, DWORD PTR _disp$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	68 06 00 02 00	 push	 131078			; 00020006H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  00025	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyExA@36
  00030	85 c0		 test	 eax, eax
  00032	74 0d		 je	 SHORT $LN2@WriteLocal

; 309  : 	{
; 310  : 		SetLastError (status);

  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 311  : 		return FALSE;

  0003b	33 c0		 xor	 eax, eax

; 323  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN2@WriteLocal:
  00041	56		 push	 esi

; 312  : 	}
; 313  : 
; 314  : 	if ((status = RegSetValueEx (hkey, name, 0, REG_MULTI_SZ, (BYTE *) multiString, size)) != ERROR_SUCCESS)

  00042	ff 75 14	 push	 DWORD PTR _size$[ebp]
  00045	ff 75 10	 push	 DWORD PTR _multiString$[ebp]
  00048	6a 07		 push	 7
  0004a	6a 00		 push	 0
  0004c	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  0004f	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 315  : 	{
; 316  : 		RegCloseKey (hkey);

  00058	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0005b	8b f0		 mov	 esi, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  00063	85 f6		 test	 esi, esi
  00065	74 0e		 je	 SHORT $LN3@WriteLocal

; 317  : 		SetLastError (status);

  00067	56		 push	 esi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 318  : 		return FALSE;

  0006e	33 c0		 xor	 eax, eax
  00070	5e		 pop	 esi

; 323  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN3@WriteLocal:

; 319  : 	}
; 320  : 
; 321  : 	RegCloseKey (hkey);
; 322  : 	return TRUE;

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	5e		 pop	 esi

; 323  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_WriteLocalMachineRegistryMultiString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _WriteLocalMachineRegistryDword
_TEXT	SEGMENT
_disp$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_WriteLocalMachineRegistryDword PROC			; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 266  : 	HKEY hkey = 0;
; 267  : 	DWORD disp;
; 268  : 	LONG status;
; 269  : 
; 270  : 	if ((status = RegCreateKeyEx (HKEY_LOCAL_MACHINE, subKey,
; 271  : 		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hkey, &disp)) != ERROR_SUCCESS)

  00006	8d 45 f8	 lea	 eax, DWORD PTR _disp$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	68 06 00 02 00	 push	 131078			; 00020006H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  00025	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyExA@36
  00030	85 c0		 test	 eax, eax
  00032	74 0d		 je	 SHORT $LN2@WriteLocal

; 272  : 	{
; 273  : 		SetLastError (status);

  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 274  : 		return FALSE;

  0003b	33 c0		 xor	 eax, eax

; 286  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN2@WriteLocal:
  00041	56		 push	 esi

; 275  : 	}
; 276  : 
; 277  : 	if ((status = RegSetValueEx (hkey, name, 0, REG_DWORD, (BYTE *) &value, sizeof value)) != ERROR_SUCCESS)

  00042	6a 04		 push	 4
  00044	8d 45 10	 lea	 eax, DWORD PTR _value$[ebp]
  00047	50		 push	 eax
  00048	6a 04		 push	 4
  0004a	6a 00		 push	 0
  0004c	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  0004f	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 278  : 	{
; 279  : 		RegCloseKey (hkey);

  00058	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0005b	8b f0		 mov	 esi, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  00063	85 f6		 test	 esi, esi
  00065	74 0e		 je	 SHORT $LN3@WriteLocal

; 280  : 		SetLastError (status);

  00067	56		 push	 esi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 281  : 		return FALSE;

  0006e	33 c0		 xor	 eax, eax
  00070	5e		 pop	 esi

; 286  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN3@WriteLocal:

; 282  : 	}
; 283  : 
; 284  : 	RegCloseKey (hkey);
; 285  : 	return TRUE;

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	5e		 pop	 esi

; 286  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_WriteLocalMachineRegistryDword ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _WriteRegistryInt
_TEXT	SEGMENT
_disp$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_WriteRegistryInt PROC					; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 241  : 	HKEY hkey = 0;
; 242  : 	DWORD disp;
; 243  : 
; 244  : 	if (RegCreateKeyEx (HKEY_CURRENT_USER, subKey,
; 245  : 		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hkey, &disp) != ERROR_SUCCESS)

  00006	8d 45 f8	 lea	 eax, DWORD PTR _disp$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	68 06 00 02 00	 push	 131078			; 00020006H
  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  00025	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyExA@36
  00030	85 c0		 test	 eax, eax
  00032	75 1f		 jne	 SHORT $LN1@WriteRegis

; 246  : 		return;
; 247  : 
; 248  : 	RegSetValueEx (hkey, name, 0, REG_DWORD, (BYTE *) &value, sizeof value);

  00034	6a 04		 push	 4
  00036	8d 45 10	 lea	 eax, DWORD PTR _value$[ebp]
  00039	50		 push	 eax
  0003a	6a 04		 push	 4
  0003c	6a 00		 push	 0
  0003e	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00041	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 249  : 	RegCloseKey (hkey);

  0004a	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN1@WriteRegis:

; 250  : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_WriteRegistryInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadRegistryBytes
_TEXT	SEGMENT
_hkey$ = -4						; size = 4
_path$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_size$ = 20						; size = 4
_maxLen$ = 20						; size = 4
_ReadRegistryBytes PROC					; COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 216  : 	HKEY hkey = 0;
; 217  : 	DWORD size = maxLen;

  00004	8b 45 14	 mov	 eax, DWORD PTR _maxLen$[ebp]
  00007	89 45 14	 mov	 DWORD PTR _size$[ebp], eax

; 218  : 	BOOL success = FALSE;
; 219  : 
; 220  : 	if (RegOpenKeyEx (HKEY_CURRENT_USER, path, 0, KEY_READ, &hkey) != ERROR_SUCCESS)

  0000a	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  0000d	50		 push	 eax
  0000e	68 19 00 02 00	 push	 131097			; 00020019H
  00013	6a 00		 push	 0
  00015	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00018	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  0001f	68 01 00 00 80	 push	 -2147483647		; 80000001H
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  0002a	85 c0		 test	 eax, eax
  0002c	74 06		 je	 SHORT $LN2@ReadRegist

; 221  : 		return 0;

  0002e	33 c0		 xor	 eax, eax

; 227  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN2@ReadRegist:
  00034	56		 push	 esi

; 222  : 
; 223  : 	success = (RegQueryValueEx (hkey, name, 0,	0, (LPBYTE) value,	&size) == ERROR_SUCCESS);

  00035	8d 45 14	 lea	 eax, DWORD PTR _size$[ebp]
  00038	50		 push	 eax
  00039	ff 75 10	 push	 DWORD PTR _value$[ebp]
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00043	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24

; 224  : 	RegCloseKey (hkey);

  0004c	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0004f	f7 d8		 neg	 eax
  00051	1b f6		 sbb	 esi, esi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 225  : 
; 226  : 	return success ? size : 0;

  00059	33 c0		 xor	 eax, eax
  0005b	83 c6 01	 add	 esi, 1
  0005e	5e		 pop	 esi
  0005f	0f 45 45 14	 cmovne	 eax, DWORD PTR _size$[ebp]

; 227  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_ReadRegistryBytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadRegistryString
_TEXT	SEGMENT
_name$GSCopy$1$ = -1056					; size = 4
_size$ = -1052						; size = 4
_hkey$ = -1048						; size = 4
_value$ = -1044						; size = 1040
__$ArrayPad$ = -4					; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
_str$ = 20						; size = 4
_maxLen$ = 24						; size = 4
_ReadRegistryString PROC				; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 04 00
	00		 sub	 esp, 1056		; 00000420H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR _defaultValue$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  00019	53		 push	 ebx

; 186  : 	HKEY hkey = 0;
; 187  : 	char value[MAX_PATH*4];
; 188  : 	DWORD size = sizeof (value);
; 189  : 
; 190  : 	strncpy (str, defaultValue, maxLen-1);

  0001a	8b 5d 18	 mov	 ebx, DWORD PTR _maxLen$[ebp]
  0001d	56		 push	 esi
  0001e	8b 75 08	 mov	 esi, DWORD PTR _subKey$[ebp]
  00021	4b		 dec	 ebx
  00022	57		 push	 edi
  00023	8b 7d 14	 mov	 edi, DWORD PTR _str$[ebp]
  00026	53		 push	 ebx
  00027	51		 push	 ecx
  00028	57		 push	 edi
  00029	89 85 e0 fb ff
	ff		 mov	 DWORD PTR _name$GSCopy$1$[ebp], eax
  0002f	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _hkey$[ebp], 0
  00039	c7 85 e4 fb ff
	ff 10 04 00 00	 mov	 DWORD PTR _size$[ebp], 1040 ; 00000410H
  00043	e8 00 00 00 00	 call	 _strncpy

; 191  : 
; 192  : 	ZeroMemory (value, sizeof value);

  00048	68 10 04 00 00	 push	 1040			; 00000410H
  0004d	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _value$[ebp]
  00053	6a 00		 push	 0
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _memset
  0005b	83 c4 18	 add	 esp, 24			; 00000018H

; 193  : 	if (RegOpenKeyEx (HKEY_CURRENT_USER, subKey,
; 194  : 		0, KEY_READ, &hkey) == ERROR_SUCCESS)

  0005e	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _hkey$[ebp]
  00064	50		 push	 eax
  00065	68 19 00 02 00	 push	 131097			; 00020019H
  0006a	6a 00		 push	 0
  0006c	56		 push	 esi
  0006d	68 01 00 00 80	 push	 -2147483647		; 80000001H
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00078	85 c0		 test	 eax, eax
  0007a	75 39		 jne	 SHORT $LN3@ReadRegist

; 195  : 		if (RegQueryValueEx (hkey, name, 0,	0, (LPBYTE) &value,	&size) == ERROR_SUCCESS)

  0007c	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  00082	50		 push	 eax
  00083	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _value$[ebp]
  00089	50		 push	 eax
  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	ff b5 e0 fb ff
	ff		 push	 DWORD PTR _name$GSCopy$1$[ebp]
  00094	ff b5 e8 fb ff
	ff		 push	 DWORD PTR _hkey$[ebp]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  000a0	85 c0		 test	 eax, eax
  000a2	75 11		 jne	 SHORT $LN3@ReadRegist

; 196  : 			strncpy (str, value, maxLen-1);

  000a4	53		 push	 ebx
  000a5	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _value$[ebp]
  000ab	50		 push	 eax
  000ac	57		 push	 edi
  000ad	e8 00 00 00 00	 call	 _strncpy
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@ReadRegist:

; 197  : 
; 198  : 	RegCloseKey (hkey);

  000b5	ff b5 e8 fb ff
	ff		 push	 DWORD PTR _hkey$[ebp]
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 199  : 	return str;
; 200  : }

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c4	8b c7		 mov	 eax, edi
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	33 cd		 xor	 ecx, ebp
  000ca	5b		 pop	 ebx
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_ReadRegistryString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadRegistryInt
_TEXT	SEGMENT
_size$ = -12						; size = 4
_value$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
_ReadRegistryInt PROC					; COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 158  : 	HKEY hkey = 0;
; 159  : 	DWORD value, size = sizeof (DWORD);
; 160  : 
; 161  : 	if (RegOpenKeyEx (HKEY_CURRENT_USER, subKey,
; 162  : 		0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00006	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	68 19 00 02 00	 push	 131097			; 00020019H
  00016	6a 00		 push	 0
  00018	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  0001b	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _size$[ebp], 4
  00022	68 01 00 00 80	 push	 -2147483647		; 80000001H
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  0002d	85 c0		 test	 eax, eax
  0002f	74 07		 je	 SHORT $LN2@ReadRegist

; 163  : 		return defaultValue;

  00031	8b 45 10	 mov	 eax, DWORD PTR _defaultValue$[ebp]

; 170  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN2@ReadRegist:

; 164  : 
; 165  : 	if (RegQueryValueEx (hkey, name, 0,	0, (LPBYTE) &value, &size) != ERROR_SUCCESS)

  00038	8d 45 f4	 lea	 eax, DWORD PTR _size$[ebp]
  0003b	50		 push	 eax
  0003c	8d 45 f8	 lea	 eax, DWORD PTR _value$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	6a 00		 push	 0
  00044	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00047	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _value$[ebp]
  00053	85 c0		 test	 eax, eax

; 166  : 		value = defaultValue;
; 167  : 
; 168  : 	RegCloseKey (hkey);

  00055	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00058	0f 45 4d 10	 cmovne	 ecx, DWORD PTR _defaultValue$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR _value$[ebp], ecx
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 169  : 	return value;

  00065	8b 45 f8	 mov	 eax, DWORD PTR _value$[ebp]

; 170  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_ReadRegistryInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadLocalMachineRegistryStringNonReflected
_TEXT	SEGMENT
_type$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_str$ = 16						; size = 4
_size$ = 20						; size = 4
_ReadLocalMachineRegistryStringNonReflected PROC	; COMDAT

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 130  : 	HKEY hkey = 0;
; 131  : 	DWORD type;
; 132  : 
; 133  : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ | KEY_WOW64_64KEY, &hkey) != ERROR_SUCCESS)

  00006	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	68 19 01 02 00	 push	 131353			; 00020119H
  00016	6a 00		 push	 0
  00018	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  0001b	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00026	85 c0		 test	 eax, eax
  00028	75 25		 jne	 SHORT $LN5@ReadLocalM

; 134  : 		return FALSE;
; 135  : 
; 136  : 	if (RegQueryValueEx (hkey, name, NULL, &type, (BYTE *) str, size) != ERROR_SUCCESS)

  0002a	ff 75 14	 push	 DWORD PTR _size$[ebp]
  0002d	8d 45 f8	 lea	 eax, DWORD PTR _type$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00033	50		 push	 eax
  00034	6a 00		 push	 0
  00036	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00039	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24

; 137  : 	{
; 138  : 		RegCloseKey (hkey);

  00042	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00045	85 c0		 test	 eax, eax
  00047	74 0c		 je	 SHORT $LN3@ReadLocalM
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN5@ReadLocalM:

; 139  : 		return FALSE;

  0004f	33 c0		 xor	 eax, eax

; 144  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@ReadLocalM:

; 140  : 	}
; 141  : 
; 142  : 	RegCloseKey (hkey);

  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 143  : 	return type == REG_SZ;

  0005b	33 c0		 xor	 eax, eax
  0005d	83 7d f8 01	 cmp	 DWORD PTR _type$[ebp], 1
  00061	0f 94 c0	 sete	 al

; 144  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_ReadLocalMachineRegistryStringNonReflected ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadLocalMachineRegistryString
_TEXT	SEGMENT
_type$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_str$ = 16						; size = 4
_size$ = 20						; size = 4
_ReadLocalMachineRegistryString PROC			; COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 99   : 	HKEY hkey = 0;
; 100  : 	DWORD type;
; 101  : 
; 102  : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00006	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	68 19 00 02 00	 push	 131097			; 00020019H
  00016	6a 00		 push	 0
  00018	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  0001b	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00026	85 c0		 test	 eax, eax
  00028	75 25		 jne	 SHORT $LN5@ReadLocalM

; 103  : 		return FALSE;
; 104  : 
; 105  : 	if (RegQueryValueEx (hkey, name, NULL, &type, (BYTE *) str, size) != ERROR_SUCCESS)

  0002a	ff 75 14	 push	 DWORD PTR _size$[ebp]
  0002d	8d 45 f8	 lea	 eax, DWORD PTR _type$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00033	50		 push	 eax
  00034	6a 00		 push	 0
  00036	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00039	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24

; 106  : 	{
; 107  : 		RegCloseKey (hkey);

  00042	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00045	85 c0		 test	 eax, eax
  00047	74 0c		 je	 SHORT $LN3@ReadLocalM
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN5@ReadLocalM:

; 108  : 		return FALSE;

  0004f	33 c0		 xor	 eax, eax

; 113  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@ReadLocalM:

; 109  : 	}
; 110  : 
; 111  : 	RegCloseKey (hkey);

  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 112  : 	return type == REG_SZ;

  0005b	33 c0		 xor	 eax, eax
  0005d	83 7d f8 01	 cmp	 DWORD PTR _type$[ebp], 1
  00061	0f 94 c0	 sete	 al

; 113  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_ReadLocalMachineRegistryString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadLocalMachineRegistryMultiString
_TEXT	SEGMENT
_type$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_size$ = 20						; size = 4
_ReadLocalMachineRegistryMultiString PROC		; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 68   : 	HKEY hkey = 0;
; 69   : 	DWORD type;
; 70   : 
; 71   : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00006	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	68 19 00 02 00	 push	 131097			; 00020019H
  00016	6a 00		 push	 0
  00018	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  0001b	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00026	85 c0		 test	 eax, eax
  00028	75 25		 jne	 SHORT $LN5@ReadLocalM

; 72   : 		return FALSE;
; 73   : 
; 74   : 	if (RegQueryValueEx (hkey, name, NULL, &type, (BYTE *) value, size) != ERROR_SUCCESS)

  0002a	ff 75 14	 push	 DWORD PTR _size$[ebp]
  0002d	8d 45 f8	 lea	 eax, DWORD PTR _type$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00033	50		 push	 eax
  00034	6a 00		 push	 0
  00036	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00039	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24

; 75   : 	{
; 76   : 		RegCloseKey (hkey);

  00042	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00045	85 c0		 test	 eax, eax
  00047	74 0c		 je	 SHORT $LN3@ReadLocalM
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN5@ReadLocalM:

; 77   : 		return FALSE;

  0004f	33 c0		 xor	 eax, eax

; 82   : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@ReadLocalM:

; 78   : 	}
; 79   : 
; 80   : 	RegCloseKey (hkey);

  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 81   : 	return type == REG_MULTI_SZ;

  0005b	33 c0		 xor	 eax, eax
  0005d	83 7d f8 07	 cmp	 DWORD PTR _type$[ebp], 7
  00061	0f 94 c0	 sete	 al

; 82   : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_ReadLocalMachineRegistryMultiString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\registry.c
;	COMDAT _ReadLocalMachineRegistryDword
_TEXT	SEGMENT
_type$ = -12						; size = 4
_size$ = -8						; size = 4
_hkey$ = -4						; size = 4
_subKey$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_ReadLocalMachineRegistryDword PROC			; COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 36   : 	HKEY hkey = 0;
; 37   : 	DWORD size = sizeof (*value);
; 38   : 	DWORD type;
; 39   : 
; 40   : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, subKey, 0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00006	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	68 19 00 02 00	 push	 131097			; 00020019H
  00016	6a 00		 push	 0
  00018	ff 75 08	 push	 DWORD PTR _subKey$[ebp]
  0001b	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _size$[ebp], 4
  00022	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  0002d	85 c0		 test	 eax, eax
  0002f	75 26		 jne	 SHORT $LN5@ReadLocalM

; 41   : 		return FALSE;
; 42   : 
; 43   : 	if (RegQueryValueEx (hkey, name, NULL, &type, (BYTE *) value, &size) != ERROR_SUCCESS)

  00031	8d 45 f8	 lea	 eax, DWORD PTR _size$[ebp]
  00034	50		 push	 eax
  00035	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00038	8d 45 f4	 lea	 eax, DWORD PTR _type$[ebp]
  0003b	50		 push	 eax
  0003c	6a 00		 push	 0
  0003e	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00041	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24

; 44   : 	{
; 45   : 		RegCloseKey (hkey);

  0004a	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@ReadLocalM
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN5@ReadLocalM:

; 46   : 		return FALSE;

  00057	33 c0		 xor	 eax, eax

; 51   : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN3@ReadLocalM:

; 47   : 	}
; 48   : 
; 49   : 	RegCloseKey (hkey);

  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 50   : 	return type == REG_DWORD;

  00063	33 c0		 xor	 eax, eax
  00065	83 7d f4 04	 cmp	 DWORD PTR _type$[ebp], 4
  00069	0f 94 c0	 sete	 al

; 51   : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_ReadLocalMachineRegistryDword ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
