; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Common\Combo.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	_AddComboItem
PUBLIC	_MoveEditToCombo
PUBLIC	_GetOrderComboIdx
PUBLIC	_UpdateComboOrder
PUBLIC	_LoadCombo
PUBLIC	_DumpCombo
PUBLIC	_ClearCombo
PUBLIC	_IsComboEmpty
PUBLIC	??_C@_0M@COMBLGLD@History?4xml?$AA@		; `string'
PUBLIC	??_C@_06EMCPHFGM@volume?$AA@			; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0M@MCACFAKG@?6?7?$DMhistory?$DO?$AA@	; `string'
PUBLIC	??_C@_0BH@PGAPGLND@?6?7?7?$DMvolume?$DO?$CFs?$DM?1volume?$DO?$AA@ ; `string'
PUBLIC	??_C@_0N@GOMGLJCI@?6?7?$DM?1history?$DO?$AA@	; `string'
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	_free:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fputs:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_LoadFile:PROC
EXTRN	_GetConfigPath:PROC
EXTRN	_XmlFindElement:PROC
EXTRN	_XmlGetNodeText:PROC
EXTRN	_XmlWriteHeader:PROC
EXTRN	_XmlWriteFooter:PROC
EXTRN	_XmlQuoteText:PROC
EXTRN	__time64:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0N@GOMGLJCI@?6?7?$DM?1history?$DO?$AA@
CONST	SEGMENT
??_C@_0N@GOMGLJCI@?6?7?$DM?1history?$DO?$AA@ DB 0aH, 09H, '</history>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PGAPGLND@?6?7?7?$DMvolume?$DO?$CFs?$DM?1volume?$DO?$AA@
CONST	SEGMENT
??_C@_0BH@PGAPGLND@?6?7?7?$DMvolume?$DO?$CFs?$DM?1volume?$DO?$AA@ DB 0aH, 09H
	DB	09H, '<volume>%s</volume>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCACFAKG@?6?7?$DMhistory?$DO?$AA@
CONST	SEGMENT
??_C@_0M@MCACFAKG@?6?7?$DMhistory?$DO?$AA@ DB 0aH, 09H, '<history>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMCPHFGM@volume?$AA@
CONST	SEGMENT
??_C@_06EMCPHFGM@volume?$AA@ DB 'volume', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COMBLGLD@History?4xml?$AA@
CONST	SEGMENT
??_C@_0M@COMBLGLD@History?4xml?$AA@ DB 'History.xml', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _IsComboEmpty
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_IsComboEmpty PROC					; COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 296  : 	return SendMessage (hComboBox, CB_GETCOUNT, 0, 0) < 1;

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	68 46 01 00 00	 push	 326			; 00000146H
  0000c	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00015	33 c9		 xor	 ecx, ecx
  00017	83 f8 01	 cmp	 eax, 1
  0001a	0f 9c c1	 setl	 cl
  0001d	8b c1		 mov	 eax, ecx

; 297  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_IsComboEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _ClearCombo
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_ClearCombo PROC					; COMDAT

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 279  : 	int i;
; 280  : 	for (i = 0; i < SIZEOF_MRU_LIST; i++)

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _hComboBox$[ebp]
  0000f	be 14 00 00 00	 mov	 esi, 20			; 00000014H
$LL4@ClearCombo:

; 281  : 	{
; 282  : 		SendMessage (hComboBox, CB_DELETESTRING, 0, 0);

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	68 44 01 00 00	 push	 324			; 00000144H
  0001d	57		 push	 edi
  0001e	ff d3		 call	 ebx
  00020	83 ee 01	 sub	 esi, 1
  00023	75 ef		 jne	 SHORT $LL4@ClearCombo
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 283  : 	}
; 284  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_ClearCombo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _DumpCombo
_TEXT	SEGMENT
_nComboIdx$ = -864					; size = 80
_q$1 = -784						; size = 520
_szTmp$2 = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hComboBox$ = 8						; size = 4
_bClear$ = 12						; size = 4
_DumpCombo PROC						; COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 03 00
	00		 sub	 esp, 864		; 00000360H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 228  : 	FILE *f;
; 229  : 	int i, nComboIdx[SIZEOF_MRU_LIST];
; 230  : 
; 231  : 	if (bClear)

  00013	83 7d 0c 00	 cmp	 DWORD PTR _bClear$[ebp], 0
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _hComboBox$[ebp]
  0001b	74 23		 je	 SHORT $LN8@DumpCombo

; 232  : 	{
; 233  : 		DeleteFile (GetConfigPath (GST_APPD_FILENAME_HISTORY));

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@COMBLGLD@History?4xml?$AA@
  00022	e8 00 00 00 00	 call	 _GetConfigPath
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  00031	5f		 pop	 edi

; 267  : }

  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN8@DumpCombo:
  00040	53		 push	 ebx

; 234  : 		return;
; 235  : 	}
; 236  : 
; 237  : 	f = fopen (GetConfigPath (GST_APPD_FILENAME_HISTORY), "w");

  00041	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0M@COMBLGLD@History?4xml?$AA@
  0004b	e8 00 00 00 00	 call	 _GetConfigPath
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _fopen
  00059	8b d8		 mov	 ebx, eax
  0005b	83 c4 08	 add	 esp, 8

; 238  : 	if (f == NULL) return;

  0005e	85 db		 test	 ebx, ebx
  00060	0f 84 f4 00 00
	00		 je	 $LN21@DumpCombo

; 239  : 
; 240  : 	XmlWriteHeader (f);

  00066	56		 push	 esi
  00067	53		 push	 ebx
  00068	e8 00 00 00 00	 call	 _XmlWriteHeader

; 241  : 	fputs ("\n\t<history>", f);

  0006d	53		 push	 ebx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MCACFAKG@?6?7?$DMhistory?$DO?$AA@
  00073	e8 00 00 00 00	 call	 _fputs
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 242  : 
; 243  : 	/* combo list part:- get mru items */
; 244  : 	for (i = 0; i < SIZEOF_MRU_LIST; i++)

  0007b	33 f6		 xor	 esi, esi
  0007d	0f 1f 00	 npad	 3
$LL4@DumpCombo:

; 245  : 		nComboIdx[i] = GetOrderComboIdx (hComboBox, &nComboIdx[0], i);

  00080	56		 push	 esi
  00081	8d 85 a0 fc ff
	ff		 lea	 eax, DWORD PTR _nComboIdx$[ebp]
  00087	50		 push	 eax
  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 _GetOrderComboIdx
  0008e	89 84 b5 a0 fc
	ff ff		 mov	 DWORD PTR _nComboIdx$[ebp+esi*4], eax
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	46		 inc	 esi
  00099	83 fe 14	 cmp	 esi, 20			; 00000014H
  0009c	7c e2		 jl	 SHORT $LL4@DumpCombo

; 246  : 
; 247  : 	/* combo list part:- write out mru items */
; 248  : 	for (i = 0; i < SIZEOF_MRU_LIST; i++)

  0009e	33 f6		 xor	 esi, esi
$LL7@DumpCombo:
  000a0	68 04 01 00 00	 push	 260			; 00000104H
  000a5	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$2[ebp]
  000ab	6a 00		 push	 0
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _memset
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : 	{
; 250  : 		char szTmp[MAX_PATH] = { 0 };
; 251  : 		 
; 252  : 		if (SendMessage (hComboBox, CB_GETLBTEXTLEN, nComboIdx[i], 0) < sizeof (szTmp))

  000b6	6a 00		 push	 0
  000b8	ff b4 b5 a0 fc
	ff ff		 push	 DWORD PTR _nComboIdx$[ebp+esi*4]
  000bf	68 49 01 00 00	 push	 329			; 00000149H
  000c4	57		 push	 edi
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000cb	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  000d0	73 1a		 jae	 SHORT $LN10@DumpCombo

; 253  : 			SendMessage (hComboBox, CB_GETLBTEXT, nComboIdx[i], (LPARAM) & szTmp[0]);

  000d2	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$2[ebp]
  000d8	50		 push	 eax
  000d9	ff b4 b5 a0 fc
	ff ff		 push	 DWORD PTR _nComboIdx$[ebp+esi*4]
  000e0	68 48 01 00 00	 push	 328			; 00000148H
  000e5	57		 push	 edi
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN10@DumpCombo:

; 254  : 
; 255  : 		if (szTmp[0] != 0)

  000ec	80 bd f8 fe ff
	ff 00		 cmp	 BYTE PTR _szTmp$2[ebp], 0
  000f3	74 40		 je	 SHORT $LN5@DumpCombo

; 256  : 		{
; 257  : 			char q[MAX_PATH * 2] = { 0 };
; 258  : 			XmlQuoteText (szTmp, q, sizeof (q));

  000f5	68 08 02 00 00	 push	 520			; 00000208H
  000fa	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _q$1[ebp]
  00100	6a 00		 push	 0
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _memset
  00108	68 08 02 00 00	 push	 520			; 00000208H
  0010d	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _q$1[ebp]
  00113	50		 push	 eax
  00114	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$2[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _XmlQuoteText

; 259  : 
; 260  : 			fprintf (f, "\n\t\t<volume>%s</volume>", q);

  00120	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _q$1[ebp]
  00126	50		 push	 eax
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PGAPGLND@?6?7?7?$DMvolume?$DO?$CFs?$DM?1volume?$DO?$AA@
  0012c	53		 push	 ebx
  0012d	e8 00 00 00 00	 call	 _fprintf
  00132	83 c4 24	 add	 esp, 36			; 00000024H
$LN5@DumpCombo:

; 246  : 
; 247  : 	/* combo list part:- write out mru items */
; 248  : 	for (i = 0; i < SIZEOF_MRU_LIST; i++)

  00135	46		 inc	 esi
  00136	83 fe 14	 cmp	 esi, 20			; 00000014H
  00139	0f 8c 61 ff ff
	ff		 jl	 $LL7@DumpCombo

; 261  : 		}
; 262  : 	}
; 263  : 
; 264  : 	fputs ("\n\t</history>", f);

  0013f	53		 push	 ebx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GOMGLJCI@?6?7?$DM?1history?$DO?$AA@
  00145	e8 00 00 00 00	 call	 _fputs

; 265  : 	XmlWriteFooter (f);

  0014a	53		 push	 ebx
  0014b	e8 00 00 00 00	 call	 _XmlWriteFooter

; 266  : 	fclose (f);

  00150	53		 push	 ebx
  00151	e8 00 00 00 00	 call	 _fclose
  00156	83 c4 10	 add	 esp, 16			; 00000010H
  00159	5e		 pop	 esi
$LN21@DumpCombo:

; 267  : }

  0015a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015d	5b		 pop	 ebx
  0015e	33 cd		 xor	 ecx, ebp
  00160	5f		 pop	 edi
  00161	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_DumpCombo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _LoadCombo
_TEXT	SEGMENT
_size$ = -280						; size = 4
_history$1$ = -276					; size = 4
_lTime$1$ = -272					; size = 4
_xml$1$ = -268						; size = 4
_volume$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hComboBox$ = 8						; size = 4
_LoadCombo PROC						; COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _hComboBox$[ebp]

; 198  : 	DWORD size;
; 199  : 	char *history = LoadFile (GetConfigPath (GST_APPD_FILENAME_HISTORY), &size);

  00017	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@COMBLGLD@History?4xml?$AA@
  00023	e8 00 00 00 00	 call	 _GetConfigPath
  00028	83 c4 04	 add	 esp, 4
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LoadFile
  00031	83 c4 08	 add	 esp, 8
  00034	89 85 ec fe ff
	ff		 mov	 DWORD PTR _history$1$[ebp], eax

; 200  : 	char *xml = history;
; 201  : 	char volume[MAX_PATH];
; 202  : 
; 203  : 	if (xml == NULL) return;

  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 03 01 00
	00		 je	 $LN1@LoadCombo

; 204  : 
; 205  : 	while (xml = XmlFindElement (xml, "volume"))

  00042	56		 push	 esi
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_06EMCPHFGM@volume?$AA@
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _XmlFindElement
  0004e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  00054	83 c4 08	 add	 esp, 8
  00057	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _xml$1$[ebp], eax
  0005d	85 c0		 test	 eax, eax
  0005f	0f 84 c5 00 00
	00		 je	 $LN3@LoadCombo
  00065	53		 push	 ebx
  00066	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@LoadCombo:

; 206  : 	{
; 207  : 		XmlGetNodeText (xml, volume, sizeof (volume));

  00070	68 04 01 00 00	 push	 260			; 00000104H
  00075	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _volume$[ebp]
  0007b	51		 push	 ecx
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _XmlGetNodeText
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 		AddComboItem (hComboBox, volume, TRUE);

  00085	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  0008b	50		 push	 eax
  0008c	6a ff		 push	 -1
  0008e	68 58 01 00 00	 push	 344			; 00000158H
  00093	57		 push	 edi
  00094	ff d6		 call	 esi
  00096	8b d8		 mov	 ebx, eax
  00098	83 fb ff	 cmp	 ebx, -1
  0009b	75 40		 jne	 SHORT $LN9@LoadCombo
  0009d	80 bd f8 fe ff
	ff 00		 cmp	 BYTE PTR _volume$[ebp], 0
  000a4	74 54		 je	 SHORT $LN19@LoadCombo
  000a6	6a 00		 push	 0
  000a8	e8 00 00 00 00	 call	 __time64
  000ad	83 c4 04	 add	 esp, 4
  000b0	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _lTime$1$[ebp], eax
  000b6	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  000bc	50		 push	 eax
  000bd	6a 00		 push	 0
  000bf	68 43 01 00 00	 push	 323			; 00000143H
  000c4	57		 push	 edi
  000c5	ff d6		 call	 esi
  000c7	8b d8		 mov	 ebx, eax
  000c9	83 fb ff	 cmp	 ebx, -1
  000cc	74 23		 je	 SHORT $LN10@LoadCombo
  000ce	ff b5 f0 fe ff
	ff		 push	 DWORD PTR _lTime$1$[ebp]
  000d4	53		 push	 ebx
  000d5	68 51 01 00 00	 push	 337			; 00000151H
  000da	57		 push	 edi
  000db	ff d6		 call	 esi
$LN9@LoadCombo:
  000dd	80 bd f8 fe ff
	ff 00		 cmp	 BYTE PTR _volume$[ebp], 0
  000e4	74 14		 je	 SHORT $LN19@LoadCombo
  000e6	6a 00		 push	 0
  000e8	53		 push	 ebx
  000e9	68 4e 01 00 00	 push	 334			; 0000014eH
  000ee	57		 push	 edi
  000ef	ff d6		 call	 esi
$LN10@LoadCombo:
  000f1	80 bd f8 fe ff
	ff 00		 cmp	 BYTE PTR _volume$[ebp], 0
  000f8	75 0c		 jne	 SHORT $LN11@LoadCombo
$LN19@LoadCombo:
  000fa	6a 00		 push	 0
  000fc	6a ff		 push	 -1
  000fe	68 4e 01 00 00	 push	 334			; 0000014eH
  00103	57		 push	 edi
  00104	ff d6		 call	 esi
$LN11@LoadCombo:

; 209  : 		xml++;

  00106	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _xml$1$[ebp]
  0010c	40		 inc	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_06EMCPHFGM@volume?$AA@
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 _XmlFindElement
  00118	83 c4 08	 add	 esp, 8
  0011b	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _xml$1$[ebp], eax
  00121	85 c0		 test	 eax, eax
  00123	0f 85 47 ff ff
	ff		 jne	 $LL2@LoadCombo
  00129	5b		 pop	 ebx
$LN3@LoadCombo:

; 210  : 	}
; 211  : 
; 212  : 	SendMessage (hComboBox, CB_SETCURSEL, 0, 0);

  0012a	6a 00		 push	 0
  0012c	6a 00		 push	 0
  0012e	68 4e 01 00 00	 push	 334			; 0000014eH
  00133	57		 push	 edi
  00134	ff d6		 call	 esi

; 213  : 
; 214  : 	free (history);

  00136	ff b5 ec fe ff
	ff		 push	 DWORD PTR _history$1$[ebp]
  0013c	e8 00 00 00 00	 call	 _free
  00141	83 c4 04	 add	 esp, 4
  00144	5e		 pop	 esi
$LN1@LoadCombo:

; 215  : }

  00145	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	33 cd		 xor	 ecx, ebp
  0014a	5f		 pop	 edi
  0014b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
_LoadCombo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _UpdateComboOrder
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_UpdateComboOrder PROC					; COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 174  : 	LPARAM nIndex;
; 175  : 
; 176  : 	nIndex = SendMessage (hComboBox, CB_GETCURSEL, 0, 0);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 47 01 00 00	 push	 327			; 00000147H
  00010	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00019	8b f0		 mov	 esi, eax

; 177  : 
; 178  : 	if (nIndex != CB_ERR)

  0001b	83 fe ff	 cmp	 esi, -1
  0001e	74 1a		 je	 SHORT $LN2@UpdateComb

; 179  : 	{
; 180  : 		time_t lTime = time (NULL);

  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 __time64
  00027	83 c4 04	 add	 esp, 4

; 181  : 		nIndex = SendMessage (hComboBox, CB_SETITEMDATA, (WPARAM) nIndex,

  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	68 51 01 00 00	 push	 337			; 00000151H
  00031	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN2@UpdateComb:
  0003a	5e		 pop	 esi

; 182  : 				      (LPARAM) lTime);
; 183  : 	}
; 184  : 
; 185  : 	return nIndex;
; 186  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_UpdateComboOrder ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _GetOrderComboIdx
_TEXT	SEGMENT
_x$1$ = -16						; size = 4
_nHighIdx$1$ = -12					; size = 4
_lHighTime$2$ = -8					; size = 4
_lHighTime$1$ = -4					; size = 4
_hComboBox$ = 8						; size = 4
_nIdxList$ = 12						; size = 4
_nElems$ = 16						; size = 4
_GetOrderComboIdx PROC					; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 135  : 	int x = (int) SendMessage (hComboBox, CB_GETCOUNT, 0, 0);

  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	68 46 01 00 00	 push	 326			; 00000146H
  0000f	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00018	89 45 f0	 mov	 DWORD PTR _x$1$[ebp], eax

; 136  : 	if (x != CB_ERR)

  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	74 6f		 je	 SHORT $LN8@GetOrderCo

; 137  : 	{
; 138  : 		int i, nHighIdx = CB_ERR;

  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	83 cf ff	 or	 edi, -1

; 139  : 		time_t lHighTime = -1;
; 140  : 
; 141  : 		for (i = 0; i < x; i++)

  00025	33 f6		 xor	 esi, esi
  00027	0b cf		 or	 ecx, edi
  00029	89 7d f4	 mov	 DWORD PTR _nHighIdx$1$[ebp], edi
  0002c	0b d7		 or	 edx, edi
  0002e	89 4d fc	 mov	 DWORD PTR _lHighTime$1$[ebp], ecx
  00031	89 55 f8	 mov	 DWORD PTR _lHighTime$2$[ebp], edx
  00034	85 c0		 test	 eax, eax
  00036	7e 4f		 jle	 SHORT $LN3@GetOrderCo
  00038	8b 7d 10	 mov	 edi, DWORD PTR _nElems$[ebp]
  0003b	53		 push	 ebx
  0003c	8b 5d 0c	 mov	 ebx, DWORD PTR _nIdxList$[ebp]
  0003f	90		 npad	 1
$LL4@GetOrderCo:

; 142  : 		{
; 143  : 			time_t lTime = SendMessage (hComboBox, CB_GETITEMDATA, (WPARAM) i, 0);

  00040	6a 00		 push	 0
  00042	56		 push	 esi
  00043	68 50 01 00 00	 push	 336			; 00000150H
  00048	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00051	99		 cdq
  00052	8b c8		 mov	 ecx, eax

; 144  : 			if (lTime > lHighTime)

  00054	3b 55 f8	 cmp	 edx, DWORD PTR _lHighTime$2$[ebp]
  00057	7c 24		 jl	 SHORT $LN2@GetOrderCo
  00059	7f 05		 jg	 SHORT $LN22@GetOrderCo
  0005b	3b 4d fc	 cmp	 ecx, DWORD PTR _lHighTime$1$[ebp]
  0005e	76 1d		 jbe	 SHORT $LN2@GetOrderCo
$LN22@GetOrderCo:

; 145  : 			{
; 146  : 				int n;
; 147  : 				for (n = 0; n < nElems; n++)

  00060	33 c0		 xor	 eax, eax
  00062	85 ff		 test	 edi, edi
  00064	7e 0a		 jle	 SHORT $LN23@GetOrderCo
$LL7@GetOrderCo:

; 148  : 					if (nIdxList[n] == i)

  00066	39 34 83	 cmp	 DWORD PTR [ebx+eax*4], esi
  00069	74 05		 je	 SHORT $LN23@GetOrderCo

; 145  : 			{
; 146  : 				int n;
; 147  : 				for (n = 0; n < nElems; n++)

  0006b	40		 inc	 eax
  0006c	3b c7		 cmp	 eax, edi
  0006e	7c f6		 jl	 SHORT $LL7@GetOrderCo
$LN23@GetOrderCo:

; 149  : 						break;
; 150  : 				if (n == nElems)

  00070	3b c7		 cmp	 eax, edi
  00072	75 09		 jne	 SHORT $LN2@GetOrderCo

; 151  : 				{
; 152  : 					lHighTime = lTime;

  00074	89 4d fc	 mov	 DWORD PTR _lHighTime$1$[ebp], ecx
  00077	89 55 f8	 mov	 DWORD PTR _lHighTime$2$[ebp], edx

; 153  : 					nHighIdx = i;

  0007a	89 75 f4	 mov	 DWORD PTR _nHighIdx$1$[ebp], esi
$LN2@GetOrderCo:

; 139  : 		time_t lHighTime = -1;
; 140  : 
; 141  : 		for (i = 0; i < x; i++)

  0007d	46		 inc	 esi
  0007e	3b 75 f0	 cmp	 esi, DWORD PTR _x$1$[ebp]
  00081	7c bd		 jl	 SHORT $LL4@GetOrderCo
  00083	8b 7d f4	 mov	 edi, DWORD PTR _nHighIdx$1$[ebp]
  00086	5b		 pop	 ebx
$LN3@GetOrderCo:

; 154  : 				}
; 155  : 			}
; 156  : 		}
; 157  : 
; 158  : 		return nHighIdx;

  00087	8b c7		 mov	 eax, edi
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi

; 162  : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN8@GetOrderCo:

; 159  : 	}
; 160  : 
; 161  : 	return CB_ERR;

  0008f	83 c8 ff	 or	 eax, -1

; 162  : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_GetOrderComboIdx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _MoveEditToCombo
_TEXT	SEGMENT
_lTime$1$ = -268					; size = 4
_szTmp$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hComboBox$ = 8						; size = 4
_saveHistory$ = 12					; size = 4
_MoveEditToCombo PROC					; COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _hComboBox$[ebp]
  00017	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  0001d	68 04 01 00 00	 push	 260			; 00000104H
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 87   : 	char szTmp[GST_MAX_PATH] = {0}; // max = 260
; 88   : 
; 89   : 	if (!saveHistory)
; 90   : 	{
; 91   : 		GetWindowText (hComboBox, szTmp, sizeof (szTmp));

  0002d	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00033	68 04 01 00 00	 push	 260			; 00000104H
  00038	50		 push	 eax
  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12
  00040	83 7d 0c 00	 cmp	 DWORD PTR _saveHistory$[ebp], 0
  00044	75 2f		 jne	 SHORT $LN2@MoveEditTo

; 92   : 		SendMessage (hComboBox, CB_RESETCONTENT, 0, 0);

  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	68 4b 01 00 00	 push	 331			; 0000014bH
  0004f	56		 push	 esi
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 93   : 		SetWindowText (hComboBox, szTmp);

  00056	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 94   : 		return 0;

  00064	33 c0		 xor	 eax, eax
  00066	5e		 pop	 esi

; 120  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN2@MoveEditTo:

; 95   : 	}
; 96   : 
; 97   : 	GetWindowText (hComboBox, szTmp, sizeof (szTmp));
; 98   : 	
; 99   : 	if (strlen (szTmp) > 0)

  00075	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  0007b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0007e	66 90		 npad	 2
$LL12@MoveEditTo:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL12@MoveEditTo
  00087	2b ca		 sub	 ecx, edx
  00089	0f 84 87 00 00
	00		 je	 $LN3@MoveEditTo

; 100  : 	{
; 101  : 		LPARAM nIndex = SendMessage (hComboBox, CB_FINDSTRINGEXACT, (WPARAM) - 1,

  0008f	53		 push	 ebx
  00090	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00096	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  0009c	57		 push	 edi
  0009d	50		 push	 eax
  0009e	6a ff		 push	 -1
  000a0	68 58 01 00 00	 push	 344			; 00000158H
  000a5	56		 push	 esi
  000a6	ff d3		 call	 ebx

; 102  : 					     (LPARAM) & szTmp[0]);
; 103  : 		if (nIndex == CB_ERR)
; 104  : 		{
; 105  : 			time_t lTime = time (NULL);

  000a8	6a 00		 push	 0
  000aa	8b f8		 mov	 edi, eax
  000ac	e8 00 00 00 00	 call	 __time64
  000b1	83 c4 04	 add	 esp, 4
  000b4	83 ff ff	 cmp	 edi, -1
  000b7	75 40		 jne	 SHORT $LN4@MoveEditTo
  000b9	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lTime$1$[ebp], eax

; 106  : 			nIndex = SendMessage (hComboBox, CB_ADDSTRING, 0, (LPARAM) & szTmp[0]);

  000bf	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  000c5	50		 push	 eax
  000c6	6a 00		 push	 0
  000c8	68 43 01 00 00	 push	 323			; 00000143H
  000cd	56		 push	 esi
  000ce	ff d3		 call	 ebx
  000d0	8b f8		 mov	 edi, eax

; 107  : 			if (nIndex != CB_ERR)

  000d2	83 ff ff	 cmp	 edi, -1
  000d5	74 2c		 je	 SHORT $LN5@MoveEditTo

; 108  : 				SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (DWORD) lTime);

  000d7	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _lTime$1$[ebp]

; 109  : 		}
; 110  : 		else
; 111  : 		{
; 112  : 			time_t lTime = time (NULL);
; 113  : 			SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (DWORD) lTime);

  000dd	57		 push	 edi
  000de	68 51 01 00 00	 push	 337			; 00000151H
  000e3	56		 push	 esi
  000e4	ff d3		 call	 ebx

; 114  : 		}
; 115  : 
; 116  : 		return nIndex;

  000e6	8b c7		 mov	 eax, edi
  000e8	5f		 pop	 edi
  000e9	5b		 pop	 ebx
  000ea	5e		 pop	 esi

; 120  : }

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	33 cd		 xor	 ecx, ebp
  000f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
$LN4@MoveEditTo:

; 109  : 		}
; 110  : 		else
; 111  : 		{
; 112  : 			time_t lTime = time (NULL);
; 113  : 			SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (DWORD) lTime);

  000f9	50		 push	 eax
  000fa	57		 push	 edi
  000fb	68 51 01 00 00	 push	 337			; 00000151H
  00100	56		 push	 esi
  00101	ff d3		 call	 ebx
$LN5@MoveEditTo:

; 114  : 		}
; 115  : 
; 116  : 		return nIndex;

  00103	8b c7		 mov	 eax, edi
  00105	5f		 pop	 edi
  00106	5b		 pop	 ebx
  00107	5e		 pop	 esi

; 120  : }

  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	33 cd		 xor	 ecx, ebp
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$LN3@MoveEditTo:

; 117  : 	}
; 118  : 
; 119  : 	return SendMessage (hComboBox, CB_GETCURSEL, 0, 0);

  00116	6a 00		 push	 0
  00118	6a 00		 push	 0
  0011a	68 47 01 00 00	 push	 327			; 00000147H
  0011f	56		 push	 esi
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 120  : }

  00126	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	33 cd		 xor	 ecx, ebp
  0012b	5e		 pop	 esi
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
_MoveEditToCombo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\combo.c
;	COMDAT _AddComboItem
_TEXT	SEGMENT
_lTime$1 = -8						; size = 8
_nIndex$1$ = -4						; size = 4
_hComboBox$ = 8						; size = 4
_lpszFileName$ = 12					; size = 4
_lTime$1$ = 16						; size = 4
_saveHistory$ = 16					; size = 4
_AddComboItem PROC					; COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 45   : 	LPARAM nIndex;
; 46   : 
; 47   : 	if (!saveHistory)

  00006	83 7d 10 00	 cmp	 DWORD PTR _saveHistory$[ebp], 0
  0000a	56		 push	 esi
  0000b	75 22		 jne	 SHORT $LN2@AddComboIt

; 48   : 	{
; 49   : 		SendMessage (hComboBox, CB_RESETCONTENT, 0, 0);

  0000d	8b 75 08	 mov	 esi, DWORD PTR _hComboBox$[ebp]
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	68 4b 01 00 00	 push	 331			; 0000014bH
  00019	56		 push	 esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 50   : 		SetWindowText (hComboBox, lpszFileName);

  00020	ff 75 0c	 push	 DWORD PTR _lpszFileName$[ebp]
  00023	56		 push	 esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
  0002a	5e		 pop	 esi

; 70   : 	}
; 71   : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN2@AddComboIt:

; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	nIndex = SendMessage (hComboBox, CB_FINDSTRINGEXACT, (WPARAM) - 1, (LPARAM) & lpszFileName[0]);

  0002f	8b 75 0c	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00032	53		 push	 ebx
  00033	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00039	57		 push	 edi
  0003a	8b 7d 08	 mov	 edi, DWORD PTR _hComboBox$[ebp]
  0003d	56		 push	 esi
  0003e	6a ff		 push	 -1
  00040	68 58 01 00 00	 push	 344			; 00000158H
  00045	57		 push	 edi
  00046	ff d3		 call	 ebx

; 55   : 
; 56   : 	if (nIndex == CB_ERR && *lpszFileName)

  00048	83 f8 ff	 cmp	 eax, -1
  0004b	75 37		 jne	 SHORT $LN4@AddComboIt
  0004d	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00050	74 47		 je	 SHORT $LN11@AddComboIt

; 57   : 	{
; 58   : 		time_t lTime = time (NULL);

  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 __time64
  00059	83 c4 04	 add	 esp, 4
  0005c	89 45 10	 mov	 DWORD PTR _lTime$1$[ebp], eax
  0005f	89 55 fc	 mov	 DWORD PTR _lTime$1[ebp+4], edx

; 59   : 		nIndex = SendMessage (hComboBox, CB_ADDSTRING, 0, (LPARAM) & lpszFileName[0]);

  00062	56		 push	 esi
  00063	6a 00		 push	 0
  00065	68 43 01 00 00	 push	 323			; 00000143H
  0006a	57		 push	 edi
  0006b	ff d3		 call	 ebx
  0006d	89 45 fc	 mov	 DWORD PTR _nIndex$1$[ebp], eax

; 60   : 		if (nIndex != CB_ERR)

  00070	83 f8 ff	 cmp	 eax, -1
  00073	74 1f		 je	 SHORT $LN5@AddComboIt

; 61   : 			SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) lTime);

  00075	ff 75 10	 push	 DWORD PTR _lTime$1$[ebp]
  00078	50		 push	 eax
  00079	68 51 01 00 00	 push	 337			; 00000151H
  0007e	57		 push	 edi
  0007f	ff d3		 call	 ebx
  00081	8b 45 fc	 mov	 eax, DWORD PTR _nIndex$1$[ebp]
$LN4@AddComboIt:

; 62   : 	}
; 63   : 
; 64   : 	if (nIndex != CB_ERR && *lpszFileName)

  00084	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00087	74 10		 je	 SHORT $LN11@AddComboIt

; 65   : 		nIndex = SendMessage (hComboBox, CB_SETCURSEL, nIndex, 0);

  00089	6a 00		 push	 0
  0008b	50		 push	 eax
  0008c	68 4e 01 00 00	 push	 334			; 0000014eH
  00091	57		 push	 edi
  00092	ff d3		 call	 ebx
$LN5@AddComboIt:

; 66   : 
; 67   : 	if (*lpszFileName == 0)

  00094	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00097	75 0c		 jne	 SHORT $LN12@AddComboIt
$LN11@AddComboIt:

; 68   : 	{
; 69   : 		SendMessage (hComboBox, CB_SETCURSEL, (WPARAM) - 1, 0);

  00099	6a 00		 push	 0
  0009b	6a ff		 push	 -1
  0009d	68 4e 01 00 00	 push	 334			; 0000014eH
  000a2	57		 push	 edi
  000a3	ff d3		 call	 ebx
$LN12@AddComboIt:
  000a5	5f		 pop	 edi
  000a6	5b		 pop	 ebx
  000a7	5e		 pop	 esi

; 70   : 	}
; 71   : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_AddComboItem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);
; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 836  :     __crt_va_end(_ArgList);
; 837  :     return _Result;
; 838  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
