; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Common\Progress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__snwprintf
PUBLIC	__swprintf
PUBLIC	_InitProgressBar
PUBLIC	_UpdateProgressBar
PUBLIC	_UpdateProgressBarProc
PUBLIC	??_C@_07JJOGDNLC@SECONDS?$AA@			; `string'
PUBLIC	??_C@_07JPNPDFOO@MINUTES?$AA@			; `string'
PUBLIC	??_C@_05HFOIBCBM@HOURS?$AA@			; `string'
PUBLIC	??_C@_04EFPNNCJL@DAYS?$AA@			; `string'
PUBLIC	??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_02LKLDBFPJ@MB?$AA@			; `string'
PUBLIC	??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_02LHCEJACP@GB?$AA@			; `string'
PUBLIC	??_C@_02KJEEINAG@TB?$AA@			; `string'
PUBLIC	??_C@_02KOENCFNK@PB?$AA@			; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@	; `string'
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@4058fffffffeed1f
PUBLIC	__real@4059000000000000
PUBLIC	__real@40c3880000000000
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	___stdio_common_vswprintf:PROC
EXTRN	_GetString:PROC
EXTRN	_GetSpeedString:PROC
EXTRN	_GetSizeString:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alldiv:PROC
EXTRN	__aulldiv:PROC
EXTRN	__dtol3:PROC
EXTRN	__ltod3:PROC
EXTRN	__ultod3:PROC
EXTRN	_hCurPage:DWORD
EXTRN	_bVolTransformThreadCancel:DWORD
EXTRN	_nPbar:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_prevTime DD	01H DUP (?)
_startTime DD	01H DUP (?)
_TotalSize DQ	01H DUP (?)
_resumedPointBytesDone DQ 01H DUP (?)
_bProgressBarReverse DD 01H DUP (?)
_bRWThroughput DD 01H DUP (?)
_bShowStatus DD	01H DUP (?)
_bPercentMode DD 01H DUP (?)
_seconds DD	01H DUP (?)
_minutes DD	01H DUP (?)
_hours	DD	01H DUP (?)
_days	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4058fffffffeed1f
CONST	SEGMENT
__real@4058fffffffeed1f DQ 04058fffffffeed1fr	; 100
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT ??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@ DB '%', 00H, 's', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOENCFNK@PB?$AA@
CONST	SEGMENT
??_C@_02KOENCFNK@PB?$AA@ DB 'PB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJEEINAG@TB?$AA@
CONST	SEGMENT
??_C@_02KJEEINAG@TB?$AA@ DB 'TB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHCEJACP@GB?$AA@
CONST	SEGMENT
??_C@_02LHCEJACP@GB?$AA@ DB 'GB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKLDBFPJ@MB?$AA@
CONST	SEGMENT
??_C@_02LKLDBFPJ@MB?$AA@ DB 'MB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@ DB 'PROCESSED_PORTION_'
	DB	'X_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@ DB 'PROCESSED_PORTI'
	DB	'ON_100_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFPNNCJL@DAYS?$AA@
CONST	SEGMENT
??_C@_04EFPNNCJL@DAYS?$AA@ DB 'DAYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFOIBCBM@HOURS?$AA@
CONST	SEGMENT
??_C@_05HFOIBCBM@HOURS?$AA@ DB 'HOURS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPNPDFOO@MINUTES?$AA@
CONST	SEGMENT
??_C@_07JPNPDFOO@MINUTES?$AA@ DB 'MINUTES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJOGDNLC@SECONDS?$AA@
CONST	SEGMENT
??_C@_07JJOGDNLC@SECONDS?$AA@ DB 'SECONDS', 00H		; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\progress.c
;	COMDAT _UpdateProgressBarProc
_TEXT	SEGMENT
_hProgressBar$1$ = -428					; size = 4
_time$1$ = -424						; size = 4
tv679 = -420						; size = 8
tv606 = -420						; size = 8
_perc$1$ = -420						; size = 8
_bytesPerSec$1$ = -412					; size = 4
tv772 = -408						; size = 4
_bytesPerSec$2$ = -408					; size = 4
_speed$ = -404						; size = 200
_text$ = -204						; size = 200
__$ArrayPad$ = -4					; size = 4
_byteOffset$ = 8					; size = 8
_UpdateProgressBarProc PROC				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 105  : 	wchar_t text[100];
; 106  : 	wchar_t speed[100];
; 107  : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00016	ff 35 00 00 00
	00		 push	 DWORD PTR _nPbar
  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR _hCurPage
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00028	89 85 54 fe ff
	ff		 mov	 DWORD PTR _hProgressBar$1$[ebp], eax

; 108  : 	int time = GetTickCount ();

  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 109  : 	int elapsed = (time - startTime) / 1000;
; 110  : 
; 111  : 	uint64 bytesDone = (bProgressBarReverse ? (TotalSize - byteOffset) : byteOffset);

  00034	8b 5d 0c	 mov	 ebx, DWORD PTR _byteOffset$[ebp+4]
  00037	8b c8		 mov	 ecx, eax
  00039	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _startTime
  0003f	89 85 58 fe ff
	ff		 mov	 DWORD PTR _time$1$[ebp], eax
  00045	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0004a	f7 e1		 mul	 ecx
  0004c	c1 ea 06	 shr	 edx, 6
  0004f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  00056	74 2a		 je	 SHORT $LN24@UpdateProg
  00058	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _TotalSize
  0005e	2b 7d 08	 sub	 edi, DWORD PTR _byteOffset$[ebp]
  00061	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _TotalSize+4

; 112  : 	uint64 bytesPerSec = (bProgressBarReverse ? (resumedPointBytesDone - byteOffset) : (bytesDone - resumedPointBytesDone)) / (elapsed + 1);

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _resumedPointBytesDone
  0006d	1b f3		 sbb	 esi, ebx
  0006f	2b 4d 08	 sub	 ecx, DWORD PTR _byteOffset$[ebp]
  00072	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv772[ebp], ecx
  00078	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _resumedPointBytesDone+4
  0007e	1b cb		 sbb	 ecx, ebx
  00080	eb 1b		 jmp	 SHORT $LN27@UpdateProg
$LN24@UpdateProg:

; 109  : 	int elapsed = (time - startTime) / 1000;
; 110  : 
; 111  : 	uint64 bytesDone = (bProgressBarReverse ? (TotalSize - byteOffset) : byteOffset);

  00082	8b 45 08	 mov	 eax, DWORD PTR _byteOffset$[ebp]

; 112  : 	uint64 bytesPerSec = (bProgressBarReverse ? (resumedPointBytesDone - byteOffset) : (bytesDone - resumedPointBytesDone)) / (elapsed + 1);

  00085	8b cb		 mov	 ecx, ebx
  00087	8b f8		 mov	 edi, eax
  00089	8b f3		 mov	 esi, ebx
  0008b	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _resumedPointBytesDone
  00091	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv772[ebp], eax
  00097	1b 0d 04 00 00
	00		 sbb	 ecx, DWORD PTR _resumedPointBytesDone+4
$LN27@UpdateProg:
  0009d	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000a0	99		 cdq
  000a1	52		 push	 edx
  000a2	50		 push	 eax
  000a3	51		 push	 ecx
  000a4	ff b5 68 fe ff
	ff		 push	 DWORD PTR tv772[ebp]
  000aa	e8 00 00 00 00	 call	 __aulldiv

; 113  : 
; 114  : 	if (bPercentMode)

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bPercentMode, 0
  000b6	89 85 64 fe ff
	ff		 mov	 DWORD PTR _bytesPerSec$1$[ebp], eax
  000bc	89 95 68 fe ff
	ff		 mov	 DWORD PTR _bytesPerSec$2$[ebp], edx
  000c2	0f 84 f2 00 00
	00		 je	 $LN2@UpdateProg

; 115  : 	{
; 116  : 		double perc = (double) (100.0 * (bProgressBarReverse ? ((double) (TotalSize - byteOffset)) : ((double) byteOffset)) / (TotalSize == 0 ? 0.0001 : ((double) TotalSize)));

  000c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  000cf	74 1c		 je	 SHORT $LN28@UpdateProg
  000d1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _TotalSize
  000d7	8b cf		 mov	 ecx, edi
  000d9	2b 4d 08	 sub	 ecx, DWORD PTR _byteOffset$[ebp]
  000dc	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _TotalSize+4
  000e2	8b d6		 mov	 edx, esi
  000e4	1b d3		 sbb	 edx, ebx
  000e6	e8 00 00 00 00	 call	 __ltod3
  000eb	eb 16		 jmp	 SHORT $LN58@UpdateProg
$LN28@UpdateProg:
  000ed	8b 4d 08	 mov	 ecx, DWORD PTR _byteOffset$[ebp]
  000f0	8b d3		 mov	 edx, ebx
  000f2	e8 00 00 00 00	 call	 __ltod3
  000f7	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _TotalSize+4
  000fd	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _TotalSize
$LN58@UpdateProg:
  00103	8b c7		 mov	 eax, edi
  00105	f2 0f 11 85 5c
	fe ff ff	 movsd	 QWORD PTR _perc$1$[ebp], xmm0
  0010d	0b c6		 or	 eax, esi
  0010f	75 0a		 jne	 SHORT $LN30@UpdateProg
  00111	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f1a36e2eb1c432d
  00119	eb 0c		 jmp	 SHORT $LN31@UpdateProg
$LN30@UpdateProg:
  0011b	8b d6		 mov	 edx, esi
  0011d	8b cf		 mov	 ecx, edi
  0011f	e8 00 00 00 00	 call	 __ltod3
  00124	0f 28 c8	 movaps	 xmm1, xmm0
$LN31@UpdateProg:
  00127	f2 0f 10 85 5c
	fe ff ff	 movsd	 xmm0, QWORD PTR _perc$1$[ebp]
  0012f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  00137	f2 0f 5e c1	 divsd	 xmm0, xmm1

; 117  : 
; 118  : 		if (perc > 99.999999999)

  0013b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4058fffffffeed1f
  00143	76 2d		 jbe	 SHORT $LN4@UpdateProg

; 119  : 			wcscpy (text, GetString ("PROCESSED_PORTION_100_PERCENT"));

  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DMHMPBKC@PROCESSED_PORTION_100_PERCENT?$AA@
  0014a	e8 00 00 00 00	 call	 _GetString
  0014f	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _text$[ebp]
  00155	83 c4 04	 add	 esp, 4
  00158	2b d0		 sub	 edx, eax
  0015a	66 0f 1f 44 00
	00		 npad	 6
$LL32@UpdateProg:
  00160	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00163	8d 40 02	 lea	 eax, DWORD PTR [eax+2]
  00166	66 89 4c 02 fe	 mov	 WORD PTR [edx+eax-2], cx
  0016b	66 85 c9	 test	 cx, cx
  0016e	75 f0		 jne	 SHORT $LL32@UpdateProg
  00170	eb 27		 jmp	 SHORT $LN5@UpdateProg
$LN4@UpdateProg:

; 120  : 		else
; 121  : 			_snwprintf (text, sizeof text/2, GetString ("PROCESSED_PORTION_X_PERCENT"), perc);

  00172	83 ec 08	 sub	 esp, 8
  00175	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HDAHKLF@PROCESSED_PORTION_X_PERCENT?$AA@
  0017f	e8 00 00 00 00	 call	 _GetString
  00184	83 c4 04	 add	 esp, 4
  00187	50		 push	 eax
  00188	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  0018e	6a 64		 push	 100			; 00000064H
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 __snwprintf
  00196	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@UpdateProg:

; 122  : 
; 123  : 		wcscat (speed, L" ");

  00199	8d bd 6c fe ff
	ff		 lea	 edi, DWORD PTR _speed$[ebp]
  0019f	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL46@UpdateProg:
  001a2	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  001a6	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  001a9	66 85 c0	 test	 ax, ax
  001ac	75 f4		 jne	 SHORT $LL46@UpdateProg
  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  001b3	89 07		 mov	 DWORD PTR [edi], eax

; 124  : 	}

  001b5	e9 9f 00 00 00	 jmp	 $LN11@UpdateProg
$LN2@UpdateProg:

; 125  : 	else
; 126  : 	{
; 127  : 		GetSizeString (bytesDone, text);

  001ba	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  001c0	50		 push	 eax
  001c1	56		 push	 esi
  001c2	57		 push	 edi
  001c3	e8 00 00 00 00	 call	 _GetSizeString
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 		if (bytesDone < (unsigned __int64) BYTES_PER_MB * 1000000)

  001cb	81 fe f4 00 00
	00		 cmp	 esi, 244		; 000000f4H
  001d1	77 20		 ja	 SHORT $LN6@UpdateProg
  001d3	72 08		 jb	 SHORT $LN47@UpdateProg
  001d5	81 ff 00 00 00
	24		 cmp	 edi, 603979776		; 24000000H
  001db	73 16		 jae	 SHORT $LN6@UpdateProg
$LN47@UpdateProg:

; 129  : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_MB, GetString ("MB"));

  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_02LKLDBFPJ@MB?$AA@
  001e2	e8 00 00 00 00	 call	 _GetString
  001e7	0f ac f7 14	 shrd	 edi, esi, 20
  001eb	50		 push	 eax
  001ec	c1 ee 14	 shr	 esi, 20			; 00000014H
  001ef	56		 push	 esi
  001f0	57		 push	 edi
  001f1	eb 52		 jmp	 SHORT $LN59@UpdateProg
$LN6@UpdateProg:

; 130  : 		else if (bytesDone < (unsigned __int64) BYTES_PER_GB * 1000000)

  001f3	81 fe 90 d0 03
	00		 cmp	 esi, 250000		; 0003d090H
  001f9	77 1c		 ja	 SHORT $LN8@UpdateProg
  001fb	72 04		 jb	 SHORT $LN48@UpdateProg
  001fd	85 ff		 test	 edi, edi
  001ff	73 16		 jae	 SHORT $LN8@UpdateProg
$LN48@UpdateProg:

; 131  : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_GB, GetString ("GB"));

  00201	68 00 00 00 00	 push	 OFFSET ??_C@_02LHCEJACP@GB?$AA@
  00206	e8 00 00 00 00	 call	 _GetString
  0020b	0f ac f7 1e	 shrd	 edi, esi, 30
  0020f	50		 push	 eax
  00210	c1 ee 1e	 shr	 esi, 30			; 0000001eH
  00213	56		 push	 esi
  00214	57		 push	 edi
  00215	eb 2e		 jmp	 SHORT $LN59@UpdateProg
$LN8@UpdateProg:

; 132  : 		else if (bytesDone < (unsigned __int64) BYTES_PER_TB * 1000000)

  00217	81 fe 00 40 42
	0f		 cmp	 esi, 256000000		; 0f424000H
  0021d	77 15		 ja	 SHORT $LN10@UpdateProg
  0021f	72 04		 jb	 SHORT $LN49@UpdateProg
  00221	85 ff		 test	 edi, edi
  00223	73 0f		 jae	 SHORT $LN10@UpdateProg
$LN49@UpdateProg:

; 133  : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_TB, GetString ("TB"));

  00225	68 00 00 00 00	 push	 OFFSET ??_C@_02KJEEINAG@TB?$AA@
  0022a	e8 00 00 00 00	 call	 _GetString
  0022f	c1 ee 08	 shr	 esi, 8
  00232	eb 0d		 jmp	 SHORT $LN60@UpdateProg
$LN10@UpdateProg:

; 134  : 		else
; 135  : 			swprintf(text, L"%I64d %s ", bytesDone / BYTES_PER_PB, GetString ("PB"));

  00234	68 00 00 00 00	 push	 OFFSET ??_C@_02KOENCFNK@PB?$AA@
  00239	e8 00 00 00 00	 call	 _GetString
  0023e	c1 ee 12	 shr	 esi, 18			; 00000012H
$LN60@UpdateProg:
  00241	50		 push	 eax
  00242	6a 00		 push	 0
  00244	56		 push	 esi
$LN59@UpdateProg:
  00245	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 __swprintf
  00256	83 c4 18	 add	 esp, 24			; 00000018H
$LN11@UpdateProg:

; 136  : 	}
; 137  : 
; 138  : 	SetWindowTextW (GetDlgItem (hCurPage, IDC_BYTESWRITTEN), text);

  00259	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  0025f	50		 push	 eax
  00260	68 00 04 00 00	 push	 1024			; 00000400H
  00265	ff 35 00 00 00
	00		 push	 DWORD PTR _hCurPage
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00271	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowTextW@8
  00277	50		 push	 eax
  00278	ff d6		 call	 esi

; 139  : 
; 140  : 	if (!bShowStatus)

  0027a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bShowStatus, 0
  00281	75 6b		 jne	 SHORT $LN12@UpdateProg

; 141  : 	{
; 142  : 		GetSpeedString (bRWThroughput ? bytesPerSec*2 : bytesPerSec, speed);

  00283	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bRWThroughput, 0
  0028a	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _bytesPerSec$1$[ebp]
  00290	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR _bytesPerSec$2$[ebp]
  00296	74 06		 je	 SHORT $LN34@UpdateProg
  00298	0f a4 c1 01	 shld	 ecx, eax, 1
  0029c	03 c0		 add	 eax, eax
$LN34@UpdateProg:
  0029e	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _speed$[ebp]
  002a4	52		 push	 edx
  002a5	51		 push	 ecx
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 _GetSpeedString

; 143  : 		wcscat (speed, L" ");

  002ac	8d bd 6c fe ff
	ff		 lea	 edi, DWORD PTR _speed$[ebp]
  002b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  002b5	83 c7 fe	 add	 edi, -2			; fffffffeH
  002b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL50@UpdateProg:
  002c0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  002c4	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  002c7	66 85 c0	 test	 ax, ax
  002ca	75 f4		 jne	 SHORT $LL50@UpdateProg
  002cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  002d1	89 07		 mov	 DWORD PTR [edi], eax

; 144  : 		SetWindowTextW (GetDlgItem (hCurPage, IDC_WRITESPEED), speed);

  002d3	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _speed$[ebp]
  002d9	50		 push	 eax
  002da	68 01 04 00 00	 push	 1025			; 00000401H
  002df	ff 35 00 00 00
	00		 push	 DWORD PTR _hCurPage
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002eb	50		 push	 eax
  002ec	ff d6		 call	 esi
$LN12@UpdateProg:

; 145  : 	}
; 146  : 
; 147  : 	if (byteOffset < TotalSize)

  002ee	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR _TotalSize+4
  002f4	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _TotalSize
  002fa	8b 45 08	 mov	 eax, DWORD PTR _byteOffset$[ebp]
  002fd	3b df		 cmp	 ebx, edi
  002ff	0f 8f 44 01 00
	00		 jg	 $LN13@UpdateProg
  00305	7c 08		 jl	 SHORT $LN51@UpdateProg
  00307	3b c6		 cmp	 eax, esi
  00309	0f 83 3a 01 00
	00		 jae	 $LN13@UpdateProg
$LN51@UpdateProg:

; 148  : 	{
; 149  : 		int64 sec = (int64) ((bProgressBarReverse ? byteOffset : (TotalSize - byteOffset)) / (bytesPerSec == 0 ? 0.001 : bytesPerSec));

  0030f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  00316	74 06		 je	 SHORT $LN35@UpdateProg
  00318	8b f0		 mov	 esi, eax
  0031a	8b fb		 mov	 edi, ebx
  0031c	eb 04		 jmp	 SHORT $LN36@UpdateProg
$LN35@UpdateProg:
  0031e	2b f0		 sub	 esi, eax
  00320	1b fb		 sbb	 edi, ebx
$LN36@UpdateProg:
  00322	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _bytesPerSec$1$[ebp]
  00328	8b c1		 mov	 eax, ecx
  0032a	8b 95 68 fe ff
	ff		 mov	 edx, DWORD PTR _bytesPerSec$2$[ebp]
  00330	0b c2		 or	 eax, edx
  00332	75 12		 jne	 SHORT $LN37@UpdateProg
  00334	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0033c	f2 0f 11 85 5c
	fe ff ff	 movsd	 QWORD PTR tv606[ebp], xmm0
  00344	eb 0d		 jmp	 SHORT $LN38@UpdateProg
$LN37@UpdateProg:
  00346	e8 00 00 00 00	 call	 __ultod3
  0034b	f2 0f 11 85 5c
	fe ff ff	 movsd	 QWORD PTR tv606[ebp], xmm0
$LN38@UpdateProg:
  00353	8b d7		 mov	 edx, edi
  00355	8b ce		 mov	 ecx, esi
  00357	e8 00 00 00 00	 call	 __ltod3
  0035c	f2 0f 5e 85 5c
	fe ff ff	 divsd	 xmm0, QWORD PTR tv606[ebp]
  00364	e8 00 00 00 00	 call	 __dtol3

; 150  : 
; 151  : 		if (bytesPerSec == 0 || sec > 60 * 60 * 24 * 999)

  00369	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR _bytesPerSec$1$[ebp]
  0036f	0b 8d 68 fe ff
	ff		 or	 ecx, DWORD PTR _bytesPerSec$2$[ebp]
  00375	0f 84 81 00 00
	00		 je	 $LN16@UpdateProg
  0037b	85 d2		 test	 edx, edx
  0037d	7f 7d		 jg	 SHORT $LN16@UpdateProg
  0037f	7c 73		 jl	 SHORT $LN21@UpdateProg
  00381	3d 80 0a 25 05	 cmp	 eax, 86313600		; 05250a80H
  00386	77 74		 ja	 SHORT $LN16@UpdateProg

; 153  : 		else if (sec >= 60 * 60 * 24 * 2)

  00388	85 d2		 test	 edx, edx
  0038a	7c 68		 jl	 SHORT $LN21@UpdateProg
  0038c	7f 07		 jg	 SHORT $LN53@UpdateProg
  0038e	3d 00 a3 02 00	 cmp	 eax, 172800		; 0002a300H
  00393	72 0f		 jb	 SHORT $LN17@UpdateProg
$LN53@UpdateProg:

; 154  : 			swprintf (text, L"%I64d %s ", sec / (60 * 24 * 60), days);

  00395	ff 35 00 00 00
	00		 push	 DWORD PTR _days
  0039b	6a 00		 push	 0
  0039d	68 80 51 01 00	 push	 86400			; 00015180H
  003a2	eb 31		 jmp	 SHORT $LN64@UpdateProg
$LN17@UpdateProg:

; 155  : 		else if (sec >= 120 * 60)

  003a4	85 d2		 test	 edx, edx
  003a6	7c 4c		 jl	 SHORT $LN21@UpdateProg
  003a8	7f 07		 jg	 SHORT $LN54@UpdateProg
  003aa	3d 20 1c 00 00	 cmp	 eax, 7200		; 00001c20H
  003af	72 0f		 jb	 SHORT $LN19@UpdateProg
$LN54@UpdateProg:

; 156  : 			swprintf (text, L"%I64d %s ", sec / (60 * 60), hours);

  003b1	ff 35 00 00 00
	00		 push	 DWORD PTR _hours
  003b7	6a 00		 push	 0
  003b9	68 10 0e 00 00	 push	 3600			; 00000e10H
  003be	eb 15		 jmp	 SHORT $LN64@UpdateProg
$LN19@UpdateProg:

; 157  : 		else if (sec >= 120)

  003c0	85 d2		 test	 edx, edx
  003c2	7c 30		 jl	 SHORT $LN21@UpdateProg
  003c4	7f 05		 jg	 SHORT $LN55@UpdateProg
  003c6	83 f8 78	 cmp	 eax, 120		; 00000078H
  003c9	72 29		 jb	 SHORT $LN21@UpdateProg
$LN55@UpdateProg:

; 158  : 			swprintf (text, L"%I64d %s ", sec / 60, minutes);

  003cb	ff 35 00 00 00
	00		 push	 DWORD PTR _minutes
  003d1	6a 00		 push	 0
  003d3	6a 3c		 push	 60			; 0000003cH
$LN64@UpdateProg:
  003d5	52		 push	 edx
  003d6	50		 push	 eax
  003d7	e8 00 00 00 00	 call	 __alldiv
$LN65@UpdateProg:
  003dc	52		 push	 edx
  003dd	50		 push	 eax
  003de	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@GLDKIDIH@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 __swprintf
  003ef	83 c4 14	 add	 esp, 20			; 00000014H
  003f2	eb 27		 jmp	 SHORT $LN22@UpdateProg
$LN21@UpdateProg:

; 159  : 		else
; 160  : 			swprintf (text, L"%I64d %s ", sec, seconds);

  003f4	ff 35 00 00 00
	00		 push	 DWORD PTR _seconds
  003fa	eb e0		 jmp	 SHORT $LN65@UpdateProg
$LN16@UpdateProg:

; 152  : 			swprintf (text, L"%s ", GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE"));

  003fc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  00401	e8 00 00 00 00	 call	 _GetString
  00406	50		 push	 eax
  00407	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  0040d	68 00 00 00 00	 push	 OFFSET ??_C@_17GMPJMPF@?$AA?$CF?$AAs?$AA?5?$AA?$AA@
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 __swprintf
  00418	83 c4 10	 add	 esp, 16			; 00000010H
$LN22@UpdateProg:

; 161  : 
; 162  : 		SetWindowTextW (GetDlgItem (hCurPage, IDC_TIMEREMAIN), text);

  0041b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  00421	50		 push	 eax
  00422	68 03 04 00 00	 push	 1027			; 00000403H
  00427	ff 35 00 00 00
	00		 push	 DWORD PTR _hCurPage
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00433	50		 push	 eax
  00434	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  0043a	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR _TotalSize+4
  00440	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _TotalSize
  00446	8b 45 08	 mov	 eax, DWORD PTR _byteOffset$[ebp]
$LN13@UpdateProg:

; 163  : 	}
; 164  : 
; 165  : 	prevTime = time;
; 166  : 
; 167  : 	SendMessage (hProgressBar, PBM_SETPOS, 

  00449	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bProgressBarReverse, 0
  00450	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _time$1$[ebp]
  00456	89 0d 00 00 00
	00		 mov	 DWORD PTR _prevTime, ecx
  0045c	74 0a		 je	 SHORT $LN39@UpdateProg
  0045e	8b ce		 mov	 ecx, esi
  00460	8b d7		 mov	 edx, edi
  00462	2b c8		 sub	 ecx, eax
  00464	1b d3		 sbb	 edx, ebx
  00466	eb 04		 jmp	 SHORT $LN40@UpdateProg
$LN39@UpdateProg:
  00468	8b c8		 mov	 ecx, eax
  0046a	8b d3		 mov	 edx, ebx
$LN40@UpdateProg:
  0046c	8b c6		 mov	 eax, esi
  0046e	0b c7		 or	 eax, edi
  00470	75 05		 jne	 SHORT $LN41@UpdateProg
  00472	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00475	33 ff		 xor	 edi, edi
$LN41@UpdateProg:
  00477	6a 00		 push	 0
  00479	e8 00 00 00 00	 call	 __ltod3
  0047e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40c3880000000000
  00486	8b d7		 mov	 edx, edi
  00488	8b ce		 mov	 ecx, esi
  0048a	f2 0f 11 85 5c
	fe ff ff	 movsd	 QWORD PTR tv679[ebp], xmm0
  00492	e8 00 00 00 00	 call	 __ltod3
  00497	f2 0f 10 8d 5c
	fe ff ff	 movsd	 xmm1, QWORD PTR tv679[ebp]
  0049f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  004a3	f2 0f 2c c1	 cvttsd2si eax, xmm1
  004a7	50		 push	 eax
  004a8	68 02 04 00 00	 push	 1026			; 00000402H
  004ad	ff b5 54 fe ff
	ff		 push	 DWORD PTR _hProgressBar$1$[ebp]
  004b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 168  : 		(int) (10000.0 * (bProgressBarReverse ? (TotalSize - byteOffset) : byteOffset) / (TotalSize == 0 ? 1 : TotalSize)),
; 169  : 		0);
; 170  : 
; 171  : 	return bVolTransformThreadCancel;

  004b9	a1 00 00 00 00	 mov	 eax, DWORD PTR _bVolTransformThreadCancel

; 172  : }

  004be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c1	5f		 pop	 edi
  004c2	5e		 pop	 esi
  004c3	33 cd		 xor	 ecx, ebp
  004c5	5b		 pop	 ebx
  004c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004cb	8b e5		 mov	 esp, ebp
  004cd	5d		 pop	 ebp
  004ce	c3		 ret	 0
_UpdateProgressBarProc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\progress.c
;	COMDAT _UpdateProgressBar
_TEXT	SEGMENT
_byteOffset$ = 8					; size = 8
_UpdateProgressBar PROC					; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	return UpdateProgressBarProc (byteOffset);

  00003	ff 75 0c	 push	 DWORD PTR _byteOffset$[ebp+4]
  00006	ff 75 08	 push	 DWORD PTR _byteOffset$[ebp]
  00009	e8 00 00 00 00	 call	 _UpdateProgressBarProc
  0000e	83 c4 08	 add	 esp, 8

; 91   : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_UpdateProgressBar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\progress.c
;	COMDAT _InitProgressBar
_TEXT	SEGMENT
_totalBytes$ = 8					; size = 8
_bytesDone$ = 16					; size = 8
_bReverse$ = 24						; size = 4
_bIOThroughput$ = 28					; size = 4
_bDisplayStatus$ = 32					; size = 4
_bShowPercent$ = 36					; size = 4
_InitProgressBar PROC					; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 60   : 	HWND hProgressBar = GetDlgItem (hCurPage, nPbar);

  00004	ff 35 00 00 00
	00		 push	 DWORD PTR _nPbar
  0000a	ff 35 00 00 00
	00		 push	 DWORD PTR _hCurPage
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 61   : 	SendMessage (hProgressBar, PBM_SETRANGE32, 0, 10000);

  00016	68 10 27 00 00	 push	 10000			; 00002710H
  0001b	6a 00		 push	 0
  0001d	8b f8		 mov	 edi, eax
  0001f	68 06 04 00 00	 push	 1030			; 00000406H
  00024	57		 push	 edi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 62   : 	SendMessage (hProgressBar, PBM_SETSTEP, 1, 0);

  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	68 04 04 00 00	 push	 1028			; 00000404H
  00034	57		 push	 edi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 63   : 
; 64   : 	bProgressBarReverse = bReverse;

  0003b	8b 45 18	 mov	 eax, DWORD PTR _bReverse$[ebp]
  0003e	a3 00 00 00 00	 mov	 DWORD PTR _bProgressBarReverse, eax

; 65   : 	bRWThroughput = bIOThroughput;

  00043	8b 45 1c	 mov	 eax, DWORD PTR _bIOThroughput$[ebp]
  00046	a3 00 00 00 00	 mov	 DWORD PTR _bRWThroughput, eax

; 66   : 	bShowStatus = bDisplayStatus;

  0004b	8b 45 20	 mov	 eax, DWORD PTR _bDisplayStatus$[ebp]
  0004e	a3 00 00 00 00	 mov	 DWORD PTR _bShowStatus, eax

; 67   : 	bPercentMode = bShowPercent;

  00053	8b 45 24	 mov	 eax, DWORD PTR _bShowPercent$[ebp]

; 68   : 
; 69   : 	seconds = GetString ("SECONDS");

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_07JJOGDNLC@SECONDS?$AA@
  0005b	a3 00 00 00 00	 mov	 DWORD PTR _bPercentMode, eax
  00060	e8 00 00 00 00	 call	 _GetString

; 70   : 	minutes = GetString ("MINUTES");

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_07JPNPDFOO@MINUTES?$AA@
  0006a	a3 00 00 00 00	 mov	 DWORD PTR _seconds, eax
  0006f	e8 00 00 00 00	 call	 _GetString

; 71   : 	hours = GetString ("HOURS");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_05HFOIBCBM@HOURS?$AA@
  00079	a3 00 00 00 00	 mov	 DWORD PTR _minutes, eax
  0007e	e8 00 00 00 00	 call	 _GetString

; 72   : 	days = GetString ("DAYS");

  00083	68 00 00 00 00	 push	 OFFSET ??_C@_04EFPNNCJL@DAYS?$AA@
  00088	a3 00 00 00 00	 mov	 DWORD PTR _hours, eax
  0008d	e8 00 00 00 00	 call	 _GetString
  00092	83 c4 10	 add	 esp, 16			; 00000010H
  00095	a3 00 00 00 00	 mov	 DWORD PTR _days, eax

; 73   : 
; 74   : 	prevTime = startTime = GetTickCount ();

  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000a0	a3 00 00 00 00	 mov	 DWORD PTR _startTime, eax
  000a5	a3 00 00 00 00	 mov	 DWORD PTR _prevTime, eax

; 75   : 	TotalSize = totalBytes;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _totalBytes$[ebp]
  000ad	a3 00 00 00 00	 mov	 DWORD PTR _TotalSize, eax
  000b2	8b 45 0c	 mov	 eax, DWORD PTR _totalBytes$[ebp+4]
  000b5	a3 04 00 00 00	 mov	 DWORD PTR _TotalSize+4, eax

; 76   : 	resumedPointBytesDone = bytesDone;

  000ba	8b 45 10	 mov	 eax, DWORD PTR _bytesDone$[ebp]
  000bd	a3 00 00 00 00	 mov	 DWORD PTR _resumedPointBytesDone, eax
  000c2	8b 45 14	 mov	 eax, DWORD PTR _bytesDone$[ebp+4]
  000c5	a3 04 00 00 00	 mov	 DWORD PTR _resumedPointBytesDone+4, eax
  000ca	5f		 pop	 edi

; 77   : }

  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
_InitProgressBar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __swprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__swprintf PROC						; COMDAT

; 1451 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1452 :     int _Result;
; 1453 :     va_list _ArgList;
; 1454 :     __crt_va_start(_ArgList, _Format);
; 1455 :     _Result = __vswprintf_l(_Buffer, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00020	83 c9 ff	 or	 ecx, -1
  00023	83 c4 1c	 add	 esp, 28			; 0000001cH
  00026	85 c0		 test	 eax, eax
  00028	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     __crt_va_end(_ArgList);
; 1457 :     return _Result;
; 1458 : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
__swprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT ___vswprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
___vswprintf_l PROC					; COMDAT

; 1214 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1215 :     return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00020	83 c9 ff	 or	 ecx, -1
  00023	83 c4 1c	 add	 esp, 28			; 0000001cH
  00026	85 c0		 test	 eax, eax
  00028	0f 48 c1	 cmovs	 eax, ecx

; 1216 : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
___vswprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_l PROC					; COMDAT

; 1195 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1196 :     #pragma warning(push)
; 1197 :     #pragma warning(disable: 4996) // Deprecation
; 1198 :     return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1199 :     #pragma warning(pop)
; 1200 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vswprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_c_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_c_l PROC					; COMDAT

; 1158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1159 :     int const _Result = __stdio_common_vswprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vswprintf

; 1160 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1161 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1162 : 
; 1163 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1164 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __snwprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snwprintf PROC					; COMDAT

; 1673 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1674 :     int _Result;
; 1675 :     va_list _ArgList;
; 1676 :     __crt_va_start(_ArgList, _Format);
; 1677 : 
; 1678 :     #pragma warning(push)
; 1679 :     #pragma warning(disable: 4996) // Deprecation
; 1680 :     _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1681 :     #pragma warning(pop)
; 1682 : 
; 1683 :     __crt_va_end(_ArgList);
; 1684 :     return _Result;
; 1685 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vsnwprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnwprintf_l PROC					; COMDAT

; 1056 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1057 :     int const _Result = __stdio_common_vswprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vswprintf

; 1058 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1059 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1060 : 
; 1061 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1062 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
