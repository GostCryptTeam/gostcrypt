;	Static Name Aliases
;
	TITLE   ..\..\..\common\pkcs5.c
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
PUBLIC  ??_C@_0P@DFEB@HMAC?9Whirlpool?$AA@
PUBLIC  ??_C@_0BH@MMLH@HMAC?9GOST?5R?534?411?92012?$AA@
PUBLIC  ??_C@_0BF@ING@HMAC?9GOST?5R?534?411?994?$AA@
PUBLIC  ??_C@_09DKHJ@?$CIUnknown?$CJ?$AA@
EXTRN	_STRIBOG_finalize:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
EXTRN	_ThrowFatalException:NEAR
EXTRN	_STRIBOG_init:NEAR
EXTRN	_EraseMemory:NEAR
EXTRN	_STRIBOG_add:NEAR
_DATA      SEGMENT
??_C@_0P@DFEB@HMAC?9Whirlpool?$AA@	DB	'HMAC-Whirlpool',  00H
	ORG	$-15
??_C@_0BH@MMLH@HMAC?9GOST?5R?534?411?92012?$AA@	DB	'HMAC-GOST R 34.11-2012',  00H
	ORG	$-23
??_C@_0BF@ING@HMAC?9GOST?5R?534?411?994?$AA@	DB	'HMAC-GOST R 34.11-94',  00H
	ORG	$-21
??_C@_09DKHJ@?$CIUnknown?$CJ?$AA@	DB	'(Unknown)',  00H
_DATA      ENDS
_TEXT      SEGMENT
	ASSUME	CS: _TEXT
	PUBLIC	_hmac_truncate
_hmac_truncate	PROC NEAR	;  COMDAT
;|*** /**
;|***  *
;|***  *	\file Pkcs5.c
;|***  *	\brief Define the algorithm functions and iterations.
;|***  *	\version 1.3.1
;|***  *	\date 16/12/2016
;|***  *
;|***  */
;|*** 
;|*** /**
;|***  *
;|***  *	Legal Notice: Some portions of the source code contained in this file were
;|***  *	derived from the source code of Encryption for the Masses 2.02a, which is
;|***  *	Copyright (c) 1998-2000 Paul Le Roux and which is governed by the 'License
;|***  *	Agreement for Encryption for the Masses'. Modifications and additions to
;|***  *	the original source code (contained in this file) and all other portions
;|***  *	of this file are Copyright (c) 2003-2009 TrueCrypt Developers Association
;|***  *	and are governed by the TrueCrypt License 3.0 the full text of which is
;|***  *	contained in the file License.txt included in TrueCrypt binary and source
;|***  *	code distribution packages.
;|***  *
;|***  */
;|*** 
;|*** #include "Gstdefs.h"
;|*** 
;|*** #include <memory.h>
;|*** #ifndef GST_WINDOWS_BOOT
;|*** #include "Whirlpool.h"
;|*** #include "GostHash.h"
;|*** #endif
;|*** #include "Stribog.h"
;|*** #include "Pkcs5.h"
;|*** #include "Crypto.h"
;|*** 
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void hmac_truncate(char *d1, char* d2, int len)
;|***  *	\brief Truncate a word to length len.
;|***  *	\param[in] char * d1
;|***  *	\param[in] char * d2
;|***  *	\param[in] int len
;|***  *	\return void
;|***  *
;|***  */
;|*** void hmac_truncate
;|***   (
;|*** 	  char *d1,		/* data to be truncated */
;|*** 	  char *d2,		/* truncated data */
;|*** 	  int len		/* length in bytes to keep */
;|*** )
;|*** {
; Line 52
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	57 			push	di
	*** 000004	56 			push	si
;	d1 = 4
;	d2 = 6
;	len = 8
;	register si = i
;|*** 	int i;
;|*** 	for (i = 0; i < len; i++)
; Line 54
	*** 000005	33 f6 			xor	si,si
	*** 000007	8b 7e 04 		mov	di,WORD PTR [bp+4]	;d1
	*** 00000a	8b 56 06 		mov	dx,WORD PTR [bp+6]	;d2
	*** 00000d	8b 4e 08 		mov	cx,WORD PTR [bp+8]	;len
	*** 000010	eb 0b 			jmp	SHORT $L742
					$F615:
;|*** 		d2[i] = d1[i];
; Line 55
	*** 000012	8b de 			mov	bx,si
	*** 000014	03 df 			add	bx,di
	*** 000016	8a 07 			mov	al,BYTE PTR [bx]
	*** 000018	8b da 			mov	bx,dx
	*** 00001a	88 00 			mov	BYTE PTR [bx][si],al
;|*** 	for (i = 0; i < len; i++)
; Line 54
	*** 00001c	46 			inc	si
					$L742:
	*** 00001d	3b f1 			cmp	si,cx
	*** 00001f	7c f1 			jl	SHORT $F615
;|*** 		d2[i] = d1[i];
;|*** }
; Line 56
	*** 000021	5e 			pop	si
	*** 000022	5f 			pop	di
	*** 000023	c9 			leave	
	*** 000024	c3 			ret	

_hmac_truncate	ENDP
	PUBLIC	_hmac_stribog
_hmac_stribog	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void hmac_whirlpool(char *k,int lk, char *d, int ld,char *out, int t)
;|***  *	\brief Encrypt the data thanks to the secret key k, truncate data if bigger than algorithm block size
;|***  *	\param[in] char * k
;|***  *	\param[in] int lk
;|***  *	\param[in] char * d
;|***  *	\param[in] int ld
;|***  *	\param[in] char * out
;|***  *	\param[in] int t
;|***  *	\return void
;|***  *
;|***  */
;|*** #ifndef GST_WINDOWS_BOOT
;|*** void hmac_whirlpool
;|*** (
;|*** 	  char *k,		/* secret key */
;|*** 	  int lk,		/* length of the key in bytes */
;|*** 	  char *d,		/* data */
;|*** 	  int ld,		/* length of data in bytes */
;|*** 	  char *out,	/* output buffer, at least "t" bytes */
;|*** 	  int t
;|*** )
;|*** {
;|*** 	WHIRLPOOL_CTX ictx, octx;
;|*** 	char iwhi[WHIRLPOOL_DIGESTSIZE], owhi[WHIRLPOOL_DIGESTSIZE];
;|*** 	char key[WHIRLPOOL_DIGESTSIZE];
;|*** 	char buf[WHIRLPOOL_BLOCKSIZE];
;|*** 	int i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = whirlpool(key), as per HMAC specifications. */
;|*** 	if (lk > WHIRLPOOL_BLOCKSIZE)
;|*** 	{
;|*** 		WHIRLPOOL_CTX tctx;
;|*** 
;|*** 		WHIRLPOOL_init (&tctx);
;|*** 		WHIRLPOOL_add ((unsigned char *) k, lk * 8, &tctx);
;|*** 		WHIRLPOOL_finalize (&tctx, (unsigned char *) key);
;|*** 
;|*** 		k = key;
;|*** 		lk = WHIRLPOOL_DIGESTSIZE;
;|*** 
;|*** 		burn (&tctx, sizeof(tctx));		// Prevent leaks
;|*** 	}
;|*** 
;|*** 	/**** Inner Digest ****/
;|*** 
;|*** 	WHIRLPOOL_init (&ictx);
;|*** 
;|*** 	/* Pad the key for inner digest */
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
;|*** 	for (i = lk; i < WHIRLPOOL_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x36;
;|*** 
;|*** 	WHIRLPOOL_add ((unsigned char *) buf, WHIRLPOOL_BLOCKSIZE * 8, &ictx);
;|*** 	WHIRLPOOL_add ((unsigned char *) d, ld * 8, &ictx);
;|*** 
;|*** 	WHIRLPOOL_finalize (&ictx, (unsigned char *) iwhi);
;|*** 
;|*** 	/**** Outer Digest ****/
;|*** 
;|*** 	WHIRLPOOL_init (&octx);
;|*** 
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
;|*** 	for (i = lk; i < WHIRLPOOL_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x5C;
;|*** 
;|*** 	WHIRLPOOL_add ((unsigned char *) buf, WHIRLPOOL_BLOCKSIZE * 8, &octx);
;|*** 	WHIRLPOOL_add ((unsigned char *) iwhi, WHIRLPOOL_DIGESTSIZE * 8, &octx);
;|*** 
;|*** 	WHIRLPOOL_finalize (&octx, (unsigned char *) owhi);
;|*** 
;|*** 	/* truncate and print the results */
;|*** 	t = t > WHIRLPOOL_DIGESTSIZE ? WHIRLPOOL_DIGESTSIZE : t;
;|*** 	hmac_truncate (owhi, out, t);
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (&ictx, sizeof(ictx));
;|*** 	burn (&octx, sizeof(octx));
;|*** 	burn (owhi, sizeof(owhi));
;|*** 	burn (iwhi, sizeof(iwhi));
;|*** 	burn (buf, sizeof(buf));
;|*** 	burn (key, sizeof(key));
;|*** }
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void derive_u_whirlpool (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|***  *	\brief Iterate the hmac_whirlpool to encrypt multiples times
;|***  *	\param[in] int b
;|***  *	\param[in] char * u
;|***  *	\param[in] int iterations
;|***  *	\param[in] int salt_len
;|***  *	\param[in] char * salt
;|***  *	\param[in] int pwd_len
;|***  *	\param[in] char * pwd
;|***  *	\return void
;|***  *
;|***  */
;|*** void derive_u_whirlpool (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
;|*** 	char j[WHIRLPOOL_DIGESTSIZE], k[WHIRLPOOL_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
;|*** 	counter[3] = (char) b;
;|*** 	memcpy (init, salt, salt_len);	/* salt */
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
;|*** 	hmac_whirlpool (pwd, pwd_len, init, salt_len + 4, j, WHIRLPOOL_DIGESTSIZE);
;|*** 	memcpy (u, j, WHIRLPOOL_DIGESTSIZE);
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
;|*** 	{
;|*** 		hmac_whirlpool (pwd, pwd_len, j, WHIRLPOOL_DIGESTSIZE, k, WHIRLPOOL_DIGESTSIZE);
;|*** 		for (i = 0; i < WHIRLPOOL_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
;|*** 	burn (k, sizeof(k));
;|*** }
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void derive_key_whirlpool (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|***  *	\brief Change the blocks of the key iteratively
;|***  *	\param[in] int dklen
;|***  *	\param[in] char * dk
;|***  *	\param[in] int iterations
;|***  *	\param[in] int salt_len
;|***  *	\param[in] char * salt
;|***  *	\param[in] int pwd_len
;|***  *	\param[in] char * pwd
;|***  *	\return void
;|***  *
;|***  */
;|*** void derive_key_whirlpool (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
;|*** 	char u[WHIRLPOOL_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % WHIRLPOOL_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / WHIRLPOOL_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / WHIRLPOOL_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * WHIRLPOOL_DIGESTSIZE;
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
;|*** 	{
;|*** 		derive_u_whirlpool (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, WHIRLPOOL_DIGESTSIZE);
;|*** 		dk += WHIRLPOOL_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_whirlpool (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 	memcpy (dk, u, r);
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
;|*** }
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void hmac_gosthash(char *k, int32 lk, char *d, int32 ld, char *out)
;|***  *	\brief Gost hash : encrypt the data thanks to the key with gost algorithm
;|***  *	\param[in] char * k
;|***  *	\param[in] int32 lk
;|***  *	\param[in] char * d
;|***  *	\param[in] int32 ld
;|***  *	\param[in] char * out
;|***  *	\return void
;|***  *
;|***  */
;|*** void hmac_gosthash
;|*** (
;|*** 	  char *k,		/* secret key */
;|*** 	  int32 lk,		/* length of the key in bytes */
;|*** 	  char *d,		/* data */
;|*** 	  int32 ld,		/* length of data in bytes */
;|*** 	  char *out		/* output buffer */
;|*** )
;|*** {
;|*** 	gost_hash_ctx ctx;
;|*** 	char inner[GOSTHASH_DIGESTSIZE], outer[GOSTHASH_DIGESTSIZE];
;|*** 	char key[GOSTHASH_DIGESTSIZE];
;|*** 	char buf[GOSTHASH_BLOCKSIZE];
;|*** 	int32 i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = gosthash(key), as per HMAC specifications. */
;|*** 	if (lk > GOSTHASH_BLOCKSIZE)
;|*** 	{
;|*** 		GOSTHASH_init (&ctx);
;|*** 		GOSTHASH_add ((unsigned char *)k, lk, &ctx);
;|*** 		GOSTHASH_finalize (&ctx, (unsigned char *) key);
;|*** 
;|*** 		k = key;
;|*** 		lk = GOSTHASH_DIGESTSIZE;
;|*** 
;|*** 		burn (&ctx, sizeof(ctx));		// Prevent leaks
;|*** 	}
;|*** 
;|*** 	/**** Inner Digest ****/
;|*** 
;|*** 	GOSTHASH_init (&ctx);
;|*** 
;|*** 	/* Pad the key for inner digest */
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
;|*** 	for (i = lk; i < GOSTHASH_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x36;
;|*** 
;|*** 	GOSTHASH_add ((unsigned char *) buf, GOSTHASH_BLOCKSIZE, &ctx);
;|*** 	GOSTHASH_add ((unsigned char *) d, ld, &ctx);
;|*** 
;|*** 	GOSTHASH_finalize (&ctx, (unsigned char *) inner);
;|*** 
;|*** 	/**** Outer Digest ****/
;|*** 	
;|*** 	GOSTHASH_init (&ctx);
;|*** 
;|*** 	for (i = 0; i < lk; ++i)
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
;|*** 	for (i = lk; i < GOSTHASH_BLOCKSIZE; ++i)
;|*** 		buf[i] = 0x5C;
;|*** 
;|*** 	GOSTHASH_add ((unsigned char *) buf, GOSTHASH_BLOCKSIZE, &ctx);
;|*** 	GOSTHASH_add ((unsigned char *) inner, GOSTHASH_DIGESTSIZE, &ctx);
;|*** 
;|*** 	GOSTHASH_finalize (&ctx, (unsigned char *) out);
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (&ctx, sizeof(ctx));
;|*** 	burn (outer, sizeof(outer));
;|*** 	burn (inner, sizeof(inner));
;|*** 	burn (buf, sizeof(buf));
;|*** 	burn (key, sizeof(key));
;|*** }
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void derive_u_gosthash (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|***  *	\brief Iterate the gost hash
;|***  *	\param[in] int b
;|***  *	\param[in] char * u
;|***  *	\param[in] int iterations
;|***  *	\param[in] int salt_len
;|***  *	\param[in] char * salt
;|***  *	\param[in] int pwd_len
;|***  *	\param[in] char * pwd
;|***  *	\return void
;|***  *
;|***  */
;|*** void derive_u_gosthash (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
;|*** 	char j[GOSTHASH_DIGESTSIZE], k[GOSTHASH_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
;|*** 	counter[3] = (char) b;
;|*** 	memcpy (init, salt, salt_len);	/* salt */
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
;|*** 	hmac_gosthash (pwd, pwd_len, init, salt_len + 4, j);
;|*** 	memcpy (u, j, GOSTHASH_DIGESTSIZE);
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
;|*** 	{
;|*** 		hmac_gosthash (pwd, pwd_len, j, GOSTHASH_DIGESTSIZE, k);
;|*** 		for (i = 0; i < GOSTHASH_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
;|*** 	burn (k, sizeof(k));
;|*** }
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void derive_key_gosthash (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|***  *	\brief Make the derivative of the key (iterate and change bits in it)
;|***  *	\param[in] int dklen
;|***  *	\param[in] char * dk
;|***  *	\param[in] int iterations
;|***  *	\param[in] int salt_len
;|***  *	\param[in] char * salt
;|***  *	\param[in] int pwd_len
;|***  *	\param[in] char * pwd
;|***  *	\return void
;|***  *
;|***  */
;|*** void derive_key_gosthash (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
;|*** 	char u[GOSTHASH_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % GOSTHASH_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / GOSTHASH_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / GOSTHASH_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * GOSTHASH_DIGESTSIZE;
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
;|*** 	{
;|*** 		derive_u_gosthash (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, GOSTHASH_DIGESTSIZE);
;|*** 		dk += GOSTHASH_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_gosthash (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 	memcpy (dk, u, r);
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
;|*** }
;|*** 
;|*** #endif
;|*** 
;|*** /**
;|*** *
;|*** *	\fn void hmac_stribog (char * k, int32 lk, char * d, int32 ld, char * out)
;|*** *	\brief Make the derivative of the stribog key (iterate and change bits in it)
;|*** *	\param[in] char * k
;|*** *	\param[in] int32 lk
;|*** *	\param[in] char * d
;|*** *	\param[in] int32 ld
;|*** *	\param[in] char * out
;|*** *	\return void
;|*** *
;|*** */
;|*** void hmac_stribog
;|*** (
;|*** 	  char *k,		/* secret key */
;|*** 	  int32 lk,		/* length of the key in bytes */
;|*** 	  char *d,		/* data */
;|*** 	  int32 ld,		/* length of data in bytes */
;|*** 	  char *out		/* output buffer */
;|*** )
;|*** {
; Line 430
	*** 000000	c8 86 02 00 		enter	646,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	k = 4
;	lk = 6
;	d = 10
;	ld = 12
;	out = 16
;	ctx = -646
;	inner = -196
;	outer = -260
;	key = -68
;	buf = -132
;	i = -4
	*** 000006	8b 76 04 		mov	si,WORD PTR [bp+4]	;k
;|*** 	STRIBOG_CTX ctx;
;|*** 	char inner[STRIBOG_DIGESTSIZE], outer[STRIBOG_DIGESTSIZE];
;|*** 	char key[STRIBOG_DIGESTSIZE];
;|*** 	char buf[STRIBOG_BLOCKSIZE];
;|*** 	int32 i;
;|*** 
;|***     /* If the key is longer than the hash algorithm block size,
;|*** 	   let key = stribog(key), as per HMAC specifications. */
;|*** 	if (lk > STRIBOG_BLOCKSIZE)
; Line 439
	*** 000009	66 83 7e 06 40 		cmp	DWORD PTR [bp+6],64	;00000040H	;lk
	*** 00000e	7e 41 			jle	SHORT $I635
					$L733:
;|*** 	{
;|*** 		STRIBOG_init (&ctx);
; Line 441
	*** 000010	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 000014	50 			push	ax
	*** 000015	e8 00 00 		call	_STRIBOG_init
	*** 000018	5b 			pop	bx
;|*** 		STRIBOG_add (&ctx, (unsigned char *)k, lk);
; Line 442
	*** 000019	66 ff 76 06 		push	DWORD PTR [bp+6]	;lk
	*** 00001d	56 			push	si
	*** 00001e	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 000022	50 			push	ax
	*** 000023	e8 00 00 		call	_STRIBOG_add
	*** 000026	83 c4 08 		add	sp,8
;|*** 		STRIBOG_finalize (&ctx, (unsigned char *) key);
; Line 443
	*** 000029	8d 46 bc 		lea	ax,WORD PTR [bp-68]	;key
	*** 00002c	50 			push	ax
	*** 00002d	8d 8e 7a fd 		lea	cx,WORD PTR [bp-646]	;ctx
	*** 000031	51 			push	cx
	*** 000032	e8 00 00 		call	_STRIBOG_finalize
	*** 000035	83 c4 04 		add	sp,4
;|*** 
;|*** 		k = key;
; Line 445
	*** 000038	8d 76 bc 		lea	si,WORD PTR [bp-68]	;key
;|*** 		lk = STRIBOG_DIGESTSIZE;
; Line 446
	*** 00003b	66 c7 46 06 40 00 00 00 mov	DWORD PTR [bp+6],64	;00000040H	;lk
;|*** 
;|*** 		burn (&ctx, sizeof(ctx));		// Prevent leaks
; Line 448
	*** 000043	68 81 01 		push	385	;0181H
	*** 000046	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 00004a	50 			push	ax
	*** 00004b	e8 00 00 		call	_EraseMemory
	*** 00004e	83 c4 04 		add	sp,4
;|*** 	}
;|*** 
;|*** 	/**** Inner Digest ****/
;|*** 
;|*** 	STRIBOG_init (&ctx);
; Line 453
					$I635:
	*** 000051	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 000055	50 			push	ax
	*** 000056	e8 00 00 		call	_STRIBOG_init
	*** 000059	5b 			pop	bx
;|*** 
;|*** 	/* Pad the key for inner digest */
;|*** 	for (i = 0; i < lk; ++i)
; Line 456
	*** 00005a	66 c7 46 fc 00 00 00 00 mov	DWORD PTR [bp-4],0	;i
	*** 000062	89 76 04 		mov	WORD PTR [bp+4],si	;k
					$F636:
	*** 000065	66 8b 46 06 		mov	eax,DWORD PTR [bp+6]	;lk
	*** 000069	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 00006c	66 39 46 fc 		cmp	DWORD PTR [bp-4],eax	;i
	*** 000070	7d 13 			jge	SHORT $FB638
					$L734:
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
; Line 457
	*** 000072	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;i
	*** 000075	8a 00 			mov	al,BYTE PTR [bx][si]
	*** 000077	8b fb 			mov	di,bx
	*** 000079	34 36 			xor	al,54	;0036H
	*** 00007b	88 83 7c ff 		mov	BYTE PTR [bp-132][di],al
;|*** 	for (i = 0; i < lk; ++i)
; Line 456
	*** 00007f	66 ff 46 fc 		inc	DWORD PTR [bp-4]	;i
	*** 000083	eb e0 			jmp	SHORT $F636
;|*** 		buf[i] = (char) (k[i] ^ 0x36);
; Line 457
					$FB638:
;|*** 	for (i = lk; i < STRIBOG_BLOCKSIZE; ++i)
; Line 458
	*** 000085	89 46 fc 		mov	WORD PTR [bp-4],ax	;i
	*** 000088	89 56 fe 		mov	WORD PTR [bp-2],dx
					$F639:
	*** 00008b	66 83 7e fc 40 		cmp	DWORD PTR [bp-4],64	;00000040H	;i
	*** 000090	7d 0e 			jge	SHORT $FB641
					$L735:
;|*** 		buf[i] = 0x36;
; Line 459
	*** 000092	8b 7e fc 		mov	di,WORD PTR [bp-4]	;i
	*** 000095	c6 83 7c ff 36 		mov	BYTE PTR [bp-132][di],54	;0036H
;|*** 	for (i = lk; i < STRIBOG_BLOCKSIZE; ++i)
; Line 458
	*** 00009a	66 ff 46 fc 		inc	DWORD PTR [bp-4]	;i
	*** 00009e	eb eb 			jmp	SHORT $F639
;|*** 		buf[i] = 0x36;
; Line 459
					$FB641:
;|*** 
;|*** 	STRIBOG_add (&ctx, (unsigned char *) buf, STRIBOG_BLOCKSIZE);
; Line 461
	*** 0000a0	6a 00 			push	0
	*** 0000a2	6a 40 			push	64	;0040H
	*** 0000a4	8d 86 7c ff 		lea	ax,WORD PTR [bp-132]	;buf
	*** 0000a8	50 			push	ax
	*** 0000a9	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 0000ad	50 			push	ax
	*** 0000ae	e8 00 00 		call	_STRIBOG_add
	*** 0000b1	83 c4 08 		add	sp,8
;|*** 	STRIBOG_add (&ctx, (unsigned char *) d, ld);
; Line 462
	*** 0000b4	66 ff 76 0c 		push	DWORD PTR [bp+12]	;ld
	*** 0000b8	ff 76 0a 		push	WORD PTR [bp+10]	;d
	*** 0000bb	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 0000bf	50 			push	ax
	*** 0000c0	e8 00 00 		call	_STRIBOG_add
	*** 0000c3	83 c4 08 		add	sp,8
;|*** 
;|*** 	STRIBOG_finalize (&ctx, (unsigned char *) inner);
; Line 464
	*** 0000c6	8d 86 3c ff 		lea	ax,WORD PTR [bp-196]	;inner
	*** 0000ca	50 			push	ax
	*** 0000cb	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 0000cf	50 			push	ax
	*** 0000d0	e8 00 00 		call	_STRIBOG_finalize
	*** 0000d3	83 c4 04 		add	sp,4
;|*** 
;|*** 	/**** Outer Digest ****/
;|*** 	
;|*** 	STRIBOG_init (&ctx);
; Line 468
	*** 0000d6	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 0000da	50 			push	ax
	*** 0000db	e8 00 00 		call	_STRIBOG_init
	*** 0000de	5b 			pop	bx
;|*** 
;|*** 	for (i = 0; i < lk; ++i)
; Line 470
	*** 0000df	66 c7 46 fc 00 00 00 00 mov	DWORD PTR [bp-4],0	;i
					$F642:
	*** 0000e7	66 8b 46 06 		mov	eax,DWORD PTR [bp+6]	;lk
	*** 0000eb	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 0000ee	66 39 46 fc 		cmp	DWORD PTR [bp-4],eax	;i
	*** 0000f2	7d 13 			jge	SHORT $FB644
					$L736:
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
; Line 471
	*** 0000f4	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;i
	*** 0000f7	8a 00 			mov	al,BYTE PTR [bx][si]
	*** 0000f9	8b fb 			mov	di,bx
	*** 0000fb	34 5c 			xor	al,92	;005cH
	*** 0000fd	88 83 7c ff 		mov	BYTE PTR [bp-132][di],al
;|*** 	for (i = 0; i < lk; ++i)
; Line 470
	*** 000101	66 ff 46 fc 		inc	DWORD PTR [bp-4]	;i
	*** 000105	eb e0 			jmp	SHORT $F642
;|*** 		buf[i] = (char) (k[i] ^ 0x5C);
; Line 471
					$FB644:
;|*** 	for (i = lk; i < STRIBOG_BLOCKSIZE; ++i)
; Line 472
	*** 000107	89 46 fc 		mov	WORD PTR [bp-4],ax	;i
	*** 00010a	89 56 fe 		mov	WORD PTR [bp-2],dx
					$F645:
	*** 00010d	66 83 7e fc 40 		cmp	DWORD PTR [bp-4],64	;00000040H	;i
	*** 000112	7d 0e 			jge	SHORT $FB647
					$L737:
;|*** 		buf[i] = 0x5C;
; Line 473
	*** 000114	8b 76 fc 		mov	si,WORD PTR [bp-4]	;i
	*** 000117	c6 82 7c ff 5c 		mov	BYTE PTR [bp-132][si],92	;005cH
;|*** 	for (i = lk; i < STRIBOG_BLOCKSIZE; ++i)
; Line 472
	*** 00011c	66 ff 46 fc 		inc	DWORD PTR [bp-4]	;i
	*** 000120	eb eb 			jmp	SHORT $F645
;|*** 		buf[i] = 0x5C;
; Line 473
					$FB647:
;|*** 
;|*** 	STRIBOG_add (&ctx, (unsigned char *) buf, STRIBOG_BLOCKSIZE);
; Line 475
	*** 000122	6a 00 			push	0
	*** 000124	6a 40 			push	64	;0040H
	*** 000126	8d 86 7c ff 		lea	ax,WORD PTR [bp-132]	;buf
	*** 00012a	50 			push	ax
	*** 00012b	8d 8e 7a fd 		lea	cx,WORD PTR [bp-646]	;ctx
	*** 00012f	51 			push	cx
	*** 000130	e8 00 00 		call	_STRIBOG_add
	*** 000133	83 c4 08 		add	sp,8
;|*** 	STRIBOG_add (&ctx, (unsigned char *) inner, STRIBOG_DIGESTSIZE);
; Line 476
	*** 000136	6a 00 			push	0
	*** 000138	6a 40 			push	64	;0040H
	*** 00013a	8d 86 3c ff 		lea	ax,WORD PTR [bp-196]	;inner
	*** 00013e	50 			push	ax
	*** 00013f	8d 8e 7a fd 		lea	cx,WORD PTR [bp-646]	;ctx
	*** 000143	51 			push	cx
	*** 000144	e8 00 00 		call	_STRIBOG_add
	*** 000147	83 c4 08 		add	sp,8
;|*** 
;|*** 	STRIBOG_finalize (&ctx, (unsigned char *) out);
; Line 478
	*** 00014a	ff 76 10 		push	WORD PTR [bp+16]	;out
	*** 00014d	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 000151	50 			push	ax
	*** 000152	e8 00 00 		call	_STRIBOG_finalize
	*** 000155	83 c4 04 		add	sp,4
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (&ctx, sizeof(ctx));
; Line 481
	*** 000158	68 81 01 		push	385	;0181H
	*** 00015b	8d 86 7a fd 		lea	ax,WORD PTR [bp-646]	;ctx
	*** 00015f	50 			push	ax
	*** 000160	e8 00 00 		call	_EraseMemory
	*** 000163	83 c4 04 		add	sp,4
;|*** 	burn (outer, sizeof(outer));
; Line 482
	*** 000166	6a 40 			push	64	;0040H
	*** 000168	8d 86 fc fe 		lea	ax,WORD PTR [bp-260]	;outer
	*** 00016c	50 			push	ax
	*** 00016d	e8 00 00 		call	_EraseMemory
	*** 000170	83 c4 04 		add	sp,4
;|*** 	burn (inner, sizeof(inner));
; Line 483
	*** 000173	6a 40 			push	64	;0040H
	*** 000175	8d 86 3c ff 		lea	ax,WORD PTR [bp-196]	;inner
	*** 000179	50 			push	ax
	*** 00017a	e8 00 00 		call	_EraseMemory
	*** 00017d	83 c4 04 		add	sp,4
;|*** 	burn (buf, sizeof(buf));
; Line 484
	*** 000180	6a 40 			push	64	;0040H
	*** 000182	8d 86 7c ff 		lea	ax,WORD PTR [bp-132]	;buf
	*** 000186	50 			push	ax
	*** 000187	e8 00 00 		call	_EraseMemory
	*** 00018a	83 c4 04 		add	sp,4
;|*** 	burn (key, sizeof(key));
; Line 485
	*** 00018d	6a 40 			push	64	;0040H
	*** 00018f	8d 46 bc 		lea	ax,WORD PTR [bp-68]	;key
	*** 000192	50 			push	ax
	*** 000193	e8 00 00 		call	_EraseMemory
	*** 000196	83 c4 04 		add	sp,4
;|*** }
; Line 486
	*** 000199	5e 			pop	si
	*** 00019a	5f 			pop	di
	*** 00019b	c9 			leave	
	*** 00019c	c3 			ret	

_hmac_stribog	ENDP
	PUBLIC	_derive_u_stribog
_derive_u_stribog	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void derive_u_stribog (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|***  *	\brief Iterate the stribog algorithm
;|***  *	\param[in] int b
;|***  *	\param[in] char * u
;|***  *	\param[in] int iterations
;|***  *	\param[in] int salt_len
;|***  *	\param[in] char * salt
;|***  *	\param[in] int pwd_len
;|***  *	\param[in] char * pwd
;|***  *	\return void
;|***  *
;|***  */
;|*** void derive_u_stribog (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *u, int b)
;|*** {
; Line 503
	*** 000000	c8 08 01 00 		enter	264,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	pwd = 4
;	pwd_len = 6
;	salt = 8
;	salt_len = 10
;	iterations = 12
;	u = 14
;	b = 16
;	j = -72
;	k = -136
;	init = -264
;	counter = -8
;	c = -4
;	i = -2
	*** 000006	8b 76 0a 		mov	si,WORD PTR [bp+10]	;salt_len
;|*** 	char j[STRIBOG_DIGESTSIZE], k[STRIBOG_DIGESTSIZE];
;|*** 	char init[128];
;|*** 	char counter[4];
;|*** 	int c, i;
;|*** 
;|*** 	/* iteration 1 */
;|*** 	memset (counter, 0, 4);
; Line 510
	*** 000009	6a 04 			push	4
	*** 00000b	6a 00 			push	0
	*** 00000d	8d 46 f8 		lea	ax,WORD PTR [bp-8]	;counter
	*** 000010	50 			push	ax
	*** 000011	e8 00 00 		call	_memset
	*** 000014	83 c4 06 		add	sp,6
;|*** 	counter[3] = (char) b;
; Line 511
	*** 000017	8a 46 10 		mov	al,BYTE PTR [bp+16]	;b
	*** 00001a	88 46 fb 		mov	BYTE PTR [bp-5],al
;|*** 	memcpy (init, salt, salt_len);	/* salt */
; Line 512
	*** 00001d	56 			push	si
	*** 00001e	ff 76 08 		push	WORD PTR [bp+8]	;salt
	*** 000021	8d 86 f8 fe 		lea	ax,WORD PTR [bp-264]	;init
	*** 000025	50 			push	ax
	*** 000026	e8 00 00 		call	_memcpy
	*** 000029	83 c4 06 		add	sp,6
;|*** 	memcpy (&init[salt_len], counter, 4);	/* big-endian block number */
; Line 513
	*** 00002c	6a 04 			push	4
	*** 00002e	8d 46 f8 		lea	ax,WORD PTR [bp-8]	;counter
	*** 000031	50 			push	ax
	*** 000032	8d 82 f8 fe 		lea	ax,WORD PTR [bp-264][si]
	*** 000036	50 			push	ax
	*** 000037	e8 00 00 		call	_memcpy
	*** 00003a	83 c4 06 		add	sp,6
;|*** 	hmac_stribog (pwd, pwd_len, init, salt_len + 4, j);
; Line 514
	*** 00003d	8d 46 b8 		lea	ax,WORD PTR [bp-72]	;j
	*** 000040	50 			push	ax
	*** 000041	8d 44 04 		lea	ax,WORD PTR [si+4]
	*** 000044	99 			cwd	
	*** 000045	52 			push	dx
	*** 000046	50 			push	ax
	*** 000047	8d 86 f8 fe 		lea	ax,WORD PTR [bp-264]	;init
	*** 00004b	50 			push	ax
	*** 00004c	8b 46 06 		mov	ax,WORD PTR [bp+6]	;pwd_len
	*** 00004f	99 			cwd	
	*** 000050	52 			push	dx
	*** 000051	50 			push	ax
	*** 000052	ff 76 04 		push	WORD PTR [bp+4]	;pwd
	*** 000055	e8 00 00 		call	_hmac_stribog
	*** 000058	83 c4 0e 		add	sp,14	;000eH
;|*** 	memcpy (u, j, STRIBOG_DIGESTSIZE);
; Line 515
	*** 00005b	6a 40 			push	64	;0040H
	*** 00005d	8d 46 b8 		lea	ax,WORD PTR [bp-72]	;j
	*** 000060	50 			push	ax
	*** 000061	ff 76 0e 		push	WORD PTR [bp+14]	;u
	*** 000064	e8 00 00 		call	_memcpy
	*** 000067	83 c4 06 		add	sp,6
;|*** 
;|*** 	/* remaining iterations */
;|*** 	for (c = 1; c < iterations; c++)
; Line 518
	*** 00006a	c7 46 fc 01 00 		mov	WORD PTR [bp-4],1	;c
	*** 00006f	eb 43 			jmp	SHORT $L744
					$F669:
;|*** 	{
;|*** 		hmac_stribog (pwd, pwd_len, j, STRIBOG_DIGESTSIZE, k);
; Line 520
	*** 000071	8d 86 78 ff 		lea	ax,WORD PTR [bp-136]	;k
	*** 000075	50 			push	ax
	*** 000076	6a 00 			push	0
	*** 000078	6a 40 			push	64	;0040H
	*** 00007a	8d 46 b8 		lea	ax,WORD PTR [bp-72]	;j
	*** 00007d	50 			push	ax
	*** 00007e	8b 46 06 		mov	ax,WORD PTR [bp+6]	;pwd_len
	*** 000081	99 			cwd	
	*** 000082	52 			push	dx
	*** 000083	50 			push	ax
	*** 000084	ff 76 04 		push	WORD PTR [bp+4]	;pwd
	*** 000087	e8 00 00 		call	_hmac_stribog
	*** 00008a	83 c4 0e 		add	sp,14	;000eH
;|*** 		for (i = 0; i < STRIBOG_DIGESTSIZE; i++)
; Line 521
	*** 00008d	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;i
	*** 000092	8b 76 fe 		mov	si,WORD PTR [bp-2]	;i
	*** 000095	8b 7e 0e 		mov	di,WORD PTR [bp+14]	;u
	*** 000098	eb 12 			jmp	SHORT $L743
					$F672:
;|*** 		{
;|*** 			u[i] ^= k[i];
; Line 523
	*** 00009a	8a 82 78 ff 		mov	al,BYTE PTR [bp-136][si]
	*** 00009e	8b de 			mov	bx,si
	*** 0000a0	03 df 			add	bx,di
	*** 0000a2	30 07 			xor	BYTE PTR [bx],al
;|*** 			j[i] = k[i];
; Line 524
	*** 0000a4	8a 82 78 ff 		mov	al,BYTE PTR [bp-136][si]
	*** 0000a8	88 42 b8 		mov	BYTE PTR [bp-72][si],al
;|*** 		for (i = 0; i < STRIBOG_DIGESTSIZE; i++)
; Line 521
	*** 0000ab	46 			inc	si
					$L743:
	*** 0000ac	83 fe 40 		cmp	si,64	;0040H
	*** 0000af	7c e9 			jl	SHORT $F672
;|*** 	for (c = 1; c < iterations; c++)
; Line 518
	*** 0000b1	ff 46 fc 		inc	WORD PTR [bp-4]	;c
					$L744:
	*** 0000b4	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;iterations
	*** 0000b7	39 46 fc 		cmp	WORD PTR [bp-4],ax	;c
	*** 0000ba	7c b5 			jl	SHORT $F669
;|*** 	{
;|*** 		hmac_stribog (pwd, pwd_len, j, STRIBOG_DIGESTSIZE, k);
;|*** 		for (i = 0; i < STRIBOG_DIGESTSIZE; i++)
;|*** 		{
;|*** 			u[i] ^= k[i];
;|*** 			j[i] = k[i];
;|*** 		}
;|*** 	}
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (j, sizeof(j));
; Line 529
	*** 0000bc	6a 40 			push	64	;0040H
	*** 0000be	8d 46 b8 		lea	ax,WORD PTR [bp-72]	;j
	*** 0000c1	50 			push	ax
	*** 0000c2	e8 00 00 		call	_EraseMemory
	*** 0000c5	83 c4 04 		add	sp,4
;|*** 	burn (k, sizeof(k));
; Line 530
	*** 0000c8	6a 40 			push	64	;0040H
	*** 0000ca	8d 86 78 ff 		lea	ax,WORD PTR [bp-136]	;k
	*** 0000ce	50 			push	ax
	*** 0000cf	e8 00 00 		call	_EraseMemory
	*** 0000d2	83 c4 04 		add	sp,4
;|*** }
; Line 531
	*** 0000d5	5e 			pop	si
	*** 0000d6	5f 			pop	di
	*** 0000d7	c9 			leave	
	*** 0000d8	c3 			ret	

_derive_u_stribog	ENDP
	PUBLIC	_derive_key_stribog
_derive_key_stribog	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void derive_key_stribog (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|***  *	\brief Derive the stribog key (cahnge the bits iteratively)
;|***  *	\param[in] int dklen
;|***  *	\param[in] char * dk
;|***  *	\param[in] int iterations
;|***  *	\param[in] int salt_len
;|***  *	\param[in] char * salt
;|***  *	\param[in] int pwd_len
;|***  *	\param[in] char * pwd
;|***  *	\return void
;|***  *
;|***  */
;|*** void derive_key_stribog (char *pwd, int pwd_len, char *salt, int salt_len, int iterations, char *dk, int dklen)
;|*** {
; Line 548
	*** 000000	c8 46 00 00 		enter	70,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	pwd = 4
;	pwd_len = 6
;	salt = 8
;	salt_len = 10
;	iterations = 12
;	dk = 14
;	dklen = 16
;	u = -70
;	b = -2
;	l = -4
;	r = -6
	*** 000006	8b 5e 10 		mov	bx,WORD PTR [bp+16]	;dklen
;|*** 	char u[STRIBOG_DIGESTSIZE];
;|*** 	int b, l, r;
;|*** 
;|*** 	if (dklen % STRIBOG_DIGESTSIZE)
;|*** 	{
;|*** 		l = 1 + dklen / STRIBOG_DIGESTSIZE;
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		l = dklen / STRIBOG_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	r = dklen - (l - 1) * STRIBOG_DIGESTSIZE;
; Line 561
	*** 000009	f6 c3 3f 		test	bl,63	;003fH
	*** 00000c	74 0e 			je	SHORT $I694
	*** 00000e	8b c3 			mov	ax,bx
	*** 000010	99 			cwd	
	*** 000011	83 e2 3f 		and	dx,63	;003fH
	*** 000014	03 c2 			add	ax,dx
	*** 000016	c1 f8 06 		sar	ax,6
	*** 000019	40 			inc	ax
	*** 00001a	eb 0b 			jmp	SHORT $I695
					$I694:
	*** 00001c	8b c3 			mov	ax,bx
	*** 00001e	99 			cwd	
	*** 00001f	83 e2 3f 		and	dx,63	;003fH
	*** 000022	03 c2 			add	ax,dx
	*** 000024	c1 f8 06 		sar	ax,6
					$I695:
	*** 000027	89 46 fc 		mov	WORD PTR [bp-4],ax	;l
	*** 00002a	48 			dec	ax
	*** 00002b	f7 d8 			neg	ax
	*** 00002d	c1 e0 06 		shl	ax,6
	*** 000030	03 c3 			add	ax,bx
	*** 000032	89 46 fa 		mov	WORD PTR [bp-6],ax	;r
;|*** 
;|*** 	/* first l - 1 blocks */
;|*** 	for (b = 1; b < l; b++)
; Line 564
	*** 000035	be 01 00 		mov	si,1
	*** 000038	8b 7e 0e 		mov	di,WORD PTR [bp+14]	;dk
	*** 00003b	eb 27 			jmp	SHORT $L745
					$F696:
;|*** 	{
;|*** 		derive_u_stribog (pwd, pwd_len, salt, salt_len, iterations, u, b);
; Line 566
	*** 00003d	56 			push	si
	*** 00003e	8d 46 ba 		lea	ax,WORD PTR [bp-70]	;u
	*** 000041	50 			push	ax
	*** 000042	66 ff 76 0a 		push	DWORD PTR [bp+10]	;salt_len
	*** 000046	66 ff 76 06 		push	DWORD PTR [bp+6]	;pwd_len
	*** 00004a	ff 76 04 		push	WORD PTR [bp+4]	;pwd
	*** 00004d	e8 00 00 		call	_derive_u_stribog
	*** 000050	83 c4 0e 		add	sp,14	;000eH
;|*** 		memcpy (dk, u, STRIBOG_DIGESTSIZE);
; Line 567
	*** 000053	6a 40 			push	64	;0040H
	*** 000055	8d 46 ba 		lea	ax,WORD PTR [bp-70]	;u
	*** 000058	50 			push	ax
	*** 000059	57 			push	di
	*** 00005a	e8 00 00 		call	_memcpy
	*** 00005d	83 c4 06 		add	sp,6
;|*** 		dk += STRIBOG_DIGESTSIZE;
; Line 568
	*** 000060	83 c7 40 		add	di,64	;0040H
;|*** 	for (b = 1; b < l; b++)
; Line 564
	*** 000063	46 			inc	si
					$L745:
	*** 000064	39 76 fc 		cmp	WORD PTR [bp-4],si	;l
	*** 000067	7f d4 			jg	SHORT $F696
	*** 000069	89 76 fe 		mov	WORD PTR [bp-2],si	;b
;|*** 	{
;|*** 		derive_u_stribog (pwd, pwd_len, salt, salt_len, iterations, u, b);
;|*** 		memcpy (dk, u, STRIBOG_DIGESTSIZE);
;|*** 		dk += STRIBOG_DIGESTSIZE;
;|*** 	}
;|*** 
;|*** 	/* last block */
;|*** 	derive_u_stribog (pwd, pwd_len, salt, salt_len, iterations, u, b);
; Line 572
	*** 00006c	56 			push	si
	*** 00006d	8d 46 ba 		lea	ax,WORD PTR [bp-70]	;u
	*** 000070	50 			push	ax
	*** 000071	66 ff 76 0a 		push	DWORD PTR [bp+10]	;salt_len
	*** 000075	66 ff 76 06 		push	DWORD PTR [bp+6]	;pwd_len
	*** 000079	ff 76 04 		push	WORD PTR [bp+4]	;pwd
	*** 00007c	e8 00 00 		call	_derive_u_stribog
	*** 00007f	83 c4 0e 		add	sp,14	;000eH
;|*** 	memcpy (dk, u, r);
; Line 573
	*** 000082	ff 76 fa 		push	WORD PTR [bp-6]	;r
	*** 000085	8d 46 ba 		lea	ax,WORD PTR [bp-70]	;u
	*** 000088	50 			push	ax
	*** 000089	57 			push	di
	*** 00008a	e8 00 00 		call	_memcpy
	*** 00008d	83 c4 06 		add	sp,6
;|*** 
;|*** 
;|*** 	/* Prevent possible leaks. */
;|*** 	burn (u, sizeof(u));
; Line 577
	*** 000090	6a 40 			push	64	;0040H
	*** 000092	8d 46 ba 		lea	ax,WORD PTR [bp-70]	;u
	*** 000095	50 			push	ax
	*** 000096	e8 00 00 		call	_EraseMemory
	*** 000099	83 c4 04 		add	sp,4
;|*** }
; Line 578
	*** 00009c	5e 			pop	si
	*** 00009d	5f 			pop	di
	*** 00009e	c9 			leave	
	*** 00009f	c3 			ret	

_derive_key_stribog	ENDP
	PUBLIC	_get_pkcs5_prf_name
_get_pkcs5_prf_name	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn char *get_pkcs5_prf_name (int pkcs5_prf_id)
;|***  *	\brief return the name of the algorithm depending on the pkcs5_prf_id
;|***  *	\param[in] int pkcs5_prf_id
;|***  *	\return "HMAC-Whirlpool" switch (pkcs5_prf_id) case WHIRLPOOL
;|***  *			"HMAC-GOST R 34.11-2012" switch (pkcs5_prf_id) case STRIBOG
;|***  *			"HMAC-GOST R 34.11-94" switch (pkcs5_prf_id) case GOSTHASH
;|***  *			"(Unknown)" switch (pkcs5_prf_id) case default
;|***  *
;|***  */
;|*** char *get_pkcs5_prf_name (int pkcs5_prf_id)
;|*** {
; Line 592
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	pkcs5_prf_id = 4
;|*** 	switch (pkcs5_prf_id)
; Line 593
	*** 000003	8b 46 04 		mov	ax,WORD PTR [bp+4]	;pkcs5_prf_id
;|*** 	{
;|*** 	case WHIRLPOOL:	
;|*** 		return "HMAC-Whirlpool";
;|*** 	case STRIBOG:
;|*** 		return "HMAC-GOST R 34.11-2012";
;|*** 	case GOSTHASH:
;|*** 		return "HMAC-GOST R 34.11-94";
;|*** 	default:		
;|*** 		return "(Unknown)";
;|*** 	}
; Line 603
	*** 000006	48 			dec	ax
	*** 000007	74 0b 			je	SHORT $SC708
	*** 000009	48 			dec	ax
	*** 00000a	74 0d 			je	SHORT $SC710
	*** 00000c	48 			dec	ax
	*** 00000d	74 0f 			je	SHORT $SC706
;|*** 		return "(Unknown)";
; Line 602
	*** 00000f	b8 00 00 		mov	ax,OFFSET DGROUP:??_C@_09DKHJ@?$CIUnknown?$CJ?$AA@
	*** 000012	c9 			leave	
	*** 000013	c3 			ret	
;|*** 	case STRIBOG:
; Line 597
					$SC708:
;|*** 		return "HMAC-GOST R 34.11-2012";
; Line 598
	*** 000014	b8 00 00 		mov	ax,OFFSET DGROUP:??_C@_0BH@MMLH@HMAC?9GOST?5R?534?411?92012?$AA@
	*** 000017	c9 			leave	
	*** 000018	c3 			ret	
;|*** 	case GOSTHASH:
; Line 599
					$SC710:
;|*** 		return "HMAC-GOST R 34.11-94";
; Line 600
	*** 000019	b8 00 00 		mov	ax,OFFSET DGROUP:??_C@_0BF@ING@HMAC?9GOST?5R?534?411?994?$AA@
	*** 00001c	c9 			leave	
	*** 00001d	c3 			ret	
;|*** 	case WHIRLPOOL:	
; Line 595
					$SC706:
;|*** 		return "HMAC-Whirlpool";
; Line 596
	*** 00001e	b8 00 00 		mov	ax,OFFSET DGROUP:??_C@_0P@DFEB@HMAC?9Whirlpool?$AA@
;|*** 	case STRIBOG:
;|*** 		return "HMAC-GOST R 34.11-2012";
;|*** 	case GOSTHASH:
;|*** 		return "HMAC-GOST R 34.11-94";
;|*** 	default:		
;|*** 		return "(Unknown)";
;|*** 	}
;|*** }
; Line 604
	*** 000021	c9 			leave	
	*** 000022	c3 			ret	

_get_pkcs5_prf_name	ENDP
	PUBLIC	_get_pkcs5_iteration_count
_get_pkcs5_iteration_count	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn int get_pkcs5_iteration_count (int pkcs5_prf_id, BOOL bBoot)
;|***  *	\brief Getter for the iteration count of the pksc5
;|***  *	\param[in] BOOL bBoot
;|***  *	\param[in] int pkcs5_prf_id
;|***  *	\return 1000 switch (pkcs5_prf_id)
;|***  *			GST_THROW_FATAL_EXCEPTION switch (pkcs5_prf_id) case default
;|***  *			0 otherwise
;|***  */
;|*** int get_pkcs5_iteration_count (int pkcs5_prf_id, BOOL bBoot)
;|*** {
; Line 617
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	pkcs5_prf_id = 4
;	bBoot = 6
;|*** 	switch (pkcs5_prf_id)
; Line 618
	*** 000003	8b 46 04 		mov	ax,WORD PTR [bp+4]	;pkcs5_prf_id
;|*** 	{
;|*** 	case WHIRLPOOL:	
;|*** 		return 1000;
;|*** 	case STRIBOG:
;|*** 		return 1000;
;|*** 	case GOSTHASH:
;|*** 		return 1000;
;|*** 	default:		
;|*** 		GST_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID
;|*** 	}
; Line 628
	*** 000006	48 			dec	ax
	*** 000007	74 11 			je	SHORT $SC723
	*** 000009	48 			dec	ax
	*** 00000a	74 0e 			je	SHORT $SC723
	*** 00000c	48 			dec	ax
	*** 00000d	74 0b 			je	SHORT $SC723
;|*** 		GST_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID
; Line 627
	*** 00000f	68 73 02 		push	627	;0273H
	*** 000012	e8 00 00 		call	_ThrowFatalException
	*** 000015	5b 			pop	bx
;|*** 	}
;|*** 	return 0;
; Line 629
	*** 000016	33 c0 			xor	ax,ax
	*** 000018	c9 			leave	
	*** 000019	c3 			ret	
					$SC723:
;|*** 		return 1000;
; Line 621
	*** 00001a	b8 e8 03 		mov	ax,1000	;03e8H
;|*** 	case STRIBOG:
;|*** 		return 1000;
;|*** 	case GOSTHASH:
;|*** 		return 1000;
;|*** 	default:		
;|*** 		GST_THROW_FATAL_EXCEPTION;	// Unknown/wrong ID
;|*** 	}
;|*** 	return 0;
;|*** }
; Line 630
	*** 00001d	c9 			leave	
	*** 00001e	c3 			ret	

_get_pkcs5_iteration_count	ENDP
_TEXT	ENDS
END
