;	Static Name Aliases
;
	TITLE   ..\..\..\crypto\grasshoppercipher.c
	.MODEL  SMALL
	.386p
	.387
_TEXT	SEGMENT  WORD USE16 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT  WORD USE16 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD USE16 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD USE16 PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
PUBLIC  _pi
PUBLIC  _pi_inv
PUBLIC  _mult_mod_poly
EXTRN	__aNulshr:NEAR
EXTRN	__aNlshl:NEAR
_DATA      SEGMENT
_pi	DB	0fcH
	DB	0eeH
	DB	0ddH
	DB	011H
	DB	0cfH
	DB	06eH
	DB	031H
	DB	016H
	DB	0fbH
	DB	0c4H
	DB	0faH
	DB	0daH
	DB	023H
	DB	0c5H
	DB	04H
	DB	04dH
	DB	0e9H
	DB	077H
	DB	0f0H
	DB	0dbH
	DB	093H
	DB	02eH
	DB	099H
	DB	0baH
	DB	017H
	DB	036H
	DB	0f1H
	DB	0bbH
	DB	014H
	DB	0cdH
	DB	05fH
	DB	0c1H
	DB	0f9H
	DB	018H
	DB	065H
	DB	05aH
	DB	0e2H
	DB	05cH
	DB	0efH
	DB	021H
	DB	081H
	DB	01cH
	DB	03cH
	DB	042H
	DB	08bH
	DB	01H
	DB	08eH
	DB	04fH
	DB	05H
	DB	084H
	DB	02H
	DB	0aeH
	DB	0e3H
	DB	06aH
	DB	08fH
	DB	0a0H
	DB	06H
	DB	0bH
	DB	0edH
	DB	098H
	DB	07fH
	DB	0d4H
	DB	0d3H
	DB	01fH
	DB	0ebH
	DB	034H
	DB	02cH
	DB	051H
	DB	0eaH
	DB	0c8H
	DB	048H
	DB	0abH
	DB	0f2H
	DB	02aH
	DB	068H
	DB	0a2H
	DB	0fdH
	DB	03aH
	DB	0ceH
	DB	0ccH
	DB	0b5H
	DB	070H
	DB	0eH
	DB	056H
	DB	08H
	DB	0cH
	DB	076H
	DB	012H
	DB	0bfH
	DB	072H
	DB	013H
	DB	047H
	DB	09cH
	DB	0b7H
	DB	05dH
	DB	087H
	DB	015H
	DB	0a1H
	DB	096H
	DB	029H
	DB	010H
	DB	07bH
	DB	09aH
	DB	0c7H
	DB	0f3H
	DB	091H
	DB	078H
	DB	06fH
	DB	09dH
	DB	09eH
	DB	0b2H
	DB	0b1H
	DB	032H
	DB	075H
	DB	019H
	DB	03dH
	DB	0ffH
	DB	035H
	DB	08aH
	DB	07eH
	DB	06dH
	DB	054H
	DB	0c6H
	DB	080H
	DB	0c3H
	DB	0bdH
	DB	0dH
	DB	057H
	DB	0dfH
	DB	0f5H
	DB	024H
	DB	0a9H
	DB	03eH
	DB	0a8H
	DB	043H
	DB	0c9H
	DB	0d7H
	DB	079H
	DB	0d6H
	DB	0f6H
	DB	07cH
	DB	022H
	DB	0b9H
	DB	03H
	DB	0e0H
	DB	0fH
	DB	0ecH
	DB	0deH
	DB	07aH
	DB	094H
	DB	0b0H
	DB	0bcH
	DB	0dcH
	DB	0e8H
	DB	028H
	DB	050H
	DB	04eH
	DB	033H
	DB	0aH
	DB	04aH
	DB	0a7H
	DB	097H
	DB	060H
	DB	073H
	DB	01eH
	DB	00H
	DB	062H
	DB	044H
	DB	01aH
	DB	0b8H
	DB	038H
	DB	082H
	DB	064H
	DB	09fH
	DB	026H
	DB	041H
	DB	0adH
	DB	045H
	DB	046H
	DB	092H
	DB	027H
	DB	05eH
	DB	055H
	DB	02fH
	DB	08cH
	DB	0a3H
	DB	0a5H
	DB	07dH
	DB	069H
	DB	0d5H
	DB	095H
	DB	03bH
	DB	07H
	DB	058H
	DB	0b3H
	DB	040H
	DB	086H
	DB	0acH
	DB	01dH
	DB	0f7H
	DB	030H
	DB	037H
	DB	06bH
	DB	0e4H
	DB	088H
	DB	0d9H
	DB	0e7H
	DB	089H
	DB	0e1H
	DB	01bH
	DB	083H
	DB	049H
	DB	04cH
	DB	03fH
	DB	0f8H
	DB	0feH
	DB	08dH
	DB	053H
	DB	0aaH
	DB	090H
	DB	0caH
	DB	0d8H
	DB	085H
	DB	061H
	DB	020H
	DB	071H
	DB	067H
	DB	0a4H
	DB	02dH
	DB	02bH
	DB	09H
	DB	05bH
	DB	0cbH
	DB	09bH
	DB	025H
	DB	0d0H
	DB	0beH
	DB	0e5H
	DB	06cH
	DB	052H
	DB	059H
	DB	0a6H
	DB	074H
	DB	0d2H
	DB	0e6H
	DB	0f4H
	DB	0b4H
	DB	0c0H
	DB	0d1H
	DB	066H
	DB	0afH
	DB	0c2H
	DB	039H
	DB	04bH
	DB	063H
	DB	0b6H
_pi_inv	DB	0a5H
	DB	02dH
	DB	032H
	DB	08fH
	DB	0eH
	DB	030H
	DB	038H
	DB	0c0H
	DB	054H
	DB	0e6H
	DB	09eH
	DB	039H
	DB	055H
	DB	07eH
	DB	052H
	DB	091H
	DB	064H
	DB	03H
	DB	057H
	DB	05aH
	DB	01cH
	DB	060H
	DB	07H
	DB	018H
	DB	021H
	DB	072H
	DB	0a8H
	DB	0d1H
	DB	029H
	DB	0c6H
	DB	0a4H
	DB	03fH
	DB	0e0H
	DB	027H
	DB	08dH
	DB	0cH
	DB	082H
	DB	0eaH
	DB	0aeH
	DB	0b4H
	DB	09aH
	DB	063H
	DB	049H
	DB	0e5H
	DB	042H
	DB	0e4H
	DB	015H
	DB	0b7H
	DB	0c8H
	DB	06H
	DB	070H
	DB	09dH
	DB	041H
	DB	075H
	DB	019H
	DB	0c9H
	DB	0aaH
	DB	0fcH
	DB	04dH
	DB	0bfH
	DB	02aH
	DB	073H
	DB	084H
	DB	0d5H
	DB	0c3H
	DB	0afH
	DB	02bH
	DB	086H
	DB	0a7H
	DB	0b1H
	DB	0b2H
	DB	05bH
	DB	046H
	DB	0d3H
	DB	09fH
	DB	0fdH
	DB	0d4H
	DB	0fH
	DB	09cH
	DB	02fH
	DB	09bH
	DB	043H
	DB	0efH
	DB	0d9H
	DB	079H
	DB	0b6H
	DB	053H
	DB	07fH
	DB	0c1H
	DB	0f0H
	DB	023H
	DB	0e7H
	DB	025H
	DB	05eH
	DB	0b5H
	DB	01eH
	DB	0a2H
	DB	0dfH
	DB	0a6H
	DB	0feH
	DB	0acH
	DB	022H
	DB	0f9H
	DB	0e2H
	DB	04aH
	DB	0bcH
	DB	035H
	DB	0caH
	DB	0eeH
	DB	078H
	DB	05H
	DB	06bH
	DB	051H
	DB	0e1H
	DB	059H
	DB	0a3H
	DB	0f2H
	DB	071H
	DB	056H
	DB	011H
	DB	06aH
	DB	089H
	DB	094H
	DB	065H
	DB	08cH
	DB	0bbH
	DB	077H
	DB	03cH
	DB	07bH
	DB	028H
	DB	0abH
	DB	0d2H
	DB	031H
	DB	0deH
	DB	0c4H
	DB	05fH
	DB	0ccH
	DB	0cfH
	DB	076H
	DB	02cH
	DB	0b8H
	DB	0d8H
	DB	02eH
	DB	036H
	DB	0dbH
	DB	069H
	DB	0b3H
	DB	014H
	DB	095H
	DB	0beH
	DB	062H
	DB	0a1H
	DB	03bH
	DB	016H
	DB	066H
	DB	0e9H
	DB	05cH
	DB	06cH
	DB	06dH
	DB	0adH
	DB	037H
	DB	061H
	DB	04bH
	DB	0b9H
	DB	0e3H
	DB	0baH
	DB	0f1H
	DB	0a0H
	DB	085H
	DB	083H
	DB	0daH
	DB	047H
	DB	0c5H
	DB	0b0H
	DB	033H
	DB	0faH
	DB	096H
	DB	06fH
	DB	06eH
	DB	0c2H
	DB	0f6H
	DB	050H
	DB	0ffH
	DB	05dH
	DB	0a9H
	DB	08eH
	DB	017H
	DB	01bH
	DB	097H
	DB	07dH
	DB	0ecH
	DB	058H
	DB	0f7H
	DB	01fH
	DB	0fbH
	DB	07cH
	DB	09H
	DB	0dH
	DB	07aH
	DB	067H
	DB	045H
	DB	087H
	DB	0dcH
	DB	0e8H
	DB	04fH
	DB	01dH
	DB	04eH
	DB	04H
	DB	0ebH
	DB	0f8H
	DB	0f3H
	DB	03eH
	DB	03dH
	DB	0bdH
	DB	08aH
	DB	088H
	DB	0ddH
	DB	0cdH
	DB	0bH
	DB	013H
	DB	098H
	DB	02H
	DB	093H
	DB	080H
	DB	090H
	DB	0d0H
	DB	024H
	DB	034H
	DB	0cbH
	DB	0edH
	DB	0f4H
	DB	0ceH
	DB	099H
	DB	010H
	DB	044H
	DB	040H
	DB	092H
	DB	03aH
	DB	01H
	DB	026H
	DB	012H
	DB	01aH
	DB	048H
	DB	068H
	DB	0f5H
	DB	081H
	DB	08bH
	DB	0c7H
	DB	0d6H
	DB	020H
	DB	0aH
	DB	08H
	DB	00H
	DB	04cH
	DB	0d7H
	DB	074H
_mult_mod_poly	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	010H
	DB	020H
	DB	030H
	DB	040H
	DB	050H
	DB	060H
	DB	070H
	DB	080H
	DB	090H
	DB	0a0H
	DB	0b0H
	DB	0c0H
	DB	0d0H
	DB	0e0H
	DB	0f0H
	DB	0c3H
	DB	0d3H
	DB	0e3H
	DB	0f3H
	DB	083H
	DB	093H
	DB	0a3H
	DB	0b3H
	DB	043H
	DB	053H
	DB	063H
	DB	073H
	DB	03H
	DB	013H
	DB	023H
	DB	033H
	DB	045H
	DB	055H
	DB	065H
	DB	075H
	DB	05H
	DB	015H
	DB	025H
	DB	035H
	DB	0c5H
	DB	0d5H
	DB	0e5H
	DB	0f5H
	DB	085H
	DB	095H
	DB	0a5H
	DB	0b5H
	DB	086H
	DB	096H
	DB	0a6H
	DB	0b6H
	DB	0c6H
	DB	0d6H
	DB	0e6H
	DB	0f6H
	DB	06H
	DB	016H
	DB	026H
	DB	036H
	DB	046H
	DB	056H
	DB	066H
	DB	076H
	DB	08aH
	DB	09aH
	DB	0aaH
	DB	0baH
	DB	0caH
	DB	0daH
	DB	0eaH
	DB	0faH
	DB	0aH
	DB	01aH
	DB	02aH
	DB	03aH
	DB	04aH
	DB	05aH
	DB	06aH
	DB	07aH
	DB	049H
	DB	059H
	DB	069H
	DB	079H
	DB	09H
	DB	019H
	DB	029H
	DB	039H
	DB	0c9H
	DB	0d9H
	DB	0e9H
	DB	0f9H
	DB	089H
	DB	099H
	DB	0a9H
	DB	0b9H
	DB	0cfH
	DB	0dfH
	DB	0efH
	DB	0ffH
	DB	08fH
	DB	09fH
	DB	0afH
	DB	0bfH
	DB	04fH
	DB	05fH
	DB	06fH
	DB	07fH
	DB	0fH
	DB	01fH
	DB	02fH
	DB	03fH
	DB	0cH
	DB	01cH
	DB	02cH
	DB	03cH
	DB	04cH
	DB	05cH
	DB	06cH
	DB	07cH
	DB	08cH
	DB	09cH
	DB	0acH
	DB	0bcH
	DB	0ccH
	DB	0dcH
	DB	0ecH
	DB	0fcH
	DB	0d7H
	DB	0c7H
	DB	0f7H
	DB	0e7H
	DB	097H
	DB	087H
	DB	0b7H
	DB	0a7H
	DB	057H
	DB	047H
	DB	077H
	DB	067H
	DB	017H
	DB	07H
	DB	037H
	DB	027H
	DB	014H
	DB	04H
	DB	034H
	DB	024H
	DB	054H
	DB	044H
	DB	074H
	DB	064H
	DB	094H
	DB	084H
	DB	0b4H
	DB	0a4H
	DB	0d4H
	DB	0c4H
	DB	0f4H
	DB	0e4H
	DB	092H
	DB	082H
	DB	0b2H
	DB	0a2H
	DB	0d2H
	DB	0c2H
	DB	0f2H
	DB	0e2H
	DB	012H
	DB	02H
	DB	032H
	DB	022H
	DB	052H
	DB	042H
	DB	072H
	DB	062H
	DB	051H
	DB	041H
	DB	071H
	DB	061H
	DB	011H
	DB	01H
	DB	031H
	DB	021H
	DB	0d1H
	DB	0c1H
	DB	0f1H
	DB	0e1H
	DB	091H
	DB	081H
	DB	0b1H
	DB	0a1H
	DB	05dH
	DB	04dH
	DB	07dH
	DB	06dH
	DB	01dH
	DB	0dH
	DB	03dH
	DB	02dH
	DB	0ddH
	DB	0cdH
	DB	0fdH
	DB	0edH
	DB	09dH
	DB	08dH
	DB	0bdH
	DB	0adH
	DB	09eH
	DB	08eH
	DB	0beH
	DB	0aeH
	DB	0deH
	DB	0ceH
	DB	0feH
	DB	0eeH
	DB	01eH
	DB	0eH
	DB	03eH
	DB	02eH
	DB	05eH
	DB	04eH
	DB	07eH
	DB	06eH
	DB	018H
	DB	08H
	DB	038H
	DB	028H
	DB	058H
	DB	048H
	DB	078H
	DB	068H
	DB	098H
	DB	088H
	DB	0b8H
	DB	0a8H
	DB	0d8H
	DB	0c8H
	DB	0f8H
	DB	0e8H
	DB	0dbH
	DB	0cbH
	DB	0fbH
	DB	0ebH
	DB	09bH
	DB	08bH
	DB	0bbH
	DB	0abH
	DB	05bH
	DB	04bH
	DB	07bH
	DB	06bH
	DB	01bH
	DB	0bH
	DB	03bH
	DB	02bH
	DB	00H
	DB	020H
	DB	040H
	DB	060H
	DB	080H
	DB	0a0H
	DB	0c0H
	DB	0e0H
	DB	0c3H
	DB	0e3H
	DB	083H
	DB	0a3H
	DB	043H
	DB	063H
	DB	03H
	DB	023H
	DB	045H
	DB	065H
	DB	05H
	DB	025H
	DB	0c5H
	DB	0e5H
	DB	085H
	DB	0a5H
	DB	086H
	DB	0a6H
	DB	0c6H
	DB	0e6H
	DB	06H
	DB	026H
	DB	046H
	DB	066H
	DB	08aH
	DB	0aaH
	DB	0caH
	DB	0eaH
	DB	0aH
	DB	02aH
	DB	04aH
	DB	06aH
	DB	049H
	DB	069H
	DB	09H
	DB	029H
	DB	0c9H
	DB	0e9H
	DB	089H
	DB	0a9H
	DB	0cfH
	DB	0efH
	DB	08fH
	DB	0afH
	DB	04fH
	DB	06fH
	DB	0fH
	DB	02fH
	DB	0cH
	DB	02cH
	DB	04cH
	DB	06cH
	DB	08cH
	DB	0acH
	DB	0ccH
	DB	0ecH
	DB	0d7H
	DB	0f7H
	DB	097H
	DB	0b7H
	DB	057H
	DB	077H
	DB	017H
	DB	037H
	DB	014H
	DB	034H
	DB	054H
	DB	074H
	DB	094H
	DB	0b4H
	DB	0d4H
	DB	0f4H
	DB	092H
	DB	0b2H
	DB	0d2H
	DB	0f2H
	DB	012H
	DB	032H
	DB	052H
	DB	072H
	DB	051H
	DB	071H
	DB	011H
	DB	031H
	DB	0d1H
	DB	0f1H
	DB	091H
	DB	0b1H
	DB	05dH
	DB	07dH
	DB	01dH
	DB	03dH
	DB	0ddH
	DB	0fdH
	DB	09dH
	DB	0bdH
	DB	09eH
	DB	0beH
	DB	0deH
	DB	0feH
	DB	01eH
	DB	03eH
	DB	05eH
	DB	07eH
	DB	018H
	DB	038H
	DB	058H
	DB	078H
	DB	098H
	DB	0b8H
	DB	0d8H
	DB	0f8H
	DB	0dbH
	DB	0fbH
	DB	09bH
	DB	0bbH
	DB	05bH
	DB	07bH
	DB	01bH
	DB	03bH
	DB	06dH
	DB	04dH
	DB	02dH
	DB	0dH
	DB	0edH
	DB	0cdH
	DB	0adH
	DB	08dH
	DB	0aeH
	DB	08eH
	DB	0eeH
	DB	0ceH
	DB	02eH
	DB	0eH
	DB	06eH
	DB	04eH
	DB	028H
	DB	08H
	DB	068H
	DB	048H
	DB	0a8H
	DB	088H
	DB	0e8H
	DB	0c8H
	DB	0ebH
	DB	0cbH
	DB	0abH
	DB	08bH
	DB	06bH
	DB	04bH
	DB	02bH
	DB	0bH
	DB	0e7H
	DB	0c7H
	DB	0a7H
	DB	087H
	DB	067H
	DB	047H
	DB	027H
	DB	07H
	DB	024H
	DB	04H
	DB	064H
	DB	044H
	DB	0a4H
	DB	084H
	DB	0e4H
	DB	0c4H
	DB	0a2H
	DB	082H
	DB	0e2H
	DB	0c2H
	DB	022H
	DB	02H
	DB	062H
	DB	042H
	DB	061H
	DB	041H
	DB	021H
	DB	01H
	DB	0e1H
	DB	0c1H
	DB	0a1H
	DB	081H
	DB	0baH
	DB	09aH
	DB	0faH
	DB	0daH
	DB	03aH
	DB	01aH
	DB	07aH
	DB	05aH
	DB	079H
	DB	059H
	DB	039H
	DB	019H
	DB	0f9H
	DB	0d9H
	DB	0b9H
	DB	099H
	DB	0ffH
	DB	0dfH
	DB	0bfH
	DB	09fH
	DB	07fH
	DB	05fH
	DB	03fH
	DB	01fH
	DB	03cH
	DB	01cH
	DB	07cH
	DB	05cH
	DB	0bcH
	DB	09cH
	DB	0fcH
	DB	0dcH
	DB	030H
	DB	010H
	DB	070H
	DB	050H
	DB	0b0H
	DB	090H
	DB	0f0H
	DB	0d0H
	DB	0f3H
	DB	0d3H
	DB	0b3H
	DB	093H
	DB	073H
	DB	053H
	DB	033H
	DB	013H
	DB	075H
	DB	055H
	DB	035H
	DB	015H
	DB	0f5H
	DB	0d5H
	DB	0b5H
	DB	095H
	DB	0b6H
	DB	096H
	DB	0f6H
	DB	0d6H
	DB	036H
	DB	016H
	DB	076H
	DB	056H
	DB	00H
	DB	085H
	DB	0c9H
	DB	04cH
	DB	051H
	DB	0d4H
	DB	098H
	DB	01dH
	DB	0a2H
	DB	027H
	DB	06bH
	DB	0eeH
	DB	0f3H
	DB	076H
	DB	03aH
	DB	0bfH
	DB	087H
	DB	02H
	DB	04eH
	DB	0cbH
	DB	0d6H
	DB	053H
	DB	01fH
	DB	09aH
	DB	025H
	DB	0a0H
	DB	0ecH
	DB	069H
	DB	074H
	DB	0f1H
	DB	0bdH
	DB	038H
	DB	0cdH
	DB	048H
	DB	04H
	DB	081H
	DB	09cH
	DB	019H
	DB	055H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	0a6H
	DB	023H
	DB	03eH
	DB	0bbH
	DB	0f7H
	DB	072H
	DB	04aH
	DB	0cfH
	DB	083H
	DB	06H
	DB	01bH
	DB	09eH
	DB	0d2H
	DB	057H
	DB	0e8H
	DB	06dH
	DB	021H
	DB	0a4H
	DB	0b9H
	DB	03cH
	DB	070H
	DB	0f5H
	DB	059H
	DB	0dcH
	DB	090H
	DB	015H
	DB	08H
	DB	08dH
	DB	0c1H
	DB	044H
	DB	0fbH
	DB	07eH
	DB	032H
	DB	0b7H
	DB	0aaH
	DB	02fH
	DB	063H
	DB	0e6H
	DB	0deH
	DB	05bH
	DB	017H
	DB	092H
	DB	08fH
	DB	0aH
	DB	046H
	DB	0c3H
	DB	07cH
	DB	0f9H
	DB	0b5H
	DB	030H
	DB	02dH
	DB	0a8H
	DB	0e4H
	DB	061H
	DB	094H
	DB	011H
	DB	05dH
	DB	0d8H
	DB	0c5H
	DB	040H
	DB	0cH
	DB	089H
	DB	036H
	DB	0b3H
	DB	0ffH
	DB	07aH
	DB	067H
	DB	0e2H
	DB	0aeH
	DB	02bH
	DB	013H
	DB	096H
	DB	0daH
	DB	05fH
	DB	042H
	DB	0c7H
	DB	08bH
	DB	0eH
	DB	0b1H
	DB	034H
	DB	078H
	DB	0fdH
	DB	0e0H
	DB	065H
	DB	029H
	DB	0acH
	DB	0b2H
	DB	037H
	DB	07bH
	DB	0feH
	DB	0e3H
	DB	066H
	DB	02aH
	DB	0afH
	DB	010H
	DB	095H
	DB	0d9H
	DB	05cH
	DB	041H
	DB	0c4H
	DB	088H
	DB	0dH
	DB	035H
	DB	0b0H
	DB	0fcH
	DB	079H
	DB	064H
	DB	0e1H
	DB	0adH
	DB	028H
	DB	097H
	DB	012H
	DB	05eH
	DB	0dbH
	DB	0c6H
	DB	043H
	DB	0fH
	DB	08aH
	DB	07fH
	DB	0faH
	DB	0b6H
	DB	033H
	DB	02eH
	DB	0abH
	DB	0e7H
	DB	062H
	DB	0ddH
	DB	058H
	DB	014H
	DB	091H
	DB	08cH
	DB	09H
	DB	045H
	DB	0c0H
	DB	0f8H
	DB	07dH
	DB	031H
	DB	0b4H
	DB	0a9H
	DB	02cH
	DB	060H
	DB	0e5H
	DB	05aH
	DB	0dfH
	DB	093H
	DB	016H
	DB	0bH
	DB	08eH
	DB	0c2H
	DB	047H
	DB	0ebH
	DB	06eH
	DB	022H
	DB	0a7H
	DB	0baH
	DB	03fH
	DB	073H
	DB	0f6H
	DB	049H
	DB	0ccH
	DB	080H
	DB	05H
	DB	018H
	DB	09dH
	DB	0d1H
	DB	054H
	DB	06cH
	DB	0e9H
	DB	0a5H
	DB	020H
	DB	03dH
	DB	0b8H
	DB	0f4H
	DB	071H
	DB	0ceH
	DB	04bH
	DB	07H
	DB	082H
	DB	09fH
	DB	01aH
	DB	056H
	DB	0d3H
	DB	026H
	DB	0a3H
	DB	0efH
	DB	06aH
	DB	077H
	DB	0f2H
	DB	0beH
	DB	03bH
	DB	084H
	DB	01H
	DB	04dH
	DB	0c8H
	DB	0d5H
	DB	050H
	DB	01cH
	DB	099H
	DB	0a1H
	DB	024H
	DB	068H
	DB	0edH
	DB	0f0H
	DB	075H
	DB	039H
	DB	0bcH
	DB	03H
	DB	086H
	DB	0caH
	DB	04fH
	DB	052H
	DB	0d7H
	DB	09bH
	DB	01eH
	DB	00H
	DB	094H
	DB	0ebH
	DB	07fH
	DB	015H
	DB	081H
	DB	0feH
	DB	06aH
	DB	02aH
	DB	0beH
	DB	0c1H
	DB	055H
	DB	03fH
	DB	0abH
	DB	0d4H
	DB	040H
	DB	054H
	DB	0c0H
	DB	0bfH
	DB	02bH
	DB	041H
	DB	0d5H
	DB	0aaH
	DB	03eH
	DB	07eH
	DB	0eaH
	DB	095H
	DB	01H
	DB	06bH
	DB	0ffH
	DB	080H
	DB	014H
	DB	0a8H
	DB	03cH
	DB	043H
	DB	0d7H
	DB	0bdH
	DB	029H
	DB	056H
	DB	0c2H
	DB	082H
	DB	016H
	DB	069H
	DB	0fdH
	DB	097H
	DB	03H
	DB	07cH
	DB	0e8H
	DB	0fcH
	DB	068H
	DB	017H
	DB	083H
	DB	0e9H
	DB	07dH
	DB	02H
	DB	096H
	DB	0d6H
	DB	042H
	DB	03dH
	DB	0a9H
	DB	0c3H
	DB	057H
	DB	028H
	DB	0bcH
	DB	093H
	DB	07H
	DB	078H
	DB	0ecH
	DB	086H
	DB	012H
	DB	06dH
	DB	0f9H
	DB	0b9H
	DB	02dH
	DB	052H
	DB	0c6H
	DB	0acH
	DB	038H
	DB	047H
	DB	0d3H
	DB	0c7H
	DB	053H
	DB	02cH
	DB	0b8H
	DB	0d2H
	DB	046H
	DB	039H
	DB	0adH
	DB	0edH
	DB	079H
	DB	06H
	DB	092H
	DB	0f8H
	DB	06cH
	DB	013H
	DB	087H
	DB	03bH
	DB	0afH
	DB	0d0H
	DB	044H
	DB	02eH
	DB	0baH
	DB	0c5H
	DB	051H
	DB	011H
	DB	085H
	DB	0faH
	DB	06eH
	DB	04H
	DB	090H
	DB	0efH
	DB	07bH
	DB	06fH
	DB	0fbH
	DB	084H
	DB	010H
	DB	07aH
	DB	0eeH
	DB	091H
	DB	05H
	DB	045H
	DB	0d1H
	DB	0aeH
	DB	03aH
	DB	050H
	DB	0c4H
	DB	0bbH
	DB	02fH
	DB	0e5H
	DB	071H
	DB	0eH
	DB	09aH
	DB	0f0H
	DB	064H
	DB	01bH
	DB	08fH
	DB	0cfH
	DB	05bH
	DB	024H
	DB	0b0H
	DB	0daH
	DB	04eH
	DB	031H
	DB	0a5H
	DB	0b1H
	DB	025H
	DB	05aH
	DB	0ceH
	DB	0a4H
	DB	030H
	DB	04fH
	DB	0dbH
	DB	09bH
	DB	0fH
	DB	070H
	DB	0e4H
	DB	08eH
	DB	01aH
	DB	065H
	DB	0f1H
	DB	04dH
	DB	0d9H
	DB	0a6H
	DB	032H
	DB	058H
	DB	0ccH
	DB	0b3H
	DB	027H
	DB	067H
	DB	0f3H
	DB	08cH
	DB	018H
	DB	072H
	DB	0e6H
	DB	099H
	DB	0dH
	DB	019H
	DB	08dH
	DB	0f2H
	DB	066H
	DB	0cH
	DB	098H
	DB	0e7H
	DB	073H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	04cH
	DB	026H
	DB	0b2H
	DB	0cdH
	DB	059H
	DB	076H
	DB	0e2H
	DB	09dH
	DB	09H
	DB	063H
	DB	0f7H
	DB	088H
	DB	01cH
	DB	05cH
	DB	0c8H
	DB	0b7H
	DB	023H
	DB	049H
	DB	0ddH
	DB	0a2H
	DB	036H
	DB	022H
	DB	0b6H
	DB	0c9H
	DB	05dH
	DB	037H
	DB	0a3H
	DB	0dcH
	DB	048H
	DB	08H
	DB	09cH
	DB	0e3H
	DB	077H
	DB	01dH
	DB	089H
	DB	0f6H
	DB	062H
	DB	0deH
	DB	04aH
	DB	035H
	DB	0a1H
	DB	0cbH
	DB	05fH
	DB	020H
	DB	0b4H
	DB	0f4H
	DB	060H
	DB	01fH
	DB	08bH
	DB	0e1H
	DB	075H
	DB	0aH
	DB	09eH
	DB	08aH
	DB	01eH
	DB	061H
	DB	0f5H
	DB	09fH
	DB	0bH
	DB	074H
	DB	0e0H
	DB	0a0H
	DB	034H
	DB	04bH
	DB	0dfH
	DB	0b5H
	DB	021H
	DB	05eH
	DB	0caH
	DB	00H
	DB	0c0H
	DB	043H
	DB	083H
	DB	086H
	DB	046H
	DB	0c5H
	DB	05H
	DB	0cfH
	DB	0fH
	DB	08cH
	DB	04cH
	DB	049H
	DB	089H
	DB	0aH
	DB	0caH
	DB	05dH
	DB	09dH
	DB	01eH
	DB	0deH
	DB	0dbH
	DB	01bH
	DB	098H
	DB	058H
	DB	092H
	DB	052H
	DB	0d1H
	DB	011H
	DB	014H
	DB	0d4H
	DB	057H
	DB	097H
	DB	0baH
	DB	07aH
	DB	0f9H
	DB	039H
	DB	03cH
	DB	0fcH
	DB	07fH
	DB	0bfH
	DB	075H
	DB	0b5H
	DB	036H
	DB	0f6H
	DB	0f3H
	DB	033H
	DB	0b0H
	DB	070H
	DB	0e7H
	DB	027H
	DB	0a4H
	DB	064H
	DB	061H
	DB	0a1H
	DB	022H
	DB	0e2H
	DB	028H
	DB	0e8H
	DB	06bH
	DB	0abH
	DB	0aeH
	DB	06eH
	DB	0edH
	DB	02dH
	DB	0b7H
	DB	077H
	DB	0f4H
	DB	034H
	DB	031H
	DB	0f1H
	DB	072H
	DB	0b2H
	DB	078H
	DB	0b8H
	DB	03bH
	DB	0fbH
	DB	0feH
	DB	03eH
	DB	0bdH
	DB	07dH
	DB	0eaH
	DB	02aH
	DB	0a9H
	DB	069H
	DB	06cH
	DB	0acH
	DB	02fH
	DB	0efH
	DB	025H
	DB	0e5H
	DB	066H
	DB	0a6H
	DB	0a3H
	DB	063H
	DB	0e0H
	DB	020H
	DB	0dH
	DB	0cdH
	DB	04eH
	DB	08eH
	DB	08bH
	DB	04bH
	DB	0c8H
	DB	08H
	DB	0c2H
	DB	02H
	DB	081H
	DB	041H
	DB	044H
	DB	084H
	DB	07H
	DB	0c7H
	DB	050H
	DB	090H
	DB	013H
	DB	0d3H
	DB	0d6H
	DB	016H
	DB	095H
	DB	055H
	DB	09fH
	DB	05fH
	DB	0dcH
	DB	01cH
	DB	019H
	DB	0d9H
	DB	05aH
	DB	09aH
	DB	0adH
	DB	06dH
	DB	0eeH
	DB	02eH
	DB	02bH
	DB	0ebH
	DB	068H
	DB	0a8H
	DB	062H
	DB	0a2H
	DB	021H
	DB	0e1H
	DB	0e4H
	DB	024H
	DB	0a7H
	DB	067H
	DB	0f0H
	DB	030H
	DB	0b3H
	DB	073H
	DB	076H
	DB	0b6H
	DB	035H
	DB	0f5H
	DB	03fH
	DB	0ffH
	DB	07cH
	DB	0bcH
	DB	0b9H
	DB	079H
	DB	0faH
	DB	03aH
	DB	017H
	DB	0d7H
	DB	054H
	DB	094H
	DB	091H
	DB	051H
	DB	0d2H
	DB	012H
	DB	0d8H
	DB	018H
	DB	09bH
	DB	05bH
	DB	05eH
	DB	09eH
	DB	01dH
	DB	0ddH
	DB	04aH
	DB	08aH
	DB	09H
	DB	0c9H
	DB	0ccH
	DB	0cH
	DB	08fH
	DB	04fH
	DB	085H
	DB	045H
	DB	0c6H
	DB	06H
	DB	03H
	DB	0c3H
	DB	040H
	DB	080H
	DB	01aH
	DB	0daH
	DB	059H
	DB	099H
	DB	09cH
	DB	05cH
	DB	0dfH
	DB	01fH
	DB	0d5H
	DB	015H
	DB	096H
	DB	056H
	DB	053H
	DB	093H
	DB	010H
	DB	0d0H
	DB	047H
	DB	087H
	DB	04H
	DB	0c4H
	DB	0c1H
	DB	01H
	DB	082H
	DB	042H
	DB	088H
	DB	048H
	DB	0cbH
	DB	0bH
	DB	0eH
	DB	0ceH
	DB	04dH
	DB	08dH
	DB	0a0H
	DB	060H
	DB	0e3H
	DB	023H
	DB	026H
	DB	0e6H
	DB	065H
	DB	0a5H
	DB	06fH
	DB	0afH
	DB	02cH
	DB	0ecH
	DB	0e9H
	DB	029H
	DB	0aaH
	DB	06aH
	DB	0fdH
	DB	03dH
	DB	0beH
	DB	07eH
	DB	07bH
	DB	0bbH
	DB	038H
	DB	0f8H
	DB	032H
	DB	0f2H
	DB	071H
	DB	0b1H
	DB	0b4H
	DB	074H
	DB	0f7H
	DB	037H
	DB	00H
	DB	0c2H
	DB	047H
	DB	085H
	DB	08eH
	DB	04cH
	DB	0c9H
	DB	0bH
	DB	0dfH
	DB	01dH
	DB	098H
	DB	05aH
	DB	051H
	DB	093H
	DB	016H
	DB	0d4H
	DB	07dH
	DB	0bfH
	DB	03aH
	DB	0f8H
	DB	0f3H
	DB	031H
	DB	0b4H
	DB	076H
	DB	0a2H
	DB	060H
	DB	0e5H
	DB	027H
	DB	02cH
	DB	0eeH
	DB	06bH
	DB	0a9H
	DB	0faH
	DB	038H
	DB	0bdH
	DB	07fH
	DB	074H
	DB	0b6H
	DB	033H
	DB	0f1H
	DB	025H
	DB	0e7H
	DB	062H
	DB	0a0H
	DB	0abH
	DB	069H
	DB	0ecH
	DB	02eH
	DB	087H
	DB	045H
	DB	0c0H
	DB	02H
	DB	09H
	DB	0cbH
	DB	04eH
	DB	08cH
	DB	058H
	DB	09aH
	DB	01fH
	DB	0ddH
	DB	0d6H
	DB	014H
	DB	091H
	DB	053H
	DB	037H
	DB	0f5H
	DB	070H
	DB	0b2H
	DB	0b9H
	DB	07bH
	DB	0feH
	DB	03cH
	DB	0e8H
	DB	02aH
	DB	0afH
	DB	06dH
	DB	066H
	DB	0a4H
	DB	021H
	DB	0e3H
	DB	04aH
	DB	088H
	DB	0dH
	DB	0cfH
	DB	0c4H
	DB	06H
	DB	083H
	DB	041H
	DB	095H
	DB	057H
	DB	0d2H
	DB	010H
	DB	01bH
	DB	0d9H
	DB	05cH
	DB	09eH
	DB	0cdH
	DB	0fH
	DB	08aH
	DB	048H
	DB	043H
	DB	081H
	DB	04H
	DB	0c6H
	DB	012H
	DB	0d0H
	DB	055H
	DB	097H
	DB	09cH
	DB	05eH
	DB	0dbH
	DB	019H
	DB	0b0H
	DB	072H
	DB	0f7H
	DB	035H
	DB	03eH
	DB	0fcH
	DB	079H
	DB	0bbH
	DB	06fH
	DB	0adH
	DB	028H
	DB	0eaH
	DB	0e1H
	DB	023H
	DB	0a6H
	DB	064H
	DB	06eH
	DB	0acH
	DB	029H
	DB	0ebH
	DB	0e0H
	DB	022H
	DB	0a7H
	DB	065H
	DB	0b1H
	DB	073H
	DB	0f6H
	DB	034H
	DB	03fH
	DB	0fdH
	DB	078H
	DB	0baH
	DB	013H
	DB	0d1H
	DB	054H
	DB	096H
	DB	09dH
	DB	05fH
	DB	0daH
	DB	018H
	DB	0ccH
	DB	0eH
	DB	08bH
	DB	049H
	DB	042H
	DB	080H
	DB	05H
	DB	0c7H
	DB	094H
	DB	056H
	DB	0d3H
	DB	011H
	DB	01aH
	DB	0d8H
	DB	05dH
	DB	09fH
	DB	04bH
	DB	089H
	DB	0cH
	DB	0ceH
	DB	0c5H
	DB	07H
	DB	082H
	DB	040H
	DB	0e9H
	DB	02bH
	DB	0aeH
	DB	06cH
	DB	067H
	DB	0a5H
	DB	020H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	071H
	DB	0b3H
	DB	0b8H
	DB	07aH
	DB	0ffH
	DB	03dH
	DB	059H
	DB	09bH
	DB	01eH
	DB	0dcH
	DB	0d7H
	DB	015H
	DB	090H
	DB	052H
	DB	086H
	DB	044H
	DB	0c1H
	DB	03H
	DB	08H
	DB	0caH
	DB	04fH
	DB	08dH
	DB	024H
	DB	0e6H
	DB	063H
	DB	0a1H
	DB	0aaH
	DB	068H
	DB	0edH
	DB	02fH
	DB	0fbH
	DB	039H
	DB	0bcH
	DB	07eH
	DB	075H
	DB	0b7H
	DB	032H
	DB	0f0H
	DB	0a3H
	DB	061H
	DB	0e4H
	DB	026H
	DB	02dH
	DB	0efH
	DB	06aH
	DB	0a8H
	DB	07cH
	DB	0beH
	DB	03bH
	DB	0f9H
	DB	0f2H
	DB	030H
	DB	0b5H
	DB	077H
	DB	0deH
	DB	01cH
	DB	099H
	DB	05bH
	DB	050H
	DB	092H
	DB	017H
	DB	0d5H
	DB	01H
	DB	0c3H
	DB	046H
	DB	084H
	DB	08fH
	DB	04dH
	DB	0c8H
	DB	0aH
	DB	00H
	DB	0fbH
	DB	035H
	DB	0ceH
	DB	06aH
	DB	091H
	DB	05fH
	DB	0a4H
	DB	0d4H
	DB	02fH
	DB	0e1H
	DB	01aH
	DB	0beH
	DB	045H
	DB	08bH
	DB	070H
	DB	06bH
	DB	090H
	DB	05eH
	DB	0a5H
	DB	01H
	DB	0faH
	DB	034H
	DB	0cfH
	DB	0bfH
	DB	044H
	DB	08aH
	DB	071H
	DB	0d5H
	DB	02eH
	DB	0e0H
	DB	01bH
	DB	0d6H
	DB	02dH
	DB	0e3H
	DB	018H
	DB	0bcH
	DB	047H
	DB	089H
	DB	072H
	DB	02H
	DB	0f9H
	DB	037H
	DB	0ccH
	DB	068H
	DB	093H
	DB	05dH
	DB	0a6H
	DB	0bdH
	DB	046H
	DB	088H
	DB	073H
	DB	0d7H
	DB	02cH
	DB	0e2H
	DB	019H
	DB	069H
	DB	092H
	DB	05cH
	DB	0a7H
	DB	03H
	DB	0f8H
	DB	036H
	DB	0cdH
	DB	06fH
	DB	094H
	DB	05aH
	DB	0a1H
	DB	05H
	DB	0feH
	DB	030H
	DB	0cbH
	DB	0bbH
	DB	040H
	DB	08eH
	DB	075H
	DB	0d1H
	DB	02aH
	DB	0e4H
	DB	01fH
	DB	04H
	DB	0ffH
	DB	031H
	DB	0caH
	DB	06eH
	DB	095H
	DB	05bH
	DB	0a0H
	DB	0d0H
	DB	02bH
	DB	0e5H
	DB	01eH
	DB	0baH
	DB	041H
	DB	08fH
	DB	074H
	DB	0b9H
	DB	042H
	DB	08cH
	DB	077H
	DB	0d3H
	DB	028H
	DB	0e6H
	DB	01dH
	DB	06dH
	DB	096H
	DB	058H
	DB	0a3H
	DB	07H
	DB	0fcH
	DB	032H
	DB	0c9H
	DB	0d2H
	DB	029H
	DB	0e7H
	DB	01cH
	DB	0b8H
	DB	043H
	DB	08dH
	DB	076H
	DB	06H
	DB	0fdH
	DB	033H
	DB	0c8H
	DB	06cH
	DB	097H
	DB	059H
	DB	0a2H
	DB	0deH
	DB	025H
	DB	0ebH
	DB	010H
	DB	0b4H
	DB	04fH
	DB	081H
	DB	07aH
	DB	0aH
	DB	0f1H
	DB	03fH
	DB	0c4H
	DB	060H
	DB	09bH
	DB	055H
	DB	0aeH
	DB	0b5H
	DB	04eH
	DB	080H
	DB	07bH
	DB	0dfH
	DB	024H
	DB	0eaH
	DB	011H
	DB	061H
	DB	09aH
	DB	054H
	DB	0afH
	DB	0bH
	DB	0f0H
	DB	03eH
	DB	0c5H
	DB	08H
	DB	0f3H
	DB	03dH
	DB	0c6H
	DB	062H
	DB	099H
	DB	057H
	DB	0acH
	DB	0dcH
	DB	027H
	DB	0e9H
	DB	012H
	DB	0b6H
	DB	04dH
	DB	083H
	DB	078H
	DB	063H
	DB	098H
	DB	056H
	DB	0adH
	DB	09H
	DB	0f2H
	DB	03cH
	DB	0c7H
	DB	0b7H
	DB	04cH
	DB	082H
	DB	079H
	DB	0ddH
	DB	026H
	DB	0e8H
	DB	013H
	DB	0b1H
	DB	04aH
	DB	084H
	DB	07fH
	DB	0dbH
	DB	020H
	DB	0eeH
	DB	015H
	DB	065H
	DB	09eH
	DB	050H
	DB	0abH
	DB	0fH
	DB	0f4H
	DB	03aH
	DB	0c1H
	DB	0daH
	DB	021H
	DB	0efH
	DB	014H
	DB	0b0H
	DB	04bH
	DB	085H
	DB	07eH
	DB	0eH
	DB	0f5H
	DB	03bH
	DB	0c0H
	DB	064H
	DB	09fH
	DB	051H
	DB	0aaH
	DB	067H
	DB	09cH
	DB	052H
	DB	0a9H
	DB	0dH
	DB	0f6H
	DB	038H
	DB	0c3H
	DB	0b3H
	DB	048H
	DB	086H
	DB	07dH
	DB	0d9H
	DB	022H
	DB	0ecH
	DB	017H
	DB	0cH
	DB	0f7H
	DB	039H
	DB	0c2H
	DB	066H
	DB	09dH
	DB	053H
	DB	0a8H
	DB	0d8H
	DB	023H
	DB	0edH
	DB	016H
	DB	0b2H
	DB	049H
	DB	087H
	DB	07cH
_DATA      ENDS
_TEXT      SEGMENT
	ASSUME	CS: _TEXT
	PUBLIC	_S
_S	PROC NEAR	;  COMDAT
;|*** /**
;|***  *
;|***  *	\file GrasshopperCipher.c
;|***  *	\brief Key setup, encryption and decryption procedure
;|***  *	\version 1.3.1
;|***  *	\date 13/12/2016
;|***  *
;|***  */
;|*** 
;|*** /**
;|***  *
;|***  *	Implementation of Gost Grasshopper Encryption Algorithm                        
;|***  *	This program implements the test vectors set provided in the reference document
;|***  *	provided by the Standartinform, Moscow, Russian Federation.                    
;|***  *	Author: Eric Filiol                                                            
;|***  *	This program is protected by the GPLv3
;|***  *
;|***  */
;|*** 
;|*** 
;|*** #include "GrasshopperCipher.h"
;|*** #include <stdio.h>
;|*** 
;|*** unsigned char pi[256] = {252, 238, 221,  17, 207, 110,  49,  22, 251, 196, 250, 218,  35, 197,   4,  77, 
;|*** 	233, 119, 240, 219, 147,  46, 153, 186,  23,  54, 241, 187,  20, 205,  95, 193, 
;|*** 	249,  24, 101,  90, 226,  92, 239,  33, 129,  28,  60,  66, 139,   1, 142,  79, 
;|*** 	5, 132,   2, 174, 227, 106, 143, 160,   6,  11, 237, 152, 127, 212, 211,  31, 
;|*** 	235,  52,  44,  81, 234, 200,  72, 171, 242,  42, 104, 162, 253,  58, 206, 204, 
;|*** 	181, 112,  14,  86,   8,  12, 118,  18, 191, 114,  19,  71, 156, 183,  93, 135, 
;|*** 	21, 161, 150,  41,  16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177, 
;|*** 	50, 117,  25,  61, 255,  53, 138, 126, 109,  84, 198, 128, 195, 189,  13,  87, 
;|*** 	223, 245,  36, 169,  62, 168,  67, 201, 215, 121, 214, 246, 124,  34, 185,   3, 
;|*** 	224,  15, 236, 222, 122, 148, 176, 188, 220, 232,  40,  80,  78,  51,  10,  74, 
;|*** 	167, 151,  96, 115,  30,   0,  98,  68,  26, 184,  56, 130, 100, 159,  38,  65, 
;|*** 	173,  69,  70, 146,  39,  94,  85,  47, 140, 163, 165, 125, 105, 213, 149,  59, 
;|*** 	7,  88, 179,  64, 134, 172,  29, 247,  48,  55, 107, 228, 136, 217, 231, 137, 
;|*** 	225,  27, 131,  73,  76,  63, 248, 254, 141,  83, 170, 144, 202, 216, 133,  97, 
;|*** 	32, 113, 103, 164,  45,  43,   9,  91, 203, 155,  37, 208, 190, 229, 108,  82, 
;|*** 	89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194,  57,  75,  99, 182};
;|*** 
;|*** unsigned char pi_inv[256] = {165,  45,  50, 143,  14,  48,  56, 192,  84, 230, 158,  57,  85, 126,  82, 145,
;|*** 	100,   3,  87,  90,  28,  96,   7,  24,  33, 114, 168, 209,  41, 198, 164,  63,
;|*** 	224,  39, 141,  12, 130, 234, 174, 180, 154,  99,  73, 229,  66, 228,  21, 183,
;|*** 	200,   6, 112, 157,  65, 117,  25, 201, 170, 252,  77, 191,  42, 115, 132, 213,
;|*** 	195, 175,  43, 134, 167, 177, 178,  91,  70, 211, 159, 253, 212,  15, 156,  47,
;|*** 	155,  67, 239, 217, 121, 182,  83, 127, 193, 240,  35, 231,  37,  94, 181,  30,
;|*** 	162, 223, 166, 254, 172,  34, 249, 226,  74, 188,  53, 202, 238, 120,   5, 107,
;|*** 	81, 225,  89, 163, 242, 113,  86,  17, 106, 137, 148, 101, 140, 187, 119,  60,
;|*** 	123,  40, 171, 210,  49, 222, 196,  95, 204, 207, 118,  44, 184, 216,  46,  54,
;|*** 	219, 105, 179,  20, 149, 190,  98, 161,  59,  22, 102, 233,  92, 108, 109, 173,
;|*** 	55,  97,  75, 185, 227, 186, 241, 160, 133, 131, 218,  71, 197, 176,  51, 250,
;|*** 	150, 111, 110, 194, 246,  80, 255,  93, 169, 142,  23,  27, 151, 125, 236,  88,
;|*** 	247,  31, 251, 124,   9,  13, 122, 103,  69, 135, 220, 232,  79,  29,  78,   4,
;|*** 	235, 248, 243,  62,  61, 189, 138, 136, 221, 205,  11,  19, 152,   2, 147, 128,
;|*** 	144, 208,  36,  52, 203, 237, 244, 206, 153,  16,  68,  64, 146,  58,   1,  38,
;|*** 	18,  26,  72, 104, 245, 129, 139, 199, 214,  32,  10,   8,   0,  76, 215, 116};
;|*** 
;|*** 
;|*** /* Precomputation of X.Y mod p(x) = x^8 + x^7 + x^6 + x + 1 where X and Y are elements in GF(2)[X]/p(x) */
;|*** unsigned char mult_mod_poly[8][256] = {
;|*** 
;|*** 	{  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
;|*** 		32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
;|*** 		64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
;|*** 		96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
;|*** 		128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
;|*** 		160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
;|*** 		192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
;|*** 		224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255},
;|*** 
;|*** 	{  0,  16,  32,  48,  64,  80,  96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 195, 211, 227, 243, 131, 147, 163, 179,  67,  83,  99, 115,   3,  19,  35,  51,
;|*** 		69,  85, 101, 117,   5,  21,  37,  53, 197, 213, 229, 245, 133, 149, 165, 181, 134, 150, 166, 182, 198, 214, 230, 246,   6,  22,  38,  54,  70,  86, 102, 118,
;|*** 		138, 154, 170, 186, 202, 218, 234, 250,  10,  26,  42,  58,  74,  90, 106, 122,  73,  89, 105, 121,   9,  25,  41,  57, 201, 217, 233, 249, 137, 153, 169, 185,
;|*** 		207, 223, 239, 255, 143, 159, 175, 191,  79,  95, 111, 127,  15,  31,  47,  63,  12,  28,  44,  60,  76,  92, 108, 124, 140, 156, 172, 188, 204, 220, 236, 252,
;|*** 		215, 199, 247, 231, 151, 135, 183, 167,  87,  71, 119, 103,  23,   7,  55,  39,  20,   4,  52,  36,  84,  68, 116, 100, 148, 132, 180, 164, 212, 196, 244, 228,
;|*** 		146, 130, 178, 162, 210, 194, 242, 226,  18,   2,  50,  34,  82,  66, 114,  98,  81,  65, 113,  97,  17,   1,  49,  33, 209, 193, 241, 225, 145, 129, 177, 161,
;|*** 		93,  77, 125, 109,  29,  13,  61,  45, 221, 205, 253, 237, 157, 141, 189, 173, 158, 142, 190, 174, 222, 206, 254, 238,  30,  14,  62,  46,  94,  78, 126, 110,
;|*** 		24,   8,  56,  40,  88,  72, 120, 104, 152, 136, 184, 168, 216, 200, 248, 232, 219, 203, 251, 235, 155, 139, 187, 171,  91,  75, 123, 107,  27,  11,  59,  43},
;|*** 
;|*** 	{  0,  32,  64,  96, 128, 160, 192, 224, 195, 227, 131, 163,  67,  99,   3,  35,  69, 101,   5,  37, 197, 229, 133, 165, 134, 166, 198, 230,   6,  38,  70, 102,
;|*** 		138, 170, 202, 234,  10,  42,  74, 106,  73, 105,   9,  41, 201, 233, 137, 169, 207, 239, 143, 175,  79, 111,  15,  47,  12,  44,  76, 108, 140, 172, 204, 236,
;|*** 		215, 247, 151, 183,  87, 119,  23,  55,  20,  52,  84, 116, 148, 180, 212, 244, 146, 178, 210, 242,  18,  50,  82, 114,  81, 113,  17,  49, 209, 241, 145, 177,
;|*** 		93, 125,  29,  61, 221, 253, 157, 189, 158, 190, 222, 254,  30,  62,  94, 126,  24,  56,  88, 120, 152, 184, 216, 248, 219, 251, 155, 187,  91, 123,  27,  59,
;|*** 		109,  77,  45,  13, 237, 205, 173, 141, 174, 142, 238, 206,  46,  14, 110,  78,  40,   8, 104,  72, 168, 136, 232, 200, 235, 203, 171, 139, 107,  75,  43,  11,
;|*** 		231, 199, 167, 135, 103,  71,  39,   7,  36,   4, 100,  68, 164, 132, 228, 196, 162, 130, 226, 194,  34,   2,  98,  66,  97,  65,  33,   1, 225, 193, 161, 129,
;|*** 		186, 154, 250, 218,  58,  26, 122,  90, 121,  89,  57,  25, 249, 217, 185, 153, 255, 223, 191, 159, 127,  95,  63,  31,  60,  28, 124,  92, 188, 156, 252, 220,
;|*** 		48,  16, 112,  80, 176, 144, 240, 208, 243, 211, 179, 147, 115,  83,  51,  19, 117,  85,  53,  21, 245, 213, 181, 149, 182, 150, 246, 214,  54,  22, 118,  86},
;|*** 
;|*** 	{  0, 133, 201,  76,  81, 212, 152,  29, 162,  39, 107, 238, 243, 118,  58, 191, 135,   2,  78, 203, 214,  83,  31, 154,  37, 160, 236, 105, 116, 241, 189,  56,
;|*** 		205,  72,   4, 129, 156,  25,  85, 208, 111, 234, 166,  35,  62, 187, 247, 114,  74, 207, 131,   6,  27, 158, 210,  87, 232, 109,  33, 164, 185,  60, 112, 245,
;|*** 		89, 220, 144,  21,   8, 141, 193,  68, 251, 126,  50, 183, 170,  47,  99, 230, 222,  91,  23, 146, 143,  10,  70, 195, 124, 249, 181,  48,  45, 168, 228,  97,
;|*** 		148,  17,  93, 216, 197,  64,  12, 137,  54, 179, 255, 122, 103, 226, 174,  43,  19, 150, 218,  95,  66, 199, 139,  14, 177,  52, 120, 253, 224, 101,  41, 172,
;|*** 		178,  55, 123, 254, 227, 102,  42, 175,  16, 149, 217,  92,  65, 196, 136,  13,  53, 176, 252, 121, 100, 225, 173,  40, 151,  18,  94, 219, 198,  67,  15, 138,
;|*** 		127, 250, 182,  51,  46, 171, 231,  98, 221,  88,  20, 145, 140,   9,  69, 192, 248, 125,  49, 180, 169,  44,  96, 229,  90, 223, 147,  22,  11, 142, 194,  71,
;|*** 		235, 110,  34, 167, 186,  63, 115, 246,  73, 204, 128,   5,  24, 157, 209,  84, 108, 233, 165,  32,  61, 184, 244, 113, 206,  75,   7, 130, 159,  26,  86, 211,
;|*** 		38, 163, 239, 106, 119, 242, 190,  59, 132,   1,  77, 200, 213,  80,  28, 153, 161,  36, 104, 237, 240, 117,  57, 188,   3, 134, 202,  79,  82, 215, 155,  30},
;|*** 
;|*** 	{  0, 148, 235, 127,  21, 129, 254, 106,  42, 190, 193,  85,  63, 171, 212,  64,  84, 192, 191,  43,  65, 213, 170,  62, 126, 234, 149,   1, 107, 255, 128,  20,
;|*** 		168,  60,  67, 215, 189,  41,  86, 194, 130,  22, 105, 253, 151,   3, 124, 232, 252, 104,  23, 131, 233, 125,   2, 150, 214,  66,  61, 169, 195,  87,  40, 188,
;|*** 		147,   7, 120, 236, 134,  18, 109, 249, 185,  45,  82, 198, 172,  56,  71, 211, 199,  83,  44, 184, 210,  70,  57, 173, 237, 121,   6, 146, 248, 108,  19, 135,
;|*** 		59, 175, 208,  68,  46, 186, 197,  81,  17, 133, 250, 110,   4, 144, 239, 123, 111, 251, 132,  16, 122, 238, 145,   5,  69, 209, 174,  58,  80, 196, 187,  47,
;|*** 		229, 113,  14, 154, 240, 100,  27, 143, 207,  91,  36, 176, 218,  78,  49, 165, 177,  37,  90, 206, 164,  48,  79, 219, 155,  15, 112, 228, 142,  26, 101, 241,
;|*** 		77, 217, 166,  50,  88, 204, 179,  39, 103, 243, 140,  24, 114, 230, 153,  13,  25, 141, 242, 102,  12, 152, 231, 115,  51, 167, 216,  76,  38, 178, 205,  89,
;|*** 		118, 226, 157,   9,  99, 247, 136,  28,  92, 200, 183,  35,  73, 221, 162,  54,  34, 182, 201,  93,  55, 163, 220,  72,   8, 156, 227, 119,  29, 137, 246,  98,
;|*** 		222,  74,  53, 161, 203,  95,  32, 180, 244,  96,  31, 139, 225, 117,  10, 158, 138,  30,  97, 245, 159,  11, 116, 224, 160,  52,  75, 223, 181,  33,  94, 202},
;|*** 
;|*** 	{  0, 192,  67, 131, 134,  70, 197,   5, 207,  15, 140,  76,  73, 137,  10, 202,  93, 157,  30, 222, 219,  27, 152,  88, 146,  82, 209,  17,  20, 212,  87, 151,
;|*** 		186, 122, 249,  57,  60, 252, 127, 191, 117, 181,  54, 246, 243,  51, 176, 112, 231,  39, 164, 100,  97, 161,  34, 226,  40, 232, 107, 171, 174, 110, 237,  45,
;|*** 		183, 119, 244,  52,  49, 241, 114, 178, 120, 184,  59, 251, 254,  62, 189, 125, 234,  42, 169, 105, 108, 172,  47, 239,  37, 229, 102, 166, 163,  99, 224,  32,
;|*** 		13, 205,  78, 142, 139,  75, 200,   8, 194,   2, 129,  65,  68, 132,   7, 199,  80, 144,  19, 211, 214,  22, 149,  85, 159,  95, 220,  28,  25, 217,  90, 154,
;|*** 		173, 109, 238,  46,  43, 235, 104, 168,  98, 162,  33, 225, 228,  36, 167, 103, 240,  48, 179, 115, 118, 182,  53, 245,  63, 255, 124, 188, 185, 121, 250,  58,
;|*** 		23, 215,  84, 148, 145,  81, 210,  18, 216,  24, 155,  91,  94, 158,  29, 221,  74, 138,   9, 201, 204,  12, 143,  79, 133,  69, 198,   6,   3, 195,  64, 128,
;|*** 		26, 218,  89, 153, 156,  92, 223,  31, 213,  21, 150,  86,  83, 147,  16, 208,  71, 135,   4, 196, 193,   1, 130,  66, 136,  72, 203,  11,  14, 206,  77, 141,
;|*** 		160,  96, 227,  35,  38, 230, 101, 165, 111, 175,  44, 236, 233,  41, 170, 106, 253,  61, 190, 126, 123, 187,  56, 248,  50, 242, 113, 177, 180, 116, 247,  55},
;|*** 
;|*** 	{  0, 194,  71, 133, 142,  76, 201,  11, 223,  29, 152,  90,  81, 147,  22, 212, 125, 191,  58, 248, 243,  49, 180, 118, 162,  96, 229,  39,  44, 238, 107, 169,
;|*** 		250,  56, 189, 127, 116, 182,  51, 241,  37, 231,  98, 160, 171, 105, 236,  46, 135,  69, 192,   2,   9, 203,  78, 140,  88, 154,  31, 221, 214,  20, 145,  83,
;|*** 		55, 245, 112, 178, 185, 123, 254,  60, 232,  42, 175, 109, 102, 164,  33, 227,  74, 136,  13, 207, 196,   6, 131,  65, 149,  87, 210,  16,  27, 217,  92, 158,
;|*** 		205,  15, 138,  72,  67, 129,   4, 198,  18, 208,  85, 151, 156,  94, 219,  25, 176, 114, 247,  53,  62, 252, 121, 187, 111, 173,  40, 234, 225,  35, 166, 100,
;|*** 		110, 172,  41, 235, 224,  34, 167, 101, 177, 115, 246,  52,  63, 253, 120, 186,  19, 209,  84, 150, 157,  95, 218,  24, 204,  14, 139,  73,  66, 128,   5, 199,
;|*** 		148,  86, 211,  17,  26, 216,  93, 159,  75, 137,  12, 206, 197,   7, 130,  64, 233,  43, 174, 108, 103, 165,  32, 226,  54, 244, 113, 179, 184, 122, 255,  61,
;|*** 		89, 155,  30, 220, 215,  21, 144,  82, 134,  68, 193,   3,   8, 202,  79, 141,  36, 230,  99, 161, 170, 104, 237,  47, 251,  57, 188, 126, 117, 183,  50, 240,
;|*** 		163,  97, 228,  38,  45, 239, 106, 168, 124, 190,  59, 249, 242,  48, 181, 119, 222,  28, 153,  91,  80, 146,  23, 213,   1, 195,  70, 132, 143,  77, 200,  10},
;|*** 
;|*** 	{  0, 251,  53, 206, 106, 145,  95, 164, 212,  47, 225,  26, 190,  69, 139, 112, 107, 144,  94, 165,   1, 250,  52, 207, 191,  68, 138, 113, 213,  46, 224,  27,
;|*** 		214,  45, 227,  24, 188,  71, 137, 114,   2, 249,  55, 204, 104, 147,  93, 166, 189,  70, 136, 115, 215,  44, 226,  25, 105, 146,  92, 167,   3, 248,  54, 205,
;|*** 		111, 148,  90, 161,   5, 254,  48, 203, 187,  64, 142, 117, 209,  42, 228,  31,   4, 255,  49, 202, 110, 149,  91, 160, 208,  43, 229,  30, 186,  65, 143, 116,
;|*** 		185,  66, 140, 119, 211,  40, 230,  29, 109, 150,  88, 163,   7, 252,  50, 201, 210,  41, 231,  28, 184,  67, 141, 118,   6, 253,  51, 200, 108, 151,  89, 162,
;|*** 		222,  37, 235,  16, 180,  79, 129, 122,  10, 241,  63, 196,  96, 155,  85, 174, 181,  78, 128, 123, 223,  36, 234,  17,  97, 154,  84, 175,  11, 240,  62, 197,
;|*** 		8, 243,  61, 198,  98, 153,  87, 172, 220,  39, 233,  18, 182,  77, 131, 120,  99, 152,  86, 173,   9, 242,  60, 199, 183,  76, 130, 121, 221,  38, 232,  19,
;|*** 		177,  74, 132, 127, 219,  32, 238,  21, 101, 158,  80, 171,  15, 244,  58, 193, 218,  33, 239,  20, 176,  75, 133, 126,  14, 245,  59, 192, 100, 159,  81, 170,
;|*** 		103, 156,  82, 169,  13, 246,  56, 195, 179,  72, 134, 125, 217,  34, 236,  23,  12, 247,  57, 194, 102, 157,  83, 168, 216,  35, 237,  22, 178,  73, 135, 124}};
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void S(unsigned long * block)
;|***  *	\brief Apply S conversion
;|***  *	\param[in] unsigned long * block
;|***  *	\return void
;|***  *
;|***  */
;|*** void S(unsigned long * block)
;|*** {
; Line 143
	*** 000000	c8 24 00 00 		enter	36,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	block = 4
;	valtmp = -4
	*** 000006	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	unsigned long valtmp;
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi[(block[0] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi[(block[0] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi[(block[0] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |= ((unsigned long)(pi[(block[0] >>  0) & 0xFF]) <<  0);
;|*** 	block[0] = valtmp;
; Line 150
	*** 000009	8b 04 			mov	ax,WORD PTR [si]
	*** 00000b	8b 54 02 		mov	dx,WORD PTR [si+2]
	*** 00000e	b1 08 			mov	cl,8
	*** 000010	8b d8 			mov	bx,ax
	*** 000012	8b fa 			mov	di,dx
	*** 000014	c1 ea 08 		shr	dx,8
	*** 000017	2b c9 			sub	cx,cx
	*** 000019	b1 08 			mov	cl,8
	*** 00001b	89 56 f8 		mov	WORD PTR [bp-8],dx
	*** 00001e	8b d7 			mov	dx,di
	*** 000020	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 000023	89 56 f6 		mov	WORD PTR [bp-10],dx
	*** 000026	e8 00 00 		call	__aNulshr
	*** 000029	8b d8 			mov	bx,ax
	*** 00002b	2a ff 			sub	bh,bh
	*** 00002d	8a 87 00 00 		mov	al,BYTE PTR _pi[bx]
	*** 000031	2a e4 			sub	ah,ah
	*** 000033	8a 5e f8 		mov	bl,BYTE PTR [bp-8]
	*** 000036	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 00003a	2a ed 			sub	ch,ch
	*** 00003c	8b d8 			mov	bx,ax
	*** 00003e	8b d1 			mov	dx,cx
	*** 000040	b1 08 			mov	cl,8
	*** 000042	e8 00 00 		call	__aNlshl
	*** 000045	8a 5e f6 		mov	bl,BYTE PTR [bp-10]
	*** 000048	2a ff 			sub	bh,bh
	*** 00004a	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 00004e	2a ed 			sub	ch,ch
	*** 000050	2b db 			sub	bx,bx
	*** 000052	0b d1 			or	dx,cx
	*** 000054	8a 5e f4 		mov	bl,BYTE PTR [bp-12]
	*** 000057	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 00005b	0b c1 			or	ax,cx
	*** 00005d	89 04 			mov	WORD PTR [si],ax
	*** 00005f	89 54 02 		mov	WORD PTR [si+2],dx
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi[(block[1] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi[(block[1] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi[(block[1] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi[ block[1] & 0xFF]);
;|*** 
;|*** 	block[1] = valtmp;
; Line 157
	*** 000062	8b 44 04 		mov	ax,WORD PTR [si+4]
	*** 000065	8b 54 06 		mov	dx,WORD PTR [si+6]
	*** 000068	b1 08 			mov	cl,8
	*** 00006a	8b d8 			mov	bx,ax
	*** 00006c	8b fa 			mov	di,dx
	*** 00006e	c1 ea 08 		shr	dx,8
	*** 000071	2b c9 			sub	cx,cx
	*** 000073	b1 08 			mov	cl,8
	*** 000075	89 56 f0 		mov	WORD PTR [bp-16],dx
	*** 000078	8b d7 			mov	dx,di
	*** 00007a	89 46 ec 		mov	WORD PTR [bp-20],ax
	*** 00007d	89 56 ee 		mov	WORD PTR [bp-18],dx
	*** 000080	e8 00 00 		call	__aNulshr
	*** 000083	8b d8 			mov	bx,ax
	*** 000085	2a ff 			sub	bh,bh
	*** 000087	8a 87 00 00 		mov	al,BYTE PTR _pi[bx]
	*** 00008b	2a e4 			sub	ah,ah
	*** 00008d	8a 5e f0 		mov	bl,BYTE PTR [bp-16]
	*** 000090	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 000094	2a ed 			sub	ch,ch
	*** 000096	8b d8 			mov	bx,ax
	*** 000098	8b d1 			mov	dx,cx
	*** 00009a	b1 08 			mov	cl,8
	*** 00009c	e8 00 00 		call	__aNlshl
	*** 00009f	8a 5e ee 		mov	bl,BYTE PTR [bp-18]
	*** 0000a2	2a ff 			sub	bh,bh
	*** 0000a4	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 0000a8	2a ed 			sub	ch,ch
	*** 0000aa	2b db 			sub	bx,bx
	*** 0000ac	0b d1 			or	dx,cx
	*** 0000ae	8a 5e ec 		mov	bl,BYTE PTR [bp-20]
	*** 0000b1	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 0000b5	0b c1 			or	ax,cx
	*** 0000b7	89 44 04 		mov	WORD PTR [si+4],ax
	*** 0000ba	89 54 06 		mov	WORD PTR [si+6],dx
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi[(block[2] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi[(block[2] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi[(block[2] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi[ block[2] & 0xFF]);
;|*** 
;|*** 	block[2] = valtmp;
; Line 164
	*** 0000bd	8b 44 08 		mov	ax,WORD PTR [si+8]
	*** 0000c0	8b 54 0a 		mov	dx,WORD PTR [si+10]
	*** 0000c3	b1 08 			mov	cl,8
	*** 0000c5	8b d8 			mov	bx,ax
	*** 0000c7	8b fa 			mov	di,dx
	*** 0000c9	c1 ea 08 		shr	dx,8
	*** 0000cc	2b c9 			sub	cx,cx
	*** 0000ce	b1 08 			mov	cl,8
	*** 0000d0	89 56 e8 		mov	WORD PTR [bp-24],dx
	*** 0000d3	8b d7 			mov	dx,di
	*** 0000d5	89 46 e4 		mov	WORD PTR [bp-28],ax
	*** 0000d8	89 56 e6 		mov	WORD PTR [bp-26],dx
	*** 0000db	e8 00 00 		call	__aNulshr
	*** 0000de	8b d8 			mov	bx,ax
	*** 0000e0	2a ff 			sub	bh,bh
	*** 0000e2	8a 87 00 00 		mov	al,BYTE PTR _pi[bx]
	*** 0000e6	2a e4 			sub	ah,ah
	*** 0000e8	8a 5e e8 		mov	bl,BYTE PTR [bp-24]
	*** 0000eb	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 0000ef	2a ed 			sub	ch,ch
	*** 0000f1	8b d8 			mov	bx,ax
	*** 0000f3	8b d1 			mov	dx,cx
	*** 0000f5	b1 08 			mov	cl,8
	*** 0000f7	e8 00 00 		call	__aNlshl
	*** 0000fa	8a 5e e6 		mov	bl,BYTE PTR [bp-26]
	*** 0000fd	2a ff 			sub	bh,bh
	*** 0000ff	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 000103	2a ed 			sub	ch,ch
	*** 000105	2b db 			sub	bx,bx
	*** 000107	0b d1 			or	dx,cx
	*** 000109	8a 5e e4 		mov	bl,BYTE PTR [bp-28]
	*** 00010c	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 000110	0b c1 			or	ax,cx
	*** 000112	89 44 08 		mov	WORD PTR [si+8],ax
	*** 000115	89 54 0a 		mov	WORD PTR [si+10],dx
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi[(block[3] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi[(block[3] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi[(block[3] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi[ block[3] & 0xFF]);
;|*** 
;|*** 	block[3] = valtmp;
; Line 171
	*** 000118	8b 44 0c 		mov	ax,WORD PTR [si+12]
	*** 00011b	8b 54 0e 		mov	dx,WORD PTR [si+14]
	*** 00011e	b1 08 			mov	cl,8
	*** 000120	8b d8 			mov	bx,ax
	*** 000122	8b fa 			mov	di,dx
	*** 000124	c1 ea 08 		shr	dx,8
	*** 000127	2b c9 			sub	cx,cx
	*** 000129	b1 08 			mov	cl,8
	*** 00012b	89 56 e0 		mov	WORD PTR [bp-32],dx
	*** 00012e	8b d7 			mov	dx,di
	*** 000130	89 46 dc 		mov	WORD PTR [bp-36],ax
	*** 000133	89 56 de 		mov	WORD PTR [bp-34],dx
	*** 000136	e8 00 00 		call	__aNulshr
	*** 000139	8b d8 			mov	bx,ax
	*** 00013b	2a ff 			sub	bh,bh
	*** 00013d	8a 87 00 00 		mov	al,BYTE PTR _pi[bx]
	*** 000141	2a e4 			sub	ah,ah
	*** 000143	8a 5e e0 		mov	bl,BYTE PTR [bp-32]
	*** 000146	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 00014a	2a ed 			sub	ch,ch
	*** 00014c	8b d8 			mov	bx,ax
	*** 00014e	8b d1 			mov	dx,cx
	*** 000150	b1 08 			mov	cl,8
	*** 000152	e8 00 00 		call	__aNlshl
	*** 000155	8a 5e de 		mov	bl,BYTE PTR [bp-34]
	*** 000158	2a ff 			sub	bh,bh
	*** 00015a	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 00015e	2a ed 			sub	ch,ch
	*** 000160	2b db 			sub	bx,bx
	*** 000162	0b d1 			or	dx,cx
	*** 000164	8a 5e dc 		mov	bl,BYTE PTR [bp-36]
	*** 000167	8a 8f 00 00 		mov	cl,BYTE PTR _pi[bx]
	*** 00016b	0b c1 			or	ax,cx
	*** 00016d	89 44 0c 		mov	WORD PTR [si+12],ax
	*** 000170	89 54 0e 		mov	WORD PTR [si+14],dx
;|*** }
; Line 172
	*** 000173	5e 			pop	si
	*** 000174	5f 			pop	di
	*** 000175	c9 			leave	
	*** 000176	c3 			ret	

_S	ENDP
	PUBLIC	_S_inv
_S_inv	PROC NEAR	;  COMDAT
;|*** 
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void S_inv(unsigned long * block)
;|***  *	\brief Inverse of S conversion
;|***  *	\param[in] unsigned long * block
;|***  *	\return void
;|***  *
;|***  */
;|*** void S_inv(unsigned long * block)
;|*** {
; Line 184
	*** 000000	c8 24 00 00 		enter	36,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	block = 4
;	valtmp = -4
	*** 000006	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	unsigned long valtmp;
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi_inv[(block[0] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[0] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[0] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi_inv[ block[0] & 0xFF]);
;|*** 
;|*** 	block[0] = valtmp;
; Line 192
	*** 000009	8b 04 			mov	ax,WORD PTR [si]
	*** 00000b	8b 54 02 		mov	dx,WORD PTR [si+2]
	*** 00000e	b1 08 			mov	cl,8
	*** 000010	8b d8 			mov	bx,ax
	*** 000012	8b fa 			mov	di,dx
	*** 000014	c1 ea 08 		shr	dx,8
	*** 000017	2b c9 			sub	cx,cx
	*** 000019	b1 08 			mov	cl,8
	*** 00001b	89 56 f8 		mov	WORD PTR [bp-8],dx
	*** 00001e	8b d7 			mov	dx,di
	*** 000020	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 000023	89 56 f6 		mov	WORD PTR [bp-10],dx
	*** 000026	e8 00 00 		call	__aNulshr
	*** 000029	8b d8 			mov	bx,ax
	*** 00002b	2a ff 			sub	bh,bh
	*** 00002d	8a 87 00 00 		mov	al,BYTE PTR _pi_inv[bx]
	*** 000031	2a e4 			sub	ah,ah
	*** 000033	8a 5e f8 		mov	bl,BYTE PTR [bp-8]
	*** 000036	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 00003a	2a ed 			sub	ch,ch
	*** 00003c	8b d8 			mov	bx,ax
	*** 00003e	8b d1 			mov	dx,cx
	*** 000040	b1 08 			mov	cl,8
	*** 000042	e8 00 00 		call	__aNlshl
	*** 000045	8a 5e f6 		mov	bl,BYTE PTR [bp-10]
	*** 000048	2a ff 			sub	bh,bh
	*** 00004a	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 00004e	2a ed 			sub	ch,ch
	*** 000050	2b db 			sub	bx,bx
	*** 000052	0b d1 			or	dx,cx
	*** 000054	8a 5e f4 		mov	bl,BYTE PTR [bp-12]
	*** 000057	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 00005b	0b c1 			or	ax,cx
	*** 00005d	89 04 			mov	WORD PTR [si],ax
	*** 00005f	89 54 02 		mov	WORD PTR [si+2],dx
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi_inv[(block[1] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[1] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[1] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi_inv[block[1] & 0xFF]);
;|*** 
;|*** 	block[1] = valtmp;
; Line 199
	*** 000062	8b 44 04 		mov	ax,WORD PTR [si+4]
	*** 000065	8b 54 06 		mov	dx,WORD PTR [si+6]
	*** 000068	b1 08 			mov	cl,8
	*** 00006a	8b d8 			mov	bx,ax
	*** 00006c	8b fa 			mov	di,dx
	*** 00006e	c1 ea 08 		shr	dx,8
	*** 000071	2b c9 			sub	cx,cx
	*** 000073	b1 08 			mov	cl,8
	*** 000075	89 56 f0 		mov	WORD PTR [bp-16],dx
	*** 000078	8b d7 			mov	dx,di
	*** 00007a	89 46 ec 		mov	WORD PTR [bp-20],ax
	*** 00007d	89 56 ee 		mov	WORD PTR [bp-18],dx
	*** 000080	e8 00 00 		call	__aNulshr
	*** 000083	8b d8 			mov	bx,ax
	*** 000085	2a ff 			sub	bh,bh
	*** 000087	8a 87 00 00 		mov	al,BYTE PTR _pi_inv[bx]
	*** 00008b	2a e4 			sub	ah,ah
	*** 00008d	8a 5e f0 		mov	bl,BYTE PTR [bp-16]
	*** 000090	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 000094	2a ed 			sub	ch,ch
	*** 000096	8b d8 			mov	bx,ax
	*** 000098	8b d1 			mov	dx,cx
	*** 00009a	b1 08 			mov	cl,8
	*** 00009c	e8 00 00 		call	__aNlshl
	*** 00009f	8a 5e ee 		mov	bl,BYTE PTR [bp-18]
	*** 0000a2	2a ff 			sub	bh,bh
	*** 0000a4	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 0000a8	2a ed 			sub	ch,ch
	*** 0000aa	2b db 			sub	bx,bx
	*** 0000ac	0b d1 			or	dx,cx
	*** 0000ae	8a 5e ec 		mov	bl,BYTE PTR [bp-20]
	*** 0000b1	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 0000b5	0b c1 			or	ax,cx
	*** 0000b7	89 44 04 		mov	WORD PTR [si+4],ax
	*** 0000ba	89 54 06 		mov	WORD PTR [si+6],dx
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi_inv[(block[2] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[2] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[2] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi_inv[block[2] & 0xFF]);
;|*** 	
;|*** 	block[2] = valtmp;
; Line 206
	*** 0000bd	8b 44 08 		mov	ax,WORD PTR [si+8]
	*** 0000c0	8b 54 0a 		mov	dx,WORD PTR [si+10]
	*** 0000c3	b1 08 			mov	cl,8
	*** 0000c5	8b d8 			mov	bx,ax
	*** 0000c7	8b fa 			mov	di,dx
	*** 0000c9	c1 ea 08 		shr	dx,8
	*** 0000cc	2b c9 			sub	cx,cx
	*** 0000ce	b1 08 			mov	cl,8
	*** 0000d0	89 56 e8 		mov	WORD PTR [bp-24],dx
	*** 0000d3	8b d7 			mov	dx,di
	*** 0000d5	89 46 e4 		mov	WORD PTR [bp-28],ax
	*** 0000d8	89 56 e6 		mov	WORD PTR [bp-26],dx
	*** 0000db	e8 00 00 		call	__aNulshr
	*** 0000de	8b d8 			mov	bx,ax
	*** 0000e0	2a ff 			sub	bh,bh
	*** 0000e2	8a 87 00 00 		mov	al,BYTE PTR _pi_inv[bx]
	*** 0000e6	2a e4 			sub	ah,ah
	*** 0000e8	8a 5e e8 		mov	bl,BYTE PTR [bp-24]
	*** 0000eb	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 0000ef	2a ed 			sub	ch,ch
	*** 0000f1	8b d8 			mov	bx,ax
	*** 0000f3	8b d1 			mov	dx,cx
	*** 0000f5	b1 08 			mov	cl,8
	*** 0000f7	e8 00 00 		call	__aNlshl
	*** 0000fa	8a 5e e6 		mov	bl,BYTE PTR [bp-26]
	*** 0000fd	2a ff 			sub	bh,bh
	*** 0000ff	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 000103	2a ed 			sub	ch,ch
	*** 000105	2b db 			sub	bx,bx
	*** 000107	0b d1 			or	dx,cx
	*** 000109	8a 5e e4 		mov	bl,BYTE PTR [bp-28]
	*** 00010c	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 000110	0b c1 			or	ax,cx
	*** 000112	89 44 08 		mov	WORD PTR [si+8],ax
	*** 000115	89 54 0a 		mov	WORD PTR [si+10],dx
;|*** 
;|*** 	valtmp  = ((unsigned long)(pi_inv[(block[3] >> 24) & 0xFF]) << 24);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[3] >> 16) & 0xFF]) << 16);
;|*** 	valtmp |= ((unsigned long)(pi_inv[(block[3] >>  8) & 0xFF]) <<  8);
;|*** 	valtmp |=  (unsigned long)(pi_inv[ block[3] & 0xFF]);
;|*** 
;|*** 	block[3] = valtmp;
; Line 213
	*** 000118	8b 44 0c 		mov	ax,WORD PTR [si+12]
	*** 00011b	8b 54 0e 		mov	dx,WORD PTR [si+14]
	*** 00011e	b1 08 			mov	cl,8
	*** 000120	8b d8 			mov	bx,ax
	*** 000122	8b fa 			mov	di,dx
	*** 000124	c1 ea 08 		shr	dx,8
	*** 000127	2b c9 			sub	cx,cx
	*** 000129	b1 08 			mov	cl,8
	*** 00012b	89 56 e0 		mov	WORD PTR [bp-32],dx
	*** 00012e	8b d7 			mov	dx,di
	*** 000130	89 46 dc 		mov	WORD PTR [bp-36],ax
	*** 000133	89 56 de 		mov	WORD PTR [bp-34],dx
	*** 000136	e8 00 00 		call	__aNulshr
	*** 000139	8b d8 			mov	bx,ax
	*** 00013b	2a ff 			sub	bh,bh
	*** 00013d	8a 87 00 00 		mov	al,BYTE PTR _pi_inv[bx]
	*** 000141	2a e4 			sub	ah,ah
	*** 000143	8a 5e e0 		mov	bl,BYTE PTR [bp-32]
	*** 000146	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 00014a	2a ed 			sub	ch,ch
	*** 00014c	8b d8 			mov	bx,ax
	*** 00014e	8b d1 			mov	dx,cx
	*** 000150	b1 08 			mov	cl,8
	*** 000152	e8 00 00 		call	__aNlshl
	*** 000155	8a 5e de 		mov	bl,BYTE PTR [bp-34]
	*** 000158	2a ff 			sub	bh,bh
	*** 00015a	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 00015e	2a ed 			sub	ch,ch
	*** 000160	2b db 			sub	bx,bx
	*** 000162	0b d1 			or	dx,cx
	*** 000164	8a 5e dc 		mov	bl,BYTE PTR [bp-36]
	*** 000167	8a 8f 00 00 		mov	cl,BYTE PTR _pi_inv[bx]
	*** 00016b	0b c1 			or	ax,cx
	*** 00016d	89 44 0c 		mov	WORD PTR [si+12],ax
	*** 000170	89 54 0e 		mov	WORD PTR [si+14],dx
;|*** }
; Line 214
	*** 000173	5e 			pop	si
	*** 000174	5f 			pop	di
	*** 000175	c9 			leave	
	*** 000176	c3 			ret	

_S_inv	ENDP
	PUBLIC	_ll
_ll	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn unsigned char ll(unsigned long *block)
;|***  *	\brief Get conversion value
;|***  *	\param[in] unsigned long * block
;|***  *	\return unsigned char val
;|***  *
;|***  */
;|*** unsigned char ll(unsigned long *block)
;|*** {
; Line 225
	*** 000000	c8 1a 00 00 		enter	26,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	block = 4
;	val = -1
	*** 000006	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	unsigned char val;
;|*** 
;|*** 	val  =  mult_mod_poly[4][(block[0] >> 24) & 0xFF];
;|*** 	val ^=  mult_mod_poly[2][(block[0] >> 16) & 0xFF];
;|*** 	val ^=  mult_mod_poly[3][(block[0] >>  8) & 0xFF];
;|*** 	val ^=  mult_mod_poly[1][(block[0] >>  0) & 0xFF];
;|*** 
;|*** 	val ^=  mult_mod_poly[6][(block[1] >> 24) & 0xFF];
; Line 233
	*** 000009	8b 04 			mov	ax,WORD PTR [si]
	*** 00000b	8b 54 02 		mov	dx,WORD PTR [si+2]
	*** 00000e	b1 08 			mov	cl,8
	*** 000010	8b d8 			mov	bx,ax
	*** 000012	8b fa 			mov	di,dx
	*** 000014	c1 ea 08 		shr	dx,8
	*** 000017	2b c9 			sub	cx,cx
	*** 000019	b1 08 			mov	cl,8
	*** 00001b	89 56 fa 		mov	WORD PTR [bp-6],dx
	*** 00001e	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 000022	8b 54 06 		mov	dx,WORD PTR [si+6]
	*** 000025	66 89 46 f6 		mov	DWORD PTR [bp-10],eax
	*** 000029	c1 ea 08 		shr	dx,8
	*** 00002c	8b c3 			mov	ax,bx
	*** 00002e	2b db 			sub	bx,bx
	*** 000030	89 56 f2 		mov	WORD PTR [bp-14],dx
	*** 000033	8b d7 			mov	dx,di
	*** 000035	89 46 ee 		mov	WORD PTR [bp-18],ax
	*** 000038	89 56 f0 		mov	WORD PTR [bp-16],dx
	*** 00003b	e8 00 00 		call	__aNulshr
	*** 00003e	8a 5e f2 		mov	bl,BYTE PTR [bp-14]
	*** 000041	2a ff 			sub	bh,bh
	*** 000043	8a 8f 00 06 		mov	cl,BYTE PTR _mult_mod_poly[bx+1536]
	*** 000047	8b d8 			mov	bx,ax
	*** 000049	2a ff 			sub	bh,bh
	*** 00004b	32 8f 00 03 		xor	cl,BYTE PTR _mult_mod_poly[bx+768]
	*** 00004f	8a 5e f0 		mov	bl,BYTE PTR [bp-16]
	*** 000052	32 8f 00 02 		xor	cl,BYTE PTR _mult_mod_poly[bx+512]
	*** 000056	8a 5e fa 		mov	bl,BYTE PTR [bp-6]
	*** 000059	32 8f 00 04 		xor	cl,BYTE PTR _mult_mod_poly[bx+1024]
	*** 00005d	8a 5e ee 		mov	bl,BYTE PTR [bp-18]
	*** 000060	32 8f 00 01 		xor	cl,BYTE PTR _mult_mod_poly[bx+256]
	*** 000064	88 4e ff 		mov	BYTE PTR [bp-1],cl	;val
;|*** 	val ^=  mult_mod_poly[5][(block[1] >> 16) & 0xFF];
; Line 234
	*** 000067	8a 5e f8 		mov	bl,BYTE PTR [bp-8]
	*** 00006a	8a 87 00 05 		mov	al,BYTE PTR _mult_mod_poly[bx+1280]
	*** 00006e	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 	val ^=  mult_mod_poly[0][(block[1] >>  8) & 0xFF];
; Line 235
	*** 000071	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000074	8b 56 f8 		mov	dx,WORD PTR [bp-8]
	*** 000077	b1 08 			mov	cl,8
	*** 000079	e8 00 00 		call	__aNulshr
	*** 00007c	8b d8 			mov	bx,ax
	*** 00007e	2a ff 			sub	bh,bh
	*** 000080	8a 87 00 00 		mov	al,BYTE PTR _mult_mod_poly[bx]
	*** 000084	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 	val ^=  mult_mod_poly[7][(block[1] >>  0) & 0xFF];
; Line 236
	*** 000087	8a 5e f6 		mov	bl,BYTE PTR [bp-10]
	*** 00008a	8a 87 00 07 		mov	al,BYTE PTR _mult_mod_poly[bx+1792]
	*** 00008e	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 
;|*** 	val ^=  mult_mod_poly[0][(block[2] >> 24) & 0xFF];
; Line 238
	*** 000091	8b 44 08 		mov	ax,WORD PTR [si+8]
	*** 000094	8b 54 0a 		mov	dx,WORD PTR [si+10]
	*** 000097	8b c8 			mov	cx,ax
	*** 000099	8b da 			mov	bx,dx
	*** 00009b	8a d6 			mov	dl,dh
	*** 00009d	2a f6 			sub	dh,dh
	*** 00009f	8b c3 			mov	ax,bx
	*** 0000a1	8b da 			mov	bx,dx
	*** 0000a3	8a 97 00 00 		mov	dl,BYTE PTR _mult_mod_poly[bx]
	*** 0000a7	30 56 ff 		xor	BYTE PTR [bp-1],dl	;val
;|*** 	val ^=  mult_mod_poly[5][(block[2] >> 16) & 0xFF];
; Line 239
	*** 0000aa	8b f8 			mov	di,ax
	*** 0000ac	8b d8 			mov	bx,ax
	*** 0000ae	2a ff 			sub	bh,bh
	*** 0000b0	8a 87 00 05 		mov	al,BYTE PTR _mult_mod_poly[bx+1280]
	*** 0000b4	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 	val ^=  mult_mod_poly[6][(block[2] >>  8) & 0xFF];
; Line 240
	*** 0000b7	8b c1 			mov	ax,cx
	*** 0000b9	b1 08 			mov	cl,8
	*** 0000bb	8b d7 			mov	dx,di
	*** 0000bd	89 46 ea 		mov	WORD PTR [bp-22],ax
	*** 0000c0	e8 00 00 		call	__aNulshr
	*** 0000c3	8b d8 			mov	bx,ax
	*** 0000c5	2a ff 			sub	bh,bh
	*** 0000c7	8a 87 00 06 		mov	al,BYTE PTR _mult_mod_poly[bx+1536]
	*** 0000cb	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 	val ^=  mult_mod_poly[1][(block[2] >>  0) & 0xFF];
; Line 241
	*** 0000ce	8a 5e ea 		mov	bl,BYTE PTR [bp-22]
	*** 0000d1	8a 87 00 01 		mov	al,BYTE PTR _mult_mod_poly[bx+256]
	*** 0000d5	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 
;|*** 	val ^=  mult_mod_poly[3][(block[3] >> 24) & 0xFF];
; Line 243
	*** 0000d8	8b 44 0c 		mov	ax,WORD PTR [si+12]
	*** 0000db	8b 54 0e 		mov	dx,WORD PTR [si+14]
	*** 0000de	8b c8 			mov	cx,ax
	*** 0000e0	8b da 			mov	bx,dx
	*** 0000e2	8a d6 			mov	dl,dh
	*** 0000e4	2a f6 			sub	dh,dh
	*** 0000e6	8b c3 			mov	ax,bx
	*** 0000e8	8b da 			mov	bx,dx
	*** 0000ea	8a 97 00 03 		mov	dl,BYTE PTR _mult_mod_poly[bx+768]
	*** 0000ee	30 56 ff 		xor	BYTE PTR [bp-1],dl	;val
;|*** 	val ^=  mult_mod_poly[2][(block[3] >> 16) & 0xFF];
; Line 244
	*** 0000f1	8b f0 			mov	si,ax
	*** 0000f3	8b d8 			mov	bx,ax
	*** 0000f5	2a ff 			sub	bh,bh
	*** 0000f7	8a 87 00 02 		mov	al,BYTE PTR _mult_mod_poly[bx+512]
	*** 0000fb	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 	val ^=  mult_mod_poly[4][(block[3] >>  8) & 0xFF];
; Line 245
	*** 0000fe	8b c1 			mov	ax,cx
	*** 000100	b1 08 			mov	cl,8
	*** 000102	8b d6 			mov	dx,si
	*** 000104	89 46 e6 		mov	WORD PTR [bp-26],ax
	*** 000107	e8 00 00 		call	__aNulshr
	*** 00010a	8b d8 			mov	bx,ax
	*** 00010c	2a ff 			sub	bh,bh
	*** 00010e	8a 87 00 04 		mov	al,BYTE PTR _mult_mod_poly[bx+1024]
	*** 000112	30 46 ff 		xor	BYTE PTR [bp-1],al	;val
;|*** 	val ^=  mult_mod_poly[0][(block[3] >>  0) & 0xFF];
;|*** 
;|*** 	return(val);
; Line 248
	*** 000115	8a 5e e6 		mov	bl,BYTE PTR [bp-26]
	*** 000118	8a 87 00 00 		mov	al,BYTE PTR _mult_mod_poly[bx]
	*** 00011c	32 46 ff 		xor	al,BYTE PTR [bp-1]	;val
;|*** }
; Line 249
	*** 00011f	5e 			pop	si
	*** 000120	5f 			pop	di
	*** 000121	c9 			leave	
	*** 000122	c3 			ret	

_ll	ENDP
	PUBLIC	_R
_R	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void R(unsigned long * block)
;|***  *	\brief Apply R conversion
;|***  *	\param[in] unsigned long * block
;|***  *	\return void
;|***  *
;|***  */
;|*** void R(unsigned long * block)
;|*** {
; Line 260
	*** 000000	c8 12 00 00 		enter	18,0
	*** 000004	56 			push	si
;	block = 4
;	valtmp = -18
;	val = -1
	*** 000005	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	unsigned long valtmp[4];
;|*** 	unsigned char val;
;|*** 
;|*** 	valtmp[0] = block[0];
; Line 264
	*** 000008	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00000b	66 89 46 ee 		mov	DWORD PTR [bp-18],eax	;valtmp
;|*** 	valtmp[1] = block[1];
; Line 265
	*** 00000f	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 000013	66 89 46 f2 		mov	DWORD PTR [bp-14],eax
;|*** 	valtmp[2] = block[2];
; Line 266
	*** 000017	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 00001b	66 89 46 f6 		mov	DWORD PTR [bp-10],eax
;|*** 	valtmp[3] = block[3];
; Line 267
	*** 00001f	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 000023	66 89 46 fa 		mov	DWORD PTR [bp-6],eax
;|*** 	val = ll(valtmp);
; Line 268
	*** 000027	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;valtmp
	*** 00002a	50 			push	ax
	*** 00002b	e8 00 00 		call	_ll
	*** 00002e	5b 			pop	bx
	*** 00002f	88 46 ff 		mov	BYTE PTR [bp-1],al	;val
;|*** 
;|*** 	//block[1] >>= 8;
;|*** 	//block[1]  |= (((block[0]) & 0xFF) << 56);
;|*** 	block[3] >>= 8;
; Line 272
	*** 000032	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 000036	66 c1 e8 08 		shr	eax,8
	*** 00003a	66 89 44 0c 		mov	DWORD PTR [si+12],eax
;|*** 	block[3] |= (block[2] & 0xFF) << 24;
; Line 273
	*** 00003e	8a 64 08 		mov	ah,BYTE PTR [si+8]
	*** 000041	2a c0 			sub	al,al
	*** 000043	2b c9 			sub	cx,cx
	*** 000045	09 44 0e 		or	WORD PTR [si+14],ax
;|*** 	block[2] >>= 8;
; Line 274
	*** 000048	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 00004c	66 c1 e8 08 		shr	eax,8
	*** 000050	66 89 44 08 		mov	DWORD PTR [si+8],eax
;|*** 	block[2] |= (block[1] & 0xFF) << 24;
; Line 275
	*** 000054	8a 64 04 		mov	ah,BYTE PTR [si+4]
	*** 000057	2a c0 			sub	al,al
	*** 000059	2b c9 			sub	cx,cx
	*** 00005b	09 44 0a 		or	WORD PTR [si+10],ax
;|*** 	
;|*** 
;|*** //	block[0] >>= 8;
;|*** //	block[0]  |= ((unsigned long)(val) << 56);
;|*** 	block[1] >>= 8;
; Line 280
	*** 00005e	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 000062	66 c1 e8 08 		shr	eax,8
	*** 000066	66 89 44 04 		mov	DWORD PTR [si+4],eax
;|*** 	block[1] |= (block[0] & 0xFF) << 24;
; Line 281
	*** 00006a	8a 24 			mov	ah,BYTE PTR [si]
	*** 00006c	2a c0 			sub	al,al
	*** 00006e	2b c9 			sub	cx,cx
	*** 000070	09 44 06 		or	WORD PTR [si+6],ax
;|*** 	block[0] >>= 8;
; Line 282
	*** 000073	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 000076	66 c1 e8 08 		shr	eax,8
	*** 00007a	66 89 04 		mov	DWORD PTR [si],eax
;|*** 	block[0] |= ((unsigned long int)(val & 0xFF) << 24);
; Line 283
	*** 00007d	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;val
	*** 000080	8a e0 			mov	ah,al
	*** 000082	2a c0 			sub	al,al
	*** 000084	09 44 02 		or	WORD PTR [si+2],ax
;|*** 
;|*** }
; Line 285
	*** 000087	5e 			pop	si
	*** 000088	c9 			leave	
	*** 000089	c3 			ret	

_R	ENDP
	PUBLIC	_R_inv
_R_inv	PROC NEAR	;  COMDAT
;|*** 
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void R_inv(unsigned long * block)
;|***  *	\brief Inverse of R conversion
;|***  *	\param[in] unsigned long * block
;|***  *	\return void
;|***  *
;|***  */
;|*** void R_inv(unsigned long * block)
;|*** {
; Line 297
	*** 000000	c8 12 00 00 		enter	18,0
	*** 000004	56 			push	si
;	block = 4
;	valtmp = -18
;	val = -1
	*** 000005	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	unsigned long valtmp[4];
;|*** 	unsigned char val;
;|*** 
;|*** 	//valtmp[0]  = (block[0] << 8);
;|*** 	//valtmp[0] |= ((block[1] >> 56) & 0xFF);
;|*** 	valtmp[0] = block[0] << 8;
; Line 303
	*** 000008	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00000b	66 c1 e0 08 		shl	eax,8
	*** 00000f	66 89 46 ee 		mov	DWORD PTR [bp-18],eax	;valtmp
;|*** 	valtmp[0] |= (block[1] >> 24) & 0xFF;
; Line 304
	*** 000013	8a 44 07 		mov	al,BYTE PTR [si+7]
	*** 000016	2a e4 			sub	ah,ah
	*** 000018	09 46 ee 		or	WORD PTR [bp-18],ax	;valtmp
;|*** 	valtmp[1] = block[1] << 8;
; Line 305
	*** 00001b	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 00001f	66 c1 e0 08 		shl	eax,8
	*** 000023	66 89 46 f2 		mov	DWORD PTR [bp-14],eax
;|*** 	valtmp[1] |= (block[2] >> 24) & 0xFF;
; Line 306
	*** 000027	8a 44 0b 		mov	al,BYTE PTR [si+11]
	*** 00002a	2a e4 			sub	ah,ah
	*** 00002c	09 46 f2 		or	WORD PTR [bp-14],ax
;|*** 
;|*** 	//valtmp[1]  = (block[1] << 8);
;|*** 	//valtmp[1] |= ((block[0] >> 56) & 0xFF);
;|*** 
;|*** 	valtmp[2] = block[2] << 8;
; Line 311
	*** 00002f	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 000033	66 c1 e0 08 		shl	eax,8
	*** 000037	66 89 46 f6 		mov	DWORD PTR [bp-10],eax
;|*** 	valtmp[2] |= (block[3] >> 24) & 0xFF;
; Line 312
	*** 00003b	8a 44 0f 		mov	al,BYTE PTR [si+15]
	*** 00003e	2a e4 			sub	ah,ah
	*** 000040	09 46 f6 		or	WORD PTR [bp-10],ax
;|*** 	valtmp[3] = block[3] << 8;
; Line 313
	*** 000043	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 000047	66 c1 e0 08 		shl	eax,8
	*** 00004b	66 89 46 fa 		mov	DWORD PTR [bp-6],eax
;|*** 	valtmp[3] |= (block[0] >> 24) & 0xFF;
; Line 314
	*** 00004f	8a 44 03 		mov	al,BYTE PTR [si+3]
	*** 000052	2a e4 			sub	ah,ah
	*** 000054	09 46 fa 		or	WORD PTR [bp-6],ax
;|*** 
;|*** 	val = ll(valtmp);
; Line 316
	*** 000057	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;valtmp
	*** 00005a	50 			push	ax
	*** 00005b	e8 00 00 		call	_ll
	*** 00005e	5b 			pop	bx
	*** 00005f	88 46 ff 		mov	BYTE PTR [bp-1],al	;val
;|*** 
;|*** 	block[0]  = valtmp[0];
; Line 318
	*** 000062	66 8b 46 ee 		mov	eax,DWORD PTR [bp-18]	;valtmp
	*** 000066	66 89 04 		mov	DWORD PTR [si],eax
;|*** 	block[1] = valtmp[1];
; Line 319
	*** 000069	66 8b 46 f2 		mov	eax,DWORD PTR [bp-14]
	*** 00006d	66 89 44 04 		mov	DWORD PTR [si+4],eax
;|*** 	block[2]  = (valtmp[2] & 0xFFFFFFFFL);
; Line 320
	*** 000071	66 8b 46 f6 		mov	eax,DWORD PTR [bp-10]
	*** 000075	66 89 44 08 		mov	DWORD PTR [si+8],eax
;|*** 	block[3] = valtmp[3] & 0xFFFFFF00L;
; Line 321
	*** 000079	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]
	*** 00007d	2a c0 			sub	al,al
	*** 00007f	66 89 44 0c 		mov	DWORD PTR [si+12],eax
;|*** 	block[3] |= val;
; Line 322
	*** 000083	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;val
	*** 000086	2a e4 			sub	ah,ah
	*** 000088	09 44 0c 		or	WORD PTR [si+12],ax
;|*** }
; Line 323
	*** 00008b	5e 			pop	si
	*** 00008c	c9 			leave	
	*** 00008d	c3 			ret	

_R_inv	ENDP
	PUBLIC	_L
_L	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void L(unsigned long * block)
;|***  *	\brief L conversion (16 iteration of R)
;|***  *	\param[in] unsigned long * block
;|***  *	\return void
;|***  *
;|***  */
;|*** void L(unsigned long * block)
;|*** {
; Line 334
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	block = 4
	*** 000004	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	R(block); R(block); R(block); R(block);
; Line 335
	*** 000007	56 			push	si
	*** 000008	e8 00 00 		call	_R
	*** 00000b	5b 			pop	bx
	*** 00000c	56 			push	si
	*** 00000d	e8 00 00 		call	_R
	*** 000010	5b 			pop	bx
	*** 000011	56 			push	si
	*** 000012	e8 00 00 		call	_R
	*** 000015	5b 			pop	bx
	*** 000016	56 			push	si
	*** 000017	e8 00 00 		call	_R
	*** 00001a	5b 			pop	bx
;|*** 	R(block); R(block); R(block); R(block);
; Line 336
	*** 00001b	56 			push	si
	*** 00001c	e8 00 00 		call	_R
	*** 00001f	5b 			pop	bx
	*** 000020	56 			push	si
	*** 000021	e8 00 00 		call	_R
	*** 000024	5b 			pop	bx
	*** 000025	56 			push	si
	*** 000026	e8 00 00 		call	_R
	*** 000029	5b 			pop	bx
	*** 00002a	56 			push	si
	*** 00002b	e8 00 00 		call	_R
	*** 00002e	5b 			pop	bx
;|*** 	R(block); R(block); R(block); R(block);
; Line 337
	*** 00002f	56 			push	si
	*** 000030	e8 00 00 		call	_R
	*** 000033	5b 			pop	bx
	*** 000034	56 			push	si
	*** 000035	e8 00 00 		call	_R
	*** 000038	5b 			pop	bx
	*** 000039	56 			push	si
	*** 00003a	e8 00 00 		call	_R
	*** 00003d	5b 			pop	bx
	*** 00003e	56 			push	si
	*** 00003f	e8 00 00 		call	_R
	*** 000042	5b 			pop	bx
;|*** 	R(block); R(block); R(block); R(block);
; Line 338
	*** 000043	56 			push	si
	*** 000044	e8 00 00 		call	_R
	*** 000047	5b 			pop	bx
	*** 000048	56 			push	si
	*** 000049	e8 00 00 		call	_R
	*** 00004c	5b 			pop	bx
	*** 00004d	56 			push	si
	*** 00004e	e8 00 00 		call	_R
	*** 000051	5b 			pop	bx
	*** 000052	56 			push	si
	*** 000053	e8 00 00 		call	_R
	*** 000056	5b 			pop	bx
;|*** }
; Line 339
	*** 000057	5e 			pop	si
	*** 000058	c9 			leave	
	*** 000059	c3 			ret	

_L	ENDP
	PUBLIC	_L_inv
_L_inv	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void L_inv(unsigned long * block)
;|***  *	\brief Inverse of L conversion (16 iteration of R_inv)
;|***  *	\param[in] unsigned long * block
;|***  *	\return void
;|***  *
;|***  */
;|*** void L_inv(unsigned long * block)
;|*** {
; Line 350
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	56 			push	si
;	block = 4
	*** 000004	8b 76 04 		mov	si,WORD PTR [bp+4]	;block
;|*** 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);
; Line 351
	*** 000007	56 			push	si
	*** 000008	e8 00 00 		call	_R_inv
	*** 00000b	5b 			pop	bx
	*** 00000c	56 			push	si
	*** 00000d	e8 00 00 		call	_R_inv
	*** 000010	5b 			pop	bx
	*** 000011	56 			push	si
	*** 000012	e8 00 00 		call	_R_inv
	*** 000015	5b 			pop	bx
	*** 000016	56 			push	si
	*** 000017	e8 00 00 		call	_R_inv
	*** 00001a	5b 			pop	bx
;|*** 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);
; Line 352
	*** 00001b	56 			push	si
	*** 00001c	e8 00 00 		call	_R_inv
	*** 00001f	5b 			pop	bx
	*** 000020	56 			push	si
	*** 000021	e8 00 00 		call	_R_inv
	*** 000024	5b 			pop	bx
	*** 000025	56 			push	si
	*** 000026	e8 00 00 		call	_R_inv
	*** 000029	5b 			pop	bx
	*** 00002a	56 			push	si
	*** 00002b	e8 00 00 		call	_R_inv
	*** 00002e	5b 			pop	bx
;|*** 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);
; Line 353
	*** 00002f	56 			push	si
	*** 000030	e8 00 00 		call	_R_inv
	*** 000033	5b 			pop	bx
	*** 000034	56 			push	si
	*** 000035	e8 00 00 		call	_R_inv
	*** 000038	5b 			pop	bx
	*** 000039	56 			push	si
	*** 00003a	e8 00 00 		call	_R_inv
	*** 00003d	5b 			pop	bx
	*** 00003e	56 			push	si
	*** 00003f	e8 00 00 		call	_R_inv
	*** 000042	5b 			pop	bx
;|*** 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);
; Line 354
	*** 000043	56 			push	si
	*** 000044	e8 00 00 		call	_R_inv
	*** 000047	5b 			pop	bx
	*** 000048	56 			push	si
	*** 000049	e8 00 00 		call	_R_inv
	*** 00004c	5b 			pop	bx
	*** 00004d	56 			push	si
	*** 00004e	e8 00 00 		call	_R_inv
	*** 000051	5b 			pop	bx
	*** 000052	56 			push	si
	*** 000053	e8 00 00 		call	_R_inv
	*** 000056	5b 			pop	bx
;|*** }
; Line 355
	*** 000057	5e 			pop	si
	*** 000058	c9 			leave	
	*** 000059	c3 			ret	

_L_inv	ENDP
	PUBLIC	_F
_F	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void F(unsigned long * k, unsigned long * block1, unsigned long * block0)
;|***  *	\brief F conversion (used in key setup)
;|***  *	\param[in] unsigned long * block0
;|***  *	\param[in] unsigned long * block1
;|***  *	\param[in] unsigned long * k
;|***  *	\return void
;|***  *
;|***  */
;|*** void F(unsigned long * k, unsigned long * block1, unsigned long * block0)
;|*** {
; Line 368
	*** 000000	c8 10 00 00 		enter	16,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	k = 4
;	block1 = 6
;	block0 = 8
;	tmpblock = -16
	*** 000006	8b 76 06 		mov	si,WORD PTR [bp+6]	;block1
	*** 000009	8b 7e 04 		mov	di,WORD PTR [bp+4]	;k
;|*** 	unsigned long tmpblock[4];
;|*** 
;|*** 	/* Bitwise xor of k with block2 */
;|*** 	tmpblock[0] = (block1[0] ^ k[0]);
; Line 372
	*** 00000c	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00000f	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000012	66 89 46 f0 		mov	DWORD PTR [bp-16],eax	;tmpblock
;|*** 	tmpblock[1] = (block1[1] ^ k[1]);
; Line 373
	*** 000016	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 00001a	66 33 45 04 		xor	eax,DWORD PTR [di+4]
	*** 00001e	66 89 46 f4 		mov	DWORD PTR [bp-12],eax
;|*** 	tmpblock[2] = (block1[2] ^ k[2]);
; Line 374
	*** 000022	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 000026	66 33 45 08 		xor	eax,DWORD PTR [di+8]
	*** 00002a	66 89 46 f8 		mov	DWORD PTR [bp-8],eax
;|*** 	tmpblock[3] = (block1[3] ^ k[3]);
; Line 375
	*** 00002e	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 000032	66 33 45 0c 		xor	eax,DWORD PTR [di+12]
	*** 000036	66 89 46 fc 		mov	DWORD PTR [bp-4],eax
;|*** 
;|*** 	/* Apply S conversion function  */
;|*** 	S(tmpblock);
; Line 378
	*** 00003a	8d 46 f0 		lea	ax,WORD PTR [bp-16]	;tmpblock
	*** 00003d	50 			push	ax
	*** 00003e	e8 00 00 		call	_S
	*** 000041	5b 			pop	bx
;|*** 
;|*** 	/* Apply L conversion function  */
;|*** 	L(tmpblock);
; Line 381
	*** 000042	8d 46 f0 		lea	ax,WORD PTR [bp-16]	;tmpblock
	*** 000045	50 			push	ax
	*** 000046	e8 00 00 		call	_L
	*** 000049	5b 			pop	bx
;|*** 
;|*** 	/* Add a0 to the the result     */
;|*** 	tmpblock[0] ^= block0[0];
; Line 384
	*** 00004a	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;block0
	*** 00004d	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000050	66 31 46 f0 		xor	DWORD PTR [bp-16],eax	;tmpblock
;|*** 	tmpblock[1] ^= block0[1];
; Line 385
	*** 000054	66 8b 47 04 		mov	eax,DWORD PTR [bx+4]
	*** 000058	66 31 46 f4 		xor	DWORD PTR [bp-12],eax
;|*** 	tmpblock[2] ^= block0[2];
; Line 386
	*** 00005c	66 8b 47 08 		mov	eax,DWORD PTR [bx+8]
	*** 000060	66 31 46 f8 		xor	DWORD PTR [bp-8],eax
;|*** 	tmpblock[3] ^= block0[3];
; Line 387
	*** 000064	66 8b 47 0c 		mov	eax,DWORD PTR [bx+12]
	*** 000068	66 31 46 fc 		xor	DWORD PTR [bp-4],eax
;|*** 
;|*** 	/* Update the results           */
;|*** 	block0[0] = block1[0];
; Line 390
	*** 00006c	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00006f	66 89 07 		mov	DWORD PTR [bx],eax
;|*** 	block0[1] = block1[1];
; Line 391
	*** 000072	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 000076	66 89 47 04 		mov	DWORD PTR [bx+4],eax
;|*** 	block0[2] = block1[2];
; Line 392
	*** 00007a	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 00007e	66 89 47 08 		mov	DWORD PTR [bx+8],eax
;|*** 	block0[3] = block1[3];
; Line 393
	*** 000082	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 000086	66 89 47 0c 		mov	DWORD PTR [bx+12],eax
;|*** 
;|*** 	block1[0] = tmpblock[0];
; Line 395
	*** 00008a	66 8b 46 f0 		mov	eax,DWORD PTR [bp-16]	;tmpblock
	*** 00008e	66 89 04 		mov	DWORD PTR [si],eax
;|*** 	block1[1] = tmpblock[1];
; Line 396
	*** 000091	66 8b 46 f4 		mov	eax,DWORD PTR [bp-12]
	*** 000095	66 89 44 04 		mov	DWORD PTR [si+4],eax
;|*** 	block1[2] = tmpblock[2];
; Line 397
	*** 000099	66 8b 46 f8 		mov	eax,DWORD PTR [bp-8]
	*** 00009d	66 89 44 08 		mov	DWORD PTR [si+8],eax
;|*** 	block1[3] = tmpblock[3];
; Line 398
	*** 0000a1	66 8b 46 fc 		mov	eax,DWORD PTR [bp-4]
	*** 0000a5	66 89 44 0c 		mov	DWORD PTR [si+12],eax
;|*** }
; Line 399
	*** 0000a9	5e 			pop	si
	*** 0000aa	5f 			pop	di
	*** 0000ab	c9 			leave	
	*** 0000ac	c3 			ret	

_F	ENDP
	PUBLIC	_grasshopper_set_key
_grasshopper_set_key	PROC NEAR	;  COMDAT
;|*** 
;|*** /*
;|***  *
;|***  * The three core functions
;|***  *
;|***  */
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void grasshopper_set_key(unsigned long * master_key, grasshopper_kds *subkeys)
;|***  *	\brief Key setup procedure
;|***  *	\param[in] unsigned long * subkeys
;|***  *	\param[in] unsigned long * master_key
;|***  *	\return void
;|***  *
;|***  */
;|*** void grasshopper_set_key(unsigned long * master_key, grasshopper_kds *subkeys)
;|*** {
; Line 417
	*** 000000	c8 2e 02 00 		enter	558,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	master_key = 4
;	subkeys = 6
;	c_values = -546
;	blocktmp = -18
;	blocktmp2 = -34
;	i = -1
;|*** 
;|*** 	unsigned long c_values[32][4], blocktmp[4], blocktmp2[4];
;|*** 	unsigned char i;
;|*** 
;|*** 	/* Compute the C_i values       */
;|*** 	for(i = 0;i < 32;i++)
; Line 423
	*** 000006	c6 46 ff 00 		mov	BYTE PTR [bp-1],0	;i
					$F283:
;|*** 	{
;|*** 		blocktmp[0] = 0L;
; Line 425
	*** 00000a	66 2b c0 		sub	eax,eax
	*** 00000d	66 89 46 ee 		mov	DWORD PTR [bp-18],eax	;blocktmp
;|*** 		blocktmp[1] = 0L;
; Line 426
	*** 000011	66 89 46 f2 		mov	DWORD PTR [bp-14],eax
;|*** 		blocktmp[2] = 0L;
; Line 427
	*** 000015	66 89 46 f6 		mov	DWORD PTR [bp-10],eax
;|*** 		blocktmp[3] = (unsigned long)(i + 1);
; Line 428
	*** 000019	8a 46 ff 		mov	al,BYTE PTR [bp-1]	;i
	*** 00001c	8b c8 			mov	cx,ax
	*** 00001e	40 			inc	ax
	*** 00001f	99 			cwd	
	*** 000020	89 46 fa 		mov	WORD PTR [bp-6],ax
	*** 000023	89 56 fc 		mov	WORD PTR [bp-4],dx
;|*** 		L(blocktmp);
; Line 429
	*** 000026	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;blocktmp
	*** 000029	50 			push	ax
	*** 00002a	8b f1 			mov	si,cx
	*** 00002c	e8 00 00 		call	_L
	*** 00002f	5b 			pop	bx
;|*** 		c_values[i][0] = blocktmp[0]; c_values[i][1] = blocktmp[1]; c_values[i][2] = blocktmp[2]; c_values[i][3] = blocktmp[3];
; Line 430
	*** 000030	8b 46 ee 		mov	ax,WORD PTR [bp-18]	;blocktmp
	*** 000033	8b 56 f0 		mov	dx,WORD PTR [bp-16]
	*** 000036	c1 e6 04 		shl	si,4
	*** 000039	89 82 de fd 		mov	WORD PTR [bp-546][si],ax
	*** 00003d	89 92 e0 fd 		mov	WORD PTR [bp-544][si],dx
	*** 000041	66 8b 46 f2 		mov	eax,DWORD PTR [bp-14]
	*** 000045	66 89 82 e2 fd 		mov	DWORD PTR [bp-542][si],eax
	*** 00004a	66 8b 46 f6 		mov	eax,DWORD PTR [bp-10]
	*** 00004e	66 89 82 e6 fd 		mov	DWORD PTR [bp-538][si],eax
	*** 000053	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]
	*** 000057	66 89 82 ea fd 		mov	DWORD PTR [bp-534][si],eax
;|*** 	for(i = 0;i < 32;i++)
; Line 423
	*** 00005c	fe 46 ff 		inc	BYTE PTR [bp-1]	;i
	*** 00005f	80 7e ff 20 		cmp	BYTE PTR [bp-1],32	;0020H	;i
	*** 000063	72 a5 			jb	SHORT $F283
;|*** 	{
;|*** 		blocktmp[0] = 0L;
;|*** 		blocktmp[1] = 0L;
;|*** 		blocktmp[2] = 0L;
;|*** 		blocktmp[3] = (unsigned long)(i + 1);
;|*** 		L(blocktmp);
;|*** 		c_values[i][0] = blocktmp[0]; c_values[i][1] = blocktmp[1]; c_values[i][2] = blocktmp[2]; c_values[i][3] = blocktmp[3];
;|*** 	}
; Line 431
	*** 000065	8b 7e 04 		mov	di,WORD PTR [bp+4]	;master_key
	*** 000068	8b 76 06 		mov	si,WORD PTR [bp+6]	;subkeys
;|*** 
;|*** 
;|*** 	/* Compute subkeys K_1 and K_2  */
;|*** 	subkeys->y000 = master_key[0]; subkeys->y001 = master_key[1]; subkeys->y010 = master_key[2]; subkeys->y011 = master_key[3];
; Line 435
	*** 00006b	66 8b 05 		mov	eax,DWORD PTR [di]
	*** 00006e	66 89 04 		mov	DWORD PTR [si],eax
	*** 000071	66 8b 45 04 		mov	eax,DWORD PTR [di+4]
	*** 000075	66 89 44 04 		mov	DWORD PTR [si+4],eax
	*** 000079	66 8b 45 08 		mov	eax,DWORD PTR [di+8]
	*** 00007d	66 89 44 08 		mov	DWORD PTR [si+8],eax
	*** 000081	66 8b 45 0c 		mov	eax,DWORD PTR [di+12]
	*** 000085	66 89 44 0c 		mov	DWORD PTR [si+12],eax
;|*** 	subkeys->y100 = master_key[4]; subkeys->y101 = master_key[5]; subkeys->y110 = master_key[6]; subkeys->y111 = master_key[7];
; Line 436
	*** 000089	66 8b 45 10 		mov	eax,DWORD PTR [di+16]
	*** 00008d	66 89 44 10 		mov	DWORD PTR [si+16],eax
	*** 000091	66 8b 45 14 		mov	eax,DWORD PTR [di+20]
	*** 000095	66 89 44 14 		mov	DWORD PTR [si+20],eax
	*** 000099	66 8b 45 18 		mov	eax,DWORD PTR [di+24]
	*** 00009d	66 89 44 18 		mov	DWORD PTR [si+24],eax
	*** 0000a1	66 8b 45 1c 		mov	eax,DWORD PTR [di+28]
	*** 0000a5	66 89 44 1c 		mov	DWORD PTR [si+28],eax
;|*** 
;|*** 	changeEndian(&subkeys->y000); changeEndian(&subkeys->y010); changeEndian(&subkeys->y001); changeEndian(&subkeys->y011);
; Line 438
	*** 0000a9	56 			push	si
	*** 0000aa	e8 00 00 		call	_changeEndian
	*** 0000ad	5b 			pop	bx
	*** 0000ae	8d 44 08 		lea	ax,WORD PTR [si+8]
	*** 0000b1	50 			push	ax
	*** 0000b2	8b f8 			mov	di,ax
	*** 0000b4	e8 00 00 		call	_changeEndian
	*** 0000b7	5b 			pop	bx
	*** 0000b8	8d 44 04 		lea	ax,WORD PTR [si+4]
	*** 0000bb	50 			push	ax
	*** 0000bc	89 86 dc fd 		mov	WORD PTR [bp-548],ax
	*** 0000c0	e8 00 00 		call	_changeEndian
	*** 0000c3	5b 			pop	bx
	*** 0000c4	8d 44 0c 		lea	ax,WORD PTR [si+12]
	*** 0000c7	50 			push	ax
	*** 0000c8	89 86 da fd 		mov	WORD PTR [bp-550],ax
	*** 0000cc	e8 00 00 		call	_changeEndian
	*** 0000cf	5b 			pop	bx
;|*** 	changeEndian(&subkeys->y100); changeEndian(&subkeys->y101); changeEndian(&subkeys->y110); changeEndian(&subkeys->y111);
; Line 439
	*** 0000d0	8d 44 10 		lea	ax,WORD PTR [si+16]
	*** 0000d3	50 			push	ax
	*** 0000d4	89 86 d8 fd 		mov	WORD PTR [bp-552],ax
	*** 0000d8	e8 00 00 		call	_changeEndian
	*** 0000db	5b 			pop	bx
	*** 0000dc	8d 44 14 		lea	ax,WORD PTR [si+20]
	*** 0000df	50 			push	ax
	*** 0000e0	89 86 d6 fd 		mov	WORD PTR [bp-554],ax
	*** 0000e4	e8 00 00 		call	_changeEndian
	*** 0000e7	5b 			pop	bx
	*** 0000e8	8d 44 18 		lea	ax,WORD PTR [si+24]
	*** 0000eb	50 			push	ax
	*** 0000ec	89 86 d4 fd 		mov	WORD PTR [bp-556],ax
	*** 0000f0	e8 00 00 		call	_changeEndian
	*** 0000f3	5b 			pop	bx
	*** 0000f4	8d 44 1c 		lea	ax,WORD PTR [si+28]
	*** 0000f7	50 			push	ax
	*** 0000f8	89 86 d2 fd 		mov	WORD PTR [bp-558],ax
	*** 0000fc	e8 00 00 		call	_changeEndian
	*** 0000ff	5b 			pop	bx
;|*** 
;|*** 	/* Compute subkeys K_3 and K_4  */
;|*** 	blocktmp[0] = subkeys->y000; blocktmp[1] = subkeys->y001; blocktmp[2] = subkeys->y010; blocktmp[3] = subkeys->y011;
; Line 442
	*** 000100	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 000103	66 89 46 ee 		mov	DWORD PTR [bp-18],eax	;blocktmp
	*** 000107	8b 9e dc fd 		mov	bx,WORD PTR [bp-548]
	*** 00010b	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 00010e	66 89 46 f2 		mov	DWORD PTR [bp-14],eax
	*** 000112	66 8b 05 		mov	eax,DWORD PTR [di]
	*** 000115	66 89 46 f6 		mov	DWORD PTR [bp-10],eax
	*** 000119	8b 9e da fd 		mov	bx,WORD PTR [bp-550]
	*** 00011d	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000120	66 89 46 fa 		mov	DWORD PTR [bp-6],eax
;|*** 	blocktmp2[0] = subkeys->y100; blocktmp2[1] = subkeys->y101; blocktmp2[2] = subkeys->y110; blocktmp2[3] = subkeys->y111;
; Line 443
	*** 000124	8b 9e d8 fd 		mov	bx,WORD PTR [bp-552]
	*** 000128	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 00012b	66 89 46 de 		mov	DWORD PTR [bp-34],eax	;blocktmp2
	*** 00012f	8b 9e d6 fd 		mov	bx,WORD PTR [bp-554]
	*** 000133	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000136	66 89 46 e2 		mov	DWORD PTR [bp-30],eax
	*** 00013a	8b 9e d4 fd 		mov	bx,WORD PTR [bp-556]
	*** 00013e	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000141	66 89 46 e6 		mov	DWORD PTR [bp-26],eax
	*** 000145	8b 9e d2 fd 		mov	bx,WORD PTR [bp-558]
	*** 000149	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 00014c	66 89 46 ea 		mov	DWORD PTR [bp-22],eax
;|*** 	F(c_values[0], blocktmp, blocktmp2); F(c_values[1], blocktmp, blocktmp2);
; Line 444
	*** 000150	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000153	50 			push	ax
	*** 000154	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000157	51 			push	cx
	*** 000158	8d 96 de fd 		lea	dx,WORD PTR [bp-546]	;c_values
	*** 00015c	52 			push	dx
	*** 00015d	e8 00 00 		call	_F
	*** 000160	83 c4 06 		add	sp,6
	*** 000163	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000166	50 			push	ax
	*** 000167	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00016a	51 			push	cx
	*** 00016b	8d 96 ee fd 		lea	dx,WORD PTR [bp-530]
	*** 00016f	52 			push	dx
	*** 000170	e8 00 00 		call	_F
	*** 000173	83 c4 06 		add	sp,6
;|*** 	F(c_values[2], blocktmp, blocktmp2); F(c_values[3], blocktmp, blocktmp2);
; Line 445
	*** 000176	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000179	50 			push	ax
	*** 00017a	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00017d	51 			push	cx
	*** 00017e	8d 96 fe fd 		lea	dx,WORD PTR [bp-514]
	*** 000182	52 			push	dx
	*** 000183	e8 00 00 		call	_F
	*** 000186	83 c4 06 		add	sp,6
	*** 000189	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00018c	50 			push	ax
	*** 00018d	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000190	51 			push	cx
	*** 000191	8d 96 0e fe 		lea	dx,WORD PTR [bp-498]
	*** 000195	52 			push	dx
	*** 000196	e8 00 00 		call	_F
	*** 000199	83 c4 06 		add	sp,6
;|*** 	F(c_values[4], blocktmp, blocktmp2); F(c_values[5], blocktmp, blocktmp2);
; Line 446
	*** 00019c	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00019f	50 			push	ax
	*** 0001a0	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0001a3	51 			push	cx
	*** 0001a4	8d 96 1e fe 		lea	dx,WORD PTR [bp-482]
	*** 0001a8	52 			push	dx
	*** 0001a9	e8 00 00 		call	_F
	*** 0001ac	83 c4 06 		add	sp,6
	*** 0001af	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 0001b2	50 			push	ax
	*** 0001b3	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0001b6	51 			push	cx
	*** 0001b7	8d 96 2e fe 		lea	dx,WORD PTR [bp-466]
	*** 0001bb	52 			push	dx
	*** 0001bc	e8 00 00 		call	_F
	*** 0001bf	83 c4 06 		add	sp,6
;|*** 	F(c_values[6], blocktmp, blocktmp2); F(c_values[7], blocktmp, blocktmp2);
; Line 447
	*** 0001c2	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 0001c5	50 			push	ax
	*** 0001c6	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0001c9	51 			push	cx
	*** 0001ca	8d 96 3e fe 		lea	dx,WORD PTR [bp-450]
	*** 0001ce	52 			push	dx
	*** 0001cf	e8 00 00 		call	_F
	*** 0001d2	83 c4 06 		add	sp,6
	*** 0001d5	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 0001d8	50 			push	ax
	*** 0001d9	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0001dc	51 			push	cx
	*** 0001dd	8d 96 4e fe 		lea	dx,WORD PTR [bp-434]
	*** 0001e1	52 			push	dx
	*** 0001e2	e8 00 00 		call	_F
	*** 0001e5	83 c4 06 		add	sp,6
;|*** 
;|*** 	subkeys->y200 = blocktmp[0]; subkeys->y201 = blocktmp[1]; subkeys->y210 = blocktmp[2]; subkeys->y211 = blocktmp[3];
; Line 449
	*** 0001e8	66 8b 46 ee 		mov	eax,DWORD PTR [bp-18]	;blocktmp
	*** 0001ec	66 89 44 20 		mov	DWORD PTR [si+32],eax
	*** 0001f0	66 8b 46 f2 		mov	eax,DWORD PTR [bp-14]
	*** 0001f4	66 89 44 24 		mov	DWORD PTR [si+36],eax
	*** 0001f8	66 8b 46 f6 		mov	eax,DWORD PTR [bp-10]
	*** 0001fc	66 89 44 28 		mov	DWORD PTR [si+40],eax
	*** 000200	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]
	*** 000204	66 89 44 2c 		mov	DWORD PTR [si+44],eax
;|*** 	subkeys->y300 = blocktmp2[0]; subkeys->y301 = blocktmp2[1]; subkeys->y310 = blocktmp2[2]; subkeys->y311 = blocktmp2[3];
; Line 450
	*** 000208	66 8b 46 de 		mov	eax,DWORD PTR [bp-34]	;blocktmp2
	*** 00020c	66 89 44 30 		mov	DWORD PTR [si+48],eax
	*** 000210	66 8b 46 e2 		mov	eax,DWORD PTR [bp-30]
	*** 000214	66 89 44 34 		mov	DWORD PTR [si+52],eax
	*** 000218	66 8b 46 e6 		mov	eax,DWORD PTR [bp-26]
	*** 00021c	66 89 44 38 		mov	DWORD PTR [si+56],eax
	*** 000220	66 8b 46 ea 		mov	eax,DWORD PTR [bp-22]
	*** 000224	66 89 44 3c 		mov	DWORD PTR [si+60],eax
;|*** 
;|*** 	/* Compute subkeys K_5 and K_6  */
;|*** 	F(c_values[ 8], blocktmp, blocktmp2); F(c_values[ 9], blocktmp, blocktmp2);
; Line 453
	*** 000228	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00022b	50 			push	ax
	*** 00022c	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00022f	51 			push	cx
	*** 000230	8d 96 5e fe 		lea	dx,WORD PTR [bp-418]
	*** 000234	52 			push	dx
	*** 000235	e8 00 00 		call	_F
	*** 000238	83 c4 06 		add	sp,6
	*** 00023b	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00023e	50 			push	ax
	*** 00023f	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000242	51 			push	cx
	*** 000243	8d 96 6e fe 		lea	dx,WORD PTR [bp-402]
	*** 000247	52 			push	dx
	*** 000248	e8 00 00 		call	_F
	*** 00024b	83 c4 06 		add	sp,6
;|*** 	F(c_values[10], blocktmp, blocktmp2); F(c_values[11], blocktmp, blocktmp2);
; Line 454
	*** 00024e	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000251	50 			push	ax
	*** 000252	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000255	51 			push	cx
	*** 000256	8d 96 7e fe 		lea	dx,WORD PTR [bp-386]
	*** 00025a	52 			push	dx
	*** 00025b	e8 00 00 		call	_F
	*** 00025e	83 c4 06 		add	sp,6
	*** 000261	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000264	50 			push	ax
	*** 000265	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000268	51 			push	cx
	*** 000269	8d 96 8e fe 		lea	dx,WORD PTR [bp-370]
	*** 00026d	52 			push	dx
	*** 00026e	e8 00 00 		call	_F
	*** 000271	83 c4 06 		add	sp,6
;|*** 	F(c_values[12], blocktmp, blocktmp2); F(c_values[13], blocktmp, blocktmp2);
; Line 455
	*** 000274	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000277	50 			push	ax
	*** 000278	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00027b	51 			push	cx
	*** 00027c	8d 96 9e fe 		lea	dx,WORD PTR [bp-354]
	*** 000280	52 			push	dx
	*** 000281	e8 00 00 		call	_F
	*** 000284	83 c4 06 		add	sp,6
	*** 000287	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00028a	50 			push	ax
	*** 00028b	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00028e	51 			push	cx
	*** 00028f	8d 96 ae fe 		lea	dx,WORD PTR [bp-338]
	*** 000293	52 			push	dx
	*** 000294	e8 00 00 		call	_F
	*** 000297	83 c4 06 		add	sp,6
;|*** 	F(c_values[14], blocktmp, blocktmp2); F(c_values[15], blocktmp, blocktmp2);
; Line 456
	*** 00029a	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00029d	50 			push	ax
	*** 00029e	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0002a1	51 			push	cx
	*** 0002a2	8d 96 be fe 		lea	dx,WORD PTR [bp-322]
	*** 0002a6	52 			push	dx
	*** 0002a7	e8 00 00 		call	_F
	*** 0002aa	83 c4 06 		add	sp,6
	*** 0002ad	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 0002b0	50 			push	ax
	*** 0002b1	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0002b4	51 			push	cx
	*** 0002b5	8d 96 ce fe 		lea	dx,WORD PTR [bp-306]
	*** 0002b9	52 			push	dx
	*** 0002ba	e8 00 00 		call	_F
	*** 0002bd	83 c4 06 		add	sp,6
;|*** 
;|*** 	subkeys->y400 = blocktmp[0]; subkeys->y401 = blocktmp[1]; subkeys->y410 = blocktmp[2]; subkeys->y411 = blocktmp[3];
; Line 458
	*** 0002c0	66 8b 46 ee 		mov	eax,DWORD PTR [bp-18]	;blocktmp
	*** 0002c4	66 89 44 40 		mov	DWORD PTR [si+64],eax
	*** 0002c8	66 8b 46 f2 		mov	eax,DWORD PTR [bp-14]
	*** 0002cc	66 89 44 44 		mov	DWORD PTR [si+68],eax
	*** 0002d0	66 8b 46 f6 		mov	eax,DWORD PTR [bp-10]
	*** 0002d4	66 89 44 48 		mov	DWORD PTR [si+72],eax
	*** 0002d8	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]
	*** 0002dc	66 89 44 4c 		mov	DWORD PTR [si+76],eax
;|*** 	subkeys->y500 = blocktmp2[0]; subkeys->y501 = blocktmp2[1]; subkeys->y510 = blocktmp2[2]; subkeys->y511 = blocktmp2[3];
; Line 459
	*** 0002e0	66 8b 46 de 		mov	eax,DWORD PTR [bp-34]	;blocktmp2
	*** 0002e4	66 89 44 50 		mov	DWORD PTR [si+80],eax
	*** 0002e8	66 8b 46 e2 		mov	eax,DWORD PTR [bp-30]
	*** 0002ec	66 89 44 54 		mov	DWORD PTR [si+84],eax
	*** 0002f0	66 8b 46 e6 		mov	eax,DWORD PTR [bp-26]
	*** 0002f4	66 89 44 58 		mov	DWORD PTR [si+88],eax
	*** 0002f8	66 8b 46 ea 		mov	eax,DWORD PTR [bp-22]
	*** 0002fc	66 89 44 5c 		mov	DWORD PTR [si+92],eax
;|*** 
;|*** 	/* Compute subkeys K_7 and K_8  */
;|*** 	F(c_values[16], blocktmp, blocktmp2); F(c_values[17], blocktmp, blocktmp2);
; Line 462
	*** 000300	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000303	50 			push	ax
	*** 000304	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000307	51 			push	cx
	*** 000308	8d 96 de fe 		lea	dx,WORD PTR [bp-290]
	*** 00030c	52 			push	dx
	*** 00030d	e8 00 00 		call	_F
	*** 000310	83 c4 06 		add	sp,6
	*** 000313	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000316	50 			push	ax
	*** 000317	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00031a	51 			push	cx
	*** 00031b	8d 96 ee fe 		lea	dx,WORD PTR [bp-274]
	*** 00031f	52 			push	dx
	*** 000320	e8 00 00 		call	_F
	*** 000323	83 c4 06 		add	sp,6
;|*** 	F(c_values[18], blocktmp, blocktmp2); F(c_values[19], blocktmp, blocktmp2);
; Line 463
	*** 000326	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000329	50 			push	ax
	*** 00032a	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00032d	51 			push	cx
	*** 00032e	8d 96 fe fe 		lea	dx,WORD PTR [bp-258]
	*** 000332	52 			push	dx
	*** 000333	e8 00 00 		call	_F
	*** 000336	83 c4 06 		add	sp,6
	*** 000339	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00033c	50 			push	ax
	*** 00033d	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000340	51 			push	cx
	*** 000341	8d 96 0e ff 		lea	dx,WORD PTR [bp-242]
	*** 000345	52 			push	dx
	*** 000346	e8 00 00 		call	_F
	*** 000349	83 c4 06 		add	sp,6
;|*** 	F(c_values[20], blocktmp, blocktmp2); F(c_values[21], blocktmp, blocktmp2);
; Line 464
	*** 00034c	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00034f	50 			push	ax
	*** 000350	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000353	51 			push	cx
	*** 000354	8d 96 1e ff 		lea	dx,WORD PTR [bp-226]
	*** 000358	52 			push	dx
	*** 000359	e8 00 00 		call	_F
	*** 00035c	83 c4 06 		add	sp,6
	*** 00035f	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000362	50 			push	ax
	*** 000363	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000366	51 			push	cx
	*** 000367	8d 96 2e ff 		lea	dx,WORD PTR [bp-210]
	*** 00036b	52 			push	dx
	*** 00036c	e8 00 00 		call	_F
	*** 00036f	83 c4 06 		add	sp,6
;|*** 	F(c_values[22], blocktmp, blocktmp2); F(c_values[23], blocktmp, blocktmp2);
; Line 465
	*** 000372	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000375	50 			push	ax
	*** 000376	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000379	51 			push	cx
	*** 00037a	8d 96 3e ff 		lea	dx,WORD PTR [bp-194]
	*** 00037e	52 			push	dx
	*** 00037f	e8 00 00 		call	_F
	*** 000382	83 c4 06 		add	sp,6
	*** 000385	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000388	50 			push	ax
	*** 000389	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00038c	51 			push	cx
	*** 00038d	8d 96 4e ff 		lea	dx,WORD PTR [bp-178]
	*** 000391	52 			push	dx
	*** 000392	e8 00 00 		call	_F
	*** 000395	83 c4 06 		add	sp,6
;|*** 
;|*** 	subkeys->y600 = blocktmp[0]; subkeys->y601 = blocktmp[1]; subkeys->y610 = blocktmp[2]; subkeys->y611 = blocktmp[3];
; Line 467
	*** 000398	66 8b 46 ee 		mov	eax,DWORD PTR [bp-18]	;blocktmp
	*** 00039c	66 89 44 60 		mov	DWORD PTR [si+96],eax
	*** 0003a0	66 8b 46 f2 		mov	eax,DWORD PTR [bp-14]
	*** 0003a4	66 89 44 64 		mov	DWORD PTR [si+100],eax
	*** 0003a8	66 8b 46 f6 		mov	eax,DWORD PTR [bp-10]
	*** 0003ac	66 89 44 68 		mov	DWORD PTR [si+104],eax
	*** 0003b0	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]
	*** 0003b4	66 89 44 6c 		mov	DWORD PTR [si+108],eax
;|*** 	subkeys->y700 = blocktmp2[0]; subkeys->y701 = blocktmp2[1]; subkeys->y710 = blocktmp2[2]; subkeys->y711 = blocktmp2[3];
; Line 468
	*** 0003b8	66 8b 46 de 		mov	eax,DWORD PTR [bp-34]	;blocktmp2
	*** 0003bc	66 89 44 70 		mov	DWORD PTR [si+112],eax
	*** 0003c0	66 8b 46 e2 		mov	eax,DWORD PTR [bp-30]
	*** 0003c4	66 89 44 74 		mov	DWORD PTR [si+116],eax
	*** 0003c8	66 8b 46 e6 		mov	eax,DWORD PTR [bp-26]
	*** 0003cc	66 89 44 78 		mov	DWORD PTR [si+120],eax
	*** 0003d0	66 8b 46 ea 		mov	eax,DWORD PTR [bp-22]
	*** 0003d4	66 89 44 7c 		mov	DWORD PTR [si+124],eax
;|*** 
;|*** 	/* Compute subkeys K_9 and K_{10} */
;|*** 	F(c_values[24], blocktmp, blocktmp2); F(c_values[25], blocktmp, blocktmp2);
; Line 471
	*** 0003d8	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 0003db	50 			push	ax
	*** 0003dc	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0003df	51 			push	cx
	*** 0003e0	8d 96 5e ff 		lea	dx,WORD PTR [bp-162]
	*** 0003e4	52 			push	dx
	*** 0003e5	e8 00 00 		call	_F
	*** 0003e8	83 c4 06 		add	sp,6
	*** 0003eb	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 0003ee	50 			push	ax
	*** 0003ef	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 0003f2	51 			push	cx
	*** 0003f3	8d 96 6e ff 		lea	dx,WORD PTR [bp-146]
	*** 0003f7	52 			push	dx
	*** 0003f8	e8 00 00 		call	_F
	*** 0003fb	83 c4 06 		add	sp,6
;|*** 	F(c_values[26], blocktmp, blocktmp2); F(c_values[27], blocktmp, blocktmp2);
; Line 472
	*** 0003fe	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000401	50 			push	ax
	*** 000402	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000405	51 			push	cx
	*** 000406	8d 96 7e ff 		lea	dx,WORD PTR [bp-130]
	*** 00040a	52 			push	dx
	*** 00040b	e8 00 00 		call	_F
	*** 00040e	83 c4 06 		add	sp,6
	*** 000411	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000414	50 			push	ax
	*** 000415	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000418	51 			push	cx
	*** 000419	8d 56 8e 		lea	dx,WORD PTR [bp-114]
	*** 00041c	52 			push	dx
	*** 00041d	e8 00 00 		call	_F
	*** 000420	83 c4 06 		add	sp,6
;|*** 	F(c_values[28], blocktmp, blocktmp2); F(c_values[29], blocktmp, blocktmp2);
; Line 473
	*** 000423	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000426	50 			push	ax
	*** 000427	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00042a	51 			push	cx
	*** 00042b	8d 56 9e 		lea	dx,WORD PTR [bp-98]
	*** 00042e	52 			push	dx
	*** 00042f	e8 00 00 		call	_F
	*** 000432	83 c4 06 		add	sp,6
	*** 000435	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 000438	50 			push	ax
	*** 000439	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00043c	51 			push	cx
	*** 00043d	8d 56 ae 		lea	dx,WORD PTR [bp-82]
	*** 000440	52 			push	dx
	*** 000441	e8 00 00 		call	_F
	*** 000444	83 c4 06 		add	sp,6
;|*** 	F(c_values[30], blocktmp, blocktmp2); F(c_values[31], blocktmp, blocktmp2);
; Line 474
	*** 000447	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00044a	50 			push	ax
	*** 00044b	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 00044e	51 			push	cx
	*** 00044f	8d 56 be 		lea	dx,WORD PTR [bp-66]
	*** 000452	52 			push	dx
	*** 000453	e8 00 00 		call	_F
	*** 000456	83 c4 06 		add	sp,6
	*** 000459	8d 46 de 		lea	ax,WORD PTR [bp-34]	;blocktmp2
	*** 00045c	50 			push	ax
	*** 00045d	8d 4e ee 		lea	cx,WORD PTR [bp-18]	;blocktmp
	*** 000460	51 			push	cx
	*** 000461	8d 56 ce 		lea	dx,WORD PTR [bp-50]
	*** 000464	52 			push	dx
	*** 000465	e8 00 00 		call	_F
	*** 000468	83 c4 06 		add	sp,6
;|*** 
;|*** 	subkeys->y800 = blocktmp[0]; subkeys->y801 = blocktmp[1]; subkeys->y810 = blocktmp[2]; subkeys->y811 = blocktmp[3];
; Line 476
	*** 00046b	66 8b 46 ee 		mov	eax,DWORD PTR [bp-18]	;blocktmp
	*** 00046f	66 89 84 80 00 		mov	DWORD PTR [si+128],eax
	*** 000474	66 8b 46 f2 		mov	eax,DWORD PTR [bp-14]
	*** 000478	66 89 84 84 00 		mov	DWORD PTR [si+132],eax
	*** 00047d	66 8b 46 f6 		mov	eax,DWORD PTR [bp-10]
	*** 000481	66 89 84 88 00 		mov	DWORD PTR [si+136],eax
	*** 000486	66 8b 46 fa 		mov	eax,DWORD PTR [bp-6]
	*** 00048a	66 89 84 8c 00 		mov	DWORD PTR [si+140],eax
;|*** 	subkeys->y900 = blocktmp2[0]; subkeys->y901 = blocktmp2[1]; subkeys->y910 = blocktmp2[2]; subkeys->y911 = blocktmp2[3];
; Line 477
	*** 00048f	66 8b 46 de 		mov	eax,DWORD PTR [bp-34]	;blocktmp2
	*** 000493	66 89 84 90 00 		mov	DWORD PTR [si+144],eax
	*** 000498	66 8b 46 e2 		mov	eax,DWORD PTR [bp-30]
	*** 00049c	66 89 84 94 00 		mov	DWORD PTR [si+148],eax
	*** 0004a1	66 8b 46 e6 		mov	eax,DWORD PTR [bp-26]
	*** 0004a5	66 89 84 98 00 		mov	DWORD PTR [si+152],eax
	*** 0004aa	66 8b 46 ea 		mov	eax,DWORD PTR [bp-22]
	*** 0004ae	66 89 84 9c 00 		mov	DWORD PTR [si+156],eax
;|*** 
;|*** }
; Line 479
	*** 0004b3	5e 			pop	si
	*** 0004b4	5f 			pop	di
	*** 0004b5	c9 			leave	
	*** 0004b6	c3 			ret	

_grasshopper_set_key	ENDP
	PUBLIC	_grasshopper_encrypt
_grasshopper_encrypt	PROC NEAR	;  COMDAT
;|*** 
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void grasshopper_encrypt(grasshopper_kds *subkeys, unsigned long * plaintext, unsigned long * ciphertext)
;|***  *	\brief Encryption procedure
;|***  *	\param[in] unsigned long * ciphertext
;|***  *	\param[in] unsigned long * plaintext
;|***  *	\param[in] grasshopper_kds * subkeys
;|***  *	\return void
;|***  *
;|***  */
;|*** void grasshopper_encrypt(grasshopper_kds *subkeys, unsigned long * plaintext, unsigned long * ciphertext)
;|*** {
; Line 493
	*** 000000	c8 06 00 00 		enter	6,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	subkeys = 4
;	plaintext = 6
;	ciphertext = 8
	*** 000006	8b 7e 04 		mov	di,WORD PTR [bp+4]	;subkeys
	*** 000009	8b 76 08 		mov	si,WORD PTR [bp+8]	;ciphertext
;|*** 	/* Round 1 with subkey 1 */
;|*** 
;|*** 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);
; Line 496
	*** 00000c	ff 76 06 		push	WORD PTR [bp+6]	;plaintext
	*** 00000f	e8 00 00 		call	_changeEndian
	*** 000012	5b 			pop	bx
	*** 000013	8b 46 06 		mov	ax,WORD PTR [bp+6]	;plaintext
	*** 000016	05 04 00 		add	ax,4
	*** 000019	50 			push	ax
	*** 00001a	89 46 fe 		mov	WORD PTR [bp-2],ax
	*** 00001d	e8 00 00 		call	_changeEndian
	*** 000020	5b 			pop	bx
	*** 000021	8b 46 06 		mov	ax,WORD PTR [bp+6]	;plaintext
	*** 000024	05 08 00 		add	ax,8
	*** 000027	50 			push	ax
	*** 000028	89 46 fc 		mov	WORD PTR [bp-4],ax
	*** 00002b	e8 00 00 		call	_changeEndian
	*** 00002e	5b 			pop	bx
	*** 00002f	8b 46 06 		mov	ax,WORD PTR [bp+6]	;plaintext
	*** 000032	05 0c 00 		add	ax,12	;000cH
	*** 000035	50 			push	ax
	*** 000036	89 46 fa 		mov	WORD PTR [bp-6],ax
	*** 000039	e8 00 00 		call	_changeEndian
	*** 00003c	5b 			pop	bx
;|*** 
;|*** 	ciphertext[0] = plaintext[0] ^ subkeys->y000; ciphertext[1] = plaintext[1] ^ subkeys->y001; ciphertext[2] = plaintext[2] ^ subkeys->y010; ciphertext[3] = plaintext[3] ^ subkeys->y011;
; Line 498
	*** 00003d	8b 05 			mov	ax,WORD PTR [di]
	*** 00003f	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;plaintext
	*** 000042	8b 55 02 		mov	dx,WORD PTR [di+2]
	*** 000045	33 07 			xor	ax,WORD PTR [bx]
	*** 000047	33 57 02 		xor	dx,WORD PTR [bx+2]
	*** 00004a	89 04 			mov	WORD PTR [si],ax
	*** 00004c	89 54 02 		mov	WORD PTR [si+2],dx
	*** 00004f	8b 45 04 		mov	ax,WORD PTR [di+4]
	*** 000052	8b 5e fe 		mov	bx,WORD PTR [bp-2]
	*** 000055	8b 55 06 		mov	dx,WORD PTR [di+6]
	*** 000058	33 07 			xor	ax,WORD PTR [bx]
	*** 00005a	33 57 02 		xor	dx,WORD PTR [bx+2]
	*** 00005d	89 44 04 		mov	WORD PTR [si+4],ax
	*** 000060	89 54 06 		mov	WORD PTR [si+6],dx
	*** 000063	8b 45 08 		mov	ax,WORD PTR [di+8]
	*** 000066	8b 5e fc 		mov	bx,WORD PTR [bp-4]
	*** 000069	8b 55 0a 		mov	dx,WORD PTR [di+10]
	*** 00006c	33 07 			xor	ax,WORD PTR [bx]
	*** 00006e	33 57 02 		xor	dx,WORD PTR [bx+2]
	*** 000071	89 44 08 		mov	WORD PTR [si+8],ax
	*** 000074	89 54 0a 		mov	WORD PTR [si+10],dx
	*** 000077	8b 45 0c 		mov	ax,WORD PTR [di+12]
	*** 00007a	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 00007d	8b 55 0e 		mov	dx,WORD PTR [di+14]
	*** 000080	33 07 			xor	ax,WORD PTR [bx]
	*** 000082	33 57 02 		xor	dx,WORD PTR [bx+2]
	*** 000085	89 44 0c 		mov	WORD PTR [si+12],ax
	*** 000088	89 54 0e 		mov	WORD PTR [si+14],dx
;|*** 	S(ciphertext); L(ciphertext);
; Line 499
	*** 00008b	56 			push	si
	*** 00008c	e8 00 00 		call	_S
	*** 00008f	5b 			pop	bx
	*** 000090	56 			push	si
	*** 000091	e8 00 00 		call	_L
	*** 000094	5b 			pop	bx
;|*** 
;|*** 	/* Round 2 with subkey 2 */
;|*** 	ciphertext[0] ^= subkeys->y100; ciphertext[1] ^= subkeys->y101; ciphertext[2] ^= subkeys->y110; ciphertext[3] ^= subkeys->y111;
; Line 502
	*** 000095	66 8b 45 10 		mov	eax,DWORD PTR [di+16]
	*** 000099	66 31 04 		xor	DWORD PTR [si],eax
	*** 00009c	66 8b 45 14 		mov	eax,DWORD PTR [di+20]
	*** 0000a0	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0000a4	66 8b 45 18 		mov	eax,DWORD PTR [di+24]
	*** 0000a8	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0000ac	66 8b 45 1c 		mov	eax,DWORD PTR [di+28]
	*** 0000b0	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 503
	*** 0000b4	56 			push	si
	*** 0000b5	e8 00 00 		call	_S
	*** 0000b8	5b 			pop	bx
	*** 0000b9	56 			push	si
	*** 0000ba	e8 00 00 		call	_L
	*** 0000bd	5b 			pop	bx
;|*** 
;|*** 	/* Round 3 with subkey 3 */
;|*** 	ciphertext[0] ^= subkeys->y200; ciphertext[1] ^= subkeys->y201; ciphertext[2] ^= subkeys->y210; ciphertext[3] ^= subkeys->y211;
; Line 506
	*** 0000be	66 8b 45 20 		mov	eax,DWORD PTR [di+32]
	*** 0000c2	66 31 04 		xor	DWORD PTR [si],eax
	*** 0000c5	66 8b 45 24 		mov	eax,DWORD PTR [di+36]
	*** 0000c9	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0000cd	66 8b 45 28 		mov	eax,DWORD PTR [di+40]
	*** 0000d1	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0000d5	66 8b 45 2c 		mov	eax,DWORD PTR [di+44]
	*** 0000d9	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 507
	*** 0000dd	56 			push	si
	*** 0000de	e8 00 00 		call	_S
	*** 0000e1	5b 			pop	bx
	*** 0000e2	56 			push	si
	*** 0000e3	e8 00 00 		call	_L
	*** 0000e6	5b 			pop	bx
;|*** 	
;|*** 	/* Round 4 with subkey 4 */
;|*** 	ciphertext[0] ^= subkeys->y300; ciphertext[1] ^= subkeys->y301; ciphertext[2] ^= subkeys->y310; ciphertext[3] ^= subkeys->y311;
; Line 510
	*** 0000e7	66 8b 45 30 		mov	eax,DWORD PTR [di+48]
	*** 0000eb	66 31 04 		xor	DWORD PTR [si],eax
	*** 0000ee	66 8b 45 34 		mov	eax,DWORD PTR [di+52]
	*** 0000f2	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0000f6	66 8b 45 38 		mov	eax,DWORD PTR [di+56]
	*** 0000fa	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0000fe	66 8b 45 3c 		mov	eax,DWORD PTR [di+60]
	*** 000102	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 511
	*** 000106	56 			push	si
	*** 000107	e8 00 00 		call	_S
	*** 00010a	5b 			pop	bx
	*** 00010b	56 			push	si
	*** 00010c	e8 00 00 		call	_L
	*** 00010f	5b 			pop	bx
;|*** 	
;|*** 	/* Round 5 with subkey 5 */
;|*** 	ciphertext[0] ^= subkeys->y400; ciphertext[1] ^= subkeys->y401; ciphertext[2] ^= subkeys->y410; ciphertext[3] ^= subkeys->y411;
; Line 514
	*** 000110	66 8b 45 40 		mov	eax,DWORD PTR [di+64]
	*** 000114	66 31 04 		xor	DWORD PTR [si],eax
	*** 000117	66 8b 45 44 		mov	eax,DWORD PTR [di+68]
	*** 00011b	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 00011f	66 8b 45 48 		mov	eax,DWORD PTR [di+72]
	*** 000123	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 000127	66 8b 45 4c 		mov	eax,DWORD PTR [di+76]
	*** 00012b	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 515
	*** 00012f	56 			push	si
	*** 000130	e8 00 00 		call	_S
	*** 000133	5b 			pop	bx
	*** 000134	56 			push	si
	*** 000135	e8 00 00 		call	_L
	*** 000138	5b 			pop	bx
;|*** 	
;|*** 	/* Round 6 with subkey 6 */
;|*** 	ciphertext[0] ^= subkeys->y500; ciphertext[1] ^= subkeys->y501; ciphertext[2] ^= subkeys->y510; ciphertext[3] ^= subkeys->y511;
; Line 518
	*** 000139	66 8b 45 50 		mov	eax,DWORD PTR [di+80]
	*** 00013d	66 31 04 		xor	DWORD PTR [si],eax
	*** 000140	66 8b 45 54 		mov	eax,DWORD PTR [di+84]
	*** 000144	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 000148	66 8b 45 58 		mov	eax,DWORD PTR [di+88]
	*** 00014c	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 000150	66 8b 45 5c 		mov	eax,DWORD PTR [di+92]
	*** 000154	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 519
	*** 000158	56 			push	si
	*** 000159	e8 00 00 		call	_S
	*** 00015c	5b 			pop	bx
	*** 00015d	56 			push	si
	*** 00015e	e8 00 00 		call	_L
	*** 000161	5b 			pop	bx
;|*** 	
;|*** 	/* Round 7 with subkey 7 */
;|*** 	ciphertext[0] ^= subkeys->y600; ciphertext[1] ^= subkeys->y601; ciphertext[2] ^= subkeys->y610; ciphertext[3] ^= subkeys->y611;
; Line 522
	*** 000162	66 8b 45 60 		mov	eax,DWORD PTR [di+96]
	*** 000166	66 31 04 		xor	DWORD PTR [si],eax
	*** 000169	66 8b 45 64 		mov	eax,DWORD PTR [di+100]
	*** 00016d	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 000171	66 8b 45 68 		mov	eax,DWORD PTR [di+104]
	*** 000175	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 000179	66 8b 45 6c 		mov	eax,DWORD PTR [di+108]
	*** 00017d	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 523
	*** 000181	56 			push	si
	*** 000182	e8 00 00 		call	_S
	*** 000185	5b 			pop	bx
	*** 000186	56 			push	si
	*** 000187	e8 00 00 		call	_L
	*** 00018a	5b 			pop	bx
;|*** 	
;|*** 	/* Round 8 with subkey 8 */
;|*** 	ciphertext[0] ^= subkeys->y700; ciphertext[1] ^= subkeys->y701; ciphertext[2] ^= subkeys->y710; ciphertext[3] ^= subkeys->y711;
; Line 526
	*** 00018b	66 8b 45 70 		mov	eax,DWORD PTR [di+112]
	*** 00018f	66 31 04 		xor	DWORD PTR [si],eax
	*** 000192	66 8b 45 74 		mov	eax,DWORD PTR [di+116]
	*** 000196	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 00019a	66 8b 45 78 		mov	eax,DWORD PTR [di+120]
	*** 00019e	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0001a2	66 8b 45 7c 		mov	eax,DWORD PTR [di+124]
	*** 0001a6	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 527
	*** 0001aa	56 			push	si
	*** 0001ab	e8 00 00 		call	_S
	*** 0001ae	5b 			pop	bx
	*** 0001af	56 			push	si
	*** 0001b0	e8 00 00 		call	_L
	*** 0001b3	5b 			pop	bx
;|*** 	
;|*** 	/* Round 9 with subkey 9 */
;|*** 	ciphertext[0] ^= subkeys->y800; ciphertext[1] ^= subkeys->y801; ciphertext[2] ^= subkeys->y810; ciphertext[3] ^= subkeys->y811;
; Line 530
	*** 0001b4	66 8b 85 80 00 		mov	eax,DWORD PTR [di+128]
	*** 0001b9	66 31 04 		xor	DWORD PTR [si],eax
	*** 0001bc	66 8b 85 84 00 		mov	eax,DWORD PTR [di+132]
	*** 0001c1	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0001c5	66 8b 85 88 00 		mov	eax,DWORD PTR [di+136]
	*** 0001ca	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0001ce	66 8b 85 8c 00 		mov	eax,DWORD PTR [di+140]
	*** 0001d3	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	S(ciphertext); L(ciphertext);
; Line 531
	*** 0001d7	56 			push	si
	*** 0001d8	e8 00 00 		call	_S
	*** 0001db	5b 			pop	bx
	*** 0001dc	56 			push	si
	*** 0001dd	e8 00 00 		call	_L
	*** 0001e0	5b 			pop	bx
;|*** 	
;|*** 	/* Round 10 with subkey 10 */
;|*** 	ciphertext[0] ^= subkeys->y900; ciphertext[1] ^= subkeys->y901; ciphertext[2] ^= subkeys->y910; ciphertext[3] ^= subkeys->y911;
; Line 534
	*** 0001e1	66 8b 85 90 00 		mov	eax,DWORD PTR [di+144]
	*** 0001e6	66 31 04 		xor	DWORD PTR [si],eax
	*** 0001e9	66 8b 85 94 00 		mov	eax,DWORD PTR [di+148]
	*** 0001ee	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0001f2	66 8b 85 98 00 		mov	eax,DWORD PTR [di+152]
	*** 0001f7	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0001fb	66 8b 85 9c 00 		mov	eax,DWORD PTR [di+156]
	*** 000200	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 
;|*** 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);
; Line 536
	*** 000204	56 			push	si
	*** 000205	e8 00 00 		call	_changeEndian
	*** 000208	5b 			pop	bx
	*** 000209	8d 44 04 		lea	ax,WORD PTR [si+4]
	*** 00020c	50 			push	ax
	*** 00020d	e8 00 00 		call	_changeEndian
	*** 000210	5b 			pop	bx
	*** 000211	ff 76 fc 		push	WORD PTR [bp-4]
	*** 000214	e8 00 00 		call	_changeEndian
	*** 000217	5b 			pop	bx
	*** 000218	ff 76 fa 		push	WORD PTR [bp-6]
	*** 00021b	e8 00 00 		call	_changeEndian
	*** 00021e	5b 			pop	bx
;|*** 	
;|*** }
; Line 538
	*** 00021f	5e 			pop	si
	*** 000220	5f 			pop	di
	*** 000221	c9 			leave	
	*** 000222	c3 			ret	

_grasshopper_encrypt	ENDP
	PUBLIC	_grasshopper_decrypt
_grasshopper_decrypt	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void grasshopper_decrypt(grasshopper_kds* subkeys, unsigned long * ciphertext, unsigned long * plaintext)
;|***  *	\brief Decryption procedure
;|***  *	\param[in] unsigned long * plaintext
;|***  *	\param[in] unsigned long * ciphertext
;|***  *	\param[in] grasshopper_kds * subkeys
;|***  *	\return void
;|***  *
;|***  */
;|*** void grasshopper_decrypt(grasshopper_kds* subkeys, unsigned long * ciphertext, unsigned long * plaintext)
;|*** {
; Line 551
	*** 000000	c8 06 00 00 		enter	6,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	subkeys = 4
;	ciphertext = 6
;	plaintext = 8
	*** 000006	8b 7e 04 		mov	di,WORD PTR [bp+4]	;subkeys
	*** 000009	8b 76 08 		mov	si,WORD PTR [bp+8]	;plaintext
;|*** 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&ciphertext[2]); changeEndian(&ciphertext[3]);
; Line 552
	*** 00000c	ff 76 06 		push	WORD PTR [bp+6]	;ciphertext
	*** 00000f	e8 00 00 		call	_changeEndian
	*** 000012	5b 			pop	bx
	*** 000013	8b 46 06 		mov	ax,WORD PTR [bp+6]	;ciphertext
	*** 000016	05 04 00 		add	ax,4
	*** 000019	50 			push	ax
	*** 00001a	89 46 fe 		mov	WORD PTR [bp-2],ax
	*** 00001d	e8 00 00 		call	_changeEndian
	*** 000020	5b 			pop	bx
	*** 000021	8b 46 06 		mov	ax,WORD PTR [bp+6]	;ciphertext
	*** 000024	05 08 00 		add	ax,8
	*** 000027	50 			push	ax
	*** 000028	89 46 fc 		mov	WORD PTR [bp-4],ax
	*** 00002b	e8 00 00 		call	_changeEndian
	*** 00002e	5b 			pop	bx
	*** 00002f	8b 46 06 		mov	ax,WORD PTR [bp+6]	;ciphertext
	*** 000032	05 0c 00 		add	ax,12	;000cH
	*** 000035	50 			push	ax
	*** 000036	89 46 fa 		mov	WORD PTR [bp-6],ax
	*** 000039	e8 00 00 		call	_changeEndian
	*** 00003c	5b 			pop	bx
;|*** 
;|*** 	/* Round 1 with subkey 10 */
;|*** 	plaintext[0] = ciphertext[0] ^ subkeys->y900; plaintext[1] = ciphertext[1] ^ subkeys->y901; plaintext[2] = ciphertext[2] ^ subkeys->y910; plaintext[3] = ciphertext[3] ^ subkeys->y911;
; Line 555
	*** 00003d	8b 85 90 00 		mov	ax,WORD PTR [di+144]
	*** 000041	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;ciphertext
	*** 000044	8b 95 92 00 		mov	dx,WORD PTR [di+146]
	*** 000048	33 07 			xor	ax,WORD PTR [bx]
	*** 00004a	33 57 02 		xor	dx,WORD PTR [bx+2]
	*** 00004d	89 04 			mov	WORD PTR [si],ax
	*** 00004f	89 54 02 		mov	WORD PTR [si+2],dx
	*** 000052	8b 5e fe 		mov	bx,WORD PTR [bp-2]
	*** 000055	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000058	66 33 85 94 00 		xor	eax,DWORD PTR [di+148]
	*** 00005d	66 89 44 04 		mov	DWORD PTR [si+4],eax
	*** 000061	8b 5e fc 		mov	bx,WORD PTR [bp-4]
	*** 000064	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000067	66 33 85 98 00 		xor	eax,DWORD PTR [di+152]
	*** 00006c	66 89 44 08 		mov	DWORD PTR [si+8],eax
	*** 000070	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 000073	66 8b 07 		mov	eax,DWORD PTR [bx]
	*** 000076	66 33 85 9c 00 		xor	eax,DWORD PTR [di+156]
	*** 00007b	66 89 44 0c 		mov	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 556
	*** 00007f	56 			push	si
	*** 000080	e8 00 00 		call	_L_inv
	*** 000083	5b 			pop	bx
	*** 000084	56 			push	si
	*** 000085	e8 00 00 		call	_S_inv
	*** 000088	5b 			pop	bx
;|*** 
;|*** 	/* Round 2 with subkey 9 */
;|*** 	plaintext[0] ^= subkeys->y800; plaintext[1] ^= subkeys->y801; plaintext[2] ^= subkeys->y810; plaintext[3] ^= subkeys->y811;
; Line 559
	*** 000089	66 8b 85 80 00 		mov	eax,DWORD PTR [di+128]
	*** 00008e	66 31 04 		xor	DWORD PTR [si],eax
	*** 000091	66 8b 85 84 00 		mov	eax,DWORD PTR [di+132]
	*** 000096	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 00009a	66 8b 85 88 00 		mov	eax,DWORD PTR [di+136]
	*** 00009f	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0000a3	66 8b 85 8c 00 		mov	eax,DWORD PTR [di+140]
	*** 0000a8	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 560
	*** 0000ac	56 			push	si
	*** 0000ad	e8 00 00 		call	_L_inv
	*** 0000b0	5b 			pop	bx
	*** 0000b1	56 			push	si
	*** 0000b2	e8 00 00 		call	_S_inv
	*** 0000b5	5b 			pop	bx
;|*** 
;|*** 	/* Round 3 with subkey 8 */
;|*** 	plaintext[0] ^= subkeys->y700; plaintext[1] ^= subkeys->y701; plaintext[2] ^= subkeys->y710; plaintext[3] ^= subkeys->y711;
; Line 563
	*** 0000b6	66 8b 45 70 		mov	eax,DWORD PTR [di+112]
	*** 0000ba	66 31 04 		xor	DWORD PTR [si],eax
	*** 0000bd	66 8b 45 74 		mov	eax,DWORD PTR [di+116]
	*** 0000c1	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0000c5	66 8b 45 78 		mov	eax,DWORD PTR [di+120]
	*** 0000c9	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0000cd	66 8b 45 7c 		mov	eax,DWORD PTR [di+124]
	*** 0000d1	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 564
	*** 0000d5	56 			push	si
	*** 0000d6	e8 00 00 		call	_L_inv
	*** 0000d9	5b 			pop	bx
	*** 0000da	56 			push	si
	*** 0000db	e8 00 00 		call	_S_inv
	*** 0000de	5b 			pop	bx
;|*** 
;|*** 	/* Round 4 with subkey 7 */
;|*** 	plaintext[0] ^= subkeys->y600; plaintext[1] ^= subkeys->y601; plaintext[2] ^= subkeys->y610; plaintext[3] ^= subkeys->y611;
; Line 567
	*** 0000df	66 8b 45 60 		mov	eax,DWORD PTR [di+96]
	*** 0000e3	66 31 04 		xor	DWORD PTR [si],eax
	*** 0000e6	66 8b 45 64 		mov	eax,DWORD PTR [di+100]
	*** 0000ea	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0000ee	66 8b 45 68 		mov	eax,DWORD PTR [di+104]
	*** 0000f2	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0000f6	66 8b 45 6c 		mov	eax,DWORD PTR [di+108]
	*** 0000fa	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 568
	*** 0000fe	56 			push	si
	*** 0000ff	e8 00 00 		call	_L_inv
	*** 000102	5b 			pop	bx
	*** 000103	56 			push	si
	*** 000104	e8 00 00 		call	_S_inv
	*** 000107	5b 			pop	bx
;|*** 
;|*** 	/* Round 5 with subkey 6 */
;|*** 	plaintext[0] ^= subkeys->y500; plaintext[1] ^= subkeys->y501; plaintext[2] ^= subkeys->y510; plaintext[3] ^= subkeys->y511;
; Line 571
	*** 000108	66 8b 45 50 		mov	eax,DWORD PTR [di+80]
	*** 00010c	66 31 04 		xor	DWORD PTR [si],eax
	*** 00010f	66 8b 45 54 		mov	eax,DWORD PTR [di+84]
	*** 000113	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 000117	66 8b 45 58 		mov	eax,DWORD PTR [di+88]
	*** 00011b	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 00011f	66 8b 45 5c 		mov	eax,DWORD PTR [di+92]
	*** 000123	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 572
	*** 000127	56 			push	si
	*** 000128	e8 00 00 		call	_L_inv
	*** 00012b	5b 			pop	bx
	*** 00012c	56 			push	si
	*** 00012d	e8 00 00 		call	_S_inv
	*** 000130	5b 			pop	bx
;|*** 
;|*** 	/* Round 6 with subkey 5 */
;|*** 	plaintext[0] ^= subkeys->y400; plaintext[1] ^= subkeys->y401; plaintext[2] ^= subkeys->y410; plaintext[3] ^= subkeys->y411;
; Line 575
	*** 000131	66 8b 45 40 		mov	eax,DWORD PTR [di+64]
	*** 000135	66 31 04 		xor	DWORD PTR [si],eax
	*** 000138	66 8b 45 44 		mov	eax,DWORD PTR [di+68]
	*** 00013c	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 000140	66 8b 45 48 		mov	eax,DWORD PTR [di+72]
	*** 000144	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 000148	66 8b 45 4c 		mov	eax,DWORD PTR [di+76]
	*** 00014c	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 576
	*** 000150	56 			push	si
	*** 000151	e8 00 00 		call	_L_inv
	*** 000154	5b 			pop	bx
	*** 000155	56 			push	si
	*** 000156	e8 00 00 		call	_S_inv
	*** 000159	5b 			pop	bx
;|*** 
;|*** 	/* Round 7 with subkey 4 */
;|*** 	plaintext[0] ^= subkeys->y300; plaintext[1] ^= subkeys->y301; plaintext[2] ^= subkeys->y310; plaintext[3] ^= subkeys->y311;
; Line 579
	*** 00015a	66 8b 45 30 		mov	eax,DWORD PTR [di+48]
	*** 00015e	66 31 04 		xor	DWORD PTR [si],eax
	*** 000161	66 8b 45 34 		mov	eax,DWORD PTR [di+52]
	*** 000165	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 000169	66 8b 45 38 		mov	eax,DWORD PTR [di+56]
	*** 00016d	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 000171	66 8b 45 3c 		mov	eax,DWORD PTR [di+60]
	*** 000175	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 580
	*** 000179	56 			push	si
	*** 00017a	e8 00 00 		call	_L_inv
	*** 00017d	5b 			pop	bx
	*** 00017e	56 			push	si
	*** 00017f	e8 00 00 		call	_S_inv
	*** 000182	5b 			pop	bx
;|*** 
;|*** 	/* Round 8 with subkey 3 */
;|*** 	plaintext[0] ^= subkeys->y200; plaintext[1] ^= subkeys->y201; plaintext[2] ^= subkeys->y210; plaintext[3] ^= subkeys->y211;
; Line 583
	*** 000183	66 8b 45 20 		mov	eax,DWORD PTR [di+32]
	*** 000187	66 31 04 		xor	DWORD PTR [si],eax
	*** 00018a	66 8b 45 24 		mov	eax,DWORD PTR [di+36]
	*** 00018e	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 000192	66 8b 45 28 		mov	eax,DWORD PTR [di+40]
	*** 000196	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 00019a	66 8b 45 2c 		mov	eax,DWORD PTR [di+44]
	*** 00019e	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 584
	*** 0001a2	56 			push	si
	*** 0001a3	e8 00 00 		call	_L_inv
	*** 0001a6	5b 			pop	bx
	*** 0001a7	56 			push	si
	*** 0001a8	e8 00 00 		call	_S_inv
	*** 0001ab	5b 			pop	bx
;|*** 
;|*** 	/* Round 9 with subkey 2 */
;|*** 	plaintext[0] ^= subkeys->y100; plaintext[1] ^= subkeys->y101; plaintext[2] ^= subkeys->y110; plaintext[3] ^= subkeys->y111;
; Line 587
	*** 0001ac	66 8b 45 10 		mov	eax,DWORD PTR [di+16]
	*** 0001b0	66 31 04 		xor	DWORD PTR [si],eax
	*** 0001b3	66 8b 45 14 		mov	eax,DWORD PTR [di+20]
	*** 0001b7	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0001bb	66 8b 45 18 		mov	eax,DWORD PTR [di+24]
	*** 0001bf	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0001c3	66 8b 45 1c 		mov	eax,DWORD PTR [di+28]
	*** 0001c7	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	L_inv(plaintext); S_inv(plaintext);
; Line 588
	*** 0001cb	56 			push	si
	*** 0001cc	e8 00 00 		call	_L_inv
	*** 0001cf	5b 			pop	bx
	*** 0001d0	56 			push	si
	*** 0001d1	e8 00 00 		call	_S_inv
	*** 0001d4	5b 			pop	bx
;|*** 
;|*** 	/* Round 10 with subkey 1 */
;|*** 	plaintext[0] ^= subkeys->y000; plaintext[1] ^= subkeys->y001; plaintext[2] ^= subkeys->y010; plaintext[3] ^= subkeys->y011;
; Line 591
	*** 0001d5	66 8b 05 		mov	eax,DWORD PTR [di]
	*** 0001d8	66 31 04 		xor	DWORD PTR [si],eax
	*** 0001db	66 8b 45 04 		mov	eax,DWORD PTR [di+4]
	*** 0001df	66 31 44 04 		xor	DWORD PTR [si+4],eax
	*** 0001e3	66 8b 45 08 		mov	eax,DWORD PTR [di+8]
	*** 0001e7	66 31 44 08 		xor	DWORD PTR [si+8],eax
	*** 0001eb	66 8b 45 0c 		mov	eax,DWORD PTR [di+12]
	*** 0001ef	66 31 44 0c 		xor	DWORD PTR [si+12],eax
;|*** 	/*L_inv(plaintext); S_inv(plaintext);*/
;|*** 
;|*** 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);
; Line 594
	*** 0001f3	56 			push	si
	*** 0001f4	e8 00 00 		call	_changeEndian
	*** 0001f7	5b 			pop	bx
	*** 0001f8	8d 44 04 		lea	ax,WORD PTR [si+4]
	*** 0001fb	50 			push	ax
	*** 0001fc	e8 00 00 		call	_changeEndian
	*** 0001ff	5b 			pop	bx
	*** 000200	8d 44 08 		lea	ax,WORD PTR [si+8]
	*** 000203	50 			push	ax
	*** 000204	e8 00 00 		call	_changeEndian
	*** 000207	5b 			pop	bx
	*** 000208	8d 44 0c 		lea	ax,WORD PTR [si+12]
	*** 00020b	50 			push	ax
	*** 00020c	e8 00 00 		call	_changeEndian
	*** 00020f	5b 			pop	bx
;|*** 
;|*** }
; Line 596
	*** 000210	5e 			pop	si
	*** 000211	5f 			pop	di
	*** 000212	c9 			leave	
	*** 000213	c3 			ret	

_grasshopper_decrypt	ENDP
	PUBLIC	_grasshopper_xor_ks
_grasshopper_xor_ks	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void grasshopper_xor_ks(grasshopper_kds *ks, grasshopper_kds *out_ks, unsigned long *in, unsigned int len)
;|***  *	\brief Apply grasshopper algorithm
;|***  *	\param[in] unsigned int len
;|***  *	\param[in] unsigned long * in
;|***  *	\param[in] grasshopper_kds * out_ks
;|***  *	\param[in] grasshopper_kds * ks
;|***  *	\return void
;|***  *
;|***  */
;|*** void grasshopper_xor_ks(grasshopper_kds *ks, grasshopper_kds *out_ks, unsigned long *in, unsigned int len)
;|*** {
; Line 610
	*** 000000	c8 06 00 00 		enter	6,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	ks = 4
;	out_ks = 6
;	in = 8
;	len = 10
;	i = -4
;|*** 	unsigned long i;
;|*** 	if (!len)
; Line 612
	*** 000006	83 7e 0a 00 		cmp	WORD PTR [bp+10],0	;len
	*** 00000a	0f 84 e9 01 		je	$L325
	*** 00000e	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;out_ks
	*** 000011	8b 7e 08 		mov	di,WORD PTR [bp+8]	;in
	*** 000014	8b 4e 04 		mov	cx,WORD PTR [bp+4]	;ks
;|*** 		return;
;|*** 
;|*** 	out_ks->y000 = ks->y000 ^ in[0]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];
; Line 615
	*** 000017	8b 05 			mov	ax,WORD PTR [di]
	*** 000019	8b f1 			mov	si,cx
	*** 00001b	8b 55 02 		mov	dx,WORD PTR [di+2]
	*** 00001e	33 04 			xor	ax,WORD PTR [si]
	*** 000020	33 54 02 		xor	dx,WORD PTR [si+2]
	*** 000023	89 07 			mov	WORD PTR [bx],ax
	*** 000025	89 57 02 		mov	WORD PTR [bx+2],dx
	*** 000028	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 00002c	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00002f	66 89 47 04 		mov	DWORD PTR [bx+4],eax
	*** 000033	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 000037	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00003a	66 89 47 08 		mov	DWORD PTR [bx+8],eax
	*** 00003e	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 000042	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000045	66 89 47 0c 		mov	DWORD PTR [bx+12],eax
;|*** 	out_ks->y100 = ks->y100 ^ in[0]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];
; Line 616
	*** 000049	66 8b 44 10 		mov	eax,DWORD PTR [si+16]
	*** 00004d	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000050	66 89 47 10 		mov	DWORD PTR [bx+16],eax
	*** 000054	66 8b 44 14 		mov	eax,DWORD PTR [si+20]
	*** 000058	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00005b	66 89 47 14 		mov	DWORD PTR [bx+20],eax
	*** 00005f	66 8b 44 18 		mov	eax,DWORD PTR [si+24]
	*** 000063	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000066	66 89 47 18 		mov	DWORD PTR [bx+24],eax
	*** 00006a	66 8b 44 1c 		mov	eax,DWORD PTR [si+28]
	*** 00006e	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000071	66 89 47 1c 		mov	DWORD PTR [bx+28],eax
;|*** 	out_ks->y200 = ks->y200 ^ in[0]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];
; Line 617
	*** 000075	66 8b 44 20 		mov	eax,DWORD PTR [si+32]
	*** 000079	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00007c	66 89 47 20 		mov	DWORD PTR [bx+32],eax
	*** 000080	66 8b 44 24 		mov	eax,DWORD PTR [si+36]
	*** 000084	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000087	66 89 47 24 		mov	DWORD PTR [bx+36],eax
	*** 00008b	66 8b 44 28 		mov	eax,DWORD PTR [si+40]
	*** 00008f	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000092	66 89 47 28 		mov	DWORD PTR [bx+40],eax
	*** 000096	66 8b 44 2c 		mov	eax,DWORD PTR [si+44]
	*** 00009a	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00009d	66 89 47 2c 		mov	DWORD PTR [bx+44],eax
;|*** 	out_ks->y300 = ks->y300 ^ in[0]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];
; Line 618
	*** 0000a1	66 8b 44 30 		mov	eax,DWORD PTR [si+48]
	*** 0000a5	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000a8	66 89 47 30 		mov	DWORD PTR [bx+48],eax
	*** 0000ac	66 8b 44 34 		mov	eax,DWORD PTR [si+52]
	*** 0000b0	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000b3	66 89 47 34 		mov	DWORD PTR [bx+52],eax
	*** 0000b7	66 8b 44 38 		mov	eax,DWORD PTR [si+56]
	*** 0000bb	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000be	66 89 47 38 		mov	DWORD PTR [bx+56],eax
	*** 0000c2	66 8b 44 3c 		mov	eax,DWORD PTR [si+60]
	*** 0000c6	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000c9	66 89 47 3c 		mov	DWORD PTR [bx+60],eax
;|*** 	out_ks->y400 = ks->y400 ^ in[0]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];
; Line 619
	*** 0000cd	66 8b 44 40 		mov	eax,DWORD PTR [si+64]
	*** 0000d1	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000d4	66 89 47 40 		mov	DWORD PTR [bx+64],eax
	*** 0000d8	66 8b 44 44 		mov	eax,DWORD PTR [si+68]
	*** 0000dc	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000df	66 89 47 44 		mov	DWORD PTR [bx+68],eax
	*** 0000e3	66 8b 44 48 		mov	eax,DWORD PTR [si+72]
	*** 0000e7	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000ea	66 89 47 48 		mov	DWORD PTR [bx+72],eax
	*** 0000ee	66 8b 44 4c 		mov	eax,DWORD PTR [si+76]
	*** 0000f2	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0000f5	66 89 47 4c 		mov	DWORD PTR [bx+76],eax
;|*** 	out_ks->y500 = ks->y500 ^ in[0]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];
; Line 620
	*** 0000f9	66 8b 44 50 		mov	eax,DWORD PTR [si+80]
	*** 0000fd	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000100	66 89 47 50 		mov	DWORD PTR [bx+80],eax
	*** 000104	66 8b 44 54 		mov	eax,DWORD PTR [si+84]
	*** 000108	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00010b	66 89 47 54 		mov	DWORD PTR [bx+84],eax
	*** 00010f	66 8b 44 58 		mov	eax,DWORD PTR [si+88]
	*** 000113	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000116	66 89 47 58 		mov	DWORD PTR [bx+88],eax
	*** 00011a	66 8b 44 5c 		mov	eax,DWORD PTR [si+92]
	*** 00011e	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000121	66 89 47 5c 		mov	DWORD PTR [bx+92],eax
;|*** 	out_ks->y600 = ks->y600 ^ in[0]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];
; Line 621
	*** 000125	66 8b 44 60 		mov	eax,DWORD PTR [si+96]
	*** 000129	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00012c	66 89 47 60 		mov	DWORD PTR [bx+96],eax
	*** 000130	66 8b 44 64 		mov	eax,DWORD PTR [si+100]
	*** 000134	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000137	66 89 47 64 		mov	DWORD PTR [bx+100],eax
	*** 00013b	66 8b 44 68 		mov	eax,DWORD PTR [si+104]
	*** 00013f	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000142	66 89 47 68 		mov	DWORD PTR [bx+104],eax
	*** 000146	66 8b 44 6c 		mov	eax,DWORD PTR [si+108]
	*** 00014a	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00014d	66 89 47 6c 		mov	DWORD PTR [bx+108],eax
;|*** 	out_ks->y700 = ks->y700 ^ in[0]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];
; Line 622
	*** 000151	66 8b 44 70 		mov	eax,DWORD PTR [si+112]
	*** 000155	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000158	66 89 47 70 		mov	DWORD PTR [bx+112],eax
	*** 00015c	66 8b 44 74 		mov	eax,DWORD PTR [si+116]
	*** 000160	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000163	66 89 47 74 		mov	DWORD PTR [bx+116],eax
	*** 000167	66 8b 44 78 		mov	eax,DWORD PTR [si+120]
	*** 00016b	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00016e	66 89 47 78 		mov	DWORD PTR [bx+120],eax
	*** 000172	66 8b 44 7c 		mov	eax,DWORD PTR [si+124]
	*** 000176	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000179	66 89 47 7c 		mov	DWORD PTR [bx+124],eax
;|*** 	out_ks->y800 = ks->y800 ^ in[0]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];
; Line 623
	*** 00017d	66 8b 84 80 00 		mov	eax,DWORD PTR [si+128]
	*** 000182	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000185	66 89 87 80 00 		mov	DWORD PTR [bx+128],eax
	*** 00018a	66 8b 84 84 00 		mov	eax,DWORD PTR [si+132]
	*** 00018f	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000192	66 89 87 84 00 		mov	DWORD PTR [bx+132],eax
	*** 000197	66 8b 84 88 00 		mov	eax,DWORD PTR [si+136]
	*** 00019c	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00019f	66 89 87 88 00 		mov	DWORD PTR [bx+136],eax
	*** 0001a4	66 8b 84 8c 00 		mov	eax,DWORD PTR [si+140]
	*** 0001a9	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0001ac	66 89 87 8c 00 		mov	DWORD PTR [bx+140],eax
;|*** 	out_ks->y900 = ks->y900 ^ in[0]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];
; Line 624
	*** 0001b1	66 8b 84 90 00 		mov	eax,DWORD PTR [si+144]
	*** 0001b6	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0001b9	66 89 87 90 00 		mov	DWORD PTR [bx+144],eax
	*** 0001be	66 8b 84 94 00 		mov	eax,DWORD PTR [si+148]
	*** 0001c3	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0001c6	66 89 87 94 00 		mov	DWORD PTR [bx+148],eax
	*** 0001cb	66 8b 84 98 00 		mov	eax,DWORD PTR [si+152]
	*** 0001d0	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0001d3	66 89 87 98 00 		mov	DWORD PTR [bx+152],eax
	*** 0001d8	66 8b 84 9c 00 		mov	eax,DWORD PTR [si+156]
	*** 0001dd	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0001e0	66 89 87 9c 00 		mov	DWORD PTR [bx+156],eax
;|*** 	for (i = 1; i < len; i++)
; Line 625
	*** 0001e5	66 c7 46 fc 01 00 00 00 mov	DWORD PTR [bp-4],1	;i
					$F311:
	*** 0001ed	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;len
	*** 0001f0	2b d2 			sub	dx,dx
	*** 0001f2	3b 56 fe 		cmp	dx,WORD PTR [bp-2]
	*** 0001f5	73 03 			jae	SHORT $L324
					$L325:
	*** 0001f7	e9 18 02 		jmp	$EX308
					$L324:
	*** 0001fa	77 07 			ja	SHORT $L322
	*** 0001fc	3b 46 fc 		cmp	ax,WORD PTR [bp-4]	;i
	*** 0001ff	0f 86 0f 02 		jbe	$EX308
					$L322:
;|*** 	{
;|*** 		out_ks->y000 = ks->y000 ^ in[i]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];
; Line 627
	*** 000203	8b 76 fc 		mov	si,WORD PTR [bp-4]	;i
	*** 000206	c1 e6 02 		shl	si,2
	*** 000209	03 f7 			add	si,di
	*** 00020b	8b 04 			mov	ax,WORD PTR [si]
	*** 00020d	8b 54 02 		mov	dx,WORD PTR [si+2]
	*** 000210	50 			push	ax
	*** 000211	89 76 fa 		mov	WORD PTR [bp-6],si
	*** 000214	58 			pop	ax
	*** 000215	8b f1 			mov	si,cx
	*** 000217	33 04 			xor	ax,WORD PTR [si]
	*** 000219	33 54 02 		xor	dx,WORD PTR [si+2]
	*** 00021c	89 07 			mov	WORD PTR [bx],ax
	*** 00021e	89 57 02 		mov	WORD PTR [bx+2],dx
	*** 000221	66 8b 44 04 		mov	eax,DWORD PTR [si+4]
	*** 000225	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000228	66 89 47 04 		mov	DWORD PTR [bx+4],eax
	*** 00022c	66 8b 44 08 		mov	eax,DWORD PTR [si+8]
	*** 000230	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000233	66 89 47 08 		mov	DWORD PTR [bx+8],eax
	*** 000237	66 8b 44 0c 		mov	eax,DWORD PTR [si+12]
	*** 00023b	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00023e	66 89 47 0c 		mov	DWORD PTR [bx+12],eax
;|*** 		out_ks->y100 = ks->y100 ^ in[i]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];
; Line 628
	*** 000242	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 000245	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 000248	8b f1 			mov	si,cx
	*** 00024a	66 33 44 10 		xor	eax,DWORD PTR [si+16]
	*** 00024e	66 89 47 10 		mov	DWORD PTR [bx+16],eax
	*** 000252	66 8b 44 14 		mov	eax,DWORD PTR [si+20]
	*** 000256	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000259	66 89 47 14 		mov	DWORD PTR [bx+20],eax
	*** 00025d	66 8b 44 18 		mov	eax,DWORD PTR [si+24]
	*** 000261	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000264	66 89 47 18 		mov	DWORD PTR [bx+24],eax
	*** 000268	66 8b 44 1c 		mov	eax,DWORD PTR [si+28]
	*** 00026c	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00026f	66 89 47 1c 		mov	DWORD PTR [bx+28],eax
;|*** 		out_ks->y200 = ks->y200 ^ in[i]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];
; Line 629
	*** 000273	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 000276	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 000279	8b f1 			mov	si,cx
	*** 00027b	66 33 44 20 		xor	eax,DWORD PTR [si+32]
	*** 00027f	66 89 47 20 		mov	DWORD PTR [bx+32],eax
	*** 000283	66 8b 44 24 		mov	eax,DWORD PTR [si+36]
	*** 000287	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00028a	66 89 47 24 		mov	DWORD PTR [bx+36],eax
	*** 00028e	66 8b 44 28 		mov	eax,DWORD PTR [si+40]
	*** 000292	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000295	66 89 47 28 		mov	DWORD PTR [bx+40],eax
	*** 000299	66 8b 44 2c 		mov	eax,DWORD PTR [si+44]
	*** 00029d	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0002a0	66 89 47 2c 		mov	DWORD PTR [bx+44],eax
;|*** 		out_ks->y300 = ks->y300 ^ in[i]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];
; Line 630
	*** 0002a4	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 0002a7	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 0002aa	8b f1 			mov	si,cx
	*** 0002ac	66 33 44 30 		xor	eax,DWORD PTR [si+48]
	*** 0002b0	66 89 47 30 		mov	DWORD PTR [bx+48],eax
	*** 0002b4	66 8b 44 34 		mov	eax,DWORD PTR [si+52]
	*** 0002b8	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0002bb	66 89 47 34 		mov	DWORD PTR [bx+52],eax
	*** 0002bf	66 8b 44 38 		mov	eax,DWORD PTR [si+56]
	*** 0002c3	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0002c6	66 89 47 38 		mov	DWORD PTR [bx+56],eax
	*** 0002ca	66 8b 44 3c 		mov	eax,DWORD PTR [si+60]
	*** 0002ce	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0002d1	66 89 47 3c 		mov	DWORD PTR [bx+60],eax
;|*** 		out_ks->y400 = ks->y400 ^ in[i]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];
; Line 631
	*** 0002d5	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 0002d8	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 0002db	8b f1 			mov	si,cx
	*** 0002dd	66 33 44 40 		xor	eax,DWORD PTR [si+64]
	*** 0002e1	66 89 47 40 		mov	DWORD PTR [bx+64],eax
	*** 0002e5	66 8b 44 44 		mov	eax,DWORD PTR [si+68]
	*** 0002e9	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0002ec	66 89 47 44 		mov	DWORD PTR [bx+68],eax
	*** 0002f0	66 8b 44 48 		mov	eax,DWORD PTR [si+72]
	*** 0002f4	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0002f7	66 89 47 48 		mov	DWORD PTR [bx+72],eax
	*** 0002fb	66 8b 44 4c 		mov	eax,DWORD PTR [si+76]
	*** 0002ff	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000302	66 89 47 4c 		mov	DWORD PTR [bx+76],eax
;|*** 		out_ks->y500 = ks->y500 ^ in[i]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];
; Line 632
	*** 000306	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 000309	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00030c	8b f1 			mov	si,cx
	*** 00030e	66 33 44 50 		xor	eax,DWORD PTR [si+80]
	*** 000312	66 89 47 50 		mov	DWORD PTR [bx+80],eax
	*** 000316	66 8b 44 54 		mov	eax,DWORD PTR [si+84]
	*** 00031a	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00031d	66 89 47 54 		mov	DWORD PTR [bx+84],eax
	*** 000321	66 8b 44 58 		mov	eax,DWORD PTR [si+88]
	*** 000325	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000328	66 89 47 58 		mov	DWORD PTR [bx+88],eax
	*** 00032c	66 8b 44 5c 		mov	eax,DWORD PTR [si+92]
	*** 000330	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000333	66 89 47 5c 		mov	DWORD PTR [bx+92],eax
;|*** 		out_ks->y600 = ks->y600 ^ in[i]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];
; Line 633
	*** 000337	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 00033a	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00033d	8b f1 			mov	si,cx
	*** 00033f	66 33 44 60 		xor	eax,DWORD PTR [si+96]
	*** 000343	66 89 47 60 		mov	DWORD PTR [bx+96],eax
	*** 000347	66 8b 44 64 		mov	eax,DWORD PTR [si+100]
	*** 00034b	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00034e	66 89 47 64 		mov	DWORD PTR [bx+100],eax
	*** 000352	66 8b 44 68 		mov	eax,DWORD PTR [si+104]
	*** 000356	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000359	66 89 47 68 		mov	DWORD PTR [bx+104],eax
	*** 00035d	66 8b 44 6c 		mov	eax,DWORD PTR [si+108]
	*** 000361	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000364	66 89 47 6c 		mov	DWORD PTR [bx+108],eax
;|*** 		out_ks->y700 = ks->y700 ^ in[i]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];
; Line 634
	*** 000368	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 00036b	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00036e	8b f1 			mov	si,cx
	*** 000370	66 33 44 70 		xor	eax,DWORD PTR [si+112]
	*** 000374	66 89 47 70 		mov	DWORD PTR [bx+112],eax
	*** 000378	66 8b 44 74 		mov	eax,DWORD PTR [si+116]
	*** 00037c	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00037f	66 89 47 74 		mov	DWORD PTR [bx+116],eax
	*** 000383	66 8b 44 78 		mov	eax,DWORD PTR [si+120]
	*** 000387	66 33 05 		xor	eax,DWORD PTR [di]
	*** 00038a	66 89 47 78 		mov	DWORD PTR [bx+120],eax
	*** 00038e	66 8b 44 7c 		mov	eax,DWORD PTR [si+124]
	*** 000392	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000395	66 89 47 7c 		mov	DWORD PTR [bx+124],eax
;|*** 		out_ks->y800 = ks->y800 ^ in[i]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];
; Line 635
	*** 000399	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 00039c	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 00039f	8b f1 			mov	si,cx
	*** 0003a1	66 33 84 80 00 		xor	eax,DWORD PTR [si+128]
	*** 0003a6	66 89 87 80 00 		mov	DWORD PTR [bx+128],eax
	*** 0003ab	66 8b 84 84 00 		mov	eax,DWORD PTR [si+132]
	*** 0003b0	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0003b3	66 89 87 84 00 		mov	DWORD PTR [bx+132],eax
	*** 0003b8	66 8b 84 88 00 		mov	eax,DWORD PTR [si+136]
	*** 0003bd	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0003c0	66 89 87 88 00 		mov	DWORD PTR [bx+136],eax
	*** 0003c5	66 8b 84 8c 00 		mov	eax,DWORD PTR [si+140]
	*** 0003ca	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0003cd	66 89 87 8c 00 		mov	DWORD PTR [bx+140],eax
;|*** 		out_ks->y900 = ks->y900 ^ in[i]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];
; Line 636
	*** 0003d2	8b 76 fa 		mov	si,WORD PTR [bp-6]
	*** 0003d5	66 8b 04 		mov	eax,DWORD PTR [si]
	*** 0003d8	8b f1 			mov	si,cx
	*** 0003da	66 33 84 90 00 		xor	eax,DWORD PTR [si+144]
	*** 0003df	66 89 87 90 00 		mov	DWORD PTR [bx+144],eax
	*** 0003e4	66 8b 84 94 00 		mov	eax,DWORD PTR [si+148]
	*** 0003e9	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0003ec	66 89 87 94 00 		mov	DWORD PTR [bx+148],eax
	*** 0003f1	66 8b 84 98 00 		mov	eax,DWORD PTR [si+152]
	*** 0003f6	66 33 05 		xor	eax,DWORD PTR [di]
	*** 0003f9	66 89 87 98 00 		mov	DWORD PTR [bx+152],eax
	*** 0003fe	66 8b 84 9c 00 		mov	eax,DWORD PTR [si+156]
	*** 000403	66 33 05 		xor	eax,DWORD PTR [di]
	*** 000406	66 89 87 9c 00 		mov	DWORD PTR [bx+156],eax
;|*** 	for (i = 1; i < len; i++)
; Line 625
	*** 00040b	66 ff 46 fc 		inc	DWORD PTR [bp-4]	;i
	*** 00040f	e9 db fd 		jmp	$F311
;|*** 	{
;|*** 		out_ks->y000 = ks->y000 ^ in[i]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];
;|*** 		out_ks->y100 = ks->y100 ^ in[i]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];
;|*** 		out_ks->y200 = ks->y200 ^ in[i]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];
;|*** 		out_ks->y300 = ks->y300 ^ in[i]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];
;|*** 		out_ks->y400 = ks->y400 ^ in[i]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];
;|*** 		out_ks->y500 = ks->y500 ^ in[i]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];
;|*** 		out_ks->y600 = ks->y600 ^ in[i]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];
;|*** 		out_ks->y700 = ks->y700 ^ in[i]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];
;|*** 		out_ks->y800 = ks->y800 ^ in[i]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];
;|*** 		out_ks->y900 = ks->y900 ^ in[i]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];
;|*** 	}
;|*** }
; Line 638
					$EX308:
	*** 000412	5e 			pop	si
	*** 000413	5f 			pop	di
	*** 000414	c9 			leave	
	*** 000415	c3 			ret	

_grasshopper_xor_ks	ENDP
	PUBLIC	_changeEndian
_changeEndian	PROC NEAR	;  COMDAT
;|*** 
;|*** /**
;|***  *
;|***  *	\fn void changeEndian(unsigned long *ret)
;|***  *	\brief Switch opposed bytes (lower byte to upper byte, ...) of unsigned long
;|***  *	\param[in] unsigned long * ret
;|***  *	\return void
;|***  *
;|***  */
;|*** void changeEndian(unsigned long *ret)
;|*** {
; Line 649
	*** 000000	c8 08 00 00 		enter	8,0
	*** 000004	57 			push	di
	*** 000005	56 			push	si
;	ret = 4
;	tmp = -4
	*** 000006	8b 76 04 		mov	si,WORD PTR [bp+4]	;ret
;|*** 	unsigned long tmp = 0L;
;|*** 
;|*** 	tmp  = (*ret & 0xFF) << 24;
;|*** 	tmp |= (*ret & 0xFF00) << 8;
;|*** 	tmp |= (*ret & 0xFF0000) >> 8;
;|*** 	tmp |= (*ret & 0xFF000000) >> 24;
;|*** 	*ret = tmp;
; Line 656
	*** 000009	8b 04 			mov	ax,WORD PTR [si]
	*** 00000b	2a c0 			sub	al,al
	*** 00000d	8b 0c 			mov	cx,WORD PTR [si]
	*** 00000f	8b 5c 02 		mov	bx,WORD PTR [si+2]
	*** 000012	89 5e fe 		mov	WORD PTR [bp-2],bx
	*** 000015	2b db 			sub	bx,bx
	*** 000017	8b d1 			mov	dx,cx
	*** 000019	b1 08 			mov	cl,8
	*** 00001b	e8 00 00 		call	__aNlshl
	*** 00001e	8b 4e fe 		mov	cx,WORD PTR [bp-2]
	*** 000021	2a ed 			sub	ch,ch
	*** 000023	8b d8 			mov	bx,ax
	*** 000025	8b fa 			mov	di,dx
	*** 000027	8b 46 fe 		mov	ax,WORD PTR [bp-2]
	*** 00002a	8b d1 			mov	dx,cx
	*** 00002c	b1 08 			mov	cl,8
	*** 00002e	89 5e f8 		mov	WORD PTR [bp-8],bx
	*** 000031	89 7e fa 		mov	WORD PTR [bp-6],di
	*** 000034	e8 00 00 		call	__aNulshr
	*** 000037	0b 46 f8 		or	ax,WORD PTR [bp-8]
	*** 00003a	0b 56 fa 		or	dx,WORD PTR [bp-6]
	*** 00003d	89 04 			mov	WORD PTR [si],ax
	*** 00003f	89 54 02 		mov	WORD PTR [si+2],dx
;|*** 
;|*** 	return;
;|*** }
; Line 659
	*** 000042	5e 			pop	si
	*** 000043	5f 			pop	di
	*** 000044	c9 			leave	
	*** 000045	c3 			ret	

_changeEndian	ENDP
_TEXT	ENDS
END
