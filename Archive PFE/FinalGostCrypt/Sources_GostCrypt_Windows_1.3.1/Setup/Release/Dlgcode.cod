; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Desktop\Sources_GostCrypt_Windows_1.3.1_COMMENTED\Sources_GostCrypt_Windows_1.3.1é\Sources_GostCrypt_Windows_1.3.1\Common\Dlgcode.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?DriverVersion@@3JA				; DriverVersion
PUBLIC	?hUserUnderlineBoldFont@@3PAUHFONT__@@A		; hUserUnderlineBoldFont
PUBLIC	?DPIScaleFactorX@@3NA				; DPIScaleFactorX
PUBLIC	?DPIScaleFactorY@@3NA				; DPIScaleFactorY
PUBLIC	?bPortableModeConfirmed@@3HA			; bPortableModeConfirmed
PUBLIC	?hSysEncMutex@@3RAXA				; hSysEncMutex
PUBLIC	?hNonSysInplaceEncMutex@@3RAXA			; hNonSysInplaceEncMutex
PUBLIC	?hDriverSetupMutex@@3RAXA			; hDriverSetupMutex
PUBLIC	?hAppSetupMutex@@3RAXA				; hAppSetupMutex
PUBLIC	?hCursor@@3PAUHICON__@@A			; hCursor
PUBLIC	?hDlgClass@@3GA					; hDlgClass
PUBLIC	?hSplashClass@@3GA				; hSplashClass
PUBLIC	?SysPartitionDevicePath@@3PADA			; SysPartitionDevicePath
PUBLIC	?SysDriveDevicePath@@3PADA			; SysDriveDevicePath
PUBLIC	?bCachedSysDevicePathsValid@@3DA		; bCachedSysDevicePathsValid
PUBLIC	?WrongPwdRetryCounter@@3HA			; WrongPwdRetryCounter
PUBLIC	?SystemFileSelectorCallPending@@3HA		; SystemFileSelectorCallPending
PUBLIC	?SystemFileSelectorCallerThreadId@@3KA		; SystemFileSelectorCallerThreadId
PUBLIC	_LastDialogId
PUBLIC	_ConfigBuffer
PUBLIC	_szHelpFile
PUBLIC	_szHelpFile2
PUBLIC	_SecurityTokenLibraryPath
PUBLIC	_hFixedDigitFont
PUBLIC	_hBoldFont
PUBLIC	_hTitleFont
PUBLIC	_hFixedFont
PUBLIC	_hUserFont
PUBLIC	_hUserUnderlineFont
PUBLIC	_hUserBoldFont
PUBLIC	_WindowTitleBarFont
PUBLIC	_ScreenDPI
PUBLIC	_DlgAspectRatio
PUBLIC	_MainDlg
PUBLIC	_Silent
PUBLIC	_bHistory
PUBLIC	_bPreserveTimestamp
PUBLIC	_bStartOnLogon
PUBLIC	_bMountDevicesOnLogon
PUBLIC	_bMountFavoritesOnLogon
PUBLIC	_HiddenSectorDetectionStatus
PUBLIC	_lpszTitle
PUBLIC	_nCurrentOS
PUBLIC	_CurrentOSMajor
PUBLIC	_CurrentOSMinor
PUBLIC	_CurrentOSServicePack
PUBLIC	_RemoteSession
PUBLIC	_hDriver
PUBLIC	_hInst
PUBLIC	_SystemEncryptionStatus
PUBLIC	_nWipeMode
PUBLIC	_bSysPartitionSelected
PUBLIC	_bSysDriveSelected
PUBLIC	_bHyperLinkBeingTracked
PUBLIC	_bInPlaceEncNonSysPending
PUBLIC	_KeyFilesEnable
PUBLIC	_FirstKeyFile
PUBLIC	_defaultKeyFilesParam
PUBLIC	_UacElevated
PUBLIC	_IgnoreWmDeviceChange
PUBLIC	_DeviceChangeBroadcastDisabled
PUBLIC	_LastMountedVolumeDirty
PUBLIC	_MountVolumesAsSystemFavorite
PUBLIC	_FavoriteMountOnArrivalInProgress
PUBLIC	_MultipleMountOperationInProgress
_BSS	SEGMENT
?DriverVersion@@3JA DD 01H DUP (?)			; DriverVersion
?hUserUnderlineBoldFont@@3PAUHFONT__@@A DD 01H DUP (?)	; hUserUnderlineBoldFont
?bPortableModeConfirmed@@3HA DD 01H DUP (?)		; bPortableModeConfirmed
?hSysEncMutex@@3RAXA DD 01H DUP (?)			; hSysEncMutex
?hNonSysInplaceEncMutex@@3RAXA DD 01H DUP (?)		; hNonSysInplaceEncMutex
?hDriverSetupMutex@@3RAXA DD 01H DUP (?)		; hDriverSetupMutex
?hAppSetupMutex@@3RAXA DD 01H DUP (?)			; hAppSetupMutex
?hCursor@@3PAUHICON__@@A DD 01H DUP (?)			; hCursor
?hDlgClass@@3GA DW 01H DUP (?)				; hDlgClass
	ALIGN	4

?hSplashClass@@3GA DW 01H DUP (?)			; hSplashClass
	ALIGN	4

?SysPartitionDevicePath@@3PADA DB 0104H DUP (?)		; SysPartitionDevicePath
?SysDriveDevicePath@@3PADA DB 0104H DUP (?)		; SysDriveDevicePath
?bCachedSysDevicePathsValid@@3DA DB 01H DUP (?)		; bCachedSysDevicePathsValid
	ALIGN	4

?WrongPwdRetryCounter@@3HA DD 01H DUP (?)		; WrongPwdRetryCounter
?SystemFileSelectorCallPending@@3HA DD 01H DUP (?)	; SystemFileSelectorCallPending
?SystemFileSelectorCallerThreadId@@3KA DD 01H DUP (?)	; SystemFileSelectorCallerThreadId
_LastDialogId DD 01H DUP (?)
_ConfigBuffer DD 01H DUP (?)
_szHelpFile DB	0104H DUP (?)
_szHelpFile2 DB	0104H DUP (?)
_SecurityTokenLibraryPath DB 0104H DUP (?)
_hFixedDigitFont DD 01H DUP (?)
_hBoldFont DD	01H DUP (?)
_hTitleFont DD	01H DUP (?)
_hFixedFont DD	01H DUP (?)
_hUserFont DD	01H DUP (?)
_hUserUnderlineFont DD 01H DUP (?)
_hUserBoldFont DD 01H DUP (?)
_WindowTitleBarFont DD 01H DUP (?)
_MainDlg DD	01H DUP (?)
_Silent	DD	01H DUP (?)
_bHistory DD	01H DUP (?)
_bStartOnLogon DD 01H DUP (?)
_bMountDevicesOnLogon DD 01H DUP (?)
_bMountFavoritesOnLogon DD 01H DUP (?)
_HiddenSectorDetectionStatus DD 01H DUP (?)
_lpszTitle DD	01H DUP (?)
_nCurrentOS DD	01H DUP (?)
_CurrentOSMajor DD 01H DUP (?)
_CurrentOSMinor DD 01H DUP (?)
_CurrentOSServicePack DD 01H DUP (?)
_RemoteSession DD 01H DUP (?)
_hInst	DD	01H DUP (?)
_SystemEncryptionStatus DD 01H DUP (?)
_nWipeMode DD	01H DUP (?)
_bSysPartitionSelected DD 01H DUP (?)
_bSysDriveSelected DD 01H DUP (?)
_bHyperLinkBeingTracked DD 01H DUP (?)
_bInPlaceEncNonSysPending DD 01H DUP (?)
_KeyFilesEnable DD 01H DUP (?)
_FirstKeyFile DD 01H DUP (?)
	ALIGN	8

_defaultKeyFilesParam DQ 01H DUP (?)
_UacElevated DD	01H DUP (?)
_IgnoreWmDeviceChange DD 01H DUP (?)
_DeviceChangeBroadcastDisabled DD 01H DUP (?)
_LastMountedVolumeDirty DD 01H DUP (?)
_MountVolumesAsSystemFavorite DD 01H DUP (?)
_FavoriteMountOnArrivalInProgress DD 01H DUP (?)
_MultipleMountOperationInProgress DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
_DATA	SEGMENT
?DPIScaleFactorX@@3NA DQ 03ff0000000000000r	; 1	; DPIScaleFactorX
?DPIScaleFactorY@@3NA DQ 03ff0000000000000r	; 1	; DPIScaleFactorY
_ScreenDPI DD	060H
_bPreserveTimestamp DD 01H
_DlgAspectRatio DQ 03ff0000000000000r		; 1
_hDriver DD	0ffffffffH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ ; __vcrt_va_start_verify_argument_type<wchar_t const * const>
PUBLIC	__snwprintf
PUBLIC	_swprintf_s
PUBLIC	??$__vcrt_va_start_verify_argument_type@PB_W@@YAXXZ ; __vcrt_va_start_verify_argument_type<wchar_t const *>
PUBLIC	?swprintf@@YAHQA_WQB_WZZ			; swprintf
PUBLIC	_swscanf_s
PUBLIC	_fprintf
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	_sprintf_s
PUBLIC	__snprintf
PUBLIC	_sscanf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
PUBLIC	?_Deallocate@std@@YAXPAXII@Z			; std::_Deallocate
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<wchar_t>::ctype<wchar_t>
PUBLIC	?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	??_G?$ctype@_W@std@@MAEPAXI@Z			; std::ctype<wchar_t>::`scalar deleting destructor'
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	?dec@std@@YAAAVios_base@1@AAV21@@Z		; std::dec
PUBLIC	?hex@std@@YAAAVios_base@1@AAV21@@Z		; std::hex
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	??1Container@ForEach@GostCrypt@@UAE@XZ		; GostCrypt::ForEach::Container::~Container
PUBLIC	??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z	; GostCrypt::ForEach::Container::`scalar deleting destructor'
PUBLIC	_cleanup
PUBLIC	_LowerCaseCopy
PUBLIC	_UpperCaseCopy
PUBLIC	_CreateFullVolumePath
PUBLIC	_FakeDosNameForDevice
PUBLIC	_RemoveFakeDosName
PUBLIC	_AbortProcess
PUBLIC	_AbortProcessSilent
PUBLIC	_err_malloc
PUBLIC	_err_strdup
PUBLIC	_handleWin32Error
PUBLIC	_IsDiskReadError
PUBLIC	_IsDiskWriteError
PUBLIC	_IsDiskError
PUBLIC	_translateWin32Error
PUBLIC	_AboutDlgProc@16
PUBLIC	_DisplayStaticModelessWaitDlg
PUBLIC	_CloseStaticModelessWaitDlg
PUBLIC	_IsButtonChecked
PUBLIC	_CheckButton
PUBLIC	_LeftPadString
PUBLIC	_ToSBCS
PUBLIC	_ToUNICODE
PUBLIC	_InitDialog
PUBLIC	_ProcessPaintMessages
PUBLIC	_CreateMemBitmap
PUBLIC	_RenderBitmap
PUBLIC	_RedTick@16
PUBLIC	_RegisterRedTick
PUBLIC	_UnregisterRedTick
PUBLIC	_SplashDlgProc@16
PUBLIC	_WaitCursor
PUBLIC	_NormalCursor
PUBLIC	_ArrowWaitCursor
PUBLIC	_HandCursor
PUBLIC	_AddComboPair
PUBLIC	_AddComboPairW
PUBLIC	_SelectAlgo
PUBLIC	_PopulateWipeModeCombo
PUBLIC	_GetWipeModeName
PUBLIC	_GetPathType
PUBLIC	_CustomDlgProc@16
PUBLIC	_GSTCreateMutex
PUBLIC	_GSTCloseMutex
PUBLIC	_MutexExistsOnSystem
PUBLIC	_CreateSysEncMutex
PUBLIC	_InstanceHasSysEncMutex
PUBLIC	_CloseSysEncMutex
PUBLIC	_CreateNonSysInplaceEncMutex
PUBLIC	_InstanceHasNonSysInplaceEncMutex
PUBLIC	_CloseNonSysInplaceEncMutex
PUBLIC	_NonSysInplaceEncInProgressElsewhere
PUBLIC	_CreateDriverSetupMutex
PUBLIC	_CloseDriverSetupMutex
PUBLIC	_CreateAppSetupMutex
PUBLIC	_CloseAppSetupMutex
PUBLIC	_IsGostCryptInstallerRunning
PUBLIC	_ReadDriverConfigurationFlags
PUBLIC	_ReadEncryptionThreadPoolFreeCpuCountLimit
PUBLIC	_LoadSysEncSettings
PUBLIC	_LoadNonSysInPlaceEncSettings
PUBLIC	_RemoveNonSysInPlaceEncNotifications
PUBLIC	_SavePostInstallTasksSettings
PUBLIC	_DoPostInstallTasks
PUBLIC	_InitOSVersionInfo
PUBLIC	_InitApp
PUBLIC	_InitHelpFileName
PUBLIC	_OpenDevice
PUBLIC	_NotifyDriverOfPortableMode
PUBLIC	_IsSystemDevicePath
PUBLIC	_RawDevicesDlgProc@16
PUBLIC	_TextInfoDialogBox
PUBLIC	_TextInfoDialogBoxDlgProc@16
PUBLIC	_GetLegalNotices
PUBLIC	_MultiChoiceDialogProc@16
PUBLIC	_DriverAttach
PUBLIC	_ResetCurrentDirectory
PUBLIC	_BrowseFiles
PUBLIC	_BrowseDirectories
PUBLIC	_handleError
PUBLIC	_CheckFileStreamWriteErrors
PUBLIC	_LocalizeDialog
PUBLIC	_OpenVolumeExplorerWindow
PUBLIC	_CloseVolumeExplorerWindows
PUBLIC	_CheckCapsLock
PUBLIC	_CheckFileExtension
PUBLIC	_IncreaseWrongPwdRetryCount
PUBLIC	_ResetWrongPwdRetryCount
PUBLIC	_WrongPwdRetryCountOverLimit
PUBLIC	_GetFirstAvailableDrive
PUBLIC	_GetLastAvailableDrive
PUBLIC	_IsDriveAvailable
PUBLIC	_IsDeviceMounted
PUBLIC	_DriverUnmountVolume
PUBLIC	_BroadcastDeviceChange
PUBLIC	_MountVolume
PUBLIC	_UnmountVolume
PUBLIC	_IsPasswordCacheEmpty
PUBLIC	_IsMountedVolume
PUBLIC	_GetMountedVolumeDriveNo
PUBLIC	_IsAdmin
PUBLIC	_IsBuiltInAdmin
PUBLIC	_IsUacSupported
PUBLIC	_ResolveSymbolicLink
PUBLIC	_GetDiskDeviceDriveLetter
PUBLIC	_FileSystemAppearsEmpty
PUBLIC	_GetStatsFreeSpaceOnPartition
PUBLIC	_GetDeviceSize
PUBLIC	_DismountDrive
PUBLIC	_FindString
PUBLIC	_FileExists
PUBLIC	_FindStringInFile
PUBLIC	_GSTCopyFile
PUBLIC	_SaveBufferToFile
PUBLIC	_GSTFlushFile
PUBLIC	_PrintHardCopyTextUTF16
PUBLIC	_IsNonInstallMode
PUBLIC	_DriverUnload
PUBLIC	_SetCheckBox
PUBLIC	_GetCheckBox
PUBLIC	_SetListScrollHPos
PUBLIC	_ManageStartupSeq
PUBLIC	_ManageStartupSeqWiz
PUBLIC	_CleanLastVisitedMRU
PUBLIC	_ListItemAdd
PUBLIC	_ListItemAddW
PUBLIC	_ListSubItemSet
PUBLIC	_ListSubItemSetW
PUBLIC	_GetMountList
PUBLIC	_GetDriverRefCount
PUBLIC	_GetSizeString
PUBLIC	_GetFileSize64
PUBLIC	_LoadInt16
PUBLIC	_LoadInt32
PUBLIC	_LoadFile
PUBLIC	_LoadFileBlock
PUBLIC	_GetModPath
PUBLIC	_GetConfigPath
PUBLIC	_GetProgramConfigPath
PUBLIC	_GetSystemDriveLetter
PUBLIC	_OpenPageHelp
PUBLIC	_TaskBarIconDisplayBalloonTooltip
PUBLIC	_InfoBalloon
PUBLIC	_InfoBalloonDirect
PUBLIC	_WarningBalloon
PUBLIC	_WarningBalloonDirect
PUBLIC	_Info
PUBLIC	_InfoTopMost
PUBLIC	_InfoDirect
PUBLIC	_Warning
PUBLIC	_WarningTopMost
PUBLIC	_WarningDirect
PUBLIC	_Error
PUBLIC	_ErrorDirect
PUBLIC	_ErrorTopMost
PUBLIC	_AskYesNo
PUBLIC	_AskYesNoString
PUBLIC	_AskYesNoTopmost
PUBLIC	_AskNoYes
PUBLIC	_AskOkCancel
PUBLIC	_AskWarnYesNo
PUBLIC	_AskWarnYesNoString
PUBLIC	_AskWarnYesNoTopmost
PUBLIC	_AskWarnYesNoStringTopmost
PUBLIC	_AskWarnNoYes
PUBLIC	_AskWarnNoYesString
PUBLIC	_AskWarnNoYesTopmost
PUBLIC	_AskWarnOkCancel
PUBLIC	_AskWarnCancelOk
PUBLIC	_AskErrYesNo
PUBLIC	_AskErrNoYes
PUBLIC	_AskMultiChoice
PUBLIC	_ConfigWriteBegin
PUBLIC	_ConfigWriteEnd
PUBLIC	_ConfigWriteString
PUBLIC	_ConfigWriteInt
PUBLIC	_ConfigReadInt
PUBLIC	_ConfigReadString
PUBLIC	_Debug
PUBLIC	_DebugMsgBox
PUBLIC	_IsOSAtLeast
PUBLIC	_IsOSVersionAtLeast
PUBLIC	_Is64BitOs
PUBLIC	_IsServerOS
PUBLIC	_IsHiddenOSRunning
PUBLIC	_EnableWow64FsRedirection
PUBLIC	_RestartComputer
PUBLIC	_Applink
PUBLIC	_Extlink
PUBLIC	_RelativePath2Absolute
PUBLIC	_HandleDriveNotReadyError
PUBLIC	_CloseGSTWindowsEnum@8
PUBLIC	_FindGSTWindowEnum@8
PUBLIC	_MapResource
PUBLIC	_InconsistencyResolved
PUBLIC	_ReportUnexpectedState
PUBLIC	_SelectMultipleFiles
PUBLIC	_SelectMultipleFilesNext
PUBLIC	_OpenOnlineHelp
PUBLIC	_GetPartitionInfo
PUBLIC	_GetDeviceInfo
PUBLIC	_GetDriveGeometry
PUBLIC	_IsVolumeDeviceHosted
PUBLIC	_CompensateXDPI
PUBLIC	_CompensateYDPI
PUBLIC	_CompensateDPIFont
PUBLIC	_GetTextGfxWidth
PUBLIC	_GetTextGfxHeight
PUBLIC	_ToHyperlink
PUBLIC	_ToCustHyperlink
PUBLIC	_ToBootPwdField
PUBLIC	_AccommodateTextField
PUBLIC	_GetDriveLabel
PUBLIC	_DoDriverInstall
PUBLIC	_IsPagingFileActive
PUBLIC	_IsPagingFileWildcardActive
PUBLIC	_DisablePagingFile
PUBLIC	_FileHasReadOnlyAttribute
PUBLIC	_IsFileOnReadOnlyFilesystem
PUBLIC	_CheckFilesystem
PUBLIC	_BufferContainsString
PUBLIC	_RemoveDeviceWriteProtection
PUBLIC	_EnableElevatedCursorChange
PUBLIC	_DisableFileCompression
PUBLIC	_VolumePathExists
PUBLIC	_IsWindowsIsoBurnerAvailable
PUBLIC	_LaunchWindowsIsoBurner
PUBLIC	_IsApplicationInstalled
PUBLIC	??1HostDevice@@QAE@XZ				; HostDevice::~HostDevice
PUBLIC	?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate
PUBLIC	??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
PUBLIC	??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
PUBLIC	?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
PUBLIC	?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
PUBLIC	?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
PUBLIC	?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
PUBLIC	?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reserve
PUBLIC	?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
PUBLIC	??0HostDevice@@QAE@ABU0@@Z			; HostDevice::HostDevice
PUBLIC	??4HostDevice@@QAEAAU0@ABU0@@Z			; HostDevice::operator=
PUBLIC	?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
PUBLIC	?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
PUBLIC	?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Utf8StringToWide
PUBLIC	?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
PUBLIC	?WideToUtf8String@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToUtf8String
PUBLIC	?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; StringToUpperCase
PUBLIC	?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
PUBLIC	?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; ToUpperCase
PUBLIC	?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z ; GetWrongPasswordErrorMessage
PUBLIC	?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
PUBLIC	?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z ; FitPathInGfxWidth
PUBLIC	?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetServiceConfigPath
PUBLIC	?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
PUBLIC	?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; HarddiskVolumePathToPartitionPath
PUBLIC	?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z ; FindLatestFileOrDirectory
PUBLIC	?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; GetUserFriendlyVersionString
PUBLIC	??0Exception@GostCrypt@@QAE@ABU01@@Z		; GostCrypt::Exception::Exception
PUBLIC	?Show@SystemException@GostCrypt@@UBEXPAUHWND__@@@Z ; GostCrypt::SystemException::Show
PUBLIC	??0SystemException@GostCrypt@@QAE@ABU01@@Z	; GostCrypt::SystemException::SystemException
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?IsNotEnd@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBE_NXZ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBEXXZ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Next
PUBLIC	??1?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??_G?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
PUBLIC	?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z		; AuxiliaryDlgProc
PUBLIC	?ExceptionHandlerThread@@YAXPAX@Z		; ExceptionHandlerThread
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
PUBLIC	??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
PUBLIC	??1?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::~_List_buy<unsigned long,std::allocator<unsigned long> >
PUBLIC	??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
PUBLIC	??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
PUBLIC	?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
PUBLIC	?_Unchecked_erase@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Unchecked_erase
PUBLIC	?_Tidy@?$list@KV?$allocator@K@std@@@std@@QAEXXZ	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
PUBLIC	?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBEXXZ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next
PUBLIC	??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor'
PUBLIC	?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; ExceptionHandler
PUBLIC	?InvalidParameterHandler@@YAXPB_W00II@Z		; InvalidParameterHandler
PUBLIC	?GetSysDevicePaths@@YAHPAUHWND__@@@Z		; GetSysDevicePaths
PUBLIC	??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
PUBLIC	?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
PUBLIC	??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
PUBLIC	??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor'
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
PUBLIC	?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Destroy_if_not_nil
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--
PUBLIC	??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char *>
PUBLIC	??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
PUBLIC	??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
PUBLIC	??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
PUBLIC	??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
PUBLIC	?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
PUBLIC	?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
PUBLIC	?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
PUBLIC	?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
PUBLIC	?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
PUBLIC	?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
PUBLIC	?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
PUBLIC	??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
PUBLIC	?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
PUBLIC	?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
PUBLIC	??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Copy_unchecked@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00@Z ; std::_Copy_unchecked<HostDevice *,HostDevice *>
PUBLIC	??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
PUBLIC	??_G?$numpunct@D@std@@MAEPAXI@Z			; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice>,HostDevice *>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ@YAXXZ ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>
PUBLIC	??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>
PUBLIC	??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long>
PUBLIC	??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_hint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
PUBLIC	??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
PUBLIC	??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_nohint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
PUBLIC	??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>
PUBLIC	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
PUBLIC	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
PUBLIC	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception?$AA@	; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_7Container@ForEach@GostCrypt@@6B@		; GostCrypt::ForEach::Container::`vftable'
PUBLIC	??_7Exception@GostCrypt@@6B@			; GostCrypt::Exception::`vftable'
PUBLIC	??_7SystemException@GostCrypt@@6B@		; GostCrypt::SystemException::`vftable'
PUBLIC	??_C@_09NKHKFHLH@GostCrypt?$AA@			; `string'
PUBLIC	??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@ ; `string'
PUBLIC	??_C@_0BF@MBKAOEOG@GostCrypt?5Format?4exe?$AA@	; `string'
PUBLIC	?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
PUBLIC	??_C@_09ODDMBMG@CustomDlg?$AA@			; `string'
PUBLIC	??_C@_09EPIDNIBP@SplashDlg?$AA@			; `string'
PUBLIC	??_7?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_C@_08MBBBEOPI@?2Device?2?$AA@		; `string'
PUBLIC	??_C@_08FALOLEII@?2DEVICE?2?$AA@		; `string'
PUBLIC	??_C@_0N@DANNJCFD@gostcrypt?$CFlu?$AA@		; `string'
PUBLIC	??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@		; `string'
PUBLIC	??_C@_0BC@GIPDODAO@ERR_ACCESS_DENIED?$AA@	; `string'
PUBLIC	??_C@_0BD@NLNANBEJ@ERR_HARDWARE_ERROR?$AA@	; `string'
PUBLIC	??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@		; `string'
PUBLIC	??_C@_0BC@CFCNFPNP@www?4gostcrypt?4org?$AA@	; `string'
PUBLIC	??_C@_05OJPKCACG@1?43?41?$AA@			; `string'
PUBLIC	??_C@_0N@BPJNLKPO@GostCrypt?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0DF@NEDIGDMJ@Released?5by?5the?5GostCrypt?5develo@ ; `string'
PUBLIC	??_C@_0DCE@DDNKAONB@Portions?5of?5this?5software?5are?5ba@ ; `string'
PUBLIC	??_C@_0BK@EMBCECD@http?3?1?1www?4gostcrypt?4org?1?$AA@ ; `string'
PUBLIC	??_C@_0M@IGCGEGAM@font_normal?$AA@		; `string'
PUBLIC	??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_06DILOELAE@NOFONT?$AA@			; `string'
PUBLIC	??_C@_09KDCDAOMH@font_bold?$AA@			; `string'
PUBLIC	??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@NMFINBBB@font_title?$AA@		; `string'
PUBLIC	??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@MOFKMHPH@font_fixed?$AA@		; `string'
PUBLIC	??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_08KAINEBEN@ABOUTBOX?$AA@			; `string'
PUBLIC	??_C@_07EFPKBNGC@REDTICK?$AA@			; `string'
PUBLIC	??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@		; `string'
PUBLIC	??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@	; `string'
PUBLIC	??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@	; `string'
PUBLIC	??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@	; `string'
PUBLIC	??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@	; `string'
PUBLIC	??_C@_09MFFJIMND@Partition?$AA@			; `string'
PUBLIC	??_C@_0L@MAFJOMBB@Partition0?$AA@		; `string'
PUBLIC	??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@	; `string'
PUBLIC	??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@		; `string'
PUBLIC	??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@	; `string'
PUBLIC	??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@	; `string'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vftable'
PUBLIC	??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@	; `string'
PUBLIC	??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@KGBKFDLO@SymGetOptions?$AA@		; `string'
PUBLIC	??_C@_0O@LIDFOEPH@SymSetOptions?$AA@		; `string'
PUBLIC	??_C@_0O@MCMFENKA@SymInitialize?$AA@		; `string'
PUBLIC	??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@ ; `string'
PUBLIC	??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@	; `string'
PUBLIC	??_C@_0M@FJINHFIC@StackWalk64?$AA@		; `string'
PUBLIC	??_C@_0M@GHNAPHBH@SymFromAddr?$AA@		; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_03EGAGLKPK@?$CGst?$AA@			; `string'
PUBLIC	??_C@_03BPHHBGPB@?$DN0x?$AA@			; `string'
PUBLIC	??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@ ; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_05LABDNII@setup?$AA@			; `string'
PUBLIC	??_C@_03OLPMMCEF@x64?$AA@			; `string'
PUBLIC	??_C@_03NDFEINMN@x86?$AA@			; `string'
PUBLIC	??_C@_0JB@MLJIHOID@https?3?1?1www?4gostcrypt?4org?1applin@ ; `string'
PUBLIC	??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@	; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@ ; `string'
PUBLIC	??_C@_0CK@NOADNGOE@Global?2GostCrypt?5System?5Encrypti@ ; `string'
PUBLIC	??_C@_0CM@BEIDGOGA@Global?2GostCrypt?5In?9Place?5Encryp@ ; `string'
PUBLIC	??_C@_0BO@JOPFAKIM@Global?2GostCrypt?5Driver?5Setup?$AA@ ; `string'
PUBLIC	??_C@_0BH@JMLDCLIN@Global?2GostCrypt?5Setup?$AA@ ; `string'
PUBLIC	??_C@_0BA@NANEHOFP@GostCryptConfig?$AA@		; `string'
PUBLIC	??_C@_0CM@LCJDGIOL@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0CA@MKBHDAPB@GostCryptEncryptionFreeCpuCount?$AA@ ; `string'
PUBLIC	??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@	; `string'
PUBLIC	??_C@_06HEJKKHEK@config?$AA@			; `string'
PUBLIC	??_C@_03ICHNJLJF@key?$AA@			; `string'
PUBLIC	??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@	; `string'
PUBLIC	??_C@_08OAECLFAP@WipeMode?$AA@			; `string'
PUBLIC	??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@	; `string'
PUBLIC	??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@ ; `string'
PUBLIC	??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@ ; `string'
PUBLIC	??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@	; `string'
PUBLIC	??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@ ; `string'
PUBLIC	??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ ; `string'
PUBLIC	??_C@_09IDILIKHG@NO_OS_VER?$AA@			; `string'
PUBLIC	??_C@_08BENDAOKD@Language?$AA@			; `string'
PUBLIC	??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@		; `string'
PUBLIC	??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@	; `string'
PUBLIC	??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0N@MGFEFGLL@EnableBigLba?$AA@		; `string'
PUBLIC	??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@ ; `string'
PUBLIC	??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@	; `string'
PUBLIC	??_C@_06FGFHJIJL@?$CD32770?$AA@			; `string'
PUBLIC	??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@		; `string'
PUBLIC	??_C@_0N@KPDNKMDE@riched20?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@		; `string'
PUBLIC	??_C@_02LFNMGJAP@en?$AA@			; `string'
PUBLIC	??_C@_0BM@JHDHCLPC@GostCrypt?5User?5Guide?4?$CFs?4pdf?$AA@ ; `string'
PUBLIC	??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
PUBLIC	??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@ ; `string'
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@ ; `string'
PUBLIC	??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@ ; `string'
PUBLIC	??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@ ; `string'
PUBLIC	??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@ ; `string'
PUBLIC	??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@ ; `string'
PUBLIC	??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@ ; `string'
PUBLIC	??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@ ; `string'
PUBLIC	??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@ ; `string'
PUBLIC	??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@ ; `string'
PUBLIC	??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@ ; `string'
PUBLIC	??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@ ; `string'
PUBLIC	??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@ ; `string'
PUBLIC	??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@ ; `string'
PUBLIC	??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@ ; `string'
PUBLIC	??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@ ; `string'
PUBLIC	??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@ ; `string'
PUBLIC	??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@ ; `string'
PUBLIC	??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@ ; `string'
PUBLIC	??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@ ; `string'
PUBLIC	??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@ ; `string'
PUBLIC	??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@ ; `string'
PUBLIC	??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@ ; `string'
PUBLIC	??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@ ; `string'
PUBLIC	??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@ ; `string'
PUBLIC	??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@ ; `string'
PUBLIC	??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@ ; `string'
PUBLIC	??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@ ; `string'
PUBLIC	??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@	; `string'
PUBLIC	??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@ ; `string'
PUBLIC	??_C@_0BL@LGNEPEIP@GostCrypt?5Rescue?5Disk?5Help?$AA@ ; `string'
PUBLIC	??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@ ; `string'
PUBLIC	??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@ ; `string'
PUBLIC	??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@ ; `string'
PUBLIC	??_C@_04OJAHODMC@Text?$AA@			; `string'
PUBLIC	??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@	; `string'
PUBLIC	??_C@_06CDNPEPDB@DEVICE?$AA@			; `string'
PUBLIC	??_C@_05JLAEHEHI@DRIVE?$AA@			; `string'
PUBLIC	??_C@_04EMFHLKGI@SIZE?$AA@			; `string'
PUBLIC	??_C@_05EILEDKCG@LABEL?$AA@			; `string'
PUBLIC	??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@		; `string'
PUBLIC	??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@		; `string'
PUBLIC	??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_08IPBANHMA@HARDDISK?$AA@			; `string'
PUBLIC	??_C@_13EBCNDICG@?$AA?3?$AA?$AA@		; `string'
PUBLIC	??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@	; `string'
PUBLIC	??_C@_0BP@KPLJJAIG@System32?2drivers?2gostcrypt?4sys?$AA@ ; `string'
PUBLIC	??_C@_09JCILFBFB@gostcrypt?$AA@			; `string'
PUBLIC	??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@		; `string'
PUBLIC	??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@	; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0O@PFCBNFDJ@?2?2?4?2GostCrypt?$AA@	; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_0M@BLEDMAHO@GST_VOLUMES?$AA@		; `string'
PUBLIC	??_C@_09EEODDAII@ALL_FILES?$AA@			; `string'
PUBLIC	??_C@_1EO@HPAMBPDO@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAg?$AAs?$AAt?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAg@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0BK@LAEGKAMJ@PASSWORD_OR_KEYFILE_WRONG?$AA@ ; `string'
PUBLIC	??_C@_0P@MKGPOAFK@PASSWORD_WRONG?$AA@		; `string'
PUBLIC	??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@ ; `string'
PUBLIC	??_C@_09IILMPLJM@NOT_FOUND?$AA@			; `string'
PUBLIC	??_C@_0BB@HBDCANKP@OPENFILES_DRIVER?$AA@	; `string'
PUBLIC	??_C@_0P@DNONBLBD@OPENFILES_LOCK?$AA@		; `string'
PUBLIC	??_C@_0P@HPMGPOAF@VOL_SIZE_WRONG?$AA@		; `string'
PUBLIC	??_C@_0BK@FLKCANLN@COMPRESSION_NOT_SUPPORTED?$AA@ ; `string'
PUBLIC	??_C@_0P@BKLABIJI@WRONG_VOL_TYPE?$AA@		; `string'
PUBLIC	??_C@_0M@KFLNHABP@VOL_SEEKING?$AA@		; `string'
PUBLIC	??_C@_0BI@BFLHAGLK@ERR_CIPHER_INIT_FAILURE?$AA@	; `string'
PUBLIC	??_C@_0BJ@DGGCCNCK@ERR_CIPHER_INIT_WEAK_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@	; `string'
PUBLIC	??_C@_0BB@GLPAMHI@FILE_OPEN_FAILED?$AA@		; `string'
PUBLIC	??_C@_0BB@JCPIJGNN@VOL_MOUNT_FAILED?$AA@	; `string'
PUBLIC	??_C@_0P@ECPPAAM@NO_FREE_DRIVES?$AA@		; `string'
PUBLIC	??_C@_0O@ILOHOCOF@ACCESS_DENIED?$AA@		; `string'
PUBLIC	??_C@_0P@LICKOHFP@DRIVER_VERSION?$AA@		; `string'
PUBLIC	??_C@_0BF@LDKGLOCG@NEW_VERSION_REQUIRED?$AA@	; `string'
PUBLIC	??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@	; `string'
PUBLIC	??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@	; `string'
PUBLIC	??_C@_0BN@JLJPGHCL@ERR_ENCRYPTION_NOT_COMPLETED?$AA@ ; `string'
PUBLIC	??_C@_0CC@BGLNMIMN@ERR_NONSYS_INPLACE_ENC_INCOMPLET@ ; `string'
PUBLIC	??_C@_0CF@MBJPLKGL@ERR_SYS_HIDVOL_HEAD_REENC_MODE_W@ ; `string'
PUBLIC	??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@	; `string'
PUBLIC	??_C@_0M@FDOCLIJD@ERR_UNKNOWN?$AA@		; `string'
PUBLIC	??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@	; `string'
PUBLIC	??_C@_06LKBCGDFD@Button?$AA@			; `string'
PUBLIC	??_C@_06KJMEDNIB@Static?$AA@			; `string'
PUBLIC	??_C@_04CGJNICGF@?$CFc?3?2?$AA@			; `string'
PUBLIC	??_C@_0O@DMIKDLEM@CabinetWClass?$AA@		; `string'
PUBLIC	??_C@_02NJNOFBBI@?$CFx?$AA@			; `string'
PUBLIC	??_C@_02LODOGJEL@KB?$AA@			; `string'
PUBLIC	??_C@_02LKLDBFPJ@MB?$AA@			; `string'
PUBLIC	??_C@_02LHCEJACP@GB?$AA@			; `string'
PUBLIC	??_C@_02KJEEINAG@TB?$AA@			; `string'
PUBLIC	??_C@_02KOENCFNK@PB?$AA@			; `string'
PUBLIC	??_C@_04ELFAHOMP@BYTE?$AA@			; `string'
PUBLIC	??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@		; `string'
PUBLIC	??_C@_04OOOHIFAO@?4asa?$AA@			; `string'
PUBLIC	??_C@_04LNDOKGBO@?4asp?$AA@			; `string'
PUBLIC	??_C@_05BNFEPADL@?4aspx?$AA@			; `string'
PUBLIC	??_C@_03DAKFKKAH@?4ax?$AA@			; `string'
PUBLIC	??_C@_04JLAECNCN@?4bas?$AA@			; `string'
PUBLIC	??_C@_04NEEFLLOK@?4bat?$AA@			; `string'
PUBLIC	??_C@_04GKHLBAIJ@?4bin?$AA@			; `string'
PUBLIC	??_C@_04DNKKNDNF@?4cer?$AA@			; `string'
PUBLIC	??_C@_04PICIEOBI@?4chm?$AA@			; `string'
PUBLIC	??_C@_04HILJPKAL@?4clb?$AA@			; `string'
PUBLIC	??_C@_04CPCBDHLK@?4cmd?$AA@			; `string'
PUBLIC	??_C@_04GHKFJLLC@?4cnt?$AA@			; `string'
PUBLIC	??_C@_04FFJDPJDA@?4cnv?$AA@			; `string'
PUBLIC	??_C@_04PNGHFIJN@?4com?$AA@			; `string'
PUBLIC	??_C@_04PDAGINJB@?4cpl?$AA@			; `string'
PUBLIC	??_C@_04NNKIFKME@?4cpx?$AA@			; `string'
PUBLIC	??_C@_04HCJJMBKG@?4crt?$AA@			; `string'
PUBLIC	??_C@_04JFCMPGMM@?4csh?$AA@			; `string'
PUBLIC	??_C@_04HLONOPDM@?4dll?$AA@			; `string'
PUBLIC	??_C@_04NNHIJLJN@?4drv?$AA@			; `string'
PUBLIC	??_C@_04KBABJHPM@?4dtd?$AA@			; `string'
PUBLIC	??_C@_04JLMDILM@?4exe?$AA@			; `string'
PUBLIC	??_C@_04CMLMHBEG@?4fxp?$AA@			; `string'
PUBLIC	??_C@_04JJJHJDPF@?4grp?$AA@			; `string'
PUBLIC	??_C@_04JIAFODPJ@?4h1s?$AA@			; `string'
PUBLIC	??_C@_04NHEMANNJ@?4hlp?$AA@			; `string'
PUBLIC	??_C@_04JGKANMAB@?4hta?$AA@			; `string'
PUBLIC	??_C@_04FJIHOGJP@?4ime?$AA@			; `string'
PUBLIC	??_C@_04HAOMALAF@?4inf?$AA@			; `string'
PUBLIC	??_C@_04EHFJONBB@?4ins?$AA@			; `string'
PUBLIC	??_C@_04HIIKIOPB@?4isp?$AA@			; `string'
PUBLIC	??_C@_04FGOIMLLH@?4its?$AA@			; `string'
PUBLIC	??_C@_03NPAEJMCN@?4js?$AA@			; `string'
PUBLIC	??_C@_04FNIKMHAL@?4jse?$AA@			; `string'
PUBLIC	??_C@_04FAJINOCD@?4ksh?$AA@			; `string'
PUBLIC	??_C@_04PCJMIFHK@?4lnk?$AA@			; `string'
PUBLIC	??_C@_04MGOELJON@?4mad?$AA@			; `string'
PUBLIC	??_C@_04PENCNLGP@?4maf?$AA@			; `string'
PUBLIC	??_C@_04ONMJOKCO@?4mag?$AA@			; `string'
PUBLIC	??_C@_04BHCGACKE@?4mam?$AA@			; `string'
PUBLIC	??_C@_04DMALFBGH@?4man?$AA@			; `string'
PUBLIC	??_C@_04PBFBFPPJ@?4maq?$AA@			; `string'
PUBLIC	??_C@_04NKHMAMDK@?4mar?$AA@			; `string'
PUBLIC	??_C@_04MDGHDNHL@?4mas?$AA@			; `string'
PUBLIC	??_C@_04IMCGKLLM@?4mat?$AA@			; `string'
PUBLIC	??_C@_04JFDNJKPN@?4mau?$AA@			; `string'
PUBLIC	??_C@_04LOBAMJDO@?4mav?$AA@			; `string'
PUBLIC	??_C@_04KHALPIHP@?4maw?$AA@			; `string'
PUBLIC	??_C@_04LNFIIPED@?4mda?$AA@			; `string'
PUBLIC	??_C@_04JGHFNMIA@?4mdb?$AA@			; `string'
PUBLIC	??_C@_04NJDEEKEH@?4mde?$AA@			; `string'
PUBLIC	??_C@_04IKONGJFH@?4mdt?$AA@			; `string'
PUBLIC	??_C@_04KBMADKJE@?4mdw?$AA@			; `string'
PUBLIC	??_C@_04BEGOEENJ@?4mdz?$AA@			; `string'
PUBLIC	??_C@_04JGAHFIDE@?4msc?$AA@			; `string'
PUBLIC	??_C@_04GMOILALO@?4msi?$AA@			; `string'
PUBLIC	??_C@_04PHOIBJKG@?4msp?$AA@			; `string'
PUBLIC	??_C@_04JDIENMKC@?4mst?$AA@			; `string'
PUBLIC	??_C@_04GIGFMMAM@?4mui?$AA@			; `string'
PUBLIC	??_C@_04NJAKABMG@?4nls?$AA@			; `string'
PUBLIC	??_C@_04IJBOPIFF@?4ocx?$AA@			; `string'
PUBLIC	??_C@_04HEIKDMLH@?4ops?$AA@			; `string'
PUBLIC	??_C@_04KMEOLMKH@?4pal?$AA@			; `string'
PUBLIC	??_C@_04GHBDOCMB@?4pcd?$AA@			; `string'
PUBLIC	??_C@_04FILCAFJF@?4pif?$AA@			; `string'
PUBLIC	??_C@_04EIMBEJAE@?4prf?$AA@			; `string'
PUBLIC	??_C@_04FBNKHIEF@?4prg?$AA@			; `string'
PUBLIC	??_C@_04DBPHFDOA@?4pst?$AA@			; `string'
PUBLIC	??_C@_04OCLKAFDL@?4reg?$AA@			; `string'
PUBLIC	??_C@_04EHJACPKN@?4scf?$AA@			; `string'
PUBLIC	??_C@_04GJDOPIPI@?4scr?$AA@			; `string'
PUBLIC	??_C@_04DPGEFPHO@?4sct?$AA@			; `string'
PUBLIC	??_C@_04CPKJAFEI@?4shb?$AA@			; `string'
PUBLIC	??_C@_04HMHACGFI@?4shs?$AA@			; `string'
PUBLIC	??_C@_04GBJEOPBP@?4sys?$AA@			; `string'
PUBLIC	??_C@_04LFHHJFCN@?4tlb?$AA@			; `string'
PUBLIC	??_C@_04NKPJABLD@?4tsp?$AA@			; `string'
PUBLIC	??_C@_04IFPAFBLM@?4url?$AA@			; `string'
PUBLIC	??_C@_03JJOBOFCJ@?4vb?$AA@			; `string'
PUBLIC	??_C@_04FKKBOGGL@?4vbe?$AA@			; `string'
PUBLIC	??_C@_04EGDJFDLM@?4vbs?$AA@			; `string'
PUBLIC	??_C@_09JNHDLKLO@?4vsmacros?$AA@		; `string'
PUBLIC	??_C@_04FLNNJKPL@?4vss?$AA@			; `string'
PUBLIC	??_C@_04BEJMAMDM@?4vst?$AA@			; `string'
PUBLIC	??_C@_04DPLBFPPP@?4vsw?$AA@			; `string'
PUBLIC	??_C@_03MLPKKMAO@?4ws?$AA@			; `string'
PUBLIC	??_C@_04KJKDOPMP@?4wsc?$AA@			; `string'
PUBLIC	??_C@_04NENEBLIK@?4wsf?$AA@			; `string'
PUBLIC	??_C@_04EKFHDGAE@?4wsh?$AA@			; `string'
PUBLIC	??_C@_04LOIBGJFO@?4xsd?$AA@			; `string'
PUBLIC	??_C@_04HGFIODFG@?4xsl?$AA@			; `string'
PUBLIC	??_C@_04GNGOLJF@?4386?$AA@			; `string'
PUBLIC	??_C@_04FOHEGJHC@?4acm?$AA@			; `string'
PUBLIC	??_C@_04JDOCPFPP@?4ade?$AA@			; `string'
PUBLIC	??_C@_04KEFHBDOL@?4adp?$AA@			; `string'
PUBLIC	??_C@_04DCMADPCF@?4ani?$AA@			; `string'
PUBLIC	??_C@_04LPHIBIEH@?4app?$AA@			; `string'
PUBLIC	??_C@_04JDJAHBEL@?4asd?$AA@			; `string'
PUBLIC	??_C@_04KBKGBDMJ@?4asf?$AA@			; `string'
PUBLIC	??_C@_04HFOHCMBG@?4asx?$AA@			; `string'
PUBLIC	??_C@_04HCOOIEMK@?4awx?$AA@			; `string'
PUBLIC	??_C@_04HHONFNHK@?4boo?$AA@			; `string'
PUBLIC	??_C@_04GCBFBPPI@?4bz2?$AA@			; `string'
PUBLIC	??_C@_04BCMGGOLH@?4cdf?$AA@			; `string'
PUBLIC	??_C@_06POIMOJKC@?4class?$AA@			; `string'
PUBLIC	??_C@_05GCBAOBBN@?4dhtm?$AA@			; `string'
PUBLIC	??_C@_06KKCMFIJD@?4dhtml?$AA@			; `string'
PUBLIC	??_C@_04FAMALMPP@?4dlo?$AA@			; `string'
PUBLIC	??_C@_04DIHMAKOE@?4emf?$AA@			; `string'
PUBLIC	??_C@_04MCJDOCGO@?4eml?$AA@			; `string'
PUBLIC	??_C@_04FDPPLPOO@?4flt?$AA@			; `string'
PUBLIC	??_C@_04FBLJABLH@?4fot?$AA@			; `string'
PUBLIC	??_C@_03GBOLEDH@?4gz?$AA@			; `string'
PUBLIC	??_C@_04DKBFJDAN@?4htm?$AA@			; `string'
PUBLIC	??_C@_05LHMDENIF@?4html?$AA@			; `string'
PUBLIC	??_C@_04PHHEBHMK@?4ini?$AA@			; `string'
PUBLIC	??_C@_04LCFBANHC@?4j2k?$AA@			; `string'
PUBLIC	??_C@_04EHKLDEID@?4jar?$AA@			; `string'
PUBLIC	??_C@_04GMEKPFFD@?4jff?$AA@			; `string'
PUBLIC	??_C@_04GHBGLCGO@?4jif?$AA@			; `string'
PUBLIC	??_C@_04POJMDHDM@?4jmh?$AA@			; `string'
PUBLIC	??_C@_04HLECJFKK@?4jng?$AA@			; `string'
PUBLIC	??_C@_04KKDGLCMB@?4jp2?$AA@			; `string'
PUBLIC	??_C@_04FPMMHJFC@?4jpe?$AA@			; `string'
PUBLIC	??_C@_05KPIGABMB@?4jpeg?$AA@			; `string'
PUBLIC	??_C@_04GNPKBLNA@?4jpg?$AA@			; `string'
PUBLIC	??_C@_04EPFEHOMD@?4lsp?$AA@			; `string'
PUBLIC	??_C@_04MMHKJEOH@?4mod?$AA@			; `string'
PUBLIC	??_C@_04MJHJENFH@?4nws?$AA@			; `string'
PUBLIC	??_C@_04PACIOCLB@?4obj?$AA@			; `string'
PUBLIC	??_C@_04DCGPEFLD@?4olb?$AA@			; `string'
PUBLIC	??_C@_04HDEPAGHI@?4osd?$AA@			; `string'
PUBLIC	??_C@_04LCEIGNIC@?4ov1?$AA@			; `string'
PUBLIC	??_C@_04JJGFDOEB@?4ov2?$AA@			; `string'
PUBLIC	??_C@_04IAHOAPAA@?4ov3?$AA@			; `string'
PUBLIC	??_C@_04LNFNEOJL@?4ovl?$AA@			; `string'
PUBLIC	??_C@_04GJBMHBEE@?4ovr?$AA@			; `string'
PUBLIC	??_C@_04HOMEEBJD@?4pdr?$AA@			; `string'
PUBLIC	??_C@_04LBNIPBFE@?4pgm?$AA@			; `string'
PUBLIC	??_C@_04EFOINKHF@?4php?$AA@			; `string'
PUBLIC	??_C@_04ECCNOALK@?4pkg?$AA@			; `string'
PUBLIC	??_C@_03DOPLEBF@?4pl?$AA@			; `string'
PUBLIC	??_C@_04EEOGCCFB@?4png?$AA@			; `string'
PUBLIC	??_C@_04CEMLAJPE@?4pot?$AA@			; `string'
PUBLIC	??_C@_04HMPAHLHO@?4pps?$AA@			; `string'
PUBLIC	??_C@_04DDLBONLJ@?4ppt?$AA@			; `string'
PUBLIC	??_C@_04LMPJOIKA@?4ps1?$AA@			; `string'
PUBLIC	??_C@_07KMHCJKCL@?4ps1xml?$AA@			; `string'
PUBLIC	??_C@_05HPAPKHGM@?4psc1?$AA@			; `string'
PUBLIC	??_C@_04NCAGELPD@?4rar?$AA@			; `string'
PUBLIC	??_C@_04BLKDLNGL@?4rpl?$AA@			; `string'
PUBLIC	??_C@_04OGEFPNDN@?4rtf?$AA@			; `string'
PUBLIC	??_C@_04EGFCEFJK@?4sbf?$AA@			; `string'
PUBLIC	??_C@_07PPFPDIDE@?4script?$AA@			; `string'
PUBLIC	??_C@_03GFMFMPEI@?4sh?$AA@			; `string'
PUBLIC	??_C@_04EIEFGIL@?4sha?$AA@			; `string'
PUBLIC	??_C@_05LANAKKIP@?4shtm?$AA@			; `string'
PUBLIC	??_C@_06LEPPGKLA@?4shtml?$AA@			; `string'
PUBLIC	??_C@_04KDBPNKAO@?4spl?$AA@			; `string'
PUBLIC	??_C@_04FMLPCEAB@?4swf?$AA@			; `string'
PUBLIC	??_C@_04PHGNBECP@?4tar?$AA@			; `string'
PUBLIC	??_C@_04DLDJOCJF@?4tgz?$AA@			; `string'
PUBLIC	??_C@_04MMEBIPMJ@?4tmp?$AA@			; `string'
PUBLIC	??_C@_04MDCOKCOB@?4ttf?$AA@			; `string'
PUBLIC	??_C@_04EHPLDJIL@?4vcs?$AA@			; `string'
PUBLIC	??_C@_04JIOGEBGJ@?4vlm?$AA@			; `string'
PUBLIC	??_C@_04FCALPBIM@?4vxd?$AA@			; `string'
PUBLIC	??_C@_04LBPPCIEH@?4vxo?$AA@			; `string'
PUBLIC	??_C@_04CDBCGAHB@?4wiz?$AA@			; `string'
PUBLIC	??_C@_04DJEBBHEN@?4wll?$AA@			; `string'
PUBLIC	??_C@_04PAFKPHHC@?4wmd?$AA@			; `string'
PUBLIC	??_C@_04MCGMJFPA@?4wmf?$AA@			; `string'
PUBLIC	??_C@_04PFNJHDOE@?4wms?$AA@			; `string'
PUBLIC	??_C@_04CEBLMIKN@?4wmz?$AA@			; `string'
PUBLIC	??_C@_04KLOFFBJG@?4wpc?$AA@			; `string'
PUBLIC	??_C@_04GGHDMNBL@?4wwk?$AA@			; `string'
PUBLIC	??_C@_05MHAAJLJO@?4xhtm?$AA@			; `string'
PUBLIC	??_C@_06NODIJKHD@?4xhtml?$AA@			; `string'
PUBLIC	??_C@_03NPMOFKN@?4xl?$AA@			; `string'
PUBLIC	??_C@_04GAOAGNCM@?4xml?$AA@			; `string'
PUBLIC	??_C@_04CLJHFACG@?4zip?$AA@			; `string'
PUBLIC	??_C@_03GKKCJKIH@?47z?$AA@			; `string'
PUBLIC	??_C@_1DA@HFFKBABD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_05EMECODII@?$CFls?$CFc?$AA@		; `string'
PUBLIC	??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@ ; `string'
PUBLIC	??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@		; `string'
PUBLIC	??_C@_07HBPFMAGN@Volume?$HL?$AA@		; `string'
PUBLIC	??_C@_02EKJJMPLG@?$HN?2?$AA@			; `string'
PUBLIC	??_C@_02HDBGODGB@?2?2?$AA@			; `string'
PUBLIC	??_C@_03IDDIGDHP@UNC?$AA@			; `string'
PUBLIC	??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@	; `string'
PUBLIC	??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@		; `string'
PUBLIC	??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@ ; `string'
PUBLIC	??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@ ; `string'
PUBLIC	??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@ ; `string'
PUBLIC	??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@	; `string'
PUBLIC	??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@ ; `string'
PUBLIC	??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@ ; `string'
PUBLIC	??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@	; `string'
PUBLIC	??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@ ; `string'
PUBLIC	??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@ ; `string'
PUBLIC	??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@ ; `string'
PUBLIC	??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@	; `string'
PUBLIC	??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@		; `string'
PUBLIC	??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_0DK@IFNHFOHB@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_09IMBMLODE@EnableLUA?$AA@			; `string'
PUBLIC	??_C@_1BK@LABJKOM@?$AA?2?$AAD?$AAo?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?2?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@	; `string'
PUBLIC	??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@	; `string'
PUBLIC	??_C@_04IOIMBAGL@?1p?5?$CC?$AA@			; `string'
PUBLIC	??_C@_02DEBJNODD@?$PP?$PO?$AA@			; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_07MAJILGNB@notepad?$AA@			; `string'
PUBLIC	??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@		; `string'
PUBLIC	??_C@_0DO@MNMIDBOE@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@ ; `string'
PUBLIC	??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@		; `string'
PUBLIC	??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@		; `string'
PUBLIC	??_C@_02KOPDJAMB@?$CC?5?$AA@			; `string'
PUBLIC	??_C@_0BB@GBMFPGPM@GostCrypt?5Format?$AA@	; `string'
PUBLIC	??_C@_04MBHGDIPH@Pidl?$AA@			; `string'
PUBLIC	??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@	; `string'
PUBLIC	??_C@_09FBJLNPFF@MRUListEx?$AA@			; `string'
PUBLIC	??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_07GIFPBEK@MRUList?$AA@			; `string'
PUBLIC	??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@ ; `string'
PUBLIC	??_C@_08PNLNEKOB@kernel32?$AA@			; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@		; `string'
PUBLIC	??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BC@FNANDAA@Configuration?4xml?$AA@	; `string'
PUBLIC	??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BA@ONMDCELG@GostCrypt?5debug?$AA@	; `string'
PUBLIC	??_C@_0P@LKABJJMO@IsWow64Process?$AA@		; `string'
PUBLIC	??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@ ; `string'
PUBLIC	??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@	; `string'
PUBLIC	??_C@_03JECLAOEA@win?$AA@			; `string'
PUBLIC	??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ ; `string'
PUBLIC	??_C@_0M@MNPNDAHP@ProductName?$AA@		; `string'
PUBLIC	??_C@_04OJDKMIMG@2000?$AA@			; `string'
PUBLIC	??_C@_02HFGDGGPD@xp?$AA@			; `string'
PUBLIC	??_C@_05GHINFEPM@?9home?$AA@			; `string'
PUBLIC	??_C@_04NOKDIIJN@?9pro?$AA@			; `string'
PUBLIC	??_C@_04MCBHJLAF@2003?$AA@			; `string'
PUBLIC	??_C@_05FBPADAKE@vista?$AA@			; `string'
PUBLIC	??_C@_04CBODECMO@2008?$AA@			; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_06HHKOBDNA@2008r2?$AA@			; `string'
PUBLIC	??_C@_07ODEEFNBO@?9server?$AA@			; `string'
PUBLIC	??_C@_08NMMAHDIF@Standard?$AA@			; `string'
PUBLIC	??_C@_09OBBBAFJO@?9standard?$AA@		; `string'
PUBLIC	??_C@_0N@KIDDKEAC@Professional?$AA@		; `string'
PUBLIC	??_C@_08IHAGPJCB@Business?$AA@			; `string'
PUBLIC	??_C@_09LKNHIPDK@?9business?$AA@		; `string'
PUBLIC	??_C@_0L@DCNJHNHF@Enterprise?$AA@		; `string'
PUBLIC	??_C@_0M@CCIJFPDH@?9enterprise?$AA@		; `string'
PUBLIC	??_C@_0L@OOPFNAF@Datacenter?$AA@		; `string'
PUBLIC	??_C@_0M@BOLPHPEH@?9datacenter?$AA@		; `string'
PUBLIC	??_C@_08DIOBIMMC@Ultimate?$AA@			; `string'
PUBLIC	??_C@_09FDAPKNJ@?9ultimate?$AA@			; `string'
PUBLIC	??_C@_08KHECKGMK@?9starter?$AA@			; `string'
PUBLIC	??_C@_05NIKDGMHP@Basic?$AA@			; `string'
PUBLIC	??_C@_06FNMLEPMI@?9basic?$AA@			; `string'
PUBLIC	??_C@_04DFMLABPB@?9x64?$AA@			; `string'
PUBLIC	??_C@_03PFGLPIPP@?9sp?$AA@			; `string'
PUBLIC	??_C@_04CIEGKLKE@?$CGos?$DN?$AA@		; `string'
PUBLIC	??_C@_0DP@CODPILBK@http?3?1?1www?4gostcrypt?4org?1applink@ ; `string'
PUBLIC	??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@ ; `string'
PUBLIC	??_C@_0M@PNKDIFLK@NoAutoMount?$AA@		; `string'
PUBLIC	??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@	; `string'
PUBLIC	??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@	; `string'
PUBLIC	??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@	; `string'
PUBLIC	??_C@_0BH@GEMJKNEE@INCONSISTENCY_RESOLVED?$AA@	; `string'
PUBLIC	??_C@_0BB@FLLBKCCB@UNEXPECTED_STATE?$AA@	; `string'
PUBLIC	??_C@_0M@BHFNFFHI@PagingFiles?$AA@		; `string'
PUBLIC	??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@ ; `string'
PUBLIC	??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@		; `string'
PUBLIC	??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@		; `string'
PUBLIC	??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@	; `string'
PUBLIC	??_C@_03EJABLKAK@?$DP?3?2?$AA@			; `string'
PUBLIC	__TI2?AUSystemException@GostCrypt@@
PUBLIC	__CTA2?AUSystemException@GostCrypt@@
PUBLIC	??_R0?AUSystemException@GostCrypt@@@8		; GostCrypt::SystemException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUSystemException@GostCrypt@@@8??0SystemException@GostCrypt@@QAE@ABU01@@Z8
PUBLIC	??_R0?AUException@GostCrypt@@@8			; GostCrypt::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4
PUBLIC	??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
PUBLIC	??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
PUBLIC	??_C@_0L@DPPABKKK@?2Partition?$AA@		; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@ ; `string'
PUBLIC	??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@		; `string'
PUBLIC	??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@		; `string'
PUBLIC	??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CK@GCBAHDNG@?$CFs?2GostCrypt_Write_Protection_Re@ ; `string'
PUBLIC	??_C@_0CP@HCNNGBFB@?$CFs?2GostCrypt_Write_Protection_Re@ ; `string'
PUBLIC	??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@ ; `string'
PUBLIC	??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@ ; `string'
PUBLIC	??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@ ; `string'
PUBLIC	??_C@_05DAJPPLDE@exit?6?$AA@			; `string'
PUBLIC	??_C@_05KPBLJGDL@runas?$AA@			; `string'
PUBLIC	??_C@_0CE@DMPALGPC@GostCryptEnableElevatedCursorCha@ ; `string'
PUBLIC	??_C@_0O@MNJOMPAF@GostCrypt?5UAC?$AA@		; `string'
PUBLIC	??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@	; `string'
PUBLIC	??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@		; `string'
PUBLIC	??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@		; `string'
PUBLIC	??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@ ; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
PUBLIC	??_C@_0M@MLHPPPJP@DisplayName?$AA@		; `string'
PUBLIC	??_C@_02DJGKEECL@?4?4?$AA@			; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_C@_02MDKMJEGG@eE?$AA@			; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP?$AA@			; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
PUBLIC	?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Container@ForEach@GostCrypt@@6B@		; GostCrypt::ForEach::Container::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUContainer@ForEach@GostCrypt@@@8		; GostCrypt::ForEach::Container `RTTI Type Descriptor'
PUBLIC	??_R3Container@ForEach@GostCrypt@@8		; GostCrypt::ForEach::Container::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Container@ForEach@GostCrypt@@8		; GostCrypt::ForEach::Container::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8	; GostCrypt::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@GostCrypt@@6B@			; GostCrypt::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@GostCrypt@@8			; GostCrypt::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@GostCrypt@@8			; GostCrypt::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@GostCrypt@@8		; GostCrypt::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SystemException@GostCrypt@@6B@		; GostCrypt::SystemException::`RTTI Complete Object Locator'
PUBLIC	??_R3SystemException@GostCrypt@@8		; GostCrypt::SystemException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SystemException@GostCrypt@@8		; GostCrypt::SystemException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SystemException@GostCrypt@@8	; GostCrypt::SystemException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f50000000000000
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4058ff5c28f5c28f
PUBLIC	__real@4059000000000000
PUBLIC	__real@407a700000000000
PUBLIC	__real@407ca00000000000
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@42b00000
PUBLIC	__real@c028000000000000
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000190000000000000000000000000
PUBLIC	__xmm@000013e0000013df000013dd000013dc
PUBLIC	__xmm@000013e3000013e3000013e3000013e3
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalnum:PROC
EXTRN	_toupper:PROC
EXTRN	_tolower:PROC
EXTRN	_memchr:PROC
EXTRN	_memmove:PROC
EXTRN	_strchr:PROC
EXTRN	_strrchr:PROC
EXTRN	_strstr:PROC
EXTRN	_wcsrchr:PROC
EXTRN	_wcscpy_s:PROC
EXTRN	_wcsncpy:PROC
EXTRN	__wcsicmp:PROC
EXTRN	_strcpy_s:PROC
EXTRN	_strcspn:PROC
EXTRN	__stricmp:PROC
EXTRN	_strncmp:PROC
EXTRN	_strncpy:PROC
EXTRN	__strupr:PROC
EXTRN	__imp__SetCurrentDirectoryA@4:PROC
EXTRN	__imp__GetCurrentDirectoryA@8:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp__FlushFileBuffers@4:PROC
EXTRN	__imp__GetDiskFreeSpaceA@20:PROC
EXTRN	__imp__GetDiskFreeSpaceExA@16:PROC
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__GetFileInformationByHandle@8:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__GetFileSizeEx@8:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	__imp__GetLogicalDrives@0:PROC
EXTRN	__imp__GetVolumeInformationW@32:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__SetFilePointerEx@20:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__UnhandledExceptionFilter@4:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__SetErrorMode@4:PROC
EXTRN	__imp__DeviceIoControl@32:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateMutexA@12:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetCurrentThread@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__OpenProcessToken@12:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	__imp__GetSystemDirectoryA@8:PROC
EXTRN	__imp__GetVersionExA@4:PROC
EXTRN	__imp__VirtualQuery@12:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryExA@12:PROC
EXTRN	__imp__LoadResource@8:PROC
EXTRN	__imp__LockResource@4:PROC
EXTRN	__imp__SizeofResource@8:PROC
EXTRN	__imp__AdjustTokenPrivileges@24:PROC
EXTRN	__imp__GetTokenInformation@20:PROC
EXTRN	__imp__IsWellKnownSid@8:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageW@28:PROC
EXTRN	__imp__OpenMutexA@12:PROC
EXTRN	__imp__FindResourceA@12:PROC
EXTRN	__imp__GetTempPathA@8:PROC
EXTRN	__imp__DefineDosDeviceA@12:PROC
EXTRN	__imp__QueryDosDeviceA@12:PROC
EXTRN	__imp__GetVolumeInformationA@32:PROC
EXTRN	__imp__LookupPrivilegeValueA@12:PROC
EXTRN	__imp__GetVolumePathNameA@12:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__CreateFontIndirectW@4:PROC
EXTRN	__imp__CreatePen@12:PROC
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetCurrentObject@8:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__GetTextExtentPoint32W@16:PROC
EXTRN	__imp__LineTo@12:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetMapMode@8:PROC
EXTRN	__imp__StretchBlt@44:PROC
EXTRN	__imp__SetStretchBltMode@8:PROC
EXTRN	__imp__GetTextMetricsA@8:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__MoveToEx@16:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	__imp__TrackMouseEvent@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__ExitWindowsEx@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__SendMessageTimeoutA@28:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__UnregisterClassA@8:PROC
EXTRN	__imp__GetClassInfoA@12:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__SetLayeredWindowAttributes@16:PROC
EXTRN	__imp__MoveWindow@24:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
EXTRN	__imp__DialogBoxParamW@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__SendDlgItemMessageA@20:PROC
EXTRN	__imp__GetDlgCtrlID@4:PROC
EXTRN	__imp__GetDialogBaseUnits@0:PROC
EXTRN	__imp__DefDlgProcA@16:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp__GetSystemMenu@8:PROC
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp__AppendMenuW@16:PROC
EXTRN	__imp__DrawTextA@20:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__GetUpdateRect@12:PROC
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp__GetWindowTextA@12:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__MessageBeep@4:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__EnumChildWindows@12:PROC
EXTRN	__imp__EnumWindows@8:PROC
EXTRN	__imp__GetClassNameA@12:PROC
EXTRN	__imp__LoadBitmapA@8:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	__imp__SystemParametersInfoW@16:PROC
EXTRN	__imp__GetWindowInfo@8:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegEnumKeyExA@32:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__ShellExecuteA@24:PROC
EXTRN	__imp__ShellExecuteW@24:PROC
EXTRN	__imp__Shell_NotifyIconW@8:PROC
EXTRN	__imp__SHGetFileInfoA@20:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_exit:PROC
EXTRN	__set_invalid_parameter_handler:PROC
EXTRN	_atoi:PROC
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp__GetOpenFileNameW@4:PROC
EXTRN	__imp__GetSaveFileNameW@4:PROC
EXTRN	__imp__CloseServiceHandle@4:PROC
EXTRN	__imp__ControlService@12:PROC
EXTRN	__imp__CreateServiceA@52:PROC
EXTRN	__imp__OpenSCManagerA@12:PROC
EXTRN	__imp__OpenServiceA@12:PROC
EXTRN	__imp__QueryServiceStatus@8:PROC
EXTRN	__imp__StartServiceA@12:PROC
EXTRN	_frexp:PROC
EXTRN	__beginthread:PROC
EXTRN	___stdio_common_vswprintf:PROC
EXTRN	___stdio_common_vswprintf_s:PROC
EXTRN	___stdio_common_vswscanf:PROC
EXTRN	_fclose:PROC
EXTRN	_ferror:PROC
EXTRN	_fflush:PROC
EXTRN	__fileno:PROC
EXTRN	_fopen:PROC
EXTRN	_fputs:PROC
EXTRN	_remove:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	__access:PROC
EXTRN	__get_osfhandle:PROC
EXTRN	__imp__SHGetMalloc@4:PROC
EXTRN	__imp__SHGetPathFromIDListA@8:PROC
EXTRN	__imp__SHGetFolderPathA@20:PROC
EXTRN	__imp__SHBrowseForFolderW@4:PROC
EXTRN	__imp__SHChangeNotify@16:PROC
EXTRN	__imp__IsUserAnAdmin@0:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	_localeconv:PROC
EXTRN	__Getctype:PROC
EXTRN	__Getcvt:PROC
EXTRN	__Mbrtowc:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	__Wcrtomb:PROC
EXTRN	__Getwctype:PROC
EXTRN	__Getwctypes:PROC
EXTRN	__Towlower:PROC
EXTRN	__Towupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_EContainer@ForEach@GostCrypt@@UAEPAXI@Z:PROC	; GostCrypt::ForEach::Container::`vector deleting destructor'
EXTRN	??0BootEncryption@GostCrypt@@QAE@PAUHWND__@@@Z:PROC ; GostCrypt::BootEncryption::BootEncryption
EXTRN	??1BootEncryption@GostCrypt@@QAE@XZ:PROC	; GostCrypt::BootEncryption::~BootEncryption
EXTRN	?GetStatus@BootEncryption@GostCrypt@@QAE?AUBootEncryptionStatus@@XZ:PROC ; GostCrypt::BootEncryption::GetStatus
EXTRN	?IsHiddenSystemRunning@BootEncryption@GostCrypt@@QAE_NXZ:PROC ; GostCrypt::BootEncryption::IsHiddenSystemRunning
EXTRN	_GetCrc32:PROC
EXTRN	_GetDictionaryValueByInt:PROC
EXTRN	_LanguageDlgProc@16:PROC
EXTRN	_GetString:PROC
EXTRN	_GetFont:PROC
EXTRN	_LoadLanguageFile:PROC
EXTRN	_GetPreferredLangId:PROC
EXTRN	_SetPreferredLangId:PROC
EXTRN	_GetActiveLangPackVersion:PROC
EXTRN	_ReadLocalMachineRegistryDword:PROC
EXTRN	_ReadLocalMachineRegistryMultiString:PROC
EXTRN	_ReadLocalMachineRegistryString:PROC
EXTRN	_ReadLocalMachineRegistryStringNonReflected:PROC
EXTRN	_ReadRegistryString:PROC
EXTRN	_ReadRegistryBytes:PROC
EXTRN	_WriteLocalMachineRegistryMultiString:PROC
EXTRN	_WriteRegistryString:PROC
EXTRN	_WriteRegistryBytes:PROC
EXTRN	_DeleteRegistryValue:PROC
EXTRN	_GetStartupRegKeyName:PROC
EXTRN	_XmlFindElement:PROC
EXTRN	_XmlGetAttributeText:PROC
EXTRN	_XmlGetNodeText:PROC
EXTRN	_XmlWriteHeader:PROC
EXTRN	_XmlWriteFooter:PROC
EXTRN	_XmlFindElementByAttributeValue:PROC
EXTRN	_StatusMessage:PROC
EXTRN	??_E?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAEPAXI@Z:PROC ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z:PROC ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vector deleting destructor'
EXTRN	??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z:PROC ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vector deleting destructor'
EXTRN	??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__ltod3:PROC
EXTRN	__ultod3:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?_BADOFF@std@@3_JB:QWORD			; std::_BADOFF
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
EXTRN	_LocalizationActive:DWORD
EXTRN	_LocalizationSerialNo:DWORD
EXTRN	_SystemEncryptionUpdate:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 018H DUP (?) ; ExtraBootPartitionDevicePath
?ConfigFileHandle@@3PAU_iobuf@@A DD 01H DUP (?)		; ConfigFileHandle
_BSS	ENDS
;	COMDAT ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A
_BSS	SEGMENT
?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A DD 01H DUP (?) ; `AboutDlgProc'::`2'::hbmTextualLogoBitmapRescaled
_BSS	ENDS
_BSS	SEGMENT
?StaticModelessWaitDlgHandle@@3PAUHWND__@@A DD 01H DUP (?) ; StaticModelessWaitDlgHandle
_BSS	ENDS
;	COMDAT ?aboutMenuAppended@?1??InitDialog@@9@4HA
_BSS	SEGMENT
?aboutMenuAppended@?1??InitDialog@@9@4HA DD 01H DUP (?)	; `InitDialog'::`2'::aboutMenuAppended
_BSS	ENDS
;	COMDAT ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A
_BSS	SEGMENT
?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A DD 01H DUP (?)	; `WaitCursor'::`2'::hcWait
_BSS	ENDS
;	COMDAT ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
_BSS	SEGMENT
?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A DD 01H DUP (?) ; `NormalCursor'::`2'::hcArrow
_BSS	ENDS
;	COMDAT ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A
_BSS	SEGMENT
?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A DD 01H DUP (?) ; `ArrowWaitCursor'::`2'::hcArrowWait
_BSS	ENDS
;	COMDAT ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A
_BSS	SEGMENT
?hcHand@?1??HandCursor@@9@4PAUHICON__@@A DD 01H DUP (?)	; `HandCursor'::`2'::hcHand
_BSS	ENDS
;	COMDAT ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA
_BSS	SEGMENT
?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA DD 01H DUP (?) ; `IsReturnAddress'::`2'::codeEnd
_BSS	ENDS
;	COMDAT ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
_BSS	SEGMENT
?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA DD 01H DUP (?) ; `TextInfoDialogBoxDlgProc'::`2'::nID
_BSS	ENDS
;	COMDAT ?resource@?1??GetLegalNotices@@9@4PADA
_BSS	SEGMENT
?resource@?1??GetLegalNotices@@9@4PADA DD 01H DUP (?)	; `GetLegalNotices'::`2'::resource
_BSS	ENDS
;	COMDAT ?size@?1??GetLegalNotices@@9@4KA
_BSS	SEGMENT
?size@?1??GetLegalNotices@@9@4KA DD 01H DUP (?)		; `GetLegalNotices'::`2'::size
_BSS	ENDS
;	COMDAT ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
_BSS	SEGMENT
?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA DD 01H DUP (?) ; `RawDevicesDlgProc'::`2'::lpszFileName
_BSS	ENDS
;	COMDAT ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
_BSS	SEGMENT
?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A DB 0cH DUP (?) ; `RawDevicesDlgProc'::`2'::devices
_BSS	ENDS
;	COMDAT ?$TSS0@?1??RawDevicesDlgProc@@9@16@4HA
_BSS	SEGMENT
?$TSS0@?1??RawDevicesDlgProc@@9@16@4HA DD 01H DUP (?)	; TSS0<`template-parameter-2',DevicesDlgProc>
_BSS	ENDS
;	COMDAT ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
_BSS	SEGMENT
?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A DQ 01H DUP (?) ; `RawDevicesDlgProc'::`2'::itemToDeviceMap
_BSS	ENDS
;	COMDAT ?$TSS1@?1??RawDevicesDlgProc@@9@16@4HA
_BSS	SEGMENT
?$TSS1@?1??RawDevicesDlgProc@@9@16@4HA DD 01H DUP (?)	; TSS1<`template-parameter-2',DevicesDlgProc>
_BSS	ENDS
_BSS	SEGMENT
?SelectMultipleFilesPath@@3PADA DB 020000H DUP (?)	; SelectMultipleFilesPath
?SelectMultipleFilesOffset@@3HA DD 01H DUP (?)		; SelectMultipleFilesOffset
?explorerCloseSent@@3HA DD 01H DUP (?)			; explorerCloseSent
?explorerTopLevelWindow@@3PAUHWND__@@A DD 01H DUP (?)	; explorerTopLevelWindow
_BSS	ENDS
;	COMDAT ?b@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?b@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::b
_BSS	ENDS
;	COMDAT ?kb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?kb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::kb
_BSS	ENDS
;	COMDAT ?mb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?mb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::mb
_BSS	ENDS
;	COMDAT ?gb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?gb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::gb
_BSS	ENDS
;	COMDAT ?tb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?tb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::tb
_BSS	ENDS
;	COMDAT ?pb@?1??GetSizeString@@9@4PA_WA
_BSS	SEGMENT
?pb@?1??GetSizeString@@9@4PA_WA DD 01H DUP (?)		; `GetSizeString'::`2'::pb
_BSS	ENDS
;	COMDAT ?serNo@?1??GetSizeString@@9@4HA
_BSS	SEGMENT
?serNo@?1??GetSizeString@@9@4HA DD 01H DUP (?)		; `GetSizeString'::`2'::serNo
_BSS	ENDS
;	COMDAT ?path@?1??GetConfigPath@@9@4PADA
_BSS	SEGMENT
?path@?1??GetConfigPath@@9@4PADA DB 0208H DUP (?)	; `GetConfigPath'::`2'::path
_BSS	ENDS
;	COMDAT ?path@?1??GetProgramConfigPath@@9@4PADA
_BSS	SEGMENT
?path@?1??GetProgramConfigPath@@9@4PADA DB 0208H DUP (?) ; `GetProgramConfigPath'::`2'::path
_BSS	ENDS
;	COMDAT ?isWow64@?1??Is64BitOs@@9@4HA
_BSS	SEGMENT
?isWow64@?1??Is64BitOs@@9@4HA DD 01H DUP (?)		; `Is64BitOs'::`2'::isWow64
_BSS	ENDS
;	COMDAT ?valid@?1??Is64BitOs@@9@4HA
_BSS	SEGMENT
?valid@?1??Is64BitOs@@9@4HA DD 01H DUP (?)		; `Is64BitOs'::`2'::valid
_BSS	ENDS
;	COMDAT ?statusCached@?1??IsHiddenOSRunning@@9@4HA
_BSS	SEGMENT
?statusCached@?1??IsHiddenOSRunning@@9@4HA DD 01H DUP (?) ; `IsHiddenOSRunning'::`2'::statusCached
_BSS	ENDS
;	COMDAT ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA
_BSS	SEGMENT
?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA DD 01H DUP (?) ; `IsHiddenOSRunning'::`2'::hiddenOSRunning
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A
_BSS	SEGMENT
?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A DQ 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
CRT$XCU	SEGMENT
?ExtraBootPartitionDevicePath$initializer$@@3P6AXXZA DD FLAT:??__EExtraBootPartitionDevicePath@@YAXXZ ; ExtraBootPartitionDevicePath$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@000013e3000013e3000013e3000013e3
CONST	SEGMENT
__xmm@000013e3000013e3000013e3000013e3 DB 0e3H, 013H, 00H, 00H, 0e3H, 013H
	DB	00H, 00H, 0e3H, 013H, 00H, 00H, 0e3H, 013H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000013e0000013df000013dd000013dc
CONST	SEGMENT
__xmm@000013e0000013df000013dd000013dc DB 0dcH, 013H, 00H, 00H, 0ddH, 013H
	DB	00H, 00H, 0dfH, 013H, 00H, 00H, 0e0H, 013H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000190000000000000000000000000
CONST	SEGMENT
__xmm@00000190000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 090H, 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c028000000000000
CONST	SEGMENT
__real@c028000000000000 DQ 0c028000000000000r	; -12
CONST	ENDS
;	COMDAT __real@42b00000
CONST	SEGMENT
__real@42b00000 DD 042b00000r			; 88
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT __real@407ca00000000000
CONST	SEGMENT
__real@407ca00000000000 DQ 0407ca00000000000r	; 458
CONST	ENDS
;	COMDAT __real@407a700000000000
CONST	SEGMENT
__real@407a700000000000 DQ 0407a700000000000r	; 423
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4058ff5c28f5c28f
CONST	SEGMENT
__real@4058ff5c28f5c28f DQ 04058ff5c28f5c28fr	; 99.99
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3f50000000000000
CONST	SEGMENT
__real@3f50000000000000 DQ 03f50000000000000r	; 0.000976563
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$r	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8 DD 00H ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@@8
data$r	SEGMENT
??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocat'
	DB	'or@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@ DD 00H ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8 DD 00H ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@@8
data$r	SEGMENT
??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std'
	DB	'@@@ForEach@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@ DD 00H ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R0?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R2?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R3?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8 DD 00H ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@@8
data$r	SEGMENT
??_R0?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D'
	DB	'@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@ DD 00H ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@@8
	DD	FLAT:??_R3?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SystemException@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SystemException@GostCrypt@@8 DD FLAT:??_R0?AUSystemException@GostCrypt@@@8 ; GostCrypt::SystemException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SystemException@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2SystemException@GostCrypt@@8
rdata$r	SEGMENT
??_R2SystemException@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@SystemException@GostCrypt@@8 ; GostCrypt::SystemException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R3SystemException@GostCrypt@@8
rdata$r	SEGMENT
??_R3SystemException@GostCrypt@@8 DD 00H		; GostCrypt::SystemException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SystemException@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R4SystemException@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4SystemException@GostCrypt@@6B@ DD 00H		; GostCrypt::SystemException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSystemException@GostCrypt@@@8
	DD	FLAT:??_R3SystemException@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@GostCrypt@@8 DD FLAT:??_R0?AUException@GostCrypt@@@8 ; GostCrypt::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@GostCrypt@@8
rdata$r	SEGMENT
??_R2Exception@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@Exception@GostCrypt@@8 ; GostCrypt::Exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Exception@GostCrypt@@8
rdata$r	SEGMENT
??_R3Exception@GostCrypt@@8 DD 00H			; GostCrypt::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4Exception@GostCrypt@@6B@ DD 00H			; GostCrypt::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUException@GostCrypt@@@8
	DD	FLAT:??_R3Exception@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8 DD FLAT:??_R0?AUContainer@ForEach@GostCrypt@@@8 ; GostCrypt::ForEach::Container::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2Container@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R2Container@ForEach@GostCrypt@@8 DD FLAT:??_R1A@?0A@EA@Container@ForEach@GostCrypt@@8 ; GostCrypt::ForEach::Container::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Container@ForEach@GostCrypt@@8
rdata$r	SEGMENT
??_R3Container@ForEach@GostCrypt@@8 DD 00H		; GostCrypt::ForEach::Container::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUContainer@ForEach@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUContainer@ForEach@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::ForEach::Container `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUContainer@ForEach@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4Container@ForEach@GostCrypt@@6B@
rdata$r	SEGMENT
??_R4Container@ForEach@GostCrypt@@6B@ DD 00H		; GostCrypt::ForEach::Container::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUContainer@ForEach@GostCrypt@@@8
	DD	FLAT:??_R3Container@ForEach@GostCrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$all'
	DB	'ocator@_W@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8 DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$alloca'
	DB	'tor@_W@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD 00H ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	020H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8 DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD 00H ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	020H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP?$AA@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP?$AA@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE?$AA@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE?$AA@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_C@_02DJGKEECL@?4?4?$AA@
CONST	SEGMENT
??_C@_02DJGKEECL@?4?4?$AA@ DB '..', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLHPPPJP@DisplayName?$AA@
CONST	SEGMENT
??_C@_0M@MLHPPPJP@DisplayName?$AA@ DB 'DisplayName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Uninstall', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'k', 00H, '%', 00H, 'd', 00H, '\', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@
CONST	SEGMENT
??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@ DB 'isoburn.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@
CONST	SEGMENT
??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@ DB '\isoburn.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
CONST	SEGMENT
??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@ DB '\\?\Volume{', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MNJOMPAF@GostCrypt?5UAC?$AA@
CONST	SEGMENT
??_C@_0O@MNJOMPAF@GostCrypt?5UAC?$AA@ DB 'GostCrypt UAC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DMPALGPC@GostCryptEnableElevatedCursorCha@
CONST	SEGMENT
??_C@_0CE@DMPALGPC@GostCryptEnableElevatedCursorCha@ DB 'GostCryptEnableE'
	DB	'levatedCursorChange', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPBLJGDL@runas?$AA@
CONST	SEGMENT
??_C@_05KPBLJGDL@runas?$AA@ DB 'runas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DAJPPLDE@exit?6?$AA@
CONST	SEGMENT
??_C@_05DAJPPLDE@exit?6?$AA@ DB 'exit', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@
CONST	SEGMENT
??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@ DB 'select pa'
	DB	'rtition %d', 0aH, 'attributes volume clear readonly', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@
CONST	SEGMENT
??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@ DB 'select d'
	DB	'isk %d', 0aH, 'attributes disk clear readonly', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@
CONST	SEGMENT
??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@ DB '@'
	DB	'diskpart /s "%s"', 0aH, '@pause', 0aH, '@del "%s" "%s"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HCNNGBFB@?$CFs?2GostCrypt_Write_Protection_Re@
CONST	SEGMENT
??_C@_0CP@HCNNGBFB@?$CFs?2GostCrypt_Write_Protection_Re@ DB '%s\GostCrypt'
	DB	'_Write_Protection_Removal.diskpart', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GCBAHDNG@?$CFs?2GostCrypt_Write_Protection_Re@
CONST	SEGMENT
??_C@_0CK@GCBAHDNG@?$CFs?2GostCrypt_Write_Protection_Re@ DB '%s\GostCrypt'
	DB	'_Write_Protection_Removal.cmd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@ DB '\Devi'
	DB	'ce\Harddisk%d\Partition%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@ DB 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@ DB 'r', 00H, 'u', 00H
	DB	'n', 00H, 'a', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@ DB 'c', 00H
	DB	'm', 00H, 'd', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@ DB '/'
	DB	00H, 'C', 00H, ' ', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'o', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'k', 00H, 'd', 00H, 's', 00H, 'k', 00H, ' ', 00H
	DB	'%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'p'
	DB	00H, 'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@ DB '/'
	DB	00H, 'C', 00H, ' ', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'o', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'k', 00H, 'd', 00H, 's', 00H, 'k', 00H, ' ', 00H
	DB	'%', 00H, 'h', 00H, 's', 00H, ' ', 00H, '/', 00H, 'F', 00H, ' '
	DB	00H, '/', 00H, 'X', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'p', 00H
	DB	'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@
CONST	SEGMENT
??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@ DB 'CHECKING_FS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@
CONST	SEGMENT
??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@ DB 'REPAIRING_FS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@
CONST	SEGMENT
??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@ DB 'FILESYS_REPAIR_C'
	DB	'ONFIRM_BACKUP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPPABKKK@?2Partition?$AA@
CONST	SEGMENT
??_C@_0L@DPPABKKK@?2Partition?$AA@ DB '\Partition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	058H
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z
	DD	FLAT:?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	010H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@ DD 00H ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	020H
CONST	ENDS
;	COMDAT ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@ DD 00H ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`vftable'
	DD	FLAT:??_E?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4
xdata$x	SEGMENT
__CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4 DD 00H
	DD	FLAT:??_R0?AUException@GostCrypt@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	FLAT:??0Exception@GostCrypt@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUException@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUException@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUException@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AUSystemException@GostCrypt@@@8??0SystemException@GostCrypt@@QAE@ABU01@@Z8
xdata$x	SEGMENT
__CT??_R0?AUSystemException@GostCrypt@@@8??0SystemException@GostCrypt@@QAE@ABU01@@Z8 DD 00H
	DD	FLAT:??_R0?AUSystemException@GostCrypt@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	FLAT:??0SystemException@GostCrypt@@QAE@ABU01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUSystemException@GostCrypt@@@8
data$r	SEGMENT
??_R0?AUSystemException@GostCrypt@@@8 DD FLAT:??_7type_info@@6B@ ; GostCrypt::SystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSystemException@GostCrypt@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AUSystemException@GostCrypt@@
xdata$x	SEGMENT
__CTA2?AUSystemException@GostCrypt@@ DD 02H
	DD	FLAT:__CT??_R0?AUSystemException@GostCrypt@@@8??0SystemException@GostCrypt@@QAE@ABU01@@Z8
	DD	FLAT:__CT??_R0?AUException@GostCrypt@@@8??0Exception@GostCrypt@@QAE@ABU01@@Z4
xdata$x	ENDS
;	COMDAT __TI2?AUSystemException@GostCrypt@@
xdata$x	SEGMENT
__TI2?AUSystemException@GostCrypt@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AUSystemException@GostCrypt@@
xdata$x	ENDS
;	COMDAT ??_C@_03EJABLKAK@?$DP?3?2?$AA@
CONST	SEGMENT
??_C@_03EJABLKAK@?$DP?3?2?$AA@ DB '?:\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@
CONST	SEGMENT
??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@ DB 'X:\pagefile.sys', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@
CONST	SEGMENT
??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@ DB '\\.\X:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
CONST	SEGMENT
??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@ DB 'UAC_INIT_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@ DB 'System\Current'
	DB	'ControlSet\Control\Session Manager\Memory Management', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
CONST	SEGMENT
??_C@_0M@BHFNFFHI@PagingFiles?$AA@ DB 'PagingFiles', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLLBKCCB@UNEXPECTED_STATE?$AA@
CONST	SEGMENT
??_C@_0BB@FLLBKCCB@UNEXPECTED_STATE?$AA@ DB 'UNEXPECTED_STATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GEMJKNEE@INCONSISTENCY_RESOLVED?$AA@
CONST	SEGMENT
??_C@_0BH@GEMJKNEE@INCONSISTENCY_RESOLVED?$AA@ DB 'INCONSISTENCY_RESOLVED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@
CONST	SEGMENT
??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@ DB 'DEVICE_NOT_READY_ERROR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@
CONST	SEGMENT
??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@ DB 'SYS_ASSIGN_DRIVE_LETTE'
	DB	'R', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@ DB 'SYS_AUTOMOUNT_DISABLED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PNKDIFLK@NoAutoMount?$AA@
CONST	SEGMENT
??_C@_0M@PNKDIFLK@NoAutoMount?$AA@ DB 'NoAutoMount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\MountMgr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CODPILBK@http?3?1?1www?4gostcrypt?4org?1applink@
CONST	SEGMENT
??_C@_0DP@CODPILBK@http?3?1?1www?4gostcrypt?4org?1applink@ DB 'http://www'
	DB	'.gostcrypt.org/applink.php?version=1.3.1%s%s&dest=%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIEGKLKE@?$CGos?$DN?$AA@
CONST	SEGMENT
??_C@_04CIEGKLKE@?$CGos?$DN?$AA@ DB '&os=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFGLPIPP@?9sp?$AA@
CONST	SEGMENT
??_C@_03PFGLPIPP@?9sp?$AA@ DB '-sp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFMLABPB@?9x64?$AA@
CONST	SEGMENT
??_C@_04DFMLABPB@?9x64?$AA@ DB '-x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FNMLEPMI@?9basic?$AA@
CONST	SEGMENT
??_C@_06FNMLEPMI@?9basic?$AA@ DB '-basic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIKDGMHP@Basic?$AA@
CONST	SEGMENT
??_C@_05NIKDGMHP@Basic?$AA@ DB 'Basic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHECKGMK@?9starter?$AA@
CONST	SEGMENT
??_C@_08KHECKGMK@?9starter?$AA@ DB '-starter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDAPKNJ@?9ultimate?$AA@
CONST	SEGMENT
??_C@_09FDAPKNJ@?9ultimate?$AA@ DB '-ultimate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DIOBIMMC@Ultimate?$AA@
CONST	SEGMENT
??_C@_08DIOBIMMC@Ultimate?$AA@ DB 'Ultimate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BOLPHPEH@?9datacenter?$AA@
CONST	SEGMENT
??_C@_0M@BOLPHPEH@?9datacenter?$AA@ DB '-datacenter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOPFNAF@Datacenter?$AA@
CONST	SEGMENT
??_C@_0L@OOPFNAF@Datacenter?$AA@ DB 'Datacenter', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCIJFPDH@?9enterprise?$AA@
CONST	SEGMENT
??_C@_0M@CCIJFPDH@?9enterprise?$AA@ DB '-enterprise', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCNJHNHF@Enterprise?$AA@
CONST	SEGMENT
??_C@_0L@DCNJHNHF@Enterprise?$AA@ DB 'Enterprise', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LKNHIPDK@?9business?$AA@
CONST	SEGMENT
??_C@_09LKNHIPDK@?9business?$AA@ DB '-business', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHAGPJCB@Business?$AA@
CONST	SEGMENT
??_C@_08IHAGPJCB@Business?$AA@ DB 'Business', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIDDKEAC@Professional?$AA@
CONST	SEGMENT
??_C@_0N@KIDDKEAC@Professional?$AA@ DB 'Professional', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OBBBAFJO@?9standard?$AA@
CONST	SEGMENT
??_C@_09OBBBAFJO@?9standard?$AA@ DB '-standard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NMMAHDIF@Standard?$AA@
CONST	SEGMENT
??_C@_08NMMAHDIF@Standard?$AA@ DB 'Standard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODEEFNBO@?9server?$AA@
CONST	SEGMENT
??_C@_07ODEEFNBO@?9server?$AA@ DB '-server', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHKOBDNA@2008r2?$AA@
CONST	SEGMENT
??_C@_06HHKOBDNA@2008r2?$AA@ DB '2008r2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CBODECMO@2008?$AA@
CONST	SEGMENT
??_C@_04CBODECMO@2008?$AA@ DB '2008', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FBPADAKE@vista?$AA@
CONST	SEGMENT
??_C@_05FBPADAKE@vista?$AA@ DB 'vista', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCBHJLAF@2003?$AA@
CONST	SEGMENT
??_C@_04MCBHJLAF@2003?$AA@ DB '2003', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NOKDIIJN@?9pro?$AA@
CONST	SEGMENT
??_C@_04NOKDIIJN@?9pro?$AA@ DB '-pro', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHINFEPM@?9home?$AA@
CONST	SEGMENT
??_C@_05GHINFEPM@?9home?$AA@ DB '-home', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HFGDGGPD@xp?$AA@
CONST	SEGMENT
??_C@_02HFGDGGPD@xp?$AA@ DB 'xp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJDKMIMG@2000?$AA@
CONST	SEGMENT
??_C@_04OJDKMIMG@2000?$AA@ DB '2000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MNPNDAHP@ProductName?$AA@
CONST	SEGMENT
??_C@_0M@MNPNDAHP@ProductName?$AA@ DB 'ProductName', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@
CONST	SEGMENT
??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ DB 'SOFTWARE\Mic'
	DB	'rosoft\Windows NT\CurrentVersion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JECLAOEA@win?$AA@
CONST	SEGMENT
??_C@_03JECLAOEA@win?$AA@ DB 'win', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@
CONST	SEGMENT
??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@ DB 'SeShutdownPrivilege', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@
CONST	SEGMENT
??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@ DB 'Wow64EnableWow6'
	DB	'4FsRedirection', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LKABJJMO@IsWow64Process?$AA@
CONST	SEGMENT
??_C@_0P@LKABJJMO@IsWow64Process?$AA@ DB 'IsWow64Process', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ONMDCELG@GostCrypt?5debug?$AA@
CONST	SEGMENT
??_C@_0BA@ONMDCELG@GostCrypt?5debug?$AA@ DB 'GostCrypt debug', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@
CONST	SEGMENT
??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@ DB 'HELP_READER_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@ DB 0aH, 09H, '</confi'
	DB	'guration>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
CONST	SEGMENT
??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@ DB 0aH
	DB	09H, 09H, '<config key="%s">%s</config>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@ DB 0aH, 09H, '<configura'
	DB	'tion>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
CONST	SEGMENT
??_C@_0BC@FNANDAA@Configuration?4xml?$AA@ DB 'Configuration.xml', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@ DB 'G'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, 'C', 00H, 'r', 00H, 'y', 00H
	DB	'p', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNLNEKOB@kernel32?$AA@
CONST	SEGMENT
??_C@_08PNLNEKOB@kernel32?$AA@ DB 'kernel32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@
CONST	SEGMENT
??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@ DB 'GetSystemWow64Direct'
	DB	'oryA', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedMRU'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIFPBEK@MRUList?$AA@
CONST	SEGMENT
??_C@_07GIFPBEK@MRUList?$AA@ DB 'MRUList', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPid'
	DB	'lMRU', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBJLNPFF@MRUListEx?$AA@
CONST	SEGMENT
??_C@_09FBJLNPFF@MRUListEx?$AA@ DB 'MRUListEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@
CONST	SEGMENT
??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@ DB 'CLEAN_WINMRU_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisited%sM'
	DB	'RU', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04MBHGDIPH@Pidl?$AA@
CONST	SEGMENT
??_C@_04MBHGDIPH@Pidl?$AA@ DB 'Pidl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBMFPGPM@GostCrypt?5Format?$AA@
CONST	SEGMENT
??_C@_0BB@GBMFPGPM@GostCrypt?5Format?$AA@ DB 'GostCrypt Format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOPDJAMB@?$CC?5?$AA@
CONST	SEGMENT
??_C@_02KOPDJAMB@?$CC?5?$AA@ DB '" ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@
CONST	SEGMENT
??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@ DB ' /a favorites', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@
CONST	SEGMENT
??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@ DB ' /a devices', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@
CONST	SEGMENT
??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@ DB '" /q prefe'
	DB	'rences /a logon', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MNMIDBOE@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0DO@MNMIDBOE@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Uninstall\GostCrypt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@
CONST	SEGMENT
??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@ DB '\GostCrypt\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAJILGNB@notepad?$AA@
CONST	SEGMENT
??_C@_07MAJILGNB@notepad?$AA@ DB 'notepad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEBJNODD@?$PP?$PO?$AA@
CONST	SEGMENT
??_C@_02DEBJNODD@?$PP?$PO?$AA@ DB 0ffH, 0feH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOIMBAGL@?1p?5?$CC?$AA@
CONST	SEGMENT
??_C@_04IOIMBAGL@?1p?5?$CC?$AA@ DB '/p "', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
CONST	SEGMENT
??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@ DB 'CANT_GET_VOLSIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
CONST	SEGMENT
??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@ DB 'CANNOT_CALC_SPACE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@LABJKOM@?$AA?2?$AAD?$AAo?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?2?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@LABJKOM@?$AA?2?$AAD?$AAo?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?2?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'o', 00H, 's', 00H, 'D', 00H, 'e', 00H, 'v', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, '\', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IMBMLODE@EnableLUA?$AA@
CONST	SEGMENT
??_C@_09IMBMLODE@EnableLUA?$AA@ DB 'EnableLUA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IFNHFOHB@Software?2Microsoft?2Windows?2Curre@
CONST	SEGMENT
??_C@_0DK@IFNHFOHB@Software?2Microsoft?2Windows?2Curre@ DB 'Software\Micr'
	DB	'osoft\Windows\CurrentVersion\Policies\System', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@
CONST	SEGMENT
??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@ DB '\??\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@
CONST	SEGMENT
??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@ DB 'UNMOUNT_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@
CONST	SEGMENT
??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@ DB 'UNMOUNT_LOCK_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@
CONST	SEGMENT
??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@ DB 'ASK_REMOVE_DEVIC'
	DB	'E_WRITE_PROTECTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@
CONST	SEGMENT
??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@ DB '\Device\HarddiskVolu'
	DB	'me', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@
CONST	SEGMENT
??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@ DB 'MOUNTED_DEVICE_F'
	DB	'ORCED_READ_ONLY_WRITE_PROTECTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
CONST	SEGMENT
??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@ DB '\Device\Harddisk', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@
CONST	SEGMENT
??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@ DB 'MOUNTED_DEVIC'
	DB	'E_FORCED_READ_ONLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@
CONST	SEGMENT
??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@ DB 'MOUNTED_CONTAINE'
	DB	'R_FORCED_READ_ONLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@
CONST	SEGMENT
??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@ DB 'MOUNTED_VOLUME_DIRTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@
CONST	SEGMENT
??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@ DB 'HEADER_DAMAGED_A'
	DB	'UTO_USED_HEADER_BAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@ DB 0aH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@
CONST	SEGMENT
??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@ DB 'HIDDEN_VOL_PROT_'
	DB	'PASSWORD_US_KEYB_LAYOUT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'k', 00H, '%', 00H, 'd', 00H, '\', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
CONST	SEGMENT
??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@ DB '\Device\Ha'
	DB	'rddisk%d\Partition', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@
CONST	SEGMENT
??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@ DB 'FILE_IN_USE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@
CONST	SEGMENT
??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@ DB 'FILE_IN_USE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'k', 00H, '%', 00H, 'd', 00H, '\', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDDIGDHP@UNC?$AA@
CONST	SEGMENT
??_C@_03IDDIGDHP@UNC?$AA@ DB 'UNC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HDBGODGB@?2?2?$AA@
CONST	SEGMENT
??_C@_02HDBGODGB@?2?2?$AA@ DB '\\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EKJJMPLG@?$HN?2?$AA@
CONST	SEGMENT
??_C@_02EKJJMPLG@?$HN?2?$AA@ DB '}\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HBPFMAGN@Volume?$HL?$AA@
CONST	SEGMENT
??_C@_07HBPFMAGN@Volume?$HL?$AA@ DB 'Volume{', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
CONST	SEGMENT
??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@ DB '\\?\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@
CONST	SEGMENT
??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@ DB 'DRIVE_LETTER_UNAVAIL'
	DB	'ABLE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMECODII@?$CFls?$CFc?$AA@
CONST	SEGMENT
??_C@_05EMECODII@?$CFls?$CFc?$AA@ DB '%ls%c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@HFFKBABD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HFFKBABD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@ DB '\'
	DB	00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'\', 00H, 'G', 00H, 'o', 00H, 's', 00H, 't', 00H, 'C', 00H, 'r'
	DB	00H, 'y', 00H, 'p', 00H, 't', 00H, 'V', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GKKCJKIH@?47z?$AA@
CONST	SEGMENT
??_C@_03GKKCJKIH@?47z?$AA@ DB '.7z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLJHFACG@?4zip?$AA@
CONST	SEGMENT
??_C@_04CLJHFACG@?4zip?$AA@ DB '.zip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GAOAGNCM@?4xml?$AA@
CONST	SEGMENT
??_C@_04GAOAGNCM@?4xml?$AA@ DB '.xml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPMOFKN@?4xl?$AA@
CONST	SEGMENT
??_C@_03NPMOFKN@?4xl?$AA@ DB '.xl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NODIJKHD@?4xhtml?$AA@
CONST	SEGMENT
??_C@_06NODIJKHD@?4xhtml?$AA@ DB '.xhtml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHAAJLJO@?4xhtm?$AA@
CONST	SEGMENT
??_C@_05MHAAJLJO@?4xhtm?$AA@ DB '.xhtm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGHDMNBL@?4wwk?$AA@
CONST	SEGMENT
??_C@_04GGHDMNBL@?4wwk?$AA@ DB '.wwk', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLOFFBJG@?4wpc?$AA@
CONST	SEGMENT
??_C@_04KLOFFBJG@?4wpc?$AA@ DB '.wpc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEBLMIKN@?4wmz?$AA@
CONST	SEGMENT
??_C@_04CEBLMIKN@?4wmz?$AA@ DB '.wmz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFNJHDOE@?4wms?$AA@
CONST	SEGMENT
??_C@_04PFNJHDOE@?4wms?$AA@ DB '.wms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCGMJFPA@?4wmf?$AA@
CONST	SEGMENT
??_C@_04MCGMJFPA@?4wmf?$AA@ DB '.wmf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PAFKPHHC@?4wmd?$AA@
CONST	SEGMENT
??_C@_04PAFKPHHC@?4wmd?$AA@ DB '.wmd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJEBBHEN@?4wll?$AA@
CONST	SEGMENT
??_C@_04DJEBBHEN@?4wll?$AA@ DB '.wll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CDBCGAHB@?4wiz?$AA@
CONST	SEGMENT
??_C@_04CDBCGAHB@?4wiz?$AA@ DB '.wiz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPPCIEH@?4vxo?$AA@
CONST	SEGMENT
??_C@_04LBPPCIEH@?4vxo?$AA@ DB '.vxo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FCALPBIM@?4vxd?$AA@
CONST	SEGMENT
??_C@_04FCALPBIM@?4vxd?$AA@ DB '.vxd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIOGEBGJ@?4vlm?$AA@
CONST	SEGMENT
??_C@_04JIOGEBGJ@?4vlm?$AA@ DB '.vlm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHPLDJIL@?4vcs?$AA@
CONST	SEGMENT
??_C@_04EHPLDJIL@?4vcs?$AA@ DB '.vcs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDCOKCOB@?4ttf?$AA@
CONST	SEGMENT
??_C@_04MDCOKCOB@?4ttf?$AA@ DB '.ttf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MMEBIPMJ@?4tmp?$AA@
CONST	SEGMENT
??_C@_04MMEBIPMJ@?4tmp?$AA@ DB '.tmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLDJOCJF@?4tgz?$AA@
CONST	SEGMENT
??_C@_04DLDJOCJF@?4tgz?$AA@ DB '.tgz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHGNBECP@?4tar?$AA@
CONST	SEGMENT
??_C@_04PHGNBECP@?4tar?$AA@ DB '.tar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FMLPCEAB@?4swf?$AA@
CONST	SEGMENT
??_C@_04FMLPCEAB@?4swf?$AA@ DB '.swf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDBPNKAO@?4spl?$AA@
CONST	SEGMENT
??_C@_04KDBPNKAO@?4spl?$AA@ DB '.spl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEPPGKLA@?4shtml?$AA@
CONST	SEGMENT
??_C@_06LEPPGKLA@?4shtml?$AA@ DB '.shtml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LANAKKIP@?4shtm?$AA@
CONST	SEGMENT
??_C@_05LANAKKIP@?4shtm?$AA@ DB '.shtm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIEFGIL@?4sha?$AA@
CONST	SEGMENT
??_C@_04EIEFGIL@?4sha?$AA@ DB '.sha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GFMFMPEI@?4sh?$AA@
CONST	SEGMENT
??_C@_03GFMFMPEI@?4sh?$AA@ DB '.sh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPDIDE@?4script?$AA@
CONST	SEGMENT
??_C@_07PPFPDIDE@?4script?$AA@ DB '.script', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGFCEFJK@?4sbf?$AA@
CONST	SEGMENT
??_C@_04EGFCEFJK@?4sbf?$AA@ DB '.sbf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGEFPNDN@?4rtf?$AA@
CONST	SEGMENT
??_C@_04OGEFPNDN@?4rtf?$AA@ DB '.rtf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BLKDLNGL@?4rpl?$AA@
CONST	SEGMENT
??_C@_04BLKDLNGL@?4rpl?$AA@ DB '.rpl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NCAGELPD@?4rar?$AA@
CONST	SEGMENT
??_C@_04NCAGELPD@?4rar?$AA@ DB '.rar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPAPKHGM@?4psc1?$AA@
CONST	SEGMENT
??_C@_05HPAPKHGM@?4psc1?$AA@ DB '.psc1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMHCJKCL@?4ps1xml?$AA@
CONST	SEGMENT
??_C@_07KMHCJKCL@?4ps1xml?$AA@ DB '.ps1xml', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMPJOIKA@?4ps1?$AA@
CONST	SEGMENT
??_C@_04LMPJOIKA@?4ps1?$AA@ DB '.ps1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDLBONLJ@?4ppt?$AA@
CONST	SEGMENT
??_C@_04DDLBONLJ@?4ppt?$AA@ DB '.ppt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMPAHLHO@?4pps?$AA@
CONST	SEGMENT
??_C@_04HMPAHLHO@?4pps?$AA@ DB '.pps', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEMLAJPE@?4pot?$AA@
CONST	SEGMENT
??_C@_04CEMLAJPE@?4pot?$AA@ DB '.pot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEOGCCFB@?4png?$AA@
CONST	SEGMENT
??_C@_04EEOGCCFB@?4png?$AA@ DB '.png', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DOPLEBF@?4pl?$AA@
CONST	SEGMENT
??_C@_03DOPLEBF@?4pl?$AA@ DB '.pl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ECCNOALK@?4pkg?$AA@
CONST	SEGMENT
??_C@_04ECCNOALK@?4pkg?$AA@ DB '.pkg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFOINKHF@?4php?$AA@
CONST	SEGMENT
??_C@_04EFOINKHF@?4php?$AA@ DB '.php', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBNIPBFE@?4pgm?$AA@
CONST	SEGMENT
??_C@_04LBNIPBFE@?4pgm?$AA@ DB '.pgm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOMEEBJD@?4pdr?$AA@
CONST	SEGMENT
??_C@_04HOMEEBJD@?4pdr?$AA@ DB '.pdr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJBMHBEE@?4ovr?$AA@
CONST	SEGMENT
??_C@_04GJBMHBEE@?4ovr?$AA@ DB '.ovr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNFNEOJL@?4ovl?$AA@
CONST	SEGMENT
??_C@_04LNFNEOJL@?4ovl?$AA@ DB '.ovl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAHOAPAA@?4ov3?$AA@
CONST	SEGMENT
??_C@_04IAHOAPAA@?4ov3?$AA@ DB '.ov3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJGFDOEB@?4ov2?$AA@
CONST	SEGMENT
??_C@_04JJGFDOEB@?4ov2?$AA@ DB '.ov2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCEIGNIC@?4ov1?$AA@
CONST	SEGMENT
??_C@_04LCEIGNIC@?4ov1?$AA@ DB '.ov1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDEPAGHI@?4osd?$AA@
CONST	SEGMENT
??_C@_04HDEPAGHI@?4osd?$AA@ DB '.osd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCGPEFLD@?4olb?$AA@
CONST	SEGMENT
??_C@_04DCGPEFLD@?4olb?$AA@ DB '.olb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PACIOCLB@?4obj?$AA@
CONST	SEGMENT
??_C@_04PACIOCLB@?4obj?$AA@ DB '.obj', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJHJENFH@?4nws?$AA@
CONST	SEGMENT
??_C@_04MJHJENFH@?4nws?$AA@ DB '.nws', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MMHKJEOH@?4mod?$AA@
CONST	SEGMENT
??_C@_04MMHKJEOH@?4mod?$AA@ DB '.mod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPFEHOMD@?4lsp?$AA@
CONST	SEGMENT
??_C@_04EPFEHOMD@?4lsp?$AA@ DB '.lsp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNPKBLNA@?4jpg?$AA@
CONST	SEGMENT
??_C@_04GNPKBLNA@?4jpg?$AA@ DB '.jpg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPIGABMB@?4jpeg?$AA@
CONST	SEGMENT
??_C@_05KPIGABMB@?4jpeg?$AA@ DB '.jpeg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPMMHJFC@?4jpe?$AA@
CONST	SEGMENT
??_C@_04FPMMHJFC@?4jpe?$AA@ DB '.jpe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKDGLCMB@?4jp2?$AA@
CONST	SEGMENT
??_C@_04KKDGLCMB@?4jp2?$AA@ DB '.jp2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLECJFKK@?4jng?$AA@
CONST	SEGMENT
??_C@_04HLECJFKK@?4jng?$AA@ DB '.jng', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POJMDHDM@?4jmh?$AA@
CONST	SEGMENT
??_C@_04POJMDHDM@?4jmh?$AA@ DB '.jmh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHBGLCGO@?4jif?$AA@
CONST	SEGMENT
??_C@_04GHBGLCGO@?4jif?$AA@ DB '.jif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMEKPFFD@?4jff?$AA@
CONST	SEGMENT
??_C@_04GMEKPFFD@?4jff?$AA@ DB '.jff', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHKLDEID@?4jar?$AA@
CONST	SEGMENT
??_C@_04EHKLDEID@?4jar?$AA@ DB '.jar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCFBANHC@?4j2k?$AA@
CONST	SEGMENT
??_C@_04LCFBANHC@?4j2k?$AA@ DB '.j2k', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHHEBHMK@?4ini?$AA@
CONST	SEGMENT
??_C@_04PHHEBHMK@?4ini?$AA@ DB '.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHMDENIF@?4html?$AA@
CONST	SEGMENT
??_C@_05LHMDENIF@?4html?$AA@ DB '.html', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DKBFJDAN@?4htm?$AA@
CONST	SEGMENT
??_C@_04DKBFJDAN@?4htm?$AA@ DB '.htm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GBOLEDH@?4gz?$AA@
CONST	SEGMENT
??_C@_03GBOLEDH@?4gz?$AA@ DB '.gz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBLJABLH@?4fot?$AA@
CONST	SEGMENT
??_C@_04FBLJABLH@?4fot?$AA@ DB '.fot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDPPLPOO@?4flt?$AA@
CONST	SEGMENT
??_C@_04FDPPLPOO@?4flt?$AA@ DB '.flt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCJDOCGO@?4eml?$AA@
CONST	SEGMENT
??_C@_04MCJDOCGO@?4eml?$AA@ DB '.eml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIHMAKOE@?4emf?$AA@
CONST	SEGMENT
??_C@_04DIHMAKOE@?4emf?$AA@ DB '.emf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAMALMPP@?4dlo?$AA@
CONST	SEGMENT
??_C@_04FAMALMPP@?4dlo?$AA@ DB '.dlo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKCMFIJD@?4dhtml?$AA@
CONST	SEGMENT
??_C@_06KKCMFIJD@?4dhtml?$AA@ DB '.dhtml', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GCBAOBBN@?4dhtm?$AA@
CONST	SEGMENT
??_C@_05GCBAOBBN@?4dhtm?$AA@ DB '.dhtm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06POIMOJKC@?4class?$AA@
CONST	SEGMENT
??_C@_06POIMOJKC@?4class?$AA@ DB '.class', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCMGGOLH@?4cdf?$AA@
CONST	SEGMENT
??_C@_04BCMGGOLH@?4cdf?$AA@ DB '.cdf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCBFBPPI@?4bz2?$AA@
CONST	SEGMENT
??_C@_04GCBFBPPI@?4bz2?$AA@ DB '.bz2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHONFNHK@?4boo?$AA@
CONST	SEGMENT
??_C@_04HHONFNHK@?4boo?$AA@ DB '.boo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCOOIEMK@?4awx?$AA@
CONST	SEGMENT
??_C@_04HCOOIEMK@?4awx?$AA@ DB '.awx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HFOHCMBG@?4asx?$AA@
CONST	SEGMENT
??_C@_04HFOHCMBG@?4asx?$AA@ DB '.asx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBKGBDMJ@?4asf?$AA@
CONST	SEGMENT
??_C@_04KBKGBDMJ@?4asf?$AA@ DB '.asf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDJAHBEL@?4asd?$AA@
CONST	SEGMENT
??_C@_04JDJAHBEL@?4asd?$AA@ DB '.asd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPHIBIEH@?4app?$AA@
CONST	SEGMENT
??_C@_04LPHIBIEH@?4app?$AA@ DB '.app', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCMADPCF@?4ani?$AA@
CONST	SEGMENT
??_C@_04DCMADPCF@?4ani?$AA@ DB '.ani', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KEFHBDOL@?4adp?$AA@
CONST	SEGMENT
??_C@_04KEFHBDOL@?4adp?$AA@ DB '.adp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDOCPFPP@?4ade?$AA@
CONST	SEGMENT
??_C@_04JDOCPFPP@?4ade?$AA@ DB '.ade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOHEGJHC@?4acm?$AA@
CONST	SEGMENT
??_C@_04FOHEGJHC@?4acm?$AA@ DB '.acm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNGOLJF@?4386?$AA@
CONST	SEGMENT
??_C@_04GNGOLJF@?4386?$AA@ DB '.386', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGFIODFG@?4xsl?$AA@
CONST	SEGMENT
??_C@_04HGFIODFG@?4xsl?$AA@ DB '.xsl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOIBGJFO@?4xsd?$AA@
CONST	SEGMENT
??_C@_04LOIBGJFO@?4xsd?$AA@ DB '.xsd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKFHDGAE@?4wsh?$AA@
CONST	SEGMENT
??_C@_04EKFHDGAE@?4wsh?$AA@ DB '.wsh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NENEBLIK@?4wsf?$AA@
CONST	SEGMENT
??_C@_04NENEBLIK@?4wsf?$AA@ DB '.wsf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJKDOPMP@?4wsc?$AA@
CONST	SEGMENT
??_C@_04KJKDOPMP@?4wsc?$AA@ DB '.wsc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLPKKMAO@?4ws?$AA@
CONST	SEGMENT
??_C@_03MLPKKMAO@?4ws?$AA@ DB '.ws', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DPLBFPPP@?4vsw?$AA@
CONST	SEGMENT
??_C@_04DPLBFPPP@?4vsw?$AA@ DB '.vsw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEJMAMDM@?4vst?$AA@
CONST	SEGMENT
??_C@_04BEJMAMDM@?4vst?$AA@ DB '.vst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLNNJKPL@?4vss?$AA@
CONST	SEGMENT
??_C@_04FLNNJKPL@?4vss?$AA@ DB '.vss', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNHDLKLO@?4vsmacros?$AA@
CONST	SEGMENT
??_C@_09JNHDLKLO@?4vsmacros?$AA@ DB '.vsmacros', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EGDJFDLM@?4vbs?$AA@
CONST	SEGMENT
??_C@_04EGDJFDLM@?4vbs?$AA@ DB '.vbs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKKBOGGL@?4vbe?$AA@
CONST	SEGMENT
??_C@_04FKKBOGGL@?4vbe?$AA@ DB '.vbe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JJOBOFCJ@?4vb?$AA@
CONST	SEGMENT
??_C@_03JJOBOFCJ@?4vb?$AA@ DB '.vb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFPAFBLM@?4url?$AA@
CONST	SEGMENT
??_C@_04IFPAFBLM@?4url?$AA@ DB '.url', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKPJABLD@?4tsp?$AA@
CONST	SEGMENT
??_C@_04NKPJABLD@?4tsp?$AA@ DB '.tsp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFHHJFCN@?4tlb?$AA@
CONST	SEGMENT
??_C@_04LFHHJFCN@?4tlb?$AA@ DB '.tlb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBJEOPBP@?4sys?$AA@
CONST	SEGMENT
??_C@_04GBJEOPBP@?4sys?$AA@ DB '.sys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMHACGFI@?4shs?$AA@
CONST	SEGMENT
??_C@_04HMHACGFI@?4shs?$AA@ DB '.shs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPKJAFEI@?4shb?$AA@
CONST	SEGMENT
??_C@_04CPKJAFEI@?4shb?$AA@ DB '.shb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DPGEFPHO@?4sct?$AA@
CONST	SEGMENT
??_C@_04DPGEFPHO@?4sct?$AA@ DB '.sct', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJDOPIPI@?4scr?$AA@
CONST	SEGMENT
??_C@_04GJDOPIPI@?4scr?$AA@ DB '.scr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHJACPKN@?4scf?$AA@
CONST	SEGMENT
??_C@_04EHJACPKN@?4scf?$AA@ DB '.scf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCLKAFDL@?4reg?$AA@
CONST	SEGMENT
??_C@_04OCLKAFDL@?4reg?$AA@ DB '.reg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBPHFDOA@?4pst?$AA@
CONST	SEGMENT
??_C@_04DBPHFDOA@?4pst?$AA@ DB '.pst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBNKHIEF@?4prg?$AA@
CONST	SEGMENT
??_C@_04FBNKHIEF@?4prg?$AA@ DB '.prg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIMBEJAE@?4prf?$AA@
CONST	SEGMENT
??_C@_04EIMBEJAE@?4prf?$AA@ DB '.prf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FILCAFJF@?4pif?$AA@
CONST	SEGMENT
??_C@_04FILCAFJF@?4pif?$AA@ DB '.pif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHBDOCMB@?4pcd?$AA@
CONST	SEGMENT
??_C@_04GHBDOCMB@?4pcd?$AA@ DB '.pcd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KMEOLMKH@?4pal?$AA@
CONST	SEGMENT
??_C@_04KMEOLMKH@?4pal?$AA@ DB '.pal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HEIKDMLH@?4ops?$AA@
CONST	SEGMENT
??_C@_04HEIKDMLH@?4ops?$AA@ DB '.ops', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJBOPIFF@?4ocx?$AA@
CONST	SEGMENT
??_C@_04IJBOPIFF@?4ocx?$AA@ DB '.ocx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NJAKABMG@?4nls?$AA@
CONST	SEGMENT
??_C@_04NJAKABMG@?4nls?$AA@ DB '.nls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIGFMMAM@?4mui?$AA@
CONST	SEGMENT
??_C@_04GIGFMMAM@?4mui?$AA@ DB '.mui', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDIENMKC@?4mst?$AA@
CONST	SEGMENT
??_C@_04JDIENMKC@?4mst?$AA@ DB '.mst', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHOIBJKG@?4msp?$AA@
CONST	SEGMENT
??_C@_04PHOIBJKG@?4msp?$AA@ DB '.msp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMOILALO@?4msi?$AA@
CONST	SEGMENT
??_C@_04GMOILALO@?4msi?$AA@ DB '.msi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JGAHFIDE@?4msc?$AA@
CONST	SEGMENT
??_C@_04JGAHFIDE@?4msc?$AA@ DB '.msc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEGOEENJ@?4mdz?$AA@
CONST	SEGMENT
??_C@_04BEGOEENJ@?4mdz?$AA@ DB '.mdz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBMADKJE@?4mdw?$AA@
CONST	SEGMENT
??_C@_04KBMADKJE@?4mdw?$AA@ DB '.mdw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IKONGJFH@?4mdt?$AA@
CONST	SEGMENT
??_C@_04IKONGJFH@?4mdt?$AA@ DB '.mdt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NJDEEKEH@?4mde?$AA@
CONST	SEGMENT
??_C@_04NJDEEKEH@?4mde?$AA@ DB '.mde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JGHFNMIA@?4mdb?$AA@
CONST	SEGMENT
??_C@_04JGHFNMIA@?4mdb?$AA@ DB '.mdb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNFIIPED@?4mda?$AA@
CONST	SEGMENT
??_C@_04LNFIIPED@?4mda?$AA@ DB '.mda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KHALPIHP@?4maw?$AA@
CONST	SEGMENT
??_C@_04KHALPIHP@?4maw?$AA@ DB '.maw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOBAMJDO@?4mav?$AA@
CONST	SEGMENT
??_C@_04LOBAMJDO@?4mav?$AA@ DB '.mav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFDNJKPN@?4mau?$AA@
CONST	SEGMENT
??_C@_04JFDNJKPN@?4mau?$AA@ DB '.mau', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMCGKLLM@?4mat?$AA@
CONST	SEGMENT
??_C@_04IMCGKLLM@?4mat?$AA@ DB '.mat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDGHDNHL@?4mas?$AA@
CONST	SEGMENT
??_C@_04MDGHDNHL@?4mas?$AA@ DB '.mas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKHMAMDK@?4mar?$AA@
CONST	SEGMENT
??_C@_04NKHMAMDK@?4mar?$AA@ DB '.mar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBFBFPPJ@?4maq?$AA@
CONST	SEGMENT
??_C@_04PBFBFPPJ@?4maq?$AA@ DB '.maq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DMALFBGH@?4man?$AA@
CONST	SEGMENT
??_C@_04DMALFBGH@?4man?$AA@ DB '.man', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BHCGACKE@?4mam?$AA@
CONST	SEGMENT
??_C@_04BHCGACKE@?4mam?$AA@ DB '.mam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONMJOKCO@?4mag?$AA@
CONST	SEGMENT
??_C@_04ONMJOKCO@?4mag?$AA@ DB '.mag', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PENCNLGP@?4maf?$AA@
CONST	SEGMENT
??_C@_04PENCNLGP@?4maf?$AA@ DB '.maf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGOELJON@?4mad?$AA@
CONST	SEGMENT
??_C@_04MGOELJON@?4mad?$AA@ DB '.mad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCJMIFHK@?4lnk?$AA@
CONST	SEGMENT
??_C@_04PCJMIFHK@?4lnk?$AA@ DB '.lnk', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAJINOCD@?4ksh?$AA@
CONST	SEGMENT
??_C@_04FAJINOCD@?4ksh?$AA@ DB '.ksh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNIKMHAL@?4jse?$AA@
CONST	SEGMENT
??_C@_04FNIKMHAL@?4jse?$AA@ DB '.jse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPAEJMCN@?4js?$AA@
CONST	SEGMENT
??_C@_03NPAEJMCN@?4js?$AA@ DB '.js', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGOIMLLH@?4its?$AA@
CONST	SEGMENT
??_C@_04FGOIMLLH@?4its?$AA@ DB '.its', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIIKIOPB@?4isp?$AA@
CONST	SEGMENT
??_C@_04HIIKIOPB@?4isp?$AA@ DB '.isp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHFJONBB@?4ins?$AA@
CONST	SEGMENT
??_C@_04EHFJONBB@?4ins?$AA@ DB '.ins', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HAOMALAF@?4inf?$AA@
CONST	SEGMENT
??_C@_04HAOMALAF@?4inf?$AA@ DB '.inf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJIHOGJP@?4ime?$AA@
CONST	SEGMENT
??_C@_04FJIHOGJP@?4ime?$AA@ DB '.ime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JGKANMAB@?4hta?$AA@
CONST	SEGMENT
??_C@_04JGKANMAB@?4hta?$AA@ DB '.hta', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHEMANNJ@?4hlp?$AA@
CONST	SEGMENT
??_C@_04NHEMANNJ@?4hlp?$AA@ DB '.hlp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIAFODPJ@?4h1s?$AA@
CONST	SEGMENT
??_C@_04JIAFODPJ@?4h1s?$AA@ DB '.h1s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JJJHJDPF@?4grp?$AA@
CONST	SEGMENT
??_C@_04JJJHJDPF@?4grp?$AA@ DB '.grp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CMLMHBEG@?4fxp?$AA@
CONST	SEGMENT
??_C@_04CMLMHBEG@?4fxp?$AA@ DB '.fxp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLMDILM@?4exe?$AA@
CONST	SEGMENT
??_C@_04JLMDILM@?4exe?$AA@ DB '.exe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBABJHPM@?4dtd?$AA@
CONST	SEGMENT
??_C@_04KBABJHPM@?4dtd?$AA@ DB '.dtd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNHIJLJN@?4drv?$AA@
CONST	SEGMENT
??_C@_04NNHIJLJN@?4drv?$AA@ DB '.drv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLONOPDM@?4dll?$AA@
CONST	SEGMENT
??_C@_04HLONOPDM@?4dll?$AA@ DB '.dll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFCMPGMM@?4csh?$AA@
CONST	SEGMENT
??_C@_04JFCMPGMM@?4csh?$AA@ DB '.csh', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCJJMBKG@?4crt?$AA@
CONST	SEGMENT
??_C@_04HCJJMBKG@?4crt?$AA@ DB '.crt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNKIFKME@?4cpx?$AA@
CONST	SEGMENT
??_C@_04NNKIFKME@?4cpx?$AA@ DB '.cpx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PDAGINJB@?4cpl?$AA@
CONST	SEGMENT
??_C@_04PDAGINJB@?4cpl?$AA@ DB '.cpl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNGHFIJN@?4com?$AA@
CONST	SEGMENT
??_C@_04PNGHFIJN@?4com?$AA@ DB '.com', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFJDPJDA@?4cnv?$AA@
CONST	SEGMENT
??_C@_04FFJDPJDA@?4cnv?$AA@ DB '.cnv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHKFJLLC@?4cnt?$AA@
CONST	SEGMENT
??_C@_04GHKFJLLC@?4cnt?$AA@ DB '.cnt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPCBDHLK@?4cmd?$AA@
CONST	SEGMENT
??_C@_04CPCBDHLK@?4cmd?$AA@ DB '.cmd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HILJPKAL@?4clb?$AA@
CONST	SEGMENT
??_C@_04HILJPKAL@?4clb?$AA@ DB '.clb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PICIEOBI@?4chm?$AA@
CONST	SEGMENT
??_C@_04PICIEOBI@?4chm?$AA@ DB '.chm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNKKNDNF@?4cer?$AA@
CONST	SEGMENT
??_C@_04DNKKNDNF@?4cer?$AA@ DB '.cer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKHLBAIJ@?4bin?$AA@
CONST	SEGMENT
??_C@_04GKHLBAIJ@?4bin?$AA@ DB '.bin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEEFLLOK@?4bat?$AA@
CONST	SEGMENT
??_C@_04NEEFLLOK@?4bat?$AA@ DB '.bat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLAECNCN@?4bas?$AA@
CONST	SEGMENT
??_C@_04JLAECNCN@?4bas?$AA@ DB '.bas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAKFKKAH@?4ax?$AA@
CONST	SEGMENT
??_C@_03DAKFKKAH@?4ax?$AA@ DB '.ax', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNFEPADL@?4aspx?$AA@
CONST	SEGMENT
??_C@_05BNFEPADL@?4aspx?$AA@ DB '.aspx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNDOKGBO@?4asp?$AA@
CONST	SEGMENT
??_C@_04LNDOKGBO@?4asp?$AA@ DB '.asp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOOHIFAO@?4asa?$AA@
CONST	SEGMENT
??_C@_04OOOHIFAO@?4asa?$AA@ DB '.asa', 00H		; `string'
CONST	ENDS
;	COMDAT ?problemFileExt@?1??CheckFileExtension@@9@4PAPADA
_DATA	SEGMENT
?problemFileExt@?1??CheckFileExtension@@9@4PAPADA DD FLAT:??_C@_04OOOHIFAO@?4asa?$AA@ ; `CheckFileExtension'::`2'::problemFileExt
	DD	FLAT:??_C@_04LNDOKGBO@?4asp?$AA@
	DD	FLAT:??_C@_05BNFEPADL@?4aspx?$AA@
	DD	FLAT:??_C@_03DAKFKKAH@?4ax?$AA@
	DD	FLAT:??_C@_04JLAECNCN@?4bas?$AA@
	DD	FLAT:??_C@_04NEEFLLOK@?4bat?$AA@
	DD	FLAT:??_C@_04GKHLBAIJ@?4bin?$AA@
	DD	FLAT:??_C@_04DNKKNDNF@?4cer?$AA@
	DD	FLAT:??_C@_04PICIEOBI@?4chm?$AA@
	DD	FLAT:??_C@_04HILJPKAL@?4clb?$AA@
	DD	FLAT:??_C@_04CPCBDHLK@?4cmd?$AA@
	DD	FLAT:??_C@_04GHKFJLLC@?4cnt?$AA@
	DD	FLAT:??_C@_04FFJDPJDA@?4cnv?$AA@
	DD	FLAT:??_C@_04PNGHFIJN@?4com?$AA@
	DD	FLAT:??_C@_04PDAGINJB@?4cpl?$AA@
	DD	FLAT:??_C@_04NNKIFKME@?4cpx?$AA@
	DD	FLAT:??_C@_04HCJJMBKG@?4crt?$AA@
	DD	FLAT:??_C@_04JFCMPGMM@?4csh?$AA@
	DD	FLAT:??_C@_04HLONOPDM@?4dll?$AA@
	DD	FLAT:??_C@_04NNHIJLJN@?4drv?$AA@
	DD	FLAT:??_C@_04KBABJHPM@?4dtd?$AA@
	DD	FLAT:??_C@_04JLMDILM@?4exe?$AA@
	DD	FLAT:??_C@_04CMLMHBEG@?4fxp?$AA@
	DD	FLAT:??_C@_04JJJHJDPF@?4grp?$AA@
	DD	FLAT:??_C@_04JIAFODPJ@?4h1s?$AA@
	DD	FLAT:??_C@_04NHEMANNJ@?4hlp?$AA@
	DD	FLAT:??_C@_04JGKANMAB@?4hta?$AA@
	DD	FLAT:??_C@_04FJIHOGJP@?4ime?$AA@
	DD	FLAT:??_C@_04HAOMALAF@?4inf?$AA@
	DD	FLAT:??_C@_04EHFJONBB@?4ins?$AA@
	DD	FLAT:??_C@_04HIIKIOPB@?4isp?$AA@
	DD	FLAT:??_C@_04FGOIMLLH@?4its?$AA@
	DD	FLAT:??_C@_03NPAEJMCN@?4js?$AA@
	DD	FLAT:??_C@_04FNIKMHAL@?4jse?$AA@
	DD	FLAT:??_C@_04FAJINOCD@?4ksh?$AA@
	DD	FLAT:??_C@_04PCJMIFHK@?4lnk?$AA@
	DD	FLAT:??_C@_04MGOELJON@?4mad?$AA@
	DD	FLAT:??_C@_04PENCNLGP@?4maf?$AA@
	DD	FLAT:??_C@_04ONMJOKCO@?4mag?$AA@
	DD	FLAT:??_C@_04BHCGACKE@?4mam?$AA@
	DD	FLAT:??_C@_04DMALFBGH@?4man?$AA@
	DD	FLAT:??_C@_04PBFBFPPJ@?4maq?$AA@
	DD	FLAT:??_C@_04NKHMAMDK@?4mar?$AA@
	DD	FLAT:??_C@_04MDGHDNHL@?4mas?$AA@
	DD	FLAT:??_C@_04IMCGKLLM@?4mat?$AA@
	DD	FLAT:??_C@_04JFDNJKPN@?4mau?$AA@
	DD	FLAT:??_C@_04LOBAMJDO@?4mav?$AA@
	DD	FLAT:??_C@_04KHALPIHP@?4maw?$AA@
	DD	FLAT:??_C@_04LNFIIPED@?4mda?$AA@
	DD	FLAT:??_C@_04JGHFNMIA@?4mdb?$AA@
	DD	FLAT:??_C@_04NJDEEKEH@?4mde?$AA@
	DD	FLAT:??_C@_04IKONGJFH@?4mdt?$AA@
	DD	FLAT:??_C@_04KBMADKJE@?4mdw?$AA@
	DD	FLAT:??_C@_04BEGOEENJ@?4mdz?$AA@
	DD	FLAT:??_C@_04JGAHFIDE@?4msc?$AA@
	DD	FLAT:??_C@_04GMOILALO@?4msi?$AA@
	DD	FLAT:??_C@_04PHOIBJKG@?4msp?$AA@
	DD	FLAT:??_C@_04JDIENMKC@?4mst?$AA@
	DD	FLAT:??_C@_04GIGFMMAM@?4mui?$AA@
	DD	FLAT:??_C@_04NJAKABMG@?4nls?$AA@
	DD	FLAT:??_C@_04IJBOPIFF@?4ocx?$AA@
	DD	FLAT:??_C@_04HEIKDMLH@?4ops?$AA@
	DD	FLAT:??_C@_04KMEOLMKH@?4pal?$AA@
	DD	FLAT:??_C@_04GHBDOCMB@?4pcd?$AA@
	DD	FLAT:??_C@_04FILCAFJF@?4pif?$AA@
	DD	FLAT:??_C@_04EIMBEJAE@?4prf?$AA@
	DD	FLAT:??_C@_04FBNKHIEF@?4prg?$AA@
	DD	FLAT:??_C@_04DBPHFDOA@?4pst?$AA@
	DD	FLAT:??_C@_04OCLKAFDL@?4reg?$AA@
	DD	FLAT:??_C@_04EHJACPKN@?4scf?$AA@
	DD	FLAT:??_C@_04GJDOPIPI@?4scr?$AA@
	DD	FLAT:??_C@_04DPGEFPHO@?4sct?$AA@
	DD	FLAT:??_C@_04CPKJAFEI@?4shb?$AA@
	DD	FLAT:??_C@_04HMHACGFI@?4shs?$AA@
	DD	FLAT:??_C@_04GBJEOPBP@?4sys?$AA@
	DD	FLAT:??_C@_04LFHHJFCN@?4tlb?$AA@
	DD	FLAT:??_C@_04NKPJABLD@?4tsp?$AA@
	DD	FLAT:??_C@_04IFPAFBLM@?4url?$AA@
	DD	FLAT:??_C@_03JJOBOFCJ@?4vb?$AA@
	DD	FLAT:??_C@_04FKKBOGGL@?4vbe?$AA@
	DD	FLAT:??_C@_04EGDJFDLM@?4vbs?$AA@
	DD	FLAT:??_C@_09JNHDLKLO@?4vsmacros?$AA@
	DD	FLAT:??_C@_04FLNNJKPL@?4vss?$AA@
	DD	FLAT:??_C@_04BEJMAMDM@?4vst?$AA@
	DD	FLAT:??_C@_04DPLBFPPP@?4vsw?$AA@
	DD	FLAT:??_C@_03MLPKKMAO@?4ws?$AA@
	DD	FLAT:??_C@_04KJKDOPMP@?4wsc?$AA@
	DD	FLAT:??_C@_04NENEBLIK@?4wsf?$AA@
	DD	FLAT:??_C@_04EKFHDGAE@?4wsh?$AA@
	DD	FLAT:??_C@_04LOIBGJFO@?4xsd?$AA@
	DD	FLAT:??_C@_04HGFIODFG@?4xsl?$AA@
	DD	FLAT:??_C@_04GNGOLJF@?4386?$AA@
	DD	FLAT:??_C@_04FOHEGJHC@?4acm?$AA@
	DD	FLAT:??_C@_04JDOCPFPP@?4ade?$AA@
	DD	FLAT:??_C@_04KEFHBDOL@?4adp?$AA@
	DD	FLAT:??_C@_04DCMADPCF@?4ani?$AA@
	DD	FLAT:??_C@_04LPHIBIEH@?4app?$AA@
	DD	FLAT:??_C@_04JDJAHBEL@?4asd?$AA@
	DD	FLAT:??_C@_04KBKGBDMJ@?4asf?$AA@
	DD	FLAT:??_C@_04HFOHCMBG@?4asx?$AA@
	DD	FLAT:??_C@_04HCOOIEMK@?4awx?$AA@
	DD	FLAT:??_C@_03DAKFKKAH@?4ax?$AA@
	DD	FLAT:??_C@_04HHONFNHK@?4boo?$AA@
	DD	FLAT:??_C@_04GCBFBPPI@?4bz2?$AA@
	DD	FLAT:??_C@_04BCMGGOLH@?4cdf?$AA@
	DD	FLAT:??_C@_06POIMOJKC@?4class?$AA@
	DD	FLAT:??_C@_05GCBAOBBN@?4dhtm?$AA@
	DD	FLAT:??_C@_06KKCMFIJD@?4dhtml?$AA@
	DD	FLAT:??_C@_04FAMALMPP@?4dlo?$AA@
	DD	FLAT:??_C@_04DIHMAKOE@?4emf?$AA@
	DD	FLAT:??_C@_04MCJDOCGO@?4eml?$AA@
	DD	FLAT:??_C@_04FDPPLPOO@?4flt?$AA@
	DD	FLAT:??_C@_04FBLJABLH@?4fot?$AA@
	DD	FLAT:??_C@_03GBOLEDH@?4gz?$AA@
	DD	FLAT:??_C@_04NHEMANNJ@?4hlp?$AA@
	DD	FLAT:??_C@_04DKBFJDAN@?4htm?$AA@
	DD	FLAT:??_C@_05LHMDENIF@?4html?$AA@
	DD	FLAT:??_C@_04PHHEBHMK@?4ini?$AA@
	DD	FLAT:??_C@_04LCFBANHC@?4j2k?$AA@
	DD	FLAT:??_C@_04EHKLDEID@?4jar?$AA@
	DD	FLAT:??_C@_04GMEKPFFD@?4jff?$AA@
	DD	FLAT:??_C@_04GHBGLCGO@?4jif?$AA@
	DD	FLAT:??_C@_04POJMDHDM@?4jmh?$AA@
	DD	FLAT:??_C@_04HLECJFKK@?4jng?$AA@
	DD	FLAT:??_C@_04KKDGLCMB@?4jp2?$AA@
	DD	FLAT:??_C@_04FPMMHJFC@?4jpe?$AA@
	DD	FLAT:??_C@_05KPIGABMB@?4jpeg?$AA@
	DD	FLAT:??_C@_04GNPKBLNA@?4jpg?$AA@
	DD	FLAT:??_C@_04EPFEHOMD@?4lsp?$AA@
	DD	FLAT:??_C@_04MMHKJEOH@?4mod?$AA@
	DD	FLAT:??_C@_04MJHJENFH@?4nws?$AA@
	DD	FLAT:??_C@_04PACIOCLB@?4obj?$AA@
	DD	FLAT:??_C@_04DCGPEFLD@?4olb?$AA@
	DD	FLAT:??_C@_04HDEPAGHI@?4osd?$AA@
	DD	FLAT:??_C@_04LCEIGNIC@?4ov1?$AA@
	DD	FLAT:??_C@_04JJGFDOEB@?4ov2?$AA@
	DD	FLAT:??_C@_04IAHOAPAA@?4ov3?$AA@
	DD	FLAT:??_C@_04LNFNEOJL@?4ovl?$AA@
	DD	FLAT:??_C@_04LNFNEOJL@?4ovl?$AA@
	DD	FLAT:??_C@_04GJBMHBEE@?4ovr?$AA@
	DD	FLAT:??_C@_04HOMEEBJD@?4pdr?$AA@
	DD	FLAT:??_C@_04LBNIPBFE@?4pgm?$AA@
	DD	FLAT:??_C@_04EFOINKHF@?4php?$AA@
	DD	FLAT:??_C@_04ECCNOALK@?4pkg?$AA@
	DD	FLAT:??_C@_03DOPLEBF@?4pl?$AA@
	DD	FLAT:??_C@_04EEOGCCFB@?4png?$AA@
	DD	FLAT:??_C@_04CEMLAJPE@?4pot?$AA@
	DD	FLAT:??_C@_04HMPAHLHO@?4pps?$AA@
	DD	FLAT:??_C@_04DDLBONLJ@?4ppt?$AA@
	DD	FLAT:??_C@_04LMPJOIKA@?4ps1?$AA@
	DD	FLAT:??_C@_07KMHCJKCL@?4ps1xml?$AA@
	DD	FLAT:??_C@_05HPAPKHGM@?4psc1?$AA@
	DD	FLAT:??_C@_04NCAGELPD@?4rar?$AA@
	DD	FLAT:??_C@_04BLKDLNGL@?4rpl?$AA@
	DD	FLAT:??_C@_04OGEFPNDN@?4rtf?$AA@
	DD	FLAT:??_C@_04EGFCEFJK@?4sbf?$AA@
	DD	FLAT:??_C@_07PPFPDIDE@?4script?$AA@
	DD	FLAT:??_C@_03GFMFMPEI@?4sh?$AA@
	DD	FLAT:??_C@_04EIEFGIL@?4sha?$AA@
	DD	FLAT:??_C@_05LANAKKIP@?4shtm?$AA@
	DD	FLAT:??_C@_06LEPPGKLA@?4shtml?$AA@
	DD	FLAT:??_C@_04KDBPNKAO@?4spl?$AA@
	DD	FLAT:??_C@_04FMLPCEAB@?4swf?$AA@
	DD	FLAT:??_C@_04PHGNBECP@?4tar?$AA@
	DD	FLAT:??_C@_04DLDJOCJF@?4tgz?$AA@
	DD	FLAT:??_C@_04MMEBIPMJ@?4tmp?$AA@
	DD	FLAT:??_C@_04MDCOKCOB@?4ttf?$AA@
	DD	FLAT:??_C@_04EHPLDJIL@?4vcs?$AA@
	DD	FLAT:??_C@_04JIOGEBGJ@?4vlm?$AA@
	DD	FLAT:??_C@_04FCALPBIM@?4vxd?$AA@
	DD	FLAT:??_C@_04LBPPCIEH@?4vxo?$AA@
	DD	FLAT:??_C@_04CDBCGAHB@?4wiz?$AA@
	DD	FLAT:??_C@_04DJEBBHEN@?4wll?$AA@
	DD	FLAT:??_C@_04PAFKPHHC@?4wmd?$AA@
	DD	FLAT:??_C@_04MCGMJFPA@?4wmf?$AA@
	DD	FLAT:??_C@_04PFNJHDOE@?4wms?$AA@
	DD	FLAT:??_C@_04CEBLMIKN@?4wmz?$AA@
	DD	FLAT:??_C@_04KLOFFBJG@?4wpc?$AA@
	DD	FLAT:??_C@_04KJKDOPMP@?4wsc?$AA@
	DD	FLAT:??_C@_04EKFHDGAE@?4wsh?$AA@
	DD	FLAT:??_C@_04GGHDMNBL@?4wwk?$AA@
	DD	FLAT:??_C@_05MHAAJLJO@?4xhtm?$AA@
	DD	FLAT:??_C@_06NODIJKHD@?4xhtml?$AA@
	DD	FLAT:??_C@_03NPMOFKN@?4xl?$AA@
	DD	FLAT:??_C@_04GAOAGNCM@?4xml?$AA@
	DD	FLAT:??_C@_04CLJHFACG@?4zip?$AA@
	DD	FLAT:??_C@_03GKKCJKIH@?47z?$AA@
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@
CONST	SEGMENT
??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@ DB 'CAPSLOCK_ON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, '.', 00H, '1', 00H, 'f', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@ DB '%'
	DB	00H, 'I', 00H, '6', 00H, '4', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
CONST	SEGMENT
??_C@_04ELFAHOMP@BYTE?$AA@ DB 'BYTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOENCFNK@PB?$AA@
CONST	SEGMENT
??_C@_02KOENCFNK@PB?$AA@ DB 'PB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJEEINAG@TB?$AA@
CONST	SEGMENT
??_C@_02KJEEINAG@TB?$AA@ DB 'TB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHCEJACP@GB?$AA@
CONST	SEGMENT
??_C@_02LHCEJACP@GB?$AA@ DB 'GB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKLDBFPJ@MB?$AA@
CONST	SEGMENT
??_C@_02LKLDBFPJ@MB?$AA@ DB 'MB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LODOGJEL@KB?$AA@
CONST	SEGMENT
??_C@_02LODOGJEL@KB?$AA@ DB 'KB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNOFBBI@?$CFx?$AA@
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx?$AA@ DB '%x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMIKDLEM@CabinetWClass?$AA@
CONST	SEGMENT
??_C@_0O@DMIKDLEM@CabinetWClass?$AA@ DB 'CabinetWClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGJNICGF@?$CFc?3?2?$AA@
CONST	SEGMENT
??_C@_04CGJNICGF@?$CFc?3?2?$AA@ DB '%c:\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJMEDNIB@Static?$AA@
CONST	SEGMENT
??_C@_06KJMEDNIB@Static?$AA@ DB 'Static', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKBCGDFD@Button?$AA@
CONST	SEGMENT
??_C@_06LKBCGDFD@Button?$AA@ DB 'Button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@
CONST	SEGMENT
??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@ DB 'CANNOT_WRITE_FILE_X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FDOCLIJD@ERR_UNKNOWN?$AA@
CONST	SEGMENT
??_C@_0M@FDOCLIJD@ERR_UNKNOWN?$AA@ DB 'ERR_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@
CONST	SEGMENT
??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@ DB 'ERR_PARAMETER_INCORRE'
	DB	'CT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MBJPLKGL@ERR_SYS_HIDVOL_HEAD_REENC_MODE_W@
CONST	SEGMENT
??_C@_0CF@MBJPLKGL@ERR_SYS_HIDVOL_HEAD_REENC_MODE_W@ DB 'ERR_SYS_HIDVOL_H'
	DB	'EAD_REENC_MODE_WRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BGLNMIMN@ERR_NONSYS_INPLACE_ENC_INCOMPLET@
CONST	SEGMENT
??_C@_0CC@BGLNMIMN@ERR_NONSYS_INPLACE_ENC_INCOMPLET@ DB 'ERR_NONSYS_INPLA'
	DB	'CE_ENC_INCOMPLETE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JLJPGHCL@ERR_ENCRYPTION_NOT_COMPLETED?$AA@
CONST	SEGMENT
??_C@_0BN@JLJPGHCL@ERR_ENCRYPTION_NOT_COMPLETED?$AA@ DB 'ERR_ENCRYPTION_N'
	DB	'OT_COMPLETED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@
CONST	SEGMENT
??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@ DB 'ERR_VOL_FORMAT_BAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@
CONST	SEGMENT
??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@ DB 'ERR_SELF_TESTS_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LDKGLOCG@NEW_VERSION_REQUIRED?$AA@
CONST	SEGMENT
??_C@_0BF@LDKGLOCG@NEW_VERSION_REQUIRED?$AA@ DB 'NEW_VERSION_REQUIRED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LICKOHFP@DRIVER_VERSION?$AA@
CONST	SEGMENT
??_C@_0P@LICKOHFP@DRIVER_VERSION?$AA@ DB 'DRIVER_VERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILOHOCOF@ACCESS_DENIED?$AA@
CONST	SEGMENT
??_C@_0O@ILOHOCOF@ACCESS_DENIED?$AA@ DB 'ACCESS_DENIED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ECPPAAM@NO_FREE_DRIVES?$AA@
CONST	SEGMENT
??_C@_0P@ECPPAAM@NO_FREE_DRIVES?$AA@ DB 'NO_FREE_DRIVES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JCPIJGNN@VOL_MOUNT_FAILED?$AA@
CONST	SEGMENT
??_C@_0BB@JCPIJGNN@VOL_MOUNT_FAILED?$AA@ DB 'VOL_MOUNT_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GLPAMHI@FILE_OPEN_FAILED?$AA@
CONST	SEGMENT
??_C@_0BB@GLPAMHI@FILE_OPEN_FAILED?$AA@ DB 'FILE_OPEN_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
CONST	SEGMENT
??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@ DB 'VOL_ALREADY_MOUNTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DGGCCNCK@ERR_CIPHER_INIT_WEAK_KEY?$AA@
CONST	SEGMENT
??_C@_0BJ@DGGCCNCK@ERR_CIPHER_INIT_WEAK_KEY?$AA@ DB 'ERR_CIPHER_INIT_WEAK'
	DB	'_KEY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BFLHAGLK@ERR_CIPHER_INIT_FAILURE?$AA@
CONST	SEGMENT
??_C@_0BI@BFLHAGLK@ERR_CIPHER_INIT_FAILURE?$AA@ DB 'ERR_CIPHER_INIT_FAILU'
	DB	'RE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFLNHABP@VOL_SEEKING?$AA@
CONST	SEGMENT
??_C@_0M@KFLNHABP@VOL_SEEKING?$AA@ DB 'VOL_SEEKING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BKLABIJI@WRONG_VOL_TYPE?$AA@
CONST	SEGMENT
??_C@_0P@BKLABIJI@WRONG_VOL_TYPE?$AA@ DB 'WRONG_VOL_TYPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FLKCANLN@COMPRESSION_NOT_SUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BK@FLKCANLN@COMPRESSION_NOT_SUPPORTED?$AA@ DB 'COMPRESSION_NOT_SUP'
	DB	'PORTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HPMGPOAF@VOL_SIZE_WRONG?$AA@
CONST	SEGMENT
??_C@_0P@HPMGPOAF@VOL_SIZE_WRONG?$AA@ DB 'VOL_SIZE_WRONG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DNONBLBD@OPENFILES_LOCK?$AA@
CONST	SEGMENT
??_C@_0P@DNONBLBD@OPENFILES_LOCK?$AA@ DB 'OPENFILES_LOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HBDCANKP@OPENFILES_DRIVER?$AA@
CONST	SEGMENT
??_C@_0BB@HBDCANKP@OPENFILES_DRIVER?$AA@ DB 'OPENFILES_DRIVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IILMPLJM@NOT_FOUND?$AA@
CONST	SEGMENT
??_C@_09IILMPLJM@NOT_FOUND?$AA@ DB 'NOT_FOUND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@
CONST	SEGMENT
??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@ DB 'PASSWORD_WRONG_CAP'
	DB	'SLOCK_ON', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MKGPOAFK@PASSWORD_WRONG?$AA@
CONST	SEGMENT
??_C@_0P@MKGPOAFK@PASSWORD_WRONG?$AA@ DB 'PASSWORD_WRONG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LAEGKAMJ@PASSWORD_OR_KEYFILE_WRONG?$AA@
CONST	SEGMENT
??_C@_0BK@LAEGKAMJ@PASSWORD_OR_KEYFILE_WRONG?$AA@ DB 'PASSWORD_OR_KEYFILE'
	DB	'_WRONG', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@HPAMBPDO@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAg?$AAs?$AAt?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAg@
CONST	SEGMENT
??_C@_1EO@HPAMBPDO@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAg?$AAs?$AAt?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAg@ DB '%'
	DB	00H, 'l', 00H, 's', 00H, ' ', 00H, '(', 00H, '*', 00H, '.', 00H
	DB	'*', 00H, ')', 00H, '%', 00H, 'c', 00H, '*', 00H, '.', 00H, '*'
	DB	00H, '%', 00H, 'c', 00H, '%', 00H, 'l', 00H, 's', 00H, ' ', 00H
	DB	'(', 00H, '*', 00H, '.', 00H, 'g', 00H, 's', 00H, 't', 00H, ')'
	DB	00H, '%', 00H, 'c', 00H, '*', 00H, '.', 00H, 'g', 00H, 's', 00H
	DB	't', 00H, '%', 00H, 'c', 00H, '%', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEODDAII@ALL_FILES?$AA@
CONST	SEGMENT
??_C@_09EEODDAII@ALL_FILES?$AA@ DB 'ALL_FILES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BLEDMAHO@GST_VOLUMES?$AA@
CONST	SEGMENT
??_C@_0M@BLEDMAHO@GST_VOLUMES?$AA@ DB 'GST_VOLUMES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@ DB '%', 00H, 'h', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PFCBNFDJ@?2?2?4?2GostCrypt?$AA@
CONST	SEGMENT
??_C@_0O@PFCBNFDJ@?2?2?4?2GostCrypt?$AA@ DB '\\.\GostCrypt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@
CONST	SEGMENT
??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@ DB 'DRIVER_INSTALL_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@
CONST	SEGMENT
??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@ DB 'STARTING_DRIVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCILFBFB@gostcrypt?$AA@
CONST	SEGMENT
??_C@_09JCILFBFB@gostcrypt?$AA@ DB 'gostcrypt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KPLJJAIG@System32?2drivers?2gostcrypt?4sys?$AA@
CONST	SEGMENT
??_C@_0BP@KPLJJAIG@System32?2drivers?2gostcrypt?4sys?$AA@ DB 'System32\dr'
	DB	'ivers\gostcrypt.sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@
CONST	SEGMENT
??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@ DB 'INSTALLING_DRIVER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13EBCNDICG@?$AA?3?$AA?$AA@
CONST	SEGMENT
??_C@_13EBCNDICG@?$AA?3?$AA?$AA@ DB ':', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPBANHMA@HARDDISK?$AA@
CONST	SEGMENT
??_C@_08IPBANHMA@HARDDISK?$AA@ DB 'HARDDISK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@ DB '%', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@
CONST	SEGMENT
??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@ DB 'REMOVABLE_DISK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@
CONST	SEGMENT
??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@ DB 'RAWDEVICES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EILEDKCG@LABEL?$AA@
CONST	SEGMENT
??_C@_05EILEDKCG@LABEL?$AA@ DB 'LABEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EMFHLKGI@SIZE?$AA@
CONST	SEGMENT
??_C@_04EMFHLKGI@SIZE?$AA@ DB 'SIZE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLAEHEHI@DRIVE?$AA@
CONST	SEGMENT
??_C@_05JLAEHEHI@DRIVE?$AA@ DB 'DRIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDNPEPDB@DEVICE?$AA@
CONST	SEGMENT
??_C@_06CDNPEPDB@DEVICE?$AA@ DB 'DEVICE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@
CONST	SEGMENT
??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@ DB 'IDD_RAWDEVICES_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJAHODMC@Text?$AA@
CONST	SEGMENT
??_C@_04OJAHODMC@Text?$AA@ DB 'Text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@
CONST	SEGMENT
??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@ DB 'How to Remo'
	DB	've Extra Boot Partition', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
CONST	SEGMENT
??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@ DB 'EXTRA_BOOT_PARTI'
	DB	'TION_REMOVAL_INSTRUCTIONS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@
CONST	SEGMENT
??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@ DB 'How to Create Deco'
	DB	'y OS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LGNEPEIP@GostCrypt?5Rescue?5Disk?5Help?$AA@
CONST	SEGMENT
??_C@_0BL@LGNEPEIP@GostCrypt?5Rescue?5Disk?5Help?$AA@ DB 'GostCrypt Rescu'
	DB	'e Disk Help', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@
CONST	SEGMENT
??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@ DB 'Pre-Boot Troublesh'
	DB	'ooting', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@
CONST	SEGMENT
??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@ DB 'LEGAL_NOTICES_DLG_TIT'
	DB	'LE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@
CONST	SEGMENT
??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@
CONST	SEGMENT
??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@
CONST	SEGMENT
??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@
CONST	SEGMENT
??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@
CONST	SEGMENT
??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@
CONST	SEGMENT
??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@
CONST	SEGMENT
??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@
CONST	SEGMENT
??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@
CONST	SEGMENT
??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@ DB 'DECOY_OS_INST'
	DB	'RUCTIONS_PORTION_9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@
CONST	SEGMENT
??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@
CONST	SEGMENT
??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@
CONST	SEGMENT
??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@
CONST	SEGMENT
??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_13', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@
CONST	SEGMENT
??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_14', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@
CONST	SEGMENT
??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_15', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@
CONST	SEGMENT
??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@
CONST	SEGMENT
??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@ DB 'DECOY_OS_INSTRUC'
	DB	'TIONS_PORTION_17', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@
CONST	SEGMENT
??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@ DB 'DECOY_OS_INSTRUCT'
	DB	'IONS_PORTION_18', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@
CONST	SEGMENT
??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@
CONST	SEGMENT
??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@
CONST	SEGMENT
??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@
CONST	SEGMENT
??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@
CONST	SEGMENT
??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_5', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@
CONST	SEGMENT
??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_6', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@
CONST	SEGMENT
??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_7', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@
CONST	SEGMENT
??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@ DB 'RESCUE_DISK_HELP_PO'
	DB	'RTION_8', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@
CONST	SEGMENT
??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@ DB 'RESCUE_DISK_HELP_P'
	DB	'ORTION_9', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@
CONST	SEGMENT
??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@ DB 'SYS_ENCRYPTION_P'
	DB	'RETEST_INFO2_PORTION_4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@ DD FLAT:??_R4?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BM@JHDHCLPC@GostCrypt?5User?5Guide?4?$CFs?4pdf?$AA@
CONST	SEGMENT
??_C@_0BM@JHDHCLPC@GostCrypt?5User?5Guide?4?$CFs?4pdf?$AA@ DB 'GostCrypt '
	DB	'User Guide.%s.pdf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en?$AA@
CONST	SEGMENT
??_C@_02LFNMGJAP@en?$AA@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@
CONST	SEGMENT
??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@ DB 'INIT_RICHEDIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KPDNKMDE@riched20?4dll?$AA@
CONST	SEGMENT
??_C@_0N@KPDNKMDE@riched20?4dll?$AA@ DB 'riched20.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
CONST	SEGMENT
??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@ DB 'INIT_REGISTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGFHJIJL@?$CD32770?$AA@
CONST	SEGMENT
??_C@_06FGFHJIJL@?$CD32770?$AA@ DB '#32770', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@
CONST	SEGMENT
??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@ DB 'LARGE_IDE_WARNING_XP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@
CONST	SEGMENT
??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@ DB 'System\Current'
	DB	'ControlSet\Control\minint', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@
CONST	SEGMENT
??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@ DB 'LARGE_IDE_WARNI'
	DB	'NG_2K_REGISTRY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MGFEFGLL@EnableBigLba?$AA@
CONST	SEGMENT
??_C@_0N@MGFEFGLL@EnableBigLba?$AA@ DB 'EnableBigLba', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\Atapi\Parameters', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@
CONST	SEGMENT
??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@ DB 'LARGE_IDE_WARNING_2K', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@
CONST	SEGMENT
??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@ DB 'UNSUPPORTED_OS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BENDAOKD@Language?$AA@
CONST	SEGMENT
??_C@_08BENDAOKD@Language?$AA@ DB 'Language', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IDILIKHG@NO_OS_VER?$AA@
CONST	SEGMENT
??_C@_09IDILIKHG@NO_OS_VER?$AA@ DB 'NO_OS_VER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
CONST	SEGMENT
??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@ DB 'AFTER_UPGRADE_REL'
	DB	'EASE_NOTES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
CONST	SEGMENT
??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@ DB 'http://www'
	DB	'.gostcrypt.org/redirect.php?a=2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
CONST	SEGMENT
??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@ DB 'AFTER_INSTALL_TUTORIAL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
CONST	SEGMENT
??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@ DB 'Post-Insta'
	DB	'll Task - Release Notes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
CONST	SEGMENT
??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@ DB 'Post-Instal'
	DB	'l Task - Tutorial', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
CONST	SEGMENT
??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@ DB 'In-Place En'
	DB	'cryption Wipe Algo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
CONST	SEGMENT
??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@ DB 'In-Place Encryption', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAECLFAP@WipeMode?$AA@
CONST	SEGMENT
??_C@_08OAECLFAP@WipeMode?$AA@ DB 'WipeMode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@
CONST	SEGMENT
??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@ DB 'SystemEncryptionStatus'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICHNJLJF@key?$AA@
CONST	SEGMENT
??_C@_03ICHNJLJF@key?$AA@ DB 'key', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEJKKHEK@config?$AA@
CONST	SEGMENT
??_C@_06HEJKKHEK@config?$AA@ DB 'config', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
CONST	SEGMENT
??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@ DB 'System Encryption.xml'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MKBHDAPB@GostCryptEncryptionFreeCpuCount?$AA@
CONST	SEGMENT
??_C@_0CA@MKBHDAPB@GostCryptEncryptionFreeCpuCount?$AA@ DB 'GostCryptEncr'
	DB	'yptionFreeCpuCount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LCJDGIOL@SYSTEM?2CurrentControlSet?2Service@
CONST	SEGMENT
??_C@_0CM@LCJDGIOL@SYSTEM?2CurrentControlSet?2Service@ DB 'SYSTEM\Current'
	DB	'ControlSet\Services\gostcrypt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NANEHOFP@GostCryptConfig?$AA@
CONST	SEGMENT
??_C@_0BA@NANEHOFP@GostCryptConfig?$AA@ DB 'GostCryptConfig', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMLDCLIN@Global?2GostCrypt?5Setup?$AA@
CONST	SEGMENT
??_C@_0BH@JMLDCLIN@Global?2GostCrypt?5Setup?$AA@ DB 'Global\GostCrypt Set'
	DB	'up', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JOPFAKIM@Global?2GostCrypt?5Driver?5Setup?$AA@
CONST	SEGMENT
??_C@_0BO@JOPFAKIM@Global?2GostCrypt?5Driver?5Setup?$AA@ DB 'Global\GostC'
	DB	'rypt Driver Setup', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BEIDGOGA@Global?2GostCrypt?5In?9Place?5Encryp@
CONST	SEGMENT
??_C@_0CM@BEIDGOGA@Global?2GostCrypt?5In?9Place?5Encryp@ DB 'Global\GostC'
	DB	'rypt In-Place Encryption Wizard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NOADNGOE@Global?2GostCrypt?5System?5Encrypti@
CONST	SEGMENT
??_C@_0CK@NOADNGOE@Global?2GostCrypt?5System?5Encrypti@ DB 'Global\GostCr'
	DB	'ypt System Encryption Wizard', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@
CONST	SEGMENT
??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@ DB 'EXCEPTION_REPORT'
	DB	'_EXT_FILESEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@
CONST	SEGMENT
??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@ DB 'EXCEPTION_REPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JB@MLJIHOID@https?3?1?1www?4gostcrypt?4org?1applin@
CONST	SEGMENT
??_C@_0JB@MLJIHOID@https?3?1?1www?4gostcrypt?4org?1applin@ DB 'https://ww'
	DB	'w.gostcrypt.org/applink.php?version=1.3.1&dest=err-report%s&o'
	DB	's=%s&osver=%d.%d.%d&arch=%s&cpus=%d&app=%s&cksum=%x&dlg=%s&er'
	DB	'r=%x&addr=%x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDFEINMN@x86?$AA@
CONST	SEGMENT
??_C@_03NDFEINMN@x86?$AA@ DB 'x86', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OLPMMCEF@x64?$AA@
CONST	SEGMENT
??_C@_03OLPMMCEF@x64?$AA@ DB 'x64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LABDNII@setup?$AA@
CONST	SEGMENT
??_C@_05LABDNII@setup?$AA@ DB 'setup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@
CONST	SEGMENT
??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@ DB '&langpack=%s_%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BPHHBGPB@?$DN0x?$AA@
CONST	SEGMENT
??_C@_03BPHHBGPB@?$DN0x?$AA@ DB '=0x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EGAGLKPK@?$CGst?$AA@
CONST	SEGMENT
??_C@_03EGAGLKPK@?$CGst?$AA@ DB '&st', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHNAPHBH@SymFromAddr?$AA@
CONST	SEGMENT
??_C@_0M@GHNAPHBH@SymFromAddr?$AA@ DB 'SymFromAddr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJINHFIC@StackWalk64?$AA@
CONST	SEGMENT
??_C@_0M@FJINHFIC@StackWalk64?$AA@ DB 'StackWalk64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@
CONST	SEGMENT
??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@ DB 'SymGetModuleBase64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@
CONST	SEGMENT
??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@ DB 'SymFunctionTableAcce'
	DB	'ss64', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MCMFENKA@SymInitialize?$AA@
CONST	SEGMENT
??_C@_0O@MCMFENKA@SymInitialize?$AA@ DB 'SymInitialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIDFOEPH@SymSetOptions?$AA@
CONST	SEGMENT
??_C@_0O@LIDFOEPH@SymSetOptions?$AA@ DB 'SymSetOptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KGBKFDLO@SymGetOptions?$AA@
CONST	SEGMENT
??_C@_0O@KGBKFDLO@SymGetOptions?$AA@ DB 'SymGetOptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@
CONST	SEGMENT
??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@ DB 'dbghelp.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@
CONST	SEGMENT
??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@ DB 'EXCEPTION_REPORT_EXT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
CONST	SEGMENT
??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@ DB 'EXCEPTION_REPORT_TITLE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@ DD FLAT:??_R4?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBEXXZ
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	058H
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	010H
CONST	ENDS
;	COMDAT ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`vbtable'
	DD	020H
CONST	ENDS
;	COMDAT ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_iostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@ DB 'DEVICE_LOWER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@ DB 'DEVICE_UPPER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@ DB 'VOLUME_LOWER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@
CONST	SEGMENT
??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@ DB 'VOLUME_UPPER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@
CONST	SEGMENT
??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@ DB 'HarddiskVolume', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@
CONST	SEGMENT
??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@ DB 'PARTITION_LOWER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@
CONST	SEGMENT
??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@ DB 'PARTITION_UPPER_CASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MAFJOMBB@Partition0?$AA@
CONST	SEGMENT
??_C@_0L@MAFJOMBB@Partition0?$AA@ DB 'Partition0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MFFJIMND@Partition?$AA@
CONST	SEGMENT
??_C@_09MFFJIMND@Partition?$AA@ DB 'Partition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@
CONST	SEGMENT
??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@ DB 'WIPE_MODE_35_GUTMANN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@
CONST	SEGMENT
??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@ DB 'WIPE_MODE_7_DOD_5220', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@
CONST	SEGMENT
??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@ DB 'WIPE_MODE_3_DOD_5220', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@
CONST	SEGMENT
??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@ DB 'WIPE_MODE_1_RAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@
CONST	SEGMENT
??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@ DB 'WIPE_MODE_NONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
CONST	SEGMENT
??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@ DB 'NOT_APPLICABL'
	DB	'E_OR_NOT_AVAILABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFPKBNGC@REDTICK?$AA@
CONST	SEGMENT
??_C@_07EFPKBNGC@REDTICK?$AA@ DB 'REDTICK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KAINEBEN@ABOUTBOX?$AA@
CONST	SEGMENT
??_C@_08KAINEBEN@ABOUTBOX?$AA@ DB 'ABOUTBOX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@ DB 'L'
	DB	00H, 'u', 00H, 'c', 00H, 'i', 00H, 'd', 00H, 'a', 00H, ' ', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MOFKMHPH@font_fixed?$AA@
CONST	SEGMENT
??_C@_0L@MOFKMHPH@font_fixed?$AA@ DB 'font_fixed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@ DB 'T'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'N', 00H
	DB	'e', 00H, 'w', 00H, ' ', 00H, 'R', 00H, 'o', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMFINBBB@font_title?$AA@
CONST	SEGMENT
??_C@_0L@NMFINBBB@font_title?$AA@ DB 'font_title', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ DB 'A', 00H, 'r', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDCDAOMH@font_bold?$AA@
CONST	SEGMENT
??_C@_09KDCDAOMH@font_bold?$AA@ DB 'font_bold', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DILOELAE@NOFONT?$AA@
CONST	SEGMENT
??_C@_06DILOELAE@NOFONT?$AA@ DB 'NOFONT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@ DB 'T', 00H, 'a'
	DB	00H, 'h', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ DB 'd', 00H
	DB	'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGCGEGAM@font_normal?$AA@
CONST	SEGMENT
??_C@_0M@IGCGEGAM@font_normal?$AA@ DB 'font_normal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EMBCECD@http?3?1?1www?4gostcrypt?4org?1?$AA@
CONST	SEGMENT
??_C@_0BK@EMBCECD@http?3?1?1www?4gostcrypt?4org?1?$AA@ DB 'http://www.gos'
	DB	'tcrypt.org/', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DCE@DDNKAONB@Portions?5of?5this?5software?5are?5ba@
CONST	SEGMENT
??_C@_0DCE@DDNKAONB@Portions?5of?5this?5software?5are?5ba@ DB 'Portions o'
	DB	'f this software are based in part on the works of the followi'
	DB	'ng people: Paul Le Roux, Bruce Schneier, John Kelsey, Doug Wh'
	DB	'iting, David Wagner, Chris Hall, Niels Ferguson, Lars Knudsen'
	DB	', Ross Anderson, Eli Biham, Joan Daemen, Vincent Rijmen, Phil'
	DB	'lip Rogaway, Hans Dobbertin, Antoon Bosselaers, Bart Preneel,'
	DB	' Paulo Barreto, Brian Gladman, Wei Dai, Peter Gutmann, and ma'
	DB	'ny others.', 0dH, 0aH, 0dH, 0aH, 'Portions of this software:', 0dH
	DB	0aH, 'Copyright ', 0a9H, ' 2003-2012 TrueCrypt Developers Asso'
	DB	'ciation. All Rights Reserved.', 0dH, 0aH, 'Copyright ', 0a9H, ' '
	DB	'1998-2000 Paul Le Roux. All Rights Reserved.', 0dH, 0aH, 'Cop'
	DB	'yright ', 0a9H, ' 1998-2008 Brian Gladman. All Rights Reserve'
	DB	'd.', 0dH, 0aH, 'Copyright ', 0a9H, ' 2002-2004 Mark Adler. Al'
	DB	'l Rights Reserved.', 0dH, 0aH, 0dH, 0aH, 'This software as a '
	DB	'whole:', 0dH, 0aH, 'Copyright ', 0a9H, ' 2012 TrueCrypt Devel'
	DB	'opers Association. All rights reserved.', 0dH, 0aH, 0dH, 0aH, 'A'
	DB	' TrueCrypt Foundation Release', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NEDIGDMJ@Released?5by?5the?5GostCrypt?5develo@
CONST	SEGMENT
??_C@_0DF@NEDIGDMJ@Released?5by?5the?5GostCrypt?5develo@ DB 'Released by '
	DB	'the GostCrypt developers on January 2016', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPJNLKPO@GostCrypt?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@BPJNLKPO@GostCrypt?5?$CFs?$AA@ DB 'GostCrypt %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJPKCACG@1?43?41?$AA@
CONST	SEGMENT
??_C@_05OJPKCACG@1?43?41?$AA@ DB '1.3.1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFCNFPNP@www?4gostcrypt?4org?$AA@
CONST	SEGMENT
??_C@_0BC@CFCNFPNP@www?4gostcrypt?4org?$AA@ DB 'www.gostcrypt.org', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@
CONST	SEGMENT
??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@ DB 'IDD_ABOUT_DLG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NLNANBEJ@ERR_HARDWARE_ERROR?$AA@
CONST	SEGMENT
??_C@_0BD@NLNANBEJ@ERR_HARDWARE_ERROR?$AA@ DB 'ERR_HARDWARE_ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GIPDODAO@ERR_ACCESS_DENIED?$AA@
CONST	SEGMENT
??_C@_0BC@GIPDODAO@ERR_ACCESS_DENIED?$AA@ DB 'ERR_ACCESS_DENIED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
CONST	SEGMENT
??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@ DB 'OUTOFMEMORY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@ DB '\\.\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DANNJCFD@gostcrypt?$CFlu?$AA@
CONST	SEGMENT
??_C@_0N@DANNJCFD@gostcrypt?$CFlu?$AA@ DB 'gostcrypt%lu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FALOLEII@?2DEVICE?2?$AA@
CONST	SEGMENT
??_C@_08FALOLEII@?2DEVICE?2?$AA@ DB '\DEVICE\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBBBEOPI@?2Device?2?$AA@
CONST	SEGMENT
??_C@_08MBBBEOPI@?2Device?2?$AA@ DB '\Device\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@
CONST	SEGMENT
??_7?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@ DD FLAT:??_R4?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
	DD	FLAT:?IsNotEnd@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBE_NXZ
	DD	FLAT:?Next@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBEXXZ
CONST	ENDS
;	COMDAT ??_C@_09EPIDNIBP@SplashDlg?$AA@
CONST	SEGMENT
??_C@_09EPIDNIBP@SplashDlg?$AA@ DB 'SplashDlg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODDMBMG@CustomDlg?$AA@
CONST	SEGMENT
??_C@_09ODDMBMG@CustomDlg?$AA@ DB 'CustomDlg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBKAOEOG@GostCrypt?5Format?4exe?$AA@
CONST	SEGMENT
??_C@_0BF@MBKAOEOG@GostCrypt?5Format?4exe?$AA@ DB 'GostCrypt Format.exe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@
CONST	SEGMENT
??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@ DB 'GostCrypt User Gu'
	DB	'ide.pdf', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09NKHKFHLH@GostCrypt?$AA@
CONST	SEGMENT
??_C@_09NKHKFHLH@GostCrypt?$AA@ DB 'GostCrypt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7SystemException@GostCrypt@@6B@
CONST	SEGMENT
??_7SystemException@GostCrypt@@6B@ DD FLAT:??_R4SystemException@GostCrypt@@6B@ ; GostCrypt::SystemException::`vftable'
	DD	FLAT:?Show@SystemException@GostCrypt@@UBEXPAUHWND__@@@Z
CONST	ENDS
;	COMDAT ??_7Exception@GostCrypt@@6B@
CONST	SEGMENT
??_7Exception@GostCrypt@@6B@ DD FLAT:??_R4Exception@GostCrypt@@6B@ ; GostCrypt::Exception::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7Container@ForEach@GostCrypt@@6B@
CONST	SEGMENT
??_7Container@ForEach@GostCrypt@@6B@ DD FLAT:??_R4Container@ForEach@GostCrypt@@6B@ ; GostCrypt::ForEach::Container::`vftable'
	DD	FLAT:??_EContainer@ForEach@GostCrypt@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception?$AA@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z$0
__ehfuncinfo$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z$1
__ehfuncinfo$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z$2
__ehfuncinfo$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$51 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$51
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0
__tryblocktable$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$7
__unwindtable$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$5
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$28 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0
__tryblocktable$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$28
__unwindtable$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$4
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0
__tryblocktable$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$6
__unwindtable$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$4
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$113 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$113
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$15 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$15
__ehfuncinfo$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z$0
__ehfuncinfo$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z$0
__ehfuncinfo$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z$1
__ehfuncinfo$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z$1
__ehfuncinfo$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$33
	DD	02H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$33
	DD	02H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$32
	DD	02H
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$134
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z$2
__ehfuncinfo$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z$2
__ehfuncinfo$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$212 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 02H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$212
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$5
	DD	01H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$37
	DD	01H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$96
	DD	01H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$155
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$210
	DD	09H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$211
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ$1
__ehfuncinfo$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z$2
__ehfuncinfo$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$2
__ehfuncinfo$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$2
__ehfuncinfo$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ$1
__ehfuncinfo$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$3
__ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$3
__ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$4
__ehfuncinfo$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$14
	DD	01H
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$15
__ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$14 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$14
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$1
__ehfuncinfo$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z$1
__ehfuncinfo$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$1
__ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ$1
__ehfuncinfo$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ$0
__ehfuncinfo$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z$16
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	011H
	DD	FLAT:__unwindtable$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$16
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3
__ehfuncinfo$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$1
__ehfuncinfo$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetSysDevicePaths@@YAHPAUHWND__@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetSysDevicePaths@@YAHPAUHWND__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetSysDevicePaths@@YAHPAUHWND__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z$1
__ehfuncinfo$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$46 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$46
__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$38 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$38
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$36
	DD	04H
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$37
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$1
__ehfuncinfo$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z$2
__ehfuncinfo$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$2
__ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$2
__ehfuncinfo$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ$1
__ehfuncinfo$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$3
__ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$3
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ$4
__ehfuncinfo$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1
	DD	02H
	DD	00H
__ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$14
	DD	01H
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$15
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$34 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$34
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$5
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$32
	DD	06H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$33
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$34 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$34
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$5
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$32
	DD	06H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$33
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$34 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$34
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$5
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$32
	DD	06H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$33
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$14 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$14
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$3
__ehfuncinfo$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$1
__ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$1
__ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$1
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ExceptionHandlerThread@@YAXPAX@Z DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$?ExceptionHandlerThread@@YAXPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ExceptionHandlerThread@@YAXPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$8
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$12
	DD	03H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$9
	DD	05H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$20
	DD	07H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$1
	DD	07H
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$2
	DD	0aH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$3
	DD	0aH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$4
	DD	0aH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$340
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0
__ehfuncinfo$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$5
__ehfuncinfo$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1
__ehfuncinfo$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__ehfuncinfo$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z$0
__ehfuncinfo$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	015H
	DD	FLAT:__unwindtable$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$31
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$35
	DD	04H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$32
	DD	06H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$39
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	08H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$70
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$71
	DD	0bH
	DD	00H
	DD	0cH
	DD	00H
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$75
	DD	0eH
	DD	00H
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$72
	DD	010H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$79
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
	DD	012H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$110
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1
__ehfuncinfo$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z DD 019930522H
	DD	01fH
	DD	FLAT:__unwindtable$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$12
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$16
	DD	04H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$13
	DD	06H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$20
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$1
	DD	08H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$54
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$84
	DD	09H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$3
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$167
	DD	0dH
	DD	00H
	DD	0eH
	DD	00H
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$171
	DD	010H
	DD	00H
	DD	0dH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$168
	DD	012H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$175
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$4
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$276
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$436
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$475
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$6
	DD	018H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$508
	DD	019H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$8
	DD	01bH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$9
	DD	01bH
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$599
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$629
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0HostDevice@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2
__ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0HostDevice@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z$54 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z$54
__ehfuncinfo$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z$33
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z$57
__ehfuncinfo$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z$141 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z$0
__unwindtable$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z$141
__ehfuncinfo$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$67 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$67
__ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1HostDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1HostDevice@@QAE@XZ$0
__ehfuncinfo$??1HostDevice@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1HostDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_IsHiddenOSRunning$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_IsHiddenOSRunning$0
__tryblocktable$_IsHiddenOSRunning DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_IsHiddenOSRunning$3
__unwindtable$_IsHiddenOSRunning DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_IsHiddenOSRunning$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_IsHiddenOSRunning DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_IsHiddenOSRunning
	DD	01H
	DD	FLAT:__tryblocktable$_IsHiddenOSRunning
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_DriverUnload$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_DriverUnload$0
__tryblocktable$_DriverUnload DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_DriverUnload$7
__unwindtable$_DriverUnload DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_DriverUnload$6
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$_DriverUnload DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$_DriverUnload
	DD	01H
	DD	FLAT:__tryblocktable$_DriverUnload
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_MountVolume DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_MountVolume$26
__ehfuncinfo$_MountVolume DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_MountVolume
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_RawDevicesDlgProc@16 DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_RawDevicesDlgProc@16$23
__ehfuncinfo$_RawDevicesDlgProc@16 DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_RawDevicesDlgProc@16
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$111 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$110 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$110
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$111
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Gios_base@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Gios_base@std@@UAEPAXI@Z$0
__ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gios_base@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@ios_base@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Init@ios_base@std@@IAEXXZ$0
__ehfuncinfo$?_Init@ios_base@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Init@ios_base@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$1
__ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Glocale@std@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_Glocale@std@@QAEPAXI@Z$0
__ehfuncinfo$??_Glocale@std@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Glocale@std@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$111 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$110 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$110
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$111
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
??_E?$basic_iostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@_WU?$char_traits@_W@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_iostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$get@$0A@ABH@std@@YAABH$$QAV?$tuple@ABH@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$0A@ABH@std@@YAABH$$QAV?$tuple@ABH@0@@Z PROC	; std::get<0,int const &>, COMDAT

; 903  : 	{	// get rvalue reference to _Index element of tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 904  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
; 905  : 		_Ttype;
; 906  : 	typedef typename tuple_element<_Index, tuple<_Types...> >::type&&
; 907  : 		_RRtype;
; 908  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 909  : 	}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
??$get@$0A@ABH@std@@YAABH$$QAV?$tuple@ABH@0@@Z ENDP	; std::get<0,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABH@std@@@std@@YA$$QAV?$tuple@ABH@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABH@std@@@std@@YA$$QAV?$tuple@ABH@0@AAV10@@Z PROC ; std::move<std::tuple<int const &> &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$tuple@ABH@std@@@std@@YA$$QAV?$tuple@ABH@0@AAV10@@Z ENDP ; std::move<std::tuple<int const &> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0V?$tuple@ABH@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBHUHostDevice@@@std@@QAE@AAV?$tuple@ABH@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABH@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBHUHostDevice@@@std@@QAE@AAV?$tuple@ABH@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><std::tuple<int const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 1180 : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1178 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  00004	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	89 01		 mov	 DWORD PTR [ecx], eax

; 1179 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00010	33 c0		 xor	 eax, eax
  00012	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00019	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
  0001f	c6 41 0e 00	 mov	 BYTE PTR [ecx+14], 0
  00023	c7 41 24 0f 00
	00 00		 mov	 DWORD PTR [ecx+36], 15	; 0000000fH
  0002a	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00031	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
  00035	c7 41 3c 07 00
	00 00		 mov	 DWORD PTR [ecx+60], 7
  0003c	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  00043	66 89 41 28	 mov	 WORD PTR [ecx+40], ax
  00047	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  0004a	c7 41 54 0f 00
	00 00		 mov	 DWORD PTR [ecx+84], 15	; 0000000fH
  00051	88 41 40	 mov	 BYTE PTR [ecx+64], al
  00054	88 41 58	 mov	 BYTE PTR [ecx+88], al
  00057	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0005a	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  0005d	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  00060	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  00063	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1181 : 		(void) _Val1;	// TRANSITION, VSO#181496
; 1182 : 		(void) _Val2;
; 1183 : 		}

  00066	8b c1		 mov	 eax, ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABH@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBHUHostDevice@@@std@@QAE@AAV?$tuple@ABH@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><std::tuple<int const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z PROC ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>, COMDAT
; _this$ = ecx

; 1196 : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1193 : 		: pair(_Val1, _Val2,

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]

; 1196 : 		{	// construct from pair of tuples

  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
  0000e	33 c0		 xor	 eax, eax
  00010	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00017	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
  0001d	c6 41 0e 00	 mov	 BYTE PTR [ecx+14], 0
  00021	c7 41 24 0f 00
	00 00		 mov	 DWORD PTR [ecx+36], 15	; 0000000fH
  00028	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  0002f	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
  00033	c7 41 3c 07 00
	00 00		 mov	 DWORD PTR [ecx+60], 7
  0003a	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  00041	66 89 41 28	 mov	 WORD PTR [ecx+40], ax
  00045	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00048	c7 41 54 0f 00
	00 00		 mov	 DWORD PTR [ecx+84], 15	; 0000000fH
  0004f	88 41 40	 mov	 BYTE PTR [ecx+64], al
  00052	88 41 58	 mov	 BYTE PTR [ecx+88], al
  00055	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00058	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  0005b	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  0005e	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  00061	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1197 : 		}

  00064	8b c1		 mov	 eax, ecx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z PROC ; std::allocator<HostDevice>::construct<HostDevice,HostDevice>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN3@construct
  00034	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@construct:

; 738  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@U1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z ENDP ; std::allocator<HostDevice>::construct<HostDevice,HostDevice>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::construct<std::pair<int const ,HostDevice>,std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 17		 je	 SHORT $LN3@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0000d	51		 push	 ecx
  0000e	51		 push	 ecx
  0000f	8b d4		 mov	 edx, esp
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	89 02		 mov	 DWORD PTR [edx], eax
  00015	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>
$LN3@construct:

; 738  : 		}

  00021	5d		 pop	 ebp
  00022	c2 10 00	 ret	 16			; 00000010H
??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::construct<std::pair<int const ,HostDevice>,std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<HostDevice> >::construct<HostDevice,HostDevice>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN8@construct
  00034	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN8@construct:

; 858  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z$1:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@U1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<HostDevice> >::construct<HostDevice,HostDevice>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UHostDevice@@@std@@YA$$QAUHostDevice@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UHostDevice@@@std@@YA$$QAUHostDevice@@AAU1@@Z PROC ; std::forward<HostDevice>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UHostDevice@@@std@@YA$$QAUHostDevice@@AAU1@@Z ENDP ; std::forward<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBHUHostDevice@@@std@@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHUHostDevice@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBHUHostDevice@@@std@@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHUHostDevice@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode_if_nil<std::pair<int const ,HostDevice> &>, COMDAT
; _this$ = ecx

; 1629 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1630 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1631 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBHUHostDevice@@@std@@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHUHostDevice@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode_if_nil<std::pair<int const ,HostDevice> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::pair<int const ,HostDevice>,std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 17		 je	 SHORT $LN14@construct
  0000a	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0000d	51		 push	 ecx
  0000e	51		 push	 ecx
  0000f	8b d4		 mov	 edx, esp
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	89 02		 mov	 DWORD PTR [edx], eax
  00015	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>
$LN14@construct:

; 858  : 		}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::pair<int const ,HostDevice>,std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::construct<HostDevice,HostDevice>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN13@construct
  00034	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@U1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::construct<HostDevice,HostDevice>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UHostDevice@@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UHostDevice@@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z PROC ; std::allocator<HostDevice>::destroy<HostDevice>, COMDAT
; _this$ = ecx

; 743  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 744  : 		_Ptr->~_Uty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 745  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??$destroy@UHostDevice@@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@@Z ENDP ; std::allocator<HostDevice>::destroy<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@KK@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAK$$QAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KK@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAK$$QAK@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::construct<unsigned long,unsigned long>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@KK@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAK$$QAK@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::construct<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@KABK@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KABK@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAKABK@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::construct<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@KABK@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAKABK@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_nohint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT
; _this$ = ecx

; 1771 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1772 : 		_TRY_BEGIN
; 1773 : 		_Nodeptr _Trynode = _Root();

  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1774 : 		_Nodeptr _Wherenode = this->_Myhead();

  00030	8b fa		 mov	 edi, edx
  00032	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 1775 : 		bool _Addleft = true;	// add to left of head if tree empty

  0003f	b2 01		 mov	 dl, 1
  00041	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1776 : 
; 1777 : 		while (!this->_Isnil(_Trynode))

  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	75 31		 jne	 SHORT $LN3@Insert_noh
  0004a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004c	8a 75 0c	 mov	 dh, BYTE PTR __Leftish$[ebp]
  0004f	90		 npad	 1
$LL2@Insert_noh:

; 1778 : 			{	// look for leaf to insert before (_Addleft) or after
; 1779 : 			_Wherenode = _Trynode;

  00050	8b f8		 mov	 edi, eax

; 1780 : 			if (_Leftish)

  00052	84 f6		 test	 dh, dh
  00054	74 08		 je	 SHORT $LN5@Insert_noh

; 1781 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  00056	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00059	0f 9d c2	 setge	 dl

; 1782 : 					this->_Key(_Trynode),
; 1783 : 					this->_Kfn(_Val));	// favor left end
; 1784 : 			else

  0005c	eb 06		 jmp	 SHORT $LN301@Insert_noh
$LN5@Insert_noh:

; 1785 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  0005e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00061	0f 9c c2	 setl	 dl
$LN301@Insert_noh:
  00064	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1786 : 					this->_Kfn(_Val),
; 1787 : 					this->_Key(_Trynode));	// favor right end
; 1788 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  00067	84 d2		 test	 dl, dl
  00069	74 04		 je	 SHORT $LN16@Insert_noh
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  0006f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN17@Insert_noh:

; 1776 : 
; 1777 : 		while (!this->_Isnil(_Trynode))

  00072	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00076	74 d8		 je	 SHORT $LL2@Insert_noh
  00078	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
$LN3@Insert_noh:

; 1789 : 				: this->_Right(_Trynode);
; 1790 : 			}
; 1791 : 
; 1792 : 		if (this->_Multi)
; 1793 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1794 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1795 : 		else
; 1796 : 			{	// insert only if unique
; 1797 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());

  0007b	8b f7		 mov	 esi, edi
  0007d	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1798 : 			if (!_Addleft)

  00080	84 d2		 test	 dl, dl
  00082	74 40		 je	 SHORT $LN12@Insert_noh

; 1799 : 				;	// need to test if insert after is okay
; 1800 : 			else if (_Where == begin())

  00084	8b 01		 mov	 eax, DWORD PTR [ecx]
  00086	3b 38		 cmp	 edi, DWORD PTR [eax]
  00088	75 2f		 jne	 SHORT $LN11@Insert_noh

; 1801 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008a	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0008d	53		 push	 ebx
  0008e	57		 push	 edi
  0008f	6a 01		 push	 1
$LN303@Insert_noh:
  00091	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009f	89 08		 mov	 DWORD PTR [eax], ecx
  000a1	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 1820 : 		_CATCH_END
; 1821 : 		}

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 1802 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 			else
; 1804 : 				--_Where;	// need to test if insert before is okay

  000b9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  000bc	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--
  000c1	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:

; 1805 : 
; 1806 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  000c4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000c7	3b 03		 cmp	 eax, DWORD PTR [ebx]
  000c9	7d 21		 jge	 SHORT $LN13@Insert_noh

; 1807 : 				this->_Key(_Where._Mynode()),
; 1808 : 				this->_Kfn(_Val)))
; 1809 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000cb	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	53		 push	 ebx
  000d2	57		 push	 edi
  000d3	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  000d6	eb b9		 jmp	 SHORT $LN303@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$0:

; 1815 : 				}
; 1816 : 			}
; 1817 : 		_CATCH_ALL
; 1818 : 		_Destroy_if_not_nil(_Newnode);

  000d8	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000db	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Destroy_if_not_nil

; 1819 : 		_RERAISE;

  000e3	6a 00		 push	 0
  000e5	6a 00		 push	 0
  000e7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN304@Insert_noh:
$LN13@Insert_noh:

; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				{	// duplicate, don't insert
; 1813 : 				_Destroy_if_not_nil(_Newnode);

  000ec	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  000ef	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  000f2	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1814 : 				return (_Pairib(_Where, false));

  000fd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00100	83 c4 04	 add	 esp, 4
  00103	89 30		 mov	 DWORD PTR [eax], esi
  00105	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 1820 : 		_CATCH_END
; 1821 : 		}

  00109	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0010c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00113	59		 pop	 ecx
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 10 00	 ret	 16			; 00000010H
$LN300@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_nohint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT
; _this$ = ecx

; 1827 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1828 : 		if (max_size() - 1 <= this->_Mysize())

  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	3d e0 e1 e1 01	 cmp	 eax, 31580640		; 01e1e1e0H
  00010	0f 83 6e 01 00
	00		 jae	 $LN740@Insert_at

; 1832 : 			}
; 1833 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1834 : 			_STD forward<_Valty>(_Val));
; 1835 : 
; 1836 : 		++this->_Mysize();
; 1837 : 		_Newnode->_Parent = _Wherenode;

  00016	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00019	40		 inc	 eax
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1838 : 
; 1839 : 		if (_Wherenode == this->_Myhead())

  00023	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00025	3b c1		 cmp	 eax, ecx
  00027	75 0e		 jne	 SHORT $LN6@Insert_at

; 1840 : 			{	// first node in tree, just set head values
; 1841 : 			_Root() = _Newnode;

  00029	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 1842 : 			_Lmost() = _Newnode;

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	89 18		 mov	 DWORD PTR [eax], ebx

; 1843 : 			_Rmost() = _Newnode;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00035	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1844 : 			}
; 1845 : 		else if (_Addleft)

  00037	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003b	74 0c		 je	 SHORT $LN8@Insert_at

; 1846 : 			{	// add to left of _Wherenode
; 1847 : 			this->_Left(_Wherenode) = _Newnode;

  0003d	89 18		 mov	 DWORD PTR [eax], ebx

; 1848 : 			if (_Wherenode == _Lmost())

  0003f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00041	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00043	75 11		 jne	 SHORT $LN11@Insert_at

; 1849 : 				_Lmost() = _Newnode;

  00045	89 19		 mov	 DWORD PTR [ecx], ebx

; 1850 : 			}
; 1851 : 		else

  00047	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1852 : 			{	// add to right of _Wherenode
; 1853 : 			this->_Right(_Wherenode) = _Newnode;

  00049	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 1854 : 			if (_Wherenode == _Rmost())

  0004c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0004e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00051	75 03		 jne	 SHORT $LN11@Insert_at

; 1855 : 				_Rmost() = _Newnode;

  00053	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1856 : 			}
; 1857 : 
; 1858 : 		for (_Nodeptr _Pnode = _Newnode;
; 1859 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00056	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00059	8b f3		 mov	 esi, ebx
  0005b	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0005f	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 1860 : 			if (this->_Parent(_Pnode)
; 1861 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00065	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00068	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0006b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	75 74		 jne	 SHORT $LN12@Insert_at

; 1862 : 				{	// fixup red-red in left subtree
; 1863 : 				_Wherenode =

  00071	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1864 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1865 : 				if (this->_Color(_Wherenode) == this->_Red)

  00074	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00078	74 71		 je	 SHORT $LN739@Insert_at

; 1866 : 					{	// parent has two red children, blacken both
; 1867 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1868 : 					this->_Color(_Wherenode) = this->_Black;
; 1869 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1870 : 						= this->_Red;
; 1871 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1872 : 					}
; 1873 : 				else
; 1874 : 					{	// parent has red and black children
; 1875 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0007a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0007d	75 0a		 jne	 SHORT $LN16@Insert_at

; 1876 : 						{	// rotate right child to left
; 1877 : 						_Pnode = this->_Parent(_Pnode);

  0007f	8b f0		 mov	 esi, eax

; 1878 : 						_Lrotate(_Pnode);

  00081	8b cf		 mov	 ecx, edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate
$LN16@Insert_at:

; 1879 : 						}
; 1880 : 					this->_Color(this->_Parent(_Pnode)) =

  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1881 : 						this->_Black;	// propagate red up
; 1882 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00096	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1883 : 						this->_Red;
; 1884 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  0009a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax
  000a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	75 03		 jne	 SHORT $LN386@Insert_at
  000b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN386@Insert_at:
  000b3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b6	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000b9	8b 07		 mov	 eax, DWORD PTR [edi]
  000bb	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000be	75 0b		 jne	 SHORT $LN387@Insert_at
  000c0	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000c3	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

  000c6	e9 94 00 00 00	 jmp	 $LN738@Insert_at

; 1883 : 						this->_Red;
; 1884 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN387@Insert_at:
  000cb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ce	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d1	75 0b		 jne	 SHORT $LN389@Insert_at
  000d3	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000d6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

  000d9	e9 81 00 00 00	 jmp	 $LN738@Insert_at

; 1883 : 						this->_Red;
; 1884 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN389@Insert_at:
  000de	89 10		 mov	 DWORD PTR [eax], edx
  000e0	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

  000e3	eb 7a		 jmp	 SHORT $LN738@Insert_at
$LN12@Insert_at:

; 1888 : 				{	// fixup red-red in right subtree
; 1889 : 				_Wherenode =
; 1890 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1891 : 				if (this->_Color(_Wherenode) == this->_Red)

  000e5	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000e9	75 1a		 jne	 SHORT $LN17@Insert_at
$LN739@Insert_at:

; 1892 : 					{	// parent has two red children, blacken both
; 1893 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000eb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1894 : 					this->_Color(_Wherenode) = this->_Black;

  000ef	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1895 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1896 : 						this->_Red;
; 1897 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000fd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00100	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1898 : 					}
; 1899 : 				else

  00103	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1900 : 					{	// parent has red and black children
; 1901 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00105	3b 30		 cmp	 esi, DWORD PTR [eax]
  00107	75 0a		 jne	 SHORT $LN19@Insert_at

; 1902 : 						{	// rotate left child to right
; 1903 : 						_Pnode = this->_Parent(_Pnode);

  00109	8b f0		 mov	 esi, eax

; 1904 : 						_Rrotate(_Pnode);

  0010b	8b cf		 mov	 ecx, edi
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
$LN19@Insert_at:

; 1905 : 						}
; 1906 : 					this->_Color(this->_Parent(_Pnode)) =

  00113	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00116	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1907 : 						this->_Black;	// propagate red up
; 1908 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0011a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1909 : 						this->_Red;
; 1910 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00124	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00127	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0012d	8b 02		 mov	 eax, DWORD PTR [edx]
  0012f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00132	8b 02		 mov	 eax, DWORD PTR [edx]
  00134	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00138	75 03		 jne	 SHORT $LN585@Insert_at
  0013a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN585@Insert_at:
  0013d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00140	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00143	8b 07		 mov	 eax, DWORD PTR [edi]
  00145	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00148	75 05		 jne	 SHORT $LN586@Insert_at
  0014a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0014d	eb 0e		 jmp	 SHORT $LN589@Insert_at
$LN586@Insert_at:
  0014f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00152	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00154	75 04		 jne	 SHORT $LN588@Insert_at
  00156	89 10		 mov	 DWORD PTR [eax], edx
  00158	eb 03		 jmp	 SHORT $LN589@Insert_at
$LN588@Insert_at:
  0015a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN589@Insert_at:
  0015d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN738@Insert_at:
  0015f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1856 : 			}
; 1857 : 
; 1858 : 		for (_Nodeptr _Pnode = _Newnode;
; 1859 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00162	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00165	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00169	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1911 : 					}
; 1912 : 				}
; 1913 : 
; 1914 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00176	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1915 : 		return (iterator(_Newnode, &this->_Get_data()));

  0017a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017d	89 18		 mov	 DWORD PTR [eax], ebx
  0017f	5b		 pop	 ebx

; 1916 : 		}

  00180	5d		 pop	 ebp
  00181	c2 14 00	 ret	 20			; 00000014H
$LN740@Insert_at:

; 1829 : 			{	// tree would get too big, fail
; 1830 : 			_Destroy_if_not_nil(_Node);

  00184	8b 75 18	 mov	 esi, DWORD PTR __Node$[ebp]
  00187	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0018a	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0018f	56		 push	 esi
  00190	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00195	83 c4 04	 add	 esp, 4

; 1831 : 			_Xlength_error("map/set<T> too long");

  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0019d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN742@Insert_at:
$LN737@Insert_at:
  001a2	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBHUHostDevice@@@std@@@std@@YAAAU?$pair@$$CBHUHostDevice@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBHUHostDevice@@@std@@@std@@YAAAU?$pair@$$CBHUHostDevice@@@0@AAU10@@Z PROC ; std::forward<std::pair<int const ,HostDevice> &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBHUHostDevice@@@std@@@std@@YAAAU?$pair@$$CBHUHostDevice@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int const ,HostDevice> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::pair<int const ,HostDevice>,std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 17		 je	 SHORT $LN25@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0000d	51		 push	 ecx
  0000e	51		 push	 ecx
  0000f	8b d4		 mov	 edx, esp
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	89 02		 mov	 DWORD PTR [edx], eax
  00015	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>
$LN25@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00021	5d		 pop	 ebp
  00022	c2 10 00	 ret	 16			; 00000010H
??$construct@U?$pair@$$CBHUHostDevice@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::pair<int const ,HostDevice>,std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0ABH@?$_Tuple_val@ABH@std@@QAE@ABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$?0ABH@?$_Tuple_val@ABH@std@@QAE@ABH@Z PROC		; std::_Tuple_val<int const &>::_Tuple_val<int const &><int const &>, COMDAT
; _this$ = ecx

; 164  : 		{	// construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  : 		: _Val(_STD forward<_Other>(_Arg))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 165  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0ABH@?$_Tuple_val@ABH@std@@QAE@ABH@Z ENDP		; std::_Tuple_val<int const &>::_Tuple_val<int const &><int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1><std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > > >, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 290  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c2 08 00	 ret	 8
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1><std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T2 = 12						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 273  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 274  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 275  : 
; 276  : 	_TRY_BEGIN

  0002e	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00031	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00034	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	66 90		 npad	 2
$LL4@Uninitiali:

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	74 3c		 je	 SHORT $LN3@Uninitiali

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));

  00044	89 75 0c	 mov	 DWORD PTR $T2[ebp], esi
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004b	85 f6		 test	 esi, esi
  0004d	74 08		 je	 SHORT $LN28@Uninitiali
  0004f	57		 push	 edi
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN28@Uninitiali:
  00057	83 c6 70	 add	 esi, 112		; 00000070H
  0005a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0005e	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00061	83 c7 70	 add	 edi, 112		; 00000070H
  00064	eb da		 jmp	 SHORT $LL4@Uninitiali
__catch$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0:

; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);

  00066	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00069	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0006c	ff 75 ec	 push	 DWORD PTR __Next$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice>,HostDevice *>
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 281  : 	_RERAISE;

  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN41@Uninitiali:
$LN3@Uninitiali:

; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

  00080	8b c6		 mov	 eax, esi

; 285  : 	}

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN40@Uninitiali:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$5:
  00000	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00003	50		 push	 eax
  00004	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@UHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUHostDevice@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@UHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUHostDevice@@0@Z PROC ; std::_Ptr_move_cat<HostDevice,HostDevice>, COMDAT

; 810  : 	return {};

  00000	32 c0		 xor	 al, al

; 811  : 	}

  00002	c3		 ret	 0
??$_Ptr_move_cat@UHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUHostDevice@@0@Z ENDP ; std::_Ptr_move_cat<HostDevice,HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAUHostDevice@@@std@@YA$$QAUHostDevice@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUHostDevice@@@std@@YA$$QAUHostDevice@@AAU1@@Z PROC ; std::move<HostDevice &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUHostDevice@@@std@@YA$$QAUHostDevice@@AAU1@@Z ENDP ; std::move<HostDevice &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UHostDevice@@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UHostDevice@@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@@Z PROC ; std::allocator_traits<std::allocator<HostDevice> >::destroy<HostDevice>, COMDAT

; 863  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 864  : 		_Al.destroy(_Ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 865  : 		}

  00006	5d		 pop	 ebp

; 864  : 		_Al.destroy(_Ptr);

  00007	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$destroy@UHostDevice@@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@@Z ENDP ; std::allocator_traits<std::allocator<HostDevice> >::destroy<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T2 = 12						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 220  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 221  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 222  : 
; 223  : 	_TRY_BEGIN

  0002e	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00031	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00034	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	66 90		 npad	 2
$LL4@Uninitiali:

; 224  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	74 3c		 je	 SHORT $LN3@Uninitiali

; 225  : 		_Al.construct(_Unfancy(_Dest), *_First);

  00044	89 75 0c	 mov	 DWORD PTR $T2[ebp], esi
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004b	85 f6		 test	 esi, esi
  0004d	74 08		 je	 SHORT $LN25@Uninitiali
  0004f	57		 push	 edi
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN25@Uninitiali:
  00057	83 c6 70	 add	 esi, 112		; 00000070H
  0005a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0005e	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00061	83 c7 70	 add	 edi, 112		; 00000070H
  00064	eb da		 jmp	 SHORT $LL4@Uninitiali
__catch$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0:

; 226  : 	_CATCH_ALL
; 227  : 	_Destroy_range(_Next, _Dest, _Al);

  00066	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00069	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0006c	ff 75 ec	 push	 DWORD PTR __Next$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice>,HostDevice *>
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 228  : 	_RERAISE;

  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN106@Uninitiali:
$LN3@Uninitiali:

; 229  : 	_CATCH_END
; 230  : 
; 231  : 	return (_Dest);

  00080	8b c6		 mov	 eax, esi

; 232  : 	}

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN105@Uninitiali:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$4:
  00000	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00003	50		 push	 eax
  00004	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_copy_cat@$$CBUHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQBUHostDevice@@ABQAU2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_copy_cat@$$CBUHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQBUHostDevice@@ABQAU2@@Z PROC ; std::_Ptr_copy_cat<HostDevice const ,HostDevice>, COMDAT

; 793  : 	return {};

  00000	32 c0		 xor	 al, al

; 794  : 	}

  00002	c3		 ret	 0
??$_Ptr_copy_cat@$$CBUHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQBUHostDevice@@ABQAU2@@Z ENDP ; std::_Ptr_copy_cat<HostDevice const ,HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 554  : 		constexpr _Any_tag(_Ty&&) _NOEXCEPT {}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T2 = 12						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 220  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 221  : 	_FwdIt _Next = _Dest;

  0002b	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 222  : 
; 223  : 	_TRY_BEGIN

  0002e	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00031	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00034	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	66 90		 npad	 2
$LL4@Uninitiali:

; 224  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00040	3b fb		 cmp	 edi, ebx
  00042	74 3c		 je	 SHORT $LN3@Uninitiali

; 225  : 		_Al.construct(_Unfancy(_Dest), *_First);

  00044	89 75 0c	 mov	 DWORD PTR $T2[ebp], esi
  00047	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0004b	85 f6		 test	 esi, esi
  0004d	74 08		 je	 SHORT $LN25@Uninitiali
  0004f	57		 push	 edi
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN25@Uninitiali:
  00057	83 c6 70	 add	 esi, 112		; 00000070H
  0005a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0005e	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00061	83 c7 70	 add	 edi, 112		; 00000070H
  00064	eb da		 jmp	 SHORT $LL4@Uninitiali
__catch$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0:

; 226  : 	_CATCH_ALL
; 227  : 	_Destroy_range(_Next, _Dest, _Al);

  00066	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00069	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0006c	ff 75 ec	 push	 DWORD PTR __Next$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<HostDevice>,HostDevice *>
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 228  : 	_RERAISE;

  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@Uninitiali:
$LN3@Uninitiali:

; 229  : 	_CATCH_END
; 230  : 
; 231  : 	return (_Dest);

  00080	8b c6		 mov	 eax, esi

; 232  : 	}

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN37@Uninitiali:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$4:
  00000	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00003	50		 push	 eax
  00004	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@KK@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAK$$QAK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@KK@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAK$$QAK@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@KK@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAK$$QAK@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@KABK@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAKABK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@KABK@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAKABK@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long const &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@KABK@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAKABK@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > > &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T2 = -32						; size = 8
_this$ = -28						; size = 4
tv1369 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_hint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT
; _this$ = ecx

; 1655 : 		{	// try to insert node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e4	 mov	 DWORD PTR _this$[ebp], ebx

; 1656 : 		const_iterator _Next;
; 1657 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1658 : 
; 1659 : 		_TRY_BEGIN
; 1660 : 
; 1661 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1662 : 		if (_Where._Getcont() != &this->_Get_data())
; 1663 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1664 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1665 : 
; 1666 : 		if (size() == 0)

  00030	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003b	75 29		 jne	 SHORT $LN3@Insert_hin

; 1667 : 			return (_Insert_at(true, this->_Myhead(),

  0003d	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00040	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00043	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00046	ff 33		 push	 DWORD PTR [ebx]
  00048	6a 01		 push	 1
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00050	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 10 00	 ret	 16			; 00000010H
$LN3@Insert_hin:

; 1668 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1669 : 		else if (this->_Multi)
; 1670 : 			{	// insert even if duplicate
; 1671 : 			if (_Where == begin())
; 1672 : 				{	// insert at beginning if before first element
; 1673 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1674 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1675 : 					return (_Insert_at(true, _Where._Mynode(),
; 1676 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1677 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1678 : 				}
; 1679 : 			else if (_Where == end())
; 1680 : 				{	// insert at end if after last element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1683 : 					return (_Insert_at(false, _Rmost(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				}
; 1686 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1687 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1688 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1689 : 					this->_Kfn(_Val),
; 1690 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1691 : 				{	// insert before _Where
; 1692 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1693 : 					return (_Insert_at(false, _Next._Mynode(),
; 1694 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1695 : 				else
; 1696 : 					return (_Insert_at(true, _Where._Mynode(),
; 1697 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1698 : 				}
; 1699 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1700 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1701 : 				&& (++(_Next = _Where) == end()
; 1702 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1703 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1704 : 				{	// insert after _Where
; 1705 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1706 : 					return (_Insert_at(false, _Where._Mynode(),
; 1707 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1708 : 				else
; 1709 : 					return (_Insert_at(true, _Next._Mynode(),
; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 				}
; 1712 : 			else
; 1713 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1714 : 			}
; 1715 : 		else
; 1716 : 			{	// insert only if unique
; 1717 : 			if (_Where == begin())

  00066	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00068	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]
  0006b	3b 37		 cmp	 esi, DWORD PTR [edi]
  0006d	75 36		 jne	 SHORT $LN22@Insert_hin

; 1718 : 				{	// insert at beginning if before first element
; 1719 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  0006f	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00077	0f 8d 6f 01 00
	00		 jge	 $LN35@Insert_hin

; 1720 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1721 : 					return (_Insert_at(true, _Where._Mynode(),

  0007d	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00080	51		 push	 ecx
  00081	56		 push	 esi
  00082	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00085	8b cb		 mov	 ecx, ebx
  00087	6a 01		 push	 1
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  0008f	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 10 00	 ret	 16			; 00000010H
$LN22@Insert_hin:

; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				}
; 1724 : 			else if (_Where == end())

  000a5	3b f7		 cmp	 esi, edi
  000a7	75 39		 jne	 SHORT $LN25@Insert_hin

; 1725 : 				{	// insert at end if after last element
; 1726 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  000a9	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000ac	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  000af	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000b2	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000b4	0f 8d 32 01 00
	00		 jge	 $LN35@Insert_hin

; 1727 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1728 : 					return (_Insert_at(false, _Rmost(),

  000ba	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000bd	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  000c0	51		 push	 ecx
  000c1	52		 push	 edx
  000c2	6a 00		 push	 0
  000c4	56		 push	 esi
  000c5	8b cb		 mov	 ecx, ebx
  000c7	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  000cc	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 10 00	 ret	 16			; 00000010H
$LN25@Insert_hin:

; 1729 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1730 : 				}
; 1731 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1732 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  000e2	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  000e5	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000e8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ea	89 45 e8	 mov	 DWORD PTR tv1369[ebp], eax
  000ed	3b c8		 cmp	 ecx, eax
  000ef	7e 72		 jle	 SHORT $LN757@Insert_hin
  000f1	8d 4d ec	 lea	 ecx, DWORD PTR __Next$[ebp]
  000f4	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  000f7	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--
  000fc	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR tv1369[ebp]
  00102	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00105	7d 55		 jge	 SHORT $LN754@Insert_hin

; 1734 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1735 : 					this->_Kfn(_Val)))
; 1736 : 				{	// insert before _Where
; 1737 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

  00107	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1738 : 					return (_Insert_at(false, _Next._Mynode(),

  0010a	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0010d	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00110	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00114	8b cb		 mov	 ecx, ebx
  00116	74 22		 je	 SHORT $LN30@Insert_hin
  00118	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0011b	50		 push	 eax
  0011c	6a 00		 push	 0
  0011e	56		 push	 esi
  0011f	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00124	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
$LN30@Insert_hin:

; 1739 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1740 : 				else
; 1741 : 					return (_Insert_at(true, _Where._Mynode(),

  0013a	56		 push	 esi
  0013b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0013e	6a 01		 push	 1
  00140	56		 push	 esi
  00141	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00146	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  00148	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0014b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00152	59		 pop	 ecx
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 10 00	 ret	 16			; 00000010H
$LN754@Insert_hin:
  0015c	8b c1		 mov	 eax, ecx
  0015e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 1742 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1743 : 				}
; 1744 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1745 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1746 : 				&& (++(_Next = _Where) == end()

  00161	3b c8		 cmp	 ecx, eax
$LN757@Insert_hin:
  00163	0f 8d 83 00 00
	00		 jge	 $LN35@Insert_hin
  00169	8d 4d ec	 lea	 ecx, DWORD PTR __Next$[ebp]
  0016c	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  0016f	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++
  00174	8b 45 ec	 mov	 eax, DWORD PTR __Next$[ebp]
  00177	3b c7		 cmp	 eax, edi
  00179	74 08		 je	 SHORT $LN33@Insert_hin
  0017b	8b 4d e8	 mov	 ecx, DWORD PTR tv1369[ebp]
  0017e	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00181	7d 69		 jge	 SHORT $LN35@Insert_hin
$LN33@Insert_hin:

; 1747 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1749 : 				{	// insert after _Where
; 1750 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

  00183	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1751 : 					return (_Insert_at(false, _Where._Mynode(),

  00186	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00189	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  0018c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00190	8b cb		 mov	 ecx, ebx
  00192	74 22		 je	 SHORT $LN34@Insert_hin
  00194	56		 push	 esi
  00195	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00198	6a 00		 push	 0
  0019a	56		 push	 esi
  0019b	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  001a0	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  001a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ac	59		 pop	 ecx
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 10 00	 ret	 16			; 00000010H
$LN34@Insert_hin:

; 1752 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1753 : 				else
; 1754 : 					return (_Insert_at(true, _Next._Mynode(),

  001b6	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  001b9	50		 push	 eax
  001ba	6a 01		 push	 1
  001bc	56		 push	 esi
  001bd	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAU?$pair@$$CBHUHostDevice@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_at<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  001c2	8b c6		 mov	 eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  001c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ce	59		 pop	 ecx
  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 10 00	 ret	 16			; 00000010H
__catch$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z$0:

; 1755 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1756 : 				}
; 1757 : 			}
; 1758 : 		_CATCH_ALL
; 1759 : 		_Destroy_if_not_nil(_Newnode);

  001d8	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  001db	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001de	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Destroy_if_not_nil

; 1760 : 		_RERAISE;

  001e3	6a 00		 push	 0
  001e5	6a 00		 push	 0
  001e7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN758@Insert_hin:
$LN35@Insert_hin:

; 1761 : 		_CATCH_END
; 1762 : 
; 1763 : 		return (_Insert_nohint(_Leftish,

  001ec	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  001ef	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  001f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001f9	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  001fc	8b cb		 mov	 ecx, ebx
  001fe	6a 00		 push	 0
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_nohint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00206	8b 08		 mov	 ecx, DWORD PTR [eax]
  00208	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0020b	89 08		 mov	 DWORD PTR [eax], ecx

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

  0020d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00210	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00217	59		 pop	 ecx
  00218	5f		 pop	 edi
  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c2 10 00	 ret	 16			; 00000010H
$LN756@Insert_hin:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_hint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 880  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 881  : 		_Nodeptr _Pnode = _Buynode0();

  00005	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode0
  0000a	8b f0		 mov	 esi, eax

; 882  : 
; 883  : 		this->_Color(_Pnode) = _Red;
; 884  : 		this->_Isnil(_Pnode) = false;
; 885  : 
; 886  : 		_TRY_BEGIN
; 887  : 		this->_Getal().construct(

  0000c	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0000f	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
  00015	85 c9		 test	 ecx, ecx
  00017	74 19		 je	 SHORT $LN65@Buynode
  00019	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_1>$[ebp]
  0001c	51		 push	 ecx
  0001d	51		 push	 ecx
  0001e	8b d4		 mov	 edx, esp
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	89 02		 mov	 DWORD PTR [edx], eax
  00024	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00027	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$?0ABH$$Z$$V@?$pair@$$CBHUHostDevice@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABH@1@V?$tuple@$$V@1@@Z ; std::pair<int const ,HostDevice>::pair<int const ,HostDevice><int const &>

; 888  : 			_STD addressof(_Myval(_Pnode)),
; 889  : 				_STD forward<_Valty>(_Val)...);
; 890  : 		_CATCH_ALL
; 891  : 		_Freenode0(_Pnode);
; 892  : 		_RERAISE;
; 893  : 		_CATCH_END
; 894  : 
; 895  : 		return (_Pnode);

  00030	8b c6		 mov	 eax, esi
$LN65@Buynode:

; 896  : 		}

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABH@std@@@std@@YA$$QAV?$tuple@ABH@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABH@std@@@std@@YA$$QAV?$tuple@ABH@0@AAV10@@Z PROC ; std::forward<std::tuple<int const &> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$tuple@ABH@std@@@std@@YA$$QAV?$tuple@ABH@0@AAV10@@Z ENDP ; std::forward<std::tuple<int const &> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0ABH$0A@@?$tuple@ABH@std@@QAE@ABH@Z
_TEXT	SEGMENT
__This_arg$ = 8						; size = 4
??$?0ABH$0A@@?$tuple@ABH@std@@QAE@ABH@Z PROC		; std::tuple<int const &>::tuple<int const &><int const &,0>, COMDAT
; _this$ = ecx

; 428  : 		{	// construct from one or more copied elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 427  : 		: _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 429  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0ABH$0A@@?$tuple@ABH@std@@QAE@ABH@Z ENDP		; std::tuple<int const &>::tuple<int const &><int const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_List_node@KPAX@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_List_node@KPAX@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::_List_node<unsigned long,void *> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_List_node@KPAX@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::_List_node<unsigned long,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >, COMDAT
; _this$ = ecx

; 1426 : 		{	// insert [_First, _Last) at _Where, forward iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 1427 : 		_DEBUG_RANGE(_First, _Last);
; 1428 : 		_Iter _Next = _First;

  00030	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00033	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 1429 : 
; 1430 : 		_TRY_BEGIN

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003d	0f 1f 00	 npad	 3
$LL4@Insert_ran:

; 1431 : 		for (; _First != _Last; ++_First)

  00040	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00043	74 6b		 je	 SHORT $LN3@Insert_ran

; 1432 : 			_Insert(_Where, *_First);

  00045	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00048	83 c0 08	 add	 eax, 8
  0004b	50		 push	 eax
  0004c	8b cf		 mov	 ecx, edi
  0004e	ff 76 04	 push	 DWORD PTR [esi+4]
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>
  00057	8b d0		 mov	 edx, eax
  00059	b9 54 55 55 15	 mov	 ecx, 357913940		; 15555554H
  0005e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00061	2b c8		 sub	 ecx, eax
  00063	83 f9 01	 cmp	 ecx, 1
  00066	73 0a		 jae	 SHORT $LN38@Insert_ran
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0006d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN111@Insert_ran:
$LN38@Insert_ran:
  00072	40		 inc	 eax
  00073	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00076	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00079	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007c	89 10		 mov	 DWORD PTR [eax], edx
  0007e	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00081	8b 00		 mov	 eax, DWORD PTR [eax]
  00083	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  00086	eb b8		 jmp	 SHORT $LL4@Insert_ran
__catch$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$0:

; 1433 : 		_CATCH_ALL
; 1434 : 		for (; _Next != _First; ++_Next)

  00088	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  0008b	3b 75 0c	 cmp	 esi, DWORD PTR __First$[ebp]
  0008e	74 17		 je	 SHORT $LN6@Insert_ran
  00090	8b 7d e8	 mov	 edi, DWORD PTR _this$[ebp]
$LL7@Insert_ran:

; 1435 : 			{	// undo inserts
; 1436 : 			_Unchecked_const_iterator _Before = _Where;
; 1437 : 			_Unchecked_erase(--_Before);

  00093	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00096	8b cf		 mov	 ecx, edi
  00098	ff 70 04	 push	 DWORD PTR [eax+4]
  0009b	e8 00 00 00 00	 call	 ?_Unchecked_erase@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Unchecked_erase
  000a0	8b 36		 mov	 esi, DWORD PTR [esi]
  000a2	3b 75 0c	 cmp	 esi, DWORD PTR __First$[ebp]
  000a5	75 ec		 jne	 SHORT $LL7@Insert_ran
$LN6@Insert_ran:

; 1438 : 			}
; 1439 : 		_RERAISE;

  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@Insert_ran:
$LN3@Insert_ran:

; 1440 : 		_CATCH_END
; 1441 : 		}

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 10 00	 ret	 16			; 00000010H
$LN110@Insert_ran:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@X@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@X@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > ><std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,void>, COMDAT
; _this$ = ecx

; 611  : 		{	// construct head node, allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 612  : 		_Myhead() = _Buyheadnode();

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 613  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@X@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > ><std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::construct<std::_List_node<unsigned long,void *> *,std::_List_node<unsigned long,void *> * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::construct<std::_List_node<unsigned long,void *> *,std::_List_node<unsigned long,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::construct<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *,std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::construct<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *,std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@K@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@K@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAK@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::destroy<unsigned long>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@K@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAK@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move_al_unchecked@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 302  : 	typedef decltype(_STD move(*_First)) _Src_type; // TRANSITION MODULES VSO#222794
; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@KPAX@std@@@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@KPAX@std@@@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::destroy<std::_List_node<unsigned long,void *> *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@KPAX@std@@@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::destroy<std::_List_node<unsigned long,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0ABV?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0ABV?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UHostDevice@@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UHostDevice@@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::destroy<HostDevice>, COMDAT
; _this$ = ecx

; 1002 : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 1004 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??$destroy@UHostDevice@@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::destroy<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::destroy<std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 743  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 744  : 		_Ptr->~_Uty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8d 49 08	 lea	 ecx, DWORD PTR [ecx+8]
  00009	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 745  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::destroy<std::pair<int const ,HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy_al_unchecked@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<HostDevice const *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 248  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 249  : 	return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 250  : 		_Ptr_copy_cat(_First, _Dest),
; 251  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
; 252  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<HostDevice> > >, COMDAT

; 271  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 273  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@YAPBUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUHostDevice@@PAU1@@std@@YAAAPAUHostDevice@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUHostDevice@@PAU1@@std@@YAAAPAUHostDevice@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<HostDevice *,HostDevice *>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 458  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 459  : 	return (_Dest);
; 460  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUHostDevice@@PAU1@@std@@YAAAPAUHostDevice@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<HostDevice *,HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy_al_unchecked@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 248  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 249  : 	return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 250  : 		_Ptr_copy_cat(_First, _Dest),
; 251  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
; 252  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUHostDevice@@@std@@YAPAUHostDevice@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUHostDevice@@@std@@YAPAUHostDevice@@PAU1@@Z PROC ; std::_Unchecked<HostDevice *>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 429  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUHostDevice@@@std@@YAPAUHostDevice@@PAU1@@Z ENDP ; std::_Unchecked<HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z PROC ; std::allocator<HostDevice>::construct<HostDevice,HostDevice const &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN3@construct
  00034	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@construct:

; 738  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@ABU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@ABU2@@Z ENDP ; std::allocator<HostDevice>::construct<HostDevice,HostDevice const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z PROC ; std::allocator<HostDevice>::construct<HostDevice,HostDevice &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN3@construct
  00034	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN3@construct:

; 738  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@AAU1@@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@AAU2@@Z ENDP ; std::allocator<HostDevice>::construct<HostDevice,HostDevice &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@KK@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAK$$QAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KK@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAK$$QAK@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@KK@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAK$$QAK@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@KABK@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KABK@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAKABK@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@KABK@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAKABK@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > > &,bool,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 173  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > > &,bool,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 173  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >,bool,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
_<_Val_1>$ = 20						; size = 4
_<_Val_2>$ = 24						; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1083 : 		{	// insert value_type(_Val...) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00004	ff 75 18	 push	 DWORD PTR _<_Val_2>$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	ff 75 14	 push	 DWORD PTR _<_Val_1>$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >

; 1085 : 		return (_Insert_hint(_Where,

  00014	50		 push	 eax
  00015	83 c0 10	 add	 eax, 16			; 00000010H
  00018	8b cf		 mov	 ecx, edi
  0001a	50		 push	 eax
  0001b	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_hint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00029	5f		 pop	 edi

; 1086 : 			this->_Myval(_Newnode), _Newnode));
; 1087 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 986  : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 988  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ??0?$tuple@ABH@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tuple@ABH@std@@QAE@$$QAV01@@Z PROC			; std::tuple<int const &>::tuple<int const &>, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b c1		 mov	 eax, ecx
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??0?$tuple@ABH@std@@QAE@$$QAV01@@Z ENDP			; std::tuple<int const &>::tuple<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$forward_as_tuple@ABH@std@@YA?AV?$tuple@ABH@0@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABH@std@@YA?AV?$tuple@ABH@0@ABH@Z PROC ; std::forward_as_tuple<int const &>, COMDAT

; 986  : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 988  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$forward_as_tuple@ABH@std@@YA?AV?$tuple@ABH@0@ABH@Z ENDP ; std::forward_as_tuple<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBD@std@@YAPBDABD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBD@std@@YAPBDABD@Z PROC			; std::addressof<char const >, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBD@std@@YAPBDABD@Z ENDP			; std::addressof<char const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PBD@std@@SAPBDABD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBD@std@@SAPBDABD@Z PROC	; std::pointer_traits<char const *>::pointer_to, COMDAT

; 279  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PBD@std@@SAPBDABD@Z ENDP	; std::pointer_traits<char const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$_List_node@KPAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_List_node@KPAX@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$_List_node@KPAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_List_node@KPAX@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > ><std::allocator<std::_List_node<unsigned long,void *> > >, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$_List_node@KPAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_List_node@KPAX@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > ><std::allocator<std::_List_node<unsigned long,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Ptr$ = 12						; size = 4
__Cvt$ = 16						; size = 44
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z PROC ; std::numpunct<char>::_Getvals<char>, COMDAT
; _this$ = ecx

; 189  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 		_Dp = _MAKLOCCHR(_Elem2, _Ptr->decimal_point[0], _Cvt);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 191  : 		_Kseparator = _MAKLOCCHR(_Elem2, _Ptr->thousands_sep[0], _Cvt);

  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00014	88 41 0d	 mov	 BYTE PTR [ecx+13], al

; 192  : 		}

  00017	5d		 pop	 ebp
  00018	c2 34 00	 ret	 52			; 00000034H
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ENDP ; std::numpunct<char>::_Getvals<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 686  : 	{	// convert char to _Elem using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 687  : 	return ((_Elem)(unsigned char)_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 688  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 719  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 720  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	57		 push	 edi
  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL11@Maklocstr:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL11@Maklocstr
  00017	2b f9		 sub	 edi, ecx
  00019	47		 inc	 edi

; 721  : 
; 722  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001a	6a 01		 push	 1
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _calloc
  00022	8b d0		 mov	 edx, eax
  00024	83 c4 08	 add	 esp, 8

; 723  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 724  : 
; 725  : 	if (!_Ptrdest)

  00027	85 d2		 test	 edx, edx
  00029	74 1c		 je	 SHORT $LN13@Maklocstr

; 727  : 
; 728  :  #pragma warning(push)
; 729  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 730  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  0002b	85 ff		 test	 edi, edi
  0002d	74 12		 je	 SHORT $LN3@Maklocstr
  0002f	8b ca		 mov	 ecx, edx
  00031	2b ce		 sub	 ecx, esi
$LL4@Maklocstr:

; 731  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00033	8a 06		 mov	 al, BYTE PTR [esi]
  00035	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00038	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  0003c	83 ef 01	 sub	 edi, 1
  0003f	75 f2		 jne	 SHORT $LL4@Maklocstr
$LN3@Maklocstr:
  00041	5f		 pop	 edi

; 732  :  #pragma warning(pop)
; 733  : 
; 734  : 	return (_Ptrdest);

  00042	8b c2		 mov	 eax, edx
  00044	5e		 pop	 esi

; 735  : 	}

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN13@Maklocstr:

; 726  : 		_Xbad_alloc();

  00047	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN15@Maklocstr:
$LN12@Maklocstr:
  0004c	cc		 int	 3
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
$T2 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@00@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >, COMDAT
; _this$ = ecx

; 1382 : 		{	// insert [_First, _Last) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1383 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1384 : 		if (_Where._Getcont() != &this->_Get_data())
; 1385 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1386 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1387 : 
; 1388 : 		iterator _Prev = _Make_iter(_Where);
; 1389 : 		if (_Prev == begin())

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 1390 : 			{	// insert sequence at beginning
; 1391 : 			_Insert_range(_Where._Unchecked(), _First, _Last,

  0000a	c6 45 fc 00	 mov	 BYTE PTR $T2[ebp], 0
  0000e	8b 17		 mov	 edx, DWORD PTR [edi]
  00010	3b 02		 cmp	 eax, DWORD PTR [edx]
  00012	75 1f		 jne	 SHORT $LN2@insert
  00014	ff 75 fc	 push	 DWORD PTR $T2[ebp]
  00017	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  0001a	ff 75 10	 push	 DWORD PTR __First$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >

; 1392 : 				_Iter_cat_t<_Iter>());
; 1393 : 			return (begin());

  00023	8b 07		 mov	 eax, DWORD PTR [edi]
  00025	5f		 pop	 edi
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1399 : 				_Iter_cat_t<_Iter>());
; 1400 : 			return (++_Prev);

  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 1401 : 			}
; 1402 : 		}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
$LN2@insert:
  00033	56		 push	 esi

; 1394 : 			}
; 1395 : 		else
; 1396 : 			{	// insert sequence not at beginning
; 1397 : 			--_Prev;
; 1398 : 			_Insert_range(_Where._Unchecked(), _First, _Last,

  00034	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  00037	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0003a	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  0003d	ff 75 10	 push	 DWORD PTR __First$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >

; 1399 : 				_Iter_cat_t<_Iter>());
; 1400 : 			return (++_Prev);

  00046	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00049	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004b	5e		 pop	 esi
  0004c	5f		 pop	 edi
  0004d	89 08		 mov	 DWORD PTR [eax], ecx

; 1401 : 			}
; 1402 : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
??$insert@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@00@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::insert<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator--, COMDAT
; _this$ = ecx

; 389  : 		--(*(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 390  : 		return (*this);

  00007	8b c1		 mov	 eax, ecx

; 391  : 		}

  00009	c3		 ret	 0
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator++, COMDAT
; _this$ = ecx

; 376  : 		++(*(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 377  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 378  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 348  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 347  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 349  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@X@?$_List_buy@KV?$allocator@K@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@X@?$_List_buy@KV?$allocator@K@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z PROC ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_List_buy<unsigned long,std::allocator<unsigned long> ><std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,void>, COMDAT
; _this$ = ecx

; 825  : 		{	// construct from allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  00020	89 06		 mov	 DWORD PTR [esi], eax

; 826  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@X@?$_List_buy@KV?$allocator@K@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@1@@Z ENDP ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_List_buy<unsigned long,std::allocator<unsigned long> ><std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAPAU?$_List_node@KPAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAPAU?$_List_node@KPAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::construct<std::_List_node<unsigned long,void *> *,std::_List_node<unsigned long,void *> * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAPAU?$_List_node@KPAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::construct<std::_List_node<unsigned long,void *> *,std::_List_node<unsigned long,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@KPAX@std@@@std@@YAAAPAU?$_List_node@KPAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@KPAX@std@@@std@@YAAAPAU?$_List_node@KPAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<unsigned long,void *> * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_List_node@KPAX@std@@@std@@YAAAPAU?$_List_node@KPAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<unsigned long,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *,std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *,std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@K@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@K@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAK@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<unsigned long>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@K@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAK@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_move@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAPAU?$_List_node@KPAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAPAU?$_List_node@KPAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<std::_List_node<unsigned long,void *> *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_List_node@KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@KPAX@std@@@1@PAPAU?$_List_node@KPAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<std::_List_node<unsigned long,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 281  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z PROC ; std::forward<std::less<int> const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z ENDP ; std::forward<std::less<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 290  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 858  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c3		 ret	 0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1039 : 	}

  00000	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1052 : 	_Left = _STD move(_Right);
; 1053 : 	}

  00000	c3		 ret	 0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocca@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1039 : 	}

  00000	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z PROC ; std::forward<std::allocator<wchar_t> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ENDP ; std::forward<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<HostDevice>,HostDevice *>, COMDAT

; 1099 : 	{	// destroy [_First, _Last), no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1100 : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:

; 1101 : 		_Al.destroy(_Unfancy(_First));

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	83 c6 70	 add	 esi, 112		; 00000070H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1102 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Destroy_range1@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<HostDevice>,HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocca@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<HostDevice> > >, COMDAT

; 1039 : 	}

  00000	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@ABU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<HostDevice> > >, COMDAT

; 1052 : 	_Left = _STD move(_Right);
; 1053 : 	}

  00000	c3		 ret	 0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@UHostDevice@@@std@@@std@@YA$$QAV?$allocator@UHostDevice@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@UHostDevice@@@std@@@std@@YA$$QAV?$allocator@UHostDevice@@@0@AAV10@@Z PROC ; std::forward<std::allocator<HostDevice> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@UHostDevice@@@std@@@std@@YA$$QAV?$allocator@UHostDevice@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUHostDevice@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUHostDevice@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::pair<int const ,HostDevice> >, COMDAT

; 863  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 864  : 		_Al.destroy(_Ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8d 49 08	 lea	 ecx, DWORD PTR [ecx+8]

; 865  : 		}

  00009	5d		 pop	 ebp

; 864  : 		_Al.destroy(_Ptr);

  0000a	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUHostDevice@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::pair<int const ,HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 290  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 08 00	 ret	 8
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 796  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 797  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z PROC ; std::operator==<std::allocator<char>,std::allocator<char> >, COMDAT

; 1017 : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 1018 : 		== static_cast<const _Other&>(_Right));
; 1019 : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ENDP ; std::operator==<std::allocator<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 290  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 08 00	 ret	 8
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z PROC		; std::operator==<wchar_t,wchar_t>, COMDAT

; 796  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 797  : 	}

  00002	c3		 ret	 0
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ENDP		; std::operator==<wchar_t,wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z PROC ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 1017 : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 1018 : 		== static_cast<const _Other&>(_Right));
; 1019 : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ENDP ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@std@@YAPAUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@std@@YAPAUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 259  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 260  : 		// note: only called internally from elsewhere in the STL, debug checks
; 261  : 		// and deprecation warnings omitted
; 262  : 	return (_Rechecked(_Dest,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 263  : 		_Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 264  : 			_Unchecked(_Dest), _Al)));
; 265  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@PAUHostDevice@@V?$allocator@UHostDevice@@@2@@std@@YAPAUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1><std::_Wrap_alloc<std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 290  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c2 08 00	 ret	 8
??$?0U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1><std::_Wrap_alloc<std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<HostDevice> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >, COMDAT

; 259  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 260  : 		// note: only called internally from elsewhere in the STL, debug checks
; 261  : 		// and deprecation warnings omitted
; 262  : 	return (_Rechecked(_Dest,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 263  : 		_Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 264  : 			_Unchecked(_Dest), _Al)));
; 265  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninitialized_copy@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<HostDevice *,HostDevice *,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_unchecked1@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00U_General_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_unchecked1@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00U_General_ptr_iterator_tag@0@@Z PROC ; std::_Copy_unchecked1<HostDevice *,HostDevice *>, COMDAT

; 2314 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2315 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 1d		 je	 SHORT $LN738@Copy_unche
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL4@Copy_unche:

; 2316 : 		*_Dest = *_First;

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	83 c6 70	 add	 esi, 112		; 00000070H
  0001e	83 c7 70	 add	 edi, 112		; 00000070H
  00021	3b f3		 cmp	 esi, ebx
  00023	75 ee		 jne	 SHORT $LL4@Copy_unche

; 2317 : 	return (_Dest);

  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 2318 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN738@Copy_unche:

; 2317 : 	return (_Dest);

  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx

; 2318 : 	}

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Copy_unchecked1@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00U_General_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_unchecked1<HostDevice *,HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_copy_cat@UHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUHostDevice@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_copy_cat@UHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUHostDevice@@0@Z PROC ; std::_Ptr_copy_cat<HostDevice,HostDevice>, COMDAT

; 793  : 	return {};

  00000	32 c0		 xor	 al, al

; 794  : 	}

  00002	c3		 ret	 0
??$_Ptr_copy_cat@UHostDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUHostDevice@@0@Z ENDP ; std::_Ptr_copy_cat<HostDevice,HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8UHostDevice@@U0@@std@@YA_NABV?$allocator@UHostDevice@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UHostDevice@@U0@@std@@YA_NABV?$allocator@UHostDevice@@@0@0@Z PROC ; std::operator==<HostDevice,HostDevice>, COMDAT

; 796  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 797  : 	}

  00002	c3		 ret	 0
??$?8UHostDevice@@U0@@std@@YA_NABV?$allocator@UHostDevice@@@0@0@Z ENDP ; std::operator==<HostDevice,HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@UHostDevice@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@UHostDevice@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<HostDevice>,std::allocator<HostDevice> >, COMDAT

; 1017 : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 1018 : 		== static_cast<const _Other&>(_Right));
; 1019 : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@UHostDevice@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<HostDevice>,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<HostDevice> >::construct<HostDevice,HostDevice const &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN8@construct
  00034	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN8@construct:

; 858  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z$1:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@ABU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<HostDevice> >::construct<HostDevice,HostDevice const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUHostDevice@@@std@@YAABUHostDevice@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUHostDevice@@@std@@YAABUHostDevice@@ABU1@@Z PROC ; std::forward<HostDevice const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUHostDevice@@@std@@YAABUHostDevice@@ABU1@@Z ENDP ; std::forward<HostDevice const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<HostDevice> >::construct<HostDevice,HostDevice &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN8@construct
  00034	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN8@construct:

; 858  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z$1:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@AAU1@@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAXAAV?$allocator@UHostDevice@@@1@PAUHostDevice@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<HostDevice> >::construct<HostDevice,HostDevice &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUHostDevice@@@std@@YAAAUHostDevice@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUHostDevice@@@std@@YAAAUHostDevice@@AAU1@@Z PROC ; std::forward<HostDevice &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUHostDevice@@@std@@YAAAUHostDevice@@AAU1@@Z ENDP ; std::forward<HostDevice &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z PROC ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long>, COMDAT
; _this$ = ecx

; 831  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 832  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  00003	ff 75 0c	 push	 DWORD PTR __Prev$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Next$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0

; 833  : 
; 834  : 		_TRY_BEGIN
; 835  : 		this->_Getal().construct(

  0000e	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
  00011	85 d2		 test	 edx, edx
  00013	74 07		 je	 SHORT $LN36@Buynode
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN36@Buynode:

; 836  : 			_STD addressof(this->_Myval(_Pnode)),
; 837  : 				_STD forward<_Valty>(_Val)...);
; 838  : 		_CATCH_ALL
; 839  : 		this->_Getal().deallocate(_Pnode, 1);
; 840  : 		_RERAISE;
; 841  : 		_CATCH_END
; 842  : 
; 843  : 		return (_Pnode);
; 844  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z ENDP ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z PROC ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>, COMDAT
; _this$ = ecx

; 831  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 832  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  00003	ff 75 0c	 push	 DWORD PTR __Prev$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Next$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0

; 833  : 
; 834  : 		_TRY_BEGIN
; 835  : 		this->_Getal().construct(

  0000e	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
  00011	85 d2		 test	 edx, edx
  00013	74 07		 je	 SHORT $LN36@Buynode
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN36@Buynode:

; 836  : 			_STD addressof(this->_Myval(_Pnode)),
; 837  : 				_STD forward<_Valty>(_Val)...);
; 838  : 		_CATCH_ALL
; 839  : 		this->_Getal().deallocate(_Pnode, 1);
; 840  : 		_RERAISE;
; 841  : 		_CATCH_END
; 842  : 
; 843  : 		return (_Pnode);
; 844  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z ENDP ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABK@std@@YAABKABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABK@std@@YAABKABK@Z PROC			; std::forward<unsigned long const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABK@std@@YAABKABK@Z ENDP			; std::forward<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
$T2 = 12						; size = 4
__Keyval$ = 12						; size = 4
$T3 = 15						; size = 1
??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>, COMDAT
; _this$ = ecx

; 208  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 209  : 		iterator _Where = _Mybase::lower_bound(_Keyval);

  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0000a	56		 push	 esi
  0000b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000d	8b f0		 mov	 esi, eax
  0000f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00012	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00016	75 1d		 jne	 SHORT $LN19@Try_emplac
  00018	57		 push	 edi
  00019	8b 39		 mov	 edi, DWORD PTR [ecx]
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@Try_emplac:
  00020	39 7a 10	 cmp	 DWORD PTR [edx+16], edi
  00023	7d 05		 jge	 SHORT $LN20@Try_emplac
  00025	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00028	eb 04		 jmp	 SHORT $LN21@Try_emplac
$LN20@Try_emplac:
  0002a	8b f2		 mov	 esi, edx
  0002c	8b 12		 mov	 edx, DWORD PTR [edx]
$LN21@Try_emplac:
  0002e	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00032	74 ec		 je	 SHORT $LL18@Try_emplac
  00034	5f		 pop	 edi
$LN19@Try_emplac:

; 210  : 		if (_Where == _Mybase::end()
; 211  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

  00035	3b f0		 cmp	 esi, eax
  00037	74 18		 je	 SHORT $LN4@Try_emplac
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0003e	7c 11		 jl	 SHORT $LN4@Try_emplac

; 214  : 				_Mybase::emplace_hint(_Where,
; 215  : 					piecewise_construct,
; 216  : 					_STD forward_as_tuple(
; 217  : 						_STD forward<_Keyty>(_Keyval)),
; 218  : 					_STD forward_as_tuple(
; 219  : 						_STD forward<_Mappedty>(_Mapval)...)),
; 220  : 				true));
; 221  : 		else
; 222  : 			return (_Pairib(_Where, false));

  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00043	89 30		 mov	 DWORD PTR [eax], esi
  00045	5e		 pop	 esi
  00046	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  0004a	5b		 pop	 ebx

; 223  : 		}

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
$LN4@Try_emplac:

; 212  : 				_Keyval, _Mybase::_Key(_Where._Mynode())))
; 213  : 			return (_Pairib(

  00051	8d 45 0f	 lea	 eax, DWORD PTR $T3[ebp]
  00054	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00057	50		 push	 eax
  00058	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0005b	8b cb		 mov	 ecx, ebx
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  00063	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABH@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<int const &>,std::tuple<> >
  00068	50		 push	 eax
  00069	83 c0 10	 add	 eax, 16			; 00000010H
  0006c	8b cb		 mov	 ecx, ebx
  0006e	50		 push	 eax
  0006f	56		 push	 esi
  00070	8d 45 0c	 lea	 eax, DWORD PTR $T2[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBHUHostDevice@@@std@@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@1@AAU?$pair@$$CBHUHostDevice@@@1@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Insert_hint<std::pair<int const ,HostDevice> &,std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00079	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	89 08		 mov	 DWORD PTR [eax], ecx
  00083	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 223  : 		}

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 142  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 143  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 133  : 				this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN2@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN5@sentry
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 122  : 			: _Sentry_base(_Ostr)

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN6@sentry
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN6@sentry:

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00052	75 11		 jne	 SHORT $LN2@sentry
  00054	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 09		 je	 SHORT $LN2@sentry
  0005c	3b ce		 cmp	 ecx, esi
  0005e	74 05		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  00060	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006a	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0006f	0f 94 c0	 sete	 al
  00072	88 47 04	 mov	 BYTE PTR [edi+4], al

; 127  : 			}

  00075	8b c7		 mov	 eax, edi
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 107  : 			if (_Myostr.rdbuf() != 0)

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 109  : 			}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 			: _Myostr(_Ostr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi

; 100  : 			{	// lock the stream buffer, if there

  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN8@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@Sentry_bas:

; 103  : 			}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2469 : 	{	// test for NTCS vs. string equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2470 : 	return (_Right.compare(_Left) == 0);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	80 3a 00	 cmp	 BYTE PTR [edx], 0
  0000b	75 04		 jne	 SHORT $LN7@operator
  0000d	33 f6		 xor	 esi, esi
  0000f	eb 0e		 jmp	 SHORT $LN8@operator
$LN7@operator:
  00011	8b f2		 mov	 esi, edx
  00013	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL37@operator:
  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	46		 inc	 esi
  00019	84 c0		 test	 al, al
  0001b	75 f9		 jne	 SHORT $LL37@operator
  0001d	2b f1		 sub	 esi, ecx
$LN8@operator:
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00022	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00026	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
  00029	72 02		 jb	 SHORT $LN28@operator
  0002b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN28@operator:
  0002d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0002f	8b c6		 mov	 eax, esi
  00031	3b fe		 cmp	 edi, esi
  00033	0f 42 c7	 cmovb	 eax, edi
  00036	50		 push	 eax
  00037	52		 push	 edx
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	85 c0		 test	 eax, eax
  00043	75 16		 jne	 SHORT $LN38@operator
  00045	3b f7		 cmp	 esi, edi
  00047	76 0c		 jbe	 SHORT $LN39@operator
  00049	83 c8 ff	 or	 eax, -1
  0004c	85 c0		 test	 eax, eax
  0004e	5f		 pop	 edi
  0004f	0f 94 c0	 sete	 al
  00052	5e		 pop	 esi

; 2471 : 	}

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN39@operator:

; 2470 : 	return (_Right.compare(_Left) == 0);

  00055	1b c0		 sbb	 eax, eax
  00057	f7 d8		 neg	 eax
  00059	85 c0		 test	 eax, eax
$LN38@operator:
  0005b	5f		 pop	 edi
  0005c	0f 94 c0	 sete	 al
  0005f	5e		 pop	 esi

; 2471 : 	}

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ@YAXXZ
text$yd	SEGMENT
??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ@YAXXZ PROC ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static'', COMDAT
  00000	c3		 ret	 0
??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ@YAXXZ ENDP ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QAE@XZ PROC ; std::_Immortalizer<std::_Iostream_error_category>::~_Immortalizer<std::_Iostream_error_category>, COMDAT
; _this$ = ecx

; 687  : 		}

  00000	c3		 ret	 0
??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QAE@XZ ENDP ; std::_Immortalizer<std::_Iostream_error_category>::~_Immortalizer<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QAE@XZ PROC ; std::_Immortalizer<std::_Iostream_error_category>::_Immortalizer<std::_Iostream_error_category>, COMDAT
; _this$ = ecx

; 683  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	85 c9		 test	 ecx, ecx
  00004	74 0d		 je	 SHORT $LN3@Immortaliz

; 681  : 		{	// construct _Ty inside _Storage
; 682  : 		::new (static_cast<void *>(&_Storage)) _Ty();

  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Iostream_error_category@std@@6B@
  0000c	c7 41 04 05 00
	00 00		 mov	 DWORD PTR [ecx+4], 5
$LN3@Immortaliz:

; 683  : 		}

  00013	c3		 ret	 0
??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QAE@XZ ENDP ; std::_Immortalizer<std::_Iostream_error_category>::_Immortalizer<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__Lock$3 = -24						; size = 4
__Lock$4 = -20						; size = 4
__Psave$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 553  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d f0	 mov	 DWORD PTR __Psave$5[ebp], ebx
  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet
  0004c	57		 push	 edi
  0004d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, edi ; std::ctype<wchar_t>::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN12@use_facet:
  0006d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
$LN11@use_facet:

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00081	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00084	73 0c		 jae	 SHORT $LN20@use_facet
  00086	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00089	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
  0008c	85 f6		 test	 esi, esi
  0008e	75 77		 jne	 SHORT $LN7@use_facet
  00090	eb 02		 jmp	 SHORT $LN28@use_facet
$LN20@use_facet:
  00092	33 f6		 xor	 esi, esi
$LN28@use_facet:
  00094	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00098	74 10		 je	 SHORT $LN17@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a2	73 0a		 jae	 SHORT $LN29@use_facet
  000a4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a7	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 565  : 
; 566  : 		if (_Pf != 0)

  000aa	85 f6		 test	 esi, esi
  000ac	75 59		 jne	 SHORT $LN7@use_facet
$LN29@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  000ae	85 db		 test	 ebx, ebx
  000b0	74 04		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  000b2	8b f3		 mov	 esi, ebx
  000b4	eb 51		 jmp	 SHORT $LN7@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000b6	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000b9	8d 45 f0	 lea	 eax, DWORD PTR __Psave$5[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat
  000c2	83 c4 08	 add	 esp, 8
  000c5	83 f8 ff	 cmp	 eax, -1
  000c8	75 24		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7bad_cast@std@@6B@
  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d9	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000dc	66 0f d6 45 e0	 movq	 QWORD PTR $T2[ebp+4], xmm0
  000e1	50		 push	 eax
  000e2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@use_facet:
$LN6@use_facet:

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else
; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000ee	8b 75 f0	 mov	 esi, DWORD PTR __Psave$5[ebp]

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 586  : 			_Pfmod->_Incref();

  000f1	8b ce		 mov	 ecx, esi
  000f3	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  000f9	8b 16		 mov	 edx, DWORD PTR [esi]
  000fb	ff 52 04	 call	 DWORD PTR [edx+4]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00104	83 c4 04	 add	 esp, 4
$LN7@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00107	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0010a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0010f	8b c6		 mov	 eax, esi

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  00111	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00114	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011b	59		 pop	 ecx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
$LN31@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::construct<std::_List_node<unsigned long,void *> *,std::_List_node<unsigned long,void *> * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::construct<std::_List_node<unsigned long,void *> *,std::_List_node<unsigned long,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *,std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::construct<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *,std::_Tree_node<std::pair<int const ,HostDevice>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@K@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@K@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAK@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<unsigned long>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@K@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAK@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@K@std@@YAPAKAAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@K@std@@YAPAKAAK@Z PROC			; std::addressof<unsigned long>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@K@std@@YAPAKAAK@Z ENDP			; std::addressof<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@DX@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@DX@std@@YAXAAD0@Z PROC				; std::swap<char,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	_Ty _Tmp = _STD move(_Left);
; 50   : 	_Left = _STD move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 51   : 	_Right = _STD move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 52   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@DX@std@@YAXAAD0@Z ENDP				; std::swap<char,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT

; 279  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>, COMDAT
; _this$ = ecx

; 1658 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1659 : 		return (_Uninitialized_move(_First, _Last,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	51		 push	 ecx
  0000f	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  0001d	83 c4 18	 add	 esp, 24			; 00000018H

; 1660 : 			_Ptr, this->_Getal()));
; 1661 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Umove<HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 281  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<std::_List_node<unsigned long,void *> *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@KPAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::destroy<std::_List_node<unsigned long,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@KPAX@std@@@std@@YAPAPAU?$_List_node@KPAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@KPAX@std@@@std@@YAPAPAU?$_List_node@KPAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<unsigned long,void *> *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_List_node@KPAX@std@@@std@@YAPAPAU?$_List_node@KPAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<unsigned long,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHUHostDevice@@@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHUHostDevice@@@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@1@@Z PROC ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Kfn<int const ,HostDevice>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHUHostDevice@@@?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHUHostDevice@@@1@@Z ENDP ; std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0>::_Kfn<int const ,HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@H@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@H@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1><std::less<int> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 290  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$less@H@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1><std::less<int> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>, COMDAT
; _this$ = ecx

; 595  : 		: _Mypair(_One_then_variadic_args_t(),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 598  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 740  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 740  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 281  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@ABU10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@ABU10@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1044 : 	typename _Alty::propagate_on_container_copy_assignment _Tag;
; 1045 : 	_Pocca(_Left, _Right, _Tag);
; 1046 : 	}

  00000	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@ABU10@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1063 : 	typename _Alty::propagate_on_container_move_assignment _Tag;
; 1064 : 	_Pocma(_Left, _Right, _Tag);
; 1065 : 	}

  00000	c3		 ret	 0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 281  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@ABU10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@ABU10@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1044 : 	typename _Alty::propagate_on_container_copy_assignment _Tag;
; 1045 : 	_Pocca(_Left, _Right, _Tag);
; 1046 : 	}

  00000	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@ABU10@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<HostDevice>,HostDevice *>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN5@Destroy_ra
  0000f	90		 npad	 1
$LL6@Destroy_ra:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	83 c6 70	 add	 esi, 112		; 00000070H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Destroy_ra
$LN5@Destroy_ra:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Destroy_range@V?$allocator@UHostDevice@@@std@@PAUHostDevice@@@std@@YAXPAUHostDevice@@0AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<HostDevice>,HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1><>, COMDAT
; _this$ = ecx

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 281  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@ABU10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@ABU10@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<HostDevice> > >, COMDAT

; 1044 : 	typename _Alty::propagate_on_container_copy_assignment _Tag;
; 1045 : 	_Pocca(_Left, _Right, _Tag);
; 1046 : 	}

  00000	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@ABU10@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<HostDevice> > >, COMDAT

; 1063 : 	typename _Alty::propagate_on_container_move_assignment _Tag;
; 1064 : 	_Pocma(_Left, _Right, _Tag);
; 1065 : 	}

  00000	c3		 ret	 0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@UHostDevice@@@std@@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAV?$allocator@UHostDevice@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@UHostDevice@@@std@@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAV?$allocator@UHostDevice@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::_Wrap_alloc<std::allocator<HostDevice> ><std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 953  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@UHostDevice@@@std@@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAV?$allocator@UHostDevice@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::_Wrap_alloc<std::allocator<HostDevice> ><std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 76 08	 push	 DWORD PTR [esi+8]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000f	e8 00 00 00 00	 call	 _free
  00014	ff 76 10	 push	 DWORD PTR [esi+16]
  00017	e8 00 00 00 00	 call	 _free
  0001c	ff 76 14	 push	 DWORD PTR [esi+20]
  0001f	e8 00 00 00 00	 call	 _free
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00031	74 0b		 je	 SHORT $LN15@scalar
  00033	6a 18		 push	 24			; 00000018H
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN15@scalar:
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 257  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 258  : 		_CSTD free((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 _free

; 259  : 		_CSTD free((void *)_Falsename);

  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	e8 00 00 00 00	 call	 _free

; 260  : 		_CSTD free((void *)_Truename);

  00013	ff 76 14	 push	 DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 _free
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi

; 261  : 		}

  0001f	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 251  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 252  : 		return (string_type(_Truename));

  00004	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00019	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00020	c6 06 00	 mov	 BYTE PTR [esi], 0
  00023	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00026	75 14		 jne	 SHORT $LN115@do_truenam
  00028	33 c9		 xor	 ecx, ecx
  0002a	51		 push	 ecx
  0002b	52		 push	 edx
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi

; 253  : 		}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4

; 252  : 		return (string_type(_Truename));

$LN115@do_truenam:
  0003c	8b ca		 mov	 ecx, edx
  0003e	57		 push	 edi
  0003f	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL117@do_truenam:
  00042	8a 01		 mov	 al, BYTE PTR [ecx]
  00044	41		 inc	 ecx
  00045	84 c0		 test	 al, al
  00047	75 f9		 jne	 SHORT $LL117@do_truenam
  00049	2b cf		 sub	 ecx, edi
  0004b	5f		 pop	 edi
  0004c	51		 push	 ecx
  0004d	52		 push	 edx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi

; 253  : 		}

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 246  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 247  : 		return (string_type(_Falsename));

  00004	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00019	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00020	c6 06 00	 mov	 BYTE PTR [esi], 0
  00023	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00026	75 14		 jne	 SHORT $LN115@do_falsena
  00028	33 c9		 xor	 ecx, ecx
  0002a	51		 push	 ecx
  0002b	52		 push	 edx
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi

; 248  : 		}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4

; 247  : 		return (string_type(_Falsename));

$LN115@do_falsena:
  0003c	8b ca		 mov	 ecx, edx
  0003e	57		 push	 edi
  0003f	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL117@do_falsena:
  00042	8a 01		 mov	 al, BYTE PTR [ecx]
  00044	41		 inc	 ecx
  00045	84 c0		 test	 al, al
  00047	75 f9		 jne	 SHORT $LL117@do_falsena
  00049	2b cf		 sub	 ecx, edi
  0004b	5f		 pop	 edi
  0004c	51		 push	 ecx
  0004d	52		 push	 edx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi

; 248  : 		}

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 241  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 242  : 		return (string(_Grouping));

  00004	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00019	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00020	c6 06 00	 mov	 BYTE PTR [esi], 0
  00023	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00026	75 14		 jne	 SHORT $LN115@do_groupin
  00028	33 c9		 xor	 ecx, ecx
  0002a	51		 push	 ecx
  0002b	52		 push	 edx
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi

; 243  : 		}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4

; 242  : 		return (string(_Grouping));

$LN115@do_groupin:
  0003c	8b ca		 mov	 ecx, edx
  0003e	57		 push	 edi
  0003f	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL117@do_groupin:
  00042	8a 01		 mov	 al, BYTE PTR [ecx]
  00044	41		 inc	 ecx
  00045	84 c0		 test	 al, al
  00047	75 f9		 jne	 SHORT $LL117@do_groupin
  00049	2b cf		 sub	 ecx, edi
  0004b	5f		 pop	 edi
  0004c	51		 push	 ecx
  0004d	52		 push	 edx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi

; 243  : 		}

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 237  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 238  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 232  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 233  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T2 = -68						; size = 44
$T3 = -68						; size = 44
__Ptr$1$ = -24						; size = 4
_this$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 202  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx

; 203  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00030	e8 00 00 00 00	 call	 _localeconv
  00035	8b f0		 mov	 esi, eax

; 204  : 		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	// conversion information

  00037	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	89 75 e8	 mov	 DWORD PTR __Ptr$1$[ebp], esi
  0003e	e8 00 00 00 00	 call	 __Getcvt
  00043	83 c4 04	 add	 esp, 4

; 205  : 
; 206  : 		_Grouping = 0;

  00046	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 207  : 		_Falsename = 0;
; 208  : 		_Truename = 0;
; 209  : 
; 210  : 		_TRY_BEGIN
; 211  : 		_Grouping = _MAKLOCSTR(char, _Isdef ? "" : _Ptr->grouping,

  0004d	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  00051	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00058	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00066	74 07		 je	 SHORT $LN6@Init
  00068	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0006d	eb 03		 jmp	 SHORT $LN7@Init
$LN6@Init:
  0006f	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
$LN7@Init:
  00072	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __Getcvt
  0007b	8b fe		 mov	 edi, esi
  0007d	83 c4 04	 add	 esp, 4
  00080	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL63@Init:
  00083	8a 07		 mov	 al, BYTE PTR [edi]
  00085	47		 inc	 edi
  00086	84 c0		 test	 al, al
  00088	75 f9		 jne	 SHORT $LL63@Init
  0008a	2b f9		 sub	 edi, ecx
  0008c	47		 inc	 edi
  0008d	6a 01		 push	 1
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 _calloc
  00095	8b d0		 mov	 edx, eax
  00097	83 c4 08	 add	 esp, 8
  0009a	85 d2		 test	 edx, edx
  0009c	75 05		 jne	 SHORT $LN22@Init
  0009e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN66@Init:
$LN22@Init:
  000a3	85 ff		 test	 edi, edi
  000a5	74 17		 je	 SHORT $LN20@Init
  000a7	8b ca		 mov	 ecx, edx
  000a9	2b ce		 sub	 ecx, esi
  000ab	0f 1f 44 00 00	 npad	 5
$LL21@Init:
  000b0	8a 06		 mov	 al, BYTE PTR [esi]
  000b2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000b5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000b9	83 ef 01	 sub	 edi, 1
  000bc	75 f2		 jne	 SHORT $LL21@Init
$LN20@Init:

; 212  : 			_Lobj._Getcvt());
; 213  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Cvt);

  000be	bf 06 00 00 00	 mov	 edi, 6
  000c3	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  000c6	6a 01		 push	 1
  000c8	57		 push	 edi
  000c9	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_05LAPONLG@false?$AA@
  000ce	e8 00 00 00 00	 call	 _calloc
  000d3	8b d0		 mov	 edx, eax
  000d5	83 c4 08	 add	 esp, 8
  000d8	85 d2		 test	 edx, edx
  000da	75 05		 jne	 SHORT $LN31@Init
  000dc	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN67@Init:
$LN31@Init:
  000e1	8b ca		 mov	 ecx, edx
  000e3	81 e9 00 00 00
	00		 sub	 ecx, OFFSET ??_C@_05LAPONLG@false?$AA@
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL30@Init:
  000f0	8a 06		 mov	 al, BYTE PTR [esi]
  000f2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000f5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000f9	83 ef 01	 sub	 edi, 1
  000fc	75 f2		 jne	 SHORT $LL30@Init

; 214  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Cvt);

  000fe	bf 05 00 00 00	 mov	 edi, 5
  00103	89 53 10	 mov	 DWORD PTR [ebx+16], edx
  00106	6a 01		 push	 1
  00108	57		 push	 edi
  00109	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0010e	e8 00 00 00 00	 call	 _calloc
  00113	8b d0		 mov	 edx, eax
  00115	83 c4 08	 add	 esp, 8
  00118	85 d2		 test	 edx, edx
  0011a	75 16		 jne	 SHORT $LN39@Init
  0011c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN68@Init:
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 215  : 		_CATCH_ALL
; 216  : 		_Tidy();

  00121	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00124	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 217  : 		_RERAISE;

  00129	6a 00		 push	 0
  0012b	6a 00		 push	 0
  0012d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN69@Init:

; 214  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Cvt);

$LN39@Init:
  00132	8b ca		 mov	 ecx, edx
  00134	81 e9 00 00 00
	00		 sub	 ecx, OFFSET ??_C@_04LOAJBDKD@true?$AA@
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL38@Init:
  00140	8a 06		 mov	 al, BYTE PTR [esi]
  00142	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00145	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  00149	83 ef 01	 sub	 edi, 1
  0014c	75 f2		 jne	 SHORT $LL38@Init

; 218  : 		_CATCH_END
; 219  : 
; 220  : 		if (_Isdef)

  0014e	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  00152	89 53 14	 mov	 DWORD PTR [ebx+20], edx
  00155	74 1a		 je	 SHORT $LN3@Init

; 221  : 			{	// apply defaults for required facets
; 222  : //			_Grouping = _MAKLOCSTR(char, "", _Cvt);
; 223  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Cvt);

  00157	66 c7 43 0c 2e
	2c		 mov	 WORD PTR [ebx+12], 11310 ; 00002c2eH

; 228  : 		}

  0015d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00160	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00167	59		 pop	 ecx
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	5b		 pop	 ebx
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 08 00	 ret	 8
$LN3@Init:

; 224  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Cvt);
; 225  : 			}
; 226  : 		else
; 227  : 			_Getvals((_Elem)0, _Ptr, _Cvt);

  00171	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
  00174	8b 01		 mov	 eax, DWORD PTR [ecx]
  00176	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00179	88 43 0c	 mov	 BYTE PTR [ebx+12], al
  0017c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0017f	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00182	88 43 0d	 mov	 BYTE PTR [ebx+13], al

; 228  : 		}

  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 08 00	 ret	 8
$LN65@Init:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 175  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 176  : 		_Tidy();

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0000c	e8 00 00 00 00	 call	 _free
  00011	ff 76 10	 push	 DWORD PTR [esi+16]
  00014	e8 00 00 00 00	 call	 _free
  00019	ff 76 14	 push	 DWORD PTR [esi+20]
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : 		}

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 166  : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx
  0002a	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx

; 167  : 		if (_Ppf != 0 && *_Ppf == 0)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  00030	85 ff		 test	 edi, edi
  00032	74 76		 je	 SHORT $LN29@Getcat
  00034	39 1f		 cmp	 DWORD PTR [edi], ebx
  00036	75 72		 jne	 SHORT $LN29@Getcat

; 168  : 			*_Ppf = new numpunct<_Elem>(

  00038	6a 18		 push	 24			; 00000018H
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 f6		 test	 esi, esi
  0004c	74 4b		 je	 SHORT $LN4@Getcat
  0004e	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	85 c9		 test	 ecx, ecx
  00056	75 07		 jne	 SHORT $LN12@Getcat
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005d	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
  0005f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00062	85 c0		 test	 eax, eax
  00064	75 03		 jne	 SHORT $LN17@Getcat
  00066	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
  00069	50		 push	 eax
  0006a	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00072	bb 01 00 00 00	 mov	 ebx, 1
  00077	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0007e	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
  00081	53		 push	 ebx
  00082	50		 push	 eax
  00083	8b ce		 mov	 ecx, esi
  00085	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0008c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00092	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
  00097	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00099	33 f6		 xor	 esi, esi
$LN5@Getcat:
  0009b	89 37		 mov	 DWORD PTR [edi], esi
  0009d	f6 c3 01	 test	 bl, 1
  000a0	74 08		 je	 SHORT $LN29@Getcat
  000a2	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  000a5	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@Getcat:

; 169  : 				_Locinfo(_Ploc->c_str()), 0, true);
; 170  : 		return (_X_NUMERIC);

  000aa	b8 04 00 00 00	 mov	 eax, 4

; 171  : 		}

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  0001f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 160  : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 159  : 		: locale::facet(_Refs)

  00029	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 161  : 		_Init(_Lobj, _Isdef);

  0002f	ff 75 10	 push	 DWORD PTR __Isdef$[ebp]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00042	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 162  : 		}

  00047	8b c6		 mov	 eax, esi
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5e		 pop	 esi
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 143  : 		{	// return name for true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 144  : 		return (do_truename());

  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00010	ff 52 1c	 call	 DWORD PTR [edx+28]
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 145  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 138  : 		{	// return name for false

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 139  : 		return (do_falsename());

  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00010	ff 52 18	 call	 DWORD PTR [edx+24]
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 140  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 133  : 		{	// return grouping string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 134  : 		return (do_grouping());

  00004	8b 11		 mov	 edx, DWORD PTR [ecx]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00010	ff 52 14	 call	 DWORD PTR [edx+20]
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 135  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 129  : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00005	ff e0		 jmp	 eax
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 124  : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00005	ff e0		 jmp	 eax
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__Lock$3 = -24						; size = 4
__Lock$4 = -20						; size = 4
__Psave$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 553  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d f0	 mov	 DWORD PTR __Psave$5[ebp], ebx
  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet
  0004c	57		 push	 edi
  0004d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, edi ; std::numpunct<char>::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN12@use_facet:
  0006d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
$LN11@use_facet:

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00081	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00084	73 0c		 jae	 SHORT $LN20@use_facet
  00086	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00089	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
  0008c	85 f6		 test	 esi, esi
  0008e	75 77		 jne	 SHORT $LN7@use_facet
  00090	eb 02		 jmp	 SHORT $LN28@use_facet
$LN20@use_facet:
  00092	33 f6		 xor	 esi, esi
$LN28@use_facet:
  00094	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00098	74 10		 je	 SHORT $LN17@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a2	73 0a		 jae	 SHORT $LN29@use_facet
  000a4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a7	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 565  : 
; 566  : 		if (_Pf != 0)

  000aa	85 f6		 test	 esi, esi
  000ac	75 59		 jne	 SHORT $LN7@use_facet
$LN29@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  000ae	85 db		 test	 ebx, ebx
  000b0	74 04		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  000b2	8b f3		 mov	 esi, ebx
  000b4	eb 51		 jmp	 SHORT $LN7@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000b6	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000b9	8d 45 f0	 lea	 eax, DWORD PTR __Psave$5[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
  000c2	83 c4 08	 add	 esp, 8
  000c5	83 f8 ff	 cmp	 eax, -1
  000c8	75 24		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7bad_cast@std@@6B@
  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d9	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000dc	66 0f d6 45 e0	 movq	 QWORD PTR $T2[ebp+4], xmm0
  000e1	50		 push	 eax
  000e2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@use_facet:
$LN6@use_facet:

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else
; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000ee	8b 75 f0	 mov	 esi, DWORD PTR __Psave$5[ebp]

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 586  : 			_Pfmod->_Incref();

  000f1	8b ce		 mov	 ecx, esi
  000f3	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
  000f9	8b 16		 mov	 edx, DWORD PTR [esi]
  000fb	ff 52 04	 call	 DWORD PTR [edx+4]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00104	83 c4 04	 add	 esp, 4
$LN7@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00107	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0010a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0010f	8b c6		 mov	 eax, esi

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  00111	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00114	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011b	59		 pop	 ecx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
$LN31@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lbound<int>, COMDAT
; _this$ = ecx

; 2059 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2060 : 		_Nodeptr _Pnode = _Root();

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2061 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2062 : 
; 2063 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN72@Lbound

; 2064 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL2@Lbound:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00016	7d 05		 jge	 SHORT $LN4@Lbound

; 2065 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2066 : 			else

  0001b	eb 04		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2067 : 				{	// _Pnode not less than _Keyval, remember it
; 2068 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2069 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Lbound:

; 2061 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2062 : 
; 2063 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL2@Lbound
$LN72@Lbound:

; 2070 : 				}
; 2071 : 
; 2072 : 		return (_Wherenode);	// return best remembered candidate

  00027	8b c2		 mov	 eax, edx

; 2073 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lbound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::pair<int const ,HostDevice> >, COMDAT
; _this$ = ecx

; 1002 : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8d 49 08	 lea	 ecx, DWORD PTR [ecx+8]
  00009	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 1004 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHUHostDevice@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUHostDevice@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::pair<int const ,HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBHUHostDevice@@@std@@@std@@YAPAU?$pair@$$CBHUHostDevice@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHUHostDevice@@@std@@@std@@YAPAU?$pair@$$CBHUHostDevice@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,HostDevice> >, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHUHostDevice@@@std@@@std@@YAPAU?$pair@$$CBHUHostDevice@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUHostDevice@@@std@@@std@@SAPAU?$pair@$$CBHUHostDevice@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUHostDevice@@@std@@@std@@SAPAU?$pair@$$CBHUHostDevice@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<int const ,HostDevice> *>::pointer_to, COMDAT

; 279  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUHostDevice@@@std@@@std@@SAPAU?$pair@$$CBHUHostDevice@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<int const ,HostDevice> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 662  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 663  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 652  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 653  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 647  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 637  : 		{	// store element and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 638  : 		if (_Strbuf == 0
; 639  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00006	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 37		 je	 SHORT $LN3@operator
  0000d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00010	83 38 00	 cmp	 DWORD PTR [eax], 0
  00013	74 20		 je	 SHORT $LN7@operator
  00015	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	85 c0		 test	 eax, eax
  0001c	7e 17		 jle	 SHORT $LN7@operator
  0001e	48		 dec	 eax
  0001f	89 02		 mov	 DWORD PTR [edx], eax
  00021	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00029	89 01		 mov	 DWORD PTR [ecx], eax
  0002b	8a 45 08	 mov	 al, BYTE PTR __Right$[ebp]
  0002e	88 02		 mov	 BYTE PTR [edx], al
  00030	0f b6 c0	 movzx	 eax, al
  00033	eb 0a		 jmp	 SHORT $LN8@operator
$LN7@operator:
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	0f b6 45 08	 movzx	 eax, BYTE PTR __Right$[ebp]
  0003b	50		 push	 eax
  0003c	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN8@operator:
  0003f	83 f8 ff	 cmp	 eax, -1
  00042	75 03		 jne	 SHORT $LN28@operator
$LN3@operator:

; 640  : 				_Strbuf->sputc(_Right)))
; 641  : 			_Failed = true;

  00044	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN28@operator:

; 642  : 		return (*this);

  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 643  : 		}

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 628  : 		{	// construct from stream buffer _Sb

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		: _Failed(false), _Strbuf(_Sb)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Sb$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 629  : 		}

  00009	8b c1		 mov	 eax, ecx
  0000b	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN13@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN13@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1583 : 		{	// put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1584 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  00004	8b 75 14	 mov	 esi, DWORD PTR __Dest$[ebp+4]
  00007	57		 push	 edi
  00008	8b 7d 1c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	85 ff		 test	 edi, edi
  0000d	74 4a		 je	 SHORT $LN3@Rep
  0000f	53		 push	 ebx
  00010	8a 5d 18	 mov	 bl, BYTE PTR __Ch$[ebp]
$LL4@Rep:

; 1585 : 			*_Dest = _Ch;

  00013	85 f6		 test	 esi, esi
  00015	74 38		 je	 SHORT $LN12@Rep
  00017	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 1d		 je	 SHORT $LN16@Rep
  0001f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	85 c0		 test	 eax, eax
  00026	7e 14		 jle	 SHORT $LN16@Rep
  00028	48		 dec	 eax
  00029	89 01		 mov	 DWORD PTR [ecx], eax
  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	88 1a		 mov	 BYTE PTR [edx], bl
  00037	0f b6 c3	 movzx	 eax, bl
  0003a	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003c	8b 16		 mov	 edx, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	0f b6 c3	 movzx	 eax, bl
  00043	50		 push	 eax
  00044	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN17@Rep:
  00047	8b 75 14	 mov	 esi, DWORD PTR __Dest$[ebp+4]
  0004a	83 f8 ff	 cmp	 eax, -1
  0004d	75 04		 jne	 SHORT $LN2@Rep
$LN12@Rep:
  0004f	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Rep:

; 1584 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  00053	83 ef 01	 sub	 edi, 1
  00056	75 bb		 jne	 SHORT $LL4@Rep
  00058	5b		 pop	 ebx
$LN3@Rep:

; 1586 : 		return (_Dest);

  00059	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0005f	5f		 pop	 edi
  00060	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00063	89 08		 mov	 DWORD PTR [eax], ecx
  00065	5e		 pop	 esi

; 1587 : 		}

  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
__Ch$1$ = 31						; size = 1
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1575 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1576 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  00004	8b 75 1c	 mov	 esi, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 14	 mov	 edi, DWORD PTR __Dest$[ebp+4]
  0000b	85 f6		 test	 esi, esi
  0000d	74 53		 je	 SHORT $LN3@Put
  0000f	53		 push	 ebx
  00010	8b 5d 18	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LL4@Put:

; 1577 : 			*_Dest = *_Ptr;

  00013	85 ff		 test	 edi, edi
  00015	74 40		 je	 SHORT $LN12@Put
  00017	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0001a	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0001c	88 4d 1f	 mov	 BYTE PTR __Ch$1$[ebp], cl
  0001f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00022	74 20		 je	 SHORT $LN16@Put
  00024	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00027	8b 02		 mov	 eax, DWORD PTR [edx]
  00029	85 c0		 test	 eax, eax
  0002b	7e 17		 jle	 SHORT $LN16@Put
  0002d	48		 dec	 eax
  0002e	89 02		 mov	 DWORD PTR [edx], eax
  00030	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00038	89 01		 mov	 DWORD PTR [ecx], eax
  0003a	8a 45 1f	 mov	 al, BYTE PTR __Ch$1$[ebp]
  0003d	88 02		 mov	 BYTE PTR [edx], al
  0003f	0f b6 c0	 movzx	 eax, al
  00042	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  00044	8b 17		 mov	 edx, DWORD PTR [edi]
  00046	0f b6 c1	 movzx	 eax, cl
  00049	8b cf		 mov	 ecx, edi
  0004b	50		 push	 eax
  0004c	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN17@Put:
  0004f	8b 7d 14	 mov	 edi, DWORD PTR __Dest$[ebp+4]
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 04		 jne	 SHORT $LN2@Put
$LN12@Put:
  00057	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Put:

; 1576 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  0005b	43		 inc	 ebx
  0005c	83 ee 01	 sub	 esi, 1
  0005f	75 b2		 jne	 SHORT $LL4@Put
  00061	5b		 pop	 ebx
$LN3@Put:

; 1578 : 		return (_Dest);

  00062	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00068	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0006b	5f		 pop	 edi
  0006c	89 08		 mov	 DWORD PTR [eax], ecx
  0006e	5e		 pop	 esi

; 1579 : 		}

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
$T2 = -92						; size = 8
__Iosbase$GSCopy$1$ = -88				; size = 4
___$ReturnUdt$GSCopy$1$ = -84				; size = 4
$T3 = -80						; size = 8
$T4 = -80						; size = 8
$T5 = -80						; size = 8
$T6 = -80						; size = 8
$T7 = -80						; size = 8
$T8 = -80						; size = 8
$T9 = -80						; size = 8
__Dest$3$ = -72						; size = 4
__Ctype_fac$1$ = -72					; size = 4
__Count$GSCopy$2$ = -68					; size = 4
__Buf$GSCopy$1$ = -68					; size = 4
__Punct_fac$1$ = -68					; size = 4
__Kseparator$10 = -68					; size = 1
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1515 : 		{	// put formatted integer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 24	 mov	 edi, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 75 18	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00034	8b 4d 20	 mov	 ecx, DWORD PTR __Buf$[ebp]
  00037	89 45 ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 75 a8	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], esi
  0003d	89 4d bc	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], ecx

; 1516 : 		_DEBUG_POINTER(_Dest);
; 1517 : 		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')

  00040	85 ff		 test	 edi, edi
  00042	74 11		 je	 SHORT $LN14@Iput
  00044	8a 01		 mov	 al, BYTE PTR [ecx]
  00046	3c 2b		 cmp	 al, 43			; 0000002bH
  00048	74 04		 je	 SHORT $LN13@Iput
  0004a	3c 2d		 cmp	 al, 45			; 0000002dH
  0004c	75 07		 jne	 SHORT $LN14@Iput
$LN13@Iput:
  0004e	bb 01 00 00 00	 mov	 ebx, 1
  00053	eb 02		 jmp	 SHORT $LN15@Iput
$LN14@Iput:
  00055	33 db		 xor	 ebx, ebx
$LN15@Iput:

; 1518 : 			? 1 : 0;
; 1519 : 		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
; 1520 : 			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1521 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  00057	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005a	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  0005f	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00064	75 1d		 jne	 SHORT $LN4@Iput
  00066	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00069	3b c7		 cmp	 eax, edi
  0006b	77 16		 ja	 SHORT $LN4@Iput
  0006d	80 3c 19 30	 cmp	 BYTE PTR [ecx+ebx], 48	; 00000030H
  00071	75 10		 jne	 SHORT $LN4@Iput
  00073	8a 4c 19 01	 mov	 cl, BYTE PTR [ecx+ebx+1]
  00077	80 f9 78	 cmp	 cl, 120			; 00000078H
  0007a	74 05		 je	 SHORT $LN5@Iput
  0007c	80 f9 58	 cmp	 cl, 88			; 00000058H
  0007f	75 02		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1522 : 			_Prefix += 2;

  00081	8b d8		 mov	 ebx, eax
$LN4@Iput:

; 1523 : 
; 1524 : 		const ctype<_Elem>& _Ctype_fac =

  00083	8d 45 b0	 lea	 eax, DWORD PTR $T9[ebp]
  00086	8b ce		 mov	 ecx, esi
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0008e	50		 push	 eax
  0008f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00096	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 45 b8	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000a1	8b 4d b4	 mov	 ecx, DWORD PTR $T9[ebp+4]
  000a4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000ab	85 c9		 test	 ecx, ecx
  000ad	74 11		 je	 SHORT $LN27@Iput
  000af	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b1	ff 50 08	 call	 DWORD PTR [eax+8]
  000b4	85 c0		 test	 eax, eax
  000b6	74 08		 je	 SHORT $LN27@Iput
  000b8	8b 10		 mov	 edx, DWORD PTR [eax]
  000ba	8b c8		 mov	 ecx, eax
  000bc	6a 01		 push	 1
  000be	ff 12		 call	 DWORD PTR [edx]
$LN27@Iput:

; 1525 : 			_USE(_Iosbase.getloc(), ctype<_Elem>);
; 1526 : 		_Mystr _Groupstring(_Count, _Elem(0));	// reserve space

  000c0	6a 00		 push	 0
  000c2	57		 push	 edi
  000c3	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  000c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cd	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
  000d4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+16], 0
  000db	c6 45 d8 00	 mov	 BYTE PTR __Groupstring$[ebp], 0
  000df	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1527 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  000e4	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  000e8	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  000eb	8b 4d bc	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
  000ee	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  000f2	8b 55 b8	 mov	 edx, DWORD PTR __Ctype_fac$1$[ebp]
  000f5	50		 push	 eax
  000f6	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  000f9	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00100	50		 push	 eax
  00101	8b 12		 mov	 edx, DWORD PTR [edx]
  00103	51		 push	 ecx
  00104	8b 4d b8	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  00107	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1528 : 
; 1529 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0010a	8d 45 b0	 lea	 eax, DWORD PTR $T8[ebp]
  0010d	8b ce		 mov	 ecx, esi
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00115	50		 push	 eax
  00116	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0011a	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0011f	8b f0		 mov	 esi, eax
  00121	83 c4 04	 add	 esp, 4
  00124	89 75 bc	 mov	 DWORD PTR __Punct_fac$1$[ebp], esi
  00127	8b 4d b4	 mov	 ecx, DWORD PTR $T8[ebp+4]
  0012a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0012e	85 c9		 test	 ecx, ecx
  00130	74 11		 je	 SHORT $LN157@Iput
  00132	8b 01		 mov	 eax, DWORD PTR [ecx]
  00134	ff 50 08	 call	 DWORD PTR [eax+8]
  00137	85 c0		 test	 eax, eax
  00139	74 08		 je	 SHORT $LN157@Iput
  0013b	8b 10		 mov	 edx, DWORD PTR [eax]
  0013d	8b c8		 mov	 ecx, eax
  0013f	6a 01		 push	 1
  00141	ff 12		 call	 DWORD PTR [edx]
$LN157@Iput:

; 1530 : 		const string _Grouping = _Punct_fac.grouping();

  00143	8d 45 c0	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00146	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0014a	50		 push	 eax
  0014b	8b ce		 mov	 ecx, esi
  0014d	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1531 : 		const char *_Pg = &_Grouping[0];

  00152	83 7d d4 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  00156	8d 75 c0	 lea	 esi, DWORD PTR __Grouping$[ebp]
  00159	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0015d	0f 43 75 c0	 cmovae	 esi, DWORD PTR __Grouping$[ebp]

; 1532 : 		if (*_Pg != CHAR_MAX && '\0' < *_Pg)

  00161	8a 06		 mov	 al, BYTE PTR [esi]
  00163	3c 7f		 cmp	 al, 127			; 0000007fH
  00165	74 4b		 je	 SHORT $LN3@Iput
  00167	84 c0		 test	 al, al
  00169	7e 47		 jle	 SHORT $LN3@Iput

; 1533 : 			{	// grouping specified, add thousands separators
; 1534 : 			const _Elem _Kseparator = _Punct_fac.thousands_sep();

  0016b	8b 4d bc	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
  0016e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00170	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00173	ff d0		 call	 eax

; 1535 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1536 : 				&& (size_t)*_Pg < _Count - _Prefix)

  00175	80 3e 7f	 cmp	 BYTE PTR [esi], 127	; 0000007fH
  00178	88 45 bc	 mov	 BYTE PTR __Kseparator$10[ebp], al
  0017b	74 35		 je	 SHORT $LN3@Iput
  0017d	0f 1f 00	 npad	 3
$LL2@Iput:
  00180	8a 06		 mov	 al, BYTE PTR [esi]
  00182	84 c0		 test	 al, al
  00184	7e 2c		 jle	 SHORT $LN3@Iput
  00186	0f be c8	 movsx	 ecx, al
  00189	8b c7		 mov	 eax, edi
  0018b	2b c3		 sub	 eax, ebx
  0018d	3b c8		 cmp	 ecx, eax
  0018f	73 21		 jae	 SHORT $LN3@Iput

; 1537 : 				{	// insert thousands separator
; 1538 : 				_Count -= *_Pg;
; 1539 : 				_Groupstring.insert(_Count, 1, _Kseparator);

  00191	ff 75 bc	 push	 DWORD PTR __Kseparator$10[ebp]
  00194	2b f9		 sub	 edi, ecx
  00196	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00199	6a 01		 push	 1
  0019b	57		 push	 edi
  0019c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  001a1	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0

; 1540 : 				if ('\0' < _Pg[1])

  001a5	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001a8	0f 4e c6	 cmovle	 eax, esi
  001ab	8b f0		 mov	 esi, eax
  001ad	80 3e 7f	 cmp	 BYTE PTR [esi], 127	; 0000007fH
  001b0	75 ce		 jne	 SHORT $LL2@Iput
$LN3@Iput:

; 1541 : 					++_Pg;	// not last group, advance
; 1542 : 				}
; 1543 : 			}
; 1544 : 
; 1545 : 		_Count = _Groupstring.size();
; 1546 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1547 : 			|| (size_t)_Iosbase.width() <= _Count

  001b2	8b 75 a8	 mov	 esi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  001b5	8b 45 e8	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  001b8	89 45 bc	 mov	 DWORD PTR __Count$GSCopy$2$[ebp], eax
  001bb	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  001bf	7c 13		 jl	 SHORT $LN16@Iput
  001c1	7f 06		 jg	 SHORT $LN470@Iput
  001c3	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  001c7	76 0b		 jbe	 SHORT $LN16@Iput
$LN470@Iput:
  001c9	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  001cc	3b f8		 cmp	 edi, eax
  001ce	76 04		 jbe	 SHORT $LN16@Iput
  001d0	2b f8		 sub	 edi, eax
  001d2	eb 02		 jmp	 SHORT $LN17@Iput
$LN16@Iput:
  001d4	33 ff		 xor	 edi, edi
$LN17@Iput:

; 1548 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1549 : 
; 1550 : 		ios_base::fmtflags _Adjustfield =
; 1551 : 			_Iosbase.flags() & ios_base::adjustfield;

  001d6	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001d9	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001de	83 f8 40	 cmp	 eax, 64			; 00000040H

; 1552 : 		if (_Adjustfield != ios_base::left
; 1553 : 			&& _Adjustfield != ios_base::internal)

  001e1	0f 84 97 00 00
	00		 je	 $LN10@Iput
  001e7	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001ec	74 48		 je	 SHORT $LN469@Iput

; 1554 : 			{	// put leading fill
; 1555 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  001ee	57		 push	 edi
  001ef	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  001f2	8d 45 b0	 lea	 eax, DWORD PTR $T7[ebp]
  001f5	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  001f8	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  001fb	50		 push	 eax
  001fc	ff 75 08	 push	 DWORD PTR _this$[ebp]
  001ff	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00204	8b d0		 mov	 edx, eax

; 1556 : 			_Fillcount = 0;
; 1557 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00206	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00209	33 ff		 xor	 edi, edi
  0020b	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  0020f	53		 push	 ebx
  00210	0f 43 4d d8	 cmovae	 ecx, DWORD PTR __Groupstring$[ebp]
  00214	8b 02		 mov	 eax, DWORD PTR [edx]
  00216	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00219	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0021c	51		 push	 ecx
  0021d	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00220	8d 45 b0	 lea	 eax, DWORD PTR $T6[ebp]
  00223	ff 72 04	 push	 DWORD PTR [edx+4]
  00226	ff 32		 push	 DWORD PTR [edx]
  00228	50		 push	 eax
  00229	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0022c	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00231	83 c4 30	 add	 esp, 48			; 00000030H
  00234	eb 6a		 jmp	 SHORT $LN474@Iput
$LN469@Iput:

; 1558 : 			}
; 1559 : 		else if (_Adjustfield == ios_base::internal)
; 1560 : 			{	// put internal fill
; 1561 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00236	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  0023a	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0023d	53		 push	 ebx
  0023e	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  00242	50		 push	 eax
  00243	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00246	8d 45 b0	 lea	 eax, DWORD PTR $T5[ebp]
  00249	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0024c	50		 push	 eax
  0024d	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00250	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00255	8b c8		 mov	 ecx, eax

; 1562 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00257	57		 push	 edi
  00258	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  0025b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0025d	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00260	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00263	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00266	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  00269	ff 71 04	 push	 DWORD PTR [ecx+4]
  0026c	ff 31		 push	 DWORD PTR [ecx]
  0026e	50		 push	 eax
  0026f	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00272	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00277	83 c4 30	 add	 esp, 48			; 00000030H

; 1563 : 			_Fillcount = 0;

  0027a	33 ff		 xor	 edi, edi

; 1564 : 			}
; 1565 : 		else

  0027c	eb 22		 jmp	 SHORT $LN474@Iput
$LN10@Iput:

; 1566 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0027e	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  00282	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  00285	53		 push	 ebx
  00286	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  0028a	50		 push	 eax
  0028b	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0028e	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00291	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00294	50		 push	 eax
  00295	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00298	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0029d	83 c4 18	 add	 esp, 24			; 00000018H
$LN474@Iput:
  002a0	8b 10		 mov	 edx, DWORD PTR [eax]

; 1567 : 
; 1568 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  002a2	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  002a6	8b 4d bc	 mov	 ecx, DWORD PTR __Count$GSCopy$2$[ebp]
  002a9	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  002ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002af	89 45 b8	 mov	 DWORD PTR __Dest$3$[ebp], eax
  002b2	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  002b5	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  002b8	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  002bc	2b cb		 sub	 ecx, ebx
  002be	51		 push	 ecx
  002bf	03 c3		 add	 eax, ebx
  002c1	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  002c4	50		 push	 eax
  002c5	ff 75 b8	 push	 DWORD PTR __Dest$3$[ebp]
  002c8	8d 45 a4	 lea	 eax, DWORD PTR $T2[ebp]
  002cb	52		 push	 edx
  002cc	50		 push	 eax
  002cd	53		 push	 ebx
  002ce	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1569 : 		_Iosbase.width(0);
; 1570 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  002d3	57		 push	 edi
  002d4	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002dc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002df	50		 push	 eax
  002e0	51		 push	 ecx
  002e1	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  002e8	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  002ef	8b 75 ac	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  002f2	56		 push	 esi
  002f3	53		 push	 ebx
  002f4	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  002f7	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002fc	8b 45 d4	 mov	 eax, DWORD PTR __Grouping$[ebp+20]
  002ff	83 c4 30	 add	 esp, 48			; 00000030H
  00302	83 f8 10	 cmp	 eax, 16			; 00000010H
  00305	72 0d		 jb	 SHORT $LN270@Iput
  00307	40		 inc	 eax
  00308	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0030b	50		 push	 eax
  0030c	ff 75 c0	 push	 DWORD PTR __Grouping$[ebp]
  0030f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN270@Iput:
  00314	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]
  00317	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH
  0031e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0
  00325	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0
  00329	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0032c	72 0d		 jb	 SHORT $LN471@Iput
  0032e	41		 inc	 ecx
  0032f	51		 push	 ecx
  00330	ff 75 d8	 push	 DWORD PTR __Groupstring$[ebp]
  00333	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00336	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN471@Iput:
  0033b	8b c6		 mov	 eax, esi

; 1571 : 		}

  0033d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00340	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00347	59		 pop	 ecx
  00348	5f		 pop	 edi
  00349	5e		 pop	 esi
  0034a	5b		 pop	 ebx
  0034b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0034e	33 cd		 xor	 ecx, ebp
  00350	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00355	8b e5		 mov	 esp, ebp
  00357	5d		 pop	 ebp
  00358	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$4:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  0000e	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2:
  00016	8d 4d b0	 lea	 ecx, DWORD PTR $T8[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$33:
  0001e	e8 00 00 00 00	 call	 ___std_terminate
  00023	c3		 ret	 0
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3:
  00024	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1487 : 		{	// generate sprintf format for integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1488 : 		char *_Ptr = _Fmt;
; 1489 : 		*_Ptr++ = '%';
; 1490 : 
; 1491 : 		if (_Flags & ios_base::showpos)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR __Flags$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Fmt$[ebp]
  0000a	57		 push	 edi
  0000b	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00011	f6 c1 20	 test	 cl, 32			; 00000020H
  00014	74 04		 je	 SHORT $LN2@Ifmt

; 1492 : 			*_Ptr++ = '+';

  00016	c6 00 2b	 mov	 BYTE PTR [eax], 43	; 0000002bH
  00019	40		 inc	 eax
$LN2@Ifmt:

; 1493 : 		if (_Flags & ios_base::showbase)

  0001a	f6 c1 08	 test	 cl, 8
  0001d	74 04		 je	 SHORT $LN3@Ifmt

; 1494 : 			*_Ptr++ = '#';

  0001f	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00022	40		 inc	 eax
$LN3@Ifmt:

; 1495 : 		if (_Spec[0] != 'L')

  00023	8b 7d 10	 mov	 edi, DWORD PTR __Spec$[ebp]
  00026	8a 17		 mov	 dl, BYTE PTR [edi]
  00028	80 fa 4c	 cmp	 dl, 76			; 0000004cH
  0002b	74 04		 je	 SHORT $LN4@Ifmt

; 1496 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002d	88 10		 mov	 BYTE PTR [eax], dl

; 1497 : 		else

  0002f	eb 0b		 jmp	 SHORT $LN5@Ifmt
$LN4@Ifmt:

; 1498 : 
; 1499 : 			{	/* change L to I64 */
; 1500 : 			*_Ptr++ = 'I';

  00031	66 c7 00 49 36	 mov	 WORD PTR [eax], 13897	; 00003649H

; 1501 : 			*_Ptr++ = '6';

  00036	83 c0 02	 add	 eax, 2

; 1502 : 			*_Ptr++ = '4';

  00039	c6 00 34	 mov	 BYTE PTR [eax], 52	; 00000034H
$LN5@Ifmt:

; 1503 : 			}
; 1504 : 
; 1505 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003c	8b d1		 mov	 edx, ecx
  0003e	81 e2 00 0e 00
	00		 and	 edx, 3584		; 00000e00H
  00044	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H

; 1506 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  0004a	75 0f		 jne	 SHORT $LN9@Ifmt
  0004c	b1 6f		 mov	 cl, 111			; 0000006fH
  0004e	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1507 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1508 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1509 : 		*_Ptr = '\0';

  00051	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 1510 : 		return (_Fmt);

  00055	8b c6		 mov	 eax, esi
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 1511 : 		}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN9@Ifmt:
  0005b	81 fa 00 08 00
	00		 cmp	 edx, 2048		; 00000800H

; 1506 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00061	74 10		 je	 SHORT $LN7@Ifmt
  00063	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00066	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1507 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1508 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1509 : 		*_Ptr = '\0';

  00069	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 1510 : 		return (_Fmt);

  0006d	8b c6		 mov	 eax, esi
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi

; 1511 : 		}

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN7@Ifmt:

; 1506 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00073	c0 e1 03	 shl	 cl, 3
  00076	f6 d1		 not	 cl
  00078	80 e1 20	 and	 cl, 32			; 00000020H
  0007b	80 c9 58	 or	 cl, 88			; 00000058H
  0007e	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 1507 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1508 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1509 : 		*_Ptr = '\0';

  00081	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 1510 : 		return (_Fmt);

  00085	8b c6		 mov	 eax, esi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi

; 1511 : 		}

  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
_TEXT	SEGMENT
$T2 = -104						; size = 8
__Iosbase$GSCopy$1$ = -100				; size = 4
___$ReturnUdt$GSCopy$1$ = -96				; size = 4
__Count$GSCopy$2$ = -92					; size = 4
__Eoff$1$ = -92						; size = 4
__Buf$GSCopy$1$ = -88					; size = 4
__Punct_fac$1$ = -88					; size = 4
$T3 = -84						; size = 8
$T4 = -84						; size = 8
$T5 = -84						; size = 8
$T6 = -84						; size = 8
$T7 = -84						; size = 8
$T8 = -84						; size = 8
$T9 = -84						; size = 8
__Ctype_fac$1$ = -76					; size = 4
__Kseparator$ = -76					; size = 1
__Dp$ = -72						; size = 2
__Dest$3$ = -68						; size = 4
__Count$GSCopy$1$ = -68					; size = 4
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1413 : 		{	// put formatted floating-point to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 4d 24	 mov	 ecx, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 75 18	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00034	8b 7d 20	 mov	 edi, DWORD PTR __Buf$[ebp]
  00037	89 45 a0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 75 9c	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], esi
  0003d	89 7d a8	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], edi
  00040	89 4d bc	 mov	 DWORD PTR __Count$GSCopy$1$[ebp], ecx

; 1414 : 		_DEBUG_POINTER(_Dest);
; 1415 : 		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')

  00043	85 c9		 test	 ecx, ecx
  00045	74 11		 je	 SHORT $LN16@Fput
  00047	8a 07		 mov	 al, BYTE PTR [edi]
  00049	3c 2b		 cmp	 al, 43			; 0000002bH
  0004b	74 04		 je	 SHORT $LN15@Fput
  0004d	3c 2d		 cmp	 al, 45			; 0000002dH
  0004f	75 07		 jne	 SHORT $LN16@Fput
$LN15@Fput:
  00051	bb 01 00 00 00	 mov	 ebx, 1
  00056	eb 02		 jmp	 SHORT $LN17@Fput
$LN16@Fput:
  00058	33 db		 xor	 ebx, ebx
$LN17@Fput:

; 1416 : 			? 1 : 0;
; 1417 : 
; 1418 : 		const char *_Exps;
; 1419 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

  0005a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  00067	74 07		 je	 SHORT $LN4@Fput

; 1420 : 			_Exps = "eE";

  00069	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02MDKMJEGG@eE?$AA@

; 1421 : 		else

  0006e	eb 22		 jmp	 SHORT $LN6@Fput
$LN4@Fput:

; 1422 : 			{	// correct for hexadecimal floating-point
; 1423 : 			_Exps = "pP";
; 1424 : 			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1425 : 				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  00070	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00073	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02OOPEBDOJ@pP?$AA@
  00078	3b c1		 cmp	 eax, ecx
  0007a	77 16		 ja	 SHORT $LN6@Fput
  0007c	80 3c 1f 30	 cmp	 BYTE PTR [edi+ebx], 48	; 00000030H
  00080	75 10		 jne	 SHORT $LN6@Fput
  00082	8a 4c 1f 01	 mov	 cl, BYTE PTR [edi+ebx+1]
  00086	80 f9 78	 cmp	 cl, 120			; 00000078H
  00089	74 05		 je	 SHORT $LN7@Fput
  0008b	80 f9 58	 cmp	 cl, 88			; 00000058H
  0008e	75 02		 jne	 SHORT $LN6@Fput
$LN7@Fput:

; 1426 : 				_Prefix += 2;

  00090	8b d8		 mov	 ebx, eax
$LN6@Fput:

; 1427 : 			}
; 1428 : 		const size_t _Eoff =
; 1429 : 			_CSTD strcspn(&_Buf[0], _Exps);	// find exponent

  00092	52		 push	 edx
  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 _strcspn
  00099	89 45 a4	 mov	 DWORD PTR __Eoff$1$[ebp], eax

; 1430 : 		char _Dp[2] = {"."};

  0009c	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000a1	66 89 45 b8	 mov	 WORD PTR __Dp$[ebp], ax

; 1431 : 		_Dp[0] = _CSTD localeconv()->decimal_point[0];

  000a5	e8 00 00 00 00	 call	 _localeconv
  000aa	8b 00		 mov	 eax, DWORD PTR [eax]
  000ac	8a 00		 mov	 al, BYTE PTR [eax]
  000ae	88 45 b8	 mov	 BYTE PTR __Dp$[ebp], al

; 1432 : 		const size_t _Poff =
; 1433 : 			_CSTD strcspn(&_Buf[0], &_Dp[0]);	// find decimal point

  000b1	8d 45 b8	 lea	 eax, DWORD PTR __Dp$[ebp]
  000b4	50		 push	 eax
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 _strcspn
  000bb	83 c4 10	 add	 esp, 16			; 00000010H
  000be	8b f8		 mov	 edi, eax

; 1434 : 
; 1435 : 		const ctype<_Elem>& _Ctype_fac =

  000c0	8d 45 ac	 lea	 eax, DWORD PTR $T9[ebp]
  000c3	8b ce		 mov	 ecx, esi
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  000cb	50		 push	 eax
  000cc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d3	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000d8	83 c4 04	 add	 esp, 4
  000db	89 45 b4	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000de	8b 4d b0	 mov	 ecx, DWORD PTR $T9[ebp+4]
  000e1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000e8	85 c9		 test	 ecx, ecx
  000ea	74 11		 je	 SHORT $LN29@Fput
  000ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ee	ff 50 08	 call	 DWORD PTR [eax+8]
  000f1	8b c8		 mov	 ecx, eax
  000f3	85 c9		 test	 ecx, ecx
  000f5	74 06		 je	 SHORT $LN29@Fput
  000f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f9	6a 01		 push	 1
  000fb	ff 10		 call	 DWORD PTR [eax]
$LN29@Fput:

; 1436 : 			_USE(_Iosbase.getloc(), ctype<_Elem>);
; 1437 : 		_Mystr _Groupstring(_Count, _Elem(0));	// reserve space

  000fd	6a 00		 push	 0
  000ff	ff 75 bc	 push	 DWORD PTR __Count$GSCopy$1$[ebp]
  00102	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00105	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
  00113	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Groupstring$[ebp+16], 0
  0011a	c6 45 d8 00	 mov	 BYTE PTR __Groupstring$[ebp], 0
  0011e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1438 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  00123	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  00127	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0012a	8b 55 b4	 mov	 edx, DWORD PTR __Ctype_fac$1$[ebp]
  0012d	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  00131	8b 4d a8	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
  00134	50		 push	 eax
  00135	8b 45 bc	 mov	 eax, DWORD PTR __Count$GSCopy$1$[ebp]
  00138	8b 12		 mov	 edx, DWORD PTR [edx]
  0013a	03 c1		 add	 eax, ecx
  0013c	50		 push	 eax
  0013d	51		 push	 ecx
  0013e	8b 4d b4	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  00141	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00148	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1439 : 
; 1440 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0014b	8d 45 ac	 lea	 eax, DWORD PTR $T8[ebp]
  0014e	8b ce		 mov	 ecx, esi
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00156	50		 push	 eax
  00157	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0015b	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00160	8b f0		 mov	 esi, eax
  00162	83 c4 04	 add	 esp, 4
  00165	89 75 a8	 mov	 DWORD PTR __Punct_fac$1$[ebp], esi
  00168	8b 4d b0	 mov	 ecx, DWORD PTR $T8[ebp+4]
  0016b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0016f	85 c9		 test	 ecx, ecx
  00171	74 11		 je	 SHORT $LN159@Fput
  00173	8b 01		 mov	 eax, DWORD PTR [ecx]
  00175	ff 50 08	 call	 DWORD PTR [eax+8]
  00178	8b c8		 mov	 ecx, eax
  0017a	85 c9		 test	 ecx, ecx
  0017c	74 06		 je	 SHORT $LN159@Fput
  0017e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00180	6a 01		 push	 1
  00182	ff 10		 call	 DWORD PTR [eax]
$LN159@Fput:

; 1441 : 		const string _Grouping = _Punct_fac.grouping();

  00184	8d 45 c0	 lea	 eax, DWORD PTR __Grouping$[ebp]
  00187	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0018b	50		 push	 eax
  0018c	8b ce		 mov	 ecx, esi
  0018e	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1442 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  00193	8b 06		 mov	 eax, DWORD PTR [esi]
  00195	8b ce		 mov	 ecx, esi
  00197	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0019b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0019e	ff d0		 call	 eax

; 1443 : 
; 1444 : 		if (_Poff != _Count)

  001a0	8b 75 bc	 mov	 esi, DWORD PTR __Count$GSCopy$1$[ebp]
  001a3	88 45 b4	 mov	 BYTE PTR __Kseparator$[ebp], al
  001a6	3b fe		 cmp	 edi, esi
  001a8	74 1c		 je	 SHORT $LN494@Fput

; 1445 : 			_Groupstring[_Poff] = _Punct_fac.decimal_point();

  001aa	8b 4d a8	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
  001ad	8b 01		 mov	 eax, DWORD PTR [ecx]
  001af	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001b2	ff d0		 call	 eax
  001b4	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  001b8	8a c8		 mov	 cl, al
  001ba	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  001bd	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]

; 1446 : 
; 1447 : 		size_t _Off = _Poff == _Count ? _Eoff : _Poff;

  001c1	3b fe		 cmp	 edi, esi
  001c3	88 0c 38	 mov	 BYTE PTR [eax+edi], cl
$LN494@Fput:
  001c6	0f 44 7d a4	 cmove	 edi, DWORD PTR __Eoff$1$[ebp]

; 1448 : 		const char *_Pg = &_Grouping[0];

  001ca	8d 75 c0	 lea	 esi, DWORD PTR __Grouping$[ebp]
  001cd	83 7d d4 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
  001d1	0f 43 75 c0	 cmovae	 esi, DWORD PTR __Grouping$[ebp]

; 1449 : 		while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1450 : 			&& (size_t)*_Pg < _Off - _Prefix)

  001d5	80 3e 7f	 cmp	 BYTE PTR [esi], 127	; 0000007fH
  001d8	74 38		 je	 SHORT $LN3@Fput
  001da	66 0f 1f 44 00
	00		 npad	 6
$LL2@Fput:
  001e0	8a 06		 mov	 al, BYTE PTR [esi]
  001e2	84 c0		 test	 al, al
  001e4	7e 2c		 jle	 SHORT $LN3@Fput
  001e6	0f be c8	 movsx	 ecx, al
  001e9	8b c7		 mov	 eax, edi
  001eb	2b c3		 sub	 eax, ebx
  001ed	3b c8		 cmp	 ecx, eax
  001ef	73 21		 jae	 SHORT $LN3@Fput

; 1451 : 			{	// add thousands separator
; 1452 : 			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);

  001f1	ff 75 b4	 push	 DWORD PTR __Kseparator$[ebp]
  001f4	2b f9		 sub	 edi, ecx
  001f6	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  001f9	6a 01		 push	 1
  001fb	57		 push	 edi
  001fc	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00201	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0

; 1453 : 			if ('\0' < _Pg[1])

  00205	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00208	0f 4e c6	 cmovle	 eax, esi
  0020b	8b f0		 mov	 esi, eax
  0020d	80 3e 7f	 cmp	 BYTE PTR [esi], 127	; 0000007fH
  00210	75 ce		 jne	 SHORT $LL2@Fput
$LN3@Fput:

; 1454 : 				++_Pg;	// not last group, advance
; 1455 : 			}
; 1456 : 
; 1457 : 		_Count = _Groupstring.size();
; 1458 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1459 : 			|| (size_t)_Iosbase.width() <= _Count

  00212	8b 7d 9c	 mov	 edi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00215	8b 45 e8	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  00218	89 45 a4	 mov	 DWORD PTR __Count$GSCopy$2$[ebp], eax
  0021b	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  0021f	7c 13		 jl	 SHORT $LN18@Fput
  00221	7f 06		 jg	 SHORT $LN490@Fput
  00223	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  00227	76 0b		 jbe	 SHORT $LN18@Fput
$LN490@Fput:
  00229	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  0022c	3b f0		 cmp	 esi, eax
  0022e	76 04		 jbe	 SHORT $LN18@Fput
  00230	2b f0		 sub	 esi, eax
  00232	eb 02		 jmp	 SHORT $LN19@Fput
$LN18@Fput:
  00234	33 f6		 xor	 esi, esi
$LN19@Fput:

; 1460 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1461 : 
; 1462 : 		ios_base::fmtflags _Adjustfield =
; 1463 : 			_Iosbase.flags() & ios_base::adjustfield;

  00236	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00239	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0023e	83 f8 40	 cmp	 eax, 64			; 00000040H

; 1464 : 		if (_Adjustfield != ios_base::left
; 1465 : 			&& _Adjustfield != ios_base::internal)

  00241	0f 84 97 00 00
	00		 je	 $LN12@Fput
  00247	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0024c	74 48		 je	 SHORT $LN489@Fput

; 1466 : 			{	// put leading fill
; 1467 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0024e	56		 push	 esi
  0024f	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00252	8d 45 ac	 lea	 eax, DWORD PTR $T7[ebp]
  00255	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00258	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0025b	50		 push	 eax
  0025c	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0025f	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00264	8b c8		 mov	 ecx, eax

; 1468 : 			_Fillcount = 0;

  00266	33 f6		 xor	 esi, esi

; 1469 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00268	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  0026c	53		 push	 ebx
  0026d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0026f	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00272	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00275	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00278	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0027b	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  0027f	50		 push	 eax
  00280	ff 71 04	 push	 DWORD PTR [ecx+4]
  00283	8d 45 ac	 lea	 eax, DWORD PTR $T6[ebp]
  00286	ff 31		 push	 DWORD PTR [ecx]
  00288	50		 push	 eax
  00289	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0028c	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00291	83 c4 30	 add	 esp, 48			; 00000030H
  00294	eb 6a		 jmp	 SHORT $LN495@Fput
$LN489@Fput:

; 1470 : 			}
; 1471 : 		else if (_Adjustfield == ios_base::internal)
; 1472 : 			{	// put internal fill
; 1473 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00296	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  0029a	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0029d	53		 push	 ebx
  0029e	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  002a2	50		 push	 eax
  002a3	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002a6	8d 45 ac	 lea	 eax, DWORD PTR $T5[ebp]
  002a9	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002ac	50		 push	 eax
  002ad	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002b0	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  002b5	8b c8		 mov	 ecx, eax

; 1474 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  002b7	56		 push	 esi
  002b8	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  002bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  002bd	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  002c0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002c3	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  002c6	8d 45 ac	 lea	 eax, DWORD PTR $T4[ebp]
  002c9	ff 71 04	 push	 DWORD PTR [ecx+4]
  002cc	ff 31		 push	 DWORD PTR [ecx]
  002ce	50		 push	 eax
  002cf	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002d2	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002d7	83 c4 30	 add	 esp, 48			; 00000030H

; 1475 : 			_Fillcount = 0;

  002da	33 f6		 xor	 esi, esi

; 1476 : 			}
; 1477 : 		else

  002dc	eb 22		 jmp	 SHORT $LN495@Fput
$LN12@Fput:

; 1478 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002de	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  002e2	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  002e5	53		 push	 ebx
  002e6	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  002ea	50		 push	 eax
  002eb	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  002ee	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  002f1	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  002f4	50		 push	 eax
  002f5	ff 75 08	 push	 DWORD PTR _this$[ebp]
  002f8	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  002fd	83 c4 18	 add	 esp, 24			; 00000018H
$LN495@Fput:
  00300	8b 10		 mov	 edx, DWORD PTR [eax]

; 1479 : 
; 1480 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00302	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
  00306	8b 4d a4	 mov	 ecx, DWORD PTR __Count$GSCopy$2$[ebp]
  00309	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0030c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0030f	89 45 bc	 mov	 DWORD PTR __Dest$3$[ebp], eax
  00312	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00315	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  00318	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
  0031c	2b cb		 sub	 ecx, ebx
  0031e	51		 push	 ecx
  0031f	03 c3		 add	 eax, ebx
  00321	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  00324	50		 push	 eax
  00325	ff 75 bc	 push	 DWORD PTR __Dest$3$[ebp]
  00328	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  0032b	52		 push	 edx
  0032c	50		 push	 eax
  0032d	53		 push	 ebx
  0032e	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1481 : 		_Iosbase.width(0);
; 1482 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00333	56		 push	 esi
  00334	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00337	8b 75 a0	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0033a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033c	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0033f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00342	50		 push	 eax
  00343	51		 push	 ecx
  00344	56		 push	 esi
  00345	53		 push	 ebx
  00346	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00349	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00350	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  00357	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0035c	8b 45 d4	 mov	 eax, DWORD PTR __Grouping$[ebp+20]
  0035f	83 c4 30	 add	 esp, 48			; 00000030H
  00362	83 f8 10	 cmp	 eax, 16			; 00000010H
  00365	72 0d		 jb	 SHORT $LN290@Fput
  00367	40		 inc	 eax
  00368	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0036b	50		 push	 eax
  0036c	ff 75 c0	 push	 DWORD PTR __Grouping$[ebp]
  0036f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN290@Fput:
  00374	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]
  00377	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH
  0037e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0
  00385	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0
  00389	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0038c	72 0d		 jb	 SHORT $LN491@Fput
  0038e	41		 inc	 ecx
  0038f	51		 push	 ecx
  00390	ff 75 d8	 push	 DWORD PTR __Groupstring$[ebp]
  00393	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00396	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN491@Fput:
  0039b	8b c6		 mov	 eax, esi

; 1483 : 		}

  0039d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003a7	59		 pop	 ecx
  003a8	5f		 pop	 edi
  003a9	5e		 pop	 esi
  003aa	5b		 pop	 ebx
  003ab	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ae	33 cd		 xor	 ecx, ebp
  003b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b5	8b e5		 mov	 esp, ebp
  003b7	5d		 pop	 ebp
  003b8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR $T9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$4:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1:
  0000e	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$2:
  00016	8d 4d ac	 lea	 ecx, DWORD PTR $T8[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$33:
  0001e	e8 00 00 00 00	 call	 ___std_terminate
  00023	c3		 ret	 0
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3:
  00024	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1383 : 		{	// generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1384 : 		char *_Ptr = _Fmt;
; 1385 : 		*_Ptr++ = '%';
; 1386 : 
; 1387 : 		if (_Flags & ios_base::showpos)

  00003	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Fmt$[ebp]
  0000a	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00010	f6 c2 20	 test	 dl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN2@Ffmt

; 1388 : 			*_Ptr++ = '+';

  00015	c6 00 2b	 mov	 BYTE PTR [eax], 43	; 0000002bH
  00018	40		 inc	 eax
$LN2@Ffmt:

; 1389 : 		if (_Flags & ios_base::showpoint)

  00019	f6 c2 10	 test	 dl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN3@Ffmt

; 1390 : 			*_Ptr++ = '#';

  0001e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00021	40		 inc	 eax
$LN3@Ffmt:

; 1391 : 		*_Ptr++ = '.';
; 1392 : 		*_Ptr++ = '*';	// for precision argument
; 1393 : 		if (_Spec != '\0')

  00022	8a 4d 10	 mov	 cl, BYTE PTR __Spec$[ebp]
  00025	66 c7 00 2e 2a	 mov	 WORD PTR [eax], 10798	; 00002a2eH
  0002a	83 c0 02	 add	 eax, 2
  0002d	84 c9		 test	 cl, cl
  0002f	74 03		 je	 SHORT $LN4@Ffmt

; 1394 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 08		 mov	 BYTE PTR [eax], cl
  00033	40		 inc	 eax
$LN4@Ffmt:

; 1395 : 
; 1396 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	8b ca		 mov	 ecx, edx
  00036	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H

; 1397 : 		if (_Flags & ios_base::uppercase)

  0003c	f6 c2 04	 test	 dl, 4
  0003f	74 38		 je	 SHORT $LN5@Ffmt
  00041	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H

; 1398 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00047	74 38		 je	 SHORT $LN16@Ffmt
  00049	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  0004f	75 0d		 jne	 SHORT $LN8@Ffmt
  00051	b1 41		 mov	 cl, 65			; 00000041H

; 1399 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1400 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1401 : 		else
; 1402 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00053	88 08		 mov	 BYTE PTR [eax], cl

; 1403 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1404 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1405 : 
; 1406 : 		*_Ptr = '\0';

  00055	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1407 : 		return (_Fmt);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi

; 1408 : 		}

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN8@Ffmt:
  0005e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H

; 1398 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00064	0f 95 c1	 setne	 cl
  00067	8d 0c 4d 45 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+69]

; 1399 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1400 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1401 : 		else
; 1402 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0006e	88 08		 mov	 BYTE PTR [eax], cl

; 1403 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1404 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1405 : 
; 1406 : 		*_Ptr = '\0';

  00070	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1407 : 		return (_Fmt);

  00074	8b c6		 mov	 eax, esi
  00076	5e		 pop	 esi

; 1408 : 		}

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN5@Ffmt:
  00079	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H

; 1399 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1400 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1401 : 		else
; 1402 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0007f	75 0d		 jne	 SHORT $LN14@Ffmt
$LN16@Ffmt:
  00081	b1 66		 mov	 cl, 102			; 00000066H
  00083	88 08		 mov	 BYTE PTR [eax], cl

; 1403 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1404 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1405 : 
; 1406 : 		*_Ptr = '\0';

  00085	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1407 : 		return (_Fmt);

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi

; 1408 : 		}

  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN14@Ffmt:
  0008e	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1399 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1400 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1401 : 		else
; 1402 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00094	75 0d		 jne	 SHORT $LN12@Ffmt
  00096	b1 61		 mov	 cl, 97			; 00000061H
  00098	88 08		 mov	 BYTE PTR [eax], cl

; 1403 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1404 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1405 : 
; 1406 : 		*_Ptr = '\0';

  0009a	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1407 : 		return (_Fmt);

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi

; 1408 : 		}

  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN12@Ffmt:
  000a3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H

; 1399 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1400 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1401 : 		else
; 1402 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  000a9	0f 95 c1	 setne	 cl
  000ac	8d 0c 4d 65 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+101]
  000b3	88 08		 mov	 BYTE PTR [eax], cl

; 1403 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1404 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1405 : 
; 1406 : 		*_Ptr = '\0';

  000b5	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1407 : 		return (_Fmt);

  000b9	8b c6		 mov	 eax, esi
  000bb	5e		 pop	 esi

; 1408 : 		}

  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1373 : 		{	// put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi

; 1374 : 		char _Buf[2 * _MAX_INT_DIG];
; 1375 : 
; 1376 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp?$AA@
  00022	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00025	8b f9		 mov	 edi, ecx
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _sprintf_s
  0002f	50		 push	 eax
  00030	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00033	50		 push	 eax
  00034	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00037	56		 push	 esi
  00038	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0003b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0003e	53		 push	 ebx
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1377 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
; 1378 : 		}

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	83 c4 30	 add	 esp, 48			; 00000030H
  0004b	8b c3		 mov	 eax, ebx
  0004d	33 cd		 xor	 ecx, ebp
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Precision$ = -72					; size = 8
__Ptwo$2 = -68						; size = 4
___$ReturnUdt$GSCopy$1$ = -64				; size = 4
_this$GSCopy$1$ = -60					; size = 4
__Iosbase$GSCopy$1$ = -56				; size = 4
__Precision$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1349 : 		{	// put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1350 : 		string _Buf;

  00030	33 d2		 xor	 edx, edx
  00032	8b 4d 14	 mov	 ecx, DWORD PTR __Iosbase$[ebp]
  00035	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0003a	89 45 c0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003d	89 4d c8	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ecx
  00040	89 7d e4	 mov	 DWORD PTR __Buf$[ebp+20], edi
  00043	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx
  00046	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl

; 1351 : 		char _Fmt[8];
; 1352 : 		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
; 1353 : 			== ios_base::fixed;

  00049	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1354 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0004c	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0004f	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00054	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00057	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx
  0005a	89 75 cc	 mov	 DWORD PTR __Precision$1$[ebp], esi
  0005d	85 c9		 test	 ecx, ecx
  0005f	7f 17		 jg	 SHORT $LN4@do_put
  00061	7c 04		 jl	 SHORT $LN314@do_put
  00063	85 f6		 test	 esi, esi
  00065	75 11		 jne	 SHORT $LN4@do_put
$LN314@do_put:
  00067	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006c	74 0a		 je	 SHORT $LN4@do_put
  0006e	be 06 00 00 00	 mov	 esi, 6
  00073	33 c9		 xor	 ecx, ecx
  00075	89 75 cc	 mov	 DWORD PTR __Precision$1$[ebp], esi
$LN4@do_put:
  00078	89 4d bc	 mov	 DWORD PTR __Precision$[ebp+4], ecx

; 1355 : 			? 6 : _Iosbase.precision();	// desired precision
; 1356 : 		size_t _Bufsize = (size_t)_Precision;

  0007b	8b ce		 mov	 ecx, esi
  0007d	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H

; 1357 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

  00082	75 56		 jne	 SHORT $LN2@do_put
  00084	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  00089	0f 28 c1	 movaps	 xmm0, xmm1
  0008c	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00093	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  0009b	76 3d		 jbe	 SHORT $LN2@do_put

; 1358 : 			{	// f or F format
; 1359 : 			int _Ptwo;
; 1360 : 			(void)_CSTD frexpl(_Val, &_Ptwo);

  0009d	8d 45 bc	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000a0	50		 push	 eax
  000a1	83 ec 08	 sub	 esp, 8
  000a4	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000a9	e8 00 00 00 00	 call	 _frexp

; 1361 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000ae	8b 45 bc	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	8b 7d e4	 mov	 edi, DWORD PTR __Buf$[ebp+20]
  000b7	dd d8		 fstp	 ST(0)
  000b9	99		 cdq
  000ba	33 c2		 xor	 eax, edx
  000bc	2b c2		 sub	 eax, edx
  000be	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000c4	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000c9	f7 e9		 imul	 ecx
  000cb	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ce	8b ca		 mov	 ecx, edx
  000d0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000d3	03 ca		 add	 ecx, edx
  000d5	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000d8	03 ce		 add	 ecx, esi
$LN2@do_put:

; 1362 : 			}
; 1363 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  000da	83 c1 32	 add	 ecx, 50			; 00000032H
  000dd	3b ca		 cmp	 ecx, edx
  000df	77 13		 ja	 SHORT $LN127@do_put
  000e1	83 ff 10	 cmp	 edi, 16			; 00000010H
  000e4	89 4d e0	 mov	 DWORD PTR __Buf$[ebp+16], ecx
  000e7	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]
  000ea	0f 43 45 d0	 cmovae	 eax, DWORD PTR __Buf$[ebp]
  000ee	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f2	eb 0d		 jmp	 SHORT $LN128@do_put
$LN127@do_put:
  000f4	2b ca		 sub	 ecx, edx
  000f6	6a 00		 push	 0
  000f8	51		 push	 ecx
  000f9	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  000fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN128@do_put:

; 1364 : 
; 1365 : 		int _Ngen = _CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00101	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H
  00105	8d 7d d0	 lea	 edi, DWORD PTR __Buf$[ebp]
  00108	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
  0010d	0f 43 7d d0	 cmovae	 edi, DWORD PTR __Buf$[ebp]
  00111	83 ec 08	 sub	 esp, 8
  00114	8b 45 c8	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00117	8b 75 e0	 mov	 esi, DWORD PTR __Buf$[ebp+16]
  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	ff 75 cc	 push	 DWORD PTR __Precision$1$[ebp]
  00122	ff 70 14	 push	 DWORD PTR [eax+20]
  00125	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00128	6a 4c		 push	 76			; 0000004cH
  0012a	50		 push	 eax
  0012b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0012e	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	50		 push	 eax
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	e8 00 00 00 00	 call	 _sprintf_s

; 1366 : 			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);
; 1367 : 
; 1368 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  0013e	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H
  00142	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00145	8b 75 c0	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00148	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00151	ff 75 c8	 push	 DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00154	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00157	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0015a	56		 push	 esi
  0015b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0015e	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  00163	8b 4d e4	 mov	 ecx, DWORD PTR __Buf$[ebp+20]
  00166	83 c4 38	 add	 esp, 56			; 00000038H
  00169	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0016c	72 0d		 jb	 SHORT $LN315@do_put
  0016e	41		 inc	 ecx
  0016f	51		 push	 ecx
  00170	ff 75 d0	 push	 DWORD PTR __Buf$[ebp]
  00173	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00176	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN315@do_put:
  0017b	8b c6		 mov	 eax, esi

; 1369 : 		}

  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	33 cd		 xor	 ecx, ebp
  0018f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Precision$ = -72					; size = 8
__Ptwo$2 = -68						; size = 4
___$ReturnUdt$GSCopy$1$ = -64				; size = 4
_this$GSCopy$1$ = -60					; size = 4
__Iosbase$GSCopy$1$ = -56				; size = 4
__Precision$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1325 : 		{	// put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1326 : 		string _Buf;

  00030	33 d2		 xor	 edx, edx
  00032	8b 4d 14	 mov	 ecx, DWORD PTR __Iosbase$[ebp]
  00035	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0003a	89 45 c0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003d	89 4d c8	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ecx
  00040	89 7d e4	 mov	 DWORD PTR __Buf$[ebp+20], edi
  00043	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx
  00046	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl

; 1327 : 		char _Fmt[8];
; 1328 : 		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
; 1329 : 			== ios_base::fixed;

  00049	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1330 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0004c	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0004f	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00054	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00057	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx
  0005a	89 75 cc	 mov	 DWORD PTR __Precision$1$[ebp], esi
  0005d	85 c9		 test	 ecx, ecx
  0005f	7f 17		 jg	 SHORT $LN4@do_put
  00061	7c 04		 jl	 SHORT $LN310@do_put
  00063	85 f6		 test	 esi, esi
  00065	75 11		 jne	 SHORT $LN4@do_put
$LN310@do_put:
  00067	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006c	74 0a		 je	 SHORT $LN4@do_put
  0006e	be 06 00 00 00	 mov	 esi, 6
  00073	33 c9		 xor	 ecx, ecx
  00075	89 75 cc	 mov	 DWORD PTR __Precision$1$[ebp], esi
$LN4@do_put:
  00078	89 4d bc	 mov	 DWORD PTR __Precision$[ebp+4], ecx

; 1331 : 			? 6 : _Iosbase.precision();	// desired precision
; 1332 : 		size_t _Bufsize = (size_t)_Precision;

  0007b	8b ce		 mov	 ecx, esi
  0007d	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H

; 1333 : 		if (_Isfixed && 1e10 < _CSTD fabs(_Val))

  00082	75 56		 jne	 SHORT $LN2@do_put
  00084	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  00089	0f 28 c1	 movaps	 xmm0, xmm1
  0008c	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00093	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  0009b	76 3d		 jbe	 SHORT $LN2@do_put

; 1334 : 			{	// f or F format
; 1335 : 			int _Ptwo;
; 1336 : 			(void)_CSTD frexp(_Val, &_Ptwo);

  0009d	8d 45 bc	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000a0	50		 push	 eax
  000a1	83 ec 08	 sub	 esp, 8
  000a4	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000a9	e8 00 00 00 00	 call	 _frexp

; 1337 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000ae	8b 45 bc	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	8b 7d e4	 mov	 edi, DWORD PTR __Buf$[ebp+20]
  000b7	dd d8		 fstp	 ST(0)
  000b9	99		 cdq
  000ba	33 c2		 xor	 eax, edx
  000bc	2b c2		 sub	 eax, edx
  000be	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000c4	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000c9	f7 e9		 imul	 ecx
  000cb	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ce	8b ca		 mov	 ecx, edx
  000d0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000d3	03 ca		 add	 ecx, edx
  000d5	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000d8	03 ce		 add	 ecx, esi
$LN2@do_put:

; 1338 : 			}
; 1339 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  000da	83 c1 32	 add	 ecx, 50			; 00000032H
  000dd	3b ca		 cmp	 ecx, edx
  000df	77 13		 ja	 SHORT $LN123@do_put
  000e1	83 ff 10	 cmp	 edi, 16			; 00000010H
  000e4	89 4d e0	 mov	 DWORD PTR __Buf$[ebp+16], ecx
  000e7	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]
  000ea	0f 43 45 d0	 cmovae	 eax, DWORD PTR __Buf$[ebp]
  000ee	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f2	eb 0d		 jmp	 SHORT $LN124@do_put
$LN123@do_put:
  000f4	2b ca		 sub	 ecx, edx
  000f6	6a 00		 push	 0
  000f8	51		 push	 ecx
  000f9	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  000fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN124@do_put:

; 1340 : 
; 1341 : 		int _Ngen = _CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00101	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H
  00105	8d 7d d0	 lea	 edi, DWORD PTR __Buf$[ebp]
  00108	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
  0010d	0f 43 7d d0	 cmovae	 edi, DWORD PTR __Buf$[ebp]
  00111	83 ec 08	 sub	 esp, 8
  00114	8b 45 c8	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00117	8b 75 e0	 mov	 esi, DWORD PTR __Buf$[ebp+16]
  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	ff 75 cc	 push	 DWORD PTR __Precision$1$[ebp]
  00122	ff 70 14	 push	 DWORD PTR [eax+20]
  00125	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00128	6a 00		 push	 0
  0012a	50		 push	 eax
  0012b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0012e	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	50		 push	 eax
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	e8 00 00 00 00	 call	 _sprintf_s

; 1342 : 			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);
; 1343 : 
; 1344 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  0013e	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H
  00142	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00145	8b 75 c0	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00148	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00151	ff 75 c8	 push	 DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00154	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00157	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0015a	56		 push	 esi
  0015b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0015e	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  00163	8b 4d e4	 mov	 ecx, DWORD PTR __Buf$[ebp+20]
  00166	83 c4 38	 add	 esp, 56			; 00000038H
  00169	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0016c	72 0d		 jb	 SHORT $LN311@do_put
  0016e	41		 inc	 ecx
  0016f	51		 push	 ecx
  00170	ff 75 d0	 push	 DWORD PTR __Buf$[ebp]
  00173	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00176	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN311@do_put:
  0017b	8b c6		 mov	 eax, esi

; 1345 : 		}

  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	33 cd		 xor	 ecx, ebp
  0018f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1315 : 		{	// put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1316 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1317 : 
; 1318 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00014	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi
  0001c	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001f	8b f9		 mov	 edi, ecx
  00021	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00024	ff 76 14	 push	 DWORD PTR [esi+20]
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu?$AA@
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	50		 push	 eax
  00037	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003a	6a 40		 push	 64			; 00000040H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _sprintf_s
  00042	50		 push	 eax
  00043	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00046	50		 push	 eax
  00047	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004a	56		 push	 esi
  0004b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1319 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1320 : 				_Iosbase.flags()), _Val)));
; 1321 : 		}

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	83 c4 34	 add	 esp, 52			; 00000034H
  0005e	8b c3		 mov	 eax, ebx
  00060	33 cd		 xor	 ecx, ebp
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1305 : 		{	// put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1306 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1307 : 
; 1308 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00014	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi
  0001c	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  0001f	8b f9		 mov	 edi, ecx
  00021	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00024	ff 76 14	 push	 DWORD PTR [esi+20]
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld?$AA@
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	50		 push	 eax
  00037	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0003a	6a 40		 push	 64			; 00000040H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _sprintf_s
  00042	50		 push	 eax
  00043	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00046	50		 push	 eax
  00047	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0004a	56		 push	 esi
  0004b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1309 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1310 : 				_Iosbase.flags()), _Val)));
; 1311 : 		}

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	83 c4 34	 add	 esp, 52			; 00000034H
  0005e	8b c3		 mov	 eax, ebx
  00060	33 cd		 xor	 ecx, ebp
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1295 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1296 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1297 : 
; 1298 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00014	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi
  0001c	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001f	8b f9		 mov	 edi, ecx
  00021	ff 76 14	 push	 DWORD PTR [esi+20]
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu?$AA@
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	50		 push	 eax
  00034	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00037	6a 40		 push	 64			; 00000040H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _sprintf_s
  0003f	50		 push	 eax
  00040	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00043	50		 push	 eax
  00044	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00047	56		 push	 esi
  00048	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1299 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1300 : 				_Iosbase.flags()), _Val)));
; 1301 : 		}

  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	83 c4 30	 add	 esp, 48			; 00000030H
  0005b	8b c3		 mov	 eax, ebx
  0005d	33 cd		 xor	 ecx, ebp
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1285 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1286 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1287 : 
; 1288 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00014	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi
  0001c	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0001f	8b f9		 mov	 edi, ecx
  00021	ff 76 14	 push	 DWORD PTR [esi+20]
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld?$AA@
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	50		 push	 eax
  00034	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00037	6a 40		 push	 64			; 00000040H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _sprintf_s
  0003f	50		 push	 eax
  00040	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00043	50		 push	 eax
  00044	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00047	56		 push	 esi
  00048	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0004b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1289 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1290 : 				_Iosbase.flags()), _Val)));
; 1291 : 		}

  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	83 c4 30	 add	 esp, 48			; 00000030H
  0005b	8b c3		 mov	 eax, ebx
  0005d	33 cd		 xor	 ecx, ebp
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T2 = -88						; size = 8
$T3 = -80						; size = 8
$T4 = -80						; size = 8
__Dest$3$ = -76						; size = 4
_this$GSCopy$1$ = -72					; size = 4
__Fill$GSCopy$ = -68					; size = 1
$T5 = -64						; size = 24
$T6 = -64						; size = 24
__Str$7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1255 : 		{	// put formatted bool to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00031	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]
  00034	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00037	88 45 bc	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al

; 1256 : 		_DEBUG_POINTER(_Dest);
; 1257 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  0003a	f7 46 14 00 40
	00 00		 test	 DWORD PTR [esi+20], 16384 ; 00004000H
  00041	75 1a		 jne	 SHORT $LN2@do_put

; 1258 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  00043	0f b6 45 1c	 movzx	 eax, BYTE PTR __Val$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	50		 push	 eax
  0004a	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0004d	56		 push	 esi
  0004e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00051	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00054	53		 push	 ebx
  00055	ff 52 24	 call	 DWORD PTR [edx+36]
  00058	e9 7d 01 00 00	 jmp	 $LN950@do_put
$LN2@do_put:

; 1259 : 		else
; 1260 : 			{	// put "false" or "true"
; 1261 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0005d	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  00060	8b ce		 mov	 ecx, esi
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00068	50		 push	 eax
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00070	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00075	83 c4 04	 add	 esp, 4
  00078	8b f8		 mov	 edi, eax
  0007a	8b 4d b4	 mov	 ecx, DWORD PTR $T4[ebp+4]
  0007d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 11		 je	 SHORT $LN19@do_put
  00088	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008a	ff 52 08	 call	 DWORD PTR [edx+8]
  0008d	85 c0		 test	 eax, eax
  0008f	74 08		 je	 SHORT $LN19@do_put
  00091	8b 10		 mov	 edx, DWORD PTR [eax]
  00093	8b c8		 mov	 ecx, eax
  00095	6a 01		 push	 1
  00097	ff 12		 call	 DWORD PTR [edx]
$LN19@do_put:

; 1262 : 			_Mystr _Str;

  00099	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+20], 15 ; 0000000fH
  000a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+16], 0
  000a7	c6 45 d8 00	 mov	 BYTE PTR __Str$7[ebp], 0

; 1263 : 			if (_Val)

  000ab	80 7d 1c 00	 cmp	 BYTE PTR __Val$[ebp], 0

; 1264 : 				_Str.assign(_Punct_fac.truename());

  000af	8d 45 c0	 lea	 eax, DWORD PTR $T6[ebp]
  000b2	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000b9	8b cf		 mov	 ecx, edi
  000bb	50		 push	 eax
  000bc	74 09		 je	 SHORT $LN4@do_put
  000be	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  000c3	8b f8		 mov	 edi, eax

; 1265 : 			else

  000c5	eb 07		 jmp	 SHORT $LN1052@do_put
$LN4@do_put:

; 1266 : 				_Str.assign(_Punct_fac.falsename());

  000c7	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  000cc	8b f8		 mov	 edi, eax
$LN1052@do_put:
  000ce	8d 45 d8	 lea	 eax, DWORD PTR __Str$7[ebp]
  000d1	3b c7		 cmp	 eax, edi
  000d3	74 30		 je	 SHORT $LN509@do_put
  000d5	8b 45 ec	 mov	 eax, DWORD PTR __Str$7[ebp+20]
  000d8	83 f8 10	 cmp	 eax, 16			; 00000010H
  000db	72 0d		 jb	 SHORT $LN682@do_put
  000dd	40		 inc	 eax
  000de	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  000e1	50		 push	 eax
  000e2	ff 75 d8	 push	 DWORD PTR __Str$7[ebp]
  000e5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN682@do_put:
  000ea	57		 push	 edi
  000eb	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  000ee	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+20], 15 ; 0000000fH
  000f5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+16], 0
  000fc	c6 45 d8 00	 mov	 BYTE PTR __Str$7[ebp], 0
  00100	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN509@do_put:
  00105	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp+20]
  00108	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0010c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0010f	72 0d		 jb	 SHORT $LN786@do_put
  00111	40		 inc	 eax
  00112	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  00115	50		 push	 eax
  00116	ff 75 c0	 push	 DWORD PTR $T5[ebp]
  00119	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN786@do_put:

; 1267 : 
; 1268 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1269 : 				|| (size_t)_Iosbase.width() <= _Str.size()

  0011e	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00122	8b 4d e8	 mov	 ecx, DWORD PTR __Str$7[ebp+16]
  00125	7c 13		 jl	 SHORT $LN8@do_put
  00127	7f 06		 jg	 SHORT $LN1045@do_put
  00129	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0012d	76 0b		 jbe	 SHORT $LN8@do_put
$LN1045@do_put:
  0012f	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00132	3b f9		 cmp	 edi, ecx
  00134	76 04		 jbe	 SHORT $LN8@do_put
  00136	2b f9		 sub	 edi, ecx
  00138	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  0013a	33 ff		 xor	 edi, edi
$LN9@do_put:

; 1270 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();
; 1271 : 
; 1272 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  0013c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0013f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00144	83 f8 40	 cmp	 eax, 64			; 00000040H
  00147	74 2b		 je	 SHORT $LN1046@do_put

; 1273 : 				{	// put leading fill
; 1274 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00149	57		 push	 edi
  0014a	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0014d	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00150	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00153	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00156	50		 push	 eax
  00157	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep

; 1275 : 				_Fillcount = 0;

  0015f	8b 4d e8	 mov	 ecx, DWORD PTR __Str$7[ebp+16]
  00162	83 c4 18	 add	 esp, 24			; 00000018H
  00165	33 ff		 xor	 edi, edi
  00167	8b 10		 mov	 edx, DWORD PTR [eax]
  00169	89 55 0c	 mov	 DWORD PTR __Dest$[ebp], edx
  0016c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016f	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00172	eb 06		 jmp	 SHORT $LN1053@do_put
$LN1046@do_put:
  00174	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00177	8b 55 0c	 mov	 edx, DWORD PTR __Dest$[ebp]
$LN1053@do_put:

; 1276 : 				}
; 1277 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  0017a	83 7d ec 10	 cmp	 DWORD PTR __Str$7[ebp+20], 16 ; 00000010H
  0017e	89 45 b4	 mov	 DWORD PTR __Dest$3$[ebp], eax
  00181	8d 45 d8	 lea	 eax, DWORD PTR __Str$7[ebp]
  00184	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Str$7[ebp]
  00188	51		 push	 ecx
  00189	50		 push	 eax
  0018a	ff 75 b4	 push	 DWORD PTR __Dest$3$[ebp]
  0018d	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  00190	52		 push	 edx
  00191	50		 push	 eax
  00192	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00195	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1278 : 			_Iosbase.width(0);
; 1279 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0019a	57		 push	 edi
  0019b	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0019e	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a0	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  001a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001a6	50		 push	 eax
  001a7	51		 push	 ecx
  001a8	53		 push	 ebx
  001a9	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  001ac	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  001af	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  001b6	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  001bd	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  001c2	8b 45 ec	 mov	 eax, DWORD PTR __Str$7[ebp+20]
  001c5	83 c4 30	 add	 esp, 48			; 00000030H
  001c8	83 f8 10	 cmp	 eax, 16			; 00000010H
  001cb	72 0d		 jb	 SHORT $LN950@do_put
  001cd	40		 inc	 eax
  001ce	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  001d1	50		 push	 eax
  001d2	ff 75 d8	 push	 DWORD PTR __Str$7[ebp]
  001d5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN950@do_put:
  001da	8b c3		 mov	 eax, ebx

; 1280 : 			}
; 1281 : 		}

  001dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e6	59		 pop	 ecx
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx
  001ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ed	33 cd		 xor	 ecx, ebp
  001ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$4:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  0000e	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$32:
  00016	e8 00 00 00 00	 call	 ___std_terminate
  0001b	c3		 ret	 0
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$134:
  0001c	e8 00 00 00 00	 call	 ___std_terminate
  00021	c3		 ret	 0
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1230 : 		{	// put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1231 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  0000b	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000e	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  00011	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00014	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	ff 50 18	 call	 DWORD PTR [eax+24]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1232 : 		}

  00020	5d		 pop	 ebp
  00021	c2 1c 00	 ret	 28			; 0000001cH
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1218 : 		{	// put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1219 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 20	 call	 DWORD PTR [eax+32]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1220 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1212 : 		{	// put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1213 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00003	ff 75 1c	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00011	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00014	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00017	ff 50 24	 call	 DWORD PTR [eax+36]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1214 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1197 : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1196 : 		: locale::facet(_Refs)

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1198 : 		_Init(_Lobj);
; 1199 : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1184 : 		}

  00000	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1180 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1168 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1169 : 		if (_Ppf != 0 && *_Ppf == 0)

  00028	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0002b	33 db		 xor	 ebx, ebx
  0002d	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
  00030	85 ff		 test	 edi, edi
  00032	74 63		 je	 SHORT $LN30@Getcat
  00034	39 1f		 cmp	 DWORD PTR [edi], ebx
  00036	75 5f		 jne	 SHORT $LN30@Getcat

; 1170 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00038	6a 08		 push	 8
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 f6		 test	 esi, esi
  0004c	74 38		 je	 SHORT $LN4@Getcat
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	85 c9		 test	 ecx, ecx
  00056	75 07		 jne	 SHORT $LN12@Getcat
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005d	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
  0005f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00062	85 c0		 test	 eax, eax
  00064	75 03		 jne	 SHORT $LN17@Getcat
  00066	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
  00069	50		 push	 eax
  0006a	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00072	bb 01 00 00 00	 mov	 ebx, 1
  00077	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0007e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  00084	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00086	33 f6		 xor	 esi, esi
$LN5@Getcat:
  00088	89 37		 mov	 DWORD PTR [edi], esi
  0008a	f6 c3 01	 test	 bl, 1
  0008d	74 08		 je	 SHORT $LN30@Getcat
  0008f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00092	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN30@Getcat:

; 1171 : 				_Locinfo(_Ploc->c_str()));
; 1172 : 		return (_X_NUMERIC);

  00097	b8 04 00 00 00	 mov	 eax, 4

; 1173 : 		}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__Lock$3 = -24						; size = 4
__Lock$4 = -20						; size = 4
__Psave$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 553  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d f0	 mov	 DWORD PTR __Psave$5[ebp], ebx
  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet
  0004c	57		 push	 edi
  0004d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, edi ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN12@use_facet:
  0006d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN11@use_facet:

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00081	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00084	73 0c		 jae	 SHORT $LN20@use_facet
  00086	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00089	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
  0008c	85 f6		 test	 esi, esi
  0008e	75 77		 jne	 SHORT $LN7@use_facet
  00090	eb 02		 jmp	 SHORT $LN28@use_facet
$LN20@use_facet:
  00092	33 f6		 xor	 esi, esi
$LN28@use_facet:
  00094	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00098	74 10		 je	 SHORT $LN17@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a2	73 0a		 jae	 SHORT $LN29@use_facet
  000a4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a7	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 565  : 
; 566  : 		if (_Pf != 0)

  000aa	85 f6		 test	 esi, esi
  000ac	75 59		 jne	 SHORT $LN7@use_facet
$LN29@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  000ae	85 db		 test	 ebx, ebx
  000b0	74 04		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  000b2	8b f3		 mov	 esi, ebx
  000b4	eb 51		 jmp	 SHORT $LN7@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000b6	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000b9	8d 45 f0	 lea	 eax, DWORD PTR __Psave$5[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  000c2	83 c4 08	 add	 esp, 8
  000c5	83 f8 ff	 cmp	 eax, -1
  000c8	75 24		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7bad_cast@std@@6B@
  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d9	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000dc	66 0f d6 45 e0	 movq	 QWORD PTR $T2[ebp+4], xmm0
  000e1	50		 push	 eax
  000e2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@use_facet:
$LN6@use_facet:

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else
; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000ee	8b 75 f0	 mov	 esi, DWORD PTR __Psave$5[ebp]

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 586  : 			_Pfmod->_Incref();

  000f1	8b ce		 mov	 ecx, esi
  000f3	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  000f9	8b 16		 mov	 edx, DWORD PTR [esi]
  000fb	ff 52 04	 call	 DWORD PTR [edx+4]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00104	83 c4 04	 add	 esp, 4
$LN7@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00107	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0010a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0010f	8b c6		 mov	 eax, esi

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  00111	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00114	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011b	59		 pop	 ecx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
$LN31@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 142  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 143  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 133  : 				this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN5@sentry
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 122  : 			: _Sentry_base(_Ostr)

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN6@sentry
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN6@sentry:

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00052	75 11		 jne	 SHORT $LN2@sentry
  00054	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 09		 je	 SHORT $LN2@sentry
  0005c	3b ce		 cmp	 ecx, esi
  0005e	74 05		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  00060	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006a	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0006f	0f 94 c0	 sete	 al
  00072	88 47 04	 mov	 BYTE PTR [edi+4], al

; 127  : 			}

  00075	8b c7		 mov	 eax, edi
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 107  : 			if (_Myostr.rdbuf() != 0)

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 109  : 			}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   : 			: _Myostr(_Ostr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi

; 100  : 			{	// lock the stream buffer, if there

  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN8@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@Sentry_bas:

; 103  : 			}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]
  00005	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00008	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 69   : 		}

  0000b	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Myoff(_Off), _Fpos(_Fpz), _Mystate()

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	89 01		 mov	 DWORD PTR [ecx], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0000e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 44   : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00021	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>, COMDAT
; _this$ = ecx

; 595  : 		: _Mypair(_One_then_variadic_args_t(),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 598  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<char> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >, COMDAT
; _this$ = ecx

; 1202 : 		{	// assign [_First, _Last), input iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1203 : 		return (replace(begin(), end(), _First, _Last));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 04		 jb	 SHORT $LN14@assign
  00009	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000b	eb 02		 jmp	 SHORT $LN15@assign
$LN14@assign:
  0000d	8b d1		 mov	 edx, ecx
$LN15@assign:
  0000f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00012	03 c2		 add	 eax, edx
  00014	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00018	72 13		 jb	 SHORT $LN48@assign
  0001a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00022	50		 push	 eax
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace

; 1204 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8

; 1203 : 		return (replace(begin(), end(), _First, _Last));

$LN48@assign:
  0002d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00030	8b d1		 mov	 edx, ecx
  00032	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace

; 1204 : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT
; _this$ = ecx

; 398  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 399  : 		return (*(_Mybase *)this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]

; 400  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 340  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 341  : 		}

  00002	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 322  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  : 		: _Mybase(_Parg, _Pstring)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 323  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 804  : 	return (false);

  00000	32 c0		 xor	 al, al

; 805  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z PROC ; std::operator!=<std::allocator<char>,std::allocator<char> >, COMDAT

; 1026 : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 1027 : 	}

  00002	c3		 ret	 0
??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ENDP ; std::operator!=<std::allocator<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>, COMDAT
; _this$ = ecx

; 595  : 		: _Mypair(_One_then_variadic_args_t(),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 598  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z PROC ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 1026 : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 1027 : 	}

  00002	c3		 ret	 0
??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ENDP ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > > >, COMDAT
; _this$ = ecx

; 1651 : 		{	// copy initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1652 : 		return (_Uninitialized_copy(_First, _Last,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	51		 push	 ecx
  0000f	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  0001d	83 c4 18	 add	 esp, 24			; 00000018H

; 1653 : 			_Ptr, this->_Getal()));
; 1654 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > ><std::_Wrap_alloc<std::allocator<HostDevice> >,void>, COMDAT
; _this$ = ecx

; 526  : 		: _Mypair(_One_then_variadic_args_t(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 529  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > ><std::_Wrap_alloc<std::allocator<HostDevice> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<HostDevice> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<HostDevice> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@YA$$QAV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>, COMDAT
; _this$ = ecx

; 1651 : 		{	// copy initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1652 : 		return (_Uninitialized_copy(_First, _Last,

  00006	51		 push	 ecx
  00007	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000b	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000e	51		 push	 ecx
  0000f	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00012	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  0001d	83 c4 18	 add	 esp, 24			; 00000018H

; 1653 : 			_Ptr, this->_Getal()));
; 1654 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_unchecked@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_unchecked@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00@Z PROC ; std::_Copy_unchecked<HostDevice *,HostDevice *>, COMDAT

; 2332 : 	{	// copy [_First, _Last) to [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2333 : 		// note: _Copy_unchecked is called directly elsewhere in the STL
; 2334 : 	return (_Copy_unchecked1(_First, _Last,

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000f	3b f3		 cmp	 esi, ebx
  00011	74 12		 je	 SHORT $LN742@Copy_unche
$LL8@Copy_unche:
  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0001b	83 c6 70	 add	 esi, 112		; 00000070H
  0001e	83 c7 70	 add	 edi, 112		; 00000070H
  00021	3b f3		 cmp	 esi, ebx
  00023	75 ee		 jne	 SHORT $LL8@Copy_unche
$LN742@Copy_unche:
  00025	8b c7		 mov	 eax, edi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 2335 : 		_Dest, _Ptr_copy_cat(_First, _Dest)));
; 2336 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Copy_unchecked@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00@Z ENDP ; std::_Copy_unchecked<HostDevice *,HostDevice *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?9V?$allocator@UHostDevice@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9V?$allocator@UHostDevice@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z PROC ; std::operator!=<std::allocator<HostDevice>,std::allocator<HostDevice> >, COMDAT

; 1026 : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 1027 : 	}

  00002	c3		 ret	 0
??$?9V?$allocator@UHostDevice@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@0@Z ENDP ; std::operator!=<std::allocator<HostDevice>,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::construct<HostDevice,HostDevice const &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN13@construct
  00034	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@ABU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::construct<HostDevice,HostDevice const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::construct<HostDevice,HostDevice &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00026	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	85 c9		 test	 ecx, ecx
  00032	74 08		 je	 SHORT $LN13@construct
  00034	ff 75 0c	 push	 DWORD PTR _<_Args_0>$[ebp]
  00037	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN13@construct:

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z$2:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@UHostDevice@@AAU1@@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::construct<HostDevice,HostDevice &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@UHostDevice@@@std@@YAPAUHostDevice@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@UHostDevice@@@std@@YAPAUHostDevice@@PAU1@@Z PROC ; std::_Unfancy<HostDevice>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 740  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@UHostDevice@@@std@@YAPAUHostDevice@@PAU1@@Z ENDP ; std::_Unfancy<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUHostDevice@@@std@@YAPBUHostDevice@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUHostDevice@@@std@@YAPBUHostDevice@@ABU1@@Z PROC ; std::addressof<HostDevice const >, COMDAT

; 724  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 726  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUHostDevice@@@std@@YAPBUHostDevice@@ABU1@@Z ENDP ; std::addressof<HostDevice const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert@K@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@$$QAK@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@K@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@$$QAK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<unsigned long>, COMDAT
; _this$ = ecx

; 1061 : 		{	// insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1062 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1063 : 		_Nodeptr _Newnode =
; 1064 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long>
  00016	8b d0		 mov	 edx, eax

; 1065 : 				_STD forward<_Valty>(_Val)...);
; 1066 : 		_Incsize(1);

  00018	b9 54 55 55 15	 mov	 ecx, 357913940		; 15555554H
  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	2b c8		 sub	 ecx, eax
  00022	83 f9 01	 cmp	 ecx, 1
  00025	72 12		 jb	 SHORT $LN65@Insert
  00027	40		 inc	 eax
  00028	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1067 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1068 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	89 10		 mov	 DWORD PTR [eax], edx

; 1069 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN65@Insert:

; 1065 : 				_STD forward<_Valty>(_Val)...);
; 1066 : 		_Incsize(1);

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@Insert:
$LN64@Insert:
  00043	cc		 int	 3
??$_Insert@K@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@$$QAK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@K@std@@YA$$QAKAAK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@K@std@@YA$$QAKAAK@Z PROC			; std::forward<unsigned long>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@K@std@@YA$$QAKAAK@Z ENDP			; std::forward<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert@ABK@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@ABK@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@ABK@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@ABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<unsigned long const &>, COMDAT
; _this$ = ecx

; 1061 : 		{	// insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1062 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1063 : 		_Nodeptr _Newnode =
; 1064 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>
  00016	8b d0		 mov	 edx, eax

; 1065 : 				_STD forward<_Valty>(_Val)...);
; 1066 : 		_Incsize(1);

  00018	b9 54 55 55 15	 mov	 ecx, 357913940		; 15555554H
  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	2b c8		 sub	 ecx, eax
  00022	83 f9 01	 cmp	 ecx, 1
  00025	72 12		 jb	 SHORT $LN65@Insert
  00027	40		 inc	 eax
  00028	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1067 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1068 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	89 10		 mov	 DWORD PTR [eax], edx

; 1069 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN65@Insert:

; 1065 : 				_STD forward<_Valty>(_Val)...);
; 1066 : 		_Incsize(1);

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@Insert:
$LN64@Insert:
  00043	cc		 int	 3
??$_Insert@ABK@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@ABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 125  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$try_emplace@$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$try_emplace@$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::try_emplace<>, COMDAT
; _this$ = ecx

; 228  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  00003	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 230  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$try_emplace@$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::try_emplace<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2393 : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2394 : 	return (_STD move(_Left.append(_Right)));

  00004	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00007	56		 push	 esi
  00008	6a ff		 push	 -1
  0000a	6a 00		 push	 0
  0000c	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00016	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	8b ce		 mov	 ecx, esi
  00020	50		 push	 eax
  00021	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00028	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi

; 2395 : 	}

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z PROC ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2479 : 	{	// test for string vs. NTCS equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2480 : 	return (_Left.compare(_Right) == 0);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  0000b	75 04		 jne	 SHORT $LN7@operator
  0000d	33 c0		 xor	 eax, eax
  0000f	eb 14		 jmp	 SHORT $LN8@operator
$LN7@operator:
  00011	8b c2		 mov	 eax, edx
  00013	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
$LL32@operator:
  00016	66 8b 08	 mov	 cx, WORD PTR [eax]
  00019	83 c0 02	 add	 eax, 2
  0001c	66 85 c9	 test	 cx, cx
  0001f	75 f5		 jne	 SHORT $LL32@operator
  00021	2b c6		 sub	 eax, esi
  00023	d1 f8		 sar	 eax, 1
$LN8@operator:
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00028	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  0002c	8d 71 10	 lea	 esi, DWORD PTR [ecx+16]
  0002f	72 02		 jb	 SHORT $LN28@operator
  00031	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN28@operator:
  00033	50		 push	 eax
  00034	52		 push	 edx
  00035	ff 36		 push	 DWORD PTR [esi]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ?_Traits_compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAHQB_WI0I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Traits_compare
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	85 c0		 test	 eax, eax
  00042	0f 94 c0	 sete	 al
  00045	5e		 pop	 esi

; 2481 : 	}

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ENDP ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?EnableElevatedCursorChangeWndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?EnableElevatedCursorChangeWndProc@@YGJPAUHWND__@@IIJ@Z PROC ; EnableElevatedCursorChangeWndProc, COMDAT

; 11901: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 11903: }

  00003	5d		 pop	 ebp

; 11902: 	return DefWindowProc (hWnd, message, wParam, lParam);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__DefWindowProcA@16
?EnableElevatedCursorChangeWndProc@@YGJPAUHWND__@@IIJ@Z ENDP ; EnableElevatedCursorChangeWndProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
$T2 = -152						; size = 20
$T3 = -132						; size = 20
$T4 = -112						; size = 20
$T5 = -92						; size = 8
__Ostr$GSCopy$ = -84					; size = 4
__Ok$ = -80						; size = 8
__Pad$ = -80						; size = 8
tv3152 = -72						; size = 4
__Ctype_fac$1$ = -72					; size = 4
__State$ = -68						; size = 4
__Val$GSCopy$1$ = -64					; size = 4
__Count$2$ = -60					; size = 4
__Count$1$ = -56					; size = 4
$T6 = -52						; size = 4
$T7 = -52						; size = 4
__Byte$ = -52						; size = 1
__Pad$2$ = -48						; size = 4
$T8 = -44						; size = 24
$T9 = -44						; size = 24
$T10 = -44						; size = 24
__$ArrayPad$11 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 694  : 	{	// insert NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$11[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]

; 695  : 	ios_base::iostate _State = ios_base::goodbit;

  00034	33 f6		 xor	 esi, esi
  00036	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]

; 696  : 	streamsize _Count = (streamsize)_CSTD strlen(_Val);	// may overflow

  00039	8b c8		 mov	 ecx, eax
  0003b	89 7d ac	 mov	 DWORD PTR __Ostr$GSCopy$[ebp], edi
  0003e	89 45 c0	 mov	 DWORD PTR __Val$GSCopy$1$[ebp], eax
  00041	89 75 bc	 mov	 DWORD PTR __State$[ebp], esi
  00044	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1070@operator:
  00047	8a 01		 mov	 al, BYTE PTR [ecx]
  00049	41		 inc	 ecx
  0004a	84 c0		 test	 al, al
  0004c	75 f9		 jne	 SHORT $LL1070@operator

; 697  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0004e	8b 07		 mov	 eax, DWORD PTR [edi]
  00050	2b ca		 sub	 ecx, edx
  00052	89 4d c8	 mov	 DWORD PTR __Count$1$[ebp], ecx
  00055	89 75 c4	 mov	 DWORD PTR __Count$2$[ebp], esi
  00058	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005b	8b 44 3a 24	 mov	 eax, DWORD PTR [edx+edi+36]
  0005f	8b 5c 3a 20	 mov	 ebx, DWORD PTR [edx+edi+32]
  00063	85 c0		 test	 eax, eax
  00065	7c 17		 jl	 SHORT $LN20@operator
  00067	7f 0e		 jg	 SHORT $LN1072@operator
  00069	85 db		 test	 ebx, ebx
  0006b	74 11		 je	 SHORT $LN20@operator
  0006d	85 c0		 test	 eax, eax
  0006f	7c 0d		 jl	 SHORT $LN20@operator
  00071	7f 04		 jg	 SHORT $LN1072@operator
  00073	3b d9		 cmp	 ebx, ecx
  00075	76 07		 jbe	 SHORT $LN20@operator
$LN1072@operator:
  00077	2b d9		 sub	 ebx, ecx
  00079	83 d8 00	 sbb	 eax, 0
  0007c	eb 0e		 jmp	 SHORT $LN1085@operator
$LN20@operator:
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	66 0f 13 45 b0	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00086	8b 45 b4	 mov	 eax, DWORD PTR __Pad$[ebp+4]
  00089	8b 5d b0	 mov	 ebx, DWORD PTR __Pad$[ebp]
$LN1085@operator:

; 698  : 		? 0 : _Ostr.width() - _Count;
; 699  : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  0008c	8b 4c 3a 38	 mov	 ecx, DWORD PTR [edx+edi+56]
  00090	89 45 d0	 mov	 DWORD PTR __Pad$2$[ebp], eax
  00093	89 7d b0	 mov	 DWORD PTR __Ok$[ebp], edi
  00096	85 c9		 test	 ecx, ecx
  00098	74 05		 je	 SHORT $LN39@operator
  0009a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009c	ff 50 04	 call	 DWORD PTR [eax+4]
$LN39@operator:
  0009f	8b 07		 mov	 eax, DWORD PTR [edi]
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000a8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ab	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  000b0	75 11		 jne	 SHORT $LN35@operator
  000b2	8b 4c 38 3c	 mov	 ecx, DWORD PTR [eax+edi+60]
  000b6	85 c9		 test	 ecx, ecx
  000b8	74 09		 je	 SHORT $LN35@operator
  000ba	3b cf		 cmp	 ecx, edi
  000bc	74 05		 je	 SHORT $LN35@operator
  000be	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
$LN35@operator:
  000c3	8b 07		 mov	 eax, DWORD PTR [edi]
  000c5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c8	03 cf		 add	 ecx, edi
  000ca	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  000ce	0f 94 c0	 sete	 al
  000d1	88 45 b4	 mov	 BYTE PTR __Ok$[ebp+4], al
  000d4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 700  : 
; 701  : 	if (!_Ok)

  000db	84 c0		 test	 al, al
  000dd	75 0a		 jne	 SHORT $LN11@operator

; 702  : 		_State |= ios_base::badbit;

  000df	be 04 00 00 00	 mov	 esi, 4

; 703  : 	else

  000e4	e9 22 02 00 00	 jmp	 $LN26@operator
$LN11@operator:

; 704  : 		{	// state okay, insert characters
; 705  : 		_TRY_IO_BEGIN
; 706  : 		const ctype<_Elem>& _Ctype_fac = _USE(_Ostr.getloc(), ctype<_Elem>);

  000e9	8d 45 a4	 lea	 eax, DWORD PTR $T5[ebp]
  000ec	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  000f6	50		 push	 eax
  000f7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000fb	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  00100	83 c4 04	 add	 esp, 4
  00103	89 45 b8	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  00106	8b 4d a8	 mov	 ecx, DWORD PTR $T5[ebp+4]
  00109	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0010d	85 c9		 test	 ecx, ecx
  0010f	74 11		 je	 SHORT $LN64@operator
  00111	8b 01		 mov	 eax, DWORD PTR [ecx]
  00113	ff 50 08	 call	 DWORD PTR [eax+8]
  00116	8b c8		 mov	 ecx, eax
  00118	85 c9		 test	 ecx, ecx
  0011a	74 06		 je	 SHORT $LN64@operator
  0011c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011e	6a 01		 push	 1
  00120	ff 10		 call	 DWORD PTR [eax]
$LN64@operator:

; 707  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00122	8b 07		 mov	 eax, DWORD PTR [edi]
  00124	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00128	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012b	8b 44 38 14	 mov	 eax, DWORD PTR [eax+edi+20]
  0012f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00134	83 f8 40	 cmp	 eax, 64			; 00000040H
  00137	74 65		 je	 SHORT $LN1076@operator
  00139	8b 45 d0	 mov	 eax, DWORD PTR __Pad$2$[ebp]
  0013c	0f 1f 40 00	 npad	 4
$LL4@operator:

; 708  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00140	85 c0		 test	 eax, eax
  00142	7c 5a		 jl	 SHORT $LN1076@operator
  00144	7f 04		 jg	 SHORT $LN1073@operator
  00146	85 db		 test	 ebx, ebx
  00148	74 54		 je	 SHORT $LN1076@operator
$LN1073@operator:

; 709  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0014a	8b 07		 mov	 eax, DWORD PTR [edi]
  0014c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0014f	0f b7 4c 38 40	 movzx	 ecx, WORD PTR [eax+edi+64]
  00154	89 4d cc	 mov	 DWORD PTR $T7[ebp], ecx
  00157	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
  0015b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0015e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00161	74 1e		 je	 SHORT $LN75@operator
  00163	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00166	8b 02		 mov	 eax, DWORD PTR [edx]
  00168	85 c0		 test	 eax, eax
  0016a	7e 15		 jle	 SHORT $LN75@operator
  0016c	48		 dec	 eax
  0016d	89 02		 mov	 DWORD PTR [edx], eax
  0016f	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00172	8b 11		 mov	 edx, DWORD PTR [ecx]
  00174	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00177	89 01		 mov	 DWORD PTR [ecx], eax
  00179	8b 45 cc	 mov	 eax, DWORD PTR $T7[ebp]
  0017c	66 89 02	 mov	 WORD PTR [edx], ax
  0017f	eb 08		 jmp	 SHORT $LN1086@operator
$LN75@operator:
  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	ff 75 cc	 push	 DWORD PTR $T7[ebp]
  00186	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN1086@operator:
  00189	0f b7 c0	 movzx	 eax, ax
  0018c	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00191	66 3b c8	 cmp	 cx, ax
  00194	75 6c		 jne	 SHORT $LN2@operator

; 710  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 711  : 					{	// insertion failed, quit
; 712  : 					_State |= ios_base::badbit;

  00196	be 04 00 00 00	 mov	 esi, 4
  0019b	89 75 bc	 mov	 DWORD PTR __State$[ebp], esi
$LN1076@operator:
  0019e	8b 45 c8	 mov	 eax, DWORD PTR __Count$1$[ebp]
$LL1068@operator:

; 713  : 					break;
; 714  : 					}
; 715  : 
; 716  : 		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)

  001a1	85 f6		 test	 esi, esi
  001a3	0f 85 01 01 00
	00		 jne	 $LN9@operator
  001a9	39 75 c4	 cmp	 DWORD PTR __Count$2$[ebp], esi
  001ac	0f 8c 99 00 00
	00		 jl	 $LN1079@operator
  001b2	7f 08		 jg	 SHORT $LN1074@operator
  001b4	85 c0		 test	 eax, eax
  001b6	0f 84 8f 00 00
	00		 je	 $LN1079@operator
$LN1074@operator:

; 717  : 			if (_Traits::eq_int_type(_Traits::eof(),

  001bc	8b 45 c0	 mov	 eax, DWORD PTR __Val$GSCopy$1$[ebp]
  001bf	8b 4d b8	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  001c2	8a 00		 mov	 al, BYTE PTR [eax]
  001c4	88 45 cc	 mov	 BYTE PTR __Byte$[ebp], al
  001c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001c9	ff 75 cc	 push	 DWORD PTR __Byte$[ebp]
  001cc	ff 50 30	 call	 DWORD PTR [eax+48]
  001cf	0f b7 d0	 movzx	 edx, ax
  001d2	8b 07		 mov	 eax, DWORD PTR [edi]
  001d4	8b f2		 mov	 esi, edx
  001d6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d9	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
  001dd	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  001e0	83 38 00	 cmp	 DWORD PTR [eax], 0
  001e3	74 2e		 je	 SHORT $LN101@operator
  001e5	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001e8	8b 02		 mov	 eax, DWORD PTR [edx]
  001ea	85 c0		 test	 eax, eax
  001ec	7e 25		 jle	 SHORT $LN101@operator
  001ee	48		 dec	 eax
  001ef	89 02		 mov	 DWORD PTR [edx], eax
  001f1	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  001f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f6	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  001f9	89 01		 mov	 DWORD PTR [ecx], eax
  001fb	8b ce		 mov	 ecx, esi
  001fd	66 89 32	 mov	 WORD PTR [edx], si
  00200	eb 1c		 jmp	 SHORT $LN5@operator
$LN2@operator:

; 708  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00202	8b 45 d0	 mov	 eax, DWORD PTR __Pad$2$[ebp]
  00205	83 c3 ff	 add	 ebx, -1
  00208	83 d0 ff	 adc	 eax, -1
  0020b	89 45 d0	 mov	 DWORD PTR __Pad$2$[ebp], eax
  0020e	e9 2d ff ff ff	 jmp	 $LL4@operator

; 717  : 			if (_Traits::eq_int_type(_Traits::eof(),

$LN101@operator:
  00213	8b 01		 mov	 eax, DWORD PTR [ecx]
  00215	56		 push	 esi
  00216	ff 50 0c	 call	 DWORD PTR [eax+12]
  00219	0f b7 c0	 movzx	 eax, ax
  0021c	8b c8		 mov	 ecx, eax
$LN5@operator:

; 713  : 					break;
; 714  : 					}
; 715  : 
; 716  : 		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)

  0021e	8b 45 c8	 mov	 eax, DWORD PTR __Count$1$[ebp]
  00221	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00226	83 c0 ff	 add	 eax, -1
  00229	be 04 00 00 00	 mov	 esi, 4
  0022e	89 45 c8	 mov	 DWORD PTR __Count$1$[ebp], eax
  00231	83 55 c4 ff	 adc	 DWORD PTR __Count$2$[ebp], -1
  00235	ff 45 c0	 inc	 DWORD PTR __Val$GSCopy$1$[ebp]
  00238	66 3b d1	 cmp	 dx, cx
  0023b	b9 00 00 00 00	 mov	 ecx, 0
  00240	0f 45 f1	 cmovne	 esi, ecx
  00243	89 75 bc	 mov	 DWORD PTR __State$[ebp], esi
  00246	e9 56 ff ff ff	 jmp	 $LL1068@operator
$LN1079@operator:
  0024b	8b 45 d0	 mov	 eax, DWORD PTR __Pad$2$[ebp]
  0024e	66 90		 npad	 2
$LL1077@operator:

; 718  : 				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
; 719  : 					_State |= ios_base::badbit;
; 720  : 
; 721  : 		if (_State == ios_base::goodbit)
; 722  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00250	85 c0		 test	 eax, eax
  00252	7c 56		 jl	 SHORT $LN9@operator
  00254	7f 04		 jg	 SHORT $LN1075@operator
  00256	85 db		 test	 ebx, ebx
  00258	74 50		 je	 SHORT $LN9@operator
$LN1075@operator:

; 723  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0025a	8b 07		 mov	 eax, DWORD PTR [edi]
  0025c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0025f	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
  00263	0f b7 54 38 40	 movzx	 edx, WORD PTR [eax+edi+64]
  00268	89 55 cc	 mov	 DWORD PTR $T6[ebp], edx
  0026b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0026e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00271	74 21		 je	 SHORT $LN127@operator
  00273	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00276	8b 00		 mov	 eax, DWORD PTR [eax]
  00278	85 c0		 test	 eax, eax
  0027a	7e 18		 jle	 SHORT $LN127@operator
  0027c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0027f	48		 dec	 eax
  00280	89 02		 mov	 DWORD PTR [edx], eax
  00282	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00285	8b 11		 mov	 edx, DWORD PTR [ecx]
  00287	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0028a	89 01		 mov	 DWORD PTR [ecx], eax
  0028c	8b 45 cc	 mov	 eax, DWORD PTR $T6[ebp]
  0028f	66 89 02	 mov	 WORD PTR [edx], ax
  00292	eb 06		 jmp	 SHORT $LN1087@operator
$LN127@operator:
  00294	8b 01		 mov	 eax, DWORD PTR [ecx]
  00296	52		 push	 edx
  00297	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN1087@operator:
  0029a	0f b7 c0	 movzx	 eax, ax
  0029d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  002a2	66 3b c8	 cmp	 cx, ax
  002a5	75 1a		 jne	 SHORT $LN8@operator

; 724  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 725  : 					{	// insertion failed, quit
; 726  : 					_State |= ios_base::badbit;

  002a7	83 ce 04	 or	 esi, 4
$LN9@operator:

; 727  : 					break;
; 728  : 					}
; 729  : 		_Ostr.width(0);

  002aa	8b 07		 mov	 eax, DWORD PTR [edi]
  002ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002af	c7 44 38 20 00
	00 00 00	 mov	 DWORD PTR [eax+edi+32], 0
  002b7	c7 44 38 24 00
	00 00 00	 mov	 DWORD PTR [eax+edi+36], 0
  002bf	eb 43		 jmp	 SHORT $LN1088@operator
$LN8@operator:

; 718  : 				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
; 719  : 					_State |= ios_base::badbit;
; 720  : 
; 721  : 		if (_State == ios_base::goodbit)
; 722  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002c1	8b 45 d0	 mov	 eax, DWORD PTR __Pad$2$[ebp]
  002c4	83 c3 ff	 add	 ebx, -1
  002c7	83 d0 ff	 adc	 eax, -1
  002ca	89 45 d0	 mov	 DWORD PTR __Pad$2$[ebp], eax
  002cd	eb 81		 jmp	 SHORT $LL1077@operator
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0:

; 730  : 		_CATCH_IO_(_Ostr)

  002cf	8b 4d ac	 mov	 ecx, DWORD PTR __Ostr$GSCopy$[ebp]
  002d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  002d4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002d7	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  002db	03 d1		 add	 edx, ecx
  002dd	83 c8 04	 or	 eax, 4
  002e0	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  002e4	75 03		 jne	 SHORT $LN156@operator
  002e6	83 c8 04	 or	 eax, 4
$LN156@operator:
  002e9	83 e0 17	 and	 eax, 23			; 00000017H
  002ec	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  002ef	85 42 10	 test	 DWORD PTR [edx+16], eax
  002f2	0f 85 e8 02 00
	00		 jne	 $LN159@operator
  002f8	b8 00 00 00 00	 mov	 eax, $LN27@operator
  002fd	c3		 ret	 0
$LN27@operator:
  002fe	8b 75 bc	 mov	 esi, DWORD PTR __State$[ebp]
  00301	8b 7d ac	 mov	 edi, DWORD PTR __Ostr$GSCopy$[ebp]
$LN1088@operator:
  00304	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN26@operator:

; 731  : 		}
; 732  : 
; 733  : 	_Ostr.setstate(_State);

  0030b	8b 07		 mov	 eax, DWORD PTR [edi]
  0030d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00310	03 d7		 add	 edx, edi
  00312	85 f6		 test	 esi, esi
  00314	0f 84 78 02 00
	00		 je	 $LN224@operator
  0031a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0031d	0b c6		 or	 eax, esi
  0031f	8b c8		 mov	 ecx, eax
  00321	83 c9 04	 or	 ecx, 4
  00324	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00328	0f 45 c8	 cmovne	 ecx, eax
  0032b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0032e	83 e1 17	 and	 ecx, 23			; 00000017H
  00331	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00334	23 c1		 and	 eax, ecx
  00336	0f 84 56 02 00
	00		 je	 $LN224@operator
  0033c	a8 04		 test	 al, 4
  0033e	0f 84 f8 00 00
	00		 je	 $LN221@operator
  00344	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0034a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00350	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00353	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00358	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0035e	7e 41		 jle	 SHORT $LN233@operator
  00360	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00365	e8 00 00 00 00	 call	 __Init_thread_header
  0036a	83 c4 04	 add	 esp, 4
  0036d	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA, -1 ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00374	75 2b		 jne	 SHORT $LN233@operator
  00376	68 00 00 00 00	 push	 OFFSET ??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ@YAXXZ ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
  0037b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A, OFFSET ??_7_Iostream_error_category@std@@6B@
  00385	c7 05 04 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A+4, 5
  0038f	e8 00 00 00 00	 call	 _atexit
  00394	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00399	e8 00 00 00 00	 call	 __Init_thread_footer
  0039e	83 c4 08	 add	 esp, 8
$LN233@operator:
  003a1	6a 14		 push	 20			; 00000014H
  003a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  003a8	8d 4d d4	 lea	 ecx, DWORD PTR $T10[ebp]
  003ab	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH
  003b2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0
  003b9	c6 45 d4 00	 mov	 BYTE PTR $T10[ebp], 0
  003bd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003c2	8d 45 d4	 lea	 eax, DWORD PTR $T10[ebp]
  003c5	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  003c9	50		 push	 eax
  003ca	68 00 00 00 00	 push	 OFFSET ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
  003cf	6a 01		 push	 1
  003d1	8d 4d 90	 lea	 ecx, DWORD PTR $T4[ebp]
  003d4	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  003d9	8b 45 e8	 mov	 eax, DWORD PTR $T10[ebp+20]
  003dc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  003e0	83 f8 10	 cmp	 eax, 16			; 00000010H
  003e3	72 42		 jb	 SHORT $LN475@operator
  003e5	8b 4d d4	 mov	 ecx, DWORD PTR $T10[ebp]
  003e8	40		 inc	 eax
  003e9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  003ee	72 2e		 jb	 SHORT $LN470@operator
  003f0	f6 c1 1f	 test	 cl, 31			; 0000001fH
  003f3	74 05		 je	 SHORT $LN471@operator
  003f5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1089@operator:
$LN471@operator:
  003fa	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  003fd	3b c1		 cmp	 eax, ecx
  003ff	72 05		 jb	 SHORT $LN472@operator
  00401	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1090@operator:
$LN472@operator:
  00406	2b c8		 sub	 ecx, eax
  00408	83 f9 04	 cmp	 ecx, 4
  0040b	73 05		 jae	 SHORT $LN473@operator
  0040d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1091@operator:
$LN473@operator:
  00412	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00415	76 05		 jbe	 SHORT $LN474@operator
  00417	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1092@operator:
$LN474@operator:
  0041c	8b c8		 mov	 ecx, eax
$LN470@operator:
  0041e	51		 push	 ecx
  0041f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00424	83 c4 04	 add	 esp, 4
$LN475@operator:
  00427	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0042c	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  0042f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1093@operator:
$LN221@operator:
  0043c	a8 02		 test	 al, 2
  0043e	0f 84 a7 00 00
	00		 je	 $LN223@operator
  00444	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00449	6a 15		 push	 21			; 00000015H
  0044b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  00450	8d 4d d4	 lea	 ecx, DWORD PTR $T9[ebp]
  00453	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH
  0045a	8b f0		 mov	 esi, eax
  0045c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0
  00463	c6 45 d4 00	 mov	 BYTE PTR $T9[ebp], 0
  00467	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0046c	8d 45 d4	 lea	 eax, DWORD PTR $T9[ebp]
  0046f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00473	50		 push	 eax
  00474	56		 push	 esi
  00475	6a 01		 push	 1
  00477	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0047d	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  00482	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp+20]
  00485	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00489	83 f8 10	 cmp	 eax, 16			; 00000010H
  0048c	72 42		 jb	 SHORT $LN739@operator
  0048e	8b 4d d4	 mov	 ecx, DWORD PTR $T9[ebp]
  00491	40		 inc	 eax
  00492	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00497	72 2e		 jb	 SHORT $LN734@operator
  00499	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0049c	74 05		 je	 SHORT $LN735@operator
  0049e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1094@operator:
$LN735@operator:
  004a3	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  004a6	3b c1		 cmp	 eax, ecx
  004a8	72 05		 jb	 SHORT $LN736@operator
  004aa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1095@operator:
$LN736@operator:
  004af	2b c8		 sub	 ecx, eax
  004b1	83 f9 04	 cmp	 ecx, 4
  004b4	73 05		 jae	 SHORT $LN737@operator
  004b6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1096@operator:
$LN737@operator:
  004bb	83 f9 23	 cmp	 ecx, 35			; 00000023H
  004be	76 05		 jbe	 SHORT $LN738@operator
  004c0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1097@operator:
$LN738@operator:
  004c5	8b c8		 mov	 ecx, eax
$LN734@operator:
  004c7	51		 push	 ecx
  004c8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004cd	83 c4 04	 add	 esp, 4
$LN739@operator:
  004d0	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  004d5	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  004db	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  004e5	50		 push	 eax
  004e6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1098@operator:
$LN223@operator:
  004eb	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  004f0	6a 14		 push	 20			; 00000014H
  004f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  004f7	8d 4d d4	 lea	 ecx, DWORD PTR $T8[ebp]
  004fa	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH
  00501	8b f0		 mov	 esi, eax
  00503	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0
  0050a	c6 45 d4 00	 mov	 BYTE PTR $T8[ebp], 0
  0050e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00513	8d 45 d4	 lea	 eax, DWORD PTR $T8[ebp]
  00516	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  0051a	50		 push	 eax
  0051b	56		 push	 esi
  0051c	6a 01		 push	 1
  0051e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00524	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  00529	8b 45 e8	 mov	 eax, DWORD PTR $T8[ebp+20]
  0052c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00530	83 f8 10	 cmp	 eax, 16			; 00000010H
  00533	72 42		 jb	 SHORT $LN1002@operator
  00535	8b 4d d4	 mov	 ecx, DWORD PTR $T8[ebp]
  00538	40		 inc	 eax
  00539	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0053e	72 2e		 jb	 SHORT $LN997@operator
  00540	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00543	74 05		 je	 SHORT $LN998@operator
  00545	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1099@operator:
$LN998@operator:
  0054a	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0054d	3b c1		 cmp	 eax, ecx
  0054f	72 05		 jb	 SHORT $LN999@operator
  00551	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1100@operator:
$LN999@operator:
  00556	2b c8		 sub	 ecx, eax
  00558	83 f9 04	 cmp	 ecx, 4
  0055b	73 05		 jae	 SHORT $LN1000@operator
  0055d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1101@operator:
$LN1000@operator:
  00562	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00565	76 05		 jbe	 SHORT $LN1001@operator
  00567	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1102@operator:
$LN1001@operator:
  0056c	8b c8		 mov	 ecx, eax
$LN997@operator:
  0056e	51		 push	 ecx
  0056f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00574	83 c4 04	 add	 esp, 4
$LN1002@operator:
  00577	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0057c	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00582	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  0058c	50		 push	 eax
  0058d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1103@operator:
$LN224@operator:

; 734  : 	return (_Ostr);

  00592	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 9
  00599	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0059e	8b 75 b0	 mov	 esi, DWORD PTR __Ok$[ebp]
  005a1	84 c0		 test	 al, al
  005a3	75 07		 jne	 SHORT $LN1037@operator
  005a5	8b ce		 mov	 ecx, esi
  005a7	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN1037@operator:
  005ac	8b 06		 mov	 eax, DWORD PTR [esi]
  005ae	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  005b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005b5	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  005b9	85 c9		 test	 ecx, ecx
  005bb	74 05		 je	 SHORT $LN1041@operator
  005bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  005bf	ff 52 08	 call	 DWORD PTR [edx+8]
$LN1041@operator:
  005c2	8b c7		 mov	 eax, edi

; 735  : 	}

  005c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  005c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005ce	59		 pop	 ecx
  005cf	5f		 pop	 edi
  005d0	5e		 pop	 esi
  005d1	5b		 pop	 ebx
  005d2	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$11[ebp]
  005d5	33 cd		 xor	 ecx, ebp
  005d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005dc	8b e5		 mov	 esp, ebp
  005de	5d		 pop	 ebp
  005df	c3		 ret	 0

; 730  : 		_CATCH_IO_(_Ostr)

$LN159@operator:
  005e0	6a 00		 push	 0
  005e2	6a 00		 push	 0
  005e4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1104@operator:
$LN1082@operator:
  005e9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$4:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3:
  00010	8d 4d a4	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$5:
  00018	e8 00 00 00 00	 call	 ___std_terminate
  0001d	c3		 ret	 0
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$37:
  0001e	8d 4d d4	 lea	 ecx, DWORD PTR $T10[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$96:
  00026	8d 4d d4	 lea	 ecx, DWORD PTR $T9[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$155:
  0002e	8d 4d d4	 lea	 ecx, DWORD PTR $T8[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$210:
  00036	e8 00 00 00 00	 call	 ___std_terminate
  0003b	c3		 ret	 0
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$211:
  0003c	e8 00 00 00 00	 call	 ___std_terminate
  00041	c3		 ret	 0
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0002d	56		 push	 esi
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0003b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00040	83 c4 04	 add	 esp, 4
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8d 71 98	 lea	 esi, DWORD PTR [ecx-104]
  00026	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0002b	8d 46 68	 lea	 eax, DWORD PTR [esi+104]
  0002e	50		 push	 eax
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0003c	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00041	83 c4 04	 add	 esp, 4
  00044	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00048	74 0e		 je	 SHORT $LN13@scalar
  0004a	68 b0 00 00 00	 push	 176			; 000000b0H
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00058	8b c6		 mov	 eax, esi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0002c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  00031	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0003a	85 ff		 test	 edi, edi
  0003c	74 2a		 je	 SHORT $LN13@scalar
  0003e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	85 c9		 test	 ecx, ecx
  0004a	74 11		 je	 SHORT $LN19@scalar
  0004c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004e	ff 50 08	 call	 DWORD PTR [eax+8]
  00051	85 c0		 test	 eax, eax
  00053	74 08		 je	 SHORT $LN19@scalar
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b c8		 mov	 ecx, eax
  00059	6a 01		 push	 1
  0005b	ff 12		 call	 DWORD PTR [edx]
$LN19@scalar:
  0005d	6a 08		 push	 8
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00065	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00068	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0006c	74 0b		 je	 SHORT $LN22@scalar
  0006e	6a 44		 push	 68			; 00000044H
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00079	8b c6		 mov	 eax, esi
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate, COMDAT
; _this$ = ecx

; 354  : 		{	// convert open mode to stream state bits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]

; 355  : 		_Strstate _State = (_Strstate)0;
; 356  : 		if (!(_Mode & ios_base::in))
; 357  : 			_State |= _Noread;
; 358  : 		if (!(_Mode & ios_base::out))

  00007	8b c3		 mov	 eax, ebx
  00009	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  00010	f7 d1		 not	 ecx
  00012	83 e1 04	 and	 ecx, 4
  00015	8b d1		 mov	 edx, ecx
  00017	83 ca 02	 or	 edx, 2
  0001a	24 02		 and	 al, 2

; 359  : 			_State |= _Constant;
; 360  : 		if (_Mode & ios_base::app)

  0001c	8b c3		 mov	 eax, ebx
  0001e	0f 45 d1	 cmovne	 edx, ecx
  00021	8b ca		 mov	 ecx, edx
  00023	83 c9 08	 or	 ecx, 8
  00026	24 08		 and	 al, 8
  00028	0f 44 ca	 cmove	 ecx, edx
  0002b	8b c1		 mov	 eax, ecx
  0002d	83 c8 10	 or	 eax, 16			; 00000010H

; 361  : 			_State |= _Append;
; 362  : 		if (_Mode & ios_base::ate)

  00030	80 e3 04	 and	 bl, 4
  00033	5b		 pop	 ebx
  00034	0f 44 c1	 cmove	 eax, ecx

; 363  : 			_State |= _Atend;
; 364  : 		return (_State);
; 365  : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 337  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 338  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00007	74 33		 je	 SHORT $LN2@Tidy

; 339  : 			_Al.deallocate(_Mysb::eback(),

  00009	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 0a		 je	 SHORT $LN4@Tidy
  00012	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  0001a	eb 0d		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  0001c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
$LN5@Tidy:
  00029	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	2b c8		 sub	 ecx, eax
  00030	d1 f9		 sar	 ecx, 1
  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00037	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate
$LN2@Tidy:

; 340  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 341  : 					: _Mysb::egptr()) - _Mysb::eback());
; 342  : 		_Mysb::setg(0, 0, 0);

  0003c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0004e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 343  : 		_Mysb::setp(0, 0);

  00057	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0005a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00060	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00069	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0006c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 344  : 		_Seekhigh = 0;
; 345  : 		_Mystate &= ~_Allocated;

  00072	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  00076	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0007d	5e		 pop	 esi

; 346  : 		}

  0007e	c3		 ret	 0
?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv270 = 16						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 310  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 		_Seekhigh = 0;
; 312  : 		_Mystate = _State;

  00003	8b 45 10	 mov	 eax, DWORD PTR __State$[ebp]
  00006	53		 push	 ebx

; 313  : 
; 314  : 		if (_Count != 0
; 315  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00014	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00017	85 db		 test	 ebx, ebx
  00019	0f 84 8e 00 00
	00		 je	 $LN2@Init
  0001f	83 e0 06	 and	 eax, 6
  00022	3c 06		 cmp	 al, 6
  00024	0f 84 83 00 00
	00		 je	 $LN2@Init

; 316  : 			{	// finite buffer that can be read or written, set it up
; 317  : 			_Elem *_Pnew = _Al.allocate(_Count);

  0002a	57		 push	 edi
  0002b	53		 push	 ebx
  0002c	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002f	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00034	8b f8		 mov	 edi, eax

; 318  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  00036	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  00039	50		 push	 eax
  0003a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 _memcpy

; 319  : 			_Seekhigh = _Pnew + _Count;

  00043	8d 14 1b	 lea	 edx, DWORD PTR [ebx+ebx]
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 320  : 
; 321  : 			if (!(_Mystate & _Noread))

  00049	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  0004d	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00050	89 45 10	 mov	 DWORD PTR tv270[ebp], eax
  00053	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00056	75 0f		 jne	 SHORT $LN3@Init

; 322  : 				_Mysb::setg(_Pnew, _Pnew,

  00058	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005b	89 38		 mov	 DWORD PTR [eax], edi
  0005d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00060	89 38		 mov	 DWORD PTR [eax], edi
  00062	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00065	89 18		 mov	 DWORD PTR [eax], ebx
$LN3@Init:

; 323  : 					_Pnew + _Count);	// setup read buffer
; 324  : 			if (!(_Mystate & _Constant))

  00067	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0006a	a8 02		 test	 al, 2
  0006c	75 3a		 jne	 SHORT $LN5@Init

; 325  : 				{	// setup write buffer, and maybe read buffer
; 326  : 				_Mysb::setp(_Pnew,

  0006e	a8 18		 test	 al, 24			; 00000018H
  00070	8b cf		 mov	 ecx, edi
  00072	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00075	0f 45 4d 10	 cmovne	 ecx, DWORD PTR tv270[ebp]
  00079	2b d1		 sub	 edx, ecx
  0007b	03 d7		 add	 edx, edi
  0007d	89 38		 mov	 DWORD PTR [eax], edi
  0007f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00082	d1 fa		 sar	 edx, 1
  00084	89 08		 mov	 DWORD PTR [eax], ecx
  00086	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00089	89 10		 mov	 DWORD PTR [eax], edx

; 327  : 					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
; 328  : 					_Pnew + _Count);
; 329  : 				if (_Mysb::gptr() == 0)

  0008b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0008e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00091	75 15		 jne	 SHORT $LN5@Init

; 330  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00093	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00096	89 38		 mov	 DWORD PTR [eax], edi
  00098	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009b	d1 ff		 sar	 edi, 1
  0009d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000a3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a6	89 38		 mov	 DWORD PTR [eax], edi
$LN5@Init:

; 331  : 				}
; 332  : 			_Mystate |= _Allocated;

  000a8	83 4e 3c 01	 or	 DWORD PTR [esi+60], 1
  000ac	5f		 pop	 edi
$LN2@Init:
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx

; 333  : 			}
; 334  : 		}

  000af	5d		 pop	 ebp
  000b0	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXPB_WIH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
__Off$1$ = -4						; size = 4
tv286 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Off$1$ = 36						; size = 4
tv324 = 36						; size = 4
tv297 = 36						; size = 4
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 276  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 277  : 		streamoff _Off = (streamoff)_Ptr;

  00005	8b 5d 18	 mov	 ebx, DWORD PTR __Ptr$[ebp+12]
  00008	56		 push	 esi
  00009	8b 75 14	 mov	 esi, DWORD PTR __Ptr$[ebp+8]
  0000c	03 75 0c	 add	 esi, DWORD PTR __Ptr$[ebp]
  0000f	57		 push	 edi
  00010	13 5d 10	 adc	 ebx, DWORD PTR __Ptr$[ebp+4]
  00013	8b f9		 mov	 edi, ecx

; 278  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00015	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	85 c0		 test	 eax, eax
  0001c	74 08		 je	 SHORT $LN2@seekpos
  0001e	39 47 38	 cmp	 DWORD PTR [edi+56], eax
  00021	73 03		 jae	 SHORT $LN2@seekpos

; 279  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00023	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN2@seekpos:

; 280  : 
; 281  : 		if (_Off == _BADOFF)

  00026	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
  0002b	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  00031	75 08		 jne	 SHORT $LN55@seekpos
  00033	3b d8		 cmp	 ebx, eax
  00035	0f 84 e1 00 00
	00		 je	 $LN11@seekpos
$LN55@seekpos:

; 282  : 			;
; 283  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0003b	8b 4d 24	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0003e	f6 c1 01	 test	 cl, 1
  00041	0f 84 83 00 00
	00		 je	 $LN5@seekpos
  00047	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	89 45 fc	 mov	 DWORD PTR tv286[ebp], eax
  0004f	85 c0		 test	 eax, eax
  00051	74 72		 je	 SHORT $LN60@seekpos

; 284  : 			{	// position within read buffer
; 285  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00053	85 db		 test	 ebx, ebx
  00055	7c 66		 jl	 SHORT $LN7@seekpos
  00057	7f 04		 jg	 SHORT $LN56@seekpos
  00059	85 f6		 test	 esi, esi
  0005b	72 60		 jb	 SHORT $LN7@seekpos
$LN56@seekpos:
  0005d	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00065	2b c1		 sub	 eax, ecx
  00067	d1 f8		 sar	 eax, 1
  00069	99		 cdq
  0006a	3b da		 cmp	 ebx, edx
  0006c	7f 4f		 jg	 SHORT $LN7@seekpos
  0006e	7c 04		 jl	 SHORT $LN57@seekpos
  00070	3b f0		 cmp	 esi, eax
  00072	77 49		 ja	 SHORT $LN7@seekpos
$LN57@seekpos:

; 286  : 				{	// change read position
; 287  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00074	2b 4d fc	 sub	 ecx, DWORD PTR tv286[ebp]
  00077	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0007a	d1 f9		 sar	 ecx, 1
  0007c	03 ce		 add	 ecx, esi
  0007e	89 4d fc	 mov	 DWORD PTR __Off$1$[ebp], ecx
  00081	29 08		 sub	 DWORD PTR [eax], ecx
  00083	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00086	8b 45 fc	 mov	 eax, DWORD PTR __Off$1$[ebp]
  00089	03 c0		 add	 eax, eax
  0008b	01 01		 add	 DWORD PTR [ecx], eax

; 288  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0008d	f6 45 24 02	 test	 BYTE PTR __Mode$[ebp], 2
  00091	0f 84 85 00 00
	00		 je	 $LN11@seekpos
  00097	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	85 c9		 test	 ecx, ecx
  0009e	74 7c		 je	 SHORT $LN11@seekpos

; 289  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  000a0	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000a3	8b 10		 mov	 edx, DWORD PTR [eax]
  000a5	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000a8	8b 00		 mov	 eax, DWORD PTR [eax]
  000aa	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  000ad	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000b0	2b ca		 sub	 ecx, edx
  000b2	d1 f9		 sar	 ecx, 1
  000b4	89 10		 mov	 DWORD PTR [eax], edx
  000b6	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000b9	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 						_Mysb::epptr());	// change write position to match
; 291  : 				}
; 292  : 			else

  000bb	eb 5f		 jmp	 SHORT $LN11@seekpos
$LN7@seekpos:

; 293  : 				_Off = _BADOFF;

  000bd	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?_BADOFF@std@@3_JB+4
  000c3	eb 51		 jmp	 SHORT $LN61@seekpos
$LN60@seekpos:
  000c5	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
$LN5@seekpos:

; 294  : 			}
; 295  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  000ca	f6 c1 02	 test	 cl, 2
  000cd	74 45		 je	 SHORT $LN10@seekpos
  000cf	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000d1	89 4d 24	 mov	 DWORD PTR tv297[ebp], ecx
  000d4	85 c9		 test	 ecx, ecx
  000d6	74 3c		 je	 SHORT $LN10@seekpos

; 296  : 			{	// position within write buffer
; 297  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  000d8	85 db		 test	 ebx, ebx
  000da	7c e1		 jl	 SHORT $LN7@seekpos
  000dc	7f 04		 jg	 SHORT $LN58@seekpos
  000de	85 f6		 test	 esi, esi
  000e0	72 db		 jb	 SHORT $LN7@seekpos
$LN58@seekpos:
  000e2	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e7	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  000ea	2b c1		 sub	 eax, ecx
  000ec	d1 f8		 sar	 eax, 1
  000ee	99		 cdq
  000ef	3b da		 cmp	 ebx, edx
  000f1	7f ca		 jg	 SHORT $LN7@seekpos
  000f3	7c 04		 jl	 SHORT $LN59@seekpos
  000f5	3b f0		 cmp	 esi, eax
  000f7	77 c4		 ja	 SHORT $LN7@seekpos
$LN59@seekpos:

; 298  : 				_Mysb::pbump((int)(_Mysb::eback()

  000f9	2b 4d 24	 sub	 ecx, DWORD PTR tv297[ebp]
  000fc	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000ff	d1 f9		 sar	 ecx, 1
  00101	03 ce		 add	 ecx, esi
  00103	89 4d 24	 mov	 DWORD PTR __Off$1$[ebp], ecx
  00106	29 08		 sub	 DWORD PTR [eax], ecx
  00108	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0010b	8b 45 24	 mov	 eax, DWORD PTR __Off$1$[ebp]
  0010e	03 c0		 add	 eax, eax
  00110	01 01		 add	 DWORD PTR [ecx], eax

; 299  : 					- _Mysb::pptr() + _Off));	// change write position
; 300  : 			else

  00112	eb 08		 jmp	 SHORT $LN11@seekpos
$LN10@seekpos:

; 301  : 				_Off = _BADOFF;
; 302  : 			}
; 303  : 		else
; 304  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  00114	8b d8		 mov	 ebx, eax
$LN61@seekpos:
  00116	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
$LN11@seekpos:

; 305  : 		return (streampos(_Off));

  0011c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0011f	0f 57 c0	 xorps	 xmm0, xmm0
  00122	5f		 pop	 edi
  00123	89 30		 mov	 DWORD PTR [eax], esi
  00125	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00128	5e		 pop	 esi
  00129	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00130	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00137	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  0013c	5b		 pop	 ebx

; 306  : 		}

  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
tv281 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Off$1$ = 20						; size = 4
__Way$ = 20						; size = 4
__Off$1$ = 24						; size = 4
tv292 = 24						; size = 4
tv287 = 24						; size = 4
__Which$ = 24						; size = 4
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 227  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 228  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00009	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  0000c	8b 02		 mov	 eax, DWORD PTR [edx]
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN2@seekoff
  00012	39 43 38	 cmp	 DWORD PTR [ebx+56], eax
  00015	73 03		 jae	 SHORT $LN2@seekoff

; 229  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00017	89 43 38	 mov	 DWORD PTR [ebx+56], eax
$LN2@seekoff:

; 230  : 
; 231  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  0001a	8b 4d 18	 mov	 ecx, DWORD PTR __Which$[ebp]
  0001d	f6 c1 01	 test	 cl, 1
  00020	0f 84 e8 00 00
	00		 je	 $LN3@seekoff
  00026	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00029	8b 30		 mov	 esi, DWORD PTR [eax]
  0002b	89 75 fc	 mov	 DWORD PTR tv281[ebp], esi
  0002e	85 f6		 test	 esi, esi
  00030	0f 84 d8 00 00
	00		 je	 $LN3@seekoff

; 232  : 			{	// position within read buffer
; 233  : 			if (_Way == ios_base::end)

  00036	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 17		 jne	 SHORT $LN5@seekoff

; 234  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00041	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  00044	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00047	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  0004a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0004c	d1 f8		 sar	 eax, 1
  0004e	99		 cdq
  0004f	03 f0		 add	 esi, eax
  00051	13 fa		 adc	 edi, edx

; 235  : 			else if (_Way == ios_base::cur

  00053	eb 38		 jmp	 SHORT $LN9@seekoff
$LN5@seekoff:

; 236  : 				&& (_Which & ios_base::out) == 0)

  00055	83 f8 01	 cmp	 eax, 1
  00058	75 1b		 jne	 SHORT $LN7@seekoff
  0005a	f6 c1 02	 test	 cl, 2
  0005d	75 1a		 jne	 SHORT $LN74@seekoff

; 237  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005f	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00062	8b c6		 mov	 eax, esi
  00064	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00067	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  0006a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006c	d1 f8		 sar	 eax, 1
  0006e	99		 cdq
  0006f	03 f0		 add	 esi, eax
  00071	13 fa		 adc	 edi, edx
  00073	eb 18		 jmp	 SHORT $LN9@seekoff
$LN7@seekoff:

; 238  : 			else if (_Way != ios_base::beg)

  00075	85 c0		 test	 eax, eax
  00077	74 0e		 je	 SHORT $LN79@seekoff
$LN74@seekoff:

; 239  : 				_Off = _BADOFF;

  00079	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  0007f	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
  00085	eb 06		 jmp	 SHORT $LN9@seekoff
$LN79@seekoff:
  00087	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  0008a	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
$LN9@seekoff:

; 240  : 
; 241  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0008d	85 ff		 test	 edi, edi
  0008f	0f 8c 29 01 00
	00		 jl	 $LN10@seekoff
  00095	7f 08		 jg	 SHORT $LN75@seekoff
  00097	85 f6		 test	 esi, esi
  00099	0f 82 1f 01 00
	00		 jb	 $LN10@seekoff
$LN75@seekoff:
  0009f	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  000a7	2b c1		 sub	 eax, ecx
  000a9	d1 f8		 sar	 eax, 1
  000ab	99		 cdq
  000ac	3b fa		 cmp	 edi, edx
  000ae	0f 8f 0a 01 00
	00		 jg	 $LN10@seekoff
  000b4	7c 08		 jl	 SHORT $LN76@seekoff
  000b6	3b f0		 cmp	 esi, eax
  000b8	0f 87 00 01 00
	00		 ja	 $LN10@seekoff
$LN76@seekoff:

; 242  : 				{	// change read position
; 243  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  000be	2b 4d fc	 sub	 ecx, DWORD PTR tv281[ebp]
  000c1	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000c4	d1 f9		 sar	 ecx, 1
  000c6	03 ce		 add	 ecx, esi
  000c8	89 4d 14	 mov	 DWORD PTR __Off$1$[ebp], ecx
  000cb	29 08		 sub	 DWORD PTR [eax], ecx
  000cd	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  000d0	8b 45 14	 mov	 eax, DWORD PTR __Off$1$[ebp]
  000d3	03 c0		 add	 eax, eax
  000d5	01 01		 add	 DWORD PTR [ecx], eax

; 244  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000d7	f6 45 18 02	 test	 BYTE PTR __Which$[ebp], 2
  000db	0f 84 e9 00 00
	00		 je	 $LN22@seekoff
  000e1	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e6	85 c9		 test	 ecx, ecx
  000e8	0f 84 dc 00 00
	00		 je	 $LN22@seekoff

; 245  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  000ee	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  000f1	8b 10		 mov	 edx, DWORD PTR [eax]
  000f3	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  000f6	8b 00		 mov	 eax, DWORD PTR [eax]
  000f8	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  000fb	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000fe	2b ca		 sub	 ecx, edx
  00100	d1 f9		 sar	 ecx, 1
  00102	89 10		 mov	 DWORD PTR [eax], edx
  00104	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00107	89 08		 mov	 DWORD PTR [eax], ecx

; 246  : 						_Mysb::epptr());	// change write position to match
; 247  : 				}
; 248  : 			else

  00109	e9 bc 00 00 00	 jmp	 $LN22@seekoff
$LN3@seekoff:

; 249  : 				_Off = _BADOFF;
; 250  : 			}
; 251  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  0010e	f6 c1 02	 test	 cl, 2
  00111	0f 84 9b 00 00
	00		 je	 $LN13@seekoff
  00117	8b 12		 mov	 edx, DWORD PTR [edx]
  00119	89 55 18	 mov	 DWORD PTR tv287[ebp], edx
  0011c	85 d2		 test	 edx, edx
  0011e	0f 84 8e 00 00
	00		 je	 $LN13@seekoff

; 252  : 			{	// position within write buffer
; 253  : 			if (_Way == ios_base::end)

  00124	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00127	83 f8 02	 cmp	 eax, 2
  0012a	75 17		 jne	 SHORT $LN15@seekoff

; 254  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0012c	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0012f	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  00132	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00135	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00138	2b 01		 sub	 eax, DWORD PTR [ecx]
  0013a	d1 f8		 sar	 eax, 1
  0013c	99		 cdq
  0013d	03 f0		 add	 esi, eax
  0013f	13 fa		 adc	 edi, edx
  00141	eb 33		 jmp	 SHORT $LN19@seekoff
$LN15@seekoff:

; 255  : 			else if (_Way == ios_base::cur)

  00143	83 f8 01	 cmp	 eax, 1
  00146	75 16		 jne	 SHORT $LN17@seekoff

; 256  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00148	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0014b	8b c2		 mov	 eax, edx
  0014d	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00150	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00153	2b 01		 sub	 eax, DWORD PTR [ecx]
  00155	d1 f8		 sar	 eax, 1
  00157	99		 cdq
  00158	03 f0		 add	 esi, eax
  0015a	13 fa		 adc	 edi, edx
  0015c	eb 18		 jmp	 SHORT $LN19@seekoff
$LN17@seekoff:

; 257  : 			else if (_Way != ios_base::beg)

  0015e	85 c0		 test	 eax, eax
  00160	74 0e		 je	 SHORT $LN80@seekoff

; 258  : 				_Off = _BADOFF;

  00162	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  00168	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
  0016e	eb 06		 jmp	 SHORT $LN19@seekoff
$LN80@seekoff:
  00170	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00173	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
$LN19@seekoff:

; 259  : 
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00176	85 ff		 test	 edi, edi
  00178	7c 44		 jl	 SHORT $LN10@seekoff
  0017a	7f 04		 jg	 SHORT $LN77@seekoff
  0017c	85 f6		 test	 esi, esi
  0017e	72 3e		 jb	 SHORT $LN10@seekoff
$LN77@seekoff:
  00180	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00183	8b 08		 mov	 ecx, DWORD PTR [eax]
  00185	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  00188	2b c1		 sub	 eax, ecx
  0018a	d1 f8		 sar	 eax, 1
  0018c	99		 cdq
  0018d	3b fa		 cmp	 edi, edx
  0018f	7f 2d		 jg	 SHORT $LN10@seekoff
  00191	7c 04		 jl	 SHORT $LN78@seekoff
  00193	3b f0		 cmp	 esi, eax
  00195	77 27		 ja	 SHORT $LN10@seekoff
$LN78@seekoff:

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()

  00197	2b 4d 18	 sub	 ecx, DWORD PTR tv287[ebp]
  0019a	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0019d	d1 f9		 sar	 ecx, 1
  0019f	03 ce		 add	 ecx, esi
  001a1	89 4d 18	 mov	 DWORD PTR __Off$1$[ebp], ecx
  001a4	29 08		 sub	 DWORD PTR [eax], ecx
  001a6	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  001a9	8b 45 18	 mov	 eax, DWORD PTR __Off$1$[ebp]
  001ac	03 c0		 add	 eax, eax
  001ae	01 01		 add	 DWORD PTR [ecx], eax

; 262  : 					- _Mysb::pptr() + _Off));	// change write position
; 263  : 			else

  001b0	eb 18		 jmp	 SHORT $LN22@seekoff
$LN13@seekoff:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 
; 267  : 		else if (_Off != 0)

  001b2	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  001b5	8b c6		 mov	 eax, esi
  001b7	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  001ba	0b c7		 or	 eax, edi
  001bc	74 0c		 je	 SHORT $LN22@seekoff
$LN10@seekoff:

; 268  : 
; 269  : 
; 270  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  001be	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  001c4	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
$LN22@seekoff:

; 271  : 		return (pos_type(_Off));

  001ca	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	89 78 04	 mov	 DWORD PTR [eax+4], edi
  001d3	5f		 pop	 edi
  001d4	89 30		 mov	 DWORD PTR [eax], esi
  001d6	5e		 pop	 esi
  001d7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  001de	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  001e5	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  001ea	5b		 pop	 ebx

; 272  : 		}

  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 207  : 		{	// get an element from stream, but don't point past it

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 208  : 		if (_Mysb::gptr() == 0)

  00004	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	85 f6		 test	 esi, esi
  0000b	75 08		 jne	 SHORT $LN2@underflow

; 209  : 			return (_Traits::eof());	// no character buffer, fail

  0000d	5f		 pop	 edi
  0000e	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00013	5e		 pop	 esi

; 221  : 			}
; 222  : 		}

  00014	c3		 ret	 0
$LN2@underflow:
  00015	53		 push	 ebx

; 210  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00016	8b 5a 2c	 mov	 ebx, DWORD PTR [edx+44]
  00019	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0001b	8d 0c 4e	 lea	 ecx, DWORD PTR [esi+ecx*2]
  0001e	3b f1		 cmp	 esi, ecx
  00020	73 07		 jae	 SHORT $LN4@underflow

; 211  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00022	66 8b 06	 mov	 ax, WORD PTR [esi]
  00025	5b		 pop	 ebx
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 221  : 			}
; 222  : 		}

  00028	c3		 ret	 0
$LN4@underflow:

; 212  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 213  : 			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))

  00029	f6 42 3c 04	 test	 BYTE PTR [edx+60], 4
  0002d	75 2f		 jne	 SHORT $LN8@underflow
  0002f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	85 c0		 test	 eax, eax
  00036	74 26		 je	 SHORT $LN8@underflow
  00038	3b c6		 cmp	 eax, esi
  0003a	77 05		 ja	 SHORT $LN6@underflow
  0003c	39 72 38	 cmp	 DWORD PTR [edx+56], esi
  0003f	76 1d		 jbe	 SHORT $LN8@underflow
$LN6@underflow:

; 215  : 		else
; 216  : 			{	// extend read buffer into written area, then return buffered
; 217  : 			if (_Seekhigh < _Mysb::pptr())

  00041	39 42 38	 cmp	 DWORD PTR [edx+56], eax
  00044	73 03		 jae	 SHORT $LN9@underflow

; 218  : 				_Seekhigh = _Mysb::pptr();

  00046	89 42 38	 mov	 DWORD PTR [edx+56], eax
$LN9@underflow:

; 219  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00049	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0004c	2b 07		 sub	 eax, DWORD PTR [edi]
  0004e	d1 f8		 sar	 eax, 1
  00050	89 03		 mov	 DWORD PTR [ebx], eax

; 220  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00052	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00055	5b		 pop	 ebx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b 00		 mov	 eax, DWORD PTR [eax]
  0005a	66 8b 00	 mov	 ax, WORD PTR [eax]

; 221  : 			}
; 222  : 		}

  0005d	c3		 ret	 0
$LN8@underflow:
  0005e	5b		 pop	 ebx
  0005f	5f		 pop	 edi

; 214  : 			return (_Traits::eof());	// can't read, fail

  00060	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00065	5e		 pop	 esi

; 221  : 			}
; 222  : 		}

  00066	c3		 ret	 0
?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGXZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 2
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 190  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 191  : 		if (_Mysb::gptr() == 0
; 192  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 193  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00003	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  0000d	8b 30		 mov	 esi, DWORD PTR [eax]
  0000f	85 f6		 test	 esi, esi
  00011	74 45		 je	 SHORT $LN4@pbackfail
  00013	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00016	3b 30		 cmp	 esi, DWORD PTR [eax]
  00018	76 3e		 jbe	 SHORT $LN4@pbackfail
  0001a	66 8b 55 08	 mov	 dx, WORD PTR __Meta$[ebp]
  0001e	66 3b fa	 cmp	 di, dx
  00021	74 0c		 je	 SHORT $LN2@pbackfail
  00023	66 3b 56 fe	 cmp	 dx, WORD PTR [esi-2]
  00027	74 06		 je	 SHORT $LN2@pbackfail
  00029	f6 41 3c 02	 test	 BYTE PTR [ecx+60], 2
  0002d	75 29		 jne	 SHORT $LN4@pbackfail
$LN2@pbackfail:

; 197  : 		else
; 198  : 			{	// back up one position and store put-back character
; 199  : 			_Mysb::gbump(-1);

  0002f	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00032	ff 00		 inc	 DWORD PTR [eax]
  00034	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00037	83 00 fe	 add	 DWORD PTR [eax], -2	; fffffffeH

; 200  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  0003a	66 3b fa	 cmp	 di, dx
  0003d	74 08		 je	 SHORT $LN45@pbackfail

; 201  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0003f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00042	8b 00		 mov	 eax, DWORD PTR [eax]
  00044	66 89 10	 mov	 WORD PTR [eax], dx

; 202  : 			return (_Traits::not_eof(_Meta));

$LN45@pbackfail:
  00047	33 c9		 xor	 ecx, ecx
  00049	0f b7 c2	 movzx	 eax, dx
  0004c	66 3b d7	 cmp	 dx, di
  0004f	5f		 pop	 edi
  00050	0f 44 c1	 cmove	 eax, ecx
  00053	5e		 pop	 esi

; 203  : 			}
; 204  : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN4@pbackfail:

; 194  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 195  : 			&& _Mystate & _Constant))
; 196  : 			return (_Traits::eof());	// can't put back, fail

  00058	66 8b c7	 mov	 ax, di
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 203  : 			}
; 204  : 		}

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Oldptr$1$ = -4					; size = 4
__Meta$ = 8						; size = 2
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 120  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 121  : 		if (_Mystate & _Constant)

  00009	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0000c	a8 02		 test	 al, 2
  0000e	74 0c		 je	 SHORT $LN4@overflow

; 122  : 			return (_Traits::eof());	// array nonmutable, fail

  00010	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00015	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN4@overflow:
  0001c	53		 push	 ebx

; 123  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0001d	66 8b 5d 08	 mov	 bx, WORD PTR __Meta$[ebp]
  00021	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00026	66 3b cb	 cmp	 cx, bx
  00029	75 0a		 jne	 SHORT $LN6@overflow

; 124  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0002b	5b		 pop	 ebx
  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN6@overflow:
  00035	57		 push	 edi

; 125  : 
; 126  : 		if (_Mystate & _Append
; 127  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00036	a8 08		 test	 al, 8
  00038	74 23		 je	 SHORT $LN7@overflow
  0003a	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  0003d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0003f	85 c9		 test	 ecx, ecx
  00041	74 1a		 je	 SHORT $LN7@overflow
  00043	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00046	3b ca		 cmp	 ecx, edx
  00048	73 13		 jae	 SHORT $LN7@overflow

; 128  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  0004a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	89 17		 mov	 DWORD PTR [edi], edx
  00051	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  00054	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00057	2b ca		 sub	 ecx, edx
  00059	d1 f9		 sar	 ecx, 1
  0005b	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@overflow:

; 129  : 
; 130  : 		if (_Mysb::pptr() != 0
; 131  : 			&& _Mysb::pptr() < _Mysb::epptr())

  0005d	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	85 c9		 test	 ecx, ecx
  00064	74 2e		 je	 SHORT $LN121@overflow
  00066	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00069	8b 3a		 mov	 edi, DWORD PTR [edx]
  0006b	8d 04 79	 lea	 eax, DWORD PTR [ecx+edi*2]
  0006e	3b c8		 cmp	 ecx, eax
  00070	73 1e		 jae	 SHORT $LN8@overflow

; 132  : 			{	// room in buffer, store it
; 133  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00072	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]

; 134  : 			return (_Meta);

  00075	66 8b c3	 mov	 ax, bx
  00078	89 0a		 mov	 DWORD PTR [edx], ecx
  0007a	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  0007d	5f		 pop	 edi
  0007e	8b 32		 mov	 esi, DWORD PTR [edx]
  00080	8d 4e 02	 lea	 ecx, DWORD PTR [esi+2]
  00083	89 0a		 mov	 DWORD PTR [edx], ecx
  00085	66 89 1e	 mov	 WORD PTR [esi], bx
  00088	5b		 pop	 ebx
  00089	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN8@overflow:

; 135  : 			}
; 136  : 		else
; 137  : 			{	// grow buffer and store element
; 138  : 			size_t _Oldsize = _Mysb::pptr() == 0

  00090	85 c9		 test	 ecx, ecx
  00092	75 04		 jne	 SHORT $LN20@overflow
$LN121@overflow:
  00094	33 ff		 xor	 edi, edi
  00096	eb 10		 jmp	 SHORT $LN21@overflow
$LN20@overflow:
  00098	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0009b	8b 38		 mov	 edi, DWORD PTR [eax]
  0009d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000a0	03 ff		 add	 edi, edi
  000a2	2b 38		 sub	 edi, DWORD PTR [eax]
  000a4	03 f9		 add	 edi, ecx
  000a6	d1 ff		 sar	 edi, 1
$LN21@overflow:

; 139  : 				? 0 : _Mysb::epptr() - _Mysb::eback();
; 140  : 			size_t _Newsize = _Oldsize;
; 141  : 			size_t _Inc = _Newsize / 2 < _MINSIZE

  000a8	8b cf		 mov	 ecx, edi
  000aa	d1 e9		 shr	 ecx, 1
  000ac	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000af	73 07		 jae	 SHORT $LN22@overflow
  000b1	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000b6	eb 08		 jmp	 SHORT $LL2@overflow
$LN22@overflow:

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000b8	85 c9		 test	 ecx, ecx
  000ba	74 17		 je	 SHORT $LN123@overflow
  000bc	0f 1f 40 00	 npad	 4
$LL2@overflow:
  000c0	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000c5	2b c1		 sub	 eax, ecx
  000c7	3b c7		 cmp	 eax, edi
  000c9	73 04		 jae	 SHORT $LN116@overflow

; 145  : 				_Inc /= 2;	// increment causes overflow, halve it

  000cb	d1 e9		 shr	 ecx, 1

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000cd	75 f1		 jne	 SHORT $LL2@overflow
$LN116@overflow:

; 146  : 			if (_Inc == 0)

  000cf	85 c9		 test	 ecx, ecx
  000d1	75 0e		 jne	 SHORT $LN10@overflow
$LN123@overflow:
  000d3	5f		 pop	 edi
  000d4	5b		 pop	 ebx

; 147  : 				return (_Traits::eof());	// buffer can't grow, fail

  000d5	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000da	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
$LN10@overflow:

; 148  : 
; 149  : 			_Newsize += _Inc;

  000e1	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]

; 150  : 
; 151  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000e4	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000e7	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate

; 152  : 			_Elem *_Oldptr = _Mysb::eback();

  000f0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000f3	8b d8		 mov	 ebx, eax
  000f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f7	89 55 fc	 mov	 DWORD PTR __Oldptr$1$[ebp], edx

; 153  : 
; 154  : 			if (0 < _Oldsize)

  000fa	85 ff		 test	 edi, edi
  000fc	74 15		 je	 SHORT $LN125@overflow

; 155  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  000fe	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00101	51		 push	 ecx
  00102	52		 push	 edx
  00103	53		 push	 ebx
  00104	e8 00 00 00 00	 call	 _memcpy
  00109	8b 55 fc	 mov	 edx, DWORD PTR __Oldptr$1$[ebp]
  0010c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 156  : 
; 157  : 			if (_Oldsize == 0)

  0010f	85 ff		 test	 edi, edi
  00111	75 45		 jne	 SHORT $LN12@overflow
$LN125@overflow:

; 158  : 				{	// first growth, set up pointers
; 159  : 				_Seekhigh = _Newptr;
; 160  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  00113	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00116	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]
  00119	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0011c	89 18		 mov	 DWORD PTR [eax], ebx
  0011e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00121	89 18		 mov	 DWORD PTR [eax], ebx
  00123	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00126	89 08		 mov	 DWORD PTR [eax], ecx

; 161  : 				if (_Mystate & _Noread)
; 162  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00128	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0012b	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  0012f	89 18		 mov	 DWORD PTR [eax], ebx
  00131	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00134	74 12		 je	 SHORT $LN14@overflow
  00136	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0013c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0013f	d1 fb		 sar	 ebx, 1
  00141	89 18		 mov	 DWORD PTR [eax], ebx

; 163  : 				else

  00143	e9 92 00 00 00	 jmp	 $LN17@overflow
$LN14@overflow:

; 164  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00148	89 18		 mov	 DWORD PTR [eax], ebx
  0014a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0014d	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 165  : 				}
; 166  : 			else

  00153	e9 82 00 00 00	 jmp	 $LN17@overflow
$LN12@overflow:

; 167  : 				{	// not first growth, adjust pointers
; 168  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  00158	8b 46 38	 mov	 eax, DWORD PTR [esi+56]

; 169  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),

  0015b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0015e	2b c2		 sub	 eax, edx
  00160	d1 f8		 sar	 eax, 1
  00162	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  00165	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00168	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0016b	8b 00		 mov	 eax, DWORD PTR [eax]
  0016d	2b c2		 sub	 eax, edx
  0016f	d1 f8		 sar	 eax, 1
  00171	8d 14 43	 lea	 edx, DWORD PTR [ebx+eax*2]
  00174	8b 01		 mov	 eax, DWORD PTR [ecx]
  00176	2b 45 fc	 sub	 eax, DWORD PTR __Oldptr$1$[ebp]
  00179	d1 f8		 sar	 eax, 1
  0017b	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  0017e	89 01		 mov	 DWORD PTR [ecx], eax
  00180	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00183	8b 4d f8	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]
  00186	03 c9		 add	 ecx, ecx
  00188	2b ca		 sub	 ecx, edx
  0018a	89 10		 mov	 DWORD PTR [eax], edx
  0018c	03 cb		 add	 ecx, ebx
  0018e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00191	d1 f9		 sar	 ecx, 1
  00193	89 08		 mov	 DWORD PTR [eax], ecx

; 170  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 171  : 					_Newptr + _Newsize);
; 172  : 				if (_Mystate & _Noread)

  00195	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  00199	74 17		 je	 SHORT $LN16@overflow

; 173  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0019b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0019e	89 18		 mov	 DWORD PTR [eax], ebx
  001a0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001a3	d1 fb		 sar	 ebx, 1
  001a5	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  001ab	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001ae	89 18		 mov	 DWORD PTR [eax], ebx

; 174  : 				else

  001b0	eb 28		 jmp	 SHORT $LN17@overflow
$LN16@overflow:

; 175  : 					_Mysb::setg(_Newptr,

  001b2	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  001b5	8b 10		 mov	 edx, DWORD PTR [eax]
  001b7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001ba	8b 00		 mov	 eax, DWORD PTR [eax]
  001bc	2b 45 fc	 sub	 eax, DWORD PTR __Oldptr$1$[ebp]
  001bf	d1 f8		 sar	 eax, 1
  001c1	8d 0c 43	 lea	 ecx, DWORD PTR [ebx+eax*2]
  001c4	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001c7	2b d1		 sub	 edx, ecx
  001c9	83 c2 02	 add	 edx, 2
  001cc	d1 fa		 sar	 edx, 1
  001ce	89 18		 mov	 DWORD PTR [eax], ebx
  001d0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001d3	89 08		 mov	 DWORD PTR [eax], ecx
  001d5	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001d8	89 10		 mov	 DWORD PTR [eax], edx
$LN17@overflow:

; 176  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 177  : 						_Mysb::pptr() + 1);
; 178  : 				}
; 179  : 
; 180  : 			if (_Mystate & _Allocated)

  001da	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  001de	74 0c		 je	 SHORT $LN18@overflow

; 181  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001e0	57		 push	 edi
  001e1	ff 75 fc	 push	 DWORD PTR __Oldptr$1$[ebp]
  001e4	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  001e7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate
$LN18@overflow:

; 182  : 			_Mystate |= _Allocated;
; 183  : 
; 184  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001ec	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  001ef	83 4e 3c 01	 or	 DWORD PTR [esi+60], 1
  001f3	5f		 pop	 edi
  001f4	5b		 pop	 ebx
  001f5	ff 08		 dec	 DWORD PTR [eax]
  001f7	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  001fa	5e		 pop	 esi
  001fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fd	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00200	89 01		 mov	 DWORD PTR [ecx], eax
  00202	66 8b 45 08	 mov	 ax, WORD PTR __Meta$[ebp]
  00206	66 89 02	 mov	 WORD PTR [edx], ax

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@MAEGG@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
__Nul$2 = -28						; size = 24
__Str$3 = -28						; size = 24
__Str$4 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 93   : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b d1		 mov	 edx, ecx
  00012	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00019	56		 push	 esi
  0001a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  0001d	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00020	f6 c1 02	 test	 cl, 2
  00023	75 66		 jne	 SHORT $LN2@str
  00025	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	85 c0		 test	 eax, eax
  0002c	74 5d		 je	 SHORT $LN2@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()

  0002e	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00031	3b c8		 cmp	 ecx, eax
  00033	0f 42 c8	 cmovb	 ecx, eax
  00036	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00039	33 d2		 xor	 edx, edx
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
  0003d	2b c8		 sub	 ecx, eax
  0003f	d1 f9		 sar	 ecx, 1
  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	8d 4d e4	 lea	 ecx, DWORD PTR __Str$4[ebp]
  00046	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR __Str$4[ebp+20], 7
  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Str$4[ebp+16], 0
  00054	66 89 55 e4	 mov	 WORD PTR __Str$4[ebp], dx
  00058	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

  0005d	33 c0		 xor	 eax, eax
  0005f	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0006d	8b ce		 mov	 ecx, esi
  0006f	66 89 06	 mov	 WORD PTR [esi], ax
  00072	8d 45 e4	 lea	 eax, DWORD PTR __Str$4[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR __Str$4[ebp+20]
  0007e	83 f9 08	 cmp	 ecx, 8
  00081	0f 82 8d 00 00
	00		 jb	 $LN950@str
  00087	41		 inc	 ecx
  00088	51		 push	 ecx
  00089	eb 7e		 jmp	 SHORT $LN1047@str
$LN2@str:

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  0008b	f6 c1 04	 test	 cl, 4
  0008e	75 41		 jne	 SHORT $LN4@str
  00090	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	85 c9		 test	 ecx, ecx
  00097	74 38		 je	 SHORT $LN4@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  00099	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0009c	8b 00		 mov	 eax, DWORD PTR [eax]
  0009e	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  000a1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000a4	33 d2		 xor	 edx, edx
  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	2b c8		 sub	 ecx, eax
  000aa	d1 f9		 sar	 ecx, 1
  000ac	51		 push	 ecx
  000ad	50		 push	 eax
  000ae	8d 4d e4	 lea	 ecx, DWORD PTR __Str$3[ebp]
  000b1	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR __Str$3[ebp+20], 7
  000b8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Str$3[ebp+16], 0
  000bf	66 89 55 e4	 mov	 WORD PTR __Str$3[ebp], dx
  000c3	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 103  : 			return (_Str);

  000c8	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000cf	eb 17		 jmp	 SHORT $LN1050@str
$LN4@str:

; 104  : 			}
; 105  : 		else
; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  000d1	33 c0		 xor	 eax, eax
  000d3	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR __Nul$2[ebp+20], 7
  000da	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Nul$2[ebp+16], 0
  000e1	66 89 45 e4	 mov	 WORD PTR __Nul$2[ebp], ax

; 108  : 			return (_Nul);

  000e5	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN1050@str:
  000e8	33 c0		 xor	 eax, eax
  000ea	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  000f1	66 89 06	 mov	 WORD PTR [esi], ax
  000f4	8b ce		 mov	 ecx, esi
  000f6	8d 45 e4	 lea	 eax, DWORD PTR __Nul$2[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
  000ff	8b 45 f8	 mov	 eax, DWORD PTR __Nul$2[ebp+20]
  00102	83 f8 08	 cmp	 eax, 8
  00105	72 0d		 jb	 SHORT $LN950@str
  00107	40		 inc	 eax
  00108	50		 push	 eax
$LN1047@str:
  00109	ff 75 e4	 push	 DWORD PTR __Nul$2[ebp]
  0010c	8d 4d e4	 lea	 ecx, DWORD PTR __Nul$2[ebp]
  0010f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN950@str:

; 109  : 			}
; 110  : 		}

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	8b c6		 mov	 eax, esi
  00119	33 cd		 xor	 ecx, ebp
  0011b	5e		 pop	 esi
  0011c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 75   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@

; 76   : 		_Tidy();

  0002b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 77   : 		}

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  00036	8b 76 34	 mov	 esi, DWORD PTR [esi+52]
  00039	85 f6		 test	 esi, esi
  0003b	74 2a		 je	 SHORT $LN9@basic_stri
  0003d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 c9		 test	 ecx, ecx
  00049	74 11		 je	 SHORT $LN15@basic_stri
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
  00050	85 c0		 test	 eax, eax
  00052	74 08		 je	 SHORT $LN15@basic_stri
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	8b c8		 mov	 ecx, eax
  00058	6a 01		 push	 1
  0005a	ff 12		 call	 DWORD PTR [edx]
$LN15@basic_stri:
  0005c	6a 08		 push	 8
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00064	83 c4 08	 add	 esp, 8
$LN9@basic_stri:
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5e		 pop	 esi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode

  0002a	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  0002f	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]

; 31   : 		_Init(0, 0, _Getstate(_Mode));

  00032	8b c3		 mov	 eax, ebx
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0003a	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00041	8d 14 9d 00 00
	00 00		 lea	 edx, DWORD PTR [ebx*4]
  00048	f7 d2		 not	 edx
  0004a	83 e2 04	 and	 edx, 4
  0004d	8b ca		 mov	 ecx, edx
  0004f	83 c9 02	 or	 ecx, 2
  00052	24 02		 and	 al, 2
  00054	8b c3		 mov	 eax, ebx
  00056	0f 45 ca	 cmovne	 ecx, edx
  00059	8b d1		 mov	 edx, ecx
  0005b	83 ca 08	 or	 edx, 8
  0005e	24 08		 and	 al, 8
  00060	0f 44 d1	 cmove	 edx, ecx
  00063	8b c2		 mov	 eax, edx
  00065	83 c8 10	 or	 eax, 16			; 00000010H
  00068	80 e3 04	 and	 bl, 4
  0006b	0f 44 c2	 cmove	 eax, edx
  0006e	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 32   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0002f	85 ff		 test	 edi, edi
  00031	74 2a		 je	 SHORT $LN10@scalar
  00033	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	85 c9		 test	 ecx, ecx
  0003f	74 11		 je	 SHORT $LN16@scalar
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	ff 50 08	 call	 DWORD PTR [eax+8]
  00046	85 c0		 test	 eax, eax
  00048	74 08		 je	 SHORT $LN16@scalar
  0004a	8b 10		 mov	 edx, DWORD PTR [eax]
  0004c	8b c8		 mov	 ecx, eax
  0004e	6a 01		 push	 1
  00050	ff 12		 call	 DWORD PTR [edx]
$LN16@scalar:
  00052	6a 08		 push	 8
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005a	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0005d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00061	74 0b		 je	 SHORT $LN19@scalar
  00063	6a 38		 push	 56			; 00000038H
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006b	83 c4 08	 add	 esp, 8
$LN19@scalar:
  0006e	8b c6		 mov	 eax, esi
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue, COMDAT
; _this$ = ecx

; 449  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync, COMDAT
; _this$ = ecx

; 444  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 445  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf, COMDAT
; _this$ = ecx

; 439  : 		return (this);

  00000	8b c1		 mov	 eax, ecx

; 440  : 		}

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEPAV12@PA_W_J@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos, COMDAT
; _this$ = ecx

; 433  : 		{	// change to specified position, according to mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 434  : 		return (streampos(_BADOFF));

  00003	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  0000e	89 02		 mov	 DWORD PTR [edx], eax
  00010	8b c2		 mov	 eax, edx
  00012	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00018	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00022	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00029	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 435  : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff, COMDAT
; _this$ = ecx

; 427  : 		{	// change position by offset, according to way and mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 		return (streampos(_BADOFF));

  00003	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  0000e	89 02		 mov	 DWORD PTR [edx], eax
  00010	8b c2		 mov	 eax, edx
  00012	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00018	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00022	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00029	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 429  : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z
_TEXT	SEGMENT
__Copied$ = -16						; size = 8
__Size$2$ = -12						; size = 4
_this$1$ = -8						; size = 4
__Copied$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Copied$2$ = 16					; size = 4
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn, COMDAT
; _this$ = ecx

; 397  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00010	66 0f 13 45 f0	 movlpd	 QWORD PTR __Copied$[ebp], xmm0
  00015	57		 push	 edi
  00016	85 db		 test	 ebx, ebx
  00018	0f 8c cd 00 00
	00		 jl	 $LN40@xsputn
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00021	7f 08		 jg	 SHORT $LN39@xsputn
  00023	85 ff		 test	 edi, edi
  00025	0f 84 c0 00 00
	00		 je	 $LN40@xsputn
$LN39@xsputn:
  0002b	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  00031	89 55 10	 mov	 DWORD PTR __Copied$2$[ebp], edx
  00034	89 45 fc	 mov	 DWORD PTR __Copied$1$[ebp], eax
  00037	56		 push	 esi
$LL2@xsputn:

; 401  : 			if (0 < (_Size = _Pnavail()))

  00038	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
  0003d	8b f0		 mov	 esi, eax
  0003f	8b c2		 mov	 eax, edx
  00041	89 45 f4	 mov	 DWORD PTR __Size$2$[ebp], eax
  00044	85 c0		 test	 eax, eax
  00046	7c 50		 jl	 SHORT $LN5@xsputn
  00048	7f 04		 jg	 SHORT $LN35@xsputn
  0004a	85 f6		 test	 esi, esi
  0004c	74 4a		 je	 SHORT $LN5@xsputn
$LN35@xsputn:

; 402  : 				{	// copy to write buffer
; 403  : 				if (_Count < _Size)

  0004e	3b d8		 cmp	 ebx, eax
  00050	7f 0b		 jg	 SHORT $LN7@xsputn
  00052	7c 04		 jl	 SHORT $LN36@xsputn
  00054	3b fe		 cmp	 edi, esi
  00056	73 05		 jae	 SHORT $LN7@xsputn
$LN36@xsputn:

; 404  : 					_Size = _Count;

  00058	8b f7		 mov	 esi, edi
  0005a	89 5d f4	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN7@xsputn:

; 405  : 				_Traits::copy(pptr(), _Ptr, (size_t)_Size);

  0005d	85 f6		 test	 esi, esi
  0005f	74 18		 je	 SHORT $LN16@xsputn
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00064	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]
  00067	50		 push	 eax
  00068	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	50		 push	 eax
  0006c	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0006f	ff 30		 push	 DWORD PTR [eax]
  00071	e8 00 00 00 00	 call	 _memcpy
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@xsputn:

; 406  : 				_Ptr += _Size;
; 407  : 				_Copied += _Size;

  00079	01 75 fc	 add	 DWORD PTR __Copied$1$[ebp], esi
  0007c	8d 14 36	 lea	 edx, DWORD PTR [esi+esi]
  0007f	8b 45 f4	 mov	 eax, DWORD PTR __Size$2$[ebp]
  00082	11 45 10	 adc	 DWORD PTR __Copied$2$[ebp], eax

; 408  : 				_Count -= _Size;

  00085	2b fe		 sub	 edi, esi

; 409  : 				pbump((int)_Size);

  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0008a	1b d8		 sbb	 ebx, eax
  0008c	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0008f	29 30		 sub	 DWORD PTR [eax], esi
  00091	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00094	01 10		 add	 DWORD PTR [eax], edx
  00096	eb 2f		 jmp	 SHORT $LN9@xsputn
$LN5@xsputn:

; 410  : 				}
; 411  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000a3	50		 push	 eax
  000a4	ff 52 0c	 call	 DWORD PTR [edx+12]
  000a7	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000ac	66 3b c8	 cmp	 cx, ax
  000af	74 2b		 je	 SHORT $LN42@xsputn

; 412  : 				overflow(_Traits::to_int_type(*_Ptr))))
; 413  : 				break;	// single character put failed, quit
; 414  : 			else
; 415  : 				{	// count character successfully put
; 416  : 				++_Ptr;
; 417  : 				++_Copied;

  000b1	83 45 fc 01	 add	 DWORD PTR __Copied$1$[ebp], 1

; 418  : 				--_Count;

  000b5	ba 02 00 00 00	 mov	 edx, 2
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bd	83 55 10 00	 adc	 DWORD PTR __Copied$2$[ebp], 0
  000c1	83 c7 ff	 add	 edi, -1
  000c4	83 d3 ff	 adc	 ebx, -1
$LN9@xsputn:

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  000c7	01 55 08	 add	 DWORD PTR __Ptr$[ebp], edx
  000ca	85 db		 test	 ebx, ebx
  000cc	0f 8f 66 ff ff
	ff		 jg	 $LL2@xsputn
  000d2	7c 08		 jl	 SHORT $LN42@xsputn
  000d4	85 ff		 test	 edi, edi
  000d6	0f 85 5c ff ff
	ff		 jne	 $LL2@xsputn
$LN42@xsputn:
  000dc	8b 55 10	 mov	 edx, DWORD PTR __Copied$2$[ebp]
  000df	8b 45 fc	 mov	 eax, DWORD PTR __Copied$1$[ebp]
  000e2	5e		 pop	 esi
  000e3	5f		 pop	 edi
  000e4	5b		 pop	 ebx

; 419  : 				}
; 420  : 
; 421  : 		return (_Copied);
; 422  : 		}

  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH
$LN40@xsputn:

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  000eb	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  000ee	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  000f1	5f		 pop	 edi
  000f2	5b		 pop	 ebx

; 419  : 				}
; 420  : 
; 421  : 		return (_Copied);
; 422  : 		}

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPB_W_J@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z
_TEXT	SEGMENT
__Copied$ = -16						; size = 8
__Size$2$ = -12						; size = 4
_this$1$ = -8						; size = 4
__Copied$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Copied$2$ = 16					; size = 4
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn, COMDAT
; _this$ = ecx

; 368  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00010	66 0f 13 45 f0	 movlpd	 QWORD PTR __Copied$[ebp], xmm0
  00015	57		 push	 edi
  00016	85 db		 test	 ebx, ebx
  00018	0f 8c d3 00 00
	00		 jl	 $LN40@xsgetn
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00021	7f 08		 jg	 SHORT $LN39@xsgetn
  00023	85 ff		 test	 edi, edi
  00025	0f 84 c6 00 00
	00		 je	 $LN40@xsgetn
$LN39@xsgetn:
  0002b	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  00031	89 55 10	 mov	 DWORD PTR __Copied$2$[ebp], edx
  00034	89 45 fc	 mov	 DWORD PTR __Copied$1$[ebp], eax
  00037	56		 push	 esi
$LL2@xsgetn:

; 373  : 			if (0 < (_Size = _Gnavail()))

  00038	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
  0003d	8b f0		 mov	 esi, eax
  0003f	8b c2		 mov	 eax, edx
  00041	89 45 f4	 mov	 DWORD PTR __Size$2$[ebp], eax
  00044	85 c0		 test	 eax, eax
  00046	7c 52		 jl	 SHORT $LN5@xsgetn
  00048	7f 04		 jg	 SHORT $LN35@xsgetn
  0004a	85 f6		 test	 esi, esi
  0004c	74 4c		 je	 SHORT $LN5@xsgetn
$LN35@xsgetn:

; 374  : 				{	// copy from read buffer
; 375  : 				if (_Count < _Size)

  0004e	3b d8		 cmp	 ebx, eax
  00050	7f 0b		 jg	 SHORT $LN7@xsgetn
  00052	7c 04		 jl	 SHORT $LN36@xsgetn
  00054	3b fe		 cmp	 edi, esi
  00056	73 05		 jae	 SHORT $LN7@xsgetn
$LN36@xsgetn:

; 376  : 					_Size = _Count;

  00058	8b f7		 mov	 esi, edi
  0005a	89 5d f4	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN7@xsgetn:

; 377  : 				_Traits::copy(_Ptr, gptr(), (size_t)_Size);

  0005d	85 f6		 test	 esi, esi
  0005f	74 17		 je	 SHORT $LN16@xsgetn
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00064	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]
  00067	50		 push	 eax
  00068	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0006b	ff 30		 push	 DWORD PTR [eax]
  0006d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00070	e8 00 00 00 00	 call	 _memcpy
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@xsgetn:

; 378  : 				_Ptr += _Size;
; 379  : 				_Copied += _Size;

  00078	01 75 fc	 add	 DWORD PTR __Copied$1$[ebp], esi
  0007b	8d 14 36	 lea	 edx, DWORD PTR [esi+esi]
  0007e	8b 45 f4	 mov	 eax, DWORD PTR __Size$2$[ebp]
  00081	11 45 10	 adc	 DWORD PTR __Copied$2$[ebp], eax

; 380  : 				_Count -= _Size;

  00084	2b fe		 sub	 edi, esi

; 381  : 				gbump((int)_Size);

  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00089	1b d8		 sbb	 ebx, eax
  0008b	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0008e	29 30		 sub	 DWORD PTR [eax], esi
  00090	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00093	01 10		 add	 DWORD PTR [eax], edx
  00095	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00098	eb 31		 jmp	 SHORT $LN9@xsgetn
$LN5@xsgetn:

; 382  : 				}
; 383  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0009d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009f	ff 50 1c	 call	 DWORD PTR [eax+28]
  000a2	0f b7 c8	 movzx	 ecx, ax
  000a5	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000aa	66 3b c1	 cmp	 ax, cx
  000ad	74 33		 je	 SHORT $LN42@xsgetn

; 384  : 				break;	// end of file, quit
; 385  : 			else
; 386  : 				{	// get a single character
; 387  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 388  : 				++_Copied;

  000af	83 45 fc 01	 add	 DWORD PTR __Copied$1$[ebp], 1

; 389  : 				--_Count;

  000b3	ba 02 00 00 00	 mov	 edx, 2
  000b8	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000bb	83 55 10 00	 adc	 DWORD PTR __Copied$2$[ebp], 0
  000bf	83 c7 ff	 add	 edi, -1
  000c2	83 d3 ff	 adc	 ebx, -1
  000c5	66 89 08	 mov	 WORD PTR [eax], cx
  000c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN9@xsgetn:

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  000cb	03 c2		 add	 eax, edx
  000cd	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  000d0	85 db		 test	 ebx, ebx
  000d2	0f 8f 60 ff ff
	ff		 jg	 $LL2@xsgetn
  000d8	7c 08		 jl	 SHORT $LN42@xsgetn
  000da	85 ff		 test	 edi, edi
  000dc	0f 85 56 ff ff
	ff		 jne	 $LL2@xsgetn
$LN42@xsgetn:
  000e2	8b 55 10	 mov	 edx, DWORD PTR __Copied$2$[ebp]
  000e5	8b 45 fc	 mov	 eax, DWORD PTR __Copied$1$[ebp]
  000e8	5e		 pop	 esi
  000e9	5f		 pop	 edi
  000ea	5b		 pop	 ebx

; 390  : 				}
; 391  : 
; 392  : 		return (_Copied);
; 393  : 		}

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 0c 00	 ret	 12			; 0000000cH
$LN40@xsgetn:

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  000f1	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  000f4	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  000f7	5f		 pop	 edi
  000f8	5b		 pop	 ebx

; 390  : 				}
; 391  : 
; 392  : 		return (_Copied);
; 393  : 		}

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JPA_W_J@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow, COMDAT
; _this$ = ecx

; 361  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
  00008	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000d	66 3b c8	 cmp	 cx, ax
  00010	75 04		 jne	 SHORT $LN3@uflow
  00012	8b c1		 mov	 eax, ecx
  00014	5e		 pop	 esi

; 363  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 364  : 		}

  00015	c3		 ret	 0
$LN3@uflow:

; 362  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00016	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00019	ff 08		 dec	 DWORD PTR [eax]
  0001b	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0001e	5e		 pop	 esi
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00024	89 01		 mov	 DWORD PTR [ecx], eax
  00026	0f b7 02	 movzx	 eax, WORD PTR [edx]

; 363  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 364  : 		}

  00029	c3		 ret	 0
?uflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow, COMDAT
; _this$ = ecx

; 357  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 358  : 		}

  00005	c3		 ret	 0
?underflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc, COMDAT
; _this$ = ecx

; 352  : 		return (0);

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 353  : 		}

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail, COMDAT
; _this$ = ecx

; 347  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 348  : 		}

  00005	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 2
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow, COMDAT
; _this$ = ecx

; 342  : 		return (_Traits::eof());

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 343  : 		}

  00005	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@MAEGG@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init, COMDAT
; _this$ = ecx

; 319  : 		_IGfirst = &_Gfirst;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 320  : 		_IPfirst = &_Pfirst;

  00006	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]

; 321  : 		_IGnext = &_Gnext;

  00009	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0000c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 322  : 		_IPnext = &_Pnext;

  00012	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00015	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 323  : 		_IGcount = &_Gcount;

  00018	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  0001b	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 324  : 		_IPcount = &_Pcount;

  0001e	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00021	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 325  : 		setp(0, 0);

  00024	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0002a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 		setg(0, 0, 0);

  0003c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0004e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 327  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail, COMDAT
; _this$ = ecx

; 314  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 315  : 		}

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 314  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 315  : 		}

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc, COMDAT
; _this$ = ecx

; 308  : 		--*_IPcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 309  : 		return ((*_IPnext)++);

  00005	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 310  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 300  : 		{	// set pointers for write buffer, extended version

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 301  : 		*_IPfirst = _First;

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi

; 302  : 		*_IPnext = _Next;
; 303  : 		*_IPcount = (int)(_Last - _Next);

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	89 02		 mov	 DWORD PTR [edx], eax
  0000f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00015	2b f2		 sub	 esi, edx
  00017	d1 fe		 sar	 esi, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx
  0001b	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001e	89 30		 mov	 DWORD PTR [eax], esi
  00020	5e		 pop	 esi

; 304  : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp, COMDAT
; _this$ = ecx

; 293  : 		{	// set pointers for write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  : 		*_IPfirst = _First;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 295  : 		*_IPnext = _First;
; 296  : 		*_IPcount = (int)(_Last - _First);

  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b d6		 sub	 edx, esi
  0000f	89 30		 mov	 DWORD PTR [eax], esi
  00011	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00014	d1 fa		 sar	 edx, 1
  00016	89 30		 mov	 DWORD PTR [eax], esi
  00018	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001b	5e		 pop	 esi
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 297  : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?setp@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W0@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump, COMDAT
; _this$ = ecx

; 287  : 		{	// alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 		*_IPcount -= _Off;

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 289  : 		*_IPnext += _Off;

  0000b	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000e	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00011	01 01		 add	 DWORD PTR [ecx], eax

; 290  : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail, COMDAT
; _this$ = ecx

; 283  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Gnavail
  00008	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 284  : 		}

  0000e	c3		 ret	 0
$LN3@Gnavail:

; 283  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 284  : 		}

  00012	c3		 ret	 0
?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IGcount;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IGnext)++);

  00005	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 273  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr, COMDAT
; _this$ = ecx

; 260  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]

; 261  : 		}

  0000d	c3		 ret	 0
?epptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::epptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg, COMDAT
; _this$ = ecx

; 252  : 		{	// set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 		*_IGfirst = _First;

  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi

; 254  : 		*_IGnext = _Next;
; 255  : 		*_IGcount = (int)(_Last - _Next);

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	89 02		 mov	 DWORD PTR [edx], eax
  0000f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00015	2b f2		 sub	 esi, edx
  00017	d1 fe		 sar	 esi, 1
  00019	89 10		 mov	 DWORD PTR [eax], edx
  0001b	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0001e	89 30		 mov	 DWORD PTR [eax], esi
  00020	5e		 pop	 esi

; 256  : 		}

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXPA_W00@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::setg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump, COMDAT
; _this$ = ecx

; 246  : 		{	// alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 		*_IGcount -= _Off;

  00003	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 248  : 		*_IGnext += _Off;

  0000b	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0000e	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00011	01 01		 add	 DWORD PTR [ecx], eax

; 249  : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr, COMDAT
; _this$ = ecx

; 242  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]

; 243  : 		}

  0000d	c3		 ret	 0
?egptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::egptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr, COMDAT
; _this$ = ecx

; 237  : 		return (*_IPnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 238  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase, COMDAT
; _this$ = ecx

; 232  : 		return (*_IPfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 233  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pbase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr, COMDAT
; _this$ = ecx

; 227  : 		return (*_IGnext);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 228  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::gptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback, COMDAT
; _this$ = ecx

; 222  : 		return (*_IGfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 223  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::eback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock, COMDAT
; _this$ = ecx

; 217  : 		}

  00000	c3		 ret	 0
?_Unlock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock, COMDAT
; _this$ = ecx

; 213  : 		}

  00000	c3		 ret	 0
?_Lock@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc, COMDAT
; _this$ = ecx

; 199  : 		{	// put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 		return (0 < _Pnavail()

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 23		 je	 SHORT $LN3@sputc
  0000b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	7e 1a		 jle	 SHORT $LN3@sputc
  00014	48		 dec	 eax
  00015	89 02		 mov	 DWORD PTR [edx], eax
  00017	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
  00021	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00024	66 89 02	 mov	 WORD PTR [edx], ax
  00027	0f b7 c0	 movzx	 eax, ax

; 201  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 202  : 			: overflow(_Traits::to_int_type(_Ch)));
; 203  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN3@sputc:

; 200  : 		return (0 < _Pnavail()

  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00033	ff 50 0c	 call	 DWORD PTR [eax+12]
  00036	0f b7 c0	 movzx	 eax, ax

; 201  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 202  : 			: overflow(_Traits::to_int_type(_Ch)));
; 203  : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?sputc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEG_W@Z ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::sputc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync, COMDAT
; _this$ = ecx

; 145  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::pubsync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 79   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 80   : 		delete _Plocale;

  00023	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0002c	85 f6		 test	 esi, esi
  0002e	74 2a		 je	 SHORT $LN6@basic_stre
  00030	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 11		 je	 SHORT $LN12@basic_stre
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	ff 50 08	 call	 DWORD PTR [eax+8]
  00043	85 c0		 test	 eax, eax
  00045	74 08		 je	 SHORT $LN12@basic_stre
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b c8		 mov	 ecx, eax
  0004b	6a 01		 push	 1
  0004d	ff 12		 call	 DWORD PTR [edx]
$LN12@basic_stre:
  0004f	6a 08		 push	 8
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
$LN6@basic_stre:

; 81   : 		}

  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 26   : 		{	// construct with no buffers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 25   : 		: _Plocale(new locale)

  00026	6a 08		 push	 8

; 26   : 		{	// construct with no buffers

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	8b f8		 mov	 edi, eax
  00035	83 c4 04	 add	 esp, 4
  00038	85 ff		 test	 edi, edi
  0003a	74 16		 je	 SHORT $LN3@basic_stre

; 25   : 		: _Plocale(new locale)

  0003c	6a 01		 push	 1
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0004a	83 c4 04	 add	 esp, 4
  0004d	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00050	eb 02		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  00052	33 ff		 xor	 edi, edi
$LN4@basic_stre:

; 27   : 		_Init();

  00054	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00057	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  0005a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0005d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00060	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00063	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00066	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00069	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0006c	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0006f	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  00072	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00075	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00078	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0007b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00081	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00084	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0008a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0008d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00093	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00096	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000a5	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 28   : 		}

  000ae	8b c6		 mov	 eax, esi
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str, COMDAT
; _this$ = ecx

; 644  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 645  : 		return (_Stringbuffer.str());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00011	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 646  : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 635  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	8b 47 98	 mov	 eax, DWORD PTR [edi-104]

; 636  : 		}

  00029	8d 4f b0	 lea	 ecx, DWORD PTR [edi-80]
  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002f	c7 44 38 98 00
	00 00 00	 mov	 DWORD PTR [eax+edi-104], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00037	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  0003a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003d	8d 42 98	 lea	 eax, DWORD PTR [edx-104]
  00040	89 44 3a 94	 mov	 DWORD PTR [edx+edi-108], eax
  00044	c7 47 b0 00 00
	00 00		 mov	 DWORD PTR [edi-80], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0004b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IAEXXZ ; std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  00050	8b 77 e4	 mov	 esi, DWORD PTR [edi-28]
  00053	c7 47 b0 00 00
	00 00		 mov	 DWORD PTR [edi-80], OFFSET ??_7?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@6B@
  0005a	85 f6		 test	 esi, esi
  0005c	74 2a		 je	 SHORT $LN12@basic_stri
  0005e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	85 c9		 test	 ecx, ecx
  0006a	74 11		 je	 SHORT $LN18@basic_stri
  0006c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006e	ff 50 08	 call	 DWORD PTR [eax+8]
  00071	85 c0		 test	 eax, eax
  00073	74 08		 je	 SHORT $LN18@basic_stri
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	8b c8		 mov	 ecx, eax
  00079	6a 01		 push	 1
  0007b	ff 12		 call	 DWORD PTR [edx]
$LN18@basic_stri:
  0007d	6a 08		 push	 8
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00085	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
  00088	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  0008b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008e	c7 44 38 98 00
	00 00 00	 mov	 DWORD PTR [eax+edi-104], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00096	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  00099	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009c	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  0009f	89 44 39 94	 mov	 DWORD PTR [ecx+edi-108], eax
  000a3	8b 47 a8	 mov	 eax, DWORD PTR [edi-88]
  000a6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a9	c7 44 38 a8 00
	00 00 00	 mov	 DWORD PTR [eax+edi-88], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000b1	8b 47 a8	 mov	 eax, DWORD PTR [edi-88]
  000b4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b7	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  000ba	89 44 39 a4	 mov	 DWORD PTR [ecx+edi-92], eax
  000be	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  000c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c4	c7 44 38 98 00
	00 00 00	 mov	 DWORD PTR [eax+edi-104], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  000cc	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  000d5	89 44 39 94	 mov	 DWORD PTR [ecx+edi-108], eax
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_this$ = 12						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 591  : 		{	// construct empty character buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00034	83 7d 0c 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00038	74 22		 je	 SHORT $LN2@basic_stri
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  00040	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00047	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_stri:

; 589  : 		: _Mybase(&_Stringbuffer),

  0005c	6a 00		 push	 0
  0005e	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  00061	8b cf		 mov	 ecx, edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >

; 591  : 		{	// construct empty character buffer

  00069	8b 07		 mov	 eax, DWORD PTR [edi]
  0006b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00081	89 75 0c	 mov	 DWORD PTR _this$[ebp], esi
  00084	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  00087	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  00092	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]
  00095	8b c3		 mov	 eax, ebx
  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  0009d	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  000a4	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000ab	f7 d1		 not	 ecx
  000ad	83 e1 04	 and	 ecx, 4
  000b0	8b d1		 mov	 edx, ecx
  000b2	83 ca 02	 or	 edx, 2
  000b5	24 02		 and	 al, 2
  000b7	8b c3		 mov	 eax, ebx
  000b9	0f 45 d1	 cmovne	 edx, ecx
  000bc	8b ca		 mov	 ecx, edx
  000be	83 c9 08	 or	 ecx, 8
  000c1	24 08		 and	 al, 8
  000c3	0f 44 ca	 cmove	 ecx, edx
  000c6	8b c1		 mov	 eax, ecx
  000c8	83 c8 10	 or	 eax, 16			; 00000010H
  000cb	80 e3 04	 and	 bl, 4
  000ce	0f 44 c1	 cmove	 eax, ecx
  000d1	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 592  : 		}

  000d4	8b c7		 mov	 eax, edi
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_stri:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 20	 add	 ecx, 32			; 00000020H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z$3:
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z:
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8d 51 20	 lea	 edx, DWORD PTR [ecx+32]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	c7 44 10 e0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-32], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  00032	8b 42 e0	 mov	 eax, DWORD PTR [edx-32]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  0003b	89 44 11 dc	 mov	 DWORD PTR [ecx+edx-36], eax
  0003f	8b 42 f0	 mov	 eax, DWORD PTR [edx-16]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	c7 44 10 f0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-16], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0004d	8b 42 f0	 mov	 eax, DWORD PTR [edx-16]
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00056	89 44 11 ec	 mov	 DWORD PTR [ecx+edx-20], eax
  0005a	8b 42 e0	 mov	 eax, DWORD PTR [edx-32]
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	c7 44 10 e0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-32], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00068	8b 42 e0	 mov	 eax, DWORD PTR [edx-32]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00071	89 44 11 dc	 mov	 DWORD PTR [ecx+edx-36], eax
  00075	52		 push	 edx
  00076	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00083	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00088	83 c4 04	 add	 esp, 4
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$4:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 e0	 lea	 esi, DWORD PTR [ecx-32]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0b		 je	 SHORT $LN4@scalar
  00014	6a 68		 push	 104			; 00000068H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 983  : 		{	// destroy the object

  00000	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e0 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-32], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  0000e	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e0	 lea	 eax, DWORD PTR [edx-32]
  00017	89 44 0a dc	 mov	 DWORD PTR [edx+ecx-36], eax

; 984  : 		}

  0001b	8d 51 f8	 lea	 edx, DWORD PTR [ecx-8]
  0001e	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0002c	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00035	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
  00039	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00047	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00050	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
  00054	c3		 ret	 0
??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_this$ = 12						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z PROC ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 954  : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	83 7d 0c 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00036	74 22		 je	 SHORT $LN2@basic_iost
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], OFFSET ??_8?$basic_iostream@_WU?$char_traits@_W@std@@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00045	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_iost:

; 952  : 		: _Myis(_Strbuf, false),

  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	6a 00		 push	 0
  0005e	ff 75 08	 push	 DWORD PTR __Strbuf$[ebp]
  00061	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00064	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00070	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00073	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00080	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00087	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008a	03 ce		 add	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 953  : 			_Myos(_Noinit, false)

  00091	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
  00094	89 55 0c	 mov	 DWORD PTR _this$[ebp], edx
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009c	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  000a3	8b 02		 mov	 eax, DWORD PTR [edx]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  000ab	89 44 11 fc	 mov	 DWORD PTR [ecx+edx-4], eax

; 954  : 		{	// construct from stream buffer pointer

  000af	8b 06		 mov	 eax, DWORD PTR [esi]
  000b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b4	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  000bb	8b 06		 mov	 eax, DWORD PTR [esi]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  000c3	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax

; 955  : 		}

  000c7	8b c6		 mov	 eax, esi
  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 20	 add	 ecx, 32			; 00000020H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__ehhandler$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@@Z ENDP ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::basic_iostream<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00032	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003b	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
  0003f	52		 push	 edx
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  0004d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00052	83 c4 04	 add	 esp, 4
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00028	8d 72 f8	 lea	 esi, DWORD PTR [edx-8]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003e	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
  00042	52		 push	 edx
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00050	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00055	83 c4 04	 add	 esp, 4
  00058	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005c	74 0b		 je	 SHORT $LN16@scalar
  0005e	6a 50		 push	 80			; 00000050H
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -40						; size = 20
__Ok$3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 574  : 		{	// flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 575  : 		if (_Myios::rdbuf() != 0)

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	83 7c 30 38 00	 cmp	 DWORD PTR [eax+esi+56], 0
  00032	0f 84 ce 00 00
	00		 je	 $LN102@flush

; 576  : 			{	// buffer exists, flush it
; 577  : 			const sentry _Ok(*this);

  00038	56		 push	 esi
  00039	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  0003c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 578  : 
; 579  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00041	80 7d f0 00	 cmp	 BYTE PTR __Ok$3[ebp+4], 0
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	0f 84 83 00 00
	00		 je	 $LN56@flush
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00057	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0005b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005d	ff 50 34	 call	 DWORD PTR [eax+52]
  00060	83 f8 ff	 cmp	 eax, -1
  00063	75 70		 jne	 SHORT $LN56@flush

; 580  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0006a	8b 44 32 10	 mov	 eax, DWORD PTR [edx+esi+16]
  0006e	03 d6		 add	 edx, esi
  00070	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00073	83 c9 04	 or	 ecx, 4
  00076	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0007a	0f 45 4a 0c	 cmovne	 ecx, DWORD PTR [edx+12]
  0007e	83 e1 13	 and	 ecx, 19			; 00000013H
  00081	83 c9 04	 or	 ecx, 4
  00084	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00087	23 c1		 and	 eax, ecx
  00089	74 4a		 je	 SHORT $LN56@flush
  0008b	a8 04		 test	 al, 4
  0008d	74 2a		 je	 SHORT $LN53@flush
  0008f	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN111@flush:
  00099	50		 push	 eax
  0009a	6a 01		 push	 1
  0009c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0009f	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000a4	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000a9	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000ac	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@flush:
$LN53@flush:
  000b9	a8 02		 test	 al, 2
  000bb	74 0c		 je	 SHORT $LN55@flush
  000bd	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000c7	eb d0		 jmp	 SHORT $LN111@flush
$LN55@flush:
  000c9	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000d3	eb c4		 jmp	 SHORT $LN111@flush
$LN56@flush:

; 581  : 			}

  000d5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000dc	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000e1	84 c0		 test	 al, al
  000e3	75 08		 jne	 SHORT $LN98@flush
  000e5	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000e8	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN98@flush:
  000ed	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000f0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  000fd	85 c9		 test	 ecx, ecx
  000ff	74 05		 je	 SHORT $LN102@flush
  00101	8b 01		 mov	 eax, DWORD PTR [ecx]
  00103	ff 50 08	 call	 DWORD PTR [eax+8]
$LN102@flush:

; 582  : 		return (*this);

  00106	8b c6		 mov	 eax, esi

; 583  : 		}

  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5e		 pop	 esi
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN110@flush:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$14:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$15:
  0000e	e8 00 00 00 00	 call	 ___std_terminate
  00013	c3		 ret	 0
__ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -76						; size = 20
$T3 = -56						; size = 20
$T4 = -36						; size = 20
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 165  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 166  : 		_TRY_BEGIN
; 167  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0003e	0f 85 d3 00 00
	00		 jne	 $LN9@Osfx
  00044	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00049	0f 84 c8 00 00
	00		 je	 $LN9@Osfx

; 168  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  0004f	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	ff 50 34	 call	 DWORD PTR [eax+52]
  00058	83 f8 ff	 cmp	 eax, -1
  0005b	0f 85 b6 00 00
	00		 jne	 $LN9@Osfx

; 169  : 				_Myios::setstate(ios_base::badbit);

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00066	8b 44 32 10	 mov	 eax, DWORD PTR [edx+esi+16]
  0006a	03 d6		 add	 edx, esi
  0006c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0006f	83 c9 04	 or	 ecx, 4
  00072	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00076	0f 45 4a 0c	 cmovne	 ecx, DWORD PTR [edx+12]
  0007a	83 e1 13	 and	 ecx, 19			; 00000013H
  0007d	83 c9 04	 or	 ecx, 4
  00080	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00083	23 c1		 and	 eax, ecx
  00085	0f 84 8c 00 00
	00		 je	 $LN9@Osfx
  0008b	a8 04		 test	 al, 4
  0008d	74 2a		 je	 SHORT $LN34@Osfx
  0008f	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  00099	50		 push	 eax
  0009a	6a 01		 push	 1
  0009c	8d 4d dc	 lea	 ecx, DWORD PTR $T4[ebp]
  0009f	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000a4	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000a9	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
  000ac	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN80@Osfx:
$LN34@Osfx:
  000b9	a8 02		 test	 al, 2
  000bb	74 2a		 je	 SHORT $LN36@Osfx
  000bd	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000c7	50		 push	 eax
  000c8	6a 01		 push	 1
  000ca	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  000cd	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000d2	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000d7	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  000da	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN81@Osfx:
$LN36@Osfx:
  000e7	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000f1	50		 push	 eax
  000f2	6a 01		 push	 1
  000f4	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f7	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000fc	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00101	8d 45 b4	 lea	 eax, DWORD PTR $T2[ebp]
  00104	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN82@Osfx:
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:

; 170  : 		_CATCH_ALL
; 171  : 		_CATCH_END

  00111	b8 00 00 00 00	 mov	 eax, $LN9@Osfx
  00116	c3		 ret	 0
$LN9@Osfx:

; 172  : 		}

  00117	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00121	59		 pop	 ecx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
$LN79@Osfx:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 88   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  0000e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00017	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax

; 89   : 		}

  0001b	c3		 ret	 0
??1?$basic_ostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::~basic_ostream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 58   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 59   : 		{	// construct uninitialized

  0002b	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00036	74 1b		 je	 SHORT $LN2@basic_ostr
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@_WU?$char_traits@_W@std@@@std@@7B@
  0003e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_ostr:

; 60   : 		if (_Addit)

  00053	80 7d 0c 00	 cmp	 BYTE PTR __Addit$[ebp], 0
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005c	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0006b	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  0006f	74 10		 je	 SHORT $LN13@basic_ostr

; 61   : 			this->_Addstd(this);	// suppress for basic_iostream

  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	03 c6		 add	 eax, esi
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0007e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 62   : 		}

  00081	8b c6		 mov	 eax, esi
  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::basic_ostream<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00032	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003b	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
  0003f	52		 push	 edx
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  0004d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00052	83 c4 04	 add	 esp, 4
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00028	8d 72 e8	 lea	 esi, DWORD PTR [edx-24]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003e	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
  00042	52		 push	 edx
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00050	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00055	83 c4 04	 add	 esp, 4
  00058	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005c	74 0b		 je	 SHORT $LN16@scalar
  0005e	6a 60		 push	 96			; 00000060H
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 81   : 		{	// destroy the object

  00000	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  0000e	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00017	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax

; 82   : 		}

  0001b	c3		 ret	 0
??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z PROC ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 46   : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002b	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00036	74 1b		 je	 SHORT $LN2@basic_istr
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@_WU?$char_traits@_W@std@@@std@@7B@
  0003e	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_istr:
  00053	8b 06		 mov	 eax, DWORD PTR [esi]

; 47   : 		_Myios::init(_Strbuf, _Isstd);

  00055	ff 75 0c	 push	 DWORD PTR __Isstd$[ebp]
  00058	ff 75 08	 push	 DWORD PTR __Strbuf$[ebp]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0006d	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	03 ce		 add	 ecx, esi
  00086	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init

; 48   : 		}

  0008b	8b c6		 mov	 eax, esi
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5e		 pop	 esi
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@PAV?$basic_streambuf@_WU?$char_traits@_W@std@@@1@_N@Z ENDP ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::basic_istream<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN10@scalar
  00041	6a 48		 push	 72			; 00000048H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 183  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 		{	// default constructor, do nothing
; 185  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@_WU?$char_traits@_W@std@@@std@@6B@
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??0?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::basic_ios<wchar_t,std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
_TEXT	SEGMENT
$T2 = -60						; size = 20
$T3 = -40						; size = 20
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init, COMDAT
; _this$ = ecx

; 170  : 		{	// initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 171  : 		_Init();	// initialize ios_base

  00029	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 172  : 		_Mystrbuf = _Strbuf;

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]

; 173  : 		_Tiestr = 0;
; 174  : 		_Fillch = widen(' ');

  00031	8b ce		 mov	 ecx, esi
  00033	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00036	8d 45 ec	 lea	 eax, DWORD PTR $T4[ebp]
  00039	50		 push	 eax
  0003a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00041	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00046	50		 push	 eax
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	8b 4d f0	 mov	 ecx, DWORD PTR $T4[ebp+4]
  0005b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN11@init
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	ff 52 08	 call	 DWORD PTR [edx+8]
  0006b	85 c0		 test	 eax, eax
  0006d	74 08		 je	 SHORT $LN11@init
  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	8b c8		 mov	 ecx, eax
  00073	6a 01		 push	 1
  00075	ff 12		 call	 DWORD PTR [edx]
$LN11@init:
  00077	8b 07		 mov	 eax, DWORD PTR [edi]
  00079	8b cf		 mov	 ecx, edi
  0007b	6a 20		 push	 32			; 00000020H
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	ff 50 30	 call	 DWORD PTR [eax+48]

; 175  : 
; 176  : 		if (_Mystrbuf == 0)

  00087	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  0008b	66 89 46 40	 mov	 WORD PTR [esi+64], ax
  0008f	75 79		 jne	 SHORT $LN33@init

; 177  : 			setstate(badbit);

  00091	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00094	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00097	83 e0 13	 and	 eax, 19			; 00000013H
  0009a	83 c8 04	 or	 eax, 4
  0009d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000a0	23 c8		 and	 ecx, eax
  000a2	74 66		 je	 SHORT $LN33@init
  000a4	f6 c1 04	 test	 cl, 4
  000a7	74 2a		 je	 SHORT $LN30@init
  000a9	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN76@init:
  000b3	50		 push	 eax
  000b4	6a 01		 push	 1
  000b6	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000b9	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000be	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000c5	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000c8	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
$LN77@init:
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN78@init:
$LN30@init:
  000d3	f6 c1 02	 test	 cl, 2
  000d6	74 0c		 je	 SHORT $LN32@init
  000d8	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000e2	eb cf		 jmp	 SHORT $LN76@init
$LN32@init:
  000e4	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000ee	50		 push	 eax
  000ef	6a 01		 push	 1
  000f1	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f4	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000f9	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00100	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00103	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00108	eb c3		 jmp	 SHORT $LN77@init
$LN33@init:

; 178  : 
; 179  : 		if (_Isstd)

  0010a	80 7d 0c 00	 cmp	 BYTE PTR __Isstd$[ebp], 0
  0010e	74 09		 je	 SHORT $LN3@init

; 180  : 			_Addstd(this);	// special handling for standard streams

  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00116	83 c4 04	 add	 esp, 4
$LN3@init:

; 181  : 		}

  00119	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00123	59		 pop	 ecx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN75@init:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z$1:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__ehhandler$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
_TEXT	SEGMENT
$T2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen, COMDAT
; _this$ = ecx

; 130  : 		{	// convert _Byte to character using imbued locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 131  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0002f	50		 push	 eax
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b f0		 mov	 esi, eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp+4]
  00044	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004b	85 c9		 test	 ecx, ecx
  0004d	74 11		 je	 SHORT $LN7@widen
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	ff 52 08	 call	 DWORD PTR [edx+8]
  00054	85 c0		 test	 eax, eax
  00056	74 08		 je	 SHORT $LN7@widen
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b c8		 mov	 ecx, eax
  0005c	6a 01		 push	 1
  0005e	ff 12		 call	 DWORD PTR [edx]
$LN7@widen:

; 132  : 		return (_Ctype_fac.widen(_Byte));

  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	8b ce		 mov	 ecx, esi
  00064	ff 75 08	 push	 DWORD PTR __Byte$[ebp]
  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006e	ff 50 30	 call	 DWORD PTR [eax+48]

; 133  : 		}

  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z$1:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__ehhandler$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WD@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::widen
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ
_TEXT	SEGMENT
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill, COMDAT
; _this$ = ecx

; 113  : 		return (_Fillch);

  00000	66 8b 41 40	 mov	 ax, WORD PTR [ecx+64]

; 114  : 		}

  00004	c3		 ret	 0
?fill@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBE_WXZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::fill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf, COMDAT
; _this$ = ecx

; 92   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 93   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie, COMDAT
; _this$ = ecx

; 80   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 81   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::tie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 58   : 		{	// merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   : 		if (_State != goodbit)

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 1a		 je	 SHORT $LN2@setstate

; 60   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  0000a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000d	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00010	0b d0		 or	 edx, eax
  00012	8b c2		 mov	 eax, edx
  00014	83 c8 04	 or	 eax, 4
  00017	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0001b	0f 45 c2	 cmovne	 eax, edx
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN2@setstate:

; 61   : 		}

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 44   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]

; 45   : 		ios_base::clear((iostate)(_Mystrbuf == 0

  00006	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00009	83 ca 04	 or	 edx, 4
  0000c	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00010	0f 45 55 08	 cmovne	 edx, DWORD PTR __State$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 46   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);
; 47   : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >, COMDAT
; _this$ = ecx

; 39   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 40   : 		}

  00022	51		 push	 ecx
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00030	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00035	83 c4 04	 add	 esp, 4
  00038	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char *>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?ConfigRead@@YAHPAD0H@Z
_TEXT	SEGMENT
_size$ = -4						; size = 4
_configKey$ = 8						; size = 4
_configValue$ = 12					; size = 4
_maxValueSize$ = 16					; size = 4
?ConfigRead@@YAHPAD0H@Z PROC				; ConfigRead, COMDAT

; 9781 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 9782 : 	DWORD size;
; 9783 : 	char *xml;
; 9784 : 
; 9785 : 	if (ConfigBuffer == NULL)

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00009	85 c0		 test	 eax, eax
  0000b	75 23		 jne	 SHORT $LN7@ConfigRead

; 9786 : 		ConfigBuffer = LoadFile (GetConfigPath (GST_APPD_FILENAME_CONFIGURATION), &size);

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _size$[ebp]
  00010	50		 push	 eax
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  00016	e8 00 00 00 00	 call	 _GetConfigPath
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _LoadFile
  00024	83 c4 08	 add	 esp, 8
  00027	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax

; 9787 : 
; 9788 : 	xml = ConfigBuffer;
; 9789 : 	if (xml != NULL)

  0002c	85 c0		 test	 eax, eax
  0002e	74 32		 je	 SHORT $LN4@ConfigRead
$LN7@ConfigRead:

; 9790 : 	{
; 9791 : 		xml = XmlFindElementByAttributeValue (xml, "config", "key", configKey);

  00030	ff 75 08	 push	 DWORD PTR _configKey$[ebp]
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _XmlFindElementByAttributeValue
  00043	83 c4 10	 add	 esp, 16			; 00000010H

; 9792 : 		if (xml != NULL)

  00046	85 c0		 test	 eax, eax
  00048	74 18		 je	 SHORT $LN4@ConfigRead

; 9793 : 		{
; 9794 : 			XmlGetNodeText (xml, configValue, maxValueSize);

  0004a	ff 75 10	 push	 DWORD PTR _maxValueSize$[ebp]
  0004d	ff 75 0c	 push	 DWORD PTR _configValue$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _XmlGetNodeText
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9795 : 			return TRUE;

  00059	b8 01 00 00 00	 mov	 eax, 1

; 9800 : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN4@ConfigRead:

; 9796 : 		}
; 9797 : 	}
; 9798 : 
; 9799 : 	return FALSE;

  00062	33 c0		 xor	 eax, eax

; 9800 : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?ConfigRead@@YAHPAD0H@Z ENDP				; ConfigRead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ??1Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ
_TEXT	SEGMENT
??1Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ PROC	; `IsBuiltInAdmin'::`2'::Finally7593::~Finally7593, COMDAT
; _this$ = ecx

; 7593 : 	finally_do_arg (void *, tokenUser, { free (finally_arg); });

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 _free
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ENDP	; `IsBuiltInAdmin'::`2'::Finally7593::~Finally7593
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ??0Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@PAX@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@PAX@Z PROC	; `IsBuiltInAdmin'::`2'::Finally7593::Finally7593, COMDAT
; _this$ = ecx

; 7593 : 	finally_do_arg (void *, tokenUser, { free (finally_arg); });

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@PAX@Z ENDP	; `IsBuiltInAdmin'::`2'::Finally7593::Finally7593
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ??1Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ
_TEXT	SEGMENT
??1Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ PROC	; `IsBuiltInAdmin'::`2'::Finally7584::~Finally7584, COMDAT
; _this$ = ecx

; 7584 : 	finally_do_arg (HANDLE, procToken, { CloseHandle (finally_arg); });

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00008	c3		 ret	 0
??1Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ENDP	; `IsBuiltInAdmin'::`2'::Finally7584::~Finally7584
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ??0Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@PAX@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
??0Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@PAX@Z PROC	; `IsBuiltInAdmin'::`2'::Finally7584::Finally7584, COMDAT
; _this$ = ecx

; 7584 : 	finally_do_arg (HANDLE, procToken, { CloseHandle (finally_arg); });

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@PAX@Z ENDP	; `IsBuiltInAdmin'::`2'::Finally7584::Finally7584
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_s$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_driveStr$ = 12						; size = 4
?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z PROC ; CloseVolumeExplorerWindowsChildEnum, COMDAT

; 4998 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]

; 4999 : 	char s[MAX_PATH];
; 5000 : 	SendMessage (hwnd, WM_GETTEXT, sizeof (s), (LPARAM) s);

  00016	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 0c	 mov	 esi, DWORD PTR _driveStr$[ebp]
  00020	51		 push	 ecx
  00021	68 04 01 00 00	 push	 260			; 00000104H
  00026	6a 0d		 push	 13			; 0000000dH
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 5001 : 
; 5002 : 	if (strstr (s, (char *) driveStr) != NULL)

  0002f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00035	56		 push	 esi
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _strstr
  0003c	83 c4 08	 add	 esp, 8
  0003f	5e		 pop	 esi
  00040	85 c0		 test	 eax, eax
  00042	74 2e		 je	 SHORT $LN2@CloseVolum

; 5003 : 	{
; 5004 : 		PostMessage (explorerTopLevelWindow, WM_CLOSE, 0, 0);

  00044	6a 00		 push	 0
  00046	6a 00		 push	 0
  00048	6a 10		 push	 16			; 00000010H
  0004a	ff 35 00 00 00
	00		 push	 DWORD PTR ?explorerTopLevelWindow@@3PAUHWND__@@A
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 5005 : 		explorerCloseSent = TRUE;

  00056	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?explorerCloseSent@@3HA, 1

; 5006 : 		return FALSE;

  00060	33 c0		 xor	 eax, eax

; 5007 : 	}
; 5008 : 
; 5009 : 	return TRUE;
; 5010 : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
$LN2@CloseVolum:
  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z ENDP ; CloseVolumeExplorerWindowsChildEnum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z
_TEXT	SEGMENT
_name$1 = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_font$ = 12						; size = 4
?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z PROC		; LocalizeDialogEnum, COMDAT

; 4914 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4915 : 	// Localization of controls
; 4916 : 
; 4917 : 	if (LocalizationActive)

  00010	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LocalizationActive, 0
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  0001b	74 6b		 je	 SHORT $LN6@LocalizeDi

; 4918 : 	{
; 4919 : 		int ctrlId = GetDlgCtrlID (hwnd);

  0001d	57		 push	 edi
  0001e	56		 push	 esi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgCtrlID@4
  00025	8b f8		 mov	 edi, eax

; 4920 : 		if (ctrlId != 0)

  00027	85 ff		 test	 edi, edi
  00029	74 5c		 je	 SHORT $LN8@LocalizeDi

; 4921 : 		{
; 4922 : 			char name[10] = { 0 };
; 4923 : 			GetClassName (hwnd, name, sizeof (name));

  0002b	6a 0a		 push	 10			; 0000000aH
  0002d	8d 45 f0	 lea	 eax, DWORD PTR _name$1[ebp]
  00030	c6 45 f0 00	 mov	 BYTE PTR _name$1[ebp], 0
  00034	50		 push	 eax
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	c6 45 f9 00	 mov	 BYTE PTR _name$1[ebp+9], 0
  0003c	56		 push	 esi
  0003d	66 0f d6 45 f1	 movq	 QWORD PTR _name$1[ebp+1], xmm0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassNameA@12

; 4924 : 
; 4925 : 			if (_stricmp (name, "Button") == 0 || _stricmp (name, "Static") == 0)

  00048	8d 45 f0	 lea	 eax, DWORD PTR _name$1[ebp]
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_06LKBCGDFD@Button?$AA@
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __stricmp
  00056	83 c4 08	 add	 esp, 8
  00059	85 c0		 test	 eax, eax
  0005b	74 15		 je	 SHORT $LN5@LocalizeDi
  0005d	8d 45 f0	 lea	 eax, DWORD PTR _name$1[ebp]
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_06KJMEDNIB@Static?$AA@
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 __stricmp
  0006b	83 c4 08	 add	 esp, 8
  0006e	85 c0		 test	 eax, eax
  00070	75 15		 jne	 SHORT $LN8@LocalizeDi
$LN5@LocalizeDi:

; 4926 : 			{
; 4927 : 				wchar_t *str = (wchar_t *) GetDictionaryValueByInt (ctrlId);

  00072	57		 push	 edi
  00073	e8 00 00 00 00	 call	 _GetDictionaryValueByInt
  00078	83 c4 04	 add	 esp, 4

; 4928 : 				if (str != NULL)

  0007b	85 c0		 test	 eax, eax
  0007d	74 08		 je	 SHORT $LN8@LocalizeDi

; 4929 : 					SetWindowTextW (hwnd, str);

  0007f	50		 push	 eax
  00080	56		 push	 esi
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN8@LocalizeDi:
  00087	5f		 pop	 edi
$LN6@LocalizeDi:

; 4930 : 			}
; 4931 : 		}
; 4932 : 	}
; 4933 : 
; 4934 : 	// Font
; 4935 : 	SendMessage (hwnd, WM_SETFONT, (WPARAM) font, 0);

  00088	6a 00		 push	 0
  0008a	ff 75 0c	 push	 DWORD PTR _font$[ebp]
  0008d	6a 30		 push	 48			; 00000030H
  0008f	56		 push	 esi
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4936 : 	
; 4937 : 	return TRUE;
; 4938 : }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	b8 01 00 00 00	 mov	 eax, 1
  0009e	33 cd		 xor	 ecx, ebp
  000a0	5e		 pop	 esi
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ENDP		; LocalizeDialogEnum
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$pair@$$CBHUHostDevice@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBHUHostDevice@@@std@@QAEPAXI@Z PROC	; std::pair<int const ,HostDevice>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0b		 je	 SHORT $LN7@scalar
  00014	6a 78		 push	 120			; 00000078H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$pair@$$CBHUHostDevice@@@std@@QAEPAXI@Z ENDP	; std::pair<int const ,HostDevice>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ PROC		; std::pair<int const ,HostDevice>::~pair<int const ,HostDevice>, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
??1?$pair@$$CBHUHostDevice@@@std@@QAE@XZ ENDP		; std::pair<int const ,HostDevice>::~pair<int const ,HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator--, COMDAT
; _this$ = ecx

; 424  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 425  : 		--static_cast<_Mybase&>(*this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--

; 426  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 427  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUHostDevice@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUHostDevice@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator->, COMDAT
; _this$ = ecx

; 407  : 		return (pointer_traits<pointer>::pointer_to(**this));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 408  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUHostDevice@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator*, COMDAT
; _this$ = ecx

; 402  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 403  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUHostDevice@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >, COMDAT
; _this$ = ecx

; 384  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 383  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 385  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator!=, COMDAT
; _this$ = ecx

; 340  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 341  : 		return (!(*this == _Right));
; 342  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator==, COMDAT
; _this$ = ecx

; 324  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (this->_Getcont() != _Right._Getcont())
; 327  : 			{	// report error
; 328  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 329  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 330  : 			}
; 331  : 
; 332  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 333  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator--, COMDAT
; _this$ = ecx

; 285  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 286  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 287  : 		if (this->_Getcont() == 0
; 288  : 			|| this->_Ptr == nullptr_t{})
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 295  : 		--static_cast<_Mybase&>(*this);
; 296  : 		if (_Ptrsav == this->_Ptr)
; 297  : 			{	// report error
; 298  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 299  : 			_SCL_SECURE_OUT_OF_RANGE;
; 300  : 			}
; 301  : 
; 302  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 303  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr_t{});
; 304  : 
; 305  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 306  : 		--static_cast<_Mybase&>(*this);
; 307  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 308  : 
; 309  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 310  : 		--static_cast<_Mybase&>(*this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--

; 311  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 312  : 
; 313  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 314  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator++, COMDAT
; _this$ = ecx

; 278  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 279  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 280  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++

; 281  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 282  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator++, COMDAT
; _this$ = ecx

; 258  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 259  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 260  : 		if (this->_Getcont() == 0
; 261  : 			|| this->_Ptr == nullptr_t{}
; 262  : 			|| _Mytree::_Isnil(this->_Ptr))
; 263  : 			{	// report error
; 264  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 265  : 			_SCL_SECURE_OUT_OF_RANGE;
; 266  : 			}
; 267  : 
; 268  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 269  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr_t{});
; 270  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		++static_cast<_Mybase&>(*this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++

; 274  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 275  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator*, COMDAT
; _this$ = ecx

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 234  : 		if (_Mycont == 0
; 235  : 			|| this->_Ptr == nullptr_t{}
; 236  : 			|| this->_Ptr == _Mycont->_Myhead)
; 237  : 			{	// report error
; 238  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 239  : 			_SCL_SECURE_OUT_OF_RANGE;
; 240  : 			}
; 241  : 
; 242  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 243  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 244  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 245  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 246  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 247  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 248  : 
; 249  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 250  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUHostDevice@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >, COMDAT
; _this$ = ecx

; 208  : 		: _Mybase()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 210  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 88   : 			_Ptr = _Mytree::_Max(

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:
  00023	8b c8		 mov	 ecx, eax
  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator

; 88   : 			_Ptr = _Mytree::_Max(

$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 63   : 			_Ptr = _Mytree::_Min(

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:
  00020	8b c8		 mov	 ecx, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 40   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ
text$yd	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ PROC ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'itemToDeviceMap'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  0002e	50		 push	 eax
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	ff 30		 push	 DWORD PTR [eax]
  00038	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
  00041	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00052	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  00060	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,HostDevice>,void *> *>
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00074	83 c4 04	 add	 esp, 4
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
text$yd	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ ENDP ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'itemToDeviceMap''
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::~map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	50		 push	 eax
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	ff 30		 push	 DWORD PTR [eax]
  00032	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
  0003b	ff 36		 push	 DWORD PTR [esi]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::~map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Keyval$ = 8						; size = 4
??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[], COMDAT
; _this$ = ecx

; 337  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 338  : 		return (try_emplace(_Keyval).first->second);

  00006	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  00009	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>
  00012	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00015	83 c0 18	 add	 eax, 24			; 00000018H

; 339  : 		}

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??A?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAEAAUHostDevice@@ABH@Z ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 101  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2177 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2178 : 		return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 2179 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHUHostDevice@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHUHostDevice@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2172 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2173 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2174 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHUHostDevice@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2167 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2168 : 		erase(begin(), end());

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase

; 2169 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2111 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2112 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2113 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 2114 : 
; 2115 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2116 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2117 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2118 : 
; 2119 : 		if (_Wherenode == _Root())

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2120 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2128 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 2121 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2128 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2123 : 		else
; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2128 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Root, COMDAT
; _this$ = ecx

; 2107 : 		return (this->_Parent(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2108 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 2102 : 		return (this->_Right(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2103 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2081 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2082 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2083 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 2084 : 
; 2085 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2086 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2087 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2088 : 
; 2089 : 		if (_Wherenode == _Root())

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2090 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2098 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2092 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2098 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2093 : 		else
; 2094 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2098 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2077 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2078 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2046 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 9c c0	 setl	 al

; 2047 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2048 : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2032 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2033 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 25		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2035 : 			{	// free subtrees, then node
; 2036 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase

; 2037 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 2038 : 			this->_Getal().destroy(

  0001f	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00022	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 2039 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2040 : 
; 2041 : 			this->_Getal().deallocate(_Rootnode, 1);

  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	8b fe		 mov	 edi, esi
  00032	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00036	74 db		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 2042 : 			}
; 2043 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1640 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1641 : 		this->_Getal().destroy(

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00007	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0000a	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 1642 : 			_STD addressof(this->_Myval(_Newnode)));
; 1643 : 
; 1644 : 		this->_Getal().deallocate(_Newnode, 1);

  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
  00018	5e		 pop	 esi

; 1645 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1537 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN91@lower_boun
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL13@lower_boun:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  00016	7d 05		 jge	 SHORT $LN15@lower_boun
  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001b	eb 04		 jmp	 SHORT $LN16@lower_boun
$LN15@lower_boun:
  0001d	8b d0		 mov	 edx, eax
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@lower_boun:
  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL13@lower_boun
$LN91@lower_boun:
  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1539 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find, COMDAT
; _this$ = ecx

; 1480 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1481 : 		iterator _Where = lower_bound(_Keyval);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b d0		 mov	 edx, eax
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	75 18		 jne	 SHORT $LN18@find
  00014	56		 push	 esi
  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL17@find:
  00017	39 71 10	 cmp	 DWORD PTR [ecx+16], esi
  0001a	7d 05		 jge	 SHORT $LN19@find
  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0001f	eb 04		 jmp	 SHORT $LN20@find
$LN19@find:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN20@find:
  00025	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00029	74 ec		 je	 SHORT $LL17@find
  0002b	5e		 pop	 esi
$LN18@find:

; 1482 : 		return (_Where == end()

  0002c	3b d0		 cmp	 edx, eax
  0002e	74 11		 je	 SHORT $LN3@find
  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
  00035	7c 0a		 jl	 SHORT $LN3@find
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 10		 mov	 DWORD PTR [eax], edx

; 1483 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1484 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1485 : 					? end() : _Where);
; 1486 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN3@find:

; 1482 : 		return (_Where == end()

  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5f		 pop	 edi
  00045	89 01		 mov	 DWORD PTR [ecx], eax
  00047	8b c1		 mov	 eax, ecx

; 1483 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1484 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1485 : 					? end() : _Where);
; 1486 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::clear, COMDAT
; _this$ = ecx

; 1467 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 		this->_Orphan_ptr(nullptr_t{});
; 1470 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 
; 1472 : 		_Erase(_Root());

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	ff 70 04	 push	 DWORD PTR [eax+4]
  0002a	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase

; 1473 : 		_Root() = this->_Myhead();

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1474 : 		_Lmost() = this->_Myhead();

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	89 00		 mov	 DWORD PTR [eax], eax

; 1475 : 		_Rmost() = this->_Myhead();

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1476 : 		this->_Mysize() = 0;

  0003d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1477 : 		}

  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase, COMDAT
; _this$ = ecx

; 1444 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 1445 : 		if (_First == begin() && _Last == end())

  00026	8b 17		 mov	 edx, DWORD PTR [edi]
  00028	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0002b	3b 02		 cmp	 eax, DWORD PTR [edx]
  0002d	75 44		 jne	 SHORT $LN299@erase
  0002f	39 55 10	 cmp	 DWORD PTR __Last$[ebp], edx
  00032	75 3f		 jne	 SHORT $LN299@erase

; 1446 : 			{	// erase all
; 1447 : 			clear();

  00034	ff 72 04	 push	 DWORD PTR [edx+4]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
  00043	8b 07		 mov	 eax, DWORD PTR [edi]
  00045	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00048	8b 07		 mov	 eax, DWORD PTR [edi]
  0004a	89 00		 mov	 DWORD PTR [eax], eax
  0004c	8b 07		 mov	 eax, DWORD PTR [edi]
  0004e	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00051	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1448 : 			return (begin());

  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005f	89 08		 mov	 DWORD PTR [eax], ecx

; 1455 : 			}
; 1456 : 		}

  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
$LN299@erase:

; 1449 : 			}
; 1450 : 		else
; 1451 : 			{	// partial erase, one at a time
; 1452 : 			while (_First != _Last)

  00073	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00076	74 58		 je	 SHORT $LN3@erase
$LL2@erase:

; 1453 : 				erase(_First++);

  00078	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007c	8b c8		 mov	 ecx, eax
  0007e	75 3c		 jne	 SHORT $LN256@erase
  00080	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00083	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00087	75 14		 jne	 SHORT $LN301@erase
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008f	75 28		 jne	 SHORT $LN252@erase
$LL267@erase:
  00091	8b d0		 mov	 edx, eax
  00093	8b 02		 mov	 eax, DWORD PTR [edx]
  00095	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00099	74 f6		 je	 SHORT $LL267@erase
  0009b	eb 1c		 jmp	 SHORT $LN252@erase
$LN301@erase:
  0009d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a0	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000a4	75 13		 jne	 SHORT $LN252@erase
$LL251@erase:
  000a6	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000a9	75 0e		 jne	 SHORT $LN252@erase
  000ab	8b c2		 mov	 eax, edx
  000ad	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  000b0	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000b3	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000b7	74 ed		 je	 SHORT $LL251@erase
$LN252@erase:
  000b9	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN256@erase:
  000bc	51		 push	 ecx
  000bd	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000c0	8b cf		 mov	 ecx, edi
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
  000c8	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000cb	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  000ce	75 a8		 jne	 SHORT $LL2@erase
$LN3@erase:

; 1454 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  000d0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d3	89 01		 mov	 DWORD PTR [ecx], eax
  000d5	8b c1		 mov	 eax, ecx

; 1455 : 			}
; 1456 : 		}

  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5f		 pop	 edi
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z$16:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1202 = -16						; size = 4
tv1201 = -12						; size = 4
tv1203 = -8						; size = 4
tv1197 = -8						; size = 4
tv1176 = -8						; size = 4
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase, COMDAT
; _this$ = ecx

; 1259 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1260 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1261 : 		if (_Where._Getcont() != &this->_Get_data()
; 1262 : 			|| this->_Isnil(_Where._Mynode()))
; 1263 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1264 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1265 : 		++_Where;	// save successor iterator for return
; 1266 : 		_Orphan_ptr(_Erasednode);
; 1267 : 
; 1268 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1269 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	56		 push	 esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1270 : 		++_Where;	// save successor iterator for return

  0000e	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00011	57		 push	 edi
  00012	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,std::_Iterator_base0>::operator++

; 1271 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1272 : 
; 1273 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1274 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1275 : 		_Nodeptr _Pnode = _Erasednode;
; 1276 : 
; 1277 : 		if (this->_Isnil(this->_Left(_Pnode)))

  00017	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00019	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0001d	74 05		 je	 SHORT $LN5@erase

; 1278 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  0001f	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1279 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00022	eb 1b		 jmp	 SHORT $LN704@erase
$LN5@erase:
  00024	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00027	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002b	74 04		 je	 SHORT $LN7@erase

; 1280 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  0002d	8b f9		 mov	 edi, ecx

; 1281 : 		else

  0002f	eb 0e		 jmp	 SHORT $LN704@erase
$LN7@erase:

; 1282 : 			{	// two subtrees, must lift successor node to replace erased
; 1283 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00031	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1284 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00034	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1285 : 			}
; 1286 : 
; 1287 : 		if (_Pnode == _Erasednode)

  00037	3b d3		 cmp	 edx, ebx
  00039	0f 85 87 00 00
	00		 jne	 $LN9@erase
$LN704@erase:

; 1288 : 			{	// at most one subtree, relink it
; 1289 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1290 : 			if (!this->_Isnil(_Fixnode))

  0003f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00043	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00046	75 03		 jne	 SHORT $LN11@erase

; 1291 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00048	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 1292 : 
; 1293 : 			if (_Root() == _Erasednode)

  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00053	75 05		 jne	 SHORT $LN12@erase

; 1294 : 				_Root() = _Fixnode;	// link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1295 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00058	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005c	75 04		 jne	 SHORT $LN14@erase

; 1296 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 1297 : 			else

  00060	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1298 : 				this->_Right(_Fixnodeparent) =

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 1299 : 					_Fixnode;	// link down to right
; 1300 : 
; 1301 : 			if (_Lmost() == _Erasednode)

  00065	8b 02		 mov	 eax, DWORD PTR [edx]
  00067	39 18		 cmp	 DWORD PTR [eax], ebx
  00069	75 23		 jne	 SHORT $LN16@erase

; 1302 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@erase
  00071	8b ce		 mov	 ecx, esi
  00073	eb 17		 jmp	 SHORT $LN43@erase
$LN42@erase:
  00075	8b 07		 mov	 eax, DWORD PTR [edi]
  00077	8b cf		 mov	 ecx, edi
  00079	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007d	75 0b		 jne	 SHORT $LN166@erase
  0007f	90		 npad	 1
$LL165@erase:
  00080	8b c8		 mov	 ecx, eax
  00082	8b 01		 mov	 eax, DWORD PTR [ecx]
  00084	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00088	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008a	8b 02		 mov	 eax, DWORD PTR [edx]
$LN43@erase:
  0008c	89 08		 mov	 DWORD PTR [eax], ecx
$LN16@erase:

; 1303 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1304 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1305 : 
; 1306 : 			if (_Rmost() == _Erasednode)

  0008e	8b 02		 mov	 eax, DWORD PTR [edx]
  00090	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  00093	0f 85 89 00 00
	00		 jne	 $LN373@erase

; 1307 : 				_Rmost() = this->_Isnil(_Fixnode)

  00099	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009d	74 0a		 je	 SHORT $LN44@erase
  0009f	8b ce		 mov	 ecx, esi
  000a1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1308 : 					? _Fixnodeparent	// largest is parent of erased node
; 1309 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1310 : 			}
; 1311 : 		else

  000a4	e9 79 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 1307 : 				_Rmost() = this->_Isnil(_Fixnode)

  000a9	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ac	8b cf		 mov	 ecx, edi
  000ae	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b2	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:
  000b4	8b c8		 mov	 ecx, eax
  000b6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000b9	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000bd	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1308 : 					? _Fixnodeparent	// largest is parent of erased node
; 1309 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1310 : 			}
; 1311 : 		else

  000c4	eb 5c		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1312 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1313 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c6	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1314 : 				_Pnode;	// link left up
; 1315 : 			this->_Left(_Pnode) =

  000c9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cb	89 02		 mov	 DWORD PTR [edx], eax

; 1316 : 				this->_Left(_Erasednode);	// link successor down
; 1317 : 
; 1318 : 			if (_Pnode == this->_Right(_Erasednode))

  000cd	3b 53 08	 cmp	 edx, DWORD PTR [ebx+8]
  000d0	75 04		 jne	 SHORT $LN18@erase

; 1319 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d2	8b f2		 mov	 esi, edx

; 1320 : 			else

  000d4	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1321 : 				{	// successor further down, link in place of erased
; 1322 : 				_Fixnodeparent =
; 1323 : 					this->_Parent(_Pnode);	// parent is successor's
; 1324 : 				if (!this->_Isnil(_Fixnode))

  000d6	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000da	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000dd	75 03		 jne	 SHORT $LN20@erase

; 1325 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000df	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1326 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e2	89 3e		 mov	 DWORD PTR [esi], edi

; 1327 : 				this->_Right(_Pnode) =

  000e4	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000e7	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1328 : 					this->_Right(_Erasednode);	// link next down
; 1329 : 				this->_Parent(this->_Right(_Erasednode)) =

  000ea	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000ed	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 1330 : 					_Pnode;	// right up
; 1331 : 				}
; 1332 : 
; 1333 : 			if (_Root() == _Erasednode)

  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f5	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000f8	75 05		 jne	 SHORT $LN21@erase

; 1334 : 				_Root() = _Pnode;	// link down from root

  000fa	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1335 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fd	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:
  000ff	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00102	39 18		 cmp	 DWORD PTR [eax], ebx
  00104	75 04		 jne	 SHORT $LN23@erase

; 1336 : 				this->_Left(this->_Parent(_Erasednode)) =

  00106	89 10		 mov	 DWORD PTR [eax], edx

; 1337 : 					_Pnode;	// link down to left
; 1338 : 			else

  00108	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1339 : 				this->_Right(this->_Parent(_Erasednode)) =

  0010a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1340 : 					_Pnode;	// link down to right
; 1341 : 
; 1342 : 			this->_Parent(_Pnode) =

  0010d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00110	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1343 : 				this->_Parent(_Erasednode);	// link successor up
; 1344 : 			_STD swap(this->_Color(_Pnode),

  00113	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00116	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00119	88 42 0c	 mov	 BYTE PTR [edx+12], al
  0011c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0011f	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN373@erase:

; 1345 : 				this->_Color(_Erasednode));	// recolor it
; 1346 : 			}
; 1347 : 
; 1348 : 		if (this->_Color(_Erasednode) == this->_Black)

  00122	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00126	0f 85 f2 00 00
	00		 jne	 $LN25@erase

; 1349 : 			{	// erasing black link, must recolor/rebalance tree
; 1350 : 			for (; _Fixnode != _Root()
; 1351 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012c	8b 02		 mov	 eax, DWORD PTR [edx]
  0012e	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00131	0f 84 e3 00 00
	00		 je	 $LN3@erase
  00137	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	89 75 f4	 mov	 DWORD PTR tv1201[ebp], esi
  00147	89 75 f8	 mov	 DWORD PTR tv1203[ebp], esi
  0014a	89 75 f0	 mov	 DWORD PTR tv1202[ebp], esi
  0014d	0f 85 c7 00 00
	00		 jne	 $LN3@erase

; 1353 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00153	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00155	3b f9		 cmp	 edi, ecx
  00157	75 74		 jne	 SHORT $LN26@erase

; 1354 : 					{	// fixup left subtree
; 1355 : 					_Pnode = this->_Right(_Fixnodeparent);

  00159	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1356 : 					if (this->_Color(_Pnode) == this->_Red)

  0015c	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00160	75 16		 jne	 SHORT $LN28@erase

; 1357 : 						{	// rotate red up from right subtree
; 1358 : 						this->_Color(_Pnode) = this->_Black;

  00162	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1359 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1360 : 						_Lrotate(_Fixnodeparent);

  00166	8b ca		 mov	 ecx, edx
  00168	56		 push	 esi
  00169	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  0016d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate

; 1361 : 						_Pnode = this->_Right(_Fixnodeparent);

  00172	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00175	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN28@erase:

; 1362 : 						}
; 1363 : 
; 1364 : 					if (this->_Isnil(_Pnode))

  00178	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0017c	0f 85 81 00 00
	00		 jne	 $LN2@erase

; 1365 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1366 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1367 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00182	8b 01		 mov	 eax, DWORD PTR [ecx]
  00184	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00188	75 09		 jne	 SHORT $LN31@erase
  0018a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018d	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00191	74 6c		 je	 SHORT $LN707@erase
$LN31@erase:

; 1368 : 						{	// redden right subtree with black children
; 1369 : 						this->_Color(_Pnode) = this->_Red;
; 1370 : 						_Fixnode = _Fixnodeparent;
; 1371 : 						}
; 1372 : 					else
; 1373 : 						{	// must rearrange right subtree
; 1374 : 						if (this->_Color(this->_Right(_Pnode))
; 1375 : 							== this->_Black)

  00193	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00196	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0019a	75 15		 jne	 SHORT $LN33@erase

; 1376 : 							{	// rotate red up from left sub-subtree
; 1377 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0019c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1378 : 							this->_Color(_Pnode) = this->_Red;
; 1379 : 							_Rrotate(_Pnode);

  0019e	51		 push	 ecx
  0019f	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  001a7	8b ca		 mov	 ecx, edx
  001a9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate

; 1380 : 							_Pnode = this->_Right(_Fixnodeparent);

  001ae	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1381 : 							}
; 1382 : 
; 1383 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001b1	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001b4	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1384 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001b7	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1385 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001bb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1386 : 						_Lrotate(_Fixnodeparent);

  001be	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001c1	56		 push	 esi
  001c2	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001c6	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate

; 1387 : 						break;	// tree now recolored/rebalanced

  001cb	eb 4d		 jmp	 SHORT $LN3@erase
$LN26@erase:

; 1388 : 						}
; 1389 : 					}
; 1390 : 				else
; 1391 : 					{	// fixup right subtree
; 1392 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1393 : 					if (this->_Color(_Pnode) == this->_Red)

  001cd	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d1	75 15		 jne	 SHORT $LN34@erase

; 1394 : 						{	// rotate red up from left subtree
; 1395 : 						this->_Color(_Pnode) = this->_Black;

  001d3	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1396 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1397 : 						_Rrotate(_Fixnodeparent);

  001d7	8b ca		 mov	 ecx, edx
  001d9	56		 push	 esi
  001da	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001de	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate

; 1398 : 						_Pnode = this->_Left(_Fixnodeparent);

  001e3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001e5	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN34@erase:

; 1399 : 						}
; 1400 : 
; 1401 : 					if (this->_Isnil(_Pnode))

  001e8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001ec	75 15		 jne	 SHORT $LN2@erase

; 1402 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1403 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1404 : 						this->_Black
; 1405 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ee	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001f1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f5	75 57		 jne	 SHORT $LN37@erase
  001f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001fd	75 4f		 jne	 SHORT $LN37@erase
$LN707@erase:

; 1406 : 						{	// redden left subtree with black children
; 1407 : 						this->_Color(_Pnode) = this->_Red;

  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@erase:

; 1349 : 			{	// erasing black link, must recolor/rebalance tree
; 1350 : 			for (; _Fixnode != _Root()
; 1351 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	8b 02		 mov	 eax, DWORD PTR [edx]
  00205	8b 4d f4	 mov	 ecx, DWORD PTR tv1201[ebp]

; 1352 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00208	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0020b	8b 7d f8	 mov	 edi, DWORD PTR tv1203[ebp]
  0020e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00211	0f 85 29 ff ff
	ff		 jne	 $LL4@erase
  00217	8b 7d f0	 mov	 edi, DWORD PTR tv1202[ebp]
$LN3@erase:

; 1424 : 						break;	// tree now recolored/rebalanced
; 1425 : 						}
; 1426 : 					}
; 1427 : 
; 1428 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0021a	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:

; 1429 : 			}
; 1430 : 
; 1431 : 		this->_Getal().destroy(

  0021e	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
  00221	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice

; 1432 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1433 : 
; 1434 : 		this->_Getal().deallocate(_Erasednode, 1);

  00226	53		 push	 ebx
  00227	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1435 : 
; 1436 : 		if (0 < this->_Mysize())

  0022c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0022f	83 c4 04	 add	 esp, 4
  00232	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00235	5f		 pop	 edi
  00236	5e		 pop	 esi
  00237	5b		 pop	 ebx
  00238	85 c0		 test	 eax, eax
  0023a	74 04		 je	 SHORT $LN706@erase

; 1437 : 			--this->_Mysize();

  0023c	48		 dec	 eax
  0023d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN706@erase:

; 1438 : 
; 1439 : 		return (iterator(_Where._Ptr,

  00240	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00243	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00246	89 08		 mov	 DWORD PTR [eax], ecx

; 1440 : 			&this->_Get_data()));	// return successor iterator
; 1441 : 		}

  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c2 08 00	 ret	 8
$LN37@erase:

; 1408 : 						_Fixnode = _Fixnodeparent;
; 1409 : 						}
; 1410 : 					else
; 1411 : 						{	// must rearrange left subtree
; 1412 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  0024e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00250	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00254	75 15		 jne	 SHORT $LN39@erase

; 1413 : 							{	// rotate red up from right sub-subtree
; 1414 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  00256	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1415 : 							this->_Color(_Pnode) = this->_Red;
; 1416 : 							_Lrotate(_Pnode);

  00259	51		 push	 ecx
  0025a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0025e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00262	8b ca		 mov	 ecx, edx
  00264	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Lrotate

; 1417 : 							_Pnode = this->_Left(_Fixnodeparent);

  00269	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1418 : 							}
; 1419 : 
; 1420 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0026b	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  0026e	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1421 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00271	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1422 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00275	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1423 : 						_Rrotate(_Fixnodeparent);

  00277	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0027a	56		 push	 esi
  0027b	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0027f	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Rrotate
  00284	eb 94		 jmp	 SHORT $LN3@erase
?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1176 : 		return (this->_Getal().max_size());

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 1177 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::size, COMDAT
; _this$ = ecx

; 1171 : 		return (this->_Mysize());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1172 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::end, COMDAT
; _this$ = ecx

; 1120 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1121 : 		return (iterator(this->_Myhead(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1122 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::begin, COMDAT
; _this$ = ecx

; 1110 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1111 : 		return (iterator(_Lmost(), &this->_Get_data()));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1112 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 1090 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 1091 : 		_Tidy();

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	50		 push	 eax
  00029	ff 30		 push	 DWORD PTR [eax]
  0002b	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::erase

; 1092 : 		}

  00034	ff 36		 push	 DWORD PTR [esi]
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	5e		 pop	 esi
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 1004 : 		{	// construct empty tree from comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1005 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Min, COMDAT

; 614  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 615  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 616  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 617  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 618  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Max, COMDAT

; 607  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 608  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 609  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 610  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 611  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUHostDevice@@@2@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUHostDevice@@@2@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Myval, COMDAT

; 602  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 604  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUHostDevice@@@2@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Right, COMDAT

; 597  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 598  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 599  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Parent, COMDAT

; 592  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 594  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Left, COMDAT

; 587  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 589  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Isnil, COMDAT

; 582  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 584  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Color, COMDAT

; 577  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 578  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 579  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >, COMDAT
; _this$ = ecx

; 567  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 570  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 238  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 9c c0	 setl	 al

; 239  : 		return (_Left < _Right);
; 240  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 945  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 946  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 940  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 941  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 935  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 936  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 930  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 931  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 925  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 926  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 920  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 921  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 915  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 916  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 910  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 911  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 905  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 906  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 900  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 901  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 868  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 869  : 		_Getal().destroy(
; 870  : 			_STD addressof(_Left(_Pnode)));
; 871  : 		_Getal().destroy(
; 872  : 			_STD addressof(_Parent(_Pnode)));
; 873  : 		_Getal().destroy(
; 874  : 			_STD addressof(_Right(_Pnode)));
; 875  : 		_Getal().deallocate(_Pnode, 1);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 876  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 849  : 		{	// allocate a non-value node

  00000	56		 push	 esi

; 850  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00001	68 88 00 00 00	 push	 136			; 00000088H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	8b d0		 mov	 edx, eax
  0000f	83 c4 04	 add	 esp, 4
  00012	85 d2		 test	 edx, edx
  00014	74 1e		 je	 SHORT $LN199@Buynode0

; 851  : 
; 852  : 		_TRY_BEGIN
; 853  : 		_Getal().construct(

  00016	8b 06		 mov	 eax, DWORD PTR [esi]

; 854  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 855  : 		_Getal().construct(

  00018	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  0001b	89 02		 mov	 DWORD PTR [edx], eax
  0001d	85 c9		 test	 ecx, ecx
  0001f	74 04		 je	 SHORT $LN120@Buynode0
  00021	8b 06		 mov	 eax, DWORD PTR [esi]
  00023	89 01		 mov	 DWORD PTR [ecx], eax
$LN120@Buynode0:

; 856  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 857  : 		_Getal().construct(

  00025	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
  00028	85 c9		 test	 ecx, ecx
  0002a	74 04		 je	 SHORT $LN167@Buynode0
  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax
$LN167@Buynode0:

; 858  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 859  : 		_CATCH_ALL
; 860  : 		_Getal().deallocate(_Pnode, 1);
; 861  : 		_RERAISE;
; 862  : 		_CATCH_END
; 863  : 
; 864  : 		return (_Pnode);

  00030	8b c2		 mov	 eax, edx
  00032	5e		 pop	 esi

; 865  : 		}

  00033	c3		 ret	 0
$LN199@Buynode0:

; 850  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00034	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN201@Buynode0:
$LN198@Buynode0:
  00039	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 838  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 839  : 		_Getal().destroy(
; 840  : 			_STD addressof(_Left(_Pnode)));
; 841  : 		_Getal().destroy(
; 842  : 			_STD addressof(_Parent(_Pnode)));
; 843  : 		_Getal().destroy(
; 844  : 			_STD addressof(_Right(_Pnode)));
; 845  : 		_Getal().deallocate(_Pnode, 1);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 846  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx

; 818  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00000	68 88 00 00 00	 push	 136			; 00000088H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 819  : 
; 820  : 		_TRY_BEGIN
; 821  : 		_Getal().construct(
; 822  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 823  : 		_Getal().construct(

  00015	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 02		 je	 SHORT $LN96@Buyheadnod
  0001e	89 01		 mov	 DWORD PTR [ecx], eax
$LN96@Buyheadnod:

; 824  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 825  : 		_Getal().construct(

  00020	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00023	85 c9		 test	 ecx, ecx
  00025	74 02		 je	 SHORT $LN131@Buyheadnod
  00027	89 01		 mov	 DWORD PTR [ecx], eax
$LN131@Buyheadnod:

; 826  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 827  : 		_CATCH_ALL
; 828  : 		_Getal().deallocate(_Pnode, 1);
; 829  : 		_RERAISE;
; 830  : 		_CATCH_END
; 831  : 
; 832  : 		_Color(_Pnode) = _Black;

  00029	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 833  : 		_Isnil(_Pnode) = true;
; 834  : 		return (_Pnode);
; 835  : 		}

  0002f	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 726  : 		_Freeheadnode(_Myhead());

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 727  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 720  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 721  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 722  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct from comparator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 705  : 		_Construct();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 706  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Min, COMDAT

; 697  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 698  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:
  00010	8b c8		 mov	 ecx, eax
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:
  0001a	8b c1		 mov	 eax, ecx

; 699  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Max, COMDAT

; 692  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:
  00010	8b c8		 mov	 ecx, eax
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:
  0001b	8b c1		 mov	 eax, ecx

; 694  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHUHostDevice@@@2@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHUHostDevice@@@2@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myval, COMDAT

; 687  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 688  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 689  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHUHostDevice@@@2@PAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Right, COMDAT

; 682  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 683  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 684  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Parent, COMDAT

; 677  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 678  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 679  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Left, COMDAT

; 672  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 673  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 674  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Isnil, COMDAT

; 667  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 668  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 669  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Color, COMDAT

; 662  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 663  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 664  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 1009 : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 988  : 		}

  00003	5d		 pop	 ebp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		}

  00003	5d		 pop	 ebp

; 976  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 870  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 e1 e1 e1 01	 mov	 eax, 31580641		; 01e1e1e1H

; 750  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d e1 e1 e1 01	 cmp	 eax, 31580641		; 01e1e1e1H
  00013	77 3f		 ja	 SHORT $LN14@allocate
  00015	69 c0 88 00 00
	00		 imul	 eax, eax, 136
  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate
  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4
  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate
  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:
  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:
  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:
  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:
  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d e1 e1 e1 01	 cmp	 eax, 31580641		; 01e1e1e1H
  0000e	77 34		 ja	 SHORT $LN13@deallocate
  00010	69 c0 88 00 00
	00		 imul	 eax, eax, 136
  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate
  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate
  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate
  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate
  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate
  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 721  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:
  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:
  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:
  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >::allocator<std::_Tree_node<std::pair<int const ,HostDevice>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ
text$yd	SEGMENT
??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ PROC	; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'devices'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00005	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ ENDP	; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'devices''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T2 = -428						; size = 4
$T3 = -424						; size = 24
$T4 = -400						; size = 24
$T5 = -376						; size = 24
$T6 = -352						; size = 24
$T7 = -328						; size = 24
$T8 = -304						; size = 24
$T9 = -280						; size = 24
$T10 = -256						; size = 24
$T11 = -232						; size = 24
$T12 = -208						; size = 24
$T13 = -184						; size = 24
$T14 = -160						; size = 24
$T15 = -136						; size = 24
$T16 = -112						; size = 24
$T17 = -88						; size = 24
$T18 = -64						; size = 24
$T19 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GetDecoyOsInstructionsString, COMDAT

; 3462 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 01 00
	00		 sub	 esp, 416		; 000001a0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 3463 : 	// This huge string is divided into smaller portions to make it easier for translators to
; 3464 : 	// re-translate it when a minor modification is made to it (the whole huge string will not be
; 3465 : 	// reverted to English, so they will have to translate only a small portion of it).
; 3466 : 	return (wstring (

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IJAMLOFF@DECOY_OS_INSTRUCTIONS_PORTION_1?$AA@
  00035	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0003f	e8 00 00 00 00	 call	 _GetString
  00044	8b d0		 mov	 edx, eax
  00046	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 7
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 0
  00056	83 c4 04	 add	 esp, 4
  00059	66 89 45 d8	 mov	 WORD PTR $T19[ebp], ax
  0005d	66 39 02	 cmp	 WORD PTR [edx], ax
  00060	74 14		 je	 SHORT $LN135@GetDecoyOs
$LN134@GetDecoyOs:
  00062	8b c2		 mov	 eax, edx
  00064	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
$LL1887@GetDecoyOs:
  00067	66 8b 08	 mov	 cx, WORD PTR [eax]
  0006a	83 c0 02	 add	 eax, 2
  0006d	66 85 c9	 test	 cx, cx
  00070	75 f5		 jne	 SHORT $LL1887@GetDecoyOs
  00072	2b c6		 sub	 eax, esi
  00074	d1 f8		 sar	 eax, 1
$LN135@GetDecoyOs:
  00076	50		 push	 eax
  00077	52		 push	 edx
  00078	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  0007b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KCCBONJG@DECOY_OS_INSTRUCTIONS_PORTION_2?$AA@
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	e8 00 00 00 00	 call	 _GetString
  00091	50		 push	 eax
  00092	8d 45 d8	 lea	 eax, DWORD PTR $T19[ebp]
  00095	50		 push	 eax
  00096	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a2	8b f0		 mov	 esi, eax
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LLDKNMNH@DECOY_OS_INSTRUCTIONS_PORTION_3?$AA@
  000a9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ad	e8 00 00 00 00	 call	 _GetString
  000b2	50		 push	 eax
  000b3	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  000b9	56		 push	 esi
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c0	8b f0		 mov	 esi, eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PEHLEKBA@DECOY_OS_INSTRUCTIONS_PORTION_4?$AA@
  000c7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000cb	e8 00 00 00 00	 call	 _GetString
  000d0	50		 push	 eax
  000d1	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000d7	56		 push	 esi
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000de	8b f0		 mov	 esi, eax
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@ONGAHLFB@DECOY_OS_INSTRUCTIONS_PORTION_5?$AA@
  000e5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000e9	e8 00 00 00 00	 call	 _GetString
  000ee	50		 push	 eax
  000ef	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  000f5	56		 push	 esi
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000fc	83 c4 40	 add	 esp, 64			; 00000040H
  000ff	8b f0		 mov	 esi, eax
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MGENCIJC@DECOY_OS_INSTRUCTIONS_PORTION_6?$AA@
  00106	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0010a	e8 00 00 00 00	 call	 _GetString
  0010f	50		 push	 eax
  00110	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00116	56		 push	 esi
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0011d	8b f0		 mov	 esi, eax
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPFGBJND@DECOY_OS_INSTRUCTIONS_PORTION_7?$AA@
  00124	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00128	e8 00 00 00 00	 call	 _GetString
  0012d	50		 push	 eax
  0012e	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00134	56		 push	 esi
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0013b	8b f0		 mov	 esi, eax
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FIMOAFBM@DECOY_OS_INSTRUCTIONS_PORTION_8?$AA@
  00142	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00146	e8 00 00 00 00	 call	 _GetString
  0014b	50		 push	 eax
  0014c	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00152	56		 push	 esi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00159	8b f0		 mov	 esi, eax
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EBNFDEFN@DECOY_OS_INSTRUCTIONS_PORTION_9?$AA@
  00160	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00164	e8 00 00 00 00	 call	 _GetString
  00169	50		 push	 eax
  0016a	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00170	56		 push	 esi
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00177	83 c4 40	 add	 esp, 64			; 00000040H
  0017a	8b f0		 mov	 esi, eax
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MEMOJPDG@DECOY_OS_INSTRUCTIONS_PORTION_10@
  00181	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00185	e8 00 00 00 00	 call	 _GetString
  0018a	50		 push	 eax
  0018b	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00191	56		 push	 esi
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00198	8b f0		 mov	 esi, eax
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NNNFKOHH@DECOY_OS_INSTRUCTIONS_PORTION_11@
  0019f	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  001a3	e8 00 00 00 00	 call	 _GetString
  001a8	50		 push	 eax
  001a9	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  001af	56		 push	 esi
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001b6	8b f0		 mov	 esi, eax
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PGPIPNLE@DECOY_OS_INSTRUCTIONS_PORTION_12@
  001bd	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  001c1	e8 00 00 00 00	 call	 _GetString
  001c6	50		 push	 eax
  001c7	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  001cd	56		 push	 esi
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001d4	8b f0		 mov	 esi, eax
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OPODMMPF@DECOY_OS_INSTRUCTIONS_PORTION_13@
  001db	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  001df	e8 00 00 00 00	 call	 _GetString
  001e4	50		 push	 eax
  001e5	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  001eb	56		 push	 esi
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001f2	83 c4 40	 add	 esp, 64			; 00000040H
  001f5	8b f0		 mov	 esi, eax
  001f7	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KAKCFKDC@DECOY_OS_INSTRUCTIONS_PORTION_14@
  001fc	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00200	e8 00 00 00 00	 call	 _GetString
  00205	50		 push	 eax
  00206	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0020c	56		 push	 esi
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00213	8b f0		 mov	 esi, eax
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LJLJGLHD@DECOY_OS_INSTRUCTIONS_PORTION_15@
  0021a	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0021e	e8 00 00 00 00	 call	 _GetString
  00223	50		 push	 eax
  00224	8d 45 90	 lea	 eax, DWORD PTR $T16[ebp]
  00227	56		 push	 esi
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0022e	8b f0		 mov	 esi, eax
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@JCJEDILA@DECOY_OS_INSTRUCTIONS_PORTION_16@
  00235	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00239	e8 00 00 00 00	 call	 _GetString
  0023e	50		 push	 eax
  0023f	8d 45 a8	 lea	 eax, DWORD PTR $T17[ebp]
  00242	56		 push	 esi
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00249	8b f0		 mov	 esi, eax
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@ILIPAJPB@DECOY_OS_INSTRUCTIONS_PORTION_17@
  00250	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00254	e8 00 00 00 00	 call	 _GetString
  00259	50		 push	 eax
  0025a	8d 45 c0	 lea	 eax, DWORD PTR $T18[ebp]
  0025d	56		 push	 esi
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00264	83 c4 40	 add	 esp, 64			; 00000040H
  00267	8b f0		 mov	 esi, eax
  00269	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MBHBFDO@DECOY_OS_INSTRUCTIONS_PORTION_18@
  0026e	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00272	e8 00 00 00 00	 call	 _GetString
  00277	50		 push	 eax
  00278	56		 push	 esi
  00279	57		 push	 edi
  0027a	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0027f	8b 45 d4	 mov	 eax, DWORD PTR $T18[ebp+20]
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	83 f8 08	 cmp	 eax, 8
  00288	72 0d		 jb	 SHORT $LN142@GetDecoyOs
  0028a	40		 inc	 eax
  0028b	8d 4d c0	 lea	 ecx, DWORD PTR $T18[ebp]
  0028e	50		 push	 eax
  0028f	ff 75 c0	 push	 DWORD PTR $T18[ebp]
  00292	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN142@GetDecoyOs:
  00297	33 c0		 xor	 eax, eax
  00299	c7 45 d4 07 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 7
  002a0	66 89 45 c0	 mov	 WORD PTR $T18[ebp], ax
  002a4	8b 45 bc	 mov	 eax, DWORD PTR $T17[ebp+20]
  002a7	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 0
  002ae	83 f8 08	 cmp	 eax, 8
  002b1	72 0d		 jb	 SHORT $LN245@GetDecoyOs
  002b3	40		 inc	 eax
  002b4	8d 4d a8	 lea	 ecx, DWORD PTR $T17[ebp]
  002b7	50		 push	 eax
  002b8	ff 75 a8	 push	 DWORD PTR $T17[ebp]
  002bb	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN245@GetDecoyOs:
  002c0	33 c0		 xor	 eax, eax
  002c2	c7 45 bc 07 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 7
  002c9	66 89 45 a8	 mov	 WORD PTR $T17[ebp], ax
  002cd	8b 45 a4	 mov	 eax, DWORD PTR $T16[ebp+20]
  002d0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 0
  002d7	83 f8 08	 cmp	 eax, 8
  002da	72 0d		 jb	 SHORT $LN348@GetDecoyOs
  002dc	40		 inc	 eax
  002dd	8d 4d 90	 lea	 ecx, DWORD PTR $T16[ebp]
  002e0	50		 push	 eax
  002e1	ff 75 90	 push	 DWORD PTR $T16[ebp]
  002e4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN348@GetDecoyOs:
  002e9	33 c0		 xor	 eax, eax
  002eb	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 7
  002f2	66 89 45 90	 mov	 WORD PTR $T16[ebp], ax
  002f6	8b 45 8c	 mov	 eax, DWORD PTR $T15[ebp+20]
  002f9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 0
  00300	83 f8 08	 cmp	 eax, 8
  00303	72 13		 jb	 SHORT $LN451@GetDecoyOs
  00305	40		 inc	 eax
  00306	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  0030c	50		 push	 eax
  0030d	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T15[ebp]
  00313	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN451@GetDecoyOs:
  00318	33 c0		 xor	 eax, eax
  0031a	c7 45 8c 07 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 7
  00321	66 89 85 78 ff
	ff ff		 mov	 WORD PTR $T15[ebp], ax
  00328	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T14[ebp+20]
  0032e	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 0
  00335	83 f8 08	 cmp	 eax, 8
  00338	72 13		 jb	 SHORT $LN554@GetDecoyOs
  0033a	40		 inc	 eax
  0033b	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00341	50		 push	 eax
  00342	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T14[ebp]
  00348	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN554@GetDecoyOs:
  0034d	33 c0		 xor	 eax, eax
  0034f	c7 85 74 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T14[ebp+20], 7
  00359	66 89 85 60 ff
	ff ff		 mov	 WORD PTR $T14[ebp], ax
  00360	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T13[ebp+20]
  00366	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+16], 0
  00370	83 f8 08	 cmp	 eax, 8
  00373	72 13		 jb	 SHORT $LN657@GetDecoyOs
  00375	40		 inc	 eax
  00376	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0037c	50		 push	 eax
  0037d	ff b5 48 ff ff
	ff		 push	 DWORD PTR $T13[ebp]
  00383	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN657@GetDecoyOs:
  00388	33 c0		 xor	 eax, eax
  0038a	c7 85 5c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T13[ebp+20], 7
  00394	66 89 85 48 ff
	ff ff		 mov	 WORD PTR $T13[ebp], ax
  0039b	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR $T12[ebp+20]
  003a1	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+16], 0
  003ab	83 f8 08	 cmp	 eax, 8
  003ae	72 13		 jb	 SHORT $LN760@GetDecoyOs
  003b0	40		 inc	 eax
  003b1	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  003b7	50		 push	 eax
  003b8	ff b5 30 ff ff
	ff		 push	 DWORD PTR $T12[ebp]
  003be	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN760@GetDecoyOs:
  003c3	33 c0		 xor	 eax, eax
  003c5	c7 85 44 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 7
  003cf	66 89 85 30 ff
	ff ff		 mov	 WORD PTR $T12[ebp], ax
  003d6	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T11[ebp+20]
  003dc	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 0
  003e6	83 f8 08	 cmp	 eax, 8
  003e9	72 13		 jb	 SHORT $LN863@GetDecoyOs
  003eb	40		 inc	 eax
  003ec	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  003f2	50		 push	 eax
  003f3	ff b5 18 ff ff
	ff		 push	 DWORD PTR $T11[ebp]
  003f9	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN863@GetDecoyOs:
  003fe	33 c0		 xor	 eax, eax
  00400	c7 85 2c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T11[ebp+20], 7
  0040a	66 89 85 18 ff
	ff ff		 mov	 WORD PTR $T11[ebp], ax
  00411	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T10[ebp+20]
  00417	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T11[ebp+16], 0
  00421	83 f8 08	 cmp	 eax, 8
  00424	72 13		 jb	 SHORT $LN966@GetDecoyOs
  00426	40		 inc	 eax
  00427	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0042d	50		 push	 eax
  0042e	ff b5 00 ff ff
	ff		 push	 DWORD PTR $T10[ebp]
  00434	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN966@GetDecoyOs:
  00439	33 c0		 xor	 eax, eax
  0043b	c7 85 14 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T10[ebp+20], 7
  00445	66 89 85 00 ff
	ff ff		 mov	 WORD PTR $T10[ebp], ax
  0044c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR $T9[ebp+20]
  00452	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+16], 0
  0045c	83 f8 08	 cmp	 eax, 8
  0045f	72 13		 jb	 SHORT $LN1069@GetDecoyOs
  00461	40		 inc	 eax
  00462	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00468	50		 push	 eax
  00469	ff b5 e8 fe ff
	ff		 push	 DWORD PTR $T9[ebp]
  0046f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1069@GetDecoyOs:
  00474	33 c0		 xor	 eax, eax
  00476	c7 85 fc fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T9[ebp+20], 7
  00480	66 89 85 e8 fe
	ff ff		 mov	 WORD PTR $T9[ebp], ax
  00487	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+20]
  0048d	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp+16], 0
  00497	83 f8 08	 cmp	 eax, 8
  0049a	72 13		 jb	 SHORT $LN1172@GetDecoyOs
  0049c	40		 inc	 eax
  0049d	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  004a3	50		 push	 eax
  004a4	ff b5 d0 fe ff
	ff		 push	 DWORD PTR $T8[ebp]
  004aa	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1172@GetDecoyOs:
  004af	33 c0		 xor	 eax, eax
  004b1	c7 85 e4 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T8[ebp+20], 7
  004bb	66 89 85 d0 fe
	ff ff		 mov	 WORD PTR $T8[ebp], ax
  004c2	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+20]
  004c8	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp+16], 0
  004d2	83 f8 08	 cmp	 eax, 8
  004d5	72 13		 jb	 SHORT $LN1275@GetDecoyOs
  004d7	40		 inc	 eax
  004d8	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  004de	50		 push	 eax
  004df	ff b5 b8 fe ff
	ff		 push	 DWORD PTR $T7[ebp]
  004e5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1275@GetDecoyOs:
  004ea	33 c0		 xor	 eax, eax
  004ec	c7 85 cc fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T7[ebp+20], 7
  004f6	66 89 85 b8 fe
	ff ff		 mov	 WORD PTR $T7[ebp], ax
  004fd	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+20]
  00503	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+16], 0
  0050d	83 f8 08	 cmp	 eax, 8
  00510	72 13		 jb	 SHORT $LN1378@GetDecoyOs
  00512	40		 inc	 eax
  00513	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00519	50		 push	 eax
  0051a	ff b5 a0 fe ff
	ff		 push	 DWORD PTR $T6[ebp]
  00520	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1378@GetDecoyOs:
  00525	33 c0		 xor	 eax, eax
  00527	c7 85 b4 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T6[ebp+20], 7
  00531	66 89 85 a0 fe
	ff ff		 mov	 WORD PTR $T6[ebp], ax
  00538	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+20]
  0053e	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+16], 0
  00548	83 f8 08	 cmp	 eax, 8
  0054b	72 13		 jb	 SHORT $LN1481@GetDecoyOs
  0054d	40		 inc	 eax
  0054e	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00554	50		 push	 eax
  00555	ff b5 88 fe ff
	ff		 push	 DWORD PTR $T5[ebp]
  0055b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1481@GetDecoyOs:
  00560	33 c0		 xor	 eax, eax
  00562	c7 85 9c fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 7
  0056c	66 89 85 88 fe
	ff ff		 mov	 WORD PTR $T5[ebp], ax
  00573	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+20]
  00579	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0
  00583	83 f8 08	 cmp	 eax, 8
  00586	72 13		 jb	 SHORT $LN1584@GetDecoyOs
  00588	40		 inc	 eax
  00589	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0058f	50		 push	 eax
  00590	ff b5 70 fe ff
	ff		 push	 DWORD PTR $T4[ebp]
  00596	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1584@GetDecoyOs:
  0059b	33 c0		 xor	 eax, eax
  0059d	c7 85 84 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 7
  005a7	66 89 85 70 fe
	ff ff		 mov	 WORD PTR $T4[ebp], ax
  005ae	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  005b4	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0
  005be	83 f8 08	 cmp	 eax, 8
  005c1	72 13		 jb	 SHORT $LN1687@GetDecoyOs
  005c3	40		 inc	 eax
  005c4	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  005ca	50		 push	 eax
  005cb	ff b5 58 fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  005d1	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1687@GetDecoyOs:
  005d6	8b 4d ec	 mov	 ecx, DWORD PTR $T19[ebp+20]
  005d9	33 c0		 xor	 eax, eax
  005db	c7 85 6c fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 7
  005e5	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  005ef	66 89 85 58 fe
	ff ff		 mov	 WORD PTR $T3[ebp], ax
  005f6	83 f9 08	 cmp	 ecx, 8
  005f9	72 0d		 jb	 SHORT $LN1888@GetDecoyOs
  005fb	41		 inc	 ecx
  005fc	51		 push	 ecx
  005fd	ff 75 d8	 push	 DWORD PTR $T19[ebp]
  00600	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  00603	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN1888@GetDecoyOs:
  00608	8b c7		 mov	 eax, edi

; 3467 : 		GetString ("DECOY_OS_INSTRUCTIONS_PORTION_1"))
; 3468 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_2")
; 3469 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_3")
; 3470 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_4")
; 3471 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_5")
; 3472 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_6")
; 3473 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_7")
; 3474 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_8")
; 3475 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_9")
; 3476 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_10")
; 3477 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_11")
; 3478 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_12")
; 3479 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_13")
; 3480 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_14")
; 3481 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_15")
; 3482 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_16")
; 3483 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_17")
; 3484 : 		+ GetString ("DECOY_OS_INSTRUCTIONS_PORTION_18"));
; 3485 : }

  0060a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0060d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00614	59		 pop	 ecx
  00615	5f		 pop	 edi
  00616	5e		 pop	 esi
  00617	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0061a	33 cd		 xor	 ecx, ebp
  0061c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00621	8b e5		 mov	 esp, ebp
  00623	5d		 pop	 ebp
  00624	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  00008	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00013	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3:
  0001e	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4:
  00029	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5:
  00034	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6:
  0003f	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7:
  0004a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$8:
  00055	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$9:
  00060	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$10:
  0006b	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00071	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$11:
  00076	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$12:
  00081	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00087	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$13:
  0008c	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00092	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$14:
  00097	8d 4d 90	 lea	 ecx, DWORD PTR $T16[ebp]
  0009a	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$15:
  0009f	8d 4d a8	 lea	 ecx, DWORD PTR $T17[ebp]
  000a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$16:
  000a7	8d 4d c0	 lea	 ecx, DWORD PTR $T18[ebp]
  000aa	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  000af	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b3	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b6	8b 8a 54 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-428]
  000bc	33 c8		 xor	 ecx, eax
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000c6	33 c8		 xor	 ecx, eax
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  000d2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GetDecoyOsInstructionsString
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T2 = -212						; size = 4
$T3 = -208						; size = 24
$T4 = -184						; size = 24
$T5 = -160						; size = 24
$T6 = -136						; size = 24
$T7 = -112						; size = 24
$T8 = -88						; size = 24
$T9 = -64						; size = 24
$T10 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GetRescueDiskHelpString, COMDAT

; 3437 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 3438 : 	// This huge string is divided into smaller portions to make it easier for translators to
; 3439 : 	// re-translate it when a minor modification is made to it (the whole huge string will not be
; 3440 : 	// reverted to English, so they will have to translate only a small portion of it).
; 3441 : 	return (wstring (

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NAIDIDPG@RESCUE_DISK_HELP_PORTION_1?$AA@
  00035	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0003f	e8 00 00 00 00	 call	 _GetString
  00044	8b d0		 mov	 edx, eax
  00046	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 7
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0
  00056	83 c4 04	 add	 esp, 4
  00059	66 89 45 d8	 mov	 WORD PTR $T10[ebp], ax
  0005d	66 39 02	 cmp	 WORD PTR [edx], ax
  00060	74 14		 je	 SHORT $LN126@GetRescueD
$LN125@GetRescueD:
  00062	8b c2		 mov	 eax, edx
  00064	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
$LL951@GetRescueD:
  00067	66 8b 08	 mov	 cx, WORD PTR [eax]
  0006a	83 c0 02	 add	 eax, 2
  0006d	66 85 c9	 test	 cx, cx
  00070	75 f5		 jne	 SHORT $LL951@GetRescueD
  00072	2b c6		 sub	 eax, esi
  00074	d1 f8		 sar	 eax, 1
$LN126@GetRescueD:
  00076	50		 push	 eax
  00077	52		 push	 edx
  00078	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  0007b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PLKONADF@RESCUE_DISK_HELP_PORTION_2?$AA@
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	e8 00 00 00 00	 call	 _GetString
  00091	50		 push	 eax
  00092	8d 45 d8	 lea	 eax, DWORD PTR $T10[ebp]
  00095	50		 push	 eax
  00096	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a2	8b f0		 mov	 esi, eax
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OCLFOBHE@RESCUE_DISK_HELP_PORTION_3?$AA@
  000a9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ad	e8 00 00 00 00	 call	 _GetString
  000b2	50		 push	 eax
  000b3	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  000b9	56		 push	 esi
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c0	8b f0		 mov	 esi, eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KNPEHHLD@RESCUE_DISK_HELP_PORTION_4?$AA@
  000c7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000cb	e8 00 00 00 00	 call	 _GetString
  000d0	50		 push	 eax
  000d1	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000d7	56		 push	 esi
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000de	8b f0		 mov	 esi, eax
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LEOPEGPC@RESCUE_DISK_HELP_PORTION_5?$AA@
  000e5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000e9	e8 00 00 00 00	 call	 _GetString
  000ee	50		 push	 eax
  000ef	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  000f5	56		 push	 esi
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000fc	83 c4 40	 add	 esp, 64			; 00000040H
  000ff	8b f0		 mov	 esi, eax
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JPMCBFDB@RESCUE_DISK_HELP_PORTION_6?$AA@
  00106	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0010a	e8 00 00 00 00	 call	 _GetString
  0010f	50		 push	 eax
  00110	8d 45 90	 lea	 eax, DWORD PTR $T7[ebp]
  00113	56		 push	 esi
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0011a	8b f0		 mov	 esi, eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IGNJCEHA@RESCUE_DISK_HELP_PORTION_7?$AA@
  00121	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00125	e8 00 00 00 00	 call	 _GetString
  0012a	50		 push	 eax
  0012b	8d 45 a8	 lea	 eax, DWORD PTR $T8[ebp]
  0012e	56		 push	 esi
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00135	8b f0		 mov	 esi, eax
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BEBDILP@RESCUE_DISK_HELP_PORTION_8?$AA@
  0013c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00140	e8 00 00 00 00	 call	 _GetString
  00145	50		 push	 eax
  00146	8d 45 c0	 lea	 eax, DWORD PTR $T9[ebp]
  00149	56		 push	 esi
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00150	8b f0		 mov	 esi, eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BIFKAJPO@RESCUE_DISK_HELP_PORTION_9?$AA@
  00157	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0015b	e8 00 00 00 00	 call	 _GetString
  00160	50		 push	 eax
  00161	56		 push	 esi
  00162	57		 push	 edi
  00163	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00168	8b 45 d4	 mov	 eax, DWORD PTR $T9[ebp+20]
  0016b	83 c4 40	 add	 esp, 64			; 00000040H
  0016e	83 f8 08	 cmp	 eax, 8
  00171	72 0d		 jb	 SHORT $LN133@GetRescueD
  00173	40		 inc	 eax
  00174	8d 4d c0	 lea	 ecx, DWORD PTR $T9[ebp]
  00177	50		 push	 eax
  00178	ff 75 c0	 push	 DWORD PTR $T9[ebp]
  0017b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN133@GetRescueD:
  00180	33 c0		 xor	 eax, eax
  00182	c7 45 d4 07 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 7
  00189	66 89 45 c0	 mov	 WORD PTR $T9[ebp], ax
  0018d	8b 45 bc	 mov	 eax, DWORD PTR $T8[ebp+20]
  00190	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0
  00197	83 f8 08	 cmp	 eax, 8
  0019a	72 0d		 jb	 SHORT $LN236@GetRescueD
  0019c	40		 inc	 eax
  0019d	8d 4d a8	 lea	 ecx, DWORD PTR $T8[ebp]
  001a0	50		 push	 eax
  001a1	ff 75 a8	 push	 DWORD PTR $T8[ebp]
  001a4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN236@GetRescueD:
  001a9	33 c0		 xor	 eax, eax
  001ab	c7 45 bc 07 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 7
  001b2	66 89 45 a8	 mov	 WORD PTR $T8[ebp], ax
  001b6	8b 45 a4	 mov	 eax, DWORD PTR $T7[ebp+20]
  001b9	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0
  001c0	83 f8 08	 cmp	 eax, 8
  001c3	72 0d		 jb	 SHORT $LN339@GetRescueD
  001c5	40		 inc	 eax
  001c6	8d 4d 90	 lea	 ecx, DWORD PTR $T7[ebp]
  001c9	50		 push	 eax
  001ca	ff 75 90	 push	 DWORD PTR $T7[ebp]
  001cd	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN339@GetRescueD:
  001d2	33 c0		 xor	 eax, eax
  001d4	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 7
  001db	66 89 45 90	 mov	 WORD PTR $T7[ebp], ax
  001df	8b 45 8c	 mov	 eax, DWORD PTR $T6[ebp+20]
  001e2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0
  001e9	83 f8 08	 cmp	 eax, 8
  001ec	72 13		 jb	 SHORT $LN442@GetRescueD
  001ee	40		 inc	 eax
  001ef	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001f5	50		 push	 eax
  001f6	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T6[ebp]
  001fc	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN442@GetRescueD:
  00201	33 c0		 xor	 eax, eax
  00203	c7 45 8c 07 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 7
  0020a	66 89 85 78 ff
	ff ff		 mov	 WORD PTR $T6[ebp], ax
  00211	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp+20]
  00217	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  0021e	83 f8 08	 cmp	 eax, 8
  00221	72 13		 jb	 SHORT $LN545@GetRescueD
  00223	40		 inc	 eax
  00224	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0022a	50		 push	 eax
  0022b	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T5[ebp]
  00231	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN545@GetRescueD:
  00236	33 c0		 xor	 eax, eax
  00238	c7 85 74 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 7
  00242	66 89 85 60 ff
	ff ff		 mov	 WORD PTR $T5[ebp], ax
  00249	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp+20]
  0024f	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0
  00259	83 f8 08	 cmp	 eax, 8
  0025c	72 13		 jb	 SHORT $LN648@GetRescueD
  0025e	40		 inc	 eax
  0025f	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00265	50		 push	 eax
  00266	ff b5 48 ff ff
	ff		 push	 DWORD PTR $T4[ebp]
  0026c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN648@GetRescueD:
  00271	33 c0		 xor	 eax, eax
  00273	c7 85 5c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 7
  0027d	66 89 85 48 ff
	ff ff		 mov	 WORD PTR $T4[ebp], ax
  00284	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  0028a	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0
  00294	83 f8 08	 cmp	 eax, 8
  00297	72 13		 jb	 SHORT $LN751@GetRescueD
  00299	40		 inc	 eax
  0029a	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  002a0	50		 push	 eax
  002a1	ff b5 30 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  002a7	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN751@GetRescueD:
  002ac	8b 4d ec	 mov	 ecx, DWORD PTR $T10[ebp+20]
  002af	33 c0		 xor	 eax, eax
  002b1	c7 85 44 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 7
  002bb	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  002c5	66 89 85 30 ff
	ff ff		 mov	 WORD PTR $T3[ebp], ax
  002cc	83 f9 08	 cmp	 ecx, 8
  002cf	72 0d		 jb	 SHORT $LN952@GetRescueD
  002d1	41		 inc	 ecx
  002d2	51		 push	 ecx
  002d3	ff 75 d8	 push	 DWORD PTR $T10[ebp]
  002d6	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  002d9	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN952@GetRescueD:
  002de	8b c7		 mov	 eax, edi

; 3442 : 		GetString ("RESCUE_DISK_HELP_PORTION_1"))
; 3443 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_2")
; 3444 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_3")
; 3445 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_4")
; 3446 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_5")
; 3447 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_6")
; 3448 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_7")
; 3449 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_8")
; 3450 : 		+ GetString ("RESCUE_DISK_HELP_PORTION_9"));
; 3451 : }

  002e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ea	59		 pop	 ecx
  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f0	33 cd		 xor	 ecx, ebp
  002f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f7	8b e5		 mov	 esp, ebp
  002f9	5d		 pop	 ebp
  002fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  00008	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00013	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3:
  0001e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$4:
  00029	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$5:
  00034	8d 4d 90	 lea	 ecx, DWORD PTR $T7[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$6:
  0003c	8d 4d a8	 lea	 ecx, DWORD PTR $T8[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$7:
  00044	8d 4d c0	 lea	 ecx, DWORD PTR $T9[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  0004c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00050	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00053	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00063	33 c8		 xor	 ecx, eax
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  0006f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GetRescueDiskHelpString
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 2439 : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2440 : 	return (_STD move(_Left.append(_Right)));

  00004	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0000f	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00013	75 04		 jne	 SHORT $LN9@operator
  00015	33 c0		 xor	 eax, eax
  00017	eb 16		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00019	8b c2		 mov	 eax, edx
  0001b	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0001e	66 90		 npad	 2
$LL141@operator:
  00020	66 8b 08	 mov	 cx, WORD PTR [eax]
  00023	83 c0 02	 add	 eax, 2
  00026	66 85 c9	 test	 cx, cx
  00029	75 f5		 jne	 SHORT $LL141@operator
  0002b	2b c6		 sub	 eax, esi
  0002d	d1 f8		 sar	 eax, 1
$LN10@operator:
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00032	50		 push	 eax
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00039	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	33 c9		 xor	 ecx, ecx
  0003e	50		 push	 eax
  0003f	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004d	66 89 0e	 mov	 WORD PTR [esi], cx
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
  00057	8b c6		 mov	 eax, esi
  00059	5e		 pop	 esi

; 2441 : 	}

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
_TEXT	SEGMENT
$T2 = -116						; size = 4
$T3 = -112						; size = 24
$T4 = -88						; size = 24
$T5 = -64						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; GetSysEncryptionPretestInfo2String, COMDAT

; 3417 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 3418 : 	// This huge string is divided into smaller portions to make it easier for translators to
; 3419 : 	// re-translate it when a minor modification is made to it (the whole huge string will not be
; 3420 : 	// reverted to English, so they will have to translate only a small portion of it).
; 3421 : 	return (wstring (L"\n")

  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00030	6a 01		 push	 1
  00032	33 c0		 xor	 eax, eax
  00034	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  00040	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 7
  00047	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  0004e	66 89 45 d8	 mov	 WORD PTR $T6[ebp], ax
  00052	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MIGFFIJJ@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	e8 00 00 00 00	 call	 _GetString
  00068	50		 push	 eax
  00069	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0006c	50		 push	 eax
  0006d	8d 45 90	 lea	 eax, DWORD PTR $T3[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00076	8b f0		 mov	 esi, eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@ODEIALFK@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  0007d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00081	e8 00 00 00 00	 call	 _GetString
  00086	50		 push	 eax
  00087	8d 45 a8	 lea	 eax, DWORD PTR $T4[ebp]
  0008a	56		 push	 esi
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00091	8b f0		 mov	 esi, eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PKFDDKBL@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  00098	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009c	e8 00 00 00 00	 call	 _GetString
  000a1	50		 push	 eax
  000a2	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  000a5	56		 push	 esi
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ac	8b f0		 mov	 esi, eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@LFBCKMNM@SYS_ENCRYPTION_PRETEST_INFO2_POR@
  000b3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b7	e8 00 00 00 00	 call	 _GetString
  000bc	50		 push	 eax
  000bd	56		 push	 esi
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c4	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp+20]
  000c7	83 c4 40	 add	 esp, 64			; 00000040H
  000ca	83 f8 08	 cmp	 eax, 8
  000cd	72 0d		 jb	 SHORT $LN129@GetSysEncr
  000cf	40		 inc	 eax
  000d0	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  000d3	50		 push	 eax
  000d4	ff 75 c0	 push	 DWORD PTR $T5[ebp]
  000d7	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN129@GetSysEncr:
  000dc	33 c0		 xor	 eax, eax
  000de	c7 45 d4 07 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 7
  000e5	66 89 45 c0	 mov	 WORD PTR $T5[ebp], ax
  000e9	8b 45 bc	 mov	 eax, DWORD PTR $T4[ebp+20]
  000ec	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0
  000f3	83 f8 08	 cmp	 eax, 8
  000f6	72 0d		 jb	 SHORT $LN232@GetSysEncr
  000f8	40		 inc	 eax
  000f9	8d 4d a8	 lea	 ecx, DWORD PTR $T4[ebp]
  000fc	50		 push	 eax
  000fd	ff 75 a8	 push	 DWORD PTR $T4[ebp]
  00100	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN232@GetSysEncr:
  00105	33 c0		 xor	 eax, eax
  00107	c7 45 bc 07 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 7
  0010e	66 89 45 a8	 mov	 WORD PTR $T4[ebp], ax
  00112	8b 45 a4	 mov	 eax, DWORD PTR $T3[ebp+20]
  00115	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
  0011c	83 f8 08	 cmp	 eax, 8
  0011f	72 0d		 jb	 SHORT $LN335@GetSysEncr
  00121	40		 inc	 eax
  00122	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp]
  00125	50		 push	 eax
  00126	ff 75 90	 push	 DWORD PTR $T3[ebp]
  00129	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN335@GetSysEncr:
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp+20]
  00131	33 c0		 xor	 eax, eax
  00133	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 7
  0013a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  00141	66 89 45 90	 mov	 WORD PTR $T3[ebp], ax
  00145	83 f9 08	 cmp	 ecx, 8
  00148	72 0d		 jb	 SHORT $LN535@GetSysEncr
  0014a	41		 inc	 ecx
  0014b	51		 push	 ecx
  0014c	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  0014f	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00152	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN535@GetSysEncr:
  00157	8b c7		 mov	 eax, edi

; 3422 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_1")
; 3423 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_2")
; 3424 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_3")
; 3425 : 		+ GetString ("SYS_ENCRYPTION_PRETEST_INFO2_PORTION_4"));
; 3426 : }

  00159	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00163	59		 pop	 ecx
  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	33 cd		 xor	 ecx, ebp
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
  00008	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$2:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; GetSysEncryptionPretestInfo2String
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2479 : 	{	// test for string vs. NTCS equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2480 : 	return (_Left.compare(_Right) == 0);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	80 3a 00	 cmp	 BYTE PTR [edx], 0
  0000b	75 04		 jne	 SHORT $LN7@operator
  0000d	33 f6		 xor	 esi, esi
  0000f	eb 0e		 jmp	 SHORT $LN8@operator
$LN7@operator:
  00011	8b f2		 mov	 esi, edx
  00013	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL37@operator:
  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	46		 inc	 esi
  00019	84 c0		 test	 al, al
  0001b	75 f9		 jne	 SHORT $LL37@operator
  0001d	2b f1		 sub	 esi, ecx
$LN8@operator:
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00022	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00026	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
  00029	72 02		 jb	 SHORT $LN28@operator
  0002b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN28@operator:
  0002d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0002f	8b c6		 mov	 eax, esi
  00031	3b fe		 cmp	 edi, esi
  00033	0f 42 c7	 cmovb	 eax, edi
  00036	50		 push	 eax
  00037	52		 push	 edx
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	85 c0		 test	 eax, eax
  00043	75 16		 jne	 SHORT $LN38@operator
  00045	3b f7		 cmp	 esi, edi
  00047	76 0c		 jbe	 SHORT $LN39@operator
  00049	83 c8 ff	 or	 eax, -1
  0004c	85 c0		 test	 eax, eax
  0004e	5f		 pop	 edi
  0004f	0f 94 c0	 sete	 al
  00052	5e		 pop	 esi

; 2481 : 	}

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN39@operator:

; 2480 : 	return (_Left.compare(_Right) == 0);

  00055	1b c0		 sbb	 eax, eax
  00057	f7 d8		 neg	 eax
  00059	85 c0		 test	 eax, eax
$LN38@operator:
  0005b	5f		 pop	 edi
  0005c	0f 94 c0	 sete	 al
  0005f	5e		 pop	 esi

; 2481 : 	}

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 95   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00003	8b 45 08	 mov	 eax, DWORD PTR _forEachContainer$[ebp]

; 97   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ PROC ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > GostCrypt::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
??$?BV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@12@XZ ENDP ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::vector<HostDevice,std::allocator<HostDevice> > > GostCrypt::ForEach::TypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; GostCrypt::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8a 45 ff	 mov	 al, BYTE PTR $T1[ebp]
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$ToTypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; GostCrypt::ForEach::ToTypeWrapper<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z PROC ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00018	74 0b		 je	 SHORT $LN13@scalar
  0001a	6a 1c		 push	 28			; 0000001cH
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ PROC ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ ENDP ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::~ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::_Compat, COMDAT
; _this$ = ecx

; 262  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator!=, COMDAT
; _this$ = ecx

; 218  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 219  : 		return (!(*this == _Right));
; 220  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator==, COMDAT
; _this$ = ecx

; 212  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 213  : 		_Compat(_Right);
; 214  : 		return (_Ptr == _Right._Ptr);
; 215  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 98   : 		if (_Mycont == 0
; 99   : 			|| _Ptr == nullptr_t{}
; 100  : 			|| _Mycont->_Mylast <= _Ptr)
; 101  : 			{	// report error
; 102  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 103  : 			_SCL_SECURE_OUT_OF_RANGE;
; 104  : 			}
; 105  : 
; 106  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 107  : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 108  : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 109  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 110  : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr < _Mycont->_Mylast);
; 111  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 112  : 
; 113  : 		++_Ptr;

  00000	83 01 70	 add	 DWORD PTR [ecx], 112	; 00000070H

; 114  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 115  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEABUHostDevice@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEABUHostDevice@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 68   : 		if (_Mycont == 0
; 69   : 			|| _Ptr == _Tptr()
; 70   : 			|| _Ptr < _Mycont->_Myfirst
; 71   : 			|| _Mycont->_Mylast <= _Ptr)
; 72   : 			{	// report error
; 73   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 74   : 			_SCL_SECURE_OUT_OF_RANGE;
; 75   : 			}
; 76   : 
; 77   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 78   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 79   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 80   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 81   : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEABUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEPBUHostDevice@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEPBUHostDevice@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::_Unchecked, COMDAT
; _this$ = ecx

; 61   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 62   : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QBEPBUHostDevice@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QAE@PAUHostDevice@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QAE@PAUHostDevice@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@std@@QAE@PAUHostDevice@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ PROC ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	83 41 18 70	 add	 DWORD PTR [ecx+24], 112	; 00000070H
  00004	c3		 ret	 0
?Next@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBEXXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::Next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ PROC ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00004	74 0f		 je	 SHORT $LN3@IsNotEnd
  00006	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00009	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0000c	74 07		 je	 SHORT $LN3@IsNotEnd
  0000e	b0 01		 mov	 al, 1
  00010	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00014	c3		 ret	 0
$LN3@IsNotEnd:
  00015	32 c0		 xor	 al, al
  00017	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0001a	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::IsNotEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00030	ff 75 08	 push	 DWORD PTR _container$[ebp]
  00033	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@
  00043	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  00048	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0004b	89 47 14	 mov	 DWORD PTR [edi+20], eax
  0004e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00051	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00054	8b c7		 mov	 eax, edi
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >::ContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >, COMDAT

; 69   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 70   : 			return ContainerForward <T> (container);

  00025	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00035	ff 75 0c	 push	 DWORD PTR _container$[ebp]
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  0004d	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00050	8b c7		 mov	 eax, edi
  00052	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00055	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00058	89 4f 18	 mov	 DWORD PTR [edi+24], ecx

; 71   : 		}

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetSysDevicePaths@@YAHPAUHWND__@@@Z
_TEXT	SEGMENT
_$S5$2 = -124						; size = 28
_$S6$3 = -96						; size = 28
_$S4$4 = -68						; size = 28
$T5 = -40						; size = 12
$T6 = -40						; size = 12
$T7 = -28						; size = 12
$T8 = -28						; size = 12
$T9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
?GetSysDevicePaths@@YAHPAUHWND__@@@Z PROC		; GetSysDevicePaths, COMDAT

; 3317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSysDevicePaths@@YAHPAUHWND__@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 3318 : 	if (!bCachedSysDevicePathsValid
; 3319 : 		|| strlen (SysPartitionDevicePath) <= 1 
; 3320 : 		|| strlen (SysDriveDevicePath) <= 1)

  00028	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bCachedSysDevicePathsValid@@3DA, 0 ; bCachedSysDevicePathsValid
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T9[ebp], 0
  00036	74 30		 je	 SHORT $LN21@GetSysDevi
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  0003d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1169@GetSysDevi:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL1169@GetSysDevi
  00047	2b ca		 sub	 ecx, edx
  00049	83 f9 01	 cmp	 ecx, 1
  0004c	76 1a		 jbe	 SHORT $LN21@GetSysDevi
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00053	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1170@GetSysDevi:
  00056	8a 01		 mov	 al, BYTE PTR [ecx]
  00058	41		 inc	 ecx
  00059	84 c0		 test	 al, al
  0005b	75 f9		 jne	 SHORT $LL1170@GetSysDevi
  0005d	2b ca		 sub	 ecx, edx
  0005f	83 f9 01	 cmp	 ecx, 1
  00062	0f 87 ab 05 00
	00		 ja	 $LN20@GetSysDevi
$LN21@GetSysDevi:

; 3321 : 	{
; 3322 : 		foreach (const HostDevice &device, GetAvailableHostDevices (false, true))

  00068	6a 00		 push	 0
  0006a	6a 01		 push	 1
  0006c	6a 01		 push	 1
  0006e	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  00071	6a 00		 push	 0
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  00079	50		 push	 eax
  0007a	8d 45 bc	 lea	 eax, DWORD PTR _$S4$4[ebp]
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  0008a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008d	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00094	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
  00099	8b 45 bc	 mov	 eax, DWORD PTR _$S4$4[ebp]
  0009c	8d 4d bc	 lea	 ecx, DWORD PTR _$S4$4[ebp]
  0009f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a2	ff d0		 call	 eax
  000a4	84 c0		 test	 al, al
  000a6	0f 84 2e 01 00
	00		 je	 $LN1167@GetSysDevi
  000ac	8b 7d e8	 mov	 edi, DWORD PTR $T8[ebp+4]
  000af	8b 5d e4	 mov	 ebx, DWORD PTR $T8[ebp]
$LN1177@GetSysDevi:
  000b2	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  000b5	ba 00 00 00 00	 mov	 edx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  000ba	8b 75 d4	 mov	 esi, DWORD PTR _$S4$4[ebp+24]
  000bd	a8 01		 test	 al, 1
  000bf	0f 84 95 00 00
	00		 je	 $LN62@GetSysDevi
  000c5	83 e0 fe	 and	 eax, -2			; fffffffeH
  000c8	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
  000cb	85 db		 test	 ebx, ebx
  000cd	0f 84 87 00 00
	00		 je	 $LN62@GetSysDevi
  000d3	3b df		 cmp	 ebx, edi
  000d5	74 11		 je	 SHORT $LN103@GetSysDevi
$LL104@GetSysDevi:
  000d7	8b cb		 mov	 ecx, ebx
  000d9	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  000de	83 c3 70	 add	 ebx, 112		; 00000070H
  000e1	3b df		 cmp	 ebx, edi
  000e3	75 f2		 jne	 SHORT $LL104@GetSysDevi
  000e5	8b 5d e4	 mov	 ebx, DWORD PTR $T8[ebp]
$LN103@GetSysDevi:
  000e8	8b 4d ec	 mov	 ecx, DWORD PTR $T8[ebp+8]
  000eb	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000f0	2b cb		 sub	 ecx, ebx
  000f2	f7 e9		 imul	 ecx
  000f4	03 d1		 add	 edx, ecx
  000f6	c1 fa 06	 sar	 edx, 6
  000f9	8b c2		 mov	 eax, edx
  000fb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fe	03 c2		 add	 eax, edx
  00100	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  00105	0f 87 15 01 00
	00		 ja	 $LN1117@GetSysDevi
  0010b	6b c0 70	 imul	 eax, eax, 112
  0010e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00113	72 2a		 jb	 SHORT $LN157@GetSysDevi
  00115	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00118	0f 85 02 01 00
	00		 jne	 $LN1117@GetSysDevi
  0011e	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]
  00121	3b c3		 cmp	 eax, ebx
  00123	0f 83 f7 00 00
	00		 jae	 $LN1117@GetSysDevi
  00129	2b d8		 sub	 ebx, eax
  0012b	83 fb 04	 cmp	 ebx, 4
  0012e	0f 82 ec 00 00
	00		 jb	 $LN1117@GetSysDevi
  00134	83 fb 23	 cmp	 ebx, 35			; 00000023H
  00137	0f 87 e3 00 00
	00		 ja	 $LN1117@GetSysDevi
  0013d	8b d8		 mov	 ebx, eax
$LN157@GetSysDevi:
  0013f	53		 push	 ebx
  00140	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00145	33 db		 xor	 ebx, ebx
  00147	83 c4 04	 add	 esp, 4
  0014a	33 ff		 xor	 edi, edi
  0014c	89 5d e4	 mov	 DWORD PTR $T8[ebp], ebx
  0014f	89 7d e8	 mov	 DWORD PTR $T8[ebp+4], edi
  00152	ba 00 00 00 00	 mov	 edx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00157	89 5d ec	 mov	 DWORD PTR $T8[ebp+8], ebx
$LN62@GetSysDevi:
  0015a	33 c9		 xor	 ecx, ecx
  0015c	38 4d c1	 cmp	 BYTE PTR _$S4$4[ebp+5], cl
  0015f	0f 94 c1	 sete	 cl
  00162	88 4d c1	 mov	 BYTE PTR _$S4$4[ebp+5], cl
  00165	84 c9		 test	 cl, cl
  00167	74 55		 je	 SHORT $LN2@GetSysDevi
  00169	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@GetSysDevi:

; 3323 : 		{
; 3324 : 			if (device.ContainsSystem)

  00170	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00174	74 29		 je	 SHORT $LN5@GetSysDevi

; 3325 : 				strcpy_s (device.IsPartition ? SysPartitionDevicePath : SysDriveDevicePath, GST_MAX_PATH, device.Path.c_str()); 

  00176	83 7e 4c 10	 cmp	 DWORD PTR [esi+76], 16	; 00000010H
  0017a	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  0017d	72 02		 jb	 SHORT $LN213@GetSysDevi
  0017f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN213@GetSysDevi:
  00181	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00185	50		 push	 eax
  00186	b8 00 00 00 00	 mov	 eax, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  0018b	0f 44 c2	 cmove	 eax, edx
  0018e	68 04 01 00 00	 push	 260			; 00000104H
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 _strcpy_s
  00199	8a 4d c1	 mov	 cl, BYTE PTR _$S4$4[ebp+5]
  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@GetSysDevi:

; 3321 : 	{
; 3322 : 		foreach (const HostDevice &device, GetAvailableHostDevices (false, true))

  0019f	33 c0		 xor	 eax, eax
  001a1	c6 45 c0 01	 mov	 BYTE PTR _$S4$4[ebp+4], 1
  001a5	84 c9		 test	 cl, cl
  001a7	ba 00 00 00 00	 mov	 edx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  001ac	0f 94 c0	 sete	 al
  001af	8a c8		 mov	 cl, al
  001b1	88 4d c1	 mov	 BYTE PTR _$S4$4[ebp+5], cl
  001b4	84 c0		 test	 al, al
  001b6	75 b8		 jne	 SHORT $LL7@GetSysDevi
  001b8	8b 7d e8	 mov	 edi, DWORD PTR $T8[ebp+4]
  001bb	8b 5d e4	 mov	 ebx, DWORD PTR $T8[ebp]
$LN2@GetSysDevi:
  001be	8b 45 bc	 mov	 eax, DWORD PTR _$S4$4[ebp]
  001c1	8d 4d bc	 lea	 ecx, DWORD PTR _$S4$4[ebp]
  001c4	ff 50 08	 call	 DWORD PTR [eax+8]
  001c7	8b 45 bc	 mov	 eax, DWORD PTR _$S4$4[ebp]
  001ca	8d 4d bc	 lea	 ecx, DWORD PTR _$S4$4[ebp]
  001cd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d0	ff d0		 call	 eax
  001d2	84 c0		 test	 al, al
  001d4	0f 85 d8 fe ff
	ff		 jne	 $LN1177@GetSysDevi
$LN1167@GetSysDevi:

; 3326 : 		}

  001da	8b 75 c4	 mov	 esi, DWORD PTR _$S4$4[ebp+8]
  001dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e4	85 f6		 test	 esi, esi
  001e6	74 7f		 je	 SHORT $LN223@GetSysDevi
  001e8	8b 7d c8	 mov	 edi, DWORD PTR _$S4$4[ebp+12]
  001eb	3b f7		 cmp	 esi, edi
  001ed	74 12		 je	 SHORT $LN264@GetSysDevi
  001ef	90		 npad	 1
$LL265@GetSysDevi:
  001f0	8b ce		 mov	 ecx, esi
  001f2	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  001f7	83 c6 70	 add	 esi, 112		; 00000070H
  001fa	3b f7		 cmp	 esi, edi
  001fc	75 f2		 jne	 SHORT $LL265@GetSysDevi
  001fe	8b 75 c4	 mov	 esi, DWORD PTR _$S4$4[ebp+8]
$LN264@GetSysDevi:
  00201	8b 4d cc	 mov	 ecx, DWORD PTR _$S4$4[ebp+16]
  00204	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00209	2b ce		 sub	 ecx, esi
  0020b	f7 e9		 imul	 ecx
  0020d	03 d1		 add	 edx, ecx
  0020f	c1 fa 06	 sar	 edx, 6
  00212	8b c2		 mov	 eax, edx
  00214	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00217	03 c2		 add	 eax, edx
  00219	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  0021e	76 05		 jbe	 SHORT $LN317@GetSysDevi
$LN1117@GetSysDevi:
  00220	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1178@GetSysDevi:
$LN317@GetSysDevi:
  00225	6b c0 70	 imul	 eax, eax, 112
  00228	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0022d	72 2f		 jb	 SHORT $LN318@GetSysDevi
  0022f	f6 45 c4 1f	 test	 BYTE PTR _$S4$4[ebp+8], 31 ; 0000001fH
  00233	74 05		 je	 SHORT $LN319@GetSysDevi
  00235	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1179@GetSysDevi:
$LN319@GetSysDevi:
  0023a	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0023d	3b c6		 cmp	 eax, esi
  0023f	72 05		 jb	 SHORT $LN320@GetSysDevi
  00241	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1180@GetSysDevi:
$LN320@GetSysDevi:
  00246	2b f0		 sub	 esi, eax
  00248	83 fe 04	 cmp	 esi, 4
  0024b	73 05		 jae	 SHORT $LN321@GetSysDevi
  0024d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1181@GetSysDevi:
$LN321@GetSysDevi:
  00252	83 fe 23	 cmp	 esi, 35			; 00000023H
  00255	76 05		 jbe	 SHORT $LN322@GetSysDevi
  00257	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1182@GetSysDevi:
$LN322@GetSysDevi:
  0025c	8b f0		 mov	 esi, eax
$LN318@GetSysDevi:
  0025e	56		 push	 esi
  0025f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00264	83 c4 04	 add	 esp, 4
$LN223@GetSysDevi:

; 3327 : 
; 3328 : 		if (IsOSAtLeast (WIN_7))

  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  0026c	85 c0		 test	 eax, eax
  0026e	7f 0c		 jg	 SHORT $LN364@GetSysDevi
  00270	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN364@GetSysDevi:
  0027c	c1 e0 08	 shl	 eax, 8
  0027f	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  00285	c1 e0 08	 shl	 eax, 8
  00288	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  0028e	3d 00 01 06 00	 cmp	 eax, 393472		; 00060100H
  00293	0f 8c 73 03 00
	00		 jl	 $LN965@GetSysDevi

; 3329 : 		{
; 3330 : 			// Find extra boot partition
; 3331 : 			foreach (const HostDevice &drive, GetAvailableHostDevices (false, false))

  00299	6a 00		 push	 0
  0029b	6a 01		 push	 1
  0029d	6a 00		 push	 0
  0029f	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  002a2	6a 00		 push	 0
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  002aa	50		 push	 eax
  002ab	8d 45 84	 lea	 eax, DWORD PTR _$S5$2[ebp]
  002ae	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  002b5	50		 push	 eax
  002b6	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  002bb	83 c4 1c	 add	 esp, 28			; 0000001cH
  002be	8b 5d d8	 mov	 ebx, DWORD PTR $T5[ebp]
  002c1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  002c5	85 db		 test	 ebx, ebx
  002c7	0f 84 92 00 00
	00		 je	 $LN376@GetSysDevi
  002cd	8b 75 dc	 mov	 esi, DWORD PTR $T5[ebp+4]
  002d0	3b de		 cmp	 ebx, esi
  002d2	74 11		 je	 SHORT $LN417@GetSysDevi
$LL418@GetSysDevi:
  002d4	8b cb		 mov	 ecx, ebx
  002d6	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  002db	83 c3 70	 add	 ebx, 112		; 00000070H
  002de	3b de		 cmp	 ebx, esi
  002e0	75 f2		 jne	 SHORT $LL418@GetSysDevi
  002e2	8b 5d d8	 mov	 ebx, DWORD PTR $T5[ebp]
$LN417@GetSysDevi:
  002e5	8b 4d e0	 mov	 ecx, DWORD PTR $T5[ebp+8]
  002e8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  002ed	2b cb		 sub	 ecx, ebx
  002ef	f7 e9		 imul	 ecx
  002f1	03 d1		 add	 edx, ecx
  002f3	c1 fa 06	 sar	 edx, 6
  002f6	8b c2		 mov	 eax, edx
  002f8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002fb	03 c2		 add	 eax, edx
  002fd	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  00302	76 05		 jbe	 SHORT $LN470@GetSysDevi
  00304	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1183@GetSysDevi:
$LN470@GetSysDevi:
  00309	6b c0 70	 imul	 eax, eax, 112
  0030c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00311	72 2e		 jb	 SHORT $LN471@GetSysDevi
  00313	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00316	74 05		 je	 SHORT $LN472@GetSysDevi
  00318	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1184@GetSysDevi:
$LN472@GetSysDevi:
  0031d	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]
  00320	3b c3		 cmp	 eax, ebx
  00322	72 05		 jb	 SHORT $LN473@GetSysDevi
  00324	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1185@GetSysDevi:
$LN473@GetSysDevi:
  00329	2b d8		 sub	 ebx, eax
  0032b	83 fb 04	 cmp	 ebx, 4
  0032e	73 05		 jae	 SHORT $LN474@GetSysDevi
  00330	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1186@GetSysDevi:
$LN474@GetSysDevi:
  00335	83 fb 23	 cmp	 ebx, 35			; 00000023H
  00338	76 05		 jbe	 SHORT $LN475@GetSysDevi
  0033a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1187@GetSysDevi:
$LN475@GetSysDevi:
  0033f	8b d8		 mov	 ebx, eax
$LN471@GetSysDevi:
  00341	53		 push	 ebx
  00342	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00347	83 c4 04	 add	 esp, 4
  0034a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00351	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0
  00358	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0
$LN376@GetSysDevi:
  0035f	8b 45 84	 mov	 eax, DWORD PTR _$S5$2[ebp]
  00362	8d 4d 84	 lea	 ecx, DWORD PTR _$S5$2[ebp]
  00365	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00368	ff d0		 call	 eax
  0036a	84 c0		 test	 al, al
  0036c	0f 84 11 02 00
	00		 je	 $LN1168@GetSysDevi
  00372	8b 5d e4	 mov	 ebx, DWORD PTR $T7[ebp]
$LL10@GetSysDevi:
  00375	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00378	8b 7d 9c	 mov	 edi, DWORD PTR _$S5$2[ebp+24]
  0037b	a8 02		 test	 al, 2
  0037d	0f 84 91 00 00
	00		 je	 $LN520@GetSysDevi
  00383	83 e0 fd	 and	 eax, -3			; fffffffdH
  00386	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
  00389	85 db		 test	 ebx, ebx
  0038b	0f 84 83 00 00
	00		 je	 $LN520@GetSysDevi
  00391	8b 75 e8	 mov	 esi, DWORD PTR $T7[ebp+4]
  00394	3b de		 cmp	 ebx, esi
  00396	74 11		 je	 SHORT $LN561@GetSysDevi
$LL562@GetSysDevi:
  00398	8b cb		 mov	 ecx, ebx
  0039a	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0039f	83 c3 70	 add	 ebx, 112		; 00000070H
  003a2	3b de		 cmp	 ebx, esi
  003a4	75 f2		 jne	 SHORT $LL562@GetSysDevi
  003a6	8b 5d e4	 mov	 ebx, DWORD PTR $T7[ebp]
$LN561@GetSysDevi:
  003a9	8b 4d ec	 mov	 ecx, DWORD PTR $T7[ebp+8]
  003ac	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  003b1	2b cb		 sub	 ecx, ebx
  003b3	f7 e9		 imul	 ecx
  003b5	03 d1		 add	 edx, ecx
  003b7	c1 fa 06	 sar	 edx, 6
  003ba	8b c2		 mov	 eax, edx
  003bc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003bf	03 c2		 add	 eax, edx
  003c1	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  003c6	0f 87 54 fe ff
	ff		 ja	 $LN1117@GetSysDevi
  003cc	6b c0 70	 imul	 eax, eax, 112
  003cf	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  003d4	72 2a		 jb	 SHORT $LN615@GetSysDevi
  003d6	f6 c3 1f	 test	 bl, 31			; 0000001fH
  003d9	0f 85 41 fe ff
	ff		 jne	 $LN1117@GetSysDevi
  003df	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]
  003e2	3b c3		 cmp	 eax, ebx
  003e4	0f 83 36 fe ff
	ff		 jae	 $LN1117@GetSysDevi
  003ea	2b d8		 sub	 ebx, eax
  003ec	83 fb 04	 cmp	 ebx, 4
  003ef	0f 82 2b fe ff
	ff		 jb	 $LN1117@GetSysDevi
  003f5	83 fb 23	 cmp	 ebx, 35			; 00000023H
  003f8	0f 87 22 fe ff
	ff		 ja	 $LN1117@GetSysDevi
  003fe	8b d8		 mov	 ebx, eax
$LN615@GetSysDevi:
  00400	53		 push	 ebx
  00401	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00406	83 c4 04	 add	 esp, 4
  00409	33 db		 xor	 ebx, ebx
  0040b	89 5d e4	 mov	 DWORD PTR $T7[ebp], ebx
  0040e	89 5d e8	 mov	 DWORD PTR $T7[ebp+4], ebx
  00411	89 5d ec	 mov	 DWORD PTR $T7[ebp+8], ebx
$LN520@GetSysDevi:
  00414	33 c9		 xor	 ecx, ecx
  00416	38 4d 89	 cmp	 BYTE PTR _$S5$2[ebp+5], cl
  00419	0f 94 c1	 sete	 cl
  0041c	88 4d 89	 mov	 BYTE PTR _$S5$2[ebp+5], cl
  0041f	84 c9		 test	 cl, cl
  00421	0f 84 40 01 00
	00		 je	 $LN8@GetSysDevi
$LL13@GetSysDevi:

; 3332 : 			{
; 3333 : 				if (drive.ContainsSystem)

  00427	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  0042b	75 19		 jne	 SHORT $LN1118@GetSysDevi

; 3329 : 		{
; 3330 : 			// Find extra boot partition
; 3331 : 			foreach (const HostDevice &drive, GetAvailableHostDevices (false, false))

  0042d	33 c0		 xor	 eax, eax
  0042f	c6 45 88 01	 mov	 BYTE PTR _$S5$2[ebp+4], 1
  00433	84 c9		 test	 cl, cl
  00435	0f 94 c0	 sete	 al
  00438	8a c8		 mov	 cl, al
  0043a	88 4d 89	 mov	 BYTE PTR _$S5$2[ebp+5], cl
  0043d	84 c0		 test	 al, al
  0043f	75 e6		 jne	 SHORT $LL13@GetSysDevi

; 3341 : 							break;
; 3342 : 						}
; 3343 : 					}

  00441	e9 21 01 00 00	 jmp	 $LN8@GetSysDevi
$LN1118@GetSysDevi:

; 3334 : 				{
; 3335 : 					foreach (const HostDevice &sysDrivePartition, drive.Partitions)

  00446	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  00449	50		 push	 eax
  0044a	8d 45 a0	 lea	 eax, DWORD PTR _$S6$3[ebp]
  0044d	50		 push	 eax
  0044e	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  00453	83 c4 08	 add	 esp, 8
  00456	8b 45 a0	 mov	 eax, DWORD PTR _$S6$3[ebp]
  00459	8d 4d a0	 lea	 ecx, DWORD PTR _$S6$3[ebp]
  0045c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00460	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00463	ff d0		 call	 eax
  00465	84 c0		 test	 al, al
  00467	74 77		 je	 SHORT $LN15@GetSysDevi
  00469	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@GetSysDevi:
  00470	33 c0		 xor	 eax, eax
  00472	38 45 a5	 cmp	 BYTE PTR _$S6$3[ebp+5], al
  00475	0f 94 c0	 sete	 al
  00478	88 45 a5	 mov	 BYTE PTR _$S6$3[ebp+5], al
  0047b	84 c0		 test	 al, al
  0047d	74 49		 je	 SHORT $LN14@GetSysDevi
  0047f	8b 55 b8	 mov	 edx, DWORD PTR _$S6$3[ebp+24]
$LL19@GetSysDevi:

; 3336 : 					{
; 3337 : 						if (sysDrivePartition.Bootable)

  00482	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00485	75 16		 jne	 SHORT $LN1119@GetSysDevi

; 3334 : 				{
; 3335 : 					foreach (const HostDevice &sysDrivePartition, drive.Partitions)

  00487	33 c9		 xor	 ecx, ecx
  00489	c6 45 a4 01	 mov	 BYTE PTR _$S6$3[ebp+4], 1
  0048d	84 c0		 test	 al, al
  0048f	0f 94 c1	 sete	 cl
  00492	8a c1		 mov	 al, cl
  00494	88 45 a5	 mov	 BYTE PTR _$S6$3[ebp+5], al
  00497	84 c9		 test	 cl, cl
  00499	75 e7		 jne	 SHORT $LL19@GetSysDevi

; 3341 : 							break;
; 3342 : 						}
; 3343 : 					}

  0049b	eb 2b		 jmp	 SHORT $LN14@GetSysDevi
$LN1119@GetSysDevi:

; 3338 : 						{
; 3339 : 							if (sysDrivePartition.Size <= GST_MAX_EXTRA_BOOT_PARTITION_SIZE)

  0049d	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  004a1	77 25		 ja	 SHORT $LN14@GetSysDevi
  004a3	72 09		 jb	 SHORT $LN1171@GetSysDevi
  004a5	81 7a 58 00 00
	00 20		 cmp	 DWORD PTR [edx+88], 536870912 ; 20000000H
  004ac	77 1a		 ja	 SHORT $LN14@GetSysDevi
$LN1171@GetSysDevi:

; 3340 : 								ExtraBootPartitionDevicePath = sysDrivePartition.Path;

  004ae	83 c2 38	 add	 edx, 56			; 00000038H
  004b1	81 fa 00 00 00
	00		 cmp	 edx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  004b7	74 0f		 je	 SHORT $LN14@GetSysDevi
  004b9	6a ff		 push	 -1
  004bb	6a 00		 push	 0
  004bd	52		 push	 edx
  004be	b9 00 00 00 00	 mov	 ecx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  004c3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN14@GetSysDevi:

; 3334 : 				{
; 3335 : 					foreach (const HostDevice &sysDrivePartition, drive.Partitions)

  004c8	8b 45 a0	 mov	 eax, DWORD PTR _$S6$3[ebp]
  004cb	8d 4d a0	 lea	 ecx, DWORD PTR _$S6$3[ebp]
  004ce	ff 50 08	 call	 DWORD PTR [eax+8]
  004d1	8b 45 a0	 mov	 eax, DWORD PTR _$S6$3[ebp]
  004d4	8d 4d a0	 lea	 ecx, DWORD PTR _$S6$3[ebp]
  004d7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004da	ff d0		 call	 eax
  004dc	84 c0		 test	 al, al
  004de	75 90		 jne	 SHORT $LL16@GetSysDevi
$LN15@GetSysDevi:

; 3341 : 							break;
; 3342 : 						}
; 3343 : 					}

  004e0	8b 75 a8	 mov	 esi, DWORD PTR _$S6$3[ebp+8]
  004e3	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  004e7	85 f6		 test	 esi, esi
  004e9	74 79		 je	 SHORT $LN1174@GetSysDevi
  004eb	8b 7d ac	 mov	 edi, DWORD PTR _$S6$3[ebp+12]
  004ee	3b f7		 cmp	 esi, edi
  004f0	74 11		 je	 SHORT $LN863@GetSysDevi
$LL864@GetSysDevi:
  004f2	8b ce		 mov	 ecx, esi
  004f4	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  004f9	83 c6 70	 add	 esi, 112		; 00000070H
  004fc	3b f7		 cmp	 esi, edi
  004fe	75 f2		 jne	 SHORT $LL864@GetSysDevi
  00500	8b 75 a8	 mov	 esi, DWORD PTR _$S6$3[ebp+8]
$LN863@GetSysDevi:
  00503	8b 4d b0	 mov	 ecx, DWORD PTR _$S6$3[ebp+16]
  00506	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0050b	2b ce		 sub	 ecx, esi
  0050d	f7 e9		 imul	 ecx
  0050f	03 d1		 add	 edx, ecx
  00511	c1 fa 06	 sar	 edx, 6
  00514	8b c2		 mov	 eax, edx
  00516	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00519	03 c2		 add	 eax, edx
  0051b	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  00520	0f 87 fa fc ff
	ff		 ja	 $LN1117@GetSysDevi
  00526	6b c0 70	 imul	 eax, eax, 112
  00529	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0052e	72 2b		 jb	 SHORT $LN917@GetSysDevi
  00530	f6 45 a8 1f	 test	 BYTE PTR _$S6$3[ebp+8], 31 ; 0000001fH
  00534	0f 85 e6 fc ff
	ff		 jne	 $LN1117@GetSysDevi
  0053a	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0053d	3b c6		 cmp	 eax, esi
  0053f	0f 83 db fc ff
	ff		 jae	 $LN1117@GetSysDevi
  00545	2b f0		 sub	 esi, eax
  00547	83 fe 04	 cmp	 esi, 4
  0054a	0f 82 d0 fc ff
	ff		 jb	 $LN1117@GetSysDevi
  00550	83 fe 23	 cmp	 esi, 35			; 00000023H
  00553	0f 87 c7 fc ff
	ff		 ja	 $LN1117@GetSysDevi
  00559	8b f0		 mov	 esi, eax
$LN917@GetSysDevi:
  0055b	56		 push	 esi
  0055c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00561	83 c4 04	 add	 esp, 4
$LN1174@GetSysDevi:
  00564	8b 5d e4	 mov	 ebx, DWORD PTR $T7[ebp]
$LN8@GetSysDevi:

; 3329 : 		{
; 3330 : 			// Find extra boot partition
; 3331 : 			foreach (const HostDevice &drive, GetAvailableHostDevices (false, false))

  00567	8b 45 84	 mov	 eax, DWORD PTR _$S5$2[ebp]
  0056a	8d 4d 84	 lea	 ecx, DWORD PTR _$S5$2[ebp]
  0056d	ff 50 08	 call	 DWORD PTR [eax+8]
  00570	8b 45 84	 mov	 eax, DWORD PTR _$S5$2[ebp]
  00573	8d 4d 84	 lea	 ecx, DWORD PTR _$S5$2[ebp]
  00576	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00579	ff d0		 call	 eax
  0057b	84 c0		 test	 al, al
  0057d	0f 85 f2 fd ff
	ff		 jne	 $LL10@GetSysDevi
$LN1168@GetSysDevi:

; 3344 : 					break;
; 3345 : 				}
; 3346 : 			}

  00583	8b 75 8c	 mov	 esi, DWORD PTR _$S5$2[ebp+8]
  00586	85 f6		 test	 esi, esi
  00588	0f 84 7e 00 00
	00		 je	 $LN965@GetSysDevi
  0058e	8b 7d 90	 mov	 edi, DWORD PTR _$S5$2[ebp+12]
  00591	3b f7		 cmp	 esi, edi
  00593	74 11		 je	 SHORT $LN1006@GetSysDevi
$LL1007@GetSysDevi:
  00595	8b ce		 mov	 ecx, esi
  00597	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0059c	83 c6 70	 add	 esi, 112		; 00000070H
  0059f	3b f7		 cmp	 esi, edi
  005a1	75 f2		 jne	 SHORT $LL1007@GetSysDevi
  005a3	8b 75 8c	 mov	 esi, DWORD PTR _$S5$2[ebp+8]
$LN1006@GetSysDevi:
  005a6	8b 4d 94	 mov	 ecx, DWORD PTR _$S5$2[ebp+16]
  005a9	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  005ae	2b ce		 sub	 ecx, esi
  005b0	f7 e9		 imul	 ecx
  005b2	03 d1		 add	 edx, ecx
  005b4	c1 fa 06	 sar	 edx, 6
  005b7	8b c2		 mov	 eax, edx
  005b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005bc	03 c2		 add	 eax, edx
  005be	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  005c3	76 05		 jbe	 SHORT $LN1059@GetSysDevi
  005c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1188@GetSysDevi:
$LN1059@GetSysDevi:
  005ca	6b c0 70	 imul	 eax, eax, 112
  005cd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  005d2	72 2f		 jb	 SHORT $LN1060@GetSysDevi
  005d4	f6 45 8c 1f	 test	 BYTE PTR _$S5$2[ebp+8], 31 ; 0000001fH
  005d8	74 05		 je	 SHORT $LN1061@GetSysDevi
  005da	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1189@GetSysDevi:
$LN1061@GetSysDevi:
  005df	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  005e2	3b c6		 cmp	 eax, esi
  005e4	72 05		 jb	 SHORT $LN1062@GetSysDevi
  005e6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1190@GetSysDevi:
$LN1062@GetSysDevi:
  005eb	2b f0		 sub	 esi, eax
  005ed	83 fe 04	 cmp	 esi, 4
  005f0	73 05		 jae	 SHORT $LN1063@GetSysDevi
  005f2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1191@GetSysDevi:
$LN1063@GetSysDevi:
  005f7	83 fe 23	 cmp	 esi, 35			; 00000023H
  005fa	76 05		 jbe	 SHORT $LN1064@GetSysDevi
  005fc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1192@GetSysDevi:
$LN1064@GetSysDevi:
  00601	8b f0		 mov	 esi, eax
$LN1060@GetSysDevi:
  00603	56		 push	 esi
  00604	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00609	83 c4 04	 add	 esp, 4
$LN965@GetSysDevi:

; 3347 : 		}
; 3348 : 
; 3349 : 		bCachedSysDevicePathsValid = 1;

  0060c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bCachedSysDevicePathsValid@@3DA, 1 ; bCachedSysDevicePathsValid
$LN20@GetSysDevi:

; 3350 : 	}
; 3351 : 
; 3352 : 	return (bCachedSysDevicePathsValid 

  00613	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  00618	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0061b	0f 1f 44 00 00	 npad	 5
$LL1172@GetSysDevi:
  00620	8a 01		 mov	 al, BYTE PTR [ecx]
  00622	41		 inc	 ecx
  00623	84 c0		 test	 al, al
  00625	75 f9		 jne	 SHORT $LL1172@GetSysDevi
  00627	2b ca		 sub	 ecx, edx
  00629	83 f9 01	 cmp	 ecx, 1
  0062c	76 2d		 jbe	 SHORT $LN34@GetSysDevi
  0062e	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00633	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1173@GetSysDevi:
  00636	8a 01		 mov	 al, BYTE PTR [ecx]
  00638	41		 inc	 ecx
  00639	84 c0		 test	 al, al
  0063b	75 f9		 jne	 SHORT $LL1173@GetSysDevi
  0063d	2b ca		 sub	 ecx, edx
  0063f	83 f9 01	 cmp	 ecx, 1
  00642	76 17		 jbe	 SHORT $LN34@GetSysDevi
  00644	b8 01 00 00 00	 mov	 eax, 1

; 3353 : 		&& strlen (SysPartitionDevicePath) > 1 
; 3354 : 		&& strlen (SysDriveDevicePath) > 1);
; 3355 : }

  00649	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0064c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00653	59		 pop	 ecx
  00654	5f		 pop	 edi
  00655	5e		 pop	 esi
  00656	5b		 pop	 ebx
  00657	8b e5		 mov	 esp, ebp
  00659	5d		 pop	 ebp
  0065a	c3		 ret	 0
$LN34@GetSysDevi:

; 3350 : 	}
; 3351 : 
; 3352 : 	return (bCachedSysDevicePathsValid 

  0065b	33 c0		 xor	 eax, eax

; 3353 : 		&& strlen (SysPartitionDevicePath) > 1 
; 3354 : 		&& strlen (SysDriveDevicePath) > 1);
; 3355 : }

  0065d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00660	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00667	59		 pop	 ecx
  00668	5f		 pop	 edi
  00669	5e		 pop	 esi
  0066a	5b		 pop	 ebx
  0066b	8b e5		 mov	 esp, ebp
  0066d	5d		 pop	 ebp
  0066e	c3		 ret	 0
$LN1176@GetSysDevi:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$1:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR _$S4$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$3:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$4:
  00018	8d 4d 84	 lea	 ecx, DWORD PTR _$S5$2[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
__unwindfunclet$?GetSysDevicePaths@@YAHPAUHWND__@@@Z$6:
  00020	8d 4d a0	 lea	 ecx, DWORD PTR _$S6$3[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
__ehhandler$?GetSysDevicePaths@@YAHPAUHWND__@@@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSysDevicePaths@@YAHPAUHWND__@@@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSysDevicePaths@@YAHPAUHWND__@@@Z ENDP		; GetSysDevicePaths
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?InvalidParameterHandler@@YAXPB_W00II@Z
_TEXT	SEGMENT
_expression$ = 8					; size = 4
_function$ = 12						; size = 4
_file$ = 16						; size = 4
_line$ = 20						; size = 4
_reserved$ = 24						; size = 4
?InvalidParameterHandler@@YAXPB_W00II@Z PROC		; InvalidParameterHandler, COMDAT

; 2392 : 	GST_THROW_FATAL_EXCEPTION;

  00000	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 2393 : }

  00007	c3		 ret	 0
?InvalidParameterHandler@@YAXPB_W00II@Z ENDP		; InvalidParameterHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_args$ = -8						; size = 8
_ep$ = 8						; size = 4
?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC	; ExceptionHandler, COMDAT

; 2357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2358 : 	SetUnhandledExceptionFilter (NULL);

  00006	6a 00		 push	 0
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 2359 : 
; 2360 : 	if (SystemFileSelectorCallPending && SystemFileSelectorCallerThreadId == GetCurrentThreadId())

  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 0 ; SystemFileSelectorCallPending
  00015	74 4b		 je	 SHORT $LN2@ExceptionH
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  0001d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?SystemFileSelectorCallerThreadId@@3KA, eax ; SystemFileSelectorCallerThreadId
  00023	75 3d		 jne	 SHORT $LN2@ExceptionH

; 2361 : 	{
; 2362 : 		MessageBoxW (NULL, GetString ("EXCEPTION_REPORT_EXT_FILESEL"), GetString ("EXCEPTION_REPORT_TITLE"), MB_ICONERROR | MB_OK | MB_SETFOREGROUND | MB_TOPMOST);

  00025	68 10 00 05 00	 push	 327696			; 00050010H
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
  0002f	e8 00 00 00 00	 call	 _GetString
  00034	83 c4 04	 add	 esp, 4
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PKGEAFIB@EXCEPTION_REPORT_EXT_FILESEL?$AA@
  0003d	e8 00 00 00 00	 call	 _GetString
  00042	83 c4 04	 add	 esp, 4
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2363 : 
; 2364 : 		UnhandledExceptionFilter (ep);

  0004e	ff 75 08	 push	 DWORD PTR _ep$[ebp]
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhandledExceptionFilter@4

; 2373 : 
; 2374 : 	return EXCEPTION_EXECUTE_HANDLER;

  00057	b8 01 00 00 00	 mov	 eax, 1

; 2375 : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
$LN2@ExceptionH:

; 2365 : 		return EXCEPTION_EXECUTE_HANDLER;
; 2366 : 	}
; 2367 : 
; 2368 : 	ExceptionHandlerThreadArgs args;
; 2369 : 	args.ExceptionPointers = ep;

  00062	8b 45 08	 mov	 eax, DWORD PTR _ep$[ebp]
  00065	89 45 f8	 mov	 DWORD PTR _args$[ebp], eax

; 2370 : 	args.ExceptionThread = GetCurrentThread();

  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThread@0
  0006e	89 45 fc	 mov	 DWORD PTR _args$[ebp+4], eax

; 2371 : 
; 2372 : 	WaitForSingleObject ((HANDLE) _beginthread (ExceptionHandlerThread, 0, &args), INFINITE);

  00071	8d 45 f8	 lea	 eax, DWORD PTR _args$[ebp]
  00074	6a ff		 push	 -1
  00076	50		 push	 eax
  00077	6a 00		 push	 0
  00079	68 00 00 00 00	 push	 OFFSET ?ExceptionHandlerThread@@YAXPAX@Z ; ExceptionHandlerThread
  0007e	e8 00 00 00 00	 call	 __beginthread
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 2373 : 
; 2374 : 	return EXCEPTION_EXECUTE_HANDLER;

  0008d	b8 01 00 00 00	 mov	 eax, 1

; 2375 : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP	; ExceptionHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 95   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00003	8b 45 08	 mov	 eax, DWORD PTR _forEachContainer$[ebp]

; 97   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ PROC ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > GostCrypt::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
??$?BV?$list@KV?$allocator@K@std@@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@12@XZ ENDP ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::list<unsigned long,std::allocator<unsigned long> > > GostCrypt::ForEach::TypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; GostCrypt::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8a 45 ff	 mov	 al, BYTE PTR $T1[ebp]
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$ToTypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; GostCrypt::ForEach::ToTypeWrapper<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z PROC ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 18		 push	 24			; 00000018H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ PROC ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
  00003	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 12		 mov	 DWORD PTR [edx], edx
  0000a	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0000d	89 52 04	 mov	 DWORD PTR [edx+4], edx
  00010	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00017	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0001a	74 17		 je	 SHORT $LN10@ContainerF
  0001c	56		 push	 esi
  0001d	0f 1f 00	 npad	 3
$LL11@ContainerF:
  00020	8b 30		 mov	 esi, DWORD PTR [eax]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c6		 mov	 eax, esi
  0002d	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  00030	75 ee		 jne	 SHORT $LL11@ContainerF
  00032	5e		 pop	 esi
$LN10@ContainerF:
  00033	ff 77 08	 push	 DWORD PTR [edi+8]
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00044	5f		 pop	 edi
  00045	c3		 ret	 0
??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ ENDP ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::~ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator!=, COMDAT
; _this$ = ecx

; 305  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 306  : 		return (!(*this == _Right));
; 307  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator==, COMDAT
; _this$ = ecx

; 289  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 290  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 291  : 		if (this->_Getcont() != _Right._Getcont())
; 292  : 			{	// report error
; 293  : 			_DEBUG_ERROR("list iterators incompatible");
; 294  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 295  : 			}
; 296  : 
; 297  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 298  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 299  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 300  : 
; 301  : 		return (this->_Ptr == _Right._Ptr);
; 302  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator--, COMDAT
; _this$ = ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 259  : 		if (_Mycont == 0
; 260  : 			|| this->_Ptr == nullptr_t{}
; 261  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr)) == _Mycont->_Myhead)
; 262  : 			{	// report error
; 263  : 			_DEBUG_ERROR("list iterator not decrementable");
; 264  : 			_SCL_SECURE_OUT_OF_RANGE;
; 265  : 			}
; 266  : 
; 267  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 268  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 269  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 270  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 271  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 272  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 273  : 
; 274  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 275  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 277  : 
; 278  : 		return (*this);

  00007	8b c1		 mov	 eax, ecx

; 279  : 		}

  00009	c3		 ret	 0
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator++, COMDAT
; _this$ = ecx

; 227  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 228  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 229  : 		if (_Mycont == 0
; 230  : 			|| this->_Ptr == nullptr_t{}
; 231  : 			|| this->_Ptr == _Mycont->_Myhead)
; 232  : 			{	// report error
; 233  : 			_DEBUG_ERROR("list iterator not incrementable");
; 234  : 			_SCL_SECURE_OUT_OF_RANGE;
; 235  : 			}
; 236  : 
; 237  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 238  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 239  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 240  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 241  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 242  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 243  : 
; 244  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 245  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 246  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBEABKXZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator*, COMDAT
; _this$ = ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 207  : 		if (_Mycont == 0
; 208  : 			|| this->_Ptr == nullptr_t{}
; 209  : 			|| this->_Ptr == _Mycont->_Myhead)
; 210  : 			{	// report error
; 211  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 212  : 			_SCL_SECURE_OUT_OF_RANGE;
; 213  : 			}
; 214  : 
; 215  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 216  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 217  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 218  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 219  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 220  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 221  : 
; 222  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 223  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBEABKXZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_Unchecked, COMDAT
; _this$ = ecx

; 199  : 		{	// make an unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 		return (_Unchecked_type(this->_Ptr, static_cast<const _Mylist *>(this->_Getcont())));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  : 		: _Mybase(_Pnode, _Plist)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 188  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@KPAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@KPAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 96   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 97   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@KPAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 74   : 		return (*this);

  00007	8b c1		 mov	 eax, ecx

; 75   : 		}

  00009	c3		 ret	 0
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@KPAX@1@PBV?$_List_val@U?$_List_simple_types@K@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBEXXZ PROC ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00008	c3		 ret	 0
?Next@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBEXXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::Next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ PROC ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00004	74 0f		 je	 SHORT $LN3@IsNotEnd
  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0000c	74 07		 je	 SHORT $LN3@IsNotEnd
  0000e	b0 01		 mov	 al, 1
  00010	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00014	c3		 ret	 0
$LN3@IsNotEnd:
  00015	32 c0		 xor	 al, al
  00017	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0001a	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UBE_NXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::IsNotEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00030	ff 75 08	 push	 DWORD PTR _container$[ebp]
  00033	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@
  00043	e8 00 00 00 00	 call	 ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
  00048	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004b	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0004e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00056	8b c7		 mov	 eax, edi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@QAE@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >::ContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >, COMDAT

; 69   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 70   : 			return ContainerForward <T> (container);

  00025	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00035	ff 75 0c	 push	 DWORD PTR _container$[ebp]
  00038	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@6B@
  00048	e8 00 00 00 00	 call	 ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
  0004d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00050	8b c7		 mov	 eax, edi
  00052	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  00055	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 71   : 		}

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Incsize@?$list@KV?$allocator@K@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@KV?$allocator@K@std@@@std@@QAEXI@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize, COMDAT
; _this$ = ecx

; 1906 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1907 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	b8 54 55 55 15	 mov	 eax, 357913940		; 15555554H
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  0000f	2b c2		 sub	 eax, edx
  00011	3b c6		 cmp	 eax, esi
  00013	72 0b		 jb	 SHORT $LN41@Incsize

; 1909 : 		this->_Mysize() += _Count;

  00015	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00018	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0001b	5e		 pop	 esi

; 1910 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN41@Incsize:

; 1908 : 			_Xlength_error("list<T> too long");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@Incsize:
$LN40@Incsize:
  0002a	cc		 int	 3
?_Incsize@?$list@KV?$allocator@K@std@@@std@@QAEXI@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Tidy@?$list@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1883 : 		{	// free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1884 : 		clear();

  00003	8b 17		 mov	 edx, DWORD PTR [edi]
  00005	8b 02		 mov	 eax, DWORD PTR [edx]
  00007	89 12		 mov	 DWORD PTR [edx], edx
  00009	8b 17		 mov	 edx, DWORD PTR [edi]
  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx
  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN5@Tidy
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Tidy:
  00020	8b 30		 mov	 esi, DWORD PTR [eax]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL6@Tidy
  00031	5e		 pop	 esi
$LN5@Tidy:
  00032	5f		 pop	 edi

; 1885 : 		}

  00033	c3		 ret	 0
?_Tidy@?$list@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 1500 : 		{	// erase all

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1501 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1502 : 
; 1503 : 		this->_Orphan_ptr(nullptr);
; 1504 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1505 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00003	8b 17		 mov	 edx, DWORD PTR [edi]
  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1506 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 1507 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  00009	8b 17		 mov	 edx, DWORD PTR [edi]
  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1508 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1509 : 
; 1510 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN3@clear
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@clear:

; 1511 : 			{	// delete an element
; 1512 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]

; 1513 : 			this->_Freenode(_Pnode);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL4@clear
  00031	5e		 pop	 esi
$LN3@clear:
  00032	5f		 pop	 edi

; 1514 : 			}
; 1515 : 		}

  00033	c3		 ret	 0
?clear@?$list@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked_erase@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
?_Unchecked_erase@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Unchecked_erase, COMDAT
; _this$ = ecx

; 1473 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1474 : 		_Nodeptr _Pnode = _Where._Mynode();

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi

; 1475 : 
; 1476 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1477 : 			this->_Nextnode(_Pnode);
; 1478 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1479 : 			this->_Prevnode(_Pnode);
; 1480 : 		this->_Freenode(_Pnode);

  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	89 02		 mov	 DWORD PTR [edx], eax
  00012	8b 16		 mov	 edx, DWORD PTR [esi]
  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	83 c4 04	 add	 esp, 4

; 1481 : 		--this->_Mysize();

  00022	ff 4f 04	 dec	 DWORD PTR [edi+4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1482 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Unchecked_erase@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Unchecked_erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 1292 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1293 : 		_Insert(_Unchecked_end(), _Val);

  00007	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0000a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000c	ff 77 04	 push	 DWORD PTR [edi+4]
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>
  00015	8b d0		 mov	 edx, eax
  00017	b9 54 55 55 15	 mov	 ecx, 357913940		; 15555554H
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b c8		 sub	 ecx, eax
  00021	83 f9 01	 cmp	 ecx, 1
  00024	72 12		 jb	 SHORT $LN91@push_back
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002a	89 57 04	 mov	 DWORD PTR [edi+4], edx
  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	89 10		 mov	 DWORD PTR [eax], edx

; 1294 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN91@push_back:

; 1293 : 		_Insert(_Unchecked_end(), _Val);

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN93@push_back:
$LN90@push_back:
  00042	cc		 int	 3
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 1247 : 		return (this->_Getal().max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1248 : 		}

  00005	c3		 ret	 0
?max_size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 1242 : 		return (this->_Mysize());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1243 : 		}

  00003	c3		 ret	 0
?size@?$list@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter, COMDAT
; _this$ = ecx

; 1163 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1164 : 		return (iterator(_Where._Ptr, &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1165 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1152 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1153 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1154 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 1135 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1136 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1137 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 1124 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1125 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1126 : 			&this->_Get_data()));
; 1127 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@KV?$allocator@K@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ PROC ; std::list<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 1118 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1119 : 		return (iterator(this->_Nextnode(this->_Myhead()),

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1120 : 			&this->_Get_data()));
; 1121 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@KV?$allocator@K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@2@XZ ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 1097 : 		{	// destroy the object

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1098 : 		_Tidy();

  00003	8b 07		 mov	 eax, DWORD PTR [edi]
  00005	8b 10		 mov	 edx, DWORD PTR [eax]
  00007	89 00		 mov	 DWORD PTR [eax], eax
  00009	8b 07		 mov	 eax, DWORD PTR [edi]
  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00015	3b 17		 cmp	 edx, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN7@list
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@list:
  00020	8b 32		 mov	 esi, DWORD PTR [edx]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
  0002b	8b d6		 mov	 edx, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL8@list
  00031	5e		 pop	 esi
$LN7@list:

; 1099 : 		}

  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4
  0003c	5f		 pop	 edi
  0003d	c3		 ret	 0
??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z PROC ; std::list<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 1025 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1026 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));

  00007	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0000a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000c	ff 77 04	 push	 DWORD PTR [edi+4]
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long>
  00015	8b d0		 mov	 edx, eax
  00017	b9 54 55 55 15	 mov	 ecx, 357913940		; 15555554H
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b c8		 sub	 ecx, eax
  00021	83 f9 01	 cmp	 ecx, 1
  00024	72 12		 jb	 SHORT $LN94@push_back
  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002a	89 57 04	 mov	 DWORD PTR [edi+4], edx
  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	89 10		 mov	 DWORD PTR [eax], edx

; 1027 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN94@push_back:

; 1026 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN96@push_back:
$LN93@push_back:
  00042	cc		 int	 3
?push_back@?$list@KV?$allocator@K@std@@@std@@QAEX$$QAK@Z ENDP ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T2 = 8							; size = 1
__Right$ = 8						; size = 4
??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z PROC	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 924  : 		{	// construct list by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 921  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())

  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00041	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  00046	89 06		 mov	 DWORD PTR [esi], eax

; 925  : 		_TRY_BEGIN
; 926  : 		insert(begin(), _Right.begin(), _Right.end());

  00048	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
  0004d	c6 45 08 00	 mov	 BYTE PTR $T2[ebp], 0
  00051	ff 75 08	 push	 DWORD PTR $T2[ebp]
  00054	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00056	51		 push	 ecx
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0005e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	8b ce		 mov	 ecx, esi
  00066	52		 push	 edx
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Insert_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@std@@@?$list@KV?$allocator@K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@U_Iterator_base0@2@@1@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@K@std@@@std@@@1@1Uforward_iterator_tag@1@@Z ; std::list<unsigned long,std::allocator<unsigned long> >::_Insert_range<std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned long> > > >

; 930  : 		_CATCH_END
; 931  : 		}

  0006d	8b c6		 mov	 eax, esi
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
__catch$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$0:

; 927  : 		_CATCH_ALL
; 928  : 		_Tidy();

  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Tidy@?$list@KV?$allocator@K@std@@@std@@QAEXXZ ; std::list<unsigned long,std::allocator<unsigned long> >::_Tidy

; 929  : 		_RERAISE;

  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN246@list:
$LN245@list:
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ
__ehhandler$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$list@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 893  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  00020	89 06		 mov	 DWORD PTR [esi], eax

; 894  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$list@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::list<unsigned long,std::allocator<unsigned long> >::list<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_buy<unsigned long,std::allocator<unsigned long> >::~_List_buy<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_buy<unsigned long,std::allocator<unsigned long> >::~_List_buy<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@KV?$allocator@K@std@@@std@@QAEXPAU?$_List_node@KPAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@KV?$allocator@K@std@@@std@@QAEXPAU?$_List_node@KPAX@2@@Z PROC ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Freenode, COMDAT
; _this$ = ecx

; 848  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 849  : 		this->_Getal().destroy(
; 850  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 851  : 		this->_Getal().destroy(
; 852  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 853  : 		this->_Getal().destroy(
; 854  : 			_STD addressof(this->_Myval(_Pnode)));
; 855  : 		this->_Getal().deallocate(_Pnode, 1);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 856  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@KV?$allocator@K@std@@@std@@QAEXPAU?$_List_node@KPAX@2@@Z ENDP ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_List_buy<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 818  : 		{	// default construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  00020	89 06		 mov	 DWORD PTR [esi], eax

; 819  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$_List_buy@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_List_buy<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >,std::_List_val<std::_List_simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAKPAU?$_List_node@KPAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAKPAU?$_List_node@KPAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<unsigned long> >::_Myval, COMDAT

; 545  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 546  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 547  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAKPAU?$_List_node@KPAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<unsigned long> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<unsigned long> >::_Prevnode, COMDAT

; 540  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 542  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<unsigned long> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<unsigned long> >::_Nextnode, COMDAT

; 535  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 537  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@K@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<unsigned long> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_val@U?$_List_simple_types@K@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<unsigned long> >::_List_val<std::_List_simple_types<unsigned long> >, COMDAT
; _this$ = ecx

; 529  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 532  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<unsigned long> >::_List_val<std::_List_simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize, COMDAT
; _this$ = ecx

; 797  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 798  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize, COMDAT
; _this$ = ecx

; 792  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 793  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAU?$_List_node@KPAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAU?$_List_node@KPAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Myhead, COMDAT
; _this$ = ecx

; 787  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 788  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAU?$_List_node@KPAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU?$_List_node@KPAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU?$_List_node@KPAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Myhead, COMDAT
; _this$ = ecx

; 782  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 783  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU?$_List_node@KPAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data, COMDAT
; _this$ = ecx

; 777  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 778  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data, COMDAT
; _this$ = ecx

; 772  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 773  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@K@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 767  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 768  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 762  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 763  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0, COMDAT
; _this$ = ecx

; 729  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00003	6a 0c		 push	 12			; 0000000cH
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 1f		 je	 SHORT $LN117@Buynode0

; 731  : 
; 732  : 		if (_Next == _Nodeptr())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  00014	85 c9		 test	 ecx, ecx
  00016	75 06		 jne	 SHORT $LN115@Buynode0

; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;

  00018	8b c8		 mov	 ecx, eax

; 735  : 			_Prev = _Pnode;

  0001a	8b d0		 mov	 edx, eax
  0001c	eb 03		 jmp	 SHORT $LN2@Buynode0
$LN115@Buynode0:
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Prev$[ebp]
$LN2@Buynode0:

; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(

  00021	89 08		 mov	 DWORD PTR [eax], ecx

; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(

  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00026	85 c9		 test	 ecx, ecx
  00028	74 02		 je	 SHORT $LN4@Buynode0
  0002a	89 11		 mov	 DWORD PTR [ecx], edx
$LN4@Buynode0:

; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN117@Buynode0:

; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN119@Buynode0:
$LN116@Buynode0:
  00035	cc		 int	 3
?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXPAU?$_List_node@KPAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXPAU?$_List_node@KPAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 719  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 725  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXPAU?$_List_node@KPAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0

; 716  : 		}

  00009	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::~_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 617  : 		_Freeheadnode(_Myhead());

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 618  : 		}

  00008	c3		 ret	 0
??1?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::~_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 602  : 		{	// default construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 603  : 		_Myhead() = _Buyheadnode();

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 604  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c3		 ret	 0
??0?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAKPAU?$_List_node@KPAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAKPAU?$_List_node@KPAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Myval, COMDAT

; 595  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 596  : 		return (_List_val<_Val_types>::_Myval(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 597  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAKPAU?$_List_node@KPAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Prevnode, COMDAT

; 590  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 591  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 592  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Nextnode, COMDAT

; 585  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 587  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@SAAAPAU?$_List_node@KPAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1009 : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 988  : 		}

  00003	5d		 pop	 ebp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z ; std::allocator<std::_List_node<unsigned long,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		}

  00003	5d		 pop	 ebp

; 976  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z ; std::allocator<std::_List_node<unsigned long,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >, COMDAT
; _this$ = ecx

; 947  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned long,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@KPAX@std@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@KPAX@std@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SA?AV?$allocator@U?$_List_node@KPAX@std@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@KPAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@KPAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 870  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@KPAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned long,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@KPAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_List_node@KPAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<unsigned long,void *> >::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 750  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_List_node@KPAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00013	77 3f		 ja	 SHORT $LN14@allocate
  00015	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00018	c1 e0 02	 shl	 eax, 2
  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate
  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4
  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate
  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4
  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:
  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:
  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:
  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:
  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEPAU?$_List_node@KPAX@2@I@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0000e	77 34		 ja	 SHORT $LN13@deallocate
  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	c1 e0 02	 shl	 eax, 2
  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate
  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate
  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate
  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate
  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate
  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 721  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:
  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:
  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:
  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U?$_List_node@KPAX@std@@@std@@QAEXPAU?$_List_node@KPAX@2@I@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@KPAX@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$_List_node@KPAX@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::_List_node<unsigned long,void *> >::allocator<std::_List_node<unsigned long,void *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U?$_List_node@KPAX@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::allocator<std::_List_node<unsigned long,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@KPAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_List_node@KPAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<unsigned long,void *> >::allocator<std::_List_node<unsigned long,void *> >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_List_node@KPAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<unsigned long,void *> >::allocator<std::_List_node<unsigned long,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
$T2 = -96						; size = 20
$T3 = -76						; size = 20
$T4 = -56						; size = 20
__Ok$ = -36						; size = 8
__Pad$ = -36						; size = 8
__State$ = -28						; size = 4
__Count$1$ = -24					; size = 4
tv1281 = -24						; size = 4
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
$T6 = 15						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 780  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 781  : 	typedef char _Elem;
; 782  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 783  : 	ios_base::iostate _State = ios_base::goodbit;
; 784  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0002e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
  00035	80 38 00	 cmp	 BYTE PTR [eax], 0
  00038	75 04		 jne	 SHORT $LN26@operator
  0003a	33 c9		 xor	 ecx, ecx
  0003c	eb 0e		 jmp	 SHORT $LN270@operator
$LN26@operator:
  0003e	8b c8		 mov	 ecx, eax
  00040	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL257@operator:
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	41		 inc	 ecx
  00046	84 c0		 test	 al, al
  00048	75 f9		 jne	 SHORT $LL257@operator
  0004a	2b ca		 sub	 ecx, edx
$LN270@operator:

; 785  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0004c	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  0004f	89 4d e8	 mov	 DWORD PTR __Count$1$[ebp], ecx
  00052	8b 03		 mov	 eax, DWORD PTR [ebx]
  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00057	8b 7c 18 24	 mov	 edi, DWORD PTR [eax+ebx+36]
  0005b	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
  0005f	85 ff		 test	 edi, edi
  00061	7c 17		 jl	 SHORT $LN17@operator
  00063	7f 0e		 jg	 SHORT $LN259@operator
  00065	85 f6		 test	 esi, esi
  00067	74 11		 je	 SHORT $LN17@operator
  00069	85 ff		 test	 edi, edi
  0006b	7c 0d		 jl	 SHORT $LN17@operator
  0006d	7f 04		 jg	 SHORT $LN259@operator
  0006f	3b f1		 cmp	 esi, ecx
  00071	76 07		 jbe	 SHORT $LN17@operator
$LN259@operator:
  00073	2b f1		 sub	 esi, ecx
  00075	83 df 00	 sbb	 edi, 0
  00078	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  0007a	0f 57 c0	 xorps	 xmm0, xmm0
  0007d	66 0f 13 45 dc	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00082	8b 7d e0	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  00085	8b 75 dc	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 786  : 		? 0 : _Ostr.width() - _Count;
; 787  : 	const typename _Myos::sentry _Ok(_Ostr);

  00088	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0008c	89 5d dc	 mov	 DWORD PTR __Ok$[ebp], ebx
  0008f	85 c9		 test	 ecx, ecx
  00091	74 05		 je	 SHORT $LN39@operator
  00093	8b 01		 mov	 eax, DWORD PTR [ecx]
  00095	ff 50 04	 call	 DWORD PTR [eax+4]
$LN39@operator:
  00098	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000a1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a4	83 7c 18 0c 00	 cmp	 DWORD PTR [eax+ebx+12], 0
  000a9	75 11		 jne	 SHORT $LN35@operator
  000ab	8b 4c 18 3c	 mov	 ecx, DWORD PTR [eax+ebx+60]
  000af	85 c9		 test	 ecx, ecx
  000b1	74 09		 je	 SHORT $LN35@operator
  000b3	3b cb		 cmp	 ecx, ebx
  000b5	74 05		 je	 SHORT $LN35@operator
  000b7	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN35@operator:
  000bc	8b 03		 mov	 eax, DWORD PTR [ebx]
  000be	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c1	83 7c 19 0c 00	 cmp	 DWORD PTR [ecx+ebx+12], 0
  000c6	0f 94 c0	 sete	 al
  000c9	88 45 e0	 mov	 BYTE PTR __Ok$[ebp+4], al
  000cc	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 788  : 
; 789  : 	if (!_Ok)

  000d3	84 c0		 test	 al, al
  000d5	75 0a		 jne	 SHORT $LN8@operator

; 790  : 		_State |= ios_base::badbit;

  000d7	b9 04 00 00 00	 mov	 ecx, 4

; 791  : 	else

  000dc	e9 56 01 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 792  : 		{	// state okay, insert
; 793  : 		_TRY_IO_BEGIN
; 794  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000e1	8b 44 19 14	 mov	 eax, DWORD PTR [ecx+ebx+20]
  000e5	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000ea	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000ee	83 f8 40	 cmp	 eax, 64			; 00000040H
  000f1	74 6b		 je	 SHORT $LN254@operator
$LL4@operator:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000f3	85 ff		 test	 edi, edi
  000f5	7c 5f		 jl	 SHORT $LN3@operator
  000f7	7f 04		 jg	 SHORT $LN260@operator
  000f9	85 f6		 test	 esi, esi
  000fb	74 59		 je	 SHORT $LN3@operator
$LN260@operator:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),

  000fd	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ff	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00102	8a 4c 18 40	 mov	 cl, BYTE PTR [eax+ebx+64]
  00106	88 4d ef	 mov	 BYTE PTR $T5[ebp], cl
  00109	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0010d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00110	83 38 00	 cmp	 DWORD PTR [eax], 0
  00113	74 20		 je	 SHORT $LN69@operator
  00115	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00118	8b 02		 mov	 eax, DWORD PTR [edx]
  0011a	85 c0		 test	 eax, eax
  0011c	7e 17		 jle	 SHORT $LN69@operator
  0011e	48		 dec	 eax
  0011f	89 02		 mov	 DWORD PTR [edx], eax
  00121	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00124	8b 11		 mov	 edx, DWORD PTR [ecx]
  00126	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00129	89 01		 mov	 DWORD PTR [ecx], eax
  0012b	8a 45 ef	 mov	 al, BYTE PTR $T5[ebp]
  0012e	88 02		 mov	 BYTE PTR [edx], al
  00130	0f b6 c0	 movzx	 eax, al
  00133	eb 0a		 jmp	 SHORT $LN70@operator
$LN69@operator:
  00135	0f b6 45 ef	 movzx	 eax, BYTE PTR $T5[ebp]
  00139	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013b	50		 push	 eax
  0013c	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN70@operator:
  0013f	83 f8 ff	 cmp	 eax, -1
  00142	75 0a		 jne	 SHORT $LN2@operator
$LN261@operator:

; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  00144	b9 04 00 00 00	 mov	 ecx, 4

; 800  : 					break;

  00149	e9 96 00 00 00	 jmp	 $LN6@operator
$LN2@operator:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0014e	83 c6 ff	 add	 esi, -1
  00151	83 d7 ff	 adc	 edi, -1
  00154	eb 9d		 jmp	 SHORT $LL4@operator
$LN3@operator:
  00156	33 c9		 xor	 ecx, ecx

; 801  : 					}
; 802  : 
; 803  : 		if (_State == ios_base::goodbit
; 804  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00158	0f 85 86 00 00
	00		 jne	 $LN6@operator
$LN254@operator:
  0015e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00160	6a 00		 push	 0
  00162	ff 75 e8	 push	 DWORD PTR __Count$1$[ebp]
  00165	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00168	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0016b	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0016f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00171	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00174	ff d0		 call	 eax
  00176	3b 45 e8	 cmp	 eax, DWORD PTR __Count$1$[ebp]
  00179	75 c9		 jne	 SHORT $LN261@operator
  0017b	85 d2		 test	 edx, edx
  0017d	75 c5		 jne	 SHORT $LN261@operator
  0017f	90		 npad	 1
$LL263@operator:

; 805  : 			_State |= ios_base::badbit;
; 806  : 
; 807  : 		if (_State == ios_base::goodbit)
; 808  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00180	85 ff		 test	 edi, edi
  00182	7c 5e		 jl	 SHORT $LN266@operator
  00184	7f 04		 jg	 SHORT $LN262@operator
  00186	85 f6		 test	 esi, esi
  00188	74 58		 je	 SHORT $LN266@operator
$LN262@operator:

; 809  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0018a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0018c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018f	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00193	8a 54 18 40	 mov	 dl, BYTE PTR [eax+ebx+64]
  00197	88 55 0f	 mov	 BYTE PTR $T6[ebp], dl
  0019a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0019d	83 38 00	 cmp	 DWORD PTR [eax], 0
  001a0	74 23		 je	 SHORT $LN99@operator
  001a2	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  001a5	8b 00		 mov	 eax, DWORD PTR [eax]
  001a7	85 c0		 test	 eax, eax
  001a9	7e 1a		 jle	 SHORT $LN99@operator
  001ab	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001ae	48		 dec	 eax
  001af	89 02		 mov	 DWORD PTR [edx], eax
  001b1	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  001b4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  001b9	89 01		 mov	 DWORD PTR [ecx], eax
  001bb	8a 45 0f	 mov	 al, BYTE PTR $T6[ebp]
  001be	88 02		 mov	 BYTE PTR [edx], al
  001c0	0f b6 c0	 movzx	 eax, al
  001c3	eb 09		 jmp	 SHORT $LN100@operator
$LN99@operator:
  001c5	0f b6 c2	 movzx	 eax, dl
  001c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ca	50		 push	 eax
  001cb	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN100@operator:
  001ce	83 f8 ff	 cmp	 eax, -1
  001d1	75 07		 jne	 SHORT $LN5@operator

; 810  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 811  : 					{	// insertion failed, quit
; 812  : 					_State |= ios_base::badbit;

  001d3	33 c9		 xor	 ecx, ecx
  001d5	83 c9 04	 or	 ecx, 4

; 813  : 					break;

  001d8	eb 0a		 jmp	 SHORT $LN6@operator
$LN5@operator:

; 805  : 			_State |= ios_base::badbit;
; 806  : 
; 807  : 		if (_State == ios_base::goodbit)
; 808  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  001da	83 c6 ff	 add	 esi, -1
  001dd	83 d7 ff	 adc	 edi, -1
  001e0	eb 9e		 jmp	 SHORT $LL263@operator
$LN266@operator:
  001e2	33 c9		 xor	 ecx, ecx
$LN6@operator:

; 814  : 					}
; 815  : 		_Ostr.width(0);

  001e4	8b 03		 mov	 eax, DWORD PTR [ebx]
  001e6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e9	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  001f1	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
  001f9	eb 35		 jmp	 SHORT $LN273@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 816  : 		_CATCH_IO_(_Ostr)

  001fb	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001fe	8b 01		 mov	 eax, DWORD PTR [ecx]
  00200	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00203	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  00207	03 d1		 add	 edx, ecx
  00209	83 c8 04	 or	 eax, 4
  0020c	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00210	75 03		 jne	 SHORT $LN128@operator
  00212	83 c8 04	 or	 eax, 4
$LN128@operator:
  00215	83 e0 17	 and	 eax, 23			; 00000017H
  00218	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0021b	85 42 10	 test	 DWORD PTR [edx+16], eax
  0021e	0f 85 0e 01 00
	00		 jne	 $LN131@operator
  00224	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00229	c3		 ret	 0
$LN23@operator:
  0022a	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  0022d	8b 4d e4	 mov	 ecx, DWORD PTR __State$[ebp]
$LN273@operator:
  00230	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:

; 817  : 		}
; 818  : 
; 819  : 	_Ostr.setstate(_State);

  00237	8b 03		 mov	 eax, DWORD PTR [ebx]
  00239	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0023c	03 d3		 add	 edx, ebx
  0023e	85 c9		 test	 ecx, ecx
  00240	0f 84 a8 00 00
	00		 je	 $LN196@operator
  00246	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00249	0b c1		 or	 eax, ecx
  0024b	8b c8		 mov	 ecx, eax
  0024d	83 c9 04	 or	 ecx, 4
  00250	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00254	0f 45 c8	 cmovne	 ecx, eax
  00257	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0025a	83 e1 17	 and	 ecx, 23			; 00000017H
  0025d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00260	23 c1		 and	 eax, ecx
  00262	0f 84 86 00 00
	00		 je	 $LN196@operator
  00268	a8 04		 test	 al, 4
  0026a	74 2a		 je	 SHORT $LN193@operator
  0026c	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  00276	50		 push	 eax
  00277	6a 01		 push	 1
  00279	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  0027c	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00281	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00286	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp]
  00289	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00290	50		 push	 eax
  00291	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN274@operator:
$LN193@operator:
  00296	a8 02		 test	 al, 2
  00298	74 2a		 je	 SHORT $LN195@operator
  0029a	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  002a4	50		 push	 eax
  002a5	6a 01		 push	 1
  002a7	8d 4d b4	 lea	 ecx, DWORD PTR $T3[ebp]
  002aa	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  002af	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  002b4	8d 45 b4	 lea	 eax, DWORD PTR $T3[ebp]
  002b7	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN275@operator:
$LN195@operator:
  002c4	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  002c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  002ce	50		 push	 eax
  002cf	6a 01		 push	 1
  002d1	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  002d4	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  002d9	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  002de	8d 45 a0	 lea	 eax, DWORD PTR $T2[ebp]
  002e1	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN276@operator:
$LN196@operator:

; 820  : 	return (_Ostr);

  002ee	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  002f5	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  002fa	8b 75 dc	 mov	 esi, DWORD PTR __Ok$[ebp]
  002fd	84 c0		 test	 al, al
  002ff	75 07		 jne	 SHORT $LN237@operator
  00301	8b ce		 mov	 ecx, esi
  00303	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN237@operator:
  00308	8b 06		 mov	 eax, DWORD PTR [esi]
  0030a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0030e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00311	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00315	85 c9		 test	 ecx, ecx
  00317	74 05		 je	 SHORT $LN241@operator
  00319	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031b	ff 52 08	 call	 DWORD PTR [edx+8]
$LN241@operator:
  0031e	8b c3		 mov	 eax, ebx

; 821  : 	}

  00320	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00323	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0032a	59		 pop	 ecx
  0032b	5f		 pop	 edi
  0032c	5e		 pop	 esi
  0032d	5b		 pop	 ebx
  0032e	8b e5		 mov	 esp, ebp
  00330	5d		 pop	 ebp
  00331	c3		 ret	 0

; 816  : 		_CATCH_IO_(_Ostr)

$LN131@operator:
  00332	6a 00		 push	 0
  00334	6a 00		 push	 0
  00336	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN277@operator:
$LN269@operator:
  0033b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$36:
  00010	e8 00 00 00 00	 call	 ___std_terminate
  00015	c3		 ret	 0
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$37:
  00016	e8 00 00 00 00	 call	 ___std_terminate
  0001b	c3		 ret	 0
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2499 : 	{	// test for NTCS vs. string inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2500 : 	return (!(_Left == _Right));

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0000e	83 c4 08	 add	 esp, 8
  00011	84 c0		 test	 al, al
  00013	0f 94 c0	 sete	 al

; 2501 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0002d	56		 push	 esi
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0003b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00040	83 c4 04	 add	 esp, 4
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8d 71 98	 lea	 esi, DWORD PTR [ecx-104]
  00026	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0002b	8d 46 68	 lea	 eax, DWORD PTR [esi+104]
  0002e	50		 push	 eax
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@
  0003c	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00041	83 c4 04	 add	 esp, 4
  00044	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00048	74 0e		 je	 SHORT $LN13@scalar
  0004a	68 b0 00 00 00	 push	 176			; 000000b0H
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00058	8b c6		 mov	 eax, esi
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0002c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00031	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0003a	85 ff		 test	 edi, edi
  0003c	74 2a		 je	 SHORT $LN13@scalar
  0003e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	85 c9		 test	 ecx, ecx
  0004a	74 11		 je	 SHORT $LN19@scalar
  0004c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004e	ff 50 08	 call	 DWORD PTR [eax+8]
  00051	85 c0		 test	 eax, eax
  00053	74 08		 je	 SHORT $LN19@scalar
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	8b c8		 mov	 ecx, eax
  00059	6a 01		 push	 1
  0005b	ff 12		 call	 DWORD PTR [edx]
$LN19@scalar:
  0005d	6a 08		 push	 8
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00065	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00068	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0006c	74 0b		 je	 SHORT $LN22@scalar
  0006e	6a 44		 push	 68			; 00000044H
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN22@scalar:
  00079	8b c6		 mov	 eax, esi
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 354  : 		{	// convert open mode to stream state bits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]

; 355  : 		_Strstate _State = (_Strstate)0;
; 356  : 		if (!(_Mode & ios_base::in))
; 357  : 			_State |= _Noread;
; 358  : 		if (!(_Mode & ios_base::out))

  00007	8b c3		 mov	 eax, ebx
  00009	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  00010	f7 d1		 not	 ecx
  00012	83 e1 04	 and	 ecx, 4
  00015	8b d1		 mov	 edx, ecx
  00017	83 ca 02	 or	 edx, 2
  0001a	24 02		 and	 al, 2

; 359  : 			_State |= _Constant;
; 360  : 		if (_Mode & ios_base::app)

  0001c	8b c3		 mov	 eax, ebx
  0001e	0f 45 d1	 cmovne	 edx, ecx
  00021	8b ca		 mov	 ecx, edx
  00023	83 c9 08	 or	 ecx, 8
  00026	24 08		 and	 al, 8
  00028	0f 44 ca	 cmove	 ecx, edx
  0002b	8b c1		 mov	 eax, ecx
  0002d	83 c8 10	 or	 eax, 16			; 00000010H

; 361  : 			_State |= _Append;
; 362  : 		if (_Mode & ios_base::ate)

  00030	80 e3 04	 and	 bl, 4
  00033	5b		 pop	 ebx
  00034	0f 44 c1	 cmove	 eax, ecx

; 363  : 			_State |= _Atend;
; 364  : 		return (_State);
; 365  : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 337  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 338  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00007	74 4d		 je	 SHORT $LN25@Tidy

; 339  : 			_Al.deallocate(_Mysb::eback(),

  00009	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 09		 je	 SHORT $LN4@Tidy
  00012	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	03 d1		 add	 edx, ecx
  00019	eb 0a		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  0001b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	03 11		 add	 edx, DWORD PTR [ecx]
$LN5@Tidy:
  00025	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	2b d0		 sub	 edx, eax
  0002c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00032	72 19		 jb	 SHORT $LN20@Tidy
  00034	a8 1f		 test	 al, 31			; 0000001fH
  00036	75 61		 jne	 SHORT $LN33@Tidy
  00038	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003b	3b c8		 cmp	 ecx, eax
  0003d	73 5f		 jae	 SHORT $LN35@Tidy
  0003f	2b c1		 sub	 eax, ecx
  00041	83 f8 04	 cmp	 eax, 4
  00044	72 5d		 jb	 SHORT $LN36@Tidy
  00046	83 f8 23	 cmp	 eax, 35			; 00000023H
  00049	77 5d		 ja	 SHORT $LN37@Tidy
  0004b	8b c1		 mov	 eax, ecx
$LN20@Tidy:
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00053	83 c4 04	 add	 esp, 4
$LN25@Tidy:

; 340  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 341  : 					: _Mysb::egptr()) - _Mysb::eback());
; 342  : 		_Mysb::setg(0, 0, 0);

  00056	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0005f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00062	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00068	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0006b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 343  : 		_Mysb::setp(0, 0);

  00071	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0007a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00083	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00086	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 344  : 		_Seekhigh = 0;
; 345  : 		_Mystate &= ~_Allocated;

  0008c	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  00090	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00097	5e		 pop	 esi

; 346  : 		}

  00098	c3		 ret	 0
$LN33@Tidy:

; 339  : 			_Al.deallocate(_Mysb::eback(),

  00099	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN38@Tidy:
$LN35@Tidy:
  0009e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@Tidy:
$LN36@Tidy:
  000a3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN40@Tidy:
$LN37@Tidy:
  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN41@Tidy:
$LN32@Tidy:
  000ad	cc		 int	 3
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 310  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 		_Seekhigh = 0;
; 312  : 		_Mystate = _State;

  00003	8b 45 10	 mov	 eax, DWORD PTR __State$[ebp]
  00006	53		 push	 ebx

; 313  : 
; 314  : 		if (_Count != 0
; 315  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00014	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00017	85 db		 test	 ebx, ebx
  00019	74 7e		 je	 SHORT $LN2@Init
  0001b	83 e0 06	 and	 eax, 6
  0001e	3c 06		 cmp	 al, 6
  00020	74 77		 je	 SHORT $LN2@Init

; 316  : 			{	// finite buffer that can be read or written, set it up
; 317  : 			_Elem *_Pnew = _Al.allocate(_Count);

  00022	57		 push	 edi
  00023	53		 push	 ebx
  00024	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00027	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 318  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  0002c	53		 push	 ebx
  0002d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00030	8b f8		 mov	 edi, eax
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _memcpy
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 319  : 			_Seekhigh = _Pnew + _Count;

  0003b	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]

; 320  : 
; 321  : 			if (!(_Mystate & _Noread))

  0003e	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  00042	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00045	75 0f		 jne	 SHORT $LN3@Init

; 322  : 				_Mysb::setg(_Pnew, _Pnew,

  00047	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0004a	89 38		 mov	 DWORD PTR [eax], edi
  0004c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004f	89 38		 mov	 DWORD PTR [eax], edi
  00051	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00054	89 18		 mov	 DWORD PTR [eax], ebx
$LN3@Init:

; 323  : 					_Pnew + _Count);	// setup read buffer
; 324  : 			if (!(_Mystate & _Constant))

  00056	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00059	a8 02		 test	 al, 2
  0005b	75 37		 jne	 SHORT $LN5@Init

; 325  : 				{	// setup write buffer, and maybe read buffer
; 326  : 				_Mysb::setp(_Pnew,

  0005d	a8 18		 test	 al, 24			; 00000018H
  0005f	8b d7		 mov	 edx, edi
  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	0f 45 d1	 cmovne	 edx, ecx
  00067	8b cf		 mov	 ecx, edi
  00069	2b ca		 sub	 ecx, edx
  0006b	03 cb		 add	 ecx, ebx
  0006d	89 38		 mov	 DWORD PTR [eax], edi
  0006f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00072	89 10		 mov	 DWORD PTR [eax], edx
  00074	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00077	89 08		 mov	 DWORD PTR [eax], ecx

; 327  : 					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
; 328  : 					_Pnew + _Count);
; 329  : 				if (_Mysb::gptr() == 0)

  00079	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0007c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007f	75 13		 jne	 SHORT $LN5@Init

; 330  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00081	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00084	89 38		 mov	 DWORD PTR [eax], edi
  00086	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00089	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0008f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00092	89 38		 mov	 DWORD PTR [eax], edi
$LN5@Init:

; 331  : 				}
; 332  : 			_Mystate |= _Allocated;

  00094	83 4e 3c 01	 or	 DWORD PTR [esi+60], 1
  00098	5f		 pop	 edi
$LN2@Init:
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 333  : 			}
; 334  : 		}

  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
tv282 = -4						; size = 4
tv235 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
tv278 = 36						; size = 4
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 276  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 277  : 		streamoff _Off = (streamoff)_Ptr;

  00005	8b 5d 18	 mov	 ebx, DWORD PTR __Ptr$[ebp+12]
  00008	56		 push	 esi
  00009	8b 75 14	 mov	 esi, DWORD PTR __Ptr$[ebp+8]
  0000c	03 75 0c	 add	 esi, DWORD PTR __Ptr$[ebp]
  0000f	57		 push	 edi
  00010	13 5d 10	 adc	 ebx, DWORD PTR __Ptr$[ebp+4]
  00013	8b f9		 mov	 edi, ecx

; 278  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00015	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	85 c0		 test	 eax, eax
  0001c	74 08		 je	 SHORT $LN2@seekpos
  0001e	39 47 38	 cmp	 DWORD PTR [edi+56], eax
  00021	73 03		 jae	 SHORT $LN2@seekpos

; 279  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00023	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN2@seekpos:

; 280  : 
; 281  : 		if (_Off == _BADOFF)

  00026	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
  0002b	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  00031	75 08		 jne	 SHORT $LN55@seekpos
  00033	3b d8		 cmp	 ebx, eax
  00035	0f 84 c0 00 00
	00		 je	 $LN11@seekpos
$LN55@seekpos:

; 282  : 			;
; 283  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  0003b	8b 4d 24	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0003e	f6 c1 01	 test	 cl, 1
  00041	74 74		 je	 SHORT $LN5@seekpos
  00043	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	89 45 fc	 mov	 DWORD PTR tv235[ebp], eax
  0004b	85 c0		 test	 eax, eax
  0004d	74 63		 je	 SHORT $LN60@seekpos

; 284  : 			{	// position within read buffer
; 285  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0004f	85 db		 test	 ebx, ebx
  00051	7c 57		 jl	 SHORT $LN7@seekpos
  00053	7f 04		 jg	 SHORT $LN56@seekpos
  00055	85 f6		 test	 esi, esi
  00057	72 51		 jb	 SHORT $LN7@seekpos
$LN56@seekpos:
  00059	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00061	2b c1		 sub	 eax, ecx
  00063	99		 cdq
  00064	3b da		 cmp	 ebx, edx
  00066	7f 42		 jg	 SHORT $LN7@seekpos
  00068	7c 04		 jl	 SHORT $LN57@seekpos
  0006a	3b f0		 cmp	 esi, eax
  0006c	77 3c		 ja	 SHORT $LN7@seekpos
$LN57@seekpos:

; 286  : 				{	// change read position
; 287  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0006e	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00071	2b 4d fc	 sub	 ecx, DWORD PTR tv235[ebp]
  00074	03 ce		 add	 ecx, esi
  00076	29 08		 sub	 DWORD PTR [eax], ecx
  00078	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0007b	01 08		 add	 DWORD PTR [eax], ecx

; 288  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0007d	f6 45 24 02	 test	 BYTE PTR __Mode$[ebp], 2
  00081	74 78		 je	 SHORT $LN11@seekpos
  00083	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00086	8b 00		 mov	 eax, DWORD PTR [eax]
  00088	89 45 24	 mov	 DWORD PTR tv278[ebp], eax
  0008b	85 c0		 test	 eax, eax
  0008d	74 6c		 je	 SHORT $LN11@seekpos

; 289  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  0008f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00092	8b 10		 mov	 edx, DWORD PTR [eax]
  00094	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0009c	03 4d 24	 add	 ecx, DWORD PTR tv278[ebp]
  0009f	2b ca		 sub	 ecx, edx
  000a1	89 10		 mov	 DWORD PTR [eax], edx
  000a3	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000a6	89 08		 mov	 DWORD PTR [eax], ecx

; 290  : 						_Mysb::epptr());	// change write position to match
; 291  : 				}
; 292  : 			else

  000a8	eb 51		 jmp	 SHORT $LN11@seekpos
$LN7@seekpos:

; 293  : 				_Off = _BADOFF;

  000aa	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?_BADOFF@std@@3_JB+4
  000b0	eb 43		 jmp	 SHORT $LN61@seekpos
$LN60@seekpos:
  000b2	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
$LN5@seekpos:

; 294  : 			}
; 295  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  000b7	f6 c1 02	 test	 cl, 2
  000ba	74 37		 je	 SHORT $LN10@seekpos
  000bc	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000bf	74 32		 je	 SHORT $LN10@seekpos

; 296  : 			{	// position within write buffer
; 297  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  000c1	85 db		 test	 ebx, ebx
  000c3	7c e5		 jl	 SHORT $LN7@seekpos
  000c5	7f 04		 jg	 SHORT $LN58@seekpos
  000c7	85 f6		 test	 esi, esi
  000c9	72 df		 jb	 SHORT $LN7@seekpos
$LN58@seekpos:
  000cb	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  000d3	2b c1		 sub	 eax, ecx
  000d5	99		 cdq
  000d6	3b da		 cmp	 ebx, edx
  000d8	7f d0		 jg	 SHORT $LN7@seekpos
  000da	7c 04		 jl	 SHORT $LN59@seekpos
  000dc	3b f0		 cmp	 esi, eax
  000de	77 ca		 ja	 SHORT $LN7@seekpos
$LN59@seekpos:

; 298  : 				_Mysb::pbump((int)(_Mysb::eback()

  000e0	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000e3	2b 08		 sub	 ecx, DWORD PTR [eax]
  000e5	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000e8	03 ce		 add	 ecx, esi
  000ea	29 08		 sub	 DWORD PTR [eax], ecx
  000ec	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000ef	01 08		 add	 DWORD PTR [eax], ecx

; 299  : 					- _Mysb::pptr() + _Off));	// change write position
; 300  : 			else

  000f1	eb 08		 jmp	 SHORT $LN11@seekpos
$LN10@seekpos:

; 301  : 				_Off = _BADOFF;
; 302  : 			}
; 303  : 		else
; 304  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  000f3	8b d8		 mov	 ebx, eax
$LN61@seekpos:
  000f5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
$LN11@seekpos:

; 305  : 		return (streampos(_Off));

  000fb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000fe	0f 57 c0	 xorps	 xmm0, xmm0
  00101	5f		 pop	 edi
  00102	89 30		 mov	 DWORD PTR [eax], esi
  00104	89 58 04	 mov	 DWORD PTR [eax+4], ebx
  00107	5e		 pop	 esi
  00108	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0010f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00116	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  0011b	5b		 pop	 ebx

; 306  : 		}

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
tv265 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
tv276 = 20						; size = 4
__Way$ = 20						; size = 4
tv271 = 24						; size = 4
tv270 = 24						; size = 4
__Which$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 227  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 228  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00009	8b 53 20	 mov	 edx, DWORD PTR [ebx+32]
  0000c	8b 02		 mov	 eax, DWORD PTR [edx]
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN2@seekoff
  00012	39 43 38	 cmp	 DWORD PTR [ebx+56], eax
  00015	73 03		 jae	 SHORT $LN2@seekoff

; 229  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00017	89 43 38	 mov	 DWORD PTR [ebx+56], eax
$LN2@seekoff:

; 230  : 
; 231  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  0001a	8b 4d 18	 mov	 ecx, DWORD PTR __Which$[ebp]
  0001d	f6 c1 01	 test	 cl, 1
  00020	0f 84 d9 00 00
	00		 je	 $LN3@seekoff
  00026	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00029	8b 30		 mov	 esi, DWORD PTR [eax]
  0002b	89 75 fc	 mov	 DWORD PTR tv265[ebp], esi
  0002e	85 f6		 test	 esi, esi
  00030	0f 84 c9 00 00
	00		 je	 $LN3@seekoff

; 232  : 			{	// position within read buffer
; 233  : 			if (_Way == ios_base::end)

  00036	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00039	83 f8 02	 cmp	 eax, 2
  0003c	75 15		 jne	 SHORT $LN5@seekoff

; 234  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0003e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00041	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  00044	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00047	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  0004a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0004c	99		 cdq
  0004d	03 f0		 add	 esi, eax
  0004f	13 fa		 adc	 edi, edx

; 235  : 			else if (_Way == ios_base::cur

  00051	eb 36		 jmp	 SHORT $LN9@seekoff
$LN5@seekoff:

; 236  : 				&& (_Which & ios_base::out) == 0)

  00053	83 f8 01	 cmp	 eax, 1
  00056	75 19		 jne	 SHORT $LN7@seekoff
  00058	f6 c1 02	 test	 cl, 2
  0005b	75 18		 jne	 SHORT $LN74@seekoff

; 237  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  0005d	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00060	8b c6		 mov	 eax, esi
  00062	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00065	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00068	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006a	99		 cdq
  0006b	03 f0		 add	 esi, eax
  0006d	13 fa		 adc	 edi, edx
  0006f	eb 18		 jmp	 SHORT $LN9@seekoff
$LN7@seekoff:

; 238  : 			else if (_Way != ios_base::beg)

  00071	85 c0		 test	 eax, eax
  00073	74 0e		 je	 SHORT $LN79@seekoff
$LN74@seekoff:

; 239  : 				_Off = _BADOFF;

  00075	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  0007b	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
  00081	eb 06		 jmp	 SHORT $LN9@seekoff
$LN79@seekoff:
  00083	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00086	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
$LN9@seekoff:

; 240  : 
; 241  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00089	85 ff		 test	 edi, edi
  0008b	0f 8c 0a 01 00
	00		 jl	 $LN10@seekoff
  00091	7f 08		 jg	 SHORT $LN75@seekoff
  00093	85 f6		 test	 esi, esi
  00095	0f 82 00 01 00
	00		 jb	 $LN10@seekoff
$LN75@seekoff:
  0009b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  000a3	2b c1		 sub	 eax, ecx
  000a5	99		 cdq
  000a6	3b fa		 cmp	 edi, edx
  000a8	0f 8f ed 00 00
	00		 jg	 $LN10@seekoff
  000ae	7c 08		 jl	 SHORT $LN76@seekoff
  000b0	3b f0		 cmp	 esi, eax
  000b2	0f 87 e3 00 00
	00		 ja	 $LN10@seekoff
$LN76@seekoff:

; 242  : 				{	// change read position
; 243  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  000b8	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000bb	2b 4d fc	 sub	 ecx, DWORD PTR tv265[ebp]
  000be	03 ce		 add	 ecx, esi
  000c0	29 08		 sub	 DWORD PTR [eax], ecx
  000c2	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  000c5	01 08		 add	 DWORD PTR [eax], ecx

; 244  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000c7	f6 45 18 02	 test	 BYTE PTR __Which$[ebp], 2
  000cb	0f 84 d6 00 00
	00		 je	 $LN22@seekoff
  000d1	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
  000d6	89 45 18	 mov	 DWORD PTR tv271[ebp], eax
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 c6 00 00
	00		 je	 $LN22@seekoff

; 245  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  000e1	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  000e4	8b 10		 mov	 edx, DWORD PTR [eax]
  000e6	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000ee	03 4d 18	 add	 ecx, DWORD PTR tv271[ebp]
  000f1	2b ca		 sub	 ecx, edx
  000f3	89 10		 mov	 DWORD PTR [eax], edx
  000f5	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  000f8	89 08		 mov	 DWORD PTR [eax], ecx

; 246  : 						_Mysb::epptr());	// change write position to match
; 247  : 				}
; 248  : 			else

  000fa	e9 a8 00 00 00	 jmp	 $LN22@seekoff
$LN3@seekoff:

; 249  : 				_Off = _BADOFF;
; 250  : 			}
; 251  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  000ff	f6 c1 02	 test	 cl, 2
  00102	0f 84 87 00 00
	00		 je	 $LN13@seekoff
  00108	8b 12		 mov	 edx, DWORD PTR [edx]
  0010a	89 55 18	 mov	 DWORD PTR tv270[ebp], edx
  0010d	85 d2		 test	 edx, edx
  0010f	74 7e		 je	 SHORT $LN13@seekoff

; 252  : 			{	// position within write buffer
; 253  : 			if (_Way == ios_base::end)

  00111	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00114	83 f8 02	 cmp	 eax, 2
  00117	75 15		 jne	 SHORT $LN15@seekoff

; 254  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  00119	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0011c	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  0011f	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00122	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00125	2b 01		 sub	 eax, DWORD PTR [ecx]
  00127	99		 cdq
  00128	03 f0		 add	 esi, eax
  0012a	13 fa		 adc	 edi, edx
  0012c	eb 31		 jmp	 SHORT $LN19@seekoff
$LN15@seekoff:

; 255  : 			else if (_Way == ios_base::cur)

  0012e	83 f8 01	 cmp	 eax, 1
  00131	75 14		 jne	 SHORT $LN17@seekoff

; 256  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  00133	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00136	8b c2		 mov	 eax, edx
  00138	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  0013b	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  0013e	2b 01		 sub	 eax, DWORD PTR [ecx]
  00140	99		 cdq
  00141	03 f0		 add	 esi, eax
  00143	13 fa		 adc	 edi, edx
  00145	eb 18		 jmp	 SHORT $LN19@seekoff
$LN17@seekoff:

; 257  : 			else if (_Way != ios_base::beg)

  00147	85 c0		 test	 eax, eax
  00149	74 0e		 je	 SHORT $LN80@seekoff

; 258  : 				_Off = _BADOFF;

  0014b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  00151	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
  00157	eb 06		 jmp	 SHORT $LN19@seekoff
$LN80@seekoff:
  00159	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  0015c	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
$LN19@seekoff:

; 259  : 
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0015f	85 ff		 test	 edi, edi
  00161	7c 38		 jl	 SHORT $LN10@seekoff
  00163	7f 04		 jg	 SHORT $LN77@seekoff
  00165	85 f6		 test	 esi, esi
  00167	72 32		 jb	 SHORT $LN10@seekoff
$LN77@seekoff:
  00169	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
  00171	2b c1		 sub	 eax, ecx
  00173	99		 cdq
  00174	3b fa		 cmp	 edi, edx
  00176	7f 23		 jg	 SHORT $LN10@seekoff
  00178	7c 04		 jl	 SHORT $LN78@seekoff
  0017a	3b f0		 cmp	 esi, eax
  0017c	77 1d		 ja	 SHORT $LN10@seekoff
$LN78@seekoff:

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()

  0017e	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00181	2b 4d 18	 sub	 ecx, DWORD PTR tv270[ebp]
  00184	03 ce		 add	 ecx, esi
  00186	29 08		 sub	 DWORD PTR [eax], ecx
  00188	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0018b	01 08		 add	 DWORD PTR [eax], ecx

; 262  : 					- _Mysb::pptr() + _Off));	// change write position
; 263  : 			else

  0018d	eb 18		 jmp	 SHORT $LN22@seekoff
$LN13@seekoff:

; 264  : 				_Off = _BADOFF;
; 265  : 			}
; 266  : 
; 267  : 		else if (_Off != 0)

  0018f	8b 75 0c	 mov	 esi, DWORD PTR __Off$[ebp]
  00192	8b c6		 mov	 eax, esi
  00194	8b 7d 10	 mov	 edi, DWORD PTR __Off$[ebp+4]
  00197	0b c7		 or	 eax, edi
  00199	74 0c		 je	 SHORT $LN22@seekoff
$LN10@seekoff:

; 268  : 
; 269  : 
; 270  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  0019b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_BADOFF@std@@3_JB
  001a1	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?_BADOFF@std@@3_JB+4
$LN22@seekoff:

; 271  : 		return (pos_type(_Off));

  001a7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001aa	0f 57 c0	 xorps	 xmm0, xmm0
  001ad	89 78 04	 mov	 DWORD PTR [eax+4], edi
  001b0	5f		 pop	 edi
  001b1	89 30		 mov	 DWORD PTR [eax], esi
  001b3	5e		 pop	 esi
  001b4	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  001bb	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  001c2	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  001c7	5b		 pop	 ebx

; 272  : 		}

  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 207  : 		{	// get an element from stream, but don't point past it

  00000	56		 push	 esi

; 208  : 		if (_Mysb::gptr() == 0)

  00001	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]
  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	85 d2		 test	 edx, edx
  00008	75 05		 jne	 SHORT $LN2@underflow

; 209  : 			return (_Traits::eof());	// no character buffer, fail

  0000a	83 c8 ff	 or	 eax, -1
  0000d	5e		 pop	 esi

; 221  : 			}
; 222  : 		}

  0000e	c3		 ret	 0
$LN2@underflow:
  0000f	57		 push	 edi

; 210  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00010	8b 79 2c	 mov	 edi, DWORD PTR [ecx+44]
  00013	8b 07		 mov	 eax, DWORD PTR [edi]
  00015	03 c2		 add	 eax, edx
  00017	3b d0		 cmp	 edx, eax
  00019	73 06		 jae	 SHORT $LN4@underflow

; 211  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0001b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 221  : 			}
; 222  : 		}

  00020	c3		 ret	 0
$LN4@underflow:

; 212  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0
; 213  : 			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))

  00021	f6 41 3c 04	 test	 BYTE PTR [ecx+60], 4
  00025	75 2c		 jne	 SHORT $LN8@underflow
  00027	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	85 c0		 test	 eax, eax
  0002e	74 23		 je	 SHORT $LN8@underflow
  00030	3b c2		 cmp	 eax, edx
  00032	77 05		 ja	 SHORT $LN6@underflow
  00034	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00037	76 1a		 jbe	 SHORT $LN8@underflow
$LN6@underflow:

; 215  : 		else
; 216  : 			{	// extend read buffer into written area, then return buffered
; 217  : 			if (_Seekhigh < _Mysb::pptr())

  00039	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  0003c	73 03		 jae	 SHORT $LN9@underflow

; 218  : 				_Seekhigh = _Mysb::pptr();

  0003e	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN9@underflow:

; 219  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00041	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00044	2b 06		 sub	 eax, DWORD PTR [esi]
  00046	89 07		 mov	 DWORD PTR [edi], eax

; 220  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00048	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 221  : 			}
; 222  : 		}

  00052	c3		 ret	 0
$LN8@underflow:
  00053	5f		 pop	 edi

; 214  : 			return (_Traits::eof());	// can't read, fail

  00054	83 c8 ff	 or	 eax, -1
  00057	5e		 pop	 esi

; 221  : 			}
; 222  : 		}

  00058	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 190  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx
  00005	56		 push	 esi

; 191  : 		if (_Mysb::gptr() == 0
; 192  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 193  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00006	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	85 f6		 test	 esi, esi
  0000d	74 40		 je	 SHORT $LN4@pbackfail
  0000f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00012	3b 30		 cmp	 esi, DWORD PTR [eax]
  00014	76 39		 jbe	 SHORT $LN4@pbackfail
  00016	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00019	83 f9 ff	 cmp	 ecx, -1
  0001c	74 0b		 je	 SHORT $LN2@pbackfail
  0001e	3a 4e ff	 cmp	 cl, BYTE PTR [esi-1]
  00021	74 06		 je	 SHORT $LN2@pbackfail
  00023	f6 42 3c 02	 test	 BYTE PTR [edx+60], 2
  00027	75 26		 jne	 SHORT $LN4@pbackfail
$LN2@pbackfail:

; 197  : 		else
; 198  : 			{	// back up one position and store put-back character
; 199  : 			_Mysb::gbump(-1);

  00029	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0002c	ff 00		 inc	 DWORD PTR [eax]
  0002e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00031	ff 08		 dec	 DWORD PTR [eax]

; 200  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00033	83 f9 ff	 cmp	 ecx, -1
  00036	74 0e		 je	 SHORT $LN45@pbackfail

; 201  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00038	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0003b	5e		 pop	 esi
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	88 08		 mov	 BYTE PTR [eax], cl

; 202  : 			return (_Traits::not_eof(_Meta));

  00040	8b c1		 mov	 eax, ecx

; 203  : 			}
; 204  : 		}

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4

; 202  : 			return (_Traits::not_eof(_Meta));

$LN45@pbackfail:
  00046	33 c9		 xor	 ecx, ecx
  00048	8b c1		 mov	 eax, ecx
  0004a	5e		 pop	 esi

; 203  : 			}
; 204  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN4@pbackfail:

; 194  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 195  : 			&& _Mystate & _Constant))
; 196  : 			return (_Traits::eof());	// can't put back, fail

  0004f	83 c8 ff	 or	 eax, -1
  00052	5e		 pop	 esi

; 203  : 			}
; 204  : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
tv598 = -8						; size = 4
__Newsize$1$ = -8					; size = 4
__Oldptr$1$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 120  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 121  : 		if (_Mystate & _Constant)

  00009	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0000c	a8 02		 test	 al, 2
  0000e	74 0a		 je	 SHORT $LN4@overflow

; 122  : 			return (_Traits::eof());	// array nonmutable, fail

  00010	83 c8 ff	 or	 eax, -1
  00013	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@overflow:
  0001a	53		 push	 ebx

; 123  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0001b	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  0001e	83 fb ff	 cmp	 ebx, -1
  00021	75 0a		 jne	 SHORT $LN6@overflow

; 124  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00023	5b		 pop	 ebx
  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN6@overflow:
  0002d	57		 push	 edi

; 125  : 
; 126  : 		if (_Mystate & _Append
; 127  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  0002e	a8 08		 test	 al, 8
  00030	74 23		 je	 SHORT $LN7@overflow
  00032	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	85 d2		 test	 edx, edx
  00039	74 1a		 je	 SHORT $LN7@overflow
  0003b	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]
  0003e	3b d7		 cmp	 edx, edi
  00040	73 13		 jae	 SHORT $LN7@overflow

; 128  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  00042	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004a	03 ca		 add	 ecx, edx
  0004c	2b cf		 sub	 ecx, edi
  0004e	89 38		 mov	 DWORD PTR [eax], edi
  00050	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00053	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@overflow:

; 129  : 
; 130  : 		if (_Mysb::pptr() != 0
; 131  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00055	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	85 d2		 test	 edx, edx
  0005c	74 2a		 je	 SHORT $LN119@overflow
  0005e	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  00061	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00063	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00066	3b d0		 cmp	 edx, eax
  00068	73 1a		 jae	 SHORT $LN8@overflow

; 132  : 			{	// room in buffer, store it
; 133  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0006a	49		 dec	 ecx

; 134  : 			return (_Meta);

  0006b	8b c3		 mov	 eax, ebx
  0006d	89 0f		 mov	 DWORD PTR [edi], ecx
  0006f	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00072	5f		 pop	 edi
  00073	8b 32		 mov	 esi, DWORD PTR [edx]
  00075	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00078	89 0a		 mov	 DWORD PTR [edx], ecx
  0007a	88 1e		 mov	 BYTE PTR [esi], bl
  0007c	5b		 pop	 ebx
  0007d	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN8@overflow:

; 135  : 			}
; 136  : 		else
; 137  : 			{	// grow buffer and store element
; 138  : 			size_t _Oldsize = _Mysb::pptr() == 0

  00084	85 d2		 test	 edx, edx
  00086	75 04		 jne	 SHORT $LN20@overflow
$LN119@overflow:
  00088	33 ff		 xor	 edi, edi
  0008a	eb 0c		 jmp	 SHORT $LN21@overflow
$LN20@overflow:
  0008c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0008f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00092	8b 38		 mov	 edi, DWORD PTR [eax]
  00094	2b 39		 sub	 edi, DWORD PTR [ecx]
  00096	03 fa		 add	 edi, edx
$LN21@overflow:

; 139  : 				? 0 : _Mysb::epptr() - _Mysb::eback();
; 140  : 			size_t _Newsize = _Oldsize;
; 141  : 			size_t _Inc = _Newsize / 2 < _MINSIZE

  00098	8b cf		 mov	 ecx, edi
  0009a	d1 e9		 shr	 ecx, 1
  0009c	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0009f	73 07		 jae	 SHORT $LN22@overflow
  000a1	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000a6	eb 08		 jmp	 SHORT $LL2@overflow
$LN22@overflow:

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000a8	85 c9		 test	 ecx, ecx
  000aa	74 17		 je	 SHORT $LN121@overflow
  000ac	0f 1f 40 00	 npad	 4
$LL2@overflow:
  000b0	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000b5	2b c1		 sub	 eax, ecx
  000b7	3b c7		 cmp	 eax, edi
  000b9	73 04		 jae	 SHORT $LN114@overflow

; 145  : 				_Inc /= 2;	// increment causes overflow, halve it

  000bb	d1 e9		 shr	 ecx, 1

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  000bd	75 f1		 jne	 SHORT $LL2@overflow
$LN114@overflow:

; 146  : 			if (_Inc == 0)

  000bf	85 c9		 test	 ecx, ecx
  000c1	75 0c		 jne	 SHORT $LN10@overflow
$LN121@overflow:
  000c3	5f		 pop	 edi
  000c4	5b		 pop	 ebx

; 147  : 				return (_Traits::eof());	// buffer can't grow, fail

  000c5	83 c8 ff	 or	 eax, -1
  000c8	5e		 pop	 esi

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
$LN10@overflow:

; 148  : 
; 149  : 			_Newsize += _Inc;

  000cf	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]

; 150  : 
; 151  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  000d2	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  000d5	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 152  : 			_Elem *_Oldptr = _Mysb::eback();

  000de	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000e1	8b d8		 mov	 ebx, eax
  000e3	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000e5	89 4d fc	 mov	 DWORD PTR __Oldptr$1$[ebp], ecx

; 153  : 
; 154  : 			if (0 < _Oldsize)

  000e8	85 ff		 test	 edi, edi
  000ea	74 12		 je	 SHORT $LN123@overflow

; 155  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  000ec	57		 push	 edi
  000ed	51		 push	 ecx
  000ee	53		 push	 ebx
  000ef	e8 00 00 00 00	 call	 _memcpy
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __Oldptr$1$[ebp]
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 156  : 
; 157  : 			if (_Oldsize == 0)

  000fa	85 ff		 test	 edi, edi
  000fc	75 3d		 jne	 SHORT $LN12@overflow
$LN123@overflow:

; 158  : 				{	// first growth, set up pointers
; 159  : 				_Seekhigh = _Newptr;
; 160  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  000fe	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00101	8b 55 f8	 mov	 edx, DWORD PTR __Newsize$1$[ebp]
  00104	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  00107	89 18		 mov	 DWORD PTR [eax], ebx
  00109	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0010c	89 18		 mov	 DWORD PTR [eax], ebx
  0010e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00111	89 10		 mov	 DWORD PTR [eax], edx

; 161  : 				if (_Mystate & _Noread)
; 162  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00113	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00116	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  0011a	89 18		 mov	 DWORD PTR [eax], ebx
  0011c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0011f	74 0d		 je	 SHORT $LN14@overflow
  00121	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00127	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0012a	89 18		 mov	 DWORD PTR [eax], ebx

; 163  : 				else

  0012c	eb 74		 jmp	 SHORT $LN17@overflow
$LN14@overflow:

; 164  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  0012e	89 18		 mov	 DWORD PTR [eax], ebx
  00130	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00133	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 165  : 				}
; 166  : 			else

  00139	eb 67		 jmp	 SHORT $LN17@overflow
$LN12@overflow:

; 167  : 				{	// not first growth, adjust pointers
; 168  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  0013b	8b c3		 mov	 eax, ebx
  0013d	2b c1		 sub	 eax, ecx
  0013f	01 46 38	 add	 DWORD PTR [esi+56], eax

; 169  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),

  00142	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00145	8b 10		 mov	 edx, DWORD PTR [eax]
  00147	8b c3		 mov	 eax, ebx
  00149	2b 45 fc	 sub	 eax, DWORD PTR __Oldptr$1$[ebp]
  0014c	2b d1		 sub	 edx, ecx
  0014e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00151	03 d3		 add	 edx, ebx
  00153	01 01		 add	 DWORD PTR [ecx], eax
  00155	8b cb		 mov	 ecx, ebx
  00157	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0015a	2b ca		 sub	 ecx, edx
  0015c	03 4d f8	 add	 ecx, DWORD PTR __Newsize$1$[ebp]
  0015f	89 10		 mov	 DWORD PTR [eax], edx
  00161	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00164	89 08		 mov	 DWORD PTR [eax], ecx

; 170  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 171  : 					_Newptr + _Newsize);
; 172  : 				if (_Mystate & _Noread)

  00166	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  0016a	74 15		 je	 SHORT $LN16@overflow

; 173  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0016c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0016f	89 18		 mov	 DWORD PTR [eax], ebx
  00171	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00174	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0017a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0017d	89 18		 mov	 DWORD PTR [eax], ebx

; 174  : 				else

  0017f	eb 21		 jmp	 SHORT $LN17@overflow
$LN16@overflow:

; 175  : 					_Mysb::setg(_Newptr,

  00181	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00184	8b 10		 mov	 edx, DWORD PTR [eax]
  00186	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00189	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0018e	2b 4d fc	 sub	 ecx, DWORD PTR __Oldptr$1$[ebp]
  00191	03 cb		 add	 ecx, ebx
  00193	2b d1		 sub	 edx, ecx
  00195	89 18		 mov	 DWORD PTR [eax], ebx
  00197	42		 inc	 edx
  00198	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0019b	89 08		 mov	 DWORD PTR [eax], ecx
  0019d	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001a0	89 10		 mov	 DWORD PTR [eax], edx
$LN17@overflow:

; 176  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 177  : 						_Mysb::pptr() + 1);
; 178  : 				}
; 179  : 
; 180  : 			if (_Mystate & _Allocated)

  001a2	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  001a6	74 0c		 je	 SHORT $LN18@overflow

; 181  : 				_Al.deallocate(_Oldptr, _Oldsize);

  001a8	57		 push	 edi
  001a9	ff 75 fc	 push	 DWORD PTR __Oldptr$1$[ebp]
  001ac	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  001af	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN18@overflow:

; 182  : 			_Mystate |= _Allocated;
; 183  : 
; 184  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  001b4	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  001b7	83 4e 3c 01	 or	 DWORD PTR [esi+60], 1
  001bb	5f		 pop	 edi
  001bc	5b		 pop	 ebx
  001bd	ff 08		 dec	 DWORD PTR [eax]
  001bf	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  001c2	5e		 pop	 esi
  001c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c5	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  001c8	89 01		 mov	 DWORD PTR [ecx], eax
  001ca	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  001cd	88 02		 mov	 BYTE PTR [edx], al

; 185  : 			return (_Meta);
; 186  : 			}
; 187  : 		}

  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
__Nul$2 = -28						; size = 24
__Str$3 = -28						; size = 24
__Str$4 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 93   : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b d1		 mov	 edx, ecx
  00012	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00019	56		 push	 esi
  0001a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  0001d	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00020	f6 c1 02	 test	 cl, 2
  00023	75 7c		 jne	 SHORT $LN2@str
  00025	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	85 c0		 test	 eax, eax
  0002c	74 73		 je	 SHORT $LN2@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()

  0002e	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00031	3b c8		 cmp	 ecx, eax
  00033	0f 42 c8	 cmovb	 ecx, eax
  00036	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	2b c8		 sub	 ecx, eax
  0003d	51		 push	 ecx
  0003e	50		 push	 eax
  0003f	8d 4d e4	 lea	 ecx, DWORD PTR __Str$4[ebp]
  00042	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR __Str$4[ebp+20], 15 ; 0000000fH
  00049	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Str$4[ebp+16], 0
  00050	c6 45 e4 00	 mov	 BYTE PTR __Str$4[ebp], 0
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

  00059	8d 45 e4	 lea	 eax, DWORD PTR __Str$4[ebp]
  0005c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00063	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0006a	8b ce		 mov	 ecx, esi
  0006c	50		 push	 eax
  0006d	c6 06 00	 mov	 BYTE PTR [esi], 0
  00070	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00075	8b 4d f8	 mov	 ecx, DWORD PTR __Str$4[ebp+20]
  00078	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0007b	0f 82 9f 00 00
	00		 jb	 $LN261@str
  00081	41		 inc	 ecx
  00082	51		 push	 ecx
  00083	ff 75 e4	 push	 DWORD PTR __Str$4[ebp]
  00086	8d 4d e4	 lea	 ecx, DWORD PTR __Str$4[ebp]
  00089	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate

; 108  : 			return (_Nul);

  0008e	8b c6		 mov	 eax, esi
  00090	5e		 pop	 esi

; 109  : 			}
; 110  : 		}

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
$LN2@str:
  000a1	57		 push	 edi

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  000a2	f6 c1 04	 test	 cl, 4
  000a5	75 35		 jne	 SHORT $LN4@str
  000a7	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000aa	8b 38		 mov	 edi, DWORD PTR [eax]
  000ac	85 ff		 test	 edi, edi
  000ae	74 2c		 je	 SHORT $LN4@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  000b0	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000b8	03 cf		 add	 ecx, edi
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	2b c8		 sub	 ecx, eax
  000be	51		 push	 ecx
  000bf	50		 push	 eax
  000c0	8d 4d e4	 lea	 ecx, DWORD PTR __Str$3[ebp]
  000c3	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR __Str$3[ebp+20], 15 ; 0000000fH
  000ca	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Str$3[ebp+16], 0
  000d1	c6 45 e4 00	 mov	 BYTE PTR __Str$3[ebp], 0
  000d5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 103  : 			return (_Str);

  000da	eb 12		 jmp	 SHORT $LN1032@str
$LN4@str:

; 104  : 			}
; 105  : 		else
; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  000dc	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR __Nul$2[ebp+20], 15 ; 0000000fH
  000e3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Nul$2[ebp+16], 0
  000ea	c6 45 e4 00	 mov	 BYTE PTR __Nul$2[ebp], 0
$LN1032@str:

; 108  : 			return (_Nul);

  000ee	8d 45 e4	 lea	 eax, DWORD PTR __Nul$2[ebp]
  000f1	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  000f8	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000ff	8b ce		 mov	 ecx, esi
  00101	50		 push	 eax
  00102	c6 06 00	 mov	 BYTE PTR [esi], 0
  00105	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  0010a	8b 45 f8	 mov	 eax, DWORD PTR __Nul$2[ebp+20]
  0010d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00110	72 0d		 jb	 SHORT $LN934@str
  00112	40		 inc	 eax
  00113	8d 4d e4	 lea	 ecx, DWORD PTR __Nul$2[ebp]
  00116	50		 push	 eax
  00117	ff 75 e4	 push	 DWORD PTR __Nul$2[ebp]
  0011a	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN934@str:
  0011f	5f		 pop	 edi

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

$LN261@str:

; 109  : 			}
; 110  : 		}

  00120	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	8b c6		 mov	 eax, esi
  00125	33 cd		 xor	 ecx, ebp
  00127	5e		 pop	 esi
  00128	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 75   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 76   : 		_Tidy();

  0002b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 77   : 		}

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00036	8b 76 34	 mov	 esi, DWORD PTR [esi+52]
  00039	85 f6		 test	 esi, esi
  0003b	74 2a		 je	 SHORT $LN9@basic_stri
  0003d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 c9		 test	 ecx, ecx
  00049	74 11		 je	 SHORT $LN15@basic_stri
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
  00050	85 c0		 test	 eax, eax
  00052	74 08		 je	 SHORT $LN15@basic_stri
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	8b c8		 mov	 ecx, eax
  00058	6a 01		 push	 1
  0005a	ff 12		 call	 DWORD PTR [edx]
$LN15@basic_stri:
  0005c	6a 08		 push	 8
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00064	83 c4 08	 add	 esp, 8
$LN9@basic_stri:
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5e		 pop	 esi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode

  0002a	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  0002f	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]

; 31   : 		_Init(0, 0, _Getstate(_Mode));

  00032	8b c3		 mov	 eax, ebx
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0003a	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00041	8d 14 9d 00 00
	00 00		 lea	 edx, DWORD PTR [ebx*4]
  00048	f7 d2		 not	 edx
  0004a	83 e2 04	 and	 edx, 4
  0004d	8b ca		 mov	 ecx, edx
  0004f	83 c9 02	 or	 ecx, 2
  00052	24 02		 and	 al, 2
  00054	8b c3		 mov	 eax, ebx
  00056	0f 45 ca	 cmovne	 ecx, edx
  00059	8b d1		 mov	 edx, ecx
  0005b	83 ca 08	 or	 edx, 8
  0005e	24 08		 and	 al, 8
  00060	0f 44 d1	 cmove	 edx, ecx
  00063	8b c2		 mov	 eax, edx
  00065	83 c8 10	 or	 eax, 16			; 00000010H
  00068	80 e3 04	 and	 bl, 4
  0006b	0f 44 c2	 cmove	 eax, edx
  0006e	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 32   : 		}

  00071	8b c6		 mov	 eax, esi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0002f	85 ff		 test	 edi, edi
  00031	74 2a		 je	 SHORT $LN10@scalar
  00033	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	85 c9		 test	 ecx, ecx
  0003f	74 11		 je	 SHORT $LN16@scalar
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	ff 50 08	 call	 DWORD PTR [eax+8]
  00046	85 c0		 test	 eax, eax
  00048	74 08		 je	 SHORT $LN16@scalar
  0004a	8b 10		 mov	 edx, DWORD PTR [eax]
  0004c	8b c8		 mov	 ecx, eax
  0004e	6a 01		 push	 1
  00050	ff 12		 call	 DWORD PTR [edx]
$LN16@scalar:
  00052	6a 08		 push	 8
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005a	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0005d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00061	74 0b		 je	 SHORT $LN19@scalar
  00063	6a 38		 push	 56			; 00000038H
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006b	83 c4 08	 add	 esp, 8
$LN19@scalar:
  0006e	8b c6		 mov	 eax, esi
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 449  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 444  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 445  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 439  : 		return (this);

  00000	8b c1		 mov	 eax, ecx

; 440  : 		}

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 433  : 		{	// change to specified position, according to mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 434  : 		return (streampos(_BADOFF));

  00003	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  0000e	89 02		 mov	 DWORD PTR [edx], eax
  00010	8b c2		 mov	 eax, edx
  00012	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00018	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00022	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00029	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 435  : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 427  : 		{	// change position by offset, according to way and mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 		return (streampos(_BADOFF));

  00003	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  0000e	89 02		 mov	 DWORD PTR [edx], eax
  00010	8b c2		 mov	 eax, edx
  00012	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00018	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00022	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00029	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 429  : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Copied$ = -16						; size = 8
__Size$2$ = -12						; size = 4
_this$1$ = -8						; size = 4
__Copied$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Copied$2$ = 16					; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 397  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00010	66 0f 13 45 f0	 movlpd	 QWORD PTR __Copied$[ebp], xmm0
  00015	57		 push	 edi
  00016	85 db		 test	 ebx, ebx
  00018	0f 8c c0 00 00
	00		 jl	 $LN38@xsputn
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00021	7f 08		 jg	 SHORT $LN37@xsputn
  00023	85 ff		 test	 edi, edi
  00025	0f 84 b3 00 00
	00		 je	 $LN38@xsputn
$LN37@xsputn:
  0002b	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  00031	89 55 10	 mov	 DWORD PTR __Copied$2$[ebp], edx
  00034	89 45 fc	 mov	 DWORD PTR __Copied$1$[ebp], eax
  00037	56		 push	 esi
$LL2@xsputn:

; 401  : 			if (0 < (_Size = _Pnavail()))

  00038	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  0003d	8b f0		 mov	 esi, eax
  0003f	8b c2		 mov	 eax, edx
  00041	89 45 f4	 mov	 DWORD PTR __Size$2$[ebp], eax
  00044	85 c0		 test	 eax, eax
  00046	7c 4c		 jl	 SHORT $LN5@xsputn
  00048	7f 04		 jg	 SHORT $LN33@xsputn
  0004a	85 f6		 test	 esi, esi
  0004c	74 46		 je	 SHORT $LN5@xsputn
$LN33@xsputn:

; 402  : 				{	// copy to write buffer
; 403  : 				if (_Count < _Size)

  0004e	3b d8		 cmp	 ebx, eax
  00050	7f 0b		 jg	 SHORT $LN7@xsputn
  00052	7c 04		 jl	 SHORT $LN34@xsputn
  00054	3b fe		 cmp	 edi, esi
  00056	73 05		 jae	 SHORT $LN7@xsputn
$LN34@xsputn:

; 404  : 					_Size = _Count;

  00058	8b f7		 mov	 esi, edi
  0005a	89 5d f4	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN7@xsputn:

; 405  : 				_Traits::copy(pptr(), _Ptr, (size_t)_Size);

  0005d	85 f6		 test	 esi, esi
  0005f	74 14		 je	 SHORT $LN16@xsputn
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00064	56		 push	 esi
  00065	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00068	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0006b	ff 30		 push	 DWORD PTR [eax]
  0006d	e8 00 00 00 00	 call	 _memcpy
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@xsputn:

; 406  : 				_Ptr += _Size;

  00075	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi

; 407  : 				_Copied += _Size;

  00078	01 75 fc	 add	 DWORD PTR __Copied$1$[ebp], esi
  0007b	8b 45 f4	 mov	 eax, DWORD PTR __Size$2$[ebp]
  0007e	11 45 10	 adc	 DWORD PTR __Copied$2$[ebp], eax

; 408  : 				_Count -= _Size;

  00081	2b fe		 sub	 edi, esi

; 409  : 				pbump((int)_Size);

  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00086	1b d8		 sbb	 ebx, eax
  00088	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0008b	29 30		 sub	 DWORD PTR [eax], esi
  0008d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00090	01 30		 add	 DWORD PTR [eax], esi
  00092	eb 29		 jmp	 SHORT $LN9@xsputn
$LN5@xsputn:

; 410  : 				}
; 411  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00097	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0009f	50		 push	 eax
  000a0	ff 52 0c	 call	 DWORD PTR [edx+12]
  000a3	83 f8 ff	 cmp	 eax, -1
  000a6	74 27		 je	 SHORT $LN40@xsputn

; 412  : 				overflow(_Traits::to_int_type(*_Ptr))))
; 413  : 				break;	// single character put failed, quit
; 414  : 			else
; 415  : 				{	// count character successfully put
; 416  : 				++_Ptr;

  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ab	46		 inc	 esi

; 417  : 				++_Copied;

  000ac	83 45 fc 01	 add	 DWORD PTR __Copied$1$[ebp], 1
  000b0	89 75 08	 mov	 DWORD PTR __Ptr$[ebp], esi
  000b3	83 55 10 00	 adc	 DWORD PTR __Copied$2$[ebp], 0

; 418  : 				--_Count;

  000b7	83 c7 ff	 add	 edi, -1
  000ba	83 d3 ff	 adc	 ebx, -1
$LN9@xsputn:

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  000bd	85 db		 test	 ebx, ebx
  000bf	0f 8f 73 ff ff
	ff		 jg	 $LL2@xsputn
  000c5	7c 08		 jl	 SHORT $LN40@xsputn
  000c7	85 ff		 test	 edi, edi
  000c9	0f 85 69 ff ff
	ff		 jne	 $LL2@xsputn
$LN40@xsputn:
  000cf	8b 55 10	 mov	 edx, DWORD PTR __Copied$2$[ebp]
  000d2	8b 45 fc	 mov	 eax, DWORD PTR __Copied$1$[ebp]
  000d5	5e		 pop	 esi
  000d6	5f		 pop	 edi
  000d7	5b		 pop	 ebx

; 419  : 				}
; 420  : 
; 421  : 		return (_Copied);
; 422  : 		}

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 0c 00	 ret	 12			; 0000000cH
$LN38@xsputn:

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  000de	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  000e1	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  000e4	5f		 pop	 edi
  000e5	5b		 pop	 ebx

; 419  : 				}
; 420  : 
; 421  : 		return (_Copied);
; 422  : 		}

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Copied$ = -16						; size = 8
__Size$2$ = -12						; size = 4
_this$1$ = -8						; size = 4
__Copied$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Copied$2$ = 16					; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 368  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00010	66 0f 13 45 f0	 movlpd	 QWORD PTR __Copied$[ebp], xmm0
  00015	57		 push	 edi
  00016	85 db		 test	 ebx, ebx
  00018	0f 8c be 00 00
	00		 jl	 $LN38@xsgetn
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00021	7f 08		 jg	 SHORT $LN37@xsgetn
  00023	85 ff		 test	 edi, edi
  00025	0f 84 b1 00 00
	00		 je	 $LN38@xsgetn
$LN37@xsgetn:
  0002b	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  0002e	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  00031	89 55 10	 mov	 DWORD PTR __Copied$2$[ebp], edx
  00034	89 45 fc	 mov	 DWORD PTR __Copied$1$[ebp], eax
  00037	56		 push	 esi
$LL2@xsgetn:

; 373  : 			if (0 < (_Size = _Gnavail()))

  00038	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  0003d	8b f0		 mov	 esi, eax
  0003f	8b c2		 mov	 eax, edx
  00041	89 45 f4	 mov	 DWORD PTR __Size$2$[ebp], eax
  00044	85 c0		 test	 eax, eax
  00046	7c 4c		 jl	 SHORT $LN5@xsgetn
  00048	7f 04		 jg	 SHORT $LN33@xsgetn
  0004a	85 f6		 test	 esi, esi
  0004c	74 46		 je	 SHORT $LN5@xsgetn
$LN33@xsgetn:

; 374  : 				{	// copy from read buffer
; 375  : 				if (_Count < _Size)

  0004e	3b d8		 cmp	 ebx, eax
  00050	7f 0b		 jg	 SHORT $LN7@xsgetn
  00052	7c 04		 jl	 SHORT $LN34@xsgetn
  00054	3b fe		 cmp	 edi, esi
  00056	73 05		 jae	 SHORT $LN7@xsgetn
$LN34@xsgetn:

; 376  : 					_Size = _Count;

  00058	8b f7		 mov	 esi, edi
  0005a	89 5d f4	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN7@xsgetn:

; 377  : 				_Traits::copy(_Ptr, gptr(), (size_t)_Size);

  0005d	85 f6		 test	 esi, esi
  0005f	74 14		 je	 SHORT $LN16@xsgetn
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00064	56		 push	 esi
  00065	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00068	ff 30		 push	 DWORD PTR [eax]
  0006a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0006d	e8 00 00 00 00	 call	 _memcpy
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@xsgetn:

; 378  : 				_Ptr += _Size;

  00075	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi

; 379  : 				_Copied += _Size;

  00078	01 75 fc	 add	 DWORD PTR __Copied$1$[ebp], esi
  0007b	8b 45 f4	 mov	 eax, DWORD PTR __Size$2$[ebp]
  0007e	11 45 10	 adc	 DWORD PTR __Copied$2$[ebp], eax

; 380  : 				_Count -= _Size;

  00081	2b fe		 sub	 edi, esi

; 381  : 				gbump((int)_Size);

  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00086	1b d8		 sbb	 ebx, eax
  00088	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0008b	29 30		 sub	 DWORD PTR [eax], esi
  0008d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00090	01 30		 add	 DWORD PTR [eax], esi
  00092	eb 27		 jmp	 SHORT $LN9@xsgetn
$LN5@xsgetn:

; 382  : 				}
; 383  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00097	8b 01		 mov	 eax, DWORD PTR [ecx]
  00099	ff 50 1c	 call	 DWORD PTR [eax+28]
  0009c	83 f8 ff	 cmp	 eax, -1
  0009f	74 2c		 je	 SHORT $LN40@xsgetn

; 384  : 				break;	// end of file, quit
; 385  : 			else
; 386  : 				{	// get a single character
; 387  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  000a1	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000a4	88 01		 mov	 BYTE PTR [ecx], al
  000a6	41		 inc	 ecx

; 388  : 				++_Copied;

  000a7	83 45 fc 01	 add	 DWORD PTR __Copied$1$[ebp], 1
  000ab	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000ae	83 55 10 00	 adc	 DWORD PTR __Copied$2$[ebp], 0

; 389  : 				--_Count;

  000b2	83 c7 ff	 add	 edi, -1
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b8	83 d3 ff	 adc	 ebx, -1
$LN9@xsgetn:

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  000bb	85 db		 test	 ebx, ebx
  000bd	0f 8f 75 ff ff
	ff		 jg	 $LL2@xsgetn
  000c3	7c 08		 jl	 SHORT $LN40@xsgetn
  000c5	85 ff		 test	 edi, edi
  000c7	0f 85 6b ff ff
	ff		 jne	 $LL2@xsgetn
$LN40@xsgetn:
  000cd	8b 55 10	 mov	 edx, DWORD PTR __Copied$2$[ebp]
  000d0	8b 45 fc	 mov	 eax, DWORD PTR __Copied$1$[ebp]
  000d3	5e		 pop	 esi
  000d4	5f		 pop	 edi
  000d5	5b		 pop	 ebx

; 390  : 				}
; 391  : 
; 392  : 		return (_Copied);
; 393  : 		}

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 0c 00	 ret	 12			; 0000000cH
$LN38@xsgetn:

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  000dc	8b 55 f4	 mov	 edx, DWORD PTR __Copied$[ebp+4]
  000df	8b 45 f0	 mov	 eax, DWORD PTR __Copied$[ebp]
  000e2	5f		 pop	 edi
  000e3	5b		 pop	 ebx

; 390  : 				}
; 391  : 
; 392  : 		return (_Copied);
; 393  : 		}

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 361  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
  00008	83 f8 ff	 cmp	 eax, -1
  0000b	75 04		 jne	 SHORT $LN3@uflow
  0000d	0b c0		 or	 eax, eax
  0000f	5e		 pop	 esi

; 363  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 364  : 		}

  00010	c3		 ret	 0
$LN3@uflow:

; 362  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00011	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00014	ff 08		 dec	 DWORD PTR [eax]
  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	5e		 pop	 esi
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
  00021	0f b6 02	 movzx	 eax, BYTE PTR [edx]

; 363  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 364  : 		}

  00024	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 357  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 358  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 352  : 		return (0);

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 353  : 		}

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 347  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 348  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 342  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 343  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 319  : 		_IGfirst = &_Gfirst;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 320  : 		_IPfirst = &_Pfirst;

  00006	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]

; 321  : 		_IGnext = &_Gnext;

  00009	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0000c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 322  : 		_IPnext = &_Pnext;

  00012	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00015	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 323  : 		_IGcount = &_Gcount;

  00018	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  0001b	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 324  : 		_IPcount = &_Pcount;

  0001e	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00021	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 325  : 		setp(0, 0);

  00024	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0002a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 		setg(0, 0, 0);

  0003c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00045	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0004e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 327  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 314  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 315  : 		}

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 314  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 315  : 		}

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 308  : 		--*_IPcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 309  : 		return ((*_IPnext)++);

  00005	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 310  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 300  : 		{	// set pointers for write buffer, extended version

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 301  : 		*_IPfirst = _First;

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi

; 302  : 		*_IPnext = _Next;
; 303  : 		*_IPcount = (int)(_Last - _Next);

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	89 02		 mov	 DWORD PTR [edx], eax
  0000f	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00015	2b f2		 sub	 esi, edx
  00017	89 10		 mov	 DWORD PTR [eax], edx
  00019	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	5e		 pop	 esi

; 304  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 293  : 		{	// set pointers for write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  : 		*_IPfirst = _First;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 295  : 		*_IPnext = _First;
; 296  : 		*_IPcount = (int)(_Last - _First);

  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b d6		 sub	 edx, esi
  0000f	89 30		 mov	 DWORD PTR [eax], esi
  00011	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00014	89 30		 mov	 DWORD PTR [eax], esi
  00016	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00019	5e		 pop	 esi
  0001a	89 10		 mov	 DWORD PTR [eax], edx

; 297  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 287  : 		{	// alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 		*_IPcount -= _Off;

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 289  : 		*_IPnext += _Off;

  0000b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 290  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 283  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Gnavail
  00008	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 284  : 		}

  0000e	c3		 ret	 0
$LN3@Gnavail:

; 283  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 284  : 		}

  00012	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 271  : 		--*_IGcount;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return ((*_IGnext)++);

  00005	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 273  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 260  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 261  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 252  : 		{	// set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 		*_IGfirst = _First;

  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	56		 push	 esi

; 254  : 		*_IGnext = _Next;
; 255  : 		*_IGcount = (int)(_Last - _Next);

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	89 02		 mov	 DWORD PTR [edx], eax
  0000f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00012	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00015	2b f2		 sub	 esi, edx
  00017	89 10		 mov	 DWORD PTR [eax], edx
  00019	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	5e		 pop	 esi

; 256  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 246  : 		{	// alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 		*_IGcount -= _Off;

  00003	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 248  : 		*_IGnext += _Off;

  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 249  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 242  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 243  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 237  : 		return (*_IPnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 238  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 232  : 		return (*_IPfirst);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 233  : 		}

  00005	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 227  : 		return (*_IGnext);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 228  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 222  : 		return (*_IGfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 223  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 217  : 		}

  00000	c3		 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 213  : 		}

  00000	c3		 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 207  : 		{	// put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (xsputn(_Ptr, _Count));

  00003	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000e	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00011	ff d0		 call	 eax

; 209  : 		}

  00013	5d		 pop	 ebp
  00014	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 199  : 		{	// put a character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  : 		return (0 < _Pnavail()

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 22		 je	 SHORT $LN3@sputc
  0000b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	85 c0		 test	 eax, eax
  00012	7e 19		 jle	 SHORT $LN3@sputc
  00014	48		 dec	 eax
  00015	89 02		 mov	 DWORD PTR [edx], eax
  00017	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
  00021	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00024	88 02		 mov	 BYTE PTR [edx], al
  00026	0f b6 c0	 movzx	 eax, al

; 201  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 202  : 			: overflow(_Traits::to_int_type(_Ch)));
; 203  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN3@sputc:

; 200  : 		return (0 < _Pnavail()

  0002d	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	89 45 08	 mov	 DWORD PTR __Ch$[ebp], eax

; 201  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 202  : 			: overflow(_Traits::to_int_type(_Ch)));
; 203  : 		}

  00036	5d		 pop	 ebp

; 200  : 		return (0 < _Pnavail()

  00037	ff 62 0c	 jmp	 DWORD PTR [edx+12]
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 145  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 79   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 80   : 		delete _Plocale;

  00023	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0002c	85 f6		 test	 esi, esi
  0002e	74 2a		 je	 SHORT $LN6@basic_stre
  00030	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 11		 je	 SHORT $LN12@basic_stre
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	ff 50 08	 call	 DWORD PTR [eax+8]
  00043	85 c0		 test	 eax, eax
  00045	74 08		 je	 SHORT $LN12@basic_stre
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b c8		 mov	 ecx, eax
  0004b	6a 01		 push	 1
  0004d	ff 12		 call	 DWORD PTR [edx]
$LN12@basic_stre:
  0004f	6a 08		 push	 8
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
$LN6@basic_stre:

; 81   : 		}

  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 26   : 		{	// construct with no buffers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 25   : 		: _Plocale(new locale)

  00026	6a 08		 push	 8

; 26   : 		{	// construct with no buffers

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	8b f8		 mov	 edi, eax
  00035	83 c4 04	 add	 esp, 4
  00038	85 ff		 test	 edi, edi
  0003a	74 16		 je	 SHORT $LN3@basic_stre

; 25   : 		: _Plocale(new locale)

  0003c	6a 01		 push	 1
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0004a	83 c4 04	 add	 esp, 4
  0004d	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00050	eb 02		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  00052	33 ff		 xor	 edi, edi
$LN4@basic_stre:

; 27   : 		_Init();

  00054	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00057	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  0005a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0005d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00060	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00063	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00066	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00069	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0006c	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0006f	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  00072	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00075	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00078	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0007b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00081	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00084	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0008a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0008d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00093	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00096	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000a5	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 28   : 		}

  000ae	8b c6		 mov	 eax, esi
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 644  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 645  : 		return (_Stringbuffer.str());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	83 c1 18	 add	 ecx, 24			; 00000018H
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00011	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 646  : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 635  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	8b 47 98	 mov	 eax, DWORD PTR [edi-104]

; 636  : 		}

  00029	8d 4f b0	 lea	 ecx, DWORD PTR [edi-80]
  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002f	c7 44 38 98 00
	00 00 00	 mov	 DWORD PTR [eax+edi-104], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00037	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  0003a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003d	8d 42 98	 lea	 eax, DWORD PTR [edx-104]
  00040	89 44 3a 94	 mov	 DWORD PTR [edx+edi-108], eax
  00044	c7 47 b0 00 00
	00 00		 mov	 DWORD PTR [edi-80], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0004b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00050	8b 77 e4	 mov	 esi, DWORD PTR [edi-28]
  00053	c7 47 b0 00 00
	00 00		 mov	 DWORD PTR [edi-80], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0005a	85 f6		 test	 esi, esi
  0005c	74 2a		 je	 SHORT $LN12@basic_stri
  0005e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	85 c9		 test	 ecx, ecx
  0006a	74 11		 je	 SHORT $LN18@basic_stri
  0006c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006e	ff 50 08	 call	 DWORD PTR [eax+8]
  00071	85 c0		 test	 eax, eax
  00073	74 08		 je	 SHORT $LN18@basic_stri
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	8b c8		 mov	 ecx, eax
  00079	6a 01		 push	 1
  0007b	ff 12		 call	 DWORD PTR [edx]
$LN18@basic_stri:
  0007d	6a 08		 push	 8
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00085	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
  00088	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  0008b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008e	c7 44 38 98 00
	00 00 00	 mov	 DWORD PTR [eax+edi-104], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00096	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  00099	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009c	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  0009f	89 44 39 94	 mov	 DWORD PTR [ecx+edi-108], eax
  000a3	8b 47 a8	 mov	 eax, DWORD PTR [edi-88]
  000a6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a9	c7 44 38 a8 00
	00 00 00	 mov	 DWORD PTR [eax+edi-88], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000b1	8b 47 a8	 mov	 eax, DWORD PTR [edi-88]
  000b4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b7	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  000ba	89 44 39 a4	 mov	 DWORD PTR [ecx+edi-92], eax
  000be	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  000c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c4	c7 44 38 98 00
	00 00 00	 mov	 DWORD PTR [eax+edi-104], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  000cc	8b 47 98	 mov	 eax, DWORD PTR [edi-104]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  000d5	89 44 39 94	 mov	 DWORD PTR [ecx+edi-108], eax
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_this$ = 12						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 591  : 		{	// construct empty character buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00034	83 7d 0c 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00038	74 22		 je	 SHORT $LN2@basic_stri
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  00040	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00047	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_stri:

; 589  : 		: _Mybase(&_Stringbuffer),

  0005c	6a 00		 push	 0
  0005e	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  00061	8b cf		 mov	 ecx, edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >

; 591  : 		{	// construct empty character buffer

  00069	8b 07		 mov	 eax, DWORD PTR [edi]
  0006b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00081	89 75 0c	 mov	 DWORD PTR _this$[ebp], esi
  00084	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  00087	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00092	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]
  00095	8b c3		 mov	 eax, ebx
  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0009d	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  000a4	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000ab	f7 d1		 not	 ecx
  000ad	83 e1 04	 and	 ecx, 4
  000b0	8b d1		 mov	 edx, ecx
  000b2	83 ca 02	 or	 edx, 2
  000b5	24 02		 and	 al, 2
  000b7	8b c3		 mov	 eax, ebx
  000b9	0f 45 d1	 cmovne	 edx, ecx
  000bc	8b ca		 mov	 ecx, edx
  000be	83 c9 08	 or	 ecx, 8
  000c1	24 08		 and	 al, 8
  000c3	0f 44 ca	 cmove	 ecx, edx
  000c6	8b c1		 mov	 eax, ecx
  000c8	83 c8 10	 or	 eax, 16			; 00000010H
  000cb	80 e3 04	 and	 bl, 4
  000ce	0f 44 c1	 cmove	 eax, ecx
  000d1	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 592  : 		}

  000d4	8b c7		 mov	 eax, edi
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_stri
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_stri:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 20	 add	 ecx, 32			; 00000020H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$3:
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8d 51 20	 lea	 edx, DWORD PTR [ecx+32]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	c7 44 10 e0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-32], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00032	8b 42 e0	 mov	 eax, DWORD PTR [edx-32]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  0003b	89 44 11 dc	 mov	 DWORD PTR [ecx+edx-36], eax
  0003f	8b 42 f0	 mov	 eax, DWORD PTR [edx-16]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	c7 44 10 f0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-16], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0004d	8b 42 f0	 mov	 eax, DWORD PTR [edx-16]
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00056	89 44 11 ec	 mov	 DWORD PTR [ecx+edx-20], eax
  0005a	8b 42 e0	 mov	 eax, DWORD PTR [edx-32]
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	c7 44 10 e0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-32], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00068	8b 42 e0	 mov	 eax, DWORD PTR [edx-32]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00071	89 44 11 dc	 mov	 DWORD PTR [ecx+edx-36], eax
  00075	52		 push	 edx
  00076	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00083	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00088	83 c4 04	 add	 esp, 4
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ$4:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 e0	 lea	 esi, DWORD PTR [ecx-32]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0b		 je	 SHORT $LN4@scalar
  00014	6a 68		 push	 104			; 00000068H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$basic_iostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 983  : 		{	// destroy the object

  00000	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e0 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-32], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 e0	 mov	 eax, DWORD PTR [ecx-32]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e0	 lea	 eax, DWORD PTR [edx-32]
  00017	89 44 0a dc	 mov	 DWORD PTR [edx+ecx-36], eax

; 984  : 		}

  0001b	8d 51 f8	 lea	 edx, DWORD PTR [ecx-8]
  0001e	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0002c	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00035	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
  00039	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00047	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00050	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
  00054	c3		 ret	 0
??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
_this$ = 12						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 954  : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	83 7d 0c 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00036	74 22		 je	 SHORT $LN2@basic_iost
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], OFFSET ??_8?$basic_iostream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00045	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_iost:

; 952  : 		: _Myis(_Strbuf, false),

  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	6a 00		 push	 0
  0005e	ff 75 08	 push	 DWORD PTR __Strbuf$[ebp]
  00061	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00064	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00070	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00073	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00080	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00087	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008a	03 ce		 add	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 953  : 			_Myos(_Noinit, false)

  00091	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
  00094	89 55 0c	 mov	 DWORD PTR _this$[ebp], edx
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009c	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000a3	8b 02		 mov	 eax, DWORD PTR [edx]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  000ab	89 44 11 fc	 mov	 DWORD PTR [ecx+edx-4], eax

; 954  : 		{	// construct from stream buffer pointer

  000af	8b 06		 mov	 eax, DWORD PTR [esi]
  000b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b4	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  000bb	8b 06		 mov	 eax, DWORD PTR [esi]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  000c3	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax

; 955  : 		}

  000c7	8b c6		 mov	 eax, esi
  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_iost
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 20	 add	 ecx, 32			; 00000020H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_iost:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__ehhandler$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::basic_iostream<char,std::char_traits<char> >::basic_iostream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00032	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003b	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
  0003f	52		 push	 edx
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  0004d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00052	83 c4 04	 add	 esp, 4
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00028	8d 72 f8	 lea	 esi, DWORD PTR [edx-8]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003e	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
  00042	52		 push	 edx
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00050	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00055	83 c4 04	 add	 esp, 4
  00058	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005c	74 0b		 je	 SHORT $LN16@scalar
  0005e	6a 50		 push	 80			; 00000050H
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -40						; size = 20
__Ok$3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 574  : 		{	// flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 575  : 		if (_Myios::rdbuf() != 0)

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	83 7c 30 38 00	 cmp	 DWORD PTR [eax+esi+56], 0
  00032	0f 84 ce 00 00
	00		 je	 $LN102@flush

; 576  : 			{	// buffer exists, flush it
; 577  : 			const sentry _Ok(*this);

  00038	56		 push	 esi
  00039	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  0003c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 578  : 
; 579  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00041	80 7d f0 00	 cmp	 BYTE PTR __Ok$3[ebp+4], 0
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	0f 84 83 00 00
	00		 je	 $LN56@flush
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00057	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0005b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005d	ff 50 34	 call	 DWORD PTR [eax+52]
  00060	83 f8 ff	 cmp	 eax, -1
  00063	75 70		 jne	 SHORT $LN56@flush

; 580  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0006a	8b 44 32 10	 mov	 eax, DWORD PTR [edx+esi+16]
  0006e	03 d6		 add	 edx, esi
  00070	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00073	83 c9 04	 or	 ecx, 4
  00076	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0007a	0f 45 4a 0c	 cmovne	 ecx, DWORD PTR [edx+12]
  0007e	83 e1 13	 and	 ecx, 19			; 00000013H
  00081	83 c9 04	 or	 ecx, 4
  00084	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00087	23 c1		 and	 eax, ecx
  00089	74 4a		 je	 SHORT $LN56@flush
  0008b	a8 04		 test	 al, 4
  0008d	74 2a		 je	 SHORT $LN53@flush
  0008f	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN111@flush:
  00099	50		 push	 eax
  0009a	6a 01		 push	 1
  0009c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0009f	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000a4	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000a9	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000ac	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@flush:
$LN53@flush:
  000b9	a8 02		 test	 al, 2
  000bb	74 0c		 je	 SHORT $LN55@flush
  000bd	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000c7	eb d0		 jmp	 SHORT $LN111@flush
$LN55@flush:
  000c9	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000d3	eb c4		 jmp	 SHORT $LN111@flush
$LN56@flush:

; 581  : 			}

  000d5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000dc	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000e1	84 c0		 test	 al, al
  000e3	75 08		 jne	 SHORT $LN98@flush
  000e5	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000e8	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN98@flush:
  000ed	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000f0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  000fd	85 c9		 test	 ecx, ecx
  000ff	74 05		 je	 SHORT $LN102@flush
  00101	8b 01		 mov	 eax, DWORD PTR [ecx]
  00103	ff 50 08	 call	 DWORD PTR [eax+8]
$LN102@flush:

; 582  : 		return (*this);

  00106	8b c6		 mov	 eax, esi

; 583  : 		}

  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5e		 pop	 esi
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN110@flush:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$14:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$15:
  0000e	e8 00 00 00 00	 call	 ___std_terminate
  00013	c3		 ret	 0
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
_TEXT	SEGMENT
$T2 = -112						; size = 20
$T3 = -92						; size = 20
$T4 = -72						; size = 20
$T5 = -52						; size = 8
$T6 = -44						; size = 8
__Ok$ = -36						; size = 8
__State$ = -28						; size = 4
$T7 = -24						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T8 = 8							; size = 8
__Val$ = 8						; size = 8
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 396  : 		{	// insert an unsigned long long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 397  : 		ios_base::iostate _State = ios_base::goodbit;
; 398  : 		const sentry _Ok(*this);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	33 ff		 xor	 edi, edi
  00034	89 7d e4	 mov	 DWORD PTR __State$[ebp], edi
  00037	89 75 dc	 mov	 DWORD PTR __Ok$[ebp], esi
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00041	85 c9		 test	 ecx, ecx
  00043	74 05		 je	 SHORT $LN19@operator
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	ff 50 04	 call	 DWORD PTR [eax+4]
$LN19@operator:
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00056	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0005b	75 11		 jne	 SHORT $LN15@operator
  0005d	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00061	85 c9		 test	 ecx, ecx
  00063	74 09		 je	 SHORT $LN15@operator
  00065	3b ce		 cmp	 ecx, esi
  00067	74 05		 je	 SHORT $LN15@operator
  00069	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN15@operator:
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00073	03 ce		 add	 ecx, esi
  00075	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00079	0f 94 c0	 sete	 al
  0007c	88 45 e0	 mov	 BYTE PTR __Ok$[ebp+4], al
  0007f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 399  : 
; 400  : 		if (_Ok)

  00086	84 c0		 test	 al, al
  00088	74 78		 je	 SHORT $LN12@operator

; 401  : 			{	// state okay, use facet to insert
; 402  : 			const _Nput& _Nput_fac = _USE(this->getloc(), _Nput);

  0008a	8d 45 d4	 lea	 eax, DWORD PTR $T6[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00093	50		 push	 eax
  00094	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00098	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b d8		 mov	 ebx, eax
  000a2	8b 4d d8	 mov	 ecx, DWORD PTR $T6[ebp+4]
  000a5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000a9	85 c9		 test	 ecx, ecx
  000ab	74 11		 je	 SHORT $LN44@operator
  000ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  000af	ff 52 08	 call	 DWORD PTR [edx+8]
  000b2	85 c0		 test	 eax, eax
  000b4	74 08		 je	 SHORT $LN44@operator
  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
  000b8	8b c8		 mov	 ecx, eax
  000ba	6a 01		 push	 1
  000bc	ff 12		 call	 DWORD PTR [edx]
$LN44@operator:

; 403  : 
; 404  : 			_TRY_IO_BEGIN
; 405  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 406  : 				_Myios::fill(), _Val).failed())

  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	ff 75 0c	 push	 DWORD PTR __Val$[ebp+4]
  000c3	c6 45 cc 00	 mov	 BYTE PTR $T5[ebp], 0
  000c7	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  000ca	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cd	8a 44 31 40	 mov	 al, BYTE PTR [ecx+esi+64]
  000d1	03 ce		 add	 ecx, esi
  000d3	88 45 e8	 mov	 BYTE PTR $T7[ebp], al
  000d6	ff 75 e8	 push	 DWORD PTR $T7[ebp]
  000d9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000db	51		 push	 ecx
  000dc	ff 71 38	 push	 DWORD PTR [ecx+56]
  000df	8d 4d 08	 lea	 ecx, DWORD PTR $T8[ebp]
  000e2	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  000e6	ff 75 cc	 push	 DWORD PTR $T5[ebp]
  000e9	51		 push	 ecx
  000ea	8b cb		 mov	 ecx, ebx
  000ec	ff 50 18	 call	 DWORD PTR [eax+24]
  000ef	80 7d 08 00	 cmp	 BYTE PTR $T8[ebp], 0
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000ff	0f 45 f8	 cmovne	 edi, eax
$LN12@operator:

; 409  : 			}
; 410  : 
; 411  : 		_Myios::setstate(_State);

  00102	8b 06		 mov	 eax, DWORD PTR [esi]
  00104	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00107	03 d6		 add	 edx, esi
  00109	85 ff		 test	 edi, edi
  0010b	0f 84 ee 00 00
	00		 je	 $LN134@operator
  00111	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00114	0b c7		 or	 eax, edi
  00116	8b c8		 mov	 ecx, eax
  00118	83 c9 04	 or	 ecx, 4
  0011b	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0011f	0f 45 c8	 cmovne	 ecx, eax
  00122	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00125	83 e1 17	 and	 ecx, 23			; 00000017H
  00128	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0012b	23 c1		 and	 eax, ecx
  0012d	0f 84 cc 00 00
	00		 je	 $LN134@operator
  00133	a8 04		 test	 al, 4
  00135	74 70		 je	 SHORT $LN131@operator
  00137	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  00141	50		 push	 eax
  00142	6a 01		 push	 1
  00144	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00147	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  0014c	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00151	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  00154	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN188@operator:
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$0:

; 407  : 				_State |= ios_base::badbit;
; 408  : 			_CATCH_IO_END

  00161	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	8b 01		 mov	 eax, DWORD PTR [ecx]
  00166	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00169	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  0016d	03 d1		 add	 edx, ecx
  0016f	83 c8 04	 or	 eax, 4
  00172	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00176	75 03		 jne	 SHORT $LN66@operator
  00178	83 c8 04	 or	 eax, 4
$LN66@operator:
  0017b	83 e0 17	 and	 eax, 23			; 00000017H
  0017e	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00181	85 42 10	 test	 DWORD PTR [edx+16], eax
  00184	75 18		 jne	 SHORT $LN69@operator
  00186	b8 00 00 00 00	 mov	 eax, $LN13@operator
  0018b	c3		 ret	 0
$LN13@operator:
  0018c	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0018f	8b 7d e4	 mov	 edi, DWORD PTR __State$[ebp]
  00192	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00199	e9 64 ff ff ff	 jmp	 $LN12@operator
$LN69@operator:
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN189@operator:

; 409  : 			}
; 410  : 
; 411  : 		_Myios::setstate(_State);

$LN131@operator:
  001a7	a8 02		 test	 al, 2
  001a9	74 2a		 je	 SHORT $LN133@operator
  001ab	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  001b5	50		 push	 eax
  001b6	6a 01		 push	 1
  001b8	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  001bb	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  001c0	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001c5	8d 45 a4	 lea	 eax, DWORD PTR $T3[ebp]
  001c8	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN190@operator:
$LN133@operator:
  001d5	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  001df	50		 push	 eax
  001e0	6a 01		 push	 1
  001e2	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  001e5	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  001ea	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001ef	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  001f2	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN191@operator:
$LN134@operator:

; 412  : 		return (*this);

  001ff	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00206	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0020b	84 c0		 test	 al, al
  0020d	75 07		 jne	 SHORT $LN175@operator
  0020f	8b ce		 mov	 ecx, esi
  00211	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN175@operator:
  00216	8b 06		 mov	 eax, DWORD PTR [esi]
  00218	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0021c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0021f	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00223	85 c9		 test	 ecx, ecx
  00225	74 05		 je	 SHORT $LN179@operator
  00227	8b 01		 mov	 eax, DWORD PTR [ecx]
  00229	ff 50 08	 call	 DWORD PTR [eax+8]
$LN179@operator:
  0022c	8b c6		 mov	 eax, esi

; 413  : 		}

  0022e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00231	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00238	59		 pop	 ecx
  00239	5f		 pop	 edi
  0023a	5e		 pop	 esi
  0023b	5b		 pop	 ebx
  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c2 08 00	 ret	 8
$LN187@operator:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$4:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$2:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$5:
  00018	e8 00 00 00 00	 call	 ___std_terminate
  0001d	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$32:
  0001e	e8 00 00 00 00	 call	 ___std_terminate
  00023	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z$33:
  00024	e8 00 00 00 00	 call	 ___std_terminate
  00029	c3		 ret	 0
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z:
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T2 = -112						; size = 20
$T3 = -92						; size = 20
$T4 = -72						; size = 20
$T5 = -52						; size = 8
$T6 = -52						; size = 8
$T7 = -44						; size = 8
__Ok$ = -36						; size = 8
__State$ = -28						; size = 4
$T8 = -24						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 356  : 		{	// insert an unsigned long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 357  : 		ios_base::iostate _State = ios_base::goodbit;
; 358  : 		const sentry _Ok(*this);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	33 ff		 xor	 edi, edi
  00034	89 7d e4	 mov	 DWORD PTR __State$[ebp], edi
  00037	89 75 dc	 mov	 DWORD PTR __Ok$[ebp], esi
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00041	85 c9		 test	 ecx, ecx
  00043	74 05		 je	 SHORT $LN19@operator
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	ff 50 04	 call	 DWORD PTR [eax+4]
$LN19@operator:
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00056	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0005b	75 11		 jne	 SHORT $LN15@operator
  0005d	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00061	85 c9		 test	 ecx, ecx
  00063	74 09		 je	 SHORT $LN15@operator
  00065	3b ce		 cmp	 ecx, esi
  00067	74 05		 je	 SHORT $LN15@operator
  00069	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN15@operator:
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00073	03 ce		 add	 ecx, esi
  00075	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00079	0f 94 c0	 sete	 al
  0007c	88 45 e0	 mov	 BYTE PTR __Ok$[ebp+4], al
  0007f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 359  : 
; 360  : 		if (_Ok)

  00086	84 c0		 test	 al, al
  00088	74 75		 je	 SHORT $LN12@operator

; 361  : 			{	// state okay, use facet to insert
; 362  : 			const _Nput& _Nput_fac = _USE(this->getloc(), _Nput);

  0008a	8d 45 d4	 lea	 eax, DWORD PTR $T7[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00093	50		 push	 eax
  00094	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00098	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b d8		 mov	 ebx, eax
  000a2	8b 4d d8	 mov	 ecx, DWORD PTR $T7[ebp+4]
  000a5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000a9	85 c9		 test	 ecx, ecx
  000ab	74 11		 je	 SHORT $LN44@operator
  000ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  000af	ff 52 08	 call	 DWORD PTR [edx+8]
  000b2	85 c0		 test	 eax, eax
  000b4	74 08		 je	 SHORT $LN44@operator
  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
  000b8	8b c8		 mov	 ecx, eax
  000ba	6a 01		 push	 1
  000bc	ff 12		 call	 DWORD PTR [edx]
$LN44@operator:

; 363  : 
; 364  : 			_TRY_IO_BEGIN
; 365  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 366  : 				_Myios::fill(), _Val).failed())

  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  000c3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  000c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ca	8a 44 31 40	 mov	 al, BYTE PTR [ecx+esi+64]
  000ce	03 ce		 add	 ecx, esi
  000d0	88 45 e8	 mov	 BYTE PTR $T8[ebp], al
  000d3	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  000d6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d8	51		 push	 ecx
  000d9	c6 45 cc 00	 mov	 BYTE PTR $T6[ebp], 0
  000dd	ff 71 38	 push	 DWORD PTR [ecx+56]
  000e0	8d 4d cc	 lea	 ecx, DWORD PTR $T5[ebp]
  000e3	ff 75 cc	 push	 DWORD PTR $T6[ebp]
  000e6	51		 push	 ecx
  000e7	8b cb		 mov	 ecx, ebx
  000e9	ff 50 20	 call	 DWORD PTR [eax+32]
  000ec	80 7d cc 00	 cmp	 BYTE PTR $T5[ebp], 0
  000f0	b8 04 00 00 00	 mov	 eax, 4
  000f5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000fc	0f 45 f8	 cmovne	 edi, eax
$LN12@operator:

; 369  : 			}
; 370  : 
; 371  : 		_Myios::setstate(_State);

  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00104	03 d6		 add	 edx, esi
  00106	85 ff		 test	 edi, edi
  00108	0f 84 ee 00 00
	00		 je	 $LN134@operator
  0010e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00111	0b c7		 or	 eax, edi
  00113	8b c8		 mov	 ecx, eax
  00115	83 c9 04	 or	 ecx, 4
  00118	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0011c	0f 45 c8	 cmovne	 ecx, eax
  0011f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00122	83 e1 17	 and	 ecx, 23			; 00000017H
  00125	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00128	23 c1		 and	 eax, ecx
  0012a	0f 84 cc 00 00
	00		 je	 $LN134@operator
  00130	a8 04		 test	 al, 4
  00132	74 70		 je	 SHORT $LN131@operator
  00134	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0013e	50		 push	 eax
  0013f	6a 01		 push	 1
  00141	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00144	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00149	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0014e	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  00151	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN188@operator:
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0:

; 367  : 				_State |= ios_base::badbit;
; 368  : 			_CATCH_IO_END

  0015e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 01		 mov	 eax, DWORD PTR [ecx]
  00163	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00166	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  0016a	03 d1		 add	 edx, ecx
  0016c	83 c8 04	 or	 eax, 4
  0016f	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00173	75 03		 jne	 SHORT $LN66@operator
  00175	83 c8 04	 or	 eax, 4
$LN66@operator:
  00178	83 e0 17	 and	 eax, 23			; 00000017H
  0017b	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0017e	85 42 10	 test	 DWORD PTR [edx+16], eax
  00181	75 18		 jne	 SHORT $LN69@operator
  00183	b8 00 00 00 00	 mov	 eax, $LN13@operator
  00188	c3		 ret	 0
$LN13@operator:
  00189	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0018c	8b 7d e4	 mov	 edi, DWORD PTR __State$[ebp]
  0018f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00196	e9 64 ff ff ff	 jmp	 $LN12@operator
$LN69@operator:
  0019b	6a 00		 push	 0
  0019d	6a 00		 push	 0
  0019f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN189@operator:

; 369  : 			}
; 370  : 
; 371  : 		_Myios::setstate(_State);

$LN131@operator:
  001a4	a8 02		 test	 al, 2
  001a6	74 2a		 je	 SHORT $LN133@operator
  001a8	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  001b2	50		 push	 eax
  001b3	6a 01		 push	 1
  001b5	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  001b8	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  001bd	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001c2	8d 45 a4	 lea	 eax, DWORD PTR $T3[ebp]
  001c5	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN190@operator:
$LN133@operator:
  001d2	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  001dc	50		 push	 eax
  001dd	6a 01		 push	 1
  001df	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  001e2	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  001e7	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001ec	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  001ef	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN191@operator:
$LN134@operator:

; 372  : 		return (*this);

  001fc	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00203	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00208	84 c0		 test	 al, al
  0020a	75 07		 jne	 SHORT $LN175@operator
  0020c	8b ce		 mov	 ecx, esi
  0020e	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN175@operator:
  00213	8b 06		 mov	 eax, DWORD PTR [esi]
  00215	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00219	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0021c	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00220	85 c9		 test	 ecx, ecx
  00222	74 05		 je	 SHORT $LN179@operator
  00224	8b 01		 mov	 eax, DWORD PTR [ecx]
  00226	ff 50 08	 call	 DWORD PTR [eax+8]
$LN179@operator:
  00229	8b c6		 mov	 eax, esi

; 373  : 		}

  0022b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0022e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00235	59		 pop	 ecx
  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	5b		 pop	 ebx
  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c2 04 00	 ret	 4
$LN187@operator:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$4:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$5:
  00018	e8 00 00 00 00	 call	 ___std_terminate
  0001d	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$32:
  0001e	e8 00 00 00 00	 call	 ___std_terminate
  00023	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$33:
  00024	e8 00 00 00 00	 call	 ___std_terminate
  00029	c3		 ret	 0
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T2 = -112						; size = 20
$T3 = -92						; size = 20
$T4 = -72						; size = 20
$T5 = -52						; size = 8
$T6 = -52						; size = 8
$T7 = -44						; size = 8
__Ok$ = -36						; size = 8
__State$ = -28						; size = 4
$T8 = -24						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 291  : 		{	// insert an int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 292  : 		ios_base::iostate _State = ios_base::goodbit;
; 293  : 		const sentry _Ok(*this);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	33 ff		 xor	 edi, edi
  00034	89 7d e4	 mov	 DWORD PTR __State$[ebp], edi
  00037	89 75 dc	 mov	 DWORD PTR __Ok$[ebp], esi
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003d	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00041	85 c9		 test	 ecx, ecx
  00043	74 05		 je	 SHORT $LN21@operator
  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	ff 50 04	 call	 DWORD PTR [eax+4]
$LN21@operator:
  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00053	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00056	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0005b	75 11		 jne	 SHORT $LN17@operator
  0005d	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00061	85 c9		 test	 ecx, ecx
  00063	74 09		 je	 SHORT $LN17@operator
  00065	3b ce		 cmp	 ecx, esi
  00067	74 05		 je	 SHORT $LN17@operator
  00069	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN17@operator:
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00073	03 ce		 add	 ecx, esi
  00075	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00079	0f 94 c0	 sete	 al
  0007c	88 45 e0	 mov	 BYTE PTR __Ok$[ebp+4], al
  0007f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 294  : 
; 295  : 		if (_Ok)

  00086	84 c0		 test	 al, al
  00088	74 75		 je	 SHORT $LN14@operator

; 296  : 			{	// state okay, use facet to insert
; 297  : 			const _Nput& _Nput_fac = _USE(this->getloc(), _Nput);

  0008a	8d 45 d4	 lea	 eax, DWORD PTR $T7[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00093	50		 push	 eax
  00094	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00098	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b d8		 mov	 ebx, eax
  000a2	8b 4d d8	 mov	 ecx, DWORD PTR $T7[ebp+4]
  000a5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000a9	85 c9		 test	 ecx, ecx
  000ab	74 11		 je	 SHORT $LN46@operator
  000ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  000af	ff 52 08	 call	 DWORD PTR [edx+8]
  000b2	85 c0		 test	 eax, eax
  000b4	74 08		 je	 SHORT $LN46@operator
  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
  000b8	8b c8		 mov	 ecx, eax
  000ba	6a 01		 push	 1
  000bc	ff 12		 call	 DWORD PTR [edx]
$LN46@operator:

; 298  : 			ios_base::fmtflags _Bfl =
; 299  : 				this->flags() & ios_base::basefield;
; 300  : 			long _Tmp = (_Bfl == ios_base::oct
; 301  : 				|| _Bfl == ios_base::hex)
; 302  : 				? (long)(unsigned int)_Val : (long)_Val;
; 303  : 
; 304  : 			_TRY_IO_BEGIN
; 305  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 306  : 				_Myios::fill(), _Tmp).failed())

  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  000c3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  000c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ca	8a 44 31 40	 mov	 al, BYTE PTR [ecx+esi+64]
  000ce	03 ce		 add	 ecx, esi
  000d0	88 45 e8	 mov	 BYTE PTR $T8[ebp], al
  000d3	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  000d6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d8	51		 push	 ecx
  000d9	c6 45 cc 00	 mov	 BYTE PTR $T6[ebp], 0
  000dd	ff 71 38	 push	 DWORD PTR [ecx+56]
  000e0	8d 4d cc	 lea	 ecx, DWORD PTR $T5[ebp]
  000e3	ff 75 cc	 push	 DWORD PTR $T6[ebp]
  000e6	51		 push	 ecx
  000e7	8b cb		 mov	 ecx, ebx
  000e9	ff 50 24	 call	 DWORD PTR [eax+36]
  000ec	80 7d cc 00	 cmp	 BYTE PTR $T5[ebp], 0
  000f0	b8 04 00 00 00	 mov	 eax, 4
  000f5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  000fc	0f 45 f8	 cmovne	 edi, eax
$LN14@operator:

; 309  : 			}
; 310  : 
; 311  : 		_Myios::setstate(_State);

  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00104	03 d6		 add	 edx, esi
  00106	85 ff		 test	 edi, edi
  00108	0f 84 ee 00 00
	00		 je	 $LN138@operator
  0010e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00111	0b c7		 or	 eax, edi
  00113	8b c8		 mov	 ecx, eax
  00115	83 c9 04	 or	 ecx, 4
  00118	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0011c	0f 45 c8	 cmovne	 ecx, eax
  0011f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00122	83 e1 17	 and	 ecx, 23			; 00000017H
  00125	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00128	23 c1		 and	 eax, ecx
  0012a	0f 84 cc 00 00
	00		 je	 $LN138@operator
  00130	a8 04		 test	 al, 4
  00132	74 70		 je	 SHORT $LN135@operator
  00134	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0013e	50		 push	 eax
  0013f	6a 01		 push	 1
  00141	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00144	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00149	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0014e	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  00151	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN192@operator:
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 307  : 				_State |= ios_base::badbit;
; 308  : 			_CATCH_IO_END

  0015e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 01		 mov	 eax, DWORD PTR [ecx]
  00163	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00166	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  0016a	03 d1		 add	 edx, ecx
  0016c	83 c8 04	 or	 eax, 4
  0016f	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00173	75 03		 jne	 SHORT $LN70@operator
  00175	83 c8 04	 or	 eax, 4
$LN70@operator:
  00178	83 e0 17	 and	 eax, 23			; 00000017H
  0017b	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0017e	85 42 10	 test	 DWORD PTR [edx+16], eax
  00181	75 18		 jne	 SHORT $LN73@operator
  00183	b8 00 00 00 00	 mov	 eax, $LN15@operator
  00188	c3		 ret	 0
$LN15@operator:
  00189	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0018c	8b 7d e4	 mov	 edi, DWORD PTR __State$[ebp]
  0018f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00196	e9 64 ff ff ff	 jmp	 $LN14@operator
$LN73@operator:
  0019b	6a 00		 push	 0
  0019d	6a 00		 push	 0
  0019f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN193@operator:

; 309  : 			}
; 310  : 
; 311  : 		_Myios::setstate(_State);

$LN135@operator:
  001a4	a8 02		 test	 al, 2
  001a6	74 2a		 je	 SHORT $LN137@operator
  001a8	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  001b2	50		 push	 eax
  001b3	6a 01		 push	 1
  001b5	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  001b8	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  001bd	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001c2	8d 45 a4	 lea	 eax, DWORD PTR $T3[ebp]
  001c5	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN194@operator:
$LN137@operator:
  001d2	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  001dc	50		 push	 eax
  001dd	6a 01		 push	 1
  001df	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  001e2	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  001e7	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001ec	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  001ef	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN195@operator:
$LN138@operator:

; 312  : 		return (*this);

  001fc	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6
  00203	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00208	84 c0		 test	 al, al
  0020a	75 07		 jne	 SHORT $LN179@operator
  0020c	8b ce		 mov	 ecx, esi
  0020e	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN179@operator:
  00213	8b 06		 mov	 eax, DWORD PTR [esi]
  00215	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00219	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0021c	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00220	85 c9		 test	 ecx, ecx
  00222	74 05		 je	 SHORT $LN183@operator
  00224	8b 01		 mov	 eax, DWORD PTR [ecx]
  00226	ff 50 08	 call	 DWORD PTR [eax+8]
$LN183@operator:
  00229	8b c6		 mov	 eax, esi

; 313  : 		}

  0022b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0022e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00235	59		 pop	 ecx
  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	5b		 pop	 ebx
  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c2 04 00	 ret	 4
$LN191@operator:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$4:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$5:
  00018	e8 00 00 00 00	 call	 ___std_terminate
  0001d	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$32:
  0001e	e8 00 00 00 00	 call	 ___std_terminate
  00023	c3		 ret	 0
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$33:
  00024	e8 00 00 00 00	 call	 ___std_terminate
  00029	c3		 ret	 0
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
_TEXT	SEGMENT
__Pfn$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 210  : 		{	// call ios_base manipulator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 211  : 		_DEBUG_POINTER(_Pfn);
; 212  : 		(*_Pfn)(*(ios_base *)this);

  00006	85 f6		 test	 esi, esi
  00008	75 10		 jne	 SHORT $LN3@operator
  0000a	33 c0		 xor	 eax, eax
  0000c	50		 push	 eax
  0000d	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00010	83 c4 04	 add	 esp, 4

; 213  : 		return (*this);

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi

; 214  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN3@operator:

; 211  : 		_DEBUG_POINTER(_Pfn);
; 212  : 		(*_Pfn)(*(ios_base *)this);

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	03 c6		 add	 eax, esi
  00021	50		 push	 eax
  00022	ff 55 08	 call	 DWORD PTR __Pfn$[ebp]
  00025	83 c4 04	 add	 esp, 4

; 213  : 		return (*this);

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi

; 214  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -76						; size = 20
$T3 = -56						; size = 20
$T4 = -36						; size = 20
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 165  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 166  : 		_TRY_BEGIN
; 167  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0003e	0f 85 d3 00 00
	00		 jne	 $LN9@Osfx
  00044	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00049	0f 84 c8 00 00
	00		 je	 $LN9@Osfx

; 168  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  0004f	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	ff 50 34	 call	 DWORD PTR [eax+52]
  00058	83 f8 ff	 cmp	 eax, -1
  0005b	0f 85 b6 00 00
	00		 jne	 $LN9@Osfx

; 169  : 				_Myios::setstate(ios_base::badbit);

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00066	8b 44 32 10	 mov	 eax, DWORD PTR [edx+esi+16]
  0006a	03 d6		 add	 edx, esi
  0006c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0006f	83 c9 04	 or	 ecx, 4
  00072	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00076	0f 45 4a 0c	 cmovne	 ecx, DWORD PTR [edx+12]
  0007a	83 e1 13	 and	 ecx, 19			; 00000013H
  0007d	83 c9 04	 or	 ecx, 4
  00080	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00083	23 c1		 and	 eax, ecx
  00085	0f 84 8c 00 00
	00		 je	 $LN9@Osfx
  0008b	a8 04		 test	 al, 4
  0008d	74 2a		 je	 SHORT $LN34@Osfx
  0008f	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  00099	50		 push	 eax
  0009a	6a 01		 push	 1
  0009c	8d 4d dc	 lea	 ecx, DWORD PTR $T4[ebp]
  0009f	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000a4	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000a9	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
  000ac	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN80@Osfx:
$LN34@Osfx:
  000b9	a8 02		 test	 al, 2
  000bb	74 2a		 je	 SHORT $LN36@Osfx
  000bd	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000c7	50		 push	 eax
  000c8	6a 01		 push	 1
  000ca	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  000cd	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000d2	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000d7	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  000da	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN81@Osfx:
$LN36@Osfx:
  000e7	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000f1	50		 push	 eax
  000f2	6a 01		 push	 1
  000f4	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f7	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000fc	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00101	8d 45 b4	 lea	 eax, DWORD PTR $T2[ebp]
  00104	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN82@Osfx:
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 170  : 		_CATCH_ALL
; 171  : 		_CATCH_END

  00111	b8 00 00 00 00	 mov	 eax, $LN9@Osfx
  00116	c3		 ret	 0
$LN9@Osfx:

; 172  : 		}

  00117	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00121	59		 pop	 ecx
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
$LN79@Osfx:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 88   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00017	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax

; 89   : 		}

  0001b	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Addit$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 58   : 	__CLR_OR_THIS_CALL basic_ostream(_Uninitialized, bool _Addit = true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 59   : 		{	// construct uninitialized

  0002b	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00036	74 1b		 je	 SHORT $LN2@basic_ostr
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_ostr:

; 60   : 		if (_Addit)

  00053	80 7d 0c 00	 cmp	 BYTE PTR __Addit$[ebp], 0
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005c	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00063	8b 06		 mov	 eax, DWORD PTR [esi]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0006b	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  0006f	74 10		 je	 SHORT $LN13@basic_ostr

; 61   : 			this->_Addstd(this);	// suppress for basic_iostream

  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	03 c6		 add	 eax, esi
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0007e	83 c4 04	 add	 esp, 4
$LN13@basic_ostr:

; 62   : 		}

  00081	8b c6		 mov	 eax, esi
  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN8@basic_ostr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN8@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@W4_Uninitialized@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00032	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003b	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
  0003f	52		 push	 edx
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  0004d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00052	83 c4 04	 add	 esp, 4
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00028	8d 72 e8	 lea	 esi, DWORD PTR [edx-24]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003e	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
  00042	52		 push	 edx
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00050	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00055	83 c4 04	 add	 esp, 4
  00058	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005c	74 0b		 je	 SHORT $LN16@scalar
  0005e	6a 60		 push	 96			; 00000060H
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
$LN16@scalar:
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$3:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 81   : 		{	// destroy the object

  00000	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00017	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax

; 82   : 		}

  0001b	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\istream
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 46   : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002b	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00036	74 1b		 je	 SHORT $LN2@basic_istr
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  0003e	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_istr:
  00053	8b 06		 mov	 eax, DWORD PTR [esi]

; 47   : 		_Myios::init(_Strbuf, _Isstd);

  00055	ff 75 0c	 push	 DWORD PTR __Isstd$[ebp]
  00058	ff 75 08	 push	 DWORD PTR __Strbuf$[ebp]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0006d	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00081	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00084	03 ce		 add	 ecx, esi
  00086	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 48   : 		}

  0008b	8b c6		 mov	 eax, esi
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5e		 pop	 esi
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN10@scalar
  00041	6a 48		 push	 72			; 00000048H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 183  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 		{	// default constructor, do nothing
; 185  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
$T2 = -60						; size = 20
$T3 = -40						; size = 20
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 170  : 		{	// initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 171  : 		_Init();	// initialize ios_base

  00029	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 172  : 		_Mystrbuf = _Strbuf;

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]

; 173  : 		_Tiestr = 0;
; 174  : 		_Fillch = widen(' ');

  00031	8b ce		 mov	 ecx, esi
  00033	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00036	8d 45 ec	 lea	 eax, DWORD PTR $T4[ebp]
  00039	50		 push	 eax
  0003a	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00041	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00046	50		 push	 eax
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	8b 4d f0	 mov	 ecx, DWORD PTR $T4[ebp+4]
  0005b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN11@init
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	ff 52 08	 call	 DWORD PTR [edx+8]
  0006b	85 c0		 test	 eax, eax
  0006d	74 08		 je	 SHORT $LN11@init
  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	8b c8		 mov	 ecx, eax
  00073	6a 01		 push	 1
  00075	ff 12		 call	 DWORD PTR [edx]
$LN11@init:
  00077	8b 07		 mov	 eax, DWORD PTR [edi]
  00079	8b cf		 mov	 ecx, edi
  0007b	6a 20		 push	 32			; 00000020H
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00087	ff d0		 call	 eax

; 175  : 
; 176  : 		if (_Mystrbuf == 0)

  00089	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  0008d	88 46 40	 mov	 BYTE PTR [esi+64], al
  00090	75 79		 jne	 SHORT $LN33@init

; 177  : 			setstate(badbit);

  00092	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00095	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00098	83 e0 13	 and	 eax, 19			; 00000013H
  0009b	83 c8 04	 or	 eax, 4
  0009e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000a1	23 c8		 and	 ecx, eax
  000a3	74 66		 je	 SHORT $LN33@init
  000a5	f6 c1 04	 test	 cl, 4
  000a8	74 2a		 je	 SHORT $LN30@init
  000aa	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN76@init:
  000b4	50		 push	 eax
  000b5	6a 01		 push	 1
  000b7	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000ba	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000bf	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  000c6	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000c9	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
$LN77@init:
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN78@init:
$LN30@init:
  000d4	f6 c1 02	 test	 cl, 2
  000d7	74 0c		 je	 SHORT $LN32@init
  000d9	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000e3	eb cf		 jmp	 SHORT $LN76@init
$LN32@init:
  000e5	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  000ef	50		 push	 eax
  000f0	6a 01		 push	 1
  000f2	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f5	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  000fa	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00101	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00104	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00109	eb c3		 jmp	 SHORT $LN77@init
$LN33@init:

; 178  : 
; 179  : 		if (_Isstd)

  0010b	80 7d 0c 00	 cmp	 BYTE PTR __Isstd$[ebp], 0
  0010f	74 09		 je	 SHORT $LN3@init

; 180  : 			_Addstd(this);	// special handling for standard streams

  00111	56		 push	 esi
  00112	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00117	83 c4 04	 add	 esp, 4
$LN3@init:

; 181  : 		}

  0011a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00124	59		 pop	 ecx
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 08 00	 ret	 8
$LN75@init:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$1:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 130  : 		{	// convert _Byte to character using imbued locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 131  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00026	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0002f	50		 push	 eax
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b f0		 mov	 esi, eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp+4]
  00044	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004b	85 c9		 test	 ecx, ecx
  0004d	74 11		 je	 SHORT $LN7@widen
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	ff 52 08	 call	 DWORD PTR [edx+8]
  00054	85 c0		 test	 eax, eax
  00056	74 08		 je	 SHORT $LN7@widen
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	8b c8		 mov	 ecx, eax
  0005c	6a 01		 push	 1
  0005e	ff 12		 call	 DWORD PTR [edx]
$LN7@widen:

; 132  : 		return (_Ctype_fac.widen(_Byte));

  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	8b ce		 mov	 ecx, esi
  00064	ff 75 08	 push	 DWORD PTR __Byte$[ebp]
  00067	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006e	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00071	ff d0		 call	 eax

; 133  : 		}

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$1:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 113  : 		return (_Fillch);

  00000	8a 41 40	 mov	 al, BYTE PTR [ecx+64]

; 114  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 92   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 93   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 80   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 81   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 58   : 		{	// merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   : 		if (_State != goodbit)

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 1a		 je	 SHORT $LN2@setstate

; 60   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  0000a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000d	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00010	0b d0		 or	 edx, eax
  00012	8b c2		 mov	 eax, edx
  00014	83 c8 04	 or	 eax, 4
  00017	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0001b	0f 45 c2	 cmovne	 eax, edx
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN2@setstate:

; 61   : 		}

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 44   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]

; 45   : 		ios_base::clear((iostate)(_Mystrbuf == 0

  00006	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00009	83 ca 04	 or	 edx, 4
  0000c	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00010	0f 45 55 08	 cmovne	 edx, DWORD PTR __State$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 46   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);
; 47   : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 40   : 		}

  00022	51		 push	 ecx
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00030	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00035	83 c4 04	 add	 esp, 4
  00038	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?ExceptionHandlerThread@@YAXPAX@Z
_TEXT	SEGMENT
_si$ = -21620						; size = 36
_mi$ = -21584						; size = 28
_callStack$ = -21556					; size = 176
_exCode$1$ = -21380					; size = 4
_DbgHelpSymInitialize$1$ = -21376			; size = 4
_DbgHelpSymGetOptions$1$ = -21372			; size = 4
_crc$1$ = -21368					; size = 4
_DbgHelpSymFunctionTableAccess64$1$ = -21364		; size = 4
_DbgHelpSymGetModuleBase64$1$ = -21360			; size = 4
_addr$1$ = -21356					; size = 4
_this$2 = -21356					; size = 4
_this$ = -21356						; size = 4
_frameNumber$1$ = -21352				; size = 4
_DbgHelpStackWalk64$1$ = -21348				; size = 4
$T3 = -21348						; size = 4
_ep$1$ = -21344						; size = 4
_sp$1$ = -21340						; size = 4
_stackTop$1$ = -21336					; size = 4
_DbgHelpSymFromAddr$1$ = -21336				; size = 4
_bytesRead$4 = -21336					; size = 4
$T5 = -21336						; size = 4
_retAddrs$ = -21332					; size = 8
_threadArg$GSCopy$1$ = -21328				; size = 4
_frame$6 = -21324					; size = 264
_fi$7 = -21060						; size = 52
_urlStr$ = -21008					; size = 24
$T8 = -20984						; size = 24
$T9 = -20984						; size = 24
_$S3$10 = -20984					; size = 24
_$S2$11 = -20984					; size = 24
_lastSymbol$12 = -20984					; size = 24
_symbolBuffer$13 = -20960				; size = 2088
_msg$ = -18872						; size = 16384
_url$ = -2488						; size = 2084
_modPath$ = -404					; size = 260
_lpack$ = -144						; size = 128
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_threadArg$ = 8						; size = 4
?ExceptionHandlerThread@@YAXPAX@Z PROC			; ExceptionHandlerThread, COMDAT

; 2148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ExceptionHandlerThread@@YAXPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 68 54 00 00	 mov	 eax, 21608		; 00005468H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 45 08	 mov	 eax, DWORD PTR _threadArg$[ebp]
  00035	c7 85 9c ac ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
  0003f	89 85 b0 ac ff
	ff		 mov	 DWORD PTR _threadArg$GSCopy$1$[ebp], eax

; 2149 : 	ExceptionHandlerThreadArgs *args = (ExceptionHandlerThreadArgs *) threadArg;
; 2150 : 
; 2151 : 	EXCEPTION_POINTERS *ep = args->ExceptionPointers;
; 2152 : 	DWORD addr;
; 2153 : 	DWORD exCode = ep->ExceptionRecord->ExceptionCode;
; 2154 : 	SYSTEM_INFO si;
; 2155 : 	wchar_t msg[8192];
; 2156 : 	char modPath[MAX_PATH];
; 2157 : 	int crc = 0;

  00045	c7 85 88 ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _crc$1$[ebp], 0
  0004f	8b 18		 mov	 ebx, DWORD PTR [eax]
  00051	89 9d a0 ac ff
	ff		 mov	 DWORD PTR _ep$1$[ebp], ebx
  00057	8b 03		 mov	 eax, DWORD PTR [ebx]
  00059	8b 30		 mov	 esi, DWORD PTR [eax]
  0005b	89 b5 7c ac ff
	ff		 mov	 DWORD PTR _exCode$1$[ebp], esi

; 2158 : 	char url[MAX_URL_LENGTH];
; 2159 : 	char lpack[128];
; 2160 : 	stringstream callStack;

  00061	c7 85 cc ab ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0006b	c7 85 dc ab ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00075	6a 00		 push	 0
  00077	8d 85 e4 ab ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+24]
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	c7 85 9c ac ff
	ff 01 00 00 00	 mov	 DWORD PTR $T3[ebp], 1
  00091	50		 push	 eax
  00092	8d 8d 34 ac ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp+104]
  00098	c7 85 34 ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp+104], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  000a2	c7 85 30 ac ff
	ff 50 00 00 00	 mov	 DWORD PTR _callStack$[ebp+100], 80 ; 00000050H
  000ac	66 0f 13 85 d4
	ab ff ff	 movlpd	 QWORD PTR _callStack$[ebp+8], xmm0
  000b4	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
  000b9	8d 85 dc ab ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+16]
  000bf	89 85 94 ac ff
	ff		 mov	 DWORD PTR _this$2[ebp], eax
  000c5	8b 85 dc ab ff
	ff		 mov	 eax, DWORD PTR _callStack$[ebp+16]
  000cb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ce	c7 84 05 dc ab
	ff ff 00 00 00
	00		 mov	 DWORD PTR _callStack$[ebp+eax+16], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000d9	8b 85 dc ab ff
	ff		 mov	 eax, DWORD PTR _callStack$[ebp+16]
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  000e5	89 84 0d d8 ab
	ff ff		 mov	 DWORD PTR _callStack$[ebp+ecx+12], eax
  000ec	8b 85 cc ab ff
	ff		 mov	 eax, DWORD PTR _callStack$[ebp]
  000f2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f5	c7 84 05 cc ab
	ff ff 00 00 00
	00		 mov	 DWORD PTR _callStack$[ebp+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00100	8b 85 cc ab ff
	ff		 mov	 eax, DWORD PTR _callStack$[ebp]
  00106	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00109	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  0010c	89 84 0d c8 ab
	ff ff		 mov	 DWORD PTR _callStack$[ebp+ecx-4], eax
  00113	8b 85 cc ab ff
	ff		 mov	 eax, DWORD PTR _callStack$[ebp]
  00119	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00120	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00123	c7 84 05 cc ab
	ff ff 00 00 00
	00		 mov	 DWORD PTR _callStack$[ebp+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0012e	8b 85 cc ab ff
	ff		 mov	 eax, DWORD PTR _callStack$[ebp]
  00134	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00137	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  0013a	89 84 0d c8 ab
	ff ff		 mov	 DWORD PTR _callStack$[ebp+ecx-4], eax
  00141	8d 85 e4 ab ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+24]
  00147	8b c8		 mov	 ecx, eax
  00149	89 85 94 ac ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
  0014f	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00154	c7 85 e4 ab ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp+24], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0015e	c7 85 1c ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp+80], 0
  00168	c7 85 20 ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp+84], 0

; 2161 : 	addr = (DWORD) ep->ExceptionRecord->ExceptionAddress;

  00172	8b 03		 mov	 eax, DWORD PTR [ebx]

; 2162 : 	PDWORD sp = (PDWORD) ep->ContextRecord->Esp;
; 2163 : 	int frameNumber = 0;

  00174	33 ff		 xor	 edi, edi
  00176	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  0017d	89 bd 98 ac ff
	ff		 mov	 DWORD PTR _frameNumber$1$[ebp], edi
  00183	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00186	89 85 94 ac ff
	ff		 mov	 DWORD PTR _addr$1$[ebp], eax
  0018c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0018f	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  00195	89 85 a4 ac ff
	ff		 mov	 DWORD PTR _sp$1$[ebp], eax

; 2164 : 
; 2165 : 	switch (exCode)

  0019b	81 fe de fa ed
	0e		 cmp	 esi, 250477278		; 0eedfadeH
  001a1	0f 84 3f 0b 00
	00		 je	 $LN23@ExceptionH
  001a7	81 fe 06 00 00
	c0		 cmp	 esi, -1073741818	; c0000006H
  001ad	0f 84 33 0b 00
	00		 je	 $LN23@ExceptionH

; 2174 : 	}
; 2175 : 
; 2176 : 	// Call stack
; 2177 : 	HMODULE dbgDll = LoadLibraryEx ("dbghelp.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32);

  001b3	68 00 08 00 00	 push	 2048			; 00000800H
  001b8	57		 push	 edi
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OOEJBPPK@dbghelp?4dll?$AA@
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryExA@12

; 2178 : 	if (dbgDll)

  001c4	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetProcAddress@8
  001ca	8b f0		 mov	 esi, eax
  001cc	85 f6		 test	 esi, esi
  001ce	0f 84 25 03 00
	00		 je	 $LN26@ExceptionH

; 2179 : 	{
; 2180 : 		typedef DWORD (__stdcall *SymGetOptions_t) ();
; 2181 : 		typedef DWORD (__stdcall *SymSetOptions_t) (DWORD SymOptions);
; 2182 : 		typedef BOOL (__stdcall *SymInitialize_t) (HANDLE hProcess, PCSTR UserSearchPath, BOOL fInvadeProcess);
; 2183 : 		typedef BOOL (__stdcall *StackWalk64_t) (DWORD MachineType, HANDLE hProcess, HANDLE hThread, LPSTACKFRAME64 StackFrame, PVOID ContextRecord, PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);
; 2184 : 		typedef BOOL (__stdcall * SymFromAddr_t) (HANDLE hProcess, DWORD64 Address, PDWORD64 Displacement, PSYMBOL_INFO Symbol);
; 2185 : 
; 2186 : 		SymGetOptions_t DbgHelpSymGetOptions = (SymGetOptions_t) GetProcAddress (dbgDll, "SymGetOptions");

  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KGBKFDLO@SymGetOptions?$AA@
  001d9	56		 push	 esi
  001da	ff d3		 call	 ebx

; 2187 : 		SymSetOptions_t DbgHelpSymSetOptions = (SymSetOptions_t) GetProcAddress (dbgDll, "SymSetOptions");

  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LIDFOEPH@SymSetOptions?$AA@
  001e1	56		 push	 esi
  001e2	89 85 84 ac ff
	ff		 mov	 DWORD PTR _DbgHelpSymGetOptions$1$[ebp], eax
  001e8	ff d3		 call	 ebx

; 2188 : 		SymInitialize_t DbgHelpSymInitialize = (SymInitialize_t) GetProcAddress (dbgDll, "SymInitialize");

  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MCMFENKA@SymInitialize?$AA@
  001ef	56		 push	 esi
  001f0	8b d8		 mov	 ebx, eax
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 2189 : 		PFUNCTION_TABLE_ACCESS_ROUTINE64 DbgHelpSymFunctionTableAccess64 = (PFUNCTION_TABLE_ACCESS_ROUTINE64) GetProcAddress (dbgDll, "SymFunctionTableAccess64");

  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OOGADJNM@SymFunctionTableAccess64?$AA@
  001fd	56		 push	 esi
  001fe	89 85 80 ac ff
	ff		 mov	 DWORD PTR _DbgHelpSymInitialize$1$[ebp], eax
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 2190 : 		PGET_MODULE_BASE_ROUTINE64 DbgHelpSymGetModuleBase64 = (PGET_MODULE_BASE_ROUTINE64) GetProcAddress (dbgDll, "SymGetModuleBase64");

  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JCAKOMOK@SymGetModuleBase64?$AA@
  0020f	56		 push	 esi
  00210	89 85 8c ac ff
	ff		 mov	 DWORD PTR _DbgHelpSymFunctionTableAccess64$1$[ebp], eax
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 2191 : 		StackWalk64_t DbgHelpStackWalk64 = (StackWalk64_t) GetProcAddress (dbgDll, "StackWalk64");

  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FJINHFIC@StackWalk64?$AA@
  00221	56		 push	 esi
  00222	89 85 90 ac ff
	ff		 mov	 DWORD PTR _DbgHelpSymGetModuleBase64$1$[ebp], eax
  00228	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 2192 : 		SymFromAddr_t DbgHelpSymFromAddr = (SymFromAddr_t) GetProcAddress (dbgDll, "SymFromAddr");

  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GHNAPHBH@SymFromAddr?$AA@
  00233	56		 push	 esi
  00234	89 85 9c ac ff
	ff		 mov	 DWORD PTR _DbgHelpStackWalk64$1$[ebp], eax
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00240	8b c8		 mov	 ecx, eax

; 2193 : 
; 2194 : 		if (DbgHelpSymGetOptions && DbgHelpSymSetOptions && DbgHelpSymInitialize && DbgHelpSymFunctionTableAccess64 && DbgHelpSymGetModuleBase64 && DbgHelpStackWalk64 && DbgHelpSymFromAddr)

  00242	8b 85 84 ac ff
	ff		 mov	 eax, DWORD PTR _DbgHelpSymGetOptions$1$[ebp]
  00248	89 8d a8 ac ff
	ff		 mov	 DWORD PTR _DbgHelpSymFromAddr$1$[ebp], ecx
  0024e	85 c0		 test	 eax, eax
  00250	0f 84 a3 02 00
	00		 je	 $LN26@ExceptionH
  00256	85 db		 test	 ebx, ebx
  00258	0f 84 9b 02 00
	00		 je	 $LN26@ExceptionH
  0025e	8b b5 80 ac ff
	ff		 mov	 esi, DWORD PTR _DbgHelpSymInitialize$1$[ebp]
  00264	85 f6		 test	 esi, esi
  00266	0f 84 8d 02 00
	00		 je	 $LN26@ExceptionH
  0026c	39 bd 8c ac ff
	ff		 cmp	 DWORD PTR _DbgHelpSymFunctionTableAccess64$1$[ebp], edi
  00272	0f 84 81 02 00
	00		 je	 $LN26@ExceptionH
  00278	39 bd 90 ac ff
	ff		 cmp	 DWORD PTR _DbgHelpSymGetModuleBase64$1$[ebp], edi
  0027e	0f 84 75 02 00
	00		 je	 $LN26@ExceptionH
  00284	39 bd 9c ac ff
	ff		 cmp	 DWORD PTR _DbgHelpStackWalk64$1$[ebp], edi
  0028a	0f 84 69 02 00
	00		 je	 $LN26@ExceptionH
  00290	85 c9		 test	 ecx, ecx
  00292	0f 84 61 02 00
	00		 je	 $LN26@ExceptionH

; 2195 : 		{
; 2196 : 			DbgHelpSymSetOptions (DbgHelpSymGetOptions() | SYMOPT_DEFERRED_LOADS | SYMOPT_ALLOW_ABSOLUTE_SYMBOLS | SYMOPT_NO_CPP);

  00298	ff d0		 call	 eax
  0029a	0d 0c 08 00 00	 or	 eax, 2060		; 0000080cH
  0029f	50		 push	 eax
  002a0	ff d3		 call	 ebx

; 2197 : 
; 2198 : 			if (DbgHelpSymInitialize (GetCurrentProcess(), NULL, TRUE))

  002a2	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetCurrentProcess@0
  002a8	6a 01		 push	 1
  002aa	57		 push	 edi
  002ab	ff d3		 call	 ebx
  002ad	50		 push	 eax
  002ae	ff d6		 call	 esi
  002b0	85 c0		 test	 eax, eax
  002b2	0f 84 41 02 00
	00		 je	 $LN26@ExceptionH

; 2199 : 			{
; 2200 : 				STACKFRAME64 frame;
; 2201 : 				memset (&frame, 0, sizeof (frame));

  002b8	68 08 01 00 00	 push	 264			; 00000108H
  002bd	8d 85 b4 ac ff
	ff		 lea	 eax, DWORD PTR _frame$6[ebp]
  002c3	57		 push	 edi
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 _memset

; 2202 : 
; 2203 : 				frame.AddrPC.Offset = ep->ContextRecord->Eip;

  002ca	8b 95 a0 ac ff
	ff		 mov	 edx, DWORD PTR _ep$1$[ebp]
  002d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d3	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002d6	8b 81 b8 00 00
	00		 mov	 eax, DWORD PTR [ecx+184]
  002dc	89 85 b4 ac ff
	ff		 mov	 DWORD PTR _frame$6[ebp], eax
  002e2	89 bd b8 ac ff
	ff		 mov	 DWORD PTR _frame$6[ebp+4], edi

; 2204 : 				frame.AddrPC.Mode = AddrModeFlat;

  002e8	c7 85 c0 ac ff
	ff 03 00 00 00	 mov	 DWORD PTR _frame$6[ebp+12], 3

; 2205 : 				frame.AddrStack.Offset = ep->ContextRecord->Esp;

  002f2	8b 81 c4 00 00
	00		 mov	 eax, DWORD PTR [ecx+196]
  002f8	89 85 e4 ac ff
	ff		 mov	 DWORD PTR _frame$6[ebp+48], eax
  002fe	89 bd e8 ac ff
	ff		 mov	 DWORD PTR _frame$6[ebp+52], edi

; 2206 : 				frame.AddrStack.Mode = AddrModeFlat;

  00304	c7 85 f0 ac ff
	ff 03 00 00 00	 mov	 DWORD PTR _frame$6[ebp+60], 3

; 2207 : 				frame.AddrFrame.Offset = ep->ContextRecord->Ebp;

  0030e	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00314	89 85 d4 ac ff
	ff		 mov	 DWORD PTR _frame$6[ebp+32], eax
  0031a	89 bd d8 ac ff
	ff		 mov	 DWORD PTR _frame$6[ebp+36], edi

; 2208 : 				frame.AddrFrame.Mode = AddrModeFlat;

  00320	c7 85 e0 ac ff
	ff 03 00 00 00	 mov	 DWORD PTR _frame$6[ebp+44], 3

; 2209 : 
; 2210 : 				string lastSymbol;

  0032a	c7 85 1c ae ff
	ff 0f 00 00 00	 mov	 DWORD PTR _lastSymbol$12[ebp+20], 15 ; 0000000fH
  00334	89 bd 18 ae ff
	ff		 mov	 DWORD PTR _lastSymbol$12[ebp+16], edi
  0033a	c6 85 08 ae ff
	ff 00		 mov	 BYTE PTR _lastSymbol$12[ebp], 0
  00341	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00345	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@ExceptionH:

; 2211 : 
; 2212 : 				while (frameNumber < 32 && DbgHelpStackWalk64 (IMAGE_FILE_MACHINE_I386, GetCurrentProcess(), args->ExceptionThread, &frame, ep->ContextRecord, NULL, DbgHelpSymFunctionTableAccess64, DbgHelpSymGetModuleBase64, NULL))

  00350	6a 00		 push	 0
  00352	ff b5 90 ac ff
	ff		 push	 DWORD PTR _DbgHelpSymGetModuleBase64$1$[ebp]
  00358	8d 85 b4 ac ff
	ff		 lea	 eax, DWORD PTR _frame$6[ebp]
  0035e	ff b5 8c ac ff
	ff		 push	 DWORD PTR _DbgHelpSymFunctionTableAccess64$1$[ebp]
  00364	6a 00		 push	 0
  00366	ff 72 04	 push	 DWORD PTR [edx+4]
  00369	50		 push	 eax
  0036a	8b 85 b0 ac ff
	ff		 mov	 eax, DWORD PTR _threadArg$GSCopy$1$[ebp]
  00370	ff 70 04	 push	 DWORD PTR [eax+4]
  00373	ff d3		 call	 ebx
  00375	50		 push	 eax
  00376	68 4c 01 00 00	 push	 332			; 0000014cH
  0037b	ff 95 9c ac ff
	ff		 call	 DWORD PTR _DbgHelpStackWalk64$1$[ebp]
  00381	85 c0		 test	 eax, eax
  00383	0f 84 5b 01 00
	00		 je	 $LN5@ExceptionH

; 2213 : 				{
; 2214 : 					if (!frame.AddrPC.Offset)

  00389	8b b5 b4 ac ff
	ff		 mov	 esi, DWORD PTR _frame$6[ebp]
  0038f	8b c6		 mov	 eax, esi
  00391	8b 9d b8 ac ff
	ff		 mov	 ebx, DWORD PTR _frame$6[ebp+4]
  00397	0b c3		 or	 eax, ebx
  00399	0f 84 30 01 00
	00		 je	 $LN1685@ExceptionH

; 2215 : 						continue;
; 2216 : 
; 2217 : 					ULONG64 symbolBuffer[(sizeof (SYMBOL_INFO) + MAX_SYM_NAME * sizeof (TCHAR) + sizeof (ULONG64) - 1) / sizeof (ULONG64)];
; 2218 : 					memset (symbolBuffer, 0, sizeof (symbolBuffer));

  0039f	68 28 08 00 00	 push	 2088			; 00000828H
  003a4	8d 85 20 ae ff
	ff		 lea	 eax, DWORD PTR _symbolBuffer$13[ebp]
  003aa	6a 00		 push	 0
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 _memset
  003b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2219 : 
; 2220 : 					PSYMBOL_INFO symbol = (PSYMBOL_INFO) symbolBuffer;
; 2221 : 					symbol->SizeOfStruct = sizeof (SYMBOL_INFO);

  003b5	c7 85 20 ae ff
	ff 58 00 00 00	 mov	 DWORD PTR _symbolBuffer$13[ebp], 88 ; 00000058H

; 2222 : 					symbol->MaxNameLen = MAX_SYM_NAME;
; 2223 : 
; 2224 : 					if (DbgHelpSymFromAddr (GetCurrentProcess(), frame.AddrPC.Offset, NULL, symbol) && symbol->NameLen > 0)

  003bf	8d 85 20 ae ff
	ff		 lea	 eax, DWORD PTR _symbolBuffer$13[ebp]
  003c5	c7 85 70 ae ff
	ff d0 07 00 00	 mov	 DWORD PTR _symbolBuffer$13[ebp+80], 2000 ; 000007d0H
  003cf	50		 push	 eax
  003d0	6a 00		 push	 0
  003d2	53		 push	 ebx
  003d3	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetCurrentProcess@0
  003d9	56		 push	 esi
  003da	ff d3		 call	 ebx
  003dc	50		 push	 eax
  003dd	ff 95 a8 ac ff
	ff		 call	 DWORD PTR _DbgHelpSymFromAddr$1$[ebp]
  003e3	85 c0		 test	 eax, eax
  003e5	0f 84 a3 01 00
	00		 je	 $LN28@ExceptionH
  003eb	8b 85 6c ae ff
	ff		 mov	 eax, DWORD PTR _symbolBuffer$13[ebp+76]
  003f1	85 c0		 test	 eax, eax
  003f3	0f 84 95 01 00
	00		 je	 $LN28@ExceptionH

; 2225 : 					{
; 2226 : 						for (size_t i = 0; i < symbol->NameLen; ++i)

  003f9	33 f6		 xor	 esi, esi
  003fb	85 c0		 test	 eax, eax
  003fd	74 27		 je	 SHORT $LN7@ExceptionH
  003ff	90		 npad	 1
$LL8@ExceptionH:

; 2227 : 						{
; 2228 : 							if (!isalnum (symbol->Name[i]))

  00400	0f be 84 35 74
	ae ff ff	 movsx	 eax, BYTE PTR _symbolBuffer$13[ebp+esi+84]
  00408	50		 push	 eax
  00409	e8 00 00 00 00	 call	 _isalnum
  0040e	83 c4 04	 add	 esp, 4
  00411	85 c0		 test	 eax, eax
  00413	75 08		 jne	 SHORT $LN6@ExceptionH

; 2229 : 								symbol->Name[i] = '_';

  00415	c6 84 35 74 ae
	ff ff 5f	 mov	 BYTE PTR _symbolBuffer$13[ebp+esi+84], 95 ; 0000005fH
$LN6@ExceptionH:

; 2225 : 					{
; 2226 : 						for (size_t i = 0; i < symbol->NameLen; ++i)

  0041d	46		 inc	 esi
  0041e	3b b5 6c ae ff
	ff		 cmp	 esi, DWORD PTR _symbolBuffer$13[ebp+76]
  00424	72 da		 jb	 SHORT $LL8@ExceptionH
$LN7@ExceptionH:

; 2230 : 						}
; 2231 : 
; 2232 : 						if (symbol->Name != lastSymbol)

  00426	80 bd 74 ae ff
	ff 00		 cmp	 BYTE PTR _symbolBuffer$13[ebp+84], 0
  0042d	75 04		 jne	 SHORT $LN268@ExceptionH
  0042f	33 f6		 xor	 esi, esi
  00431	eb 16		 jmp	 SHORT $LN269@ExceptionH
$LN268@ExceptionH:
  00433	8d b5 74 ae ff
	ff		 lea	 esi, DWORD PTR _symbolBuffer$13[ebp+84]
  00439	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0043c	0f 1f 40 00	 npad	 4
$LL1681@ExceptionH:
  00440	8a 06		 mov	 al, BYTE PTR [esi]
  00442	46		 inc	 esi
  00443	84 c0		 test	 al, al
  00445	75 f9		 jne	 SHORT $LL1681@ExceptionH
  00447	2b f1		 sub	 esi, ecx
$LN269@ExceptionH:
  00449	83 bd 1c ae ff
	ff 10		 cmp	 DWORD PTR _lastSymbol$12[ebp+20], 16 ; 00000010H
  00450	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _lastSymbol$12[ebp]
  00456	8b 9d 18 ae ff
	ff		 mov	 ebx, DWORD PTR _lastSymbol$12[ebp+16]
  0045c	8b c6		 mov	 eax, esi
  0045e	0f 43 8d 08 ae
	ff ff		 cmovae	 ecx, DWORD PTR _lastSymbol$12[ebp]
  00465	3b de		 cmp	 ebx, esi
  00467	0f 42 c3	 cmovb	 eax, ebx
  0046a	50		 push	 eax
  0046b	8d 85 74 ae ff
	ff		 lea	 eax, DWORD PTR _symbolBuffer$13[ebp+84]
  00471	50		 push	 eax
  00472	51		 push	 ecx
  00473	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00478	83 c4 0c	 add	 esp, 12			; 0000000cH
  0047b	85 c0		 test	 eax, eax
  0047d	75 06		 jne	 SHORT $LN293@ExceptionH
  0047f	3b de		 cmp	 ebx, esi
  00481	72 02		 jb	 SHORT $LN293@ExceptionH
  00483	76 38		 jbe	 SHORT $LN31@ExceptionH
$LN293@ExceptionH:

; 2233 : 							callStack << "&st" << frameNumber++ << "=" << symbol->Name;

  00485	57		 push	 edi
  00486	8d 85 dc ab ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+16]
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  00491	50		 push	 eax
  00492	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00497	83 c4 08	 add	 esp, 8
  0049a	8b c8		 mov	 ecx, eax
  0049c	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  004a1	68 00 00 00 00	 push	 OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004ac	8d 8d 74 ae ff
	ff		 lea	 ecx, DWORD PTR _symbolBuffer$13[ebp+84]
  004b2	51		 push	 ecx
  004b3	50		 push	 eax
  004b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004b9	83 c4 10	 add	 esp, 16			; 00000010H
  004bc	47		 inc	 edi
$LN31@ExceptionH:

; 2234 : 
; 2235 : 						lastSymbol = symbol->Name;

  004bd	8d 85 74 ae ff
	ff		 lea	 eax, DWORD PTR _symbolBuffer$13[ebp+84]
  004c3	50		 push	 eax
  004c4	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _lastSymbol$12[ebp]
  004ca	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN1685@ExceptionH:
  004cf	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetCurrentProcess@0
$LN32@ExceptionH:

; 2211 : 
; 2212 : 				while (frameNumber < 32 && DbgHelpStackWalk64 (IMAGE_FILE_MACHINE_I386, GetCurrentProcess(), args->ExceptionThread, &frame, ep->ContextRecord, NULL, DbgHelpSymFunctionTableAccess64, DbgHelpSymGetModuleBase64, NULL))

  004d5	8b 95 a0 ac ff
	ff		 mov	 edx, DWORD PTR _ep$1$[ebp]
  004db	83 ff 20	 cmp	 edi, 32			; 00000020H
  004de	0f 8c 6c fe ff
	ff		 jl	 $LL4@ExceptionH
$LN5@ExceptionH:

; 2240 : 					}
; 2241 : 				}
; 2242 : 			}

  004e4	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _lastSymbol$12[ebp]
  004ea	89 bd 98 ac ff
	ff		 mov	 DWORD PTR _frameNumber$1$[ebp], edi
  004f0	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  004f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN26@ExceptionH:

; 2243 : 		}
; 2244 : 	}
; 2245 : 
; 2246 : 	// StackWalk64() may fail due to missing frame pointers
; 2247 : 	list <DWORD> retAddrs;

  004f9	6a 00		 push	 0
  004fb	6a 00		 push	 0
  004fd	8d 8d ac ac ff
	ff		 lea	 ecx, DWORD PTR _retAddrs$[ebp]
  00503	c7 85 ac ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _retAddrs$[ebp], 0
  0050d	c7 85 b0 ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _retAddrs$[ebp+4], 0
  00517	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@KV?$allocator@K@std@@@std@@@std@@QAEPAU?$_List_node@KPAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<unsigned long,std::allocator<unsigned long> > >::_Buynode0
  0051c	8b d8		 mov	 ebx, eax
  0051e	89 9d ac ac ff
	ff		 mov	 DWORD PTR _retAddrs$[ebp], ebx
  00524	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH

; 2248 : 	if (frameNumber == 0)

  00528	85 ff		 test	 edi, edi
  0052a	75 20		 jne	 SHORT $LN34@ExceptionH

; 2249 : 		retAddrs.push_back (ep->ContextRecord->Eip);

  0052c	8b 85 a0 ac ff
	ff		 mov	 eax, DWORD PTR _ep$1$[ebp]
  00532	8d 8d ac ac ff
	ff		 lea	 ecx, DWORD PTR _retAddrs$[ebp]
  00538	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0053b	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00540	50		 push	 eax
  00541	e8 00 00 00 00	 call	 ?push_back@?$list@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::list<unsigned long,std::allocator<unsigned long> >::push_back
  00546	8b 9d ac ac ff
	ff		 mov	 ebx, DWORD PTR _retAddrs$[ebp]
$LN34@ExceptionH:

; 2250 : 
; 2251 : 	retAddrs.push_back (0);

  0054c	8d 85 a8 ac ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00552	c7 85 a8 ac ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], 0
  0055c	50		 push	 eax
  0055d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00560	8d 8d ac ac ff
	ff		 lea	 ecx, DWORD PTR _retAddrs$[ebp]
  00566	53		 push	 ebx
  00567	e8 00 00 00 00	 call	 ??$_Buynode@K@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0$$QAK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long>
  0056c	8b b5 b0 ac ff
	ff		 mov	 esi, DWORD PTR _retAddrs$[ebp+4]
  00572	8b c8		 mov	 ecx, eax
  00574	b8 54 55 55 15	 mov	 eax, 357913940		; 15555554H
  00579	2b c6		 sub	 eax, esi
  0057b	83 f8 01	 cmp	 eax, 1
  0057e	0f 83 85 00 00
	00		 jae	 $LN361@ExceptionH
$LN1643@ExceptionH:
  00584	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00589	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN1689@ExceptionH:
$LN28@ExceptionH:

; 2236 : 					}
; 2237 : 					else if (frameNumber == 0 || IsReturnAddress (frame.AddrPC.Offset))

  0058e	85 ff		 test	 edi, edi
  00590	74 1c		 je	 SHORT $LN33@ExceptionH
  00592	ff b5 b8 ac ff
	ff		 push	 DWORD PTR _frame$6[ebp+4]
  00598	ff b5 b4 ac ff
	ff		 push	 DWORD PTR _frame$6[ebp]
  0059e	e8 00 00 00 00	 call	 ?IsReturnAddress@@YAH_K@Z ; IsReturnAddress
  005a3	83 c4 08	 add	 esp, 8
  005a6	85 c0		 test	 eax, eax
  005a8	0f 84 27 ff ff
	ff		 je	 $LN32@ExceptionH
$LN33@ExceptionH:

; 2238 : 					{
; 2239 : 						callStack << "&st" << frameNumber++ << "=0x" << hex << frame.AddrPC.Offset << dec;

  005ae	57		 push	 edi
  005af	8d 85 dc ab ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+16]
  005b5	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  005ba	50		 push	 eax
  005bb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005c0	83 c4 08	 add	 esp, 8
  005c3	8b c8		 mov	 ecx, eax
  005c5	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_03BPHHBGPB@?$DN0x?$AA@
  005cf	50		 push	 eax
  005d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005d5	83 c4 08	 add	 esp, 8
  005d8	8b c8		 mov	 ecx, eax
  005da	47		 inc	 edi
  005db	68 00 00 00 00	 push	 OFFSET ?dec@std@@YAAAVios_base@1@AAV21@@Z ; std::dec
  005e0	ff b5 b8 ac ff
	ff		 push	 DWORD PTR _frame$6[ebp+4]
  005e6	ff b5 b4 ac ff
	ff		 push	 DWORD PTR _frame$6[ebp]
  005ec	68 00 00 00 00	 push	 OFFSET ?hex@std@@YAAAVios_base@1@AAV21@@Z ; std::hex
  005f1	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  005f6	8b c8		 mov	 ecx, eax
  005f8	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  005fd	8b c8		 mov	 ecx, eax
  005ff	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00604	e9 cc fe ff ff	 jmp	 $LN32@ExceptionH

; 2250 : 
; 2251 : 	retAddrs.push_back (0);

$LN361@ExceptionH:
  00609	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  0060c	46		 inc	 esi
  0060d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2252 : 
; 2253 : 	MEMORY_BASIC_INFORMATION mi;
; 2254 : 	VirtualQuery (sp, &mi, sizeof (mi));

  00610	6a 1c		 push	 28			; 0000001cH
  00612	89 b5 b0 ac ff
	ff		 mov	 DWORD PTR _retAddrs$[ebp+4], esi
  00618	89 08		 mov	 DWORD PTR [eax], ecx
  0061a	8d 85 b0 ab ff
	ff		 lea	 eax, DWORD PTR _mi$[ebp]
  00620	50		 push	 eax
  00621	ff b5 a4 ac ff
	ff		 push	 DWORD PTR _sp$1$[ebp]
  00627	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualQuery@12

; 2255 : 	PDWORD stackTop = (PDWORD)((byte *) mi.BaseAddress + mi.RegionSize);

  0062d	8b 8d b0 ab ff
	ff		 mov	 ecx, DWORD PTR _mi$[ebp]
  00633	03 8d bc ab ff
	ff		 add	 ecx, DWORD PTR _mi$[ebp+12]
  00639	89 8d a8 ac ff
	ff		 mov	 DWORD PTR _stackTop$1$[ebp], ecx

; 2256 : 	int i = 0;
; 2257 : 
; 2258 : 	while (retAddrs.size() < 16 && &sp[i] < stackTop)

  0063f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00642	0f 83 85 01 00
	00		 jae	 $LN1680@ExceptionH
  00648	8b 85 a4 ac ff
	ff		 mov	 eax, DWORD PTR _sp$1$[ebp]
  0064e	66 90		 npad	 2
$LL9@ExceptionH:
  00650	3b c1		 cmp	 eax, ecx
  00652	0f 83 75 01 00
	00		 jae	 $LN1680@ExceptionH

; 2259 : 	{
; 2260 : 		if (IsReturnAddress (sp[i]))

  00658	6a 00		 push	 0
  0065a	ff 30		 push	 DWORD PTR [eax]
  0065c	e8 00 00 00 00	 call	 ?IsReturnAddress@@YAH_K@Z ; IsReturnAddress
  00661	83 c4 08	 add	 esp, 8
  00664	85 c0		 test	 eax, eax
  00666	0f 84 42 01 00
	00		 je	 $LN743@ExceptionH

; 2261 : 		{
; 2262 : 			bool duplicate = false;
; 2263 : 			foreach (DWORD prevAddr, retAddrs)

  0066c	8d 85 ac ac ff
	ff		 lea	 eax, DWORD PTR _retAddrs$[ebp]
  00672	32 db		 xor	 bl, bl
  00674	50		 push	 eax
  00675	8d 85 08 ae ff
	ff		 lea	 eax, DWORD PTR _$S2$11[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  00681	83 c4 08	 add	 esp, 8
  00684	8b 85 08 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp]
  0068a	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S2$11[ebp]
  00690	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00694	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00697	ff d0		 call	 eax
  00699	84 c0		 test	 al, al
  0069b	74 72		 je	 SHORT $LN12@ExceptionH
  0069d	8b bd a4 ac ff
	ff		 mov	 edi, DWORD PTR _sp$1$[ebp]
$LL13@ExceptionH:
  006a3	8b 85 1c ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp+20]
  006a9	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  006ac	33 c0		 xor	 eax, eax
  006ae	38 85 0d ae ff
	ff		 cmp	 BYTE PTR _$S2$11[ebp+5], al
  006b4	0f 94 c0	 sete	 al
  006b7	88 85 0d ae ff
	ff		 mov	 BYTE PTR _$S2$11[ebp+5], al
  006bd	84 c0		 test	 al, al
  006bf	74 24		 je	 SHORT $LN11@ExceptionH

; 2264 : 			{
; 2265 : 				if (sp[i] == prevAddr)

  006c1	8b 17		 mov	 edx, DWORD PTR [edi]
$LL16@ExceptionH:
  006c3	3b d6		 cmp	 edx, esi
  006c5	74 1c		 je	 SHORT $LN1632@ExceptionH

; 2261 : 		{
; 2262 : 			bool duplicate = false;
; 2263 : 			foreach (DWORD prevAddr, retAddrs)

  006c7	33 c9		 xor	 ecx, ecx
  006c9	c6 85 0c ae ff
	ff 01		 mov	 BYTE PTR _$S2$11[ebp+4], 1
  006d0	84 c0		 test	 al, al
  006d2	0f 94 c1	 sete	 cl
  006d5	8a c1		 mov	 al, cl
  006d7	88 85 0d ae ff
	ff		 mov	 BYTE PTR _$S2$11[ebp+5], al
  006dd	84 c9		 test	 cl, cl
  006df	75 e2		 jne	 SHORT $LL16@ExceptionH

; 2283 : 		}

  006e1	eb 02		 jmp	 SHORT $LN11@ExceptionH
$LN1632@ExceptionH:

; 2266 : 				{
; 2267 : 					duplicate = true;

  006e3	b3 01		 mov	 bl, 1
$LN11@ExceptionH:

; 2261 : 		{
; 2262 : 			bool duplicate = false;
; 2263 : 			foreach (DWORD prevAddr, retAddrs)

  006e5	8b 85 08 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp]
  006eb	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S2$11[ebp]
  006f1	ff 50 08	 call	 DWORD PTR [eax+8]
  006f4	8b 85 08 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp]
  006fa	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S2$11[ebp]
  00700	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00703	ff d0		 call	 eax
  00705	84 c0		 test	 al, al
  00707	75 9a		 jne	 SHORT $LL13@ExceptionH
  00709	8b bd 98 ac ff
	ff		 mov	 edi, DWORD PTR _frameNumber$1$[ebp]
$LN12@ExceptionH:

; 2268 : 					break;
; 2269 : 				}
; 2270 : 			}

  0070f	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp+8]
  00715	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00719	8b 08		 mov	 ecx, DWORD PTR [eax]
  0071b	89 00		 mov	 DWORD PTR [eax], eax
  0071d	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp+8]
  00723	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00726	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp+8]
  0072c	c7 85 14 ae ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S2$11[ebp+12], 0
  00736	3b c8		 cmp	 ecx, eax
  00738	74 1d		 je	 SHORT $LN450@ExceptionH
  0073a	66 0f 1f 44 00
	00		 npad	 6
$LL451@ExceptionH:
  00740	8b 31		 mov	 esi, DWORD PTR [ecx]
  00742	51		 push	 ecx
  00743	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00748	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S2$11[ebp+8]
  0074e	83 c4 04	 add	 esp, 4
  00751	8b ce		 mov	 ecx, esi
  00753	3b f0		 cmp	 esi, eax
  00755	75 e9		 jne	 SHORT $LL451@ExceptionH
$LN450@ExceptionH:
  00757	50		 push	 eax
  00758	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0075d	83 c4 04	 add	 esp, 4

; 2271 : 
; 2272 : 			if (!duplicate)

  00760	84 db		 test	 bl, bl
  00762	75 44		 jne	 SHORT $LN1682@ExceptionH

; 2273 : 				retAddrs.push_back (sp[i]);

  00764	8b 9d ac ac ff
	ff		 mov	 ebx, DWORD PTR _retAddrs$[ebp]
  0076a	8d 8d ac ac ff
	ff		 lea	 ecx, DWORD PTR _retAddrs$[ebp]
  00770	ff b5 a4 ac ff
	ff		 push	 DWORD PTR _sp$1$[ebp]
  00776	ff 73 04	 push	 DWORD PTR [ebx+4]
  00779	53		 push	 ebx
  0077a	e8 00 00 00 00	 call	 ??$_Buynode@ABK@?$_List_buy@KV?$allocator@K@std@@@std@@QAEPAU?$_List_node@KPAX@1@PAU21@0ABK@Z ; std::_List_buy<unsigned long,std::allocator<unsigned long> >::_Buynode<unsigned long const &>
  0077f	8b b5 b0 ac ff
	ff		 mov	 esi, DWORD PTR _retAddrs$[ebp+4]
  00785	8b c8		 mov	 ecx, eax
  00787	b8 54 55 55 15	 mov	 eax, 357913940		; 15555554H
  0078c	2b c6		 sub	 eax, esi
  0078e	83 f8 01	 cmp	 eax, 1
  00791	0f 82 ed fd ff
	ff		 jb	 $LN1643@ExceptionH
  00797	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  0079a	46		 inc	 esi
  0079b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0079e	89 b5 b0 ac ff
	ff		 mov	 DWORD PTR _retAddrs$[ebp+4], esi
  007a4	89 08		 mov	 DWORD PTR [eax], ecx
  007a6	eb 06		 jmp	 SHORT $LN743@ExceptionH
$LN1682@ExceptionH:
  007a8	8b b5 b0 ac ff
	ff		 mov	 esi, DWORD PTR _retAddrs$[ebp+4]
$LN743@ExceptionH:

; 2274 : 		}
; 2275 : 		i++;

  007ae	8b 85 a4 ac ff
	ff		 mov	 eax, DWORD PTR _sp$1$[ebp]
  007b4	83 c0 04	 add	 eax, 4
  007b7	89 85 a4 ac ff
	ff		 mov	 DWORD PTR _sp$1$[ebp], eax
  007bd	83 fe 10	 cmp	 esi, 16			; 00000010H
  007c0	73 0b		 jae	 SHORT $LN1680@ExceptionH

; 2256 : 	int i = 0;
; 2257 : 
; 2258 : 	while (retAddrs.size() < 16 && &sp[i] < stackTop)

  007c2	8b 8d a8 ac ff
	ff		 mov	 ecx, DWORD PTR _stackTop$1$[ebp]
  007c8	e9 83 fe ff ff	 jmp	 $LL9@ExceptionH
$LN1680@ExceptionH:

; 2276 : 	}
; 2277 : 
; 2278 : 	if (retAddrs.size() > 1)

  007cd	83 fe 01	 cmp	 esi, 1
  007d0	0f 86 6a 01 00
	00		 jbe	 $LN1025@ExceptionH

; 2279 : 	{
; 2280 : 		foreach (DWORD addr, retAddrs)

  007d6	8d 85 ac ac ff
	ff		 lea	 eax, DWORD PTR _retAddrs$[ebp]
  007dc	50		 push	 eax
  007dd	8d 85 08 ae ff
	ff		 lea	 eax, DWORD PTR _$S3$10[ebp]
  007e3	50		 push	 eax
  007e4	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@01@ABV?$list@KV?$allocator@K@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::list<unsigned long,std::allocator<unsigned long> > >
  007e9	83 c4 08	 add	 esp, 8
  007ec	8b 85 08 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp]
  007f2	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S3$10[ebp]
  007f8	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  007fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  007ff	ff d0		 call	 eax
  00801	84 c0		 test	 al, al
  00803	0f 84 e6 00 00
	00		 je	 $LN18@ExceptionH
  00809	0f 1f 80 00 00
	00 00		 npad	 7
$LL19@ExceptionH:
  00810	8b 85 1c ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp+20]
  00816	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00819	33 c0		 xor	 eax, eax
  0081b	38 85 0d ae ff
	ff		 cmp	 BYTE PTR _$S3$10[ebp+5], al
  00821	0f 94 c0	 sete	 al
  00824	88 85 0d ae ff
	ff		 mov	 BYTE PTR _$S3$10[ebp+5], al
  0082a	84 c0		 test	 al, al
  0082c	0f 84 95 00 00
	00		 je	 $LN17@ExceptionH
$LL22@ExceptionH:

; 2281 : 		{
; 2282 : 			callStack << "&st" << frameNumber++ << "=0x" << hex << addr << dec;

  00832	57		 push	 edi
  00833	8d 85 dc ab ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+16]
  00839	68 00 00 00 00	 push	 OFFSET ??_C@_03EGAGLKPK@?$CGst?$AA@
  0083e	50		 push	 eax
  0083f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00844	83 c4 08	 add	 esp, 8
  00847	8b c8		 mov	 ecx, eax
  00849	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0084e	68 00 00 00 00	 push	 OFFSET ??_C@_03BPHHBGPB@?$DN0x?$AA@
  00853	50		 push	 eax
  00854	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00859	8b d0		 mov	 edx, eax
  0085b	83 c4 08	 add	 esp, 8
  0085e	47		 inc	 edi
  0085f	85 d2		 test	 edx, edx
  00861	75 04		 jne	 SHORT $LN785@ExceptionH
  00863	33 c9		 xor	 ecx, ecx
  00865	eb 07		 jmp	 SHORT $LN786@ExceptionH
$LN785@ExceptionH:
  00867	8b 02		 mov	 eax, DWORD PTR [edx]
  00869	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0086c	03 ca		 add	 ecx, edx
$LN786@ExceptionH:
  0086e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00871	25 ff f9 ff ff	 and	 eax, -1537		; fffff9ffH
  00876	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  0087b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0087e	8b ca		 mov	 ecx, edx
  00880	56		 push	 esi
  00881	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00886	8b d0		 mov	 edx, eax
  00888	85 d2		 test	 edx, edx
  0088a	75 04		 jne	 SHORT $LN793@ExceptionH
  0088c	33 c9		 xor	 ecx, ecx
  0088e	eb 07		 jmp	 SHORT $LN794@ExceptionH
$LN793@ExceptionH:
  00890	8b 02		 mov	 eax, DWORD PTR [edx]
  00892	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00895	03 ca		 add	 ecx, edx
$LN794@ExceptionH:
  00897	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0089a	25 ff f3 ff ff	 and	 eax, -3073		; fffff3ffH
  0089f	0d 00 02 00 00	 or	 eax, 512		; 00000200H
  008a4	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  008a7	33 c0		 xor	 eax, eax
  008a9	38 85 0d ae ff
	ff		 cmp	 BYTE PTR _$S3$10[ebp+5], al
  008af	c6 85 0c ae ff
	ff 01		 mov	 BYTE PTR _$S3$10[ebp+4], 1
  008b6	0f 94 c0	 sete	 al
  008b9	88 85 0d ae ff
	ff		 mov	 BYTE PTR _$S3$10[ebp+5], al
  008bf	84 c0		 test	 al, al
  008c1	0f 85 6b ff ff
	ff		 jne	 $LL22@ExceptionH
$LN17@ExceptionH:

; 2279 : 	{
; 2280 : 		foreach (DWORD addr, retAddrs)

  008c7	8b 85 08 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp]
  008cd	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S3$10[ebp]
  008d3	ff 50 08	 call	 DWORD PTR [eax+8]
  008d6	8b 85 08 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp]
  008dc	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S3$10[ebp]
  008e2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  008e5	ff d0		 call	 eax
  008e7	84 c0		 test	 al, al
  008e9	0f 85 21 ff ff
	ff		 jne	 $LL19@ExceptionH
$LN18@ExceptionH:

; 2283 : 		}

  008ef	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp+8]
  008f5	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  008f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  008fb	89 00		 mov	 DWORD PTR [eax], eax
  008fd	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp+8]
  00903	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00906	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp+8]
  0090c	c7 85 14 ae ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S3$10[ebp+12], 0
  00916	3b c8		 cmp	 ecx, eax
  00918	74 1d		 je	 SHORT $LN809@ExceptionH
  0091a	66 0f 1f 44 00
	00		 npad	 6
$LL810@ExceptionH:
  00920	8b 31		 mov	 esi, DWORD PTR [ecx]
  00922	51		 push	 ecx
  00923	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00928	8b 85 10 ae ff
	ff		 mov	 eax, DWORD PTR _$S3$10[ebp+8]
  0092e	83 c4 04	 add	 esp, 4
  00931	8b ce		 mov	 ecx, esi
  00933	3b f0		 cmp	 esi, eax
  00935	75 e9		 jne	 SHORT $LL810@ExceptionH
$LN809@ExceptionH:
  00937	50		 push	 eax
  00938	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0093d	83 c4 04	 add	 esp, 4
$LN1025@ExceptionH:

; 2284 : 	}
; 2285 : 
; 2286 : 	// Checksum of the module
; 2287 : 	if (GetModuleFileName (NULL, modPath, sizeof (modPath)))

  00940	68 04 01 00 00	 push	 260			; 00000104H
  00945	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _modPath$[ebp]
  0094b	50		 push	 eax
  0094c	6a 00		 push	 0
  0094e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  00954	85 c0		 test	 eax, eax
  00956	0f 84 92 00 00
	00		 je	 $LN40@ExceptionH

; 2288 : 	{
; 2289 : 		HANDLE h = CreateFile (modPath, FILE_READ_DATA | FILE_READ_ATTRIBUTES, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  0095c	6a 00		 push	 0
  0095e	6a 00		 push	 0
  00960	6a 03		 push	 3
  00962	6a 00		 push	 0
  00964	6a 03		 push	 3
  00966	68 81 00 00 00	 push	 129			; 00000081H
  0096b	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _modPath$[ebp]
  00971	50		 push	 eax
  00972	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00978	8b f0		 mov	 esi, eax

; 2290 : 		if (h != INVALID_HANDLE_VALUE)

  0097a	83 fe ff	 cmp	 esi, -1
  0097d	74 6f		 je	 SHORT $LN40@ExceptionH

; 2291 : 		{
; 2292 : 			BY_HANDLE_FILE_INFORMATION fi;
; 2293 : 			if (GetFileInformationByHandle (h, &fi))

  0097f	8d 85 bc ad ff
	ff		 lea	 eax, DWORD PTR _fi$7[ebp]
  00985	50		 push	 eax
  00986	56		 push	 esi
  00987	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileInformationByHandle@8
  0098d	85 c0		 test	 eax, eax
  0098f	74 56		 je	 SHORT $LN42@ExceptionH

; 2294 : 			{
; 2295 : 				char *buf = (char *) malloc (fi.nFileSizeLow);

  00991	ff b5 e0 ad ff
	ff		 push	 DWORD PTR _fi$7[ebp+36]
  00997	e8 00 00 00 00	 call	 _malloc
  0099c	8b f8		 mov	 edi, eax
  0099e	83 c4 04	 add	 esp, 4

; 2296 : 				if (buf)

  009a1	85 ff		 test	 edi, edi
  009a3	74 42		 je	 SHORT $LN42@ExceptionH

; 2297 : 				{
; 2298 : 					DWORD bytesRead;
; 2299 : 					if (ReadFile (h, buf, fi.nFileSizeLow, &bytesRead, NULL) && bytesRead == fi.nFileSizeLow)

  009a5	6a 00		 push	 0
  009a7	8d 85 a8 ac ff
	ff		 lea	 eax, DWORD PTR _bytesRead$4[ebp]
  009ad	50		 push	 eax
  009ae	ff b5 e0 ad ff
	ff		 push	 DWORD PTR _fi$7[ebp+36]
  009b4	57		 push	 edi
  009b5	56		 push	 esi
  009b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  009bc	85 c0		 test	 eax, eax
  009be	74 1e		 je	 SHORT $LN43@ExceptionH
  009c0	8b 85 e0 ad ff
	ff		 mov	 eax, DWORD PTR _fi$7[ebp+36]
  009c6	39 85 a8 ac ff
	ff		 cmp	 DWORD PTR _bytesRead$4[ebp], eax
  009cc	75 10		 jne	 SHORT $LN43@ExceptionH

; 2300 : 						crc = GetCrc32 ((unsigned char *) buf, fi.nFileSizeLow);

  009ce	50		 push	 eax
  009cf	57		 push	 edi
  009d0	e8 00 00 00 00	 call	 _GetCrc32
  009d5	83 c4 08	 add	 esp, 8
  009d8	89 85 88 ac ff
	ff		 mov	 DWORD PTR _crc$1$[ebp], eax
$LN43@ExceptionH:

; 2301 : 					free (buf);

  009de	57		 push	 edi
  009df	e8 00 00 00 00	 call	 _free
  009e4	83 c4 04	 add	 esp, 4
$LN42@ExceptionH:

; 2302 : 				}
; 2303 : 			}
; 2304 : 			CloseHandle (h);

  009e7	56		 push	 esi
  009e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN40@ExceptionH:

; 2305 : 		}
; 2306 : 	}
; 2307 : 
; 2308 : 	GetSystemInfo (&si);

  009ee	8d 85 8c ab ff
	ff		 lea	 eax, DWORD PTR _si$[ebp]
  009f4	50		 push	 eax
  009f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 2309 : 
; 2310 : 	if (LocalizationActive)

  009fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _LocalizationActive, 0
  00a02	74 27		 je	 SHORT $LN44@ExceptionH

; 2311 : 		sprintf_s (lpack, sizeof (lpack), "&langpack=%s_%s", GetPreferredLangId (), GetActiveLangPackVersion ());

  00a04	e8 00 00 00 00	 call	 _GetActiveLangPackVersion
  00a09	50		 push	 eax
  00a0a	e8 00 00 00 00	 call	 _GetPreferredLangId
  00a0f	50		 push	 eax
  00a10	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIBJDAPB@?$CGlangpack?$DN?$CFs_?$CFs?$AA@
  00a15	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _lpack$[ebp]
  00a1b	68 80 00 00 00	 push	 128			; 00000080H
  00a20	50		 push	 eax
  00a21	e8 00 00 00 00	 call	 _sprintf_s
  00a26	83 c4 14	 add	 esp, 20			; 00000014H

; 2312 : 	else

  00a29	eb 07		 jmp	 SHORT $LN45@ExceptionH
$LN44@ExceptionH:

; 2313 : 		lpack[0] = 0;

  00a2b	c6 85 70 ff ff
	ff 00		 mov	 BYTE PTR _lpack$[ebp], 0
$LN45@ExceptionH:

; 2314 : 
; 2315 : 	sprintf (url, GST_APPLINK_SECURE "&dest=err-report%s&os=%s&osver=%d.%d.%d&arch=%s&cpus=%d&app=%s&cksum=%x&dlg=%s&err=%x&addr=%x"

  00a32	8d 85 08 ae ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
  00a3e	83 c4 04	 add	 esp, 4
  00a41	8b f0		 mov	 esi, eax
  00a43	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?valid@?1??Is64BitOs@@9@4HA, 0
  00a4a	75 3f		 jne	 SHORT $LN1684@ExceptionH
  00a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LKABJJMO@IsWow64Process?$AA@
  00a51	68 00 00 00 00	 push	 OFFSET ??_C@_08PNLNEKOB@kernel32?$AA@
  00a56	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00a5c	50		 push	 eax
  00a5d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00a63	8b f8		 mov	 edi, eax
  00a65	85 ff		 test	 edi, edi
  00a67	74 18		 je	 SHORT $LN1683@ExceptionH
  00a69	68 00 00 00 00	 push	 OFFSET ?isWow64@?1??Is64BitOs@@9@4HA
  00a6e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00a74	50		 push	 eax
  00a75	ff d7		 call	 edi
  00a77	f7 d8		 neg	 eax
  00a79	1b c0		 sbb	 eax, eax
  00a7b	21 05 00 00 00
	00		 and	 DWORD PTR ?isWow64@?1??Is64BitOs@@9@4HA, eax
$LN1683@ExceptionH:
  00a81	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?valid@?1??Is64BitOs@@9@4HA, 1
$LN1684@ExceptionH:
  00a8b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00a8f	72 02		 jb	 SHORT $LN1046@ExceptionH
  00a91	8b 36		 mov	 esi, DWORD PTR [esi]
$LN1046@ExceptionH:
  00a93	ff b5 94 ac ff
	ff		 push	 DWORD PTR _addr$1$[ebp]
  00a99	a1 00 00 00 00	 mov	 eax, DWORD PTR _LastDialogId
  00a9e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  00aa3	ff b5 7c ac ff
	ff		 push	 DWORD PTR _exCode$1$[ebp]
  00aa9	85 c0		 test	 eax, eax
  00aab	0f 45 c8	 cmovne	 ecx, eax
  00aae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?isWow64@?1??Is64BitOs@@9@4HA, 0
  00ab5	51		 push	 ecx
  00ab6	ff b5 88 ac ff
	ff		 push	 DWORD PTR _crc$1$[ebp]
  00abc	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03NDFEINMN@x86?$AA@
  00ac1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03OLPMMCEF@x64?$AA@
  00ac6	68 00 00 00 00	 push	 OFFSET ??_C@_05LABDNII@setup?$AA@
  00acb	ff b5 a0 ab ff
	ff		 push	 DWORD PTR _si$[ebp+20]
  00ad1	0f 44 c1	 cmove	 eax, ecx
  00ad4	50		 push	 eax
  00ad5	ff 35 00 00 00
	00		 push	 DWORD PTR _CurrentOSServicePack
  00adb	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _lpack$[ebp]
  00ae1	ff 35 00 00 00
	00		 push	 DWORD PTR _CurrentOSMinor
  00ae7	ff 35 00 00 00
	00		 push	 DWORD PTR _CurrentOSMajor
  00aed	56		 push	 esi
  00aee	50		 push	 eax
  00aef	8d 85 48 f6 ff
	ff		 lea	 eax, DWORD PTR _url$[ebp]
  00af5	68 00 00 00 00	 push	 OFFSET ??_C@_0JB@MLJIHOID@https?3?1?1www?4gostcrypt?4org?1applin@
  00afa	50		 push	 eax
  00afb	e8 00 00 00 00	 call	 _sprintf
  00b00	8b 85 1c ae ff
	ff		 mov	 eax, DWORD PTR $T9[ebp+20]
  00b06	83 c4 38	 add	 esp, 56			; 00000038H
  00b09	83 f8 10	 cmp	 eax, 16			; 00000010H
  00b0c	72 45		 jb	 SHORT $LN1135@ExceptionH
  00b0e	8b 8d 08 ae ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
  00b14	40		 inc	 eax
  00b15	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00b1a	72 2e		 jb	 SHORT $LN1130@ExceptionH
  00b1c	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00b1f	74 05		 je	 SHORT $LN1131@ExceptionH
  00b21	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1690@ExceptionH:
$LN1131@ExceptionH:
  00b26	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00b29	3b c1		 cmp	 eax, ecx
  00b2b	72 05		 jb	 SHORT $LN1132@ExceptionH
  00b2d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1691@ExceptionH:
$LN1132@ExceptionH:
  00b32	2b c8		 sub	 ecx, eax
  00b34	83 f9 04	 cmp	 ecx, 4
  00b37	73 05		 jae	 SHORT $LN1133@ExceptionH
  00b39	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1692@ExceptionH:
$LN1133@ExceptionH:
  00b3e	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00b41	76 05		 jbe	 SHORT $LN1134@ExceptionH
  00b43	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1693@ExceptionH:
$LN1134@ExceptionH:
  00b48	8b c8		 mov	 ecx, eax
$LN1130@ExceptionH:
  00b4a	51		 push	 ecx
  00b4b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00b50	83 c4 04	 add	 esp, 4
$LN1135@ExceptionH:

; 2316 : 		, lpack
; 2317 : 		, GetWindowsEdition().c_str()
; 2318 : 		, CurrentOSMajor
; 2319 : 		, CurrentOSMinor
; 2320 : 		, CurrentOSServicePack
; 2321 : 		, Is64BitOs () ? "x64" : "x86"
; 2322 : 		, si.dwNumberOfProcessors
; 2323 : #ifdef GSTMOUNT
; 2324 : 		,"main"
; 2325 : #endif
; 2326 : #ifdef VOLFORMAT
; 2327 : 		,"format"
; 2328 : #endif
; 2329 : #ifdef SETUP
; 2330 : 		,"setup"
; 2331 : #endif
; 2332 : 		, crc
; 2333 : 		, LastDialogId ? LastDialogId : "-"
; 2334 : 		, exCode
; 2335 : 		, addr);
; 2336 : 
; 2337 : 	string urlStr = url + callStack.str();

  00b53	8d 85 08 ae ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00b59	50		 push	 eax
  00b5a	8d 8d cc ab ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp]
  00b60	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00b65	50		 push	 eax
  00b66	8d 85 48 f6 ff
	ff		 lea	 eax, DWORD PTR _url$[ebp]
  00b6c	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00b70	50		 push	 eax
  00b71	8d 85 f0 ad ff
	ff		 lea	 eax, DWORD PTR _urlStr$[ebp]
  00b77	50		 push	 eax
  00b78	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00b7d	8b 85 1c ae ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+20]
  00b83	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b86	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00b8a	83 f8 10	 cmp	 eax, 16			; 00000010H
  00b8d	72 45		 jb	 SHORT $LN1252@ExceptionH
  00b8f	8b 8d 08 ae ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  00b95	40		 inc	 eax
  00b96	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00b9b	72 2e		 jb	 SHORT $LN1247@ExceptionH
  00b9d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00ba0	74 05		 je	 SHORT $LN1248@ExceptionH
  00ba2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1694@ExceptionH:
$LN1248@ExceptionH:
  00ba7	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00baa	3b c1		 cmp	 eax, ecx
  00bac	72 05		 jb	 SHORT $LN1249@ExceptionH
  00bae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1695@ExceptionH:
$LN1249@ExceptionH:
  00bb3	2b c8		 sub	 ecx, eax
  00bb5	83 f9 04	 cmp	 ecx, 4
  00bb8	73 05		 jae	 SHORT $LN1250@ExceptionH
  00bba	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1696@ExceptionH:
$LN1250@ExceptionH:
  00bbf	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00bc2	76 05		 jbe	 SHORT $LN1251@ExceptionH
  00bc4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN1697@ExceptionH:
$LN1251@ExceptionH:
  00bc9	8b c8		 mov	 ecx, eax
$LN1247@ExceptionH:
  00bcb	51		 push	 ecx
  00bcc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00bd1	83 c4 04	 add	 esp, 4
$LN1252@ExceptionH:

; 2338 : 
; 2339 : 	_snwprintf (msg, array_capacity (msg), GetString ("EXCEPTION_REPORT"), urlStr.c_str());

  00bd4	83 bd 04 ae ff
	ff 10		 cmp	 DWORD PTR _urlStr$[ebp+20], 16 ; 00000010H
  00bdb	8d 85 f0 ad ff
	ff		 lea	 eax, DWORD PTR _urlStr$[ebp]
  00be1	0f 43 85 f0 ad
	ff ff		 cmovae	 eax, DWORD PTR _urlStr$[ebp]
  00be8	50		 push	 eax
  00be9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PFGPMKFM@EXCEPTION_REPORT?$AA@
  00bee	e8 00 00 00 00	 call	 _GetString
  00bf3	83 c4 04	 add	 esp, 4
  00bf6	50		 push	 eax
  00bf7	8d 85 48 b6 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00bfd	68 00 20 00 00	 push	 8192			; 00002000H
  00c02	50		 push	 eax
  00c03	e8 00 00 00 00	 call	 __snwprintf
  00c08	83 c4 10	 add	 esp, 16			; 00000010H

; 2340 : 
; 2341 : 	if (IDYES == MessageBoxW (0, msg, GetString ("EXCEPTION_REPORT_TITLE"), MB_ICONERROR | MB_YESNO | MB_DEFBUTTON1))

  00c0b	6a 14		 push	 20			; 00000014H
  00c0d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
  00c12	e8 00 00 00 00	 call	 _GetString
  00c17	83 c4 04	 add	 esp, 4
  00c1a	50		 push	 eax
  00c1b	8d 85 48 b6 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00c21	50		 push	 eax
  00c22	6a 00		 push	 0
  00c24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00c2a	83 f8 06	 cmp	 eax, 6
  00c2d	75 2a		 jne	 SHORT $LN46@ExceptionH

; 2342 : 		ShellExecute (NULL, "open", urlStr.c_str(), NULL, NULL, SW_SHOWNORMAL);

  00c2f	83 bd 04 ae ff
	ff 10		 cmp	 DWORD PTR _urlStr$[ebp+20], 16 ; 00000010H
  00c36	8d 85 f0 ad ff
	ff		 lea	 eax, DWORD PTR _urlStr$[ebp]
  00c3c	6a 01		 push	 1
  00c3e	0f 43 85 f0 ad
	ff ff		 cmovae	 eax, DWORD PTR _urlStr$[ebp]
  00c45	6a 00		 push	 0
  00c47	6a 00		 push	 0
  00c49	50		 push	 eax
  00c4a	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00c4f	6a 00		 push	 0
  00c51	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 2343 : 	else

  00c57	eb 0c		 jmp	 SHORT $LN47@ExceptionH
$LN46@ExceptionH:

; 2344 : 		UnhandledExceptionFilter (ep);

  00c59	ff b5 a0 ac ff
	ff		 push	 DWORD PTR _ep$1$[ebp]
  00c5f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnhandledExceptionFilter@4
$LN47@ExceptionH:

; 2345 : }

  00c65	8b 85 04 ae ff
	ff		 mov	 eax, DWORD PTR _urlStr$[ebp+20]
  00c6b	83 f8 10	 cmp	 eax, 16			; 00000010H
  00c6e	72 13		 jb	 SHORT $LN1323@ExceptionH
  00c70	40		 inc	 eax
  00c71	8d 8d f0 ad ff
	ff		 lea	 ecx, DWORD PTR _urlStr$[ebp]
  00c77	50		 push	 eax
  00c78	ff b5 f0 ad ff
	ff		 push	 DWORD PTR _urlStr$[ebp]
  00c7e	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN1323@ExceptionH:
  00c83	8b bd ac ac ff
	ff		 mov	 edi, DWORD PTR _retAddrs$[ebp]
  00c89	c7 85 04 ae ff
	ff 0f 00 00 00	 mov	 DWORD PTR _urlStr$[ebp+20], 15 ; 0000000fH
  00c93	c7 85 00 ae ff
	ff 00 00 00 00	 mov	 DWORD PTR _urlStr$[ebp+16], 0
  00c9d	c6 85 f0 ad ff
	ff 00		 mov	 BYTE PTR _urlStr$[ebp], 0
  00ca4	8b 07		 mov	 eax, DWORD PTR [edi]
  00ca6	89 3f		 mov	 DWORD PTR [edi], edi
  00ca8	89 7f 04	 mov	 DWORD PTR [edi+4], edi
  00cab	3b c7		 cmp	 eax, edi
  00cad	74 16		 je	 SHORT $LN1425@ExceptionH
  00caf	90		 npad	 1
$LL1426@ExceptionH:
  00cb0	8b 30		 mov	 esi, DWORD PTR [eax]
  00cb2	6a 0c		 push	 12			; 0000000cH
  00cb4	6a 01		 push	 1
  00cb6	50		 push	 eax
  00cb7	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXII@Z ; std::_Deallocate
  00cbc	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cbf	8b c6		 mov	 eax, esi
  00cc1	3b f7		 cmp	 esi, edi
  00cc3	75 eb		 jne	 SHORT $LL1426@ExceptionH
$LN1425@ExceptionH:
  00cc5	6a 0c		 push	 12			; 0000000cH
  00cc7	6a 01		 push	 1
  00cc9	57		 push	 edi
  00cca	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXII@Z ; std::_Deallocate
  00ccf	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cd2	8d 8d 34 ac ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp+104]
  00cd8	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00cdd	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00ce4	eb 3b		 jmp	 SHORT $LN1688@ExceptionH
$LN23@ExceptionH:

; 2166 : 	{
; 2167 : 	case STATUS_IN_PAGE_ERROR:
; 2168 : 	case 0xeedfade:
; 2169 : 		// Exception not caused by GostCrypt
; 2170 : 		MessageBoxW (0, GetString ("EXCEPTION_REPORT_EXT"),

  00ce6	68 10 00 05 00	 push	 327696			; 00050010H
  00ceb	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KPCDNAAO@EXCEPTION_REPORT_TITLE?$AA@
  00cf0	e8 00 00 00 00	 call	 _GetString
  00cf5	83 c4 04	 add	 esp, 4
  00cf8	50		 push	 eax
  00cf9	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JIKAMFDK@EXCEPTION_REPORT_EXT?$AA@
  00cfe	e8 00 00 00 00	 call	 _GetString
  00d03	83 c4 04	 add	 esp, 4
  00d06	50		 push	 eax
  00d07	6a 00		 push	 0
  00d09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 2171 : 			GetString ("EXCEPTION_REPORT_TITLE"),
; 2172 : 			MB_ICONERROR | MB_OK | MB_SETFOREGROUND | MB_TOPMOST);
; 2173 : 		return;

  00d0f	8d 8d 34 ac ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp+104]
  00d15	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00d1a	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
$LN1688@ExceptionH:
  00d21	8d 85 34 ac ff
	ff		 lea	 eax, DWORD PTR _callStack$[ebp+104]
  00d27	c7 85 34 ac ff
	ff 00 00 00 00	 mov	 DWORD PTR _callStack$[ebp+104], OFFSET ??_7ios_base@std@@6B@
  00d31	50		 push	 eax
  00d32	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00d37	83 c4 04	 add	 esp, 4

; 2345 : }

  00d3a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00d3d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00d44	59		 pop	 ecx
  00d45	5f		 pop	 edi
  00d46	5e		 pop	 esi
  00d47	5b		 pop	 ebx
  00d48	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00d4b	33 cd		 xor	 ecx, ebp
  00d4d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00d52	8b e5		 mov	 esp, ebp
  00d54	5d		 pop	 ebp
  00d55	c3		 ret	 0
$LN1687@ExceptionH:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$8:
  00000	8b 85 9c ac ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN73@ExceptionH
  0000f	83 a5 9c ac ff
	ff fe		 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00016	8d 8d 34 ac ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp+104]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN73@ExceptionH:
  00021	c3		 ret	 0
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$12:
  00022	8d 8d e4 ab ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp+24]
  00028	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$9:
  0002d	8d 8d ec ab ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp+32]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$16:
  00038	8b 8d 94 ac ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$0:
  00043	8d 8d cc ab ff
	ff		 lea	 ecx, DWORD PTR _callStack$[ebp]
  00049	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$1:
  0004e	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _lastSymbol$12[ebp]
  00054	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$2:
  00059	8d 8d ac ac ff
	ff		 lea	 ecx, DWORD PTR _retAddrs$[ebp]
  0005f	e9 00 00 00 00	 jmp	 ??1?$list@KV?$allocator@K@std@@@std@@QAE@XZ ; std::list<unsigned long,std::allocator<unsigned long> >::~list<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$3:
  00064	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S2$11[ebp]
  0006a	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$4:
  0006f	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR _$S3$10[ebp]
  00075	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$list@KV?$allocator@K@std@@@std@@@ForEach@GostCrypt@@UAE@XZ
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$6:
  0007a	8d 8d 08 ae ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00080	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$340:
  00085	e8 00 00 00 00	 call	 ___std_terminate
  0008a	c3		 ret	 0
__unwindfunclet$?ExceptionHandlerThread@@YAXPAX@Z$20:
  0008b	e8 00 00 00 00	 call	 ___std_terminate
  00090	c3		 ret	 0
__ehhandler$?ExceptionHandlerThread@@YAXPAX@Z:
  00091	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00095	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00098	8b 8a 88 ab ff
	ff		 mov	 ecx, DWORD PTR [edx-21624]
  0009e	33 c8		 xor	 ecx, eax
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a8	33 c8		 xor	 ecx, eax
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ExceptionHandlerThread@@YAXPAX@Z
  000b4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ExceptionHandlerThread@@YAXPAX@Z ENDP			; ExceptionHandlerThread
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?IsReturnAddress@@YAH_K@Z
_TEXT	SEGMENT
_mi$1 = -28						; size = 28
_address$ = 8						; size = 8
?IsReturnAddress@@YAH_K@Z PROC				; IsReturnAddress, COMDAT

; 2111 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2112 : 	static size_t codeEnd = 0;
; 2113 : 	byte *sp = (byte *) address;
; 2114 : 
; 2115 : 	if (codeEnd == 0)

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA
  00009	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0000c	85 c9		 test	 ecx, ecx
  0000e	75 2a		 jne	 SHORT $LN3@IsReturnAd

; 2116 : 	{
; 2117 : 		MEMORY_BASIC_INFORMATION mi;
; 2118 : 		if (VirtualQuery ((LPCVOID) 0x401000, &mi, sizeof (mi)) >= sizeof (mi))

  00010	6a 1c		 push	 28			; 0000001cH
  00012	8d 45 e4	 lea	 eax, DWORD PTR _mi$1[ebp]
  00015	50		 push	 eax
  00016	68 00 10 40 00	 push	 4198400			; 00401000H
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualQuery@12
  00021	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  00024	72 0e		 jb	 SHORT $LN13@IsReturnAd

; 2119 : 			codeEnd = (size_t) mi.BaseAddress + mi.RegionSize;

  00026	8b 4d e4	 mov	 ecx, DWORD PTR _mi$1[ebp]
  00029	03 4d f0	 add	 ecx, DWORD PTR _mi$1[ebp+12]
  0002c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA, ecx
  00032	eb 06		 jmp	 SHORT $LN3@IsReturnAd
$LN13@IsReturnAd:
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?codeEnd@?1??IsReturnAddress@@YAH_K@Z@4IA
$LN3@IsReturnAd:

; 2120 : 	}
; 2121 : 
; 2122 : 	if (address < 0x401000 + 8 || address > codeEnd)

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _address$[ebp+4]
  0003d	8b 45 08	 mov	 eax, DWORD PTR _address$[ebp]
  00040	85 d2		 test	 edx, edx
  00042	75 09		 jne	 SHORT $LN14@IsReturnAd
  00044	3d 08 10 40 00	 cmp	 eax, 4198408		; 00401008H
  00049	72 35		 jb	 SHORT $LN5@IsReturnAd
  0004b	85 d2		 test	 edx, edx
$LN14@IsReturnAd:
  0004d	77 31		 ja	 SHORT $LN5@IsReturnAd
  0004f	72 04		 jb	 SHORT $LN12@IsReturnAd
  00051	3b c1		 cmp	 eax, ecx
  00053	77 2b		 ja	 SHORT $LN5@IsReturnAd
$LN12@IsReturnAd:

; 2124 : 
; 2125 : 	return sp[-5] == 0xe8									// call ADDR

  00055	8a 48 fb	 mov	 cl, BYTE PTR [eax-5]
  00058	80 f9 e8	 cmp	 cl, 232			; 000000e8H
  0005b	74 1a		 je	 SHORT $LN8@IsReturnAd
  0005d	80 78 fa ff	 cmp	 BYTE PTR [eax-6], 255	; 000000ffH
  00061	75 05		 jne	 SHORT $LN7@IsReturnAd
  00063	80 f9 15	 cmp	 cl, 21			; 00000015H
  00066	74 0f		 je	 SHORT $LN8@IsReturnAd
$LN7@IsReturnAd:
  00068	80 78 fe ff	 cmp	 BYTE PTR [eax-2], 255	; 000000ffH
  0006c	75 12		 jne	 SHORT $LN5@IsReturnAd
  0006e	8a 40 ff	 mov	 al, BYTE PTR [eax-1]
  00071	24 f0		 and	 al, 240			; 000000f0H
  00073	3c d0		 cmp	 al, 208			; 000000d0H
  00075	75 09		 jne	 SHORT $LN5@IsReturnAd
$LN8@IsReturnAd:
  00077	b8 01 00 00 00	 mov	 eax, 1

; 2126 : 		|| (sp[-6] == 0xff && sp[-5] == 0x15)				// call [ADDR]
; 2127 : 		|| (sp[-2] == 0xff && (sp[-1] & 0xf0) == 0xd0);		// call REG
; 2128 : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN5@IsReturnAd:

; 2123 : 		return FALSE;

  00080	33 c0		 xor	 eax, eax

; 2126 : 		|| (sp[-6] == 0xff && sp[-5] == 0x15)				// call [ADDR]
; 2127 : 		|| (sp[-2] == 0xff && (sp[-1] & 0xf0) == 0xd0);		// call REG
; 2128 : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?IsReturnAddress@@YAH_K@Z ENDP				; IsReturnAddress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_trec$1 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z PROC		; AuxiliaryDlgProc, COMDAT

; 1084 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1085 : 	switch (msg)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _hwndDlg$[ebp]
  00017	83 f8 10	 cmp	 eax, 16			; 00000010H
  0001a	0f 84 d3 00 00
	00		 je	 $LN7@AuxiliaryD
  00020	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00025	74 13		 je	 SHORT $LN4@AuxiliaryD

; 1127 : 		return 1;
; 1128 : 	}
; 1129 : 
; 1130 : 	return 0;

  00027	33 c0		 xor	 eax, eax
  00029	5f		 pop	 edi

; 1131 : }

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002d	33 cd		 xor	 ecx, ebp
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
$LN4@AuxiliaryD:
  0003a	56		 push	 esi

; 1086 : 	{
; 1087 : 	case WM_INITDIALOG:
; 1088 : 		{
; 1089 : 			HDC hDC = GetDC (hwndDlg);

  0003b	57		 push	 edi
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00042	8b f0		 mov	 esi, eax

; 1090 : 
; 1091 : 			ScreenDPI = GetDeviceCaps (hDC, LOGPIXELSY);

  00044	6a 5a		 push	 90			; 0000005aH
  00046	56		 push	 esi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDeviceCaps@8

; 1092 : 			ReleaseDC (hwndDlg, hDC); 

  0004d	56		 push	 esi
  0004e	57		 push	 edi
  0004f	a3 00 00 00 00	 mov	 DWORD PTR _ScreenDPI, eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 1093 : 
; 1094 : 			DPIScaleFactorX = 1;
; 1095 : 			DPIScaleFactorY = 1;
; 1096 : 			DlgAspectRatio = 1;
; 1097 : 
; 1098 : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  0005a	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  00061	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00069	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?DPIScaleFactorX@@3NA, xmm0
  00071	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?DPIScaleFactorY@@3NA, xmm0
  00079	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR _DlgAspectRatio, xmm0
  00081	5e		 pop	 esi
  00082	74 6f		 je	 SHORT $LN7@AuxiliaryD

; 1099 : 			{
; 1100 : 				// Windows skews the GUI aspect ratio if the user has a non-default DPI. Hence, working with 
; 1101 : 				// actual screen DPI is redundant and leads to incorrect results. What really matters here is
; 1102 : 				// how Windows actually renders our GUI. This is determined by comparing the expected and current
; 1103 : 				// sizes of a hidden calibration text field.
; 1104 : 
; 1105 : 				RECT trec;
; 1106 : 
; 1107 : 				trec.right = 0;
; 1108 : 				trec.bottom = 0;
; 1109 : 
; 1110 : 				GetClientRect (GetDlgItem (hwndDlg, IDC_ASPECT_RATIO_CALIBRATION_BOX), &trec);

  00084	8d 45 ec	 lea	 eax, DWORD PTR _trec$1[ebp]
  00087	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _trec$1[ebp+8], 0
  0008e	50		 push	 eax
  0008f	68 ec 13 00 00	 push	 5100			; 000013ecH
  00094	57		 push	 edi
  00095	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _trec$1[ebp+12], 0
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1111 : 
; 1112 : 				if (trec.right != 0 && trec.bottom != 0)

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR _trec$1[ebp+8]
  000ac	85 c9		 test	 ecx, ecx
  000ae	74 43		 je	 SHORT $LN7@AuxiliaryD
  000b0	8b 45 f8	 mov	 eax, DWORD PTR _trec$1[ebp+12]
  000b3	85 c0		 test	 eax, eax
  000b5	74 3c		 je	 SHORT $LN7@AuxiliaryD

; 1113 : 				{
; 1114 : 					// The size of the 282x282 IDC_ASPECT_RATIO_CALIBRATION_BOX rendered at the default DPI (96) is 423x458
; 1115 : 					DPIScaleFactorX = (double) trec.right / 423;

  000b7	66 0f 6e c9	 movd	 xmm1, ecx
  000bb	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000bf	66 0f 6e c0	 movd	 xmm0, eax
  000c3	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@407a700000000000

; 1116 : 					DPIScaleFactorY = (double) trec.bottom / 458;

  000cb	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000cf	f2 0f 11 0d 00
	00 00 00	 movsd	 QWORD PTR ?DPIScaleFactorX@@3NA, xmm1
  000d7	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407ca00000000000

; 1117 : 					DlgAspectRatio = DPIScaleFactorX / DPIScaleFactorY;

  000df	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000e3	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?DPIScaleFactorY@@3NA, xmm0
  000eb	f2 0f 11 0d 00
	00 00 00	 movsd	 QWORD PTR _DlgAspectRatio, xmm1
$LN7@AuxiliaryD:

; 1118 : 				}
; 1119 : 			}
; 1120 : 
; 1121 : 			EndDialog (hwndDlg, 0);
; 1122 : 			return 1;
; 1123 : 		}
; 1124 : 
; 1125 : 	case WM_CLOSE:
; 1126 : 		EndDialog (hwndDlg, 0);

  000f3	6a 00		 push	 0
  000f5	57		 push	 edi
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 1131 : }

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	b8 01 00 00 00	 mov	 eax, 1
  00104	33 cd		 xor	 ecx, ebp
  00106	5f		 pop	 edi
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 10 00	 ret	 16			; 00000010H
?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z ENDP		; AuxiliaryDlgProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z PROC		; BootPwdFieldProc, COMDAT

; 1033 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1034 : 	WNDPROC wp = (WNDPROC) GetWindowLongPtr (hwnd, GWLP_USERDATA);

  00003	6a eb		 push	 -21			; ffffffebH
  00005	ff 75 08	 push	 DWORD PTR _hwnd$[ebp]
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8

; 1035 : 
; 1036 : 	switch (message)

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  00011	81 f9 02 03 00
	00		 cmp	 ecx, 770		; 00000302H
  00017	74 15		 je	 SHORT $LN4@BootPwdFie

; 1040 : 	}
; 1041 : 
; 1042 : 	return CallWindowProc (wp, hwnd, message, wParam, lParam);

  00019	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0001c	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  0001f	51		 push	 ecx
  00020	ff 75 08	 push	 DWORD PTR _hwnd$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20

; 1043 : }

  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
$LN4@BootPwdFie:

; 1037 : 	{
; 1038 : 	case WM_PASTE:
; 1039 : 		return 1;

  0002e	b8 01 00 00 00	 mov	 eax, 1

; 1043 : }

  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z ENDP		; BootPwdFieldProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_trackMouseEvent$1 = -16				; size = 16
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z PROC		; HyperlinkProc, COMDAT

; 860  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 861  : 	WNDPROC wp = (WNDPROC) GetWindowLongPtr (hwnd, GWLP_USERDATA);

  00007	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  0000a	6a eb		 push	 -21			; ffffffebH
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8

; 862  : 
; 863  : 	switch (message)

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  00016	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00019	74 5c		 je	 SHORT $LN4@HyperlinkP
  0001b	81 f9 a3 02 00
	00		 cmp	 ecx, 675		; 000002a3H
  00021	74 16		 je	 SHORT $LN6@HyperlinkP

; 883  : 		return 0;
; 884  : 	}
; 885  : 
; 886  : 	return CallWindowProc (wp, hwnd, message, wParam, lParam);

  00023	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00026	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00029	51		 push	 ecx
  0002a	56		 push	 esi
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  00032	5e		 pop	 esi

; 887  : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 10 00	 ret	 16			; 00000010H
$LN6@HyperlinkP:

; 879  : 
; 880  : 	case WM_MOUSELEAVE:
; 881  : 		bHyperLinkBeingTracked = FALSE;
; 882  : 		NormalCursor();

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bHyperLinkBeingTracked, 0
  00048	85 c0		 test	 eax, eax
  0004a	75 11		 jne	 SHORT $LN12@HyperlinkP
  0004c	68 00 7f 00 00	 push	 32512			; 00007f00H
  00051	50		 push	 eax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00058	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN12@HyperlinkP:
  0005d	50		 push	 eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4
  00064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor
  0006e	33 c0		 xor	 eax, eax
  00070	5e		 pop	 esi

; 887  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 10 00	 ret	 16			; 00000010H
$LN4@HyperlinkP:

; 864  : 	{
; 865  : 	case WM_SETCURSOR:
; 866  : 		if (!bHyperLinkBeingTracked)

  00077	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bHyperLinkBeingTracked, 0
  0007e	75 4b		 jne	 SHORT $LN5@HyperlinkP

; 867  : 		{
; 868  : 			TRACKMOUSEEVENT	trackMouseEvent;
; 869  : 
; 870  : 			trackMouseEvent.cbSize = sizeof(trackMouseEvent);
; 871  : 			trackMouseEvent.dwFlags = TME_LEAVE;
; 872  : 			trackMouseEvent.hwndTrack = hwnd;
; 873  : 
; 874  : 			bHyperLinkBeingTracked = TrackMouseEvent(&trackMouseEvent);

  00080	8d 45 f0	 lea	 eax, DWORD PTR _trackMouseEvent$1[ebp]
  00083	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _trackMouseEvent$1[ebp], 16 ; 00000010H
  0008a	50		 push	 eax
  0008b	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _trackMouseEvent$1[ebp+4], 2
  00092	89 75 f8	 mov	 DWORD PTR _trackMouseEvent$1[ebp+8], esi
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TrackMouseEvent@4
  0009b	a3 00 00 00 00	 mov	 DWORD PTR _bHyperLinkBeingTracked, eax

; 875  : 
; 876  : 			HandCursor();

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A
  000a5	85 c0		 test	 eax, eax
  000a7	75 11		 jne	 SHORT $LN9@HyperlinkP
  000a9	68 89 7f 00 00	 push	 32649			; 00007f89H
  000ae	50		 push	 eax
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  000b5	a3 00 00 00 00	 mov	 DWORD PTR ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A, eax
$LN9@HyperlinkP:
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4
  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A
  000c6	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor
$LN5@HyperlinkP:

; 877  : 		}
; 878  : 		return 0;

  000cb	33 c0		 xor	 eax, eax
  000cd	5e		 pop	 esi

; 887  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 10 00	 ret	 16			; 00000010H
?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z ENDP		; HyperlinkProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@@Z
_TEXT	SEGMENT
_forEachContainer$ = 8					; size = 4
___formal$ = 12						; size = 4
??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 95   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 96   : 			return static_cast <const ContainerForward <T> &> (forEachContainer);

  00003	8b 45 08	 mov	 eax, DWORD PTR _forEachContainer$[ebp]

; 97   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SAABU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABUContainer@01@ABU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@XZ PROC ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > GostCrypt::ForEach::TypeWrapper<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 90   : 			operator TypeWrapper <T> () const { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
??$?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@TypeWrapperDummy@ForEach@GostCrypt@@QBE?AU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@XZ ENDP ; GostCrypt::ForEach::TypeWrapperDummy::operator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > GostCrypt::ForEach::TypeWrapper<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$ToTypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
_x$ = 8							; size = 4
??$ToTypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GostCrypt::ForEach::ToTypeWrapper<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 85   : 		static TypeWrapper <T> ToTypeWrapper (const T &x) { return TypeWrapper <T> (); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8a 45 ff	 mov	 al, BYTE PTR $T1[ebp]
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$ToTypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$TypeWrapper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GostCrypt::ForEach::ToTypeWrapper<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAEPAXI@Z PROC ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0000a	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  0000d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00010	72 0b		 jb	 SHORT $LN13@scalar
  00012	40		 inc	 eax
  00013	8b ce		 mov	 ecx, esi
  00015	50		 push	 eax
  00016	ff 36		 push	 DWORD PTR [esi]
  00018	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN13@scalar:
  0001d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00024	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00028	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002f	72 02		 jb	 SHORT $LN101@scalar
  00031	8b 36		 mov	 esi, DWORD PTR [esi]
$LN101@scalar:
  00033	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00037	c6 06 00	 mov	 BYTE PTR [esi], 0
  0003a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00040	74 0b		 je	 SHORT $LN111@scalar
  00042	6a 28		 push	 40			; 00000028H
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004a	83 c4 08	 add	 esp, 8
$LN111@scalar:
  0004d	8b c7		 mov	 eax, edi
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??_G?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAEPAXI@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAE@XZ
_TEXT	SEGMENT
??1?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAE@XZ PROC ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00007	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000a	72 0d		 jb	 SHORT $LN9@ContainerF
  0000c	40		 inc	 eax
  0000d	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00010	50		 push	 eax
  00011	ff 77 08	 push	 DWORD PTR [edi+8]
  00014	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN9@ContainerF:
  00019	c7 47 1c 0f 00
	00 00		 mov	 DWORD PTR [edi+28], 15	; 0000000fH
  00020	83 7f 1c 10	 cmp	 DWORD PTR [edi+28], 16	; 00000010H
  00024	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  0002b	72 0f		 jb	 SHORT $LN97@ContainerF
  0002d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00030	c6 00 00	 mov	 BYTE PTR [eax], 0
  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
$LN97@ContainerF:
  0003c	c6 47 08 00	 mov	 BYTE PTR [edi+8], 0
  00040	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	c3		 ret	 0
??1?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAE@XZ ENDP ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat, COMDAT
; _this$ = ecx

; 270  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=, COMDAT
; _this$ = ecx

; 226  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 227  : 		return (!(*this == _Right));
; 228  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==, COMDAT
; _this$ = ecx

; 220  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 221  : 		_Compat(_Right);
; 222  : 		return (_Ptr == _Right._Ptr);
; 223  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT
; _this$ = ecx

; 209  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : 		_Compat(_Right);
; 211  : 		return (_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]

; 212  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT
; _this$ = ecx

; 100  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 101  : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 102  : 		if (_Mycont == 0
; 103  : 			|| _Ptr == nullptr_t{}
; 104  : 			|| _Mycont->_Myptr() + _Mycont->_Mysize <= _Unfancy(_Ptr))
; 105  : 			{	// report error
; 106  : 			_DEBUG_ERROR("string iterator not incrementable");
; 107  : 			_SCL_SECURE_OUT_OF_RANGE;
; 108  : 			}
; 109  : 
; 110  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 111  : 		_SCL_SECURE_VALIDATE(_Ptr != nullptr_t{});
; 112  : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 113  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 114  : 		_SCL_SECURE_VALIDATE_RANGE(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize);
; 115  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 116  : 
; 117  : 		++_Ptr;

  00000	ff 01		 inc	 DWORD PTR [ecx]

; 118  : 		return (*this);

  00002	8b c1		 mov	 eax, ecx

; 119  : 		}

  00004	c3		 ret	 0
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 68   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 69   : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 70   : 		const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
; 71   : 		if (_Mycont == 0
; 72   : 			|| _Ptr == nullptr_t{}
; 73   : 			|| _Unfancy(_Ptr) < _Contptr
; 74   : 			|| _Contptr + _Mycont->_Mysize <= _Unfancy(_Ptr))
; 75   : 			{	// report error
; 76   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 77   : 			_SCL_SECURE_OUT_OF_RANGE;
; 78   : 			}
; 79   : 
; 80   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 81   : 		_SCL_SECURE_VALIDATE(_Ptr != nullptr_t{});
; 82   : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 83   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 84   : 		const auto _Contptr = _Mycont->_Myptr();
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(_Contptr <= _Unfancy(_Ptr) && _Unfancy(_Ptr) < _Contptr + _Mycont->_Mysize);
; 86   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 87   : 
; 88   : 		_Analysis_assume_(_Ptr != nullptr_t{});
; 89   : 
; 90   : 		return (*_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 91   : 		}

  00002	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 49   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 50   : 		this->_Adopt(_Pstring);
; 51   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?Next@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBEXXZ
_TEXT	SEGMENT
?Next@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBEXXZ PROC ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Next, COMDAT
; _this$ = ecx

; 39   : 			virtual void Next () const { ++Iterator; }

  00000	ff 41 24	 inc	 DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?Next@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBEXXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?IsNotEnd@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBE_NXZ
_TEXT	SEGMENT
?IsNotEnd@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBE_NXZ PROC ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsNotEnd, COMDAT
; _this$ = ecx

; 38   : 			virtual bool IsNotEnd () const { bool r = InnerContinue && Iterator != EndIterator; InnerContinue = false; return r; }

  00000	80 79 04 00	 cmp	 BYTE PTR [ecx+4], 0
  00004	74 0f		 je	 SHORT $LN3@IsNotEnd
  00006	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00009	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  0000c	74 07		 je	 SHORT $LN3@IsNotEnd
  0000e	b0 01		 mov	 al, 1
  00010	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00014	c3		 ret	 0
$LN3@IsNotEnd:
  00015	32 c0		 xor	 al, al
  00017	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0001a	c3		 ret	 0
?IsNotEnd@?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UBE_NXZ ENDP ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsNotEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_container$ = 8						; size = 4
??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 36   : 				: ContainerCopy (container), EndIterator (ContainerCopy.end()), Iterator (ContainerCopy.begin()) { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	66 c7 47 04 01
	00		 mov	 WORD PTR [edi+4], 1
  00030	6a ff		 push	 -1
  00032	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@6B@
  0003b	6a 00		 push	 0
  0003d	ff 75 08	 push	 DWORD PTR _container$[ebp]
  00040	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00047	8b ce		 mov	 ecx, esi
  00049	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00057	c6 06 00	 mov	 BYTE PTR [esi], 0
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00063	72 04		 jb	 SHORT $LN143@ContainerF
  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00067	eb 02		 jmp	 SHORT $LN144@ContainerF
$LN143@ContainerF:
  00069	8b ce		 mov	 ecx, esi
$LN144@ContainerF:
  0006b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006e	03 c1		 add	 eax, ecx
  00070	89 47 20	 mov	 DWORD PTR [edi+32], eax
  00073	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00077	72 07		 jb	 SHORT $LN175@ContainerF
  00079	8b 06		 mov	 eax, DWORD PTR [esi]
  0007b	89 47 24	 mov	 DWORD PTR [edi+36], eax
  0007e	eb 03		 jmp	 SHORT $LN197@ContainerF
$LN175@ContainerF:
  00080	89 77 24	 mov	 DWORD PTR [edi+36], esi
$LN197@ContainerF:
  00083	8b c7		 mov	 eax, edi
  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Container@ForEach@GostCrypt@@UAE@XZ ; GostCrypt::ForEach::Container::~Container
__ehhandler$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_container$ = 12					; size = 4
??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GostCrypt::ForEach::GetContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 69   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 70   : 			return ContainerForward <T> (container);

  00004	ff 75 0c	 push	 DWORD PTR _container$[ebp]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00011	e8 00 00 00 00	 call	 ??0?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GostCrypt::ForEach::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::ContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 71   : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GostCrypt::ForEach::GetContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FExtraBootPartitionDevicePath@@YAXXZ
text$yd	SEGMENT
??__FExtraBootPartitionDevicePath@@YAXXZ PROC		; `dynamic atexit destructor for 'ExtraBootPartitionDevicePath'', COMDAT
  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H
  00007	72 29		 jb	 SHORT $LN9@dynamic
  00009	56		 push	 esi
  0000a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  00015	68 00 00 00 00	 push	 OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  0001a	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
  0001f	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  00029	40		 inc	 eax
  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
  00031	5e		 pop	 esi
$LN9@dynamic:
  00032	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  00041	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0
  0004b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00052	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
??__FExtraBootPartitionDevicePath@@YAXXZ ENDP		; `dynamic atexit destructor for 'ExtraBootPartitionDevicePath''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ??__EExtraBootPartitionDevicePath@@YAXXZ
text$di	SEGMENT
??__EExtraBootPartitionDevicePath@@YAXXZ PROC		; `dynamic initializer for 'ExtraBootPartitionDevicePath'', COMDAT

; 173  : string ExtraBootPartitionDevicePath;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  00005	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
  0000a	68 00 00 00 00	 push	 OFFSET ??__FExtraBootPartitionDevicePath@@YAXXZ ; `dynamic atexit destructor for 'ExtraBootPartitionDevicePath''
  0000f	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH
  00019	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0
  00023	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  0002a	e8 00 00 00 00	 call	 _atexit
  0002f	59		 pop	 ecx
  00030	c3		 ret	 0
??__EExtraBootPartitionDevicePath@@YAXXZ ENDP		; `dynamic initializer for 'ExtraBootPartitionDevicePath''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _BrowseCallbackProc@16
_TEXT	SEGMENT
_szDir$1 = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_lp$ = 16						; size = 4
_pData$ = 20						; size = 4
_BrowseCallbackProc@16 PROC				; COMDAT

; 4644 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4645 : 	switch(uMsg) {

  00013	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _lp$[ebp]
  00019	56		 push	 esi
  0001a	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  0001d	83 e8 01	 sub	 eax, 1
  00020	74 27		 je	 SHORT $LN4@BrowseCall
  00022	83 e8 01	 sub	 eax, 1
  00025	75 33		 jne	 SHORT $LN9@BrowseCall

; 4651 : 	   break;
; 4652 : 	}
; 4653 : 
; 4654 : 	case BFFM_SELCHANGED: 
; 4655 : 	{
; 4656 : 		char szDir[GST_MAX_PATH];
; 4657 : 
; 4658 : 	   /* Set the status window to the currently selected path. */
; 4659 : 	   if (SHGetPathFromIDList((LPITEMIDLIST) lp ,szDir)) 

  00027	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szDir$1[ebp]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetPathFromIDListA@8
  00035	85 c0		 test	 eax, eax
  00037	74 21		 je	 SHORT $LN9@BrowseCall

; 4660 : 	   {
; 4661 : 		  SendMessage (hwnd,BFFM_SETSTATUSTEXT,0,(LPARAM)szDir);

  00039	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szDir$1[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	68 64 04 00 00	 push	 1124			; 00000464H

; 4662 : 	   }
; 4663 : 	   break;

  00047	eb 0a		 jmp	 SHORT $LN11@BrowseCall
$LN4@BrowseCall:

; 4646 : 	case BFFM_INITIALIZED: 
; 4647 : 	{
; 4648 : 	  /* WParam is TRUE since we are passing a path.
; 4649 : 	   It would be FALSE if we were passing a pidl. */
; 4650 : 	   SendMessage (hwnd,BFFM_SETSELECTION,TRUE,(LPARAM)pData);

  00049	ff 75 14	 push	 DWORD PTR _pData$[ebp]
  0004c	6a 01		 push	 1
  0004e	68 66 04 00 00	 push	 1126			; 00000466H
$LN11@BrowseCall:
  00053	56		 push	 esi
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN9@BrowseCall:

; 4664 : 	}
; 4665 : 
; 4666 : 	default:
; 4667 : 	   break;
; 4668 : 	}
; 4669 : 
; 4670 : 	return 0;
; 4671 : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 c0		 xor	 eax, eax
  0005f	33 cd		 xor	 ecx, ebp
  00061	5e		 pop	 esi
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
_BrowseCallbackProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2355 : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2356 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;

  0002d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00037	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0003e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00045	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00049	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00050	72 04		 jb	 SHORT $LN105@operator
  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	eb 02		 jmp	 SHORT $LN106@operator
$LN105@operator:
  00056	8b c6		 mov	 eax, esi
$LN106@operator:
  00058	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2360 : 	return (_Ans);

  0005b	8b 7d 10	 mov	 edi, DWORD PTR __Right$[ebp]
  0005e	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0006f	80 3f 00	 cmp	 BYTE PTR [edi], 0
  00072	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  00075	75 04		 jne	 SHORT $LN126@operator

; 2357 : 	_Ans.reserve(_Left.size() + _Traits::length(_Right));

  00077	33 c9		 xor	 ecx, ecx
  00079	eb 0e		 jmp	 SHORT $LN127@operator
$LN126@operator:
  0007b	8b cf		 mov	 ecx, edi
  0007d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL188@operator:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL188@operator
  00087	2b ca		 sub	 ecx, edx
$LN127@operator:
  00089	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  0008c	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0008f	3b d8		 cmp	 ebx, eax
  00091	77 26		 ja	 SHORT $LN174@operator
  00093	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00096	74 21		 je	 SHORT $LN174@operator
  00098	6a 01		 push	 1
  0009a	50		 push	 eax
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  000a2	84 c0		 test	 al, al
  000a4	74 13		 je	 SHORT $LN174@operator
  000a6	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000aa	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000ad	72 04		 jb	 SHORT $LN169@operator
  000af	8b 06		 mov	 eax, DWORD PTR [esi]
  000b1	eb 02		 jmp	 SHORT $LN170@operator
$LN169@operator:
  000b3	8b c6		 mov	 eax, esi
$LN170@operator:
  000b5	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN174@operator:

; 2358 : 	_Ans += _Left;

  000b9	6a ff		 push	 -1
  000bb	6a 00		 push	 0
  000bd	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  000c0	8b ce		 mov	 ecx, esi
  000c2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2359 : 	_Ans += _Right;

  000c7	80 3f 00	 cmp	 BYTE PTR [edi], 0
  000ca	75 04		 jne	 SHORT $LN186@operator
  000cc	33 c9		 xor	 ecx, ecx
  000ce	eb 0e		 jmp	 SHORT $LN187@operator
$LN186@operator:
  000d0	8b cf		 mov	 ecx, edi
  000d2	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL189@operator:
  000d5	8a 01		 mov	 al, BYTE PTR [ecx]
  000d7	41		 inc	 ecx
  000d8	84 c0		 test	 al, al
  000da	75 f9		 jne	 SHORT $LL189@operator
  000dc	2b ca		 sub	 ecx, edx
$LN187@operator:
  000de	51		 push	 ecx
  000df	57		 push	 edi
  000e0	8b ce		 mov	 ecx, esi
  000e2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2360 : 	return (_Ans);

  000e7	8b c6		 mov	 eax, esi

; 2361 : 	}

  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@operator:
  00018	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2439 : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2440 : 	return (_STD move(_Left.append(_Right)));

  00004	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0000f	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00012	75 04		 jne	 SHORT $LN9@operator
  00014	33 c0		 xor	 eax, eax
  00016	eb 11		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00018	8b c2		 mov	 eax, edx
  0001a	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001d	0f 1f 00	 npad	 3
$LL139@operator:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL139@operator
  00027	2b c6		 sub	 eax, esi
$LN10@operator:
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002c	50		 push	 eax
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00033	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00036	8b ce		 mov	 ecx, esi
  00038	50		 push	 eax
  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00040	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00047	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004a	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi

; 2441 : 	}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2417 : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2418 : 	return (_STD move(_Right.insert(0, _Left)));

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Left$[ebp]
  00007	56		 push	 esi
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0000f	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00012	75 04		 jne	 SHORT $LN9@operator
  00014	33 c0		 xor	 eax, eax
  00016	eb 11		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00018	8b c2		 mov	 eax, edx
  0001a	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001d	0f 1f 00	 npad	 3
$LL139@operator:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL139@operator
  00027	2b c6		 sub	 eax, esi
$LN10@operator:
  00029	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002c	50		 push	 eax
  0002d	52		 push	 edx
  0002e	6a 00		 push	 0
  00030	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00035	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00038	8b ce		 mov	 ecx, esi
  0003a	50		 push	 eax
  0003b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00042	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00049	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004c	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi

; 2419 : 	}

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SystemException@GostCrypt@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SystemException@GostCrypt@@QAE@ABU01@@Z PROC		; GostCrypt::SystemException::SystemException, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SystemException@GostCrypt@@6B@
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0SystemException@GostCrypt@@QAE@ABU01@@Z ENDP		; GostCrypt::SystemException::SystemException
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\exception.h
;	COMDAT ?Show@SystemException@GostCrypt@@UBEXPAUHWND__@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
?Show@SystemException@GostCrypt@@UBEXPAUHWND__@@@Z PROC	; GostCrypt::SystemException::Show, COMDAT
; _this$ = ecx

; 27   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : 			SetLastError (ErrorCode);

  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 29   : 			handleWin32Error (parent);

  0000c	ff 75 08	 push	 DWORD PTR _parent$[ebp]
  0000f	e8 00 00 00 00	 call	 _handleWin32Error
  00014	83 c4 04	 add	 esp, 4

; 30   : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?Show@SystemException@GostCrypt@@UBEXPAUHWND__@@@Z ENDP	; GostCrypt::SystemException::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\exception.h
;	COMDAT ??0SystemException@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??0SystemException@GostCrypt@@QAE@XZ PROC		; GostCrypt::SystemException::SystemException, COMDAT
; _this$ = ecx

; 24   : 		SystemException () : ErrorCode (GetLastError()) { }

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SystemException@GostCrypt@@6B@
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0SystemException@GostCrypt@@QAE@XZ ENDP		; GostCrypt::SystemException::SystemException
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Exception@GostCrypt@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0Exception@GostCrypt@@QAE@ABU01@@Z PROC		; GostCrypt::Exception::Exception, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??0Exception@GostCrypt@@QAE@ABU01@@Z ENDP		; GostCrypt::Exception::Exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Exception@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??0Exception@GostCrypt@@QAE@XZ PROC			; GostCrypt::Exception::Exception, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0Exception@GostCrypt@@QAE@XZ ENDP			; GostCrypt::Exception::Exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -88				; size = 4
$T2 = -84						; size = 4
_szTmp$ = -80						; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_version$ = 12						; size = 4
?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; GetUserFriendlyVersionString, COMDAT

; 5075 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 5076 : 	char szTmp [64];
; 5077 : 	sprintf (szTmp, "%x", version);

  00029	ff 75 0c	 push	 DWORD PTR _version$[ebp]
  0002c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	8d 45 b0	 lea	 eax, DWORD PTR _szTmp$[ebp]
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
  00037	50		 push	 eax
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	89 75 a8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  00042	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00049	e8 00 00 00 00	 call	 _sprintf

; 5078 : 
; 5079 : 	string versionString (szTmp);

  0004e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0005f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00066	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0006a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00071	72 04		 jb	 SHORT $LN105@GetUserFri
  00073	8b 06		 mov	 eax, DWORD PTR [esi]
  00075	eb 02		 jmp	 SHORT $LN106@GetUserFri
$LN105@GetUserFri:
  00077	8b c6		 mov	 eax, esi
$LN106@GetUserFri:
  00079	c6 00 00	 mov	 BYTE PTR [eax], 0
  0007c	80 7d b0 00	 cmp	 BYTE PTR _szTmp$[ebp], 0
  00080	75 04		 jne	 SHORT $LN116@GetUserFri
  00082	33 c9		 xor	 ecx, ecx
  00084	eb 13		 jmp	 SHORT $LN117@GetUserFri
$LN116@GetUserFri:
  00086	8d 4d b0	 lea	 ecx, DWORD PTR _szTmp$[ebp]
  00089	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008c	0f 1f 40 00	 npad	 4
$LL164@GetUserFri:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL164@GetUserFri
  00097	2b ca		 sub	 ecx, edx
$LN117@GetUserFri:
  00099	51		 push	 ecx
  0009a	8d 45 b0	 lea	 eax, DWORD PTR _szTmp$[ebp]
  0009d	8b ce		 mov	 ecx, esi
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 5085 : 
; 5086 : 	return (versionString);

  000a5	33 c0		 xor	 eax, eax
  000a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ae	81 7d 0c ff 0f
	00 00		 cmp	 DWORD PTR _version$[ebp], 4095 ; 00000fffH
  000b5	8b ce		 mov	 ecx, esi
  000b7	6a 01		 push	 1
  000b9	0f 9f c0	 setg	 al
  000bc	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  000c8	40		 inc	 eax
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  000cf	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000d3	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000d6	72 04		 jb	 SHORT $LN148@GetUserFri

; 5080 : 
; 5081 : 	versionString.insert (version > 0xfff ? 2 : 1,".");
; 5082 : 
; 5083 : 	if (versionString[versionString.length()-1] == '0')

  000d8	8b 06		 mov	 eax, DWORD PTR [esi]
  000da	eb 02		 jmp	 SHORT $LN149@GetUserFri
$LN148@GetUserFri:
  000dc	8b c6		 mov	 eax, esi
$LN149@GetUserFri:
  000de	80 7c 08 ff 30	 cmp	 BYTE PTR [eax+ecx-1], 48 ; 00000030H
  000e3	75 0b		 jne	 SHORT $LN165@GetUserFri

; 5084 : 		versionString.erase (versionString.length()-1, 1); 

  000e5	49		 dec	 ecx
  000e6	6a 01		 push	 1
  000e8	51		 push	 ecx
  000e9	8b ce		 mov	 ecx, esi
  000eb	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN165@GetUserFri:

; 5085 : 
; 5086 : 	return (versionString);

  000f0	8b c6		 mov	 eax, esi

; 5087 : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5e		 pop	 esi
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	33 cd		 xor	 ecx, ebp
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0:
  00000	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@GetUserFri
  0000c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d a8	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@GetUserFri:
  00018	c3		 ret	 0
__ehhandler$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetUserFriendlyVersionString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; GetUserFriendlyVersionString
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
_TEXT	SEGMENT
$T2 = -428						; size = 4
_latestTime$ = -424					; size = 8
_directory$GSCopy$1$ = -416				; size = 4
___$ReturnUdt$GSCopy$1$ = -412				; size = 4
_findData$ = -408					; size = 320
_name$ = -88						; size = 24
$T3 = -64						; size = 24
$T4 = -64						; size = 24
$T5 = -40						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_directory$ = 12					; size = 4
_namePattern$ = 16					; size = 4
_findDirectory$ = 20					; size = 1
_findFile$ = 24						; size = 1
?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z PROC ; FindLatestFileOrDirectory, COMDAT

; 12164: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 01 00
	00		 sub	 esp, 416		; 000001a0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 5d 0c	 mov	 ebx, DWORD PTR _directory$[ebp]
  00034	8b 75 10	 mov	 esi, DWORD PTR _namePattern$[ebp]
  00037	89 bd 64 fe ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], edi
  0003d	89 9d 60 fe ff
	ff		 mov	 DWORD PTR _directory$GSCopy$1$[ebp], ebx
  00043	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 12165: 	string name;

  0004d	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _name$[ebp+20], 15 ; 0000000fH
  00054	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _name$[ebp+16], 0
  0005b	c6 45 a8 00	 mov	 BYTE PTR _name$[ebp], 0

; 12166: 	ULARGE_INTEGER latestTime;
; 12167: 	latestTime.QuadPart = 0;
; 12168: 	WIN32_FIND_DATA findData;
; 12169: 
; 12170: 	HANDLE find = FindFirstFile ((directory + "\\" + namePattern).c_str(), &findData);

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  00064	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	53		 push	 ebx
  00072	50		 push	 eax
  00073	66 0f 13 85 58
	fe ff ff	 movlpd	 QWORD PTR _latestTime$[ebp], xmm0
  0007b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00080	56		 push	 esi
  00081	50		 push	 eax
  00082	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  00085	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0008f	83 c4 18	 add	 esp, 24			; 00000018H
  00092	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00096	72 02		 jb	 SHORT $LN142@FindLatest
  00098	8b 00		 mov	 eax, DWORD PTR [eax]
$LN142@FindLatest:
  0009a	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _findData$[ebp]
  000a0	51		 push	 ecx
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  000a8	8b f0		 mov	 esi, eax
  000aa	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
  000ad	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b0	72 0d		 jb	 SHORT $LN151@FindLatest
  000b2	40		 inc	 eax
  000b3	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  000b6	50		 push	 eax
  000b7	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  000ba	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN151@FindLatest:
  000bf	8b 45 d4	 mov	 eax, DWORD PTR $T4[ebp+20]
  000c2	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH
  000c9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  000d0	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0
  000d4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d8	83 f8 10	 cmp	 eax, 16			; 00000010H
  000db	72 0d		 jb	 SHORT $LN252@FindLatest
  000dd	40		 inc	 eax
  000de	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  000e1	50		 push	 eax
  000e2	ff 75 c0	 push	 DWORD PTR $T4[ebp]
  000e5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN252@FindLatest:
  000ea	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
  000f1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
  000f8	c6 45 c0 00	 mov	 BYTE PTR $T4[ebp], 0

; 12171: 	if (find != INVALID_HANDLE_VALUE)

  000fc	83 fe ff	 cmp	 esi, -1
  000ff	0f 84 0d 01 00
	00		 je	 $LN5@FindLatest
  00105	8b 9d 5c fe ff
	ff		 mov	 ebx, DWORD PTR _latestTime$[ebp+4]
  0010b	8b bd 58 fe ff
	ff		 mov	 edi, DWORD PTR _latestTime$[ebp]
$LL4@FindLatest:

; 12172: 	{
; 12173: 		do
; 12174: 		{
; 12175: 			if (strcmp (findData.cFileName, ".") == 0 || strcmp (findData.cFileName, "..") == 0)

  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00116	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _findData$[ebp+44]
  0011c	0f 1f 40 00	 npad	 4
$LL1024@FindLatest:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN1025@FindLatest
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN1026@FindLatest
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN1025@FindLatest
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL1024@FindLatest
$LN1026@FindLatest:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN1027@FindLatest
$LN1025@FindLatest:
  00140	1b c0		 sbb	 eax, eax
  00142	83 c8 01	 or	 eax, 1
$LN1027@FindLatest:
  00145	85 c0		 test	 eax, eax
  00147	0f 84 9c 00 00
	00		 je	 $LN2@FindLatest
  0014d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02DJGKEECL@?4?4?$AA@
  00152	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _findData$[ebp+44]
$LL1028@FindLatest:
  00158	8a 10		 mov	 dl, BYTE PTR [eax]
  0015a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0015c	75 1a		 jne	 SHORT $LN1029@FindLatest
  0015e	84 d2		 test	 dl, dl
  00160	74 12		 je	 SHORT $LN1030@FindLatest
  00162	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00165	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00168	75 0e		 jne	 SHORT $LN1029@FindLatest
  0016a	83 c0 02	 add	 eax, 2
  0016d	83 c1 02	 add	 ecx, 2
  00170	84 d2		 test	 dl, dl
  00172	75 e4		 jne	 SHORT $LL1028@FindLatest
$LN1030@FindLatest:
  00174	33 c0		 xor	 eax, eax
  00176	eb 05		 jmp	 SHORT $LN1031@FindLatest
$LN1029@FindLatest:
  00178	1b c0		 sbb	 eax, eax
  0017a	83 c8 01	 or	 eax, 1
$LN1031@FindLatest:
  0017d	85 c0		 test	 eax, eax
  0017f	74 68		 je	 SHORT $LN2@FindLatest

; 12176: 				continue;
; 12177: 
; 12178: 			ULARGE_INTEGER writeTime;
; 12179: 			writeTime.LowPart = findData.ftLastWriteTime.dwLowDateTime;
; 12180: 			writeTime.HighPart = findData.ftLastWriteTime.dwHighDateTime;
; 12181: 
; 12182: 			if ((!findFile && !(findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))
; 12183: 				|| (!findDirectory && (findData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)))

  00181	80 7d 18 00	 cmp	 BYTE PTR _findFile$[ebp], 0
  00185	8b 8d 7c fe ff
	ff		 mov	 ecx, DWORD PTR _findData$[ebp+20]
  0018b	8b 95 80 fe ff
	ff		 mov	 edx, DWORD PTR _findData$[ebp+24]
  00191	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _findData$[ebp]
  00197	75 04		 jne	 SHORT $LN10@FindLatest
  00199	a8 10		 test	 al, 16			; 00000010H
  0019b	74 4c		 je	 SHORT $LN2@FindLatest
$LN10@FindLatest:
  0019d	80 7d 14 00	 cmp	 BYTE PTR _findDirectory$[ebp], 0
  001a1	75 04		 jne	 SHORT $LN8@FindLatest
  001a3	a8 10		 test	 al, 16			; 00000010H
  001a5	75 42		 jne	 SHORT $LN2@FindLatest
$LN8@FindLatest:

; 12184: 				continue;
; 12185: 
; 12186: 			if (latestTime.QuadPart < writeTime.QuadPart)

  001a7	3b da		 cmp	 ebx, edx
  001a9	77 3e		 ja	 SHORT $LN2@FindLatest
  001ab	72 04		 jb	 SHORT $LN1032@FindLatest
  001ad	3b f9		 cmp	 edi, ecx
  001af	73 38		 jae	 SHORT $LN2@FindLatest
$LN1032@FindLatest:

; 12187: 			{
; 12188: 				latestTime = writeTime;
; 12189: 				name = findData.cFileName;

  001b1	80 bd 94 fe ff
	ff 00		 cmp	 BYTE PTR _findData$[ebp+44], 0
  001b8	8b f9		 mov	 edi, ecx
  001ba	8b da		 mov	 ebx, edx
  001bc	75 04		 jne	 SHORT $LN353@FindLatest
  001be	33 c9		 xor	 ecx, ecx
  001c0	eb 17		 jmp	 SHORT $LN354@FindLatest
$LN353@FindLatest:
  001c2	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _findData$[ebp+44]
  001c8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  001cb	0f 1f 44 00 00	 npad	 5
$LL1033@FindLatest:
  001d0	8a 01		 mov	 al, BYTE PTR [ecx]
  001d2	41		 inc	 ecx
  001d3	84 c0		 test	 al, al
  001d5	75 f9		 jne	 SHORT $LL1033@FindLatest
  001d7	2b ca		 sub	 ecx, edx
$LN354@FindLatest:
  001d9	51		 push	 ecx
  001da	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _findData$[ebp+44]
  001e0	50		 push	 eax
  001e1	8d 4d a8	 lea	 ecx, DWORD PTR _name$[ebp]
  001e4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@FindLatest:

; 12190: 			}
; 12191: 		}
; 12192: 		while (FindNextFile (find, &findData));

  001e9	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _findData$[ebp]
  001ef	50		 push	 eax
  001f0	56		 push	 esi
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextFileA@8
  001f7	85 c0		 test	 eax, eax
  001f9	0f 85 12 ff ff
	ff		 jne	 $LL4@FindLatest

; 12193: 
; 12194: 		FindClose (find);

  001ff	56		 push	 esi
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4
  00206	8b bd 64 fe ff
	ff		 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0020c	8b 9d 60 fe ff
	ff		 mov	 ebx, DWORD PTR _directory$GSCopy$1$[ebp]
$LN5@FindLatest:
  00212	83 7d b8 00	 cmp	 DWORD PTR _name$[ebp+16], 0

; 12195: 	}
; 12196: 
; 12197: 	if (name.empty())

  00216	75 2f		 jne	 SHORT $LN12@FindLatest

; 12198: 		return name;

  00218	8d 45 a8	 lea	 eax, DWORD PTR _name$[ebp]
  0021b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00222	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00229	8b cf		 mov	 ecx, edi
  0022b	50		 push	 eax
  0022c	c6 07 00	 mov	 BYTE PTR [edi], 0
  0022f	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00234	8b 4d bc	 mov	 ecx, DWORD PTR _name$[ebp+20]
  00237	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0023a	0f 82 b1 00 00
	00		 jb	 $LN926@FindLatest
  00240	41		 inc	 ecx
  00241	51		 push	 ecx
  00242	e9 9f 00 00 00	 jmp	 $LN1035@FindLatest
$LN12@FindLatest:

; 12199: 
; 12200: 	return string (directory) + "\\" + name;

  00247	6a ff		 push	 -1
  00249	6a 00		 push	 0
  0024b	53		 push	 ebx
  0024c	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0024f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
  00256	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0
  0025d	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp], 0
  00261	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  0026b	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  0026e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00272	50		 push	 eax
  00273	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  00276	50		 push	 eax
  00277	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0027c	8d 4d a8	 lea	 ecx, DWORD PTR _name$[ebp]
  0027f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00283	51		 push	 ecx
  00284	50		 push	 eax
  00285	57		 push	 edi
  00286	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@ABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0028b	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp+20]
  0028e	83 c4 18	 add	 esp, 24			; 00000018H
  00291	83 f8 10	 cmp	 eax, 16			; 00000010H
  00294	72 0d		 jb	 SHORT $LN724@FindLatest
  00296	40		 inc	 eax
  00297	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0029a	50		 push	 eax
  0029b	ff 75 c0	 push	 DWORD PTR $T3[ebp]
  0029e	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN724@FindLatest:
  002a3	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp+20]
  002a6	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
  002ad	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  002b4	c6 45 c0 00	 mov	 BYTE PTR $T3[ebp], 0
  002b8	83 f8 10	 cmp	 eax, 16			; 00000010H
  002bb	72 0d		 jb	 SHORT $LN825@FindLatest
  002bd	40		 inc	 eax
  002be	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  002c1	50		 push	 eax
  002c2	ff 75 d8	 push	 DWORD PTR $T5[ebp]
  002c5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN825@FindLatest:
  002ca	8b 45 bc	 mov	 eax, DWORD PTR _name$[ebp+20]
  002cd	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
  002d4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0
  002db	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp], 0
  002df	83 f8 10	 cmp	 eax, 16			; 00000010H
  002e2	72 0d		 jb	 SHORT $LN926@FindLatest
  002e4	40		 inc	 eax
  002e5	50		 push	 eax
$LN1035@FindLatest:
  002e6	ff 75 a8	 push	 DWORD PTR _name$[ebp]
  002e9	8d 4d a8	 lea	 ecx, DWORD PTR _name$[ebp]
  002ec	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN926@FindLatest:
  002f1	8b c7		 mov	 eax, edi

; 12201: }

  002f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002fd	59		 pop	 ecx
  002fe	5f		 pop	 edi
  002ff	5e		 pop	 esi
  00300	5b		 pop	 ebx
  00301	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00304	33 cd		 xor	 ecx, ebp
  00306	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030b	8b e5		 mov	 esp, ebp
  0030d	5d		 pop	 ebp
  0030e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _name$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$4:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z$5:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 8a 50 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-432]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindLatestFileOrDirectory@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD_N2@Z ENDP ; FindLatestFileOrDirectory
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
_TEXT	SEGMENT
$T2 = -1116						; size = 4
___$ReturnUdt$GSCopy$1$ = -1112				; size = 4
_driveNumber$1$ = -1108					; size = 4
_volPath$ = -1104					; size = 24
$T3 = -1080						; size = 24
_resolvedPath$4 = -1056					; size = 520
_partitionPath$5 = -536					; size = 520
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_harddiskVolumePath$ = 12				; size = 4
?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; HarddiskVolumePathToPartitionPath, COMDAT

; 12081: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 04 00
	00		 sub	 esp, 1104		; 00000450H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	89 85 a8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00037	8b 45 0c	 mov	 eax, DWORD PTR _harddiskVolumePath$[ebp]

; 12082: 	wstring volPath = SingleStringToWide (harddiskVolumePath);

  0003a	50		 push	 eax
  0003b	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _volPath$[ebp]
  00041	c7 85 a4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SingleStringToWide
  00051	83 c4 08	 add	 esp, 8

; 12083: 
; 12084: 	for (int driveNumber = 0; driveNumber < MAX_HOST_DRIVE_NUMBER; driveNumber++)

  00054	33 f6		 xor	 esi, esi
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _driveNumber$1$[ebp], esi
$LL4@HarddiskVo:

; 12085: 	{
; 12086: 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  00063	33 db		 xor	 ebx, ebx
$LL7@HarddiskVo:

; 12087: 		{
; 12088: 			wchar_t partitionPath[GST_MAX_PATH];
; 12089: 			swprintf_s (partitionPath, ARRAYSIZE (partitionPath), L"\\Device\\Harddisk%d\\Partition%d", driveNumber, partNumber);

  00065	53		 push	 ebx
  00066	56		 push	 esi
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@HBNMGCKD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$CF?$AAd?$AA?$AA@
  0006c	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _partitionPath$5[ebp]
  00072	68 04 01 00 00	 push	 260			; 00000104H
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _swprintf_s

; 12090: 
; 12091: 			wchar_t resolvedPath[GST_MAX_PATH];
; 12092: 			if (ResolveSymbolicLink (partitionPath, resolvedPath))

  0007d	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$4[ebp]
  00083	50		 push	 eax
  00084	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _partitionPath$5[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _ResolveSymbolicLink
  00090	83 c4 1c	 add	 esp, 28			; 0000001cH
  00093	85 c0		 test	 eax, eax
  00095	0f 84 a1 00 00
	00		 je	 $LN8@HarddiskVo

; 12093: 			{
; 12094: 				if (volPath == resolvedPath)

  0009b	66 83 bd e0 fb
	ff ff 00	 cmp	 WORD PTR _resolvedPath$4[ebp], 0
  000a3	75 04		 jne	 SHORT $LN23@HarddiskVo
  000a5	33 c0		 xor	 eax, eax
  000a7	eb 18		 jmp	 SHORT $LN24@HarddiskVo
$LN23@HarddiskVo:
  000a9	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$4[ebp]
  000af	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL690@HarddiskVo:
  000b2	66 8b 08	 mov	 cx, WORD PTR [eax]
  000b5	83 c0 02	 add	 eax, 2
  000b8	66 85 c9	 test	 cx, cx
  000bb	75 f5		 jne	 SHORT $LL690@HarddiskVo
  000bd	2b c2		 sub	 eax, edx
  000bf	d1 f8		 sar	 eax, 1
$LN24@HarddiskVo:
  000c1	83 bd c4 fb ff
	ff 08		 cmp	 DWORD PTR _volPath$[ebp+20], 8
  000c8	8d 95 b0 fb ff
	ff		 lea	 edx, DWORD PTR _volPath$[ebp]
  000ce	8b b5 c0 fb ff
	ff		 mov	 esi, DWORD PTR _volPath$[ebp+16]
  000d4	8b f8		 mov	 edi, eax
  000d6	0f 43 95 b0 fb
	ff ff		 cmovae	 edx, DWORD PTR _volPath$[ebp]
  000dd	3b f0		 cmp	 esi, eax
  000df	0f 42 fe	 cmovb	 edi, esi
  000e2	85 ff		 test	 edi, edi
  000e4	74 23		 je	 SHORT $LN694@HarddiskVo
  000e6	8d b5 e0 fb ff
	ff		 lea	 esi, DWORD PTR _resolvedPath$4[ebp]
  000ec	0f 1f 40 00	 npad	 4
$LL60@HarddiskVo:
  000f0	66 8b 0a	 mov	 cx, WORD PTR [edx]
  000f3	66 3b 0e	 cmp	 cx, WORD PTR [esi]
  000f6	75 20		 jne	 SHORT $LN677@HarddiskVo
  000f8	83 c2 02	 add	 edx, 2
  000fb	83 c6 02	 add	 esi, 2
  000fe	83 ef 01	 sub	 edi, 1
  00101	75 ed		 jne	 SHORT $LL60@HarddiskVo
  00103	8b b5 c0 fb ff
	ff		 mov	 esi, DWORD PTR _volPath$[ebp+16]
$LN694@HarddiskVo:
  00109	33 c9		 xor	 ecx, ecx
$LN57@HarddiskVo:
  0010b	85 c9		 test	 ecx, ecx
  0010d	75 25		 jne	 SHORT $LN696@HarddiskVo
  0010f	3b c6		 cmp	 eax, esi
  00111	76 19		 jbe	 SHORT $LN697@HarddiskVo
  00113	83 c9 ff	 or	 ecx, -1
  00116	eb 18		 jmp	 SHORT $LN51@HarddiskVo
$LN677@HarddiskVo:
  00118	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  0011b	66 3b 0e	 cmp	 cx, WORD PTR [esi]
  0011e	8b b5 c0 fb ff
	ff		 mov	 esi, DWORD PTR _volPath$[ebp+16]
  00124	1b c9		 sbb	 ecx, ecx
  00126	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00129	41		 inc	 ecx
  0012a	eb df		 jmp	 SHORT $LN57@HarddiskVo
$LN697@HarddiskVo:
  0012c	1b c9		 sbb	 ecx, ecx
  0012e	f7 d9		 neg	 ecx
$LN51@HarddiskVo:
  00130	85 c9		 test	 ecx, ecx
  00132	74 63		 je	 SHORT $LN678@HarddiskVo
$LN696@HarddiskVo:

; 12096: 			}

  00134	8b b5 ac fb ff
	ff		 mov	 esi, DWORD PTR _driveNumber$1$[ebp]
  0013a	eb 04		 jmp	 SHORT $LN5@HarddiskVo
$LN8@HarddiskVo:

; 12097: 			else if (partNumber == 0)

  0013c	85 db		 test	 ebx, ebx
  0013e	74 0a		 je	 SHORT $LN2@HarddiskVo
$LN5@HarddiskVo:

; 12085: 	{
; 12086: 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  00140	43		 inc	 ebx
  00141	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00144	0f 8c 1b ff ff
	ff		 jl	 $LL7@HarddiskVo
$LN2@HarddiskVo:

; 12083: 
; 12084: 	for (int driveNumber = 0; driveNumber < MAX_HOST_DRIVE_NUMBER; driveNumber++)

  0014a	46		 inc	 esi
  0014b	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _driveNumber$1$[ebp], esi
  00151	83 fe 40	 cmp	 esi, 64			; 00000040H
  00154	0f 8c 09 ff ff
	ff		 jl	 $LL4@HarddiskVo

; 12098: 				break;
; 12099: 		}
; 12100: 	}
; 12101: 
; 12102: 	return string();

  0015a	8b 9d a8 fb ff
	ff		 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00160	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00167	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  0016e	c6 03 00	 mov	 BYTE PTR [ebx], 0
  00171	8b 85 c4 fb ff
	ff		 mov	 eax, DWORD PTR _volPath$[ebp+20]
  00177	83 f8 08	 cmp	 eax, 8
  0017a	0f 82 ad 01 00
	00		 jb	 $LN643@HarddiskVo
  00180	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _volPath$[ebp]
  00186	40		 inc	 eax
  00187	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0018c	0f 86 5b 01 00
	00		 jbe	 $LN637@HarddiskVo
  00192	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN698@HarddiskVo:
$LN678@HarddiskVo:

; 12095: 					return WideToSingleString (partitionPath);

  00197	33 c0		 xor	 eax, eax
  00199	c7 85 dc fb ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 7
  001a3	c7 85 d8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  001ad	66 89 85 c8 fb
	ff ff		 mov	 WORD PTR $T3[ebp], ax
  001b4	66 39 85 e8 fd
	ff ff		 cmp	 WORD PTR _partitionPath$5[ebp], ax
  001bb	75 04		 jne	 SHORT $LN191@HarddiskVo
  001bd	33 c9		 xor	 ecx, ecx
  001bf	eb 1e		 jmp	 SHORT $LN192@HarddiskVo
$LN191@HarddiskVo:
  001c1	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _partitionPath$5[ebp]
  001c7	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  001ca	66 0f 1f 44 00
	00		 npad	 6
$LL691@HarddiskVo:
  001d0	66 8b 01	 mov	 ax, WORD PTR [ecx]
  001d3	83 c1 02	 add	 ecx, 2
  001d6	66 85 c0	 test	 ax, ax
  001d9	75 f5		 jne	 SHORT $LL691@HarddiskVo
  001db	2b ca		 sub	 ecx, edx
  001dd	d1 f9		 sar	 ecx, 1
$LN192@HarddiskVo:
  001df	51		 push	 ecx
  001e0	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _partitionPath$5[ebp]
  001e6	50		 push	 eax
  001e7	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001ed	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  001f2	8b b5 a8 fb ff
	ff		 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  001f8	8d 85 c8 fb ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001fe	50		 push	 eax
  001ff	56		 push	 esi
  00200	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00204	e8 00 00 00 00	 call	 ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; WideToSingleString
  00209	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  0020f	83 c4 08	 add	 esp, 8
  00212	83 f8 08	 cmp	 eax, 8
  00215	72 57		 jb	 SHORT $LN282@HarddiskVo
  00217	8b 8d c8 fb ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0021d	40		 inc	 eax
  0021e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00223	76 05		 jbe	 SHORT $LN276@HarddiskVo
  00225	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN699@HarddiskVo:
$LN276@HarddiskVo:
  0022a	03 c0		 add	 eax, eax
  0022c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00231	72 32		 jb	 SHORT $LN277@HarddiskVo
  00233	f6 85 c8 fb ff
	ff 1f		 test	 BYTE PTR $T3[ebp], 31	; 0000001fH
  0023a	74 05		 je	 SHORT $LN278@HarddiskVo
  0023c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN700@HarddiskVo:
$LN278@HarddiskVo:
  00241	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00244	3b c1		 cmp	 eax, ecx
  00246	72 05		 jb	 SHORT $LN279@HarddiskVo
  00248	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN701@HarddiskVo:
$LN279@HarddiskVo:
  0024d	2b c8		 sub	 ecx, eax
  0024f	83 f9 04	 cmp	 ecx, 4
  00252	73 05		 jae	 SHORT $LN280@HarddiskVo
  00254	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN702@HarddiskVo:
$LN280@HarddiskVo:
  00259	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0025c	76 05		 jbe	 SHORT $LN281@HarddiskVo
  0025e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN703@HarddiskVo:
$LN281@HarddiskVo:
  00263	8b c8		 mov	 ecx, eax
$LN277@HarddiskVo:
  00265	51		 push	 ecx
  00266	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026b	83 c4 04	 add	 esp, 4
$LN282@HarddiskVo:
  0026e	33 c0		 xor	 eax, eax
  00270	c7 85 dc fb ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 7
  0027a	66 89 85 c8 fb
	ff ff		 mov	 WORD PTR $T3[ebp], ax
  00281	8b 85 c4 fb ff
	ff		 mov	 eax, DWORD PTR _volPath$[ebp+20]
  00287	c7 85 d8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  00291	83 f8 08	 cmp	 eax, 8
  00294	72 53		 jb	 SHORT $LN401@HarddiskVo
  00296	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _volPath$[ebp]
  0029c	40		 inc	 eax
  0029d	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  002a2	76 05		 jbe	 SHORT $LN395@HarddiskVo
  002a4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN704@HarddiskVo:
$LN395@HarddiskVo:
  002a9	03 c0		 add	 eax, eax
  002ab	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  002b0	72 2e		 jb	 SHORT $LN396@HarddiskVo
  002b2	f6 c1 1f	 test	 cl, 31			; 0000001fH
  002b5	74 05		 je	 SHORT $LN397@HarddiskVo
  002b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN705@HarddiskVo:
$LN397@HarddiskVo:
  002bc	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  002bf	3b c1		 cmp	 eax, ecx
  002c1	72 05		 jb	 SHORT $LN398@HarddiskVo
  002c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN706@HarddiskVo:
$LN398@HarddiskVo:
  002c8	2b c8		 sub	 ecx, eax
  002ca	83 f9 04	 cmp	 ecx, 4
  002cd	73 05		 jae	 SHORT $LN399@HarddiskVo
  002cf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN707@HarddiskVo:
$LN399@HarddiskVo:
  002d4	83 f9 23	 cmp	 ecx, 35			; 00000023H
  002d7	76 05		 jbe	 SHORT $LN400@HarddiskVo
  002d9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN708@HarddiskVo:
$LN400@HarddiskVo:
  002de	8b c8		 mov	 ecx, eax
$LN396@HarddiskVo:
  002e0	51		 push	 ecx
  002e1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002e6	83 c4 04	 add	 esp, 4
$LN401@HarddiskVo:
  002e9	8b c6		 mov	 eax, esi
  002eb	eb 42		 jmp	 SHORT $LN1@HarddiskVo

; 12098: 				break;
; 12099: 		}
; 12100: 	}
; 12101: 
; 12102: 	return string();

$LN637@HarddiskVo:
  002ed	03 c0		 add	 eax, eax
  002ef	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  002f4	72 2e		 jb	 SHORT $LN638@HarddiskVo
  002f6	f6 c1 1f	 test	 cl, 31			; 0000001fH
  002f9	74 05		 je	 SHORT $LN639@HarddiskVo
  002fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN709@HarddiskVo:
$LN639@HarddiskVo:
  00300	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00303	3b c1		 cmp	 eax, ecx
  00305	72 05		 jb	 SHORT $LN640@HarddiskVo
  00307	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN710@HarddiskVo:
$LN640@HarddiskVo:
  0030c	2b c8		 sub	 ecx, eax
  0030e	83 f9 04	 cmp	 ecx, 4
  00311	73 05		 jae	 SHORT $LN641@HarddiskVo
  00313	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN711@HarddiskVo:
$LN641@HarddiskVo:
  00318	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0031b	76 05		 jbe	 SHORT $LN642@HarddiskVo
  0031d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN712@HarddiskVo:
$LN642@HarddiskVo:
  00322	8b c8		 mov	 ecx, eax
$LN638@HarddiskVo:
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0032a	83 c4 04	 add	 esp, 4
$LN643@HarddiskVo:
  0032d	8b c3		 mov	 eax, ebx
$LN1@HarddiskVo:

; 12103: }

  0032f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00332	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00339	59		 pop	 ecx
  0033a	5f		 pop	 edi
  0033b	5e		 pop	 esi
  0033c	5b		 pop	 ebx
  0033d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00340	33 cd		 xor	 ecx, ebp
  00342	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c3		 ret	 0
$LN693@HarddiskVo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0:
  00000	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR _volPath$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1:
  0000b	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a a0 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1120]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; HarddiskVolumePathToPartitionPath
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
_TEXT	SEGMENT
$T2 = -376						; size = 4
$T3 = -372						; size = 24
$T4 = -348						; size = 24
_partitionPath$ = -324					; size = 24
$T5 = -300						; size = 24
$T6 = -300						; size = 24
$T7 = -300						; size = 24
_volDevPath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_volumeGuidPath$ = 12					; size = 24
?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z PROC ; VolumeGuidPathToDevicePath, COMDAT

; 12055: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 12056: 	if (volumeGuidPath.find ("\\\\?\\") == 0)

  0003b	6a 04		 push	 4
  0003d	6a 00		 push	 0
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
  00044	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00053	85 c0		 test	 eax, eax
  00055	75 6e		 jne	 SHORT $LN328@VolumeGuid

; 12057: 		volumeGuidPath = volumeGuidPath.substr (4);

  00057	6a ff		 push	 -1
  00059	6a 04		 push	 4
  0005b	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00061	50		 push	 eax
  00062	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  00065	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0006a	8b f8		 mov	 edi, eax
  0006c	8d 45 0c	 lea	 eax, DWORD PTR _volumeGuidPath$[ebp]
  0006f	3b c7		 cmp	 eax, edi
  00071	74 30		 je	 SHORT $LN32@VolumeGuid
  00073	8b 45 20	 mov	 eax, DWORD PTR _volumeGuidPath$[ebp+20]
  00076	83 f8 10	 cmp	 eax, 16			; 00000010H
  00079	72 0d		 jb	 SHORT $LN38@VolumeGuid
  0007b	40		 inc	 eax
  0007c	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  0007f	50		 push	 eax
  00080	ff 75 0c	 push	 DWORD PTR _volumeGuidPath$[ebp]
  00083	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN38@VolumeGuid:
  00088	57		 push	 edi
  00089	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  0008c	c7 45 20 0f 00
	00 00		 mov	 DWORD PTR _volumeGuidPath$[ebp+20], 15 ; 0000000fH
  00093	c7 45 1c 00 00
	00 00		 mov	 DWORD PTR _volumeGuidPath$[ebp+16], 0
  0009a	c6 45 0c 00	 mov	 BYTE PTR _volumeGuidPath$[ebp], 0
  0009e	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN32@VolumeGuid:
  000a3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+20]
  000a9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ad	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b0	72 13		 jb	 SHORT $LN328@VolumeGuid
  000b2	40		 inc	 eax
  000b3	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000b9	50		 push	 eax
  000ba	ff b5 d4 fe ff
	ff		 push	 DWORD PTR $T7[ebp]
  000c0	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN328@VolumeGuid:

; 12058: 
; 12059: 	if (volumeGuidPath.find ("Volume{") != 0 || volumeGuidPath.rfind ("}\\") != volumeGuidPath.size() - 2)

  000c5	6a 07		 push	 7
  000c7	6a 00		 push	 0
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  000ce	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  000d1	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  000d6	85 c0		 test	 eax, eax
  000d8	0f 85 83 01 00
	00		 jne	 $LN4@VolumeGuid
  000de	6a 02		 push	 2
  000e0	6a ff		 push	 -1
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  000e7	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  000ea	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  000ef	8b 55 1c	 mov	 edx, DWORD PTR _volumeGuidPath$[ebp+16]
  000f2	8b c8		 mov	 ecx, eax
  000f4	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  000f7	3b c8		 cmp	 ecx, eax
  000f9	0f 85 62 01 00
	00		 jne	 $LN4@VolumeGuid

; 12061: 
; 12062: 	char volDevPath[GST_MAX_PATH];
; 12063: 	if (QueryDosDevice (volumeGuidPath.substr (0, volumeGuidPath.size() - 1).c_str(), volDevPath, GST_MAX_PATH) == 0)

  000ff	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00102	50		 push	 eax
  00103	6a 00		 push	 0
  00105	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0010b	50		 push	 eax
  0010c	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  0010f	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00114	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00118	72 02		 jb	 SHORT $LN681@VolumeGuid
  0011a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN681@VolumeGuid:
  0011c	68 04 01 00 00	 push	 260			; 00000104H
  00121	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _volDevPath$[ebp]
  00127	51		 push	 ecx
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryDosDeviceA@12
  0012f	85 c0		 test	 eax, eax
  00131	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp+20]
  00137	0f 94 c3	 sete	 bl
  0013a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0013d	72 13		 jb	 SHORT $LN690@VolumeGuid
  0013f	40		 inc	 eax
  00140	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00146	50		 push	 eax
  00147	ff b5 d4 fe ff
	ff		 push	 DWORD PTR $T6[ebp]
  0014d	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN690@VolumeGuid:
  00152	84 db		 test	 bl, bl
  00154	74 1e		 je	 SHORT $LN5@VolumeGuid

; 12064: 		return string();

  00156	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0015d	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  00160	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00167	c6 06 00	 mov	 BYTE PTR [esi], 0
  0016a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0016f	e9 13 01 00 00	 jmp	 $LN560@VolumeGuid
$LN5@VolumeGuid:

; 12065: 
; 12066: 	string partitionPath = HarddiskVolumePathToPartitionPath (volDevPath);

  00174	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _volDevPath$[ebp]
  0017a	50		 push	 eax
  0017b	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00181	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00186	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0018c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00190	50		 push	 eax
  00191	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _partitionPath$[ebp]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?HarddiskVolumePathToPartitionPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; HarddiskVolumePathToPartitionPath
  0019d	83 c4 08	 add	 esp, 8
  001a0	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001a6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001aa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001af	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _partitionPath$[ebp+16], 0

; 12067: 
; 12068: 	return partitionPath.empty() ? volDevPath : partitionPath;

  001b6	75 19		 jne	 SHORT $LN7@VolumeGuid
  001b8	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _volDevPath$[ebp]
  001be	50		 push	 eax
  001bf	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001c5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ca	bb 02 00 00 00	 mov	 ebx, 2
  001cf	eb 3c		 jmp	 SHORT $LN8@VolumeGuid
$LN7@VolumeGuid:
  001d1	6a ff		 push	 -1
  001d3	6a 00		 push	 0
  001d5	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _partitionPath$[ebp]
  001db	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
  001e5	50		 push	 eax
  001e6	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001ec	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+16], 0
  001f6	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0
  001fd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00202	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00208	bb 04 00 00 00	 mov	 ebx, 4
$LN8@VolumeGuid:
  0020d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00214	8b ce		 mov	 ecx, esi
  00216	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0021d	50		 push	 eax
  0021e	c6 06 00	 mov	 BYTE PTR [esi], 0
  00221	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00226	83 cb 01	 or	 ebx, 1
  00229	f6 c3 04	 test	 bl, 4
  0022c	74 0e		 je	 SHORT $LN20@VolumeGuid
  0022e	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00234	83 e3 fb	 and	 ebx, -5			; fffffffbH
  00237	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN20@VolumeGuid:
  0023c	f6 c3 02	 test	 bl, 2
  0023f	74 0b		 je	 SHORT $LN21@VolumeGuid
  00241	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00247	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN21@VolumeGuid:
  0024c	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _partitionPath$[ebp]
  00252	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00257	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  0025a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0025f	eb 26		 jmp	 SHORT $LN560@VolumeGuid
$LN4@VolumeGuid:

; 12060: 		return string();

  00261	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00268	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0026f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00272	8b 45 20	 mov	 eax, DWORD PTR _volumeGuidPath$[ebp+20]
  00275	83 f8 10	 cmp	 eax, 16			; 00000010H
  00278	72 0d		 jb	 SHORT $LN560@VolumeGuid
  0027a	40		 inc	 eax
  0027b	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  0027e	50		 push	 eax
  0027f	ff 75 0c	 push	 DWORD PTR _volumeGuidPath$[ebp]
  00282	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN560@VolumeGuid:
  00287	8b c6		 mov	 eax, esi

; 12069: }

  00289	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0028c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00293	59		 pop	 ecx
  00294	5f		 pop	 edi
  00295	5e		 pop	 esi
  00296	5b		 pop	 ebx
  00297	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029a	33 cd		 xor	 ecx, ebp
  0029c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a1	8b e5		 mov	 esp, ebp
  002a3	5d		 pop	 ebp
  002a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _volumeGuidPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$8:
  00008	e8 00 00 00 00	 call	 ___std_terminate
  0000d	c3		 ret	 0
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$4:
  0000e	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00014	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5:
  00019	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _partitionPath$[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$6:
  00024	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002a	83 e0 02	 and	 eax, 2
  0002d	0f 84 12 00 00
	00		 je	 $LN17@VolumeGuid
  00033	83 a5 88 fe ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  0003a	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN17@VolumeGuid:
  00045	c3		 ret	 0
__ehhandler$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z:
  00046	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004d	8b 8a 84 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-380]
  00053	33 c8		 xor	 ecx, eax
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
  00069	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ENDP ; VolumeGuidPathToDevicePath
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
$T2 = -328						; size = 4
$T3 = -324						; size = 24
$T4 = -300						; size = 24
_sysPath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_fileName$ = 12						; size = 4
?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; GetServiceConfigPath, COMDAT

; 9078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00030	8b 7d 0c	 mov	 edi, DWORD PTR _fileName$[ebp]
  00033	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 9079 : 	char sysPath[GST_MAX_PATH];
; 9080 : 	
; 9081 : 	if (Is64BitOs())

  0003d	e8 00 00 00 00	 call	 _Is64BitOs
  00042	85 c0		 test	 eax, eax
  00044	74 27		 je	 SHORT $LN2@GetService

; 9082 : 	{
; 9083 : 		typedef UINT (WINAPI *GetSystemWow64Directory_t) (LPTSTR lpBuffer, UINT uSize);
; 9084 : 
; 9085 : 		GetSystemWow64Directory_t getSystemWow64Directory = (GetSystemWow64Directory_t) GetProcAddress (GetModuleHandle ("kernel32"), "GetSystemWow64DirectoryA");

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@FNCHKEAA@GetSystemWow64DirectoryA?$AA@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_08PNLNEKOB@kernel32?$AA@
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 9086 : 		getSystemWow64Directory (sysPath, sizeof (sysPath));

  0005d	68 04 01 00 00	 push	 260			; 00000104H
  00062	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _sysPath$[ebp]
  00068	51		 push	 ecx
  00069	ff d0		 call	 eax

; 9087 : 	}
; 9088 : 	else

  0006b	eb 12		 jmp	 SHORT $LN3@GetService
$LN2@GetService:

; 9089 : 		GetSystemDirectory (sysPath, sizeof (sysPath));

  0006d	68 04 01 00 00	 push	 260			; 00000104H
  00072	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _sysPath$[ebp]
  00078	50		 push	 eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
$LN3@GetService:

; 9090 : 
; 9091 : 	return string (sysPath) + "\\" + fileName;

  0007f	80 bd ec fe ff
	ff 00		 cmp	 BYTE PTR _sysPath$[ebp], 0
  00086	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH
  00090	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0
  0009a	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  000a1	75 04		 jne	 SHORT $LN119@GetService
  000a3	33 c9		 xor	 ecx, ecx
  000a5	eb 12		 jmp	 SHORT $LN120@GetService
$LN119@GetService:
  000a7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _sysPath$[ebp]
  000ad	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL323@GetService:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL323@GetService
  000b7	2b ca		 sub	 ecx, edx
$LN120@GetService:
  000b9	51		 push	 ecx
  000ba	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _sysPath$[ebp]
  000c0	50		 push	 eax
  000c1	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000c7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  000d1	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  000d7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000de	50		 push	 eax
  000df	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000eb	57		 push	 edi
  000ec	50		 push	 eax
  000ed	56		 push	 esi
  000ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f2	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000f7	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  000fd	83 c4 18	 add	 esp, 24			; 00000018H
  00100	83 f8 10	 cmp	 eax, 16			; 00000010H
  00103	72 13		 jb	 SHORT $LN127@GetService
  00105	40		 inc	 eax
  00106	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0010c	50		 push	 eax
  0010d	ff b5 bc fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  00113	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN127@GetService:
  00118	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+20]
  0011e	c7 85 d0 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
  00128	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  00132	c6 85 bc fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  00139	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0013c	72 13		 jb	 SHORT $LN324@GetService
  0013e	41		 inc	 ecx
  0013f	51		 push	 ecx
  00140	ff b5 d4 fe ff
	ff		 push	 DWORD PTR $T4[ebp]
  00146	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0014c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN324@GetService:
  00151	8b c6		 mov	 eax, esi

; 9092 : }

  00153	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00156	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015d	59		 pop	 ecx
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	33 cd		 xor	 ecx, ebp
  00165	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  0000b	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetServiceConfigPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; GetServiceConfigPath
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -308				; size = 4
_hwnd$GSCopy$1$ = -304					; size = 4
_hFont$GSCopy$1$ = -300					; size = 4
$T2 = -296						; size = 4
_rect$ = -292						; size = 16
_pathBuf$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_hwnd$ = 12						; size = 4
_hFont$ = 16						; size = 4
_width$ = 20						; size = 4
_path$ = 24						; size = 4
?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z PROC ; FitPathInGfxWidth, COMDAT

; 825  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00034	8b 45 10	 mov	 eax, DWORD PTR _hFont$[ebp]
  00037	8b 7d 18	 mov	 edi, DWORD PTR _path$[ebp]
  0003a	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 826  : 	string newPath;

  00044	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00052	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 b5 cc fe ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  00063	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _hwnd$GSCopy$1$[ebp], ecx
  00069	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _hFont$GSCopy$1$[ebp], eax
  0006f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00076	72 04		 jb	 SHORT $LN106@FitPathInG
  00078	8b 06		 mov	 eax, DWORD PTR [esi]
  0007a	eb 02		 jmp	 SHORT $LN107@FitPathInG
$LN106@FitPathInG:
  0007c	8b c6		 mov	 eax, esi
$LN107@FitPathInG:
  0007e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 844  : 	return newPath;

  00081	8b 45 14	 mov	 eax, DWORD PTR _width$[ebp]
  00084	51		 push	 ecx
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	c7 85 d8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T2[ebp], 1
  00096	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rect$[ebp], 0
  000a0	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _rect$[ebp+4], 0
  000aa	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _rect$[ebp+8], eax
  000b0	c7 85 e8 fe ff
	ff ff ff ff 7f	 mov	 DWORD PTR _rect$[ebp+12], 2147483647 ; 7fffffffH
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  000c0	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _hFont$GSCopy$1$[ebp]
  000c6	8b d8		 mov	 ebx, eax
  000c8	53		 push	 ebx
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  000cf	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  000d3	72 04		 jb	 SHORT $LN126@FitPathInG

; 827  : 
; 828  : 	RECT rect;
; 829  : 	rect.left = 0;
; 830  : 	rect.top = 0;
; 831  : 	rect.right = width;
; 832  : 	rect.bottom = LONG_MAX;
; 833  : 
; 834  : 	HDC hdc = GetDC (hwnd); 
; 835  : 	SelectObject (hdc, (HGDIOBJ) hFont);
; 836  : 
; 837  : 	char pathBuf[GST_MAX_PATH];
; 838  : 	strcpy_s (pathBuf, sizeof (pathBuf), path.c_str());

  000d5	8b 07		 mov	 eax, DWORD PTR [edi]
  000d7	eb 02		 jmp	 SHORT $LN127@FitPathInG
$LN126@FitPathInG:
  000d9	8b c7		 mov	 eax, edi
$LN127@FitPathInG:
  000db	50		 push	 eax
  000dc	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pathBuf$[ebp]
  000e2	68 04 01 00 00	 push	 260			; 00000104H
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 _strcpy_s
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 839  : 
; 840  : 	if (DrawText (hdc, pathBuf, path.size(), &rect, DT_CALCRECT | DT_MODIFYSTRING | DT_PATH_ELLIPSIS | DT_SINGLELINE) != 0)

  000f0	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _rect$[ebp]
  000f6	68 20 44 01 00	 push	 82976			; 00014420H
  000fb	50		 push	 eax
  000fc	ff 77 10	 push	 DWORD PTR [edi+16]
  000ff	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pathBuf$[ebp]
  00105	50		 push	 eax
  00106	53		 push	 ebx
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawTextA@20
  0010d	85 c0		 test	 eax, eax
  0010f	74 2e		 je	 SHORT $LN2@FitPathInG

; 841  : 		newPath = pathBuf;

  00111	80 bd ec fe ff
	ff 00		 cmp	 BYTE PTR _pathBuf$[ebp], 0
  00118	75 04		 jne	 SHORT $LN148@FitPathInG
  0011a	33 c9		 xor	 ecx, ecx
  0011c	eb 12		 jmp	 SHORT $LN149@FitPathInG
$LN148@FitPathInG:
  0011e	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pathBuf$[ebp]
  00124	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL150@FitPathInG:
  00127	8a 01		 mov	 al, BYTE PTR [ecx]
  00129	41		 inc	 ecx
  0012a	84 c0		 test	 al, al
  0012c	75 f9		 jne	 SHORT $LL150@FitPathInG
  0012e	2b ca		 sub	 ecx, edx
$LN149@FitPathInG:
  00130	51		 push	 ecx
  00131	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pathBuf$[ebp]
  00137	8b ce		 mov	 ecx, esi
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@FitPathInG:

; 842  : 
; 843  : 	ReleaseDC (hwnd, hdc); 

  0013f	53		 push	 ebx
  00140	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _hwnd$GSCopy$1$[ebp]
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 844  : 	return newPath;

  0014c	8b c6		 mov	 eax, esi

; 845  : }

  0014e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00151	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00158	59		 pop	 ecx
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	33 cd		 xor	 ecx, ebp
  00161	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z$0:
  00000	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN5@FitPathInG
  0000f	83 a5 d8 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@FitPathInG:
  00021	c3		 ret	 0
__ehhandler$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z:
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FitPathInGfxWidth@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUHWND__@@PAUHFONT__@@JABV12@@Z ENDP ; FitPathInGfxWidth
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_s$2 = -868						; size = 176
_s$3 = -692						; size = 176
___$ReturnUdt$GSCopy$ = -516				; size = 4
_hkey$ = -512						; size = 4
_productNameSize$ = -508				; size = 4
_this$4 = -504						; size = 4
_this$ = -504						; size = 4
_this$5 = -504						; size = 4
_this$ = -504						; size = 4
$T6 = -500						; size = 4
_osVer$ = -496						; size = 156
$T7 = -340						; size = 24
$T8 = -340						; size = 24
_productName$ = -316					; size = 300
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; GetWindowsEdition, COMDAT

; 10187: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 58 03 00
	00		 sub	 esp, 856		; 00000358H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	89 b5 fc fd ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi

; 10188: 	string osname = "win";

  00048	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00068	72 04		 jb	 SHORT $LN147@GetWindows
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	eb 02		 jmp	 SHORT $LN148@GetWindows
$LN147@GetWindows:
  0006e	8b c6		 mov	 eax, esi
$LN148@GetWindows:
  00070	6a 03		 push	 3
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_03JECLAOEA@win?$AA@
  00077	8b ce		 mov	 ecx, esi
  00079	c6 00 00	 mov	 BYTE PTR [eax], 0
  0007c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 10282: 
; 10283: 	return osname;

  00081	b8 01 00 00 00	 mov	 eax, 1
  00086	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008d	89 85 0c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00093	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR _osVer$[ebp]
  00099	50		 push	 eax
  0009a	c7 85 10 fe ff
	ff 9c 00 00 00	 mov	 DWORD PTR _osVer$[ebp], 156 ; 0000009cH
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  000aa	8b bd a8 fe ff
	ff		 mov	 edi, DWORD PTR _osVer$[ebp+152]
  000b0	8a 85 aa fe ff
	ff		 mov	 al, BYTE PTR _osVer$[ebp+154]
  000b6	81 e7 00 02 00
	00		 and	 edi, 512		; 00000200H
  000bc	3c 03		 cmp	 al, 3
  000be	74 08		 je	 SHORT $LN36@GetWindows

; 10189: 
; 10190: 	OSVERSIONINFOEXA osVer;
; 10191: 	osVer.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEXA);
; 10192: 	GetVersionExA ((LPOSVERSIONINFOA) &osVer);
; 10193: 
; 10194: 	BOOL home = (osVer.wSuiteMask & VER_SUITE_PERSONAL);
; 10195: 	BOOL server = (osVer.wProductType == VER_NT_SERVER || osVer.wProductType == VER_NT_DOMAIN_CONTROLLER);

  000c0	3c 02		 cmp	 al, 2
  000c2	74 04		 je	 SHORT $LN36@GetWindows
  000c4	33 db		 xor	 ebx, ebx
  000c6	eb 05		 jmp	 SHORT $LN37@GetWindows
$LN36@GetWindows:
  000c8	bb 01 00 00 00	 mov	 ebx, 1
$LN37@GetWindows:
  000cd	68 2c 01 00 00	 push	 300			; 0000012cH
  000d2	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  000d8	6a 00		 push	 0
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _memset
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10196: 
; 10197: 	HKEY hkey;
; 10198: 	char productName[300] = {0};
; 10199: 	DWORD productNameSize = sizeof (productName);

  000e3	c7 85 04 fe ff
	ff 2c 01 00 00	 mov	 DWORD PTR _productNameSize$[ebp], 300 ; 0000012cH

; 10200: 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", 0, KEY_QUERY_VALUE, &hkey) == ERROR_SUCCESS)

  000ed	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR _hkey$[ebp]
  000f3	50		 push	 eax
  000f4	6a 01		 push	 1
  000f6	6a 00		 push	 0
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LCMFDIEF@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@
  000fd	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00108	85 c0		 test	 eax, eax
  0010a	75 43		 jne	 SHORT $LN4@GetWindows

; 10201: 	{
; 10202: 		if (RegQueryValueEx (hkey, "ProductName", 0, 0, (LPBYTE) &productName, &productNameSize) != ERROR_SUCCESS || productNameSize < 1)

  0010c	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _productNameSize$[ebp]
  00112	50		 push	 eax
  00113	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  00119	50		 push	 eax
  0011a	6a 00		 push	 0
  0011c	6a 00		 push	 0
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MNPNDAHP@ProductName?$AA@
  00123	ff b5 00 fe ff
	ff		 push	 DWORD PTR _hkey$[ebp]
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0012f	85 c0		 test	 eax, eax
  00131	75 09		 jne	 SHORT $LN6@GetWindows
  00133	83 bd 04 fe ff
	ff 01		 cmp	 DWORD PTR _productNameSize$[ebp], 1
  0013a	73 07		 jae	 SHORT $LN5@GetWindows
$LN6@GetWindows:

; 10203: 			productName[0] = 0;

  0013c	c6 85 c4 fe ff
	ff 00		 mov	 BYTE PTR _productName$[ebp], 0
$LN5@GetWindows:

; 10204: 
; 10205: 		RegCloseKey (hkey);

  00143	ff b5 00 fe ff
	ff		 push	 DWORD PTR _hkey$[ebp]
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN4@GetWindows:

; 10206: 	}
; 10207: 
; 10208: 	switch (nCurrentOS)

  0014f	a1 00 00 00 00	 mov	 eax, DWORD PTR _nCurrentOS
  00154	83 c0 f9	 add	 eax, -7			; fffffff9H
  00157	83 f8 07	 cmp	 eax, 7
  0015a	0f 87 95 00 00
	00		 ja	 $LN14@GetWindows
  00160	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN611@GetWindows[eax*4]
$LN7@GetWindows:

; 10209: 	{
; 10210: 	case WIN_2000:
; 10211: 		osname += "2000";

  00167	68 00 00 00 00	 push	 OFFSET ??_C@_04OJDKMIMG@2000?$AA@
  0016c	8b ce		 mov	 ecx, esi
  0016e	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10212: 		break;

  00173	e9 31 02 00 00	 jmp	 $LN2@GetWindows
$LN8@GetWindows:

; 10213: 
; 10214: 	case WIN_XP:
; 10215: 	case WIN_XP64:
; 10216: 		osname += "xp";

  00178	68 00 00 00 00	 push	 OFFSET ??_C@_02HFGDGGPD@xp?$AA@
  0017d	8b ce		 mov	 ecx, esi
  0017f	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00184	85 ff		 test	 edi, edi

; 10217: 		osname += home ? "-home" : "-pro";

  00186	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04NOKDIIJN@?9pro?$AA@
  0018b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05GHINFEPM@?9home?$AA@
  00190	0f 44 c1	 cmove	 eax, ecx
  00193	8b ce		 mov	 ecx, esi
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10218: 		break;

  0019b	e9 09 02 00 00	 jmp	 $LN2@GetWindows
$LN9@GetWindows:

; 10219: 
; 10220: 	case WIN_SERVER_2003:
; 10221: 		osname += "2003";

  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_04MCBHJLAF@2003?$AA@
  001a5	8b ce		 mov	 ecx, esi
  001a7	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10222: 		break;

  001ac	e9 f8 01 00 00	 jmp	 $LN2@GetWindows
$LN10@GetWindows:

; 10223: 
; 10224: 	case WIN_VISTA:
; 10225: 		osname += "vista";

  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_05FBPADAKE@vista?$AA@
  001b6	8b ce		 mov	 ecx, esi
  001b8	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10226: 		break;

  001bd	e9 e7 01 00 00	 jmp	 $LN2@GetWindows
$LN11@GetWindows:

; 10227: 
; 10228: 	case WIN_SERVER_2008:
; 10229: 		osname += "2008";

  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_04CBODECMO@2008?$AA@
  001c7	8b ce		 mov	 ecx, esi
  001c9	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10230: 		break;

  001ce	e9 d6 01 00 00	 jmp	 $LN2@GetWindows
$LN12@GetWindows:

; 10231: 
; 10232: 	case WIN_7:
; 10233: 		osname += "7";

  001d3	68 00 00 00 00	 push	 OFFSET ??_C@_01COCBENDE@7?$AA@
  001d8	8b ce		 mov	 ecx, esi
  001da	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10234: 		break;

  001df	e9 c5 01 00 00	 jmp	 $LN2@GetWindows
$LN13@GetWindows:

; 10235: 
; 10236: 	case WIN_SERVER_2008_R2:
; 10237: 		osname += "2008r2";

  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_06HHKOBDNA@2008r2?$AA@
  001e9	8b ce		 mov	 ecx, esi
  001eb	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 10238: 		break;

  001f0	e9 b4 01 00 00	 jmp	 $LN2@GetWindows
$LN14@GetWindows:

; 10239: 
; 10240: 	default:
; 10241: 		stringstream s;

  001f5	c7 85 4c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  001ff	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00209	b8 03 00 00 00	 mov	 eax, 3
  0020e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00215	89 85 0c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  0021b	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp+104]
  00221	6a 00		 push	 0
  00223	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _s$3[ebp+24]
  00229	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp+104], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00233	0f 57 c0	 xorps	 xmm0, xmm0
  00236	c7 85 b0 fd ff
	ff 50 00 00 00	 mov	 DWORD PTR _s$3[ebp+100], 80 ; 00000050H
  00240	50		 push	 eax
  00241	66 0f 13 85 54
	fd ff ff	 movlpd	 QWORD PTR _s$3[ebp+8], xmm0
  00249	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
  0024e	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR _s$3[ebp+16]
  00254	89 85 08 fe ff
	ff		 mov	 DWORD PTR _this$5[ebp], eax
  0025a	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _s$3[ebp+16]
  00260	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00263	c7 84 05 5c fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR _s$3[ebp+eax+16], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0026e	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR _s$3[ebp+16]
  00274	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00277	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0027a	89 84 0d 58 fd
	ff ff		 mov	 DWORD PTR _s$3[ebp+ecx+12], eax
  00281	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _s$3[ebp]
  00287	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0028a	c7 84 05 4c fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR _s$3[ebp+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00295	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _s$3[ebp]
  0029b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0029e	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  002a1	89 84 0d 48 fd
	ff ff		 mov	 DWORD PTR _s$3[ebp+ecx-4], eax
  002a8	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _s$3[ebp]
  002ae	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  002b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002b8	c7 84 05 4c fd
	ff ff 00 00 00
	00		 mov	 DWORD PTR _s$3[ebp+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  002c3	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR _s$3[ebp]
  002c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002cc	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  002cf	89 84 0d 48 fd
	ff ff		 mov	 DWORD PTR _s$3[ebp+ecx-4], eax
  002d6	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _s$3[ebp+24]
  002dc	8b c8		 mov	 ecx, eax
  002de	89 85 08 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
  002e4	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  002e9	c7 85 64 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp+24], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  002f3	c7 85 9c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp+80], 0
  002fd	c7 85 a0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp+84], 0

; 10242: 		s << CurrentOSMajor << "." << CurrentOSMinor;

  00307	ff 35 00 00 00
	00		 push	 DWORD PTR _CurrentOSMinor
  0030d	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp+16]
  00313	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  0031f	ff 35 00 00 00
	00		 push	 DWORD PTR _CurrentOSMajor
  00325	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00330	83 c4 08	 add	 esp, 8
  00333	8b c8		 mov	 ecx, eax
  00335	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 10243: 		osname += s.str();

  0033a	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00340	50		 push	 eax
  00341	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp]
  00347	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0034c	6a ff		 push	 -1
  0034e	6a 00		 push	 0
  00350	50		 push	 eax
  00351	8b ce		 mov	 ecx, esi
  00353	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00357	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0035c	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR $T8[ebp+20]
  00362	83 f8 10	 cmp	 eax, 16			; 00000010H
  00365	72 13		 jb	 SHORT $LN245@GetWindows
  00367	40		 inc	 eax
  00368	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0036e	50		 push	 eax
  0036f	ff b5 ac fe ff
	ff		 push	 DWORD PTR $T8[ebp]
  00375	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN245@GetWindows:

; 10244: 		break;

  0037a	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp+104]
  00380	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00385	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _s$3[ebp+104]
  0038b	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00392	50		 push	 eax
  00393	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$3[ebp+104], OFFSET ??_7ios_base@std@@6B@
  0039d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  003a2	83 c4 04	 add	 esp, 4
  003a5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
$LN2@GetWindows:
  003a9	85 db		 test	 ebx, ebx

; 10245: 	}
; 10246: 
; 10247: 	if (server)

  003ab	74 0e		 je	 SHORT $LN15@GetWindows

; 10248: 		osname += "-server";

  003ad	6a 07		 push	 7
  003af	68 00 00 00 00	 push	 OFFSET ??_C@_07ODEEFNBO@?9server?$AA@
  003b4	8b ce		 mov	 ecx, esi
  003b6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN15@GetWindows:

; 10249: 
; 10250: 	if (IsOSAtLeast (WIN_VISTA))

  003bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  003c0	85 c0		 test	 eax, eax
  003c2	7f 0c		 jg	 SHORT $LN362@GetWindows
  003c4	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  003cb	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN362@GetWindows:
  003d0	c1 e0 08	 shl	 eax, 8
  003d3	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  003d9	c1 e0 08	 shl	 eax, 8
  003dc	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  003e2	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  003e7	0f 8c d9 00 00
	00		 jl	 $LN29@GetWindows
  003ed	85 ff		 test	 edi, edi

; 10251: 	{	
; 10252: 		if (home)

  003ef	74 13		 je	 SHORT $LN17@GetWindows

; 10253: 			osname += "-home";

  003f1	6a 05		 push	 5
  003f3	68 00 00 00 00	 push	 OFFSET ??_C@_05GHINFEPM@?9home?$AA@
  003f8	8b ce		 mov	 ecx, esi
  003fa	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 10254: 		else if (strstr (productName, "Standard") != 0)

  003ff	e9 c2 00 00 00	 jmp	 $LN29@GetWindows
$LN17@GetWindows:
  00404	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_08NMMAHDIF@Standard?$AA@
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 _strstr
  00415	83 c4 08	 add	 esp, 8
  00418	85 c0		 test	 eax, eax
  0041a	74 0a		 je	 SHORT $LN19@GetWindows

; 10255: 			osname += "-standard";

  0041c	68 00 00 00 00	 push	 OFFSET ??_C@_09OBBBAFJO@?9standard?$AA@

; 10256: 		else if (strstr (productName, "Professional") != 0)

  00421	e9 99 00 00 00	 jmp	 $LN609@GetWindows
$LN19@GetWindows:
  00426	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  0042c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KIDDKEAC@Professional?$AA@
  00431	50		 push	 eax
  00432	e8 00 00 00 00	 call	 _strstr
  00437	83 c4 08	 add	 esp, 8
  0043a	85 c0		 test	 eax, eax
  0043c	74 07		 je	 SHORT $LN21@GetWindows

; 10257: 			osname += "-pro";

  0043e	68 00 00 00 00	 push	 OFFSET ??_C@_04NOKDIIJN@?9pro?$AA@

; 10258: 		else if (strstr (productName, "Business") != 0)

  00443	eb 7a		 jmp	 SHORT $LN609@GetWindows
$LN21@GetWindows:
  00445	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  0044b	68 00 00 00 00	 push	 OFFSET ??_C@_08IHAGPJCB@Business?$AA@
  00450	50		 push	 eax
  00451	e8 00 00 00 00	 call	 _strstr
  00456	83 c4 08	 add	 esp, 8
  00459	85 c0		 test	 eax, eax
  0045b	74 07		 je	 SHORT $LN23@GetWindows

; 10259: 			osname += "-business";

  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_09LKNHIPDK@?9business?$AA@

; 10260: 		else if (strstr (productName, "Enterprise") != 0)

  00462	eb 5b		 jmp	 SHORT $LN609@GetWindows
$LN23@GetWindows:
  00464	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DCNJHNHF@Enterprise?$AA@
  0046f	50		 push	 eax
  00470	e8 00 00 00 00	 call	 _strstr
  00475	83 c4 08	 add	 esp, 8
  00478	85 c0		 test	 eax, eax
  0047a	74 07		 je	 SHORT $LN25@GetWindows

; 10261: 			osname += "-enterprise";

  0047c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CCIJFPDH@?9enterprise?$AA@

; 10262: 		else if (strstr (productName, "Datacenter") != 0)

  00481	eb 3c		 jmp	 SHORT $LN609@GetWindows
$LN25@GetWindows:
  00483	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  00489	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OOPFNAF@Datacenter?$AA@
  0048e	50		 push	 eax
  0048f	e8 00 00 00 00	 call	 _strstr
  00494	83 c4 08	 add	 esp, 8
  00497	85 c0		 test	 eax, eax
  00499	74 07		 je	 SHORT $LN27@GetWindows

; 10263: 			osname += "-datacenter";

  0049b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BOLPHPEH@?9datacenter?$AA@

; 10264: 		else if (strstr (productName, "Ultimate") != 0)

  004a0	eb 1d		 jmp	 SHORT $LN609@GetWindows
$LN27@GetWindows:
  004a2	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_08DIOBIMMC@Ultimate?$AA@
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 _strstr
  004b3	83 c4 08	 add	 esp, 8
  004b6	85 c0		 test	 eax, eax
  004b8	74 0c		 je	 SHORT $LN29@GetWindows

; 10265: 			osname += "-ultimate";

  004ba	68 00 00 00 00	 push	 OFFSET ??_C@_09FDAPKNJ@?9ultimate?$AA@
$LN609@GetWindows:
  004bf	8b ce		 mov	 ecx, esi
  004c1	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
$LN29@GetWindows:

; 10266: 	}
; 10267: 
; 10268: 	if (GetSystemMetrics (SM_STARTER))

  004c6	6a 58		 push	 88			; 00000058H
  004c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  004ce	85 c0		 test	 eax, eax
  004d0	74 09		 je	 SHORT $LN30@GetWindows

; 10269: 		osname += "-starter";

  004d2	6a 08		 push	 8
  004d4	68 00 00 00 00	 push	 OFFSET ??_C@_08KHECKGMK@?9starter?$AA@

; 10270: 	else if (strstr (productName, "Basic") != 0)

  004d9	eb 1f		 jmp	 SHORT $LN610@GetWindows
$LN30@GetWindows:
  004db	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _productName$[ebp]
  004e1	68 00 00 00 00	 push	 OFFSET ??_C@_05NIKDGMHP@Basic?$AA@
  004e6	50		 push	 eax
  004e7	e8 00 00 00 00	 call	 _strstr
  004ec	83 c4 08	 add	 esp, 8
  004ef	85 c0		 test	 eax, eax
  004f1	74 0e		 je	 SHORT $LN32@GetWindows

; 10271: 		osname += "-basic";

  004f3	6a 06		 push	 6
  004f5	68 00 00 00 00	 push	 OFFSET ??_C@_06FNMLEPMI@?9basic?$AA@
$LN610@GetWindows:
  004fa	8b ce		 mov	 ecx, esi
  004fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN32@GetWindows:

; 10272: 
; 10273: 	if (Is64BitOs())

  00501	e8 00 00 00 00	 call	 _Is64BitOs
  00506	85 c0		 test	 eax, eax
  00508	74 0e		 je	 SHORT $LN33@GetWindows

; 10274: 		osname += "-x64";

  0050a	6a 04		 push	 4
  0050c	68 00 00 00 00	 push	 OFFSET ??_C@_04DFMLABPB@?9x64?$AA@
  00511	8b ce		 mov	 ecx, esi
  00513	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN33@GetWindows:

; 10275: 
; 10276: 	if (CurrentOSServicePack > 0)

  00518	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CurrentOSServicePack, 0
  0051f	0f 8e a1 01 00
	00		 jle	 $LN607@GetWindows

; 10277: 	{
; 10278: 		stringstream s;

  00525	c7 85 9c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0052f	c7 85 ac fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00539	83 8d 0c fe ff
	ff 20		 or	 DWORD PTR $T6[ebp], 32	; 00000020H
  00540	8d 85 b4 fc ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp+24]
  00546	6a 00		 push	 0
  00548	0f 57 c0	 xorps	 xmm0, xmm0
  0054b	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00552	50		 push	 eax
  00553	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp+104]
  00559	c7 85 04 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp+104], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00563	c7 85 00 fd ff
	ff 50 00 00 00	 mov	 DWORD PTR _s$2[ebp+100], 80 ; 00000050H
  0056d	66 0f 13 85 a4
	fc ff ff	 movlpd	 QWORD PTR _s$2[ebp+8], xmm0
  00575	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
  0057a	8d 85 ac fc ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp+16]
  00580	89 85 08 fe ff
	ff		 mov	 DWORD PTR _this$4[ebp], eax
  00586	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR _s$2[ebp+16]
  0058c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0058f	c7 84 05 ac fc
	ff ff 00 00 00
	00		 mov	 DWORD PTR _s$2[ebp+eax+16], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0059a	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR _s$2[ebp+16]
  005a0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005a3	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  005a6	89 84 0d a8 fc
	ff ff		 mov	 DWORD PTR _s$2[ebp+ecx+12], eax
  005ad	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _s$2[ebp]
  005b3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005b6	c7 84 05 9c fc
	ff ff 00 00 00
	00		 mov	 DWORD PTR _s$2[ebp+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  005c1	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _s$2[ebp]
  005c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005ca	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  005cd	89 84 0d 98 fc
	ff ff		 mov	 DWORD PTR _s$2[ebp+ecx-4], eax
  005d4	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _s$2[ebp]
  005da	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H
  005e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005e4	c7 84 05 9c fc
	ff ff 00 00 00
	00		 mov	 DWORD PTR _s$2[ebp+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  005ef	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _s$2[ebp]
  005f5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005f8	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  005fb	89 84 0d 98 fc
	ff ff		 mov	 DWORD PTR _s$2[ebp+ecx-4], eax
  00602	8d 85 b4 fc ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp+24]
  00608	8b c8		 mov	 ecx, eax
  0060a	89 85 08 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
  00610	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00615	c7 85 b4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp+24], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0061f	c7 85 ec fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp+80], 0
  00629	c7 85 f0 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp+84], 0

; 10279: 		s << "-sp" << CurrentOSServicePack;

  00633	ff 35 00 00 00
	00		 push	 DWORD PTR _CurrentOSServicePack
  00639	8d 85 ac fc ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp+16]
  0063f	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00646	68 00 00 00 00	 push	 OFFSET ??_C@_03PFGLPIPP@?9sp?$AA@
  0064b	50		 push	 eax
  0064c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00651	83 c4 08	 add	 esp, 8
  00654	8b c8		 mov	 ecx, eax
  00656	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 10280: 		osname += s.str();

  0065b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00661	50		 push	 eax
  00662	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp]
  00668	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0066d	6a ff		 push	 -1
  0066f	6a 00		 push	 0
  00671	50		 push	 eax
  00672	8b ce		 mov	 ecx, esi
  00674	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  00678	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0067d	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp+20]
  00683	83 f8 10	 cmp	 eax, 16			; 00000010H
  00686	72 13		 jb	 SHORT $LN501@GetWindows
  00688	40		 inc	 eax
  00689	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0068f	50		 push	 eax
  00690	ff b5 ac fe ff
	ff		 push	 DWORD PTR $T7[ebp]
  00696	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN501@GetWindows:

; 10281: 	}

  0069b	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp+104]
  006a1	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  006a6	8d 85 04 fd ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp+104]
  006ac	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 20 ; 00000014H
  006b3	50		 push	 eax
  006b4	c7 85 04 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _s$2[ebp+104], OFFSET ??_7ios_base@std@@6B@
  006be	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  006c3	83 c4 04	 add	 esp, 4
$LN607@GetWindows:

; 10282: 
; 10283: 	return osname;

  006c6	8b c6		 mov	 eax, esi

; 10284: }

  006c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006d2	59		 pop	 ecx
  006d3	5f		 pop	 edi
  006d4	5e		 pop	 esi
  006d5	5b		 pop	 ebx
  006d6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006d9	33 cd		 xor	 ecx, ebp
  006db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006e0	8b e5		 mov	 esp, ebp
  006e2	5d		 pop	 ebp
  006e3	c3		 ret	 0
$LN611@GetWindows:
  006e4	00 00 00 00	 DD	 $LN7@GetWindows
  006e8	00 00 00 00	 DD	 $LN8@GetWindows
  006ec	00 00 00 00	 DD	 $LN8@GetWindows
  006f0	00 00 00 00	 DD	 $LN9@GetWindows
  006f4	00 00 00 00	 DD	 $LN10@GetWindows
  006f8	00 00 00 00	 DD	 $LN11@GetWindows
  006fc	00 00 00 00	 DD	 $LN12@GetWindows
  00700	00 00 00 00	 DD	 $LN13@GetWindows
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN43@GetWindows
  0000f	83 a5 0c fe ff
	ff fe		 and	 DWORD PTR $T6[ebp], -2	; fffffffeH
  00016	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN43@GetWindows:
  00021	c3		 ret	 0
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$31:
  00022	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00028	83 e0 02	 and	 eax, 2
  0002b	0f 84 12 00 00
	00		 je	 $LN164@GetWindows
  00031	83 a5 0c fe ff
	ff fd		 and	 DWORD PTR $T6[ebp], -3	; fffffffdH
  00038	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp+104]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN164@GetWindows:
  00043	c3		 ret	 0
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$35:
  00044	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp+24]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$32:
  0004f	8d 8d 6c fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp+32]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$39:
  0005a	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00065	8d 8d 4c fd ff
	ff		 lea	 ecx, DWORD PTR _s$3[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00070	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$70:
  0007b	e8 00 00 00 00	 call	 ___std_terminate
  00080	c3		 ret	 0
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$71:
  00081	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00087	83 e0 20	 and	 eax, 32			; 00000020H
  0008a	0f 84 12 00 00
	00		 je	 $LN420@GetWindows
  00090	83 a5 0c fe ff
	ff df		 and	 DWORD PTR $T6[ebp], -33	; ffffffdfH
  00097	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp+104]
  0009d	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN420@GetWindows:
  000a2	c3		 ret	 0
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$75:
  000a3	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp+24]
  000a9	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$72:
  000ae	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp+32]
  000b4	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$79:
  000b9	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
  000c4	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp]
  000ca	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$4:
  000cf	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000d5	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$110:
  000da	e8 00 00 00 00	 call	 ___std_terminate
  000df	c3		 ret	 0
__ehhandler$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  000e0	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000e4	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000e7	8b 8a 98 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-872]
  000ed	33 c8		 xor	 ecx, eax
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000f7	33 c8		 xor	 ecx, eax
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00103	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; GetWindowsEdition
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z
_TEXT	SEGMENT
$T1 = -16392						; size = 4
_szTmp$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_hwndDlg$ = 12						; size = 4
?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z PROC ; GetWrongPasswordErrorMessage, COMDAT

; 4732 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 08 40 00 00	 mov	 eax, 16392		; 00004008H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4733 : 	WCHAR szTmp[8192];
; 4734 : 
; 4735 : 	swprintf (szTmp, GetString (KeyFilesEnable ? "PASSWORD_OR_KEYFILE_WRONG" : "PASSWORD_WRONG"));

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _KeyFilesEnable, 0
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0P@MKGPOAFK@PASSWORD_WRONG?$AA@
  00023	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BK@LAEGKAMJ@PASSWORD_OR_KEYFILE_WRONG?$AA@
  00028	c7 85 f8 bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  00032	53		 push	 ebx
  00033	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00036	0f 44 c1	 cmove	 eax, ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _GetString
  0003f	50		 push	 eax
  00040	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4736 : 	if (CheckCapsLock (hwndDlg, TRUE))

  0004f	6a 14		 push	 20			; 00000014H
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  00057	a8 01		 test	 al, 1
  00059	74 47		 je	 SHORT $LN2@GetWrongPa

; 4737 : 		wcscat (szTmp, GetString ("PASSWORD_WRONG_CAPSLOCK_ON"));

  0005b	56		 push	 esi
  0005c	57		 push	 edi
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JMLKAJFL@PASSWORD_WRONG_CAPSLOCK_ON?$AA@
  00062	e8 00 00 00 00	 call	 _GetString
  00067	8b d0		 mov	 edx, eax
  00069	83 c4 04	 add	 esp, 4
  0006c	8b f2		 mov	 esi, edx
  0006e	66 90		 npad	 2
$LL125@GetWrongPa:
  00070	66 8b 02	 mov	 ax, WORD PTR [edx]
  00073	83 c2 02	 add	 edx, 2
  00076	66 85 c0	 test	 ax, ax
  00079	75 f5		 jne	 SHORT $LL125@GetWrongPa
  0007b	8d bd fc bf ff
	ff		 lea	 edi, DWORD PTR _szTmp$[ebp]
  00081	2b d6		 sub	 edx, esi
  00083	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL126@GetWrongPa:
  00086	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  0008a	83 c7 02	 add	 edi, 2
  0008d	66 85 c0	 test	 ax, ax
  00090	75 f4		 jne	 SHORT $LL126@GetWrongPa
  00092	8b ca		 mov	 ecx, edx
  00094	c1 e9 02	 shr	 ecx, 2
  00097	f3 a5		 rep movsd
  00099	8b ca		 mov	 ecx, edx
  0009b	83 e1 03	 and	 ecx, 3
  0009e	f3 a4		 rep movsb
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
$LN2@GetWrongPa:

; 4738 : 
; 4739 : #ifdef GSTMOUNT
; 4740 : 	if (GSTBootLoaderOnInactiveSysEncDrive ())
; 4741 : 	{
; 4742 : 		swprintf (szTmp, GetString (KeyFilesEnable ? "PASSWORD_OR_KEYFILE_OR_MODE_WRONG" : "PASSWORD_OR_MODE_WRONG"));
; 4743 : 
; 4744 : 		if (CheckCapsLock (hwndDlg, TRUE))
; 4745 : 			wcscat (szTmp, GetString ("PASSWORD_WRONG_CAPSLOCK_ON"));
; 4746 : 
; 4747 : 		wcscat (szTmp, GetString ("SYSENC_MOUNT_WITHOUT_PBA_NOTE"));
; 4748 : 	}
; 4749 : #endif
; 4750 : 
; 4751 : 	wstring msg = szTmp;

  000a2	33 c0		 xor	 eax, eax
  000a4	c7 43 14 07 00
	00 00		 mov	 DWORD PTR [ebx+20], 7
  000ab	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  000b2	66 89 03	 mov	 WORD PTR [ebx], ax
  000b5	66 39 85 fc bf
	ff ff		 cmp	 WORD PTR _szTmp$[ebp], ax
  000bc	75 04		 jne	 SHORT $LN122@GetWrongPa
  000be	33 c9		 xor	 ecx, ecx
  000c0	eb 1d		 jmp	 SHORT $LN123@GetWrongPa
$LN122@GetWrongPa:
  000c2	8d 8d fc bf ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  000c8	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  000cb	0f 1f 44 00 00	 npad	 5
$LL127@GetWrongPa:
  000d0	66 8b 01	 mov	 ax, WORD PTR [ecx]
  000d3	83 c1 02	 add	 ecx, 2
  000d6	66 85 c0	 test	 ax, ax
  000d9	75 f5		 jne	 SHORT $LL127@GetWrongPa
  000db	2b ca		 sub	 ecx, edx
  000dd	d1 f9		 sar	 ecx, 1
$LN123@GetWrongPa:
  000df	51		 push	 ecx
  000e0	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  000e6	8b cb		 mov	 ecx, ebx
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 4752 : 
; 4753 : #ifdef GSTMOUNT
; 4754 : 	if (KeyFilesEnable && HiddenFilesPresentInKeyfilePath)
; 4755 : 	{
; 4756 : 		msg += GetString ("HIDDEN_FILES_PRESENT_IN_KEYFILE_PATH");
; 4757 : 		HiddenFilesPresentInKeyfilePath = FALSE;
; 4758 : 	}
; 4759 : #endif
; 4760 : 
; 4761 : 	return msg;
; 4762 : }

  000ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f1	8b c3		 mov	 eax, ebx
  000f3	33 cd		 xor	 ecx, ebp
  000f5	5b		 pop	 ebx
  000f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z ENDP ; GetWrongPasswordErrorMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -68				; size = 4
tv1356 = -64						; size = 4
$T2 = -60						; size = 4
_$S1$3 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; ToUpperCase, COMDAT

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00031	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00038	89 7d bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi

; 379  : 	string u;

  0003b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00042	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00049	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00050	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00054	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0005b	72 04		 jb	 SHORT $LN114@ToUpperCas
  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
  0005f	eb 02		 jmp	 SHORT $LN115@ToUpperCas
$LN114@ToUpperCas:
  00061	8b c7		 mov	 eax, edi
$LN115@ToUpperCas:
  00063	c6 00 00	 mov	 BYTE PTR [eax], 0

; 384  : 
; 385  : 	return u;

  00066	51		 push	 ecx
  00067	8d 45 c8	 lea	 eax, DWORD PTR _$S1$3[ebp]
  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00071	50		 push	 eax
  00072	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00079	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0007e	83 c4 08	 add	 esp, 8
  00081	8b 45 c8	 mov	 eax, DWORD PTR _$S1$3[ebp]
  00084	8d 4d c8	 lea	 ecx, DWORD PTR _$S1$3[ebp]
  00087	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	ff d0		 call	 eax
  00093	84 c0		 test	 al, al
  00095	0f 84 d4 00 00
	00		 je	 $LN543@ToUpperCas
  0009b	0f 1f 44 00 00	 npad	 5
$LL4@ToUpperCas:

; 380  : 	foreach (char c, str)

  000a0	8b 45 ec	 mov	 eax, DWORD PTR _$S1$3[ebp+36]
  000a3	8a 08		 mov	 cl, BYTE PTR [eax]
  000a5	33 c0		 xor	 eax, eax
  000a7	38 45 cd	 cmp	 BYTE PTR _$S1$3[ebp+5], al
  000aa	0f 94 c0	 sete	 al
  000ad	88 45 cd	 mov	 BYTE PTR _$S1$3[ebp+5], al
  000b0	84 c0		 test	 al, al
  000b2	0f 84 9b 00 00
	00		 je	 $LN2@ToUpperCas
  000b8	0f be c1	 movsx	 eax, cl
  000bb	89 45 c0	 mov	 DWORD PTR tv1356[ebp], eax
  000be	66 90		 npad	 2
$LL7@ToUpperCas:

; 381  : 	{
; 382  : 		u += (char) toupper (c);

  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _toupper
  000c6	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000c9	8a d8		 mov	 bl, al
  000cb	8b c1		 mov	 eax, ecx
  000cd	83 c4 04	 add	 esp, 4
  000d0	f7 d0		 not	 eax
  000d2	83 f8 01	 cmp	 eax, 1
  000d5	0f 86 b1 00 00
	00		 jbe	 $LN536@ToUpperCas
  000db	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  000de	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000e1	0f 87 a5 00 00
	00		 ja	 $LN536@ToUpperCas
  000e7	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  000ea	73 1a		 jae	 SHORT $LN162@ToUpperCas
  000ec	51		 push	 ecx
  000ed	56		 push	 esi
  000ee	8b cf		 mov	 ecx, edi
  000f0	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  000f5	85 f6		 test	 esi, esi
  000f7	74 40		 je	 SHORT $LN405@ToUpperCas
$LN547@ToUpperCas:
  000f9	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  000fd	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00100	72 1f		 jb	 SHORT $LN367@ToUpperCas
  00102	8b 07		 mov	 eax, DWORD PTR [edi]
  00104	eb 1d		 jmp	 SHORT $LN368@ToUpperCas
$LN162@ToUpperCas:
  00106	85 f6		 test	 esi, esi
  00108	75 ef		 jne	 SHORT $LN547@ToUpperCas
  0010a	89 77 10	 mov	 DWORD PTR [edi+16], esi
  0010d	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00111	72 07		 jb	 SHORT $LN337@ToUpperCas
  00113	8b 07		 mov	 eax, DWORD PTR [edi]
  00115	c6 00 00	 mov	 BYTE PTR [eax], 0
  00118	eb 1f		 jmp	 SHORT $LN405@ToUpperCas
$LN337@ToUpperCas:
  0011a	8b c7		 mov	 eax, edi
  0011c	c6 00 00	 mov	 BYTE PTR [eax], 0
  0011f	eb 18		 jmp	 SHORT $LN405@ToUpperCas
$LN367@ToUpperCas:
  00121	8b c7		 mov	 eax, edi
$LN368@ToUpperCas:
  00123	88 1c 08	 mov	 BYTE PTR [eax+ecx], bl
  00126	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0012a	89 77 10	 mov	 DWORD PTR [edi+16], esi
  0012d	72 04		 jb	 SHORT $LN400@ToUpperCas
  0012f	8b 07		 mov	 eax, DWORD PTR [edi]
  00131	eb 02		 jmp	 SHORT $LN401@ToUpperCas
$LN400@ToUpperCas:
  00133	8b c7		 mov	 eax, edi
$LN401@ToUpperCas:
  00135	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
$LN405@ToUpperCas:

; 380  : 	foreach (char c, str)

  00139	33 c0		 xor	 eax, eax
  0013b	c6 45 cc 01	 mov	 BYTE PTR _$S1$3[ebp+4], 1
  0013f	38 45 cd	 cmp	 BYTE PTR _$S1$3[ebp+5], al
  00142	0f 94 c0	 sete	 al
  00145	88 45 cd	 mov	 BYTE PTR _$S1$3[ebp+5], al
  00148	84 c0		 test	 al, al
  0014a	8b 45 c0	 mov	 eax, DWORD PTR tv1356[ebp]
  0014d	0f 85 6d ff ff
	ff		 jne	 $LL7@ToUpperCas
$LN2@ToUpperCas:
  00153	8b 45 c8	 mov	 eax, DWORD PTR _$S1$3[ebp]
  00156	8d 4d c8	 lea	 ecx, DWORD PTR _$S1$3[ebp]
  00159	ff 50 08	 call	 DWORD PTR [eax+8]
  0015c	8b 45 c8	 mov	 eax, DWORD PTR _$S1$3[ebp]
  0015f	8d 4d c8	 lea	 ecx, DWORD PTR _$S1$3[ebp]
  00162	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00165	ff d0		 call	 eax
  00167	84 c0		 test	 al, al
  00169	0f 85 31 ff ff
	ff		 jne	 $LL4@ToUpperCas
$LN543@ToUpperCas:

; 383  : 	}

  0016f	8b 45 e4	 mov	 eax, DWORD PTR _$S1$3[ebp+28]
  00172	83 f8 10	 cmp	 eax, 16			; 00000010H
  00175	72 4c		 jb	 SHORT $LN498@ToUpperCas
  00177	8b 4d d0	 mov	 ecx, DWORD PTR _$S1$3[ebp+8]
  0017a	40		 inc	 eax
  0017b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00180	72 38		 jb	 SHORT $LN493@ToUpperCas
  00182	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00185	74 0f		 je	 SHORT $LN494@ToUpperCas
  00187	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN548@ToUpperCas:
$LN536@ToUpperCas:

; 381  : 	{
; 382  : 		u += (char) toupper (c);

  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00191	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN549@ToUpperCas:

; 383  : 	}

$LN494@ToUpperCas:
  00196	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00199	3b c1		 cmp	 eax, ecx
  0019b	72 05		 jb	 SHORT $LN495@ToUpperCas
  0019d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN550@ToUpperCas:
$LN495@ToUpperCas:
  001a2	2b c8		 sub	 ecx, eax
  001a4	83 f9 04	 cmp	 ecx, 4
  001a7	73 05		 jae	 SHORT $LN496@ToUpperCas
  001a9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN551@ToUpperCas:
$LN496@ToUpperCas:
  001ae	83 f9 23	 cmp	 ecx, 35			; 00000023H
  001b1	76 05		 jbe	 SHORT $LN497@ToUpperCas
  001b3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN552@ToUpperCas:
$LN497@ToUpperCas:
  001b8	8b c8		 mov	 ecx, eax
$LN493@ToUpperCas:
  001ba	51		 push	 ecx
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
$LN498@ToUpperCas:

; 384  : 
; 385  : 	return u;

  001c3	8b c7		 mov	 eax, edi

; 386  : }

  001c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cf	59		 pop	 ecx
  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d6	33 cd		 xor	 ecx, ebp
  001d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c3		 ret	 0
$LN545@ToUpperCas:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0:
  00000	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN12@ToUpperCas
  0000c	83 65 c4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d bc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@ToUpperCas:
  00018	c3		 ret	 0
__unwindfunclet$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1:
  00019	8d 4d c8	 lea	 ecx, DWORD PTR _$S1$3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$ContainerForward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@ForEach@GostCrypt@@UAE@XZ
__ehhandler$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; ToUpperCase
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
_TEXT	SEGMENT
_ws$2 = -2564						; size = 176
_strm$3 = -2388						; size = 176
_ws$4 = -2212						; size = 176
_strm$5 = -2036						; size = 176
_fileSystemFlags$6 = -1860				; size = 4
_dwResult$7 = -1856					; size = 4
___$ReturnUdt$GSCopy$ = -1852				; size = 4
_dev0$ = -1848						; size = 4
$T8 = -1844						; size = 4
___$ReturnUdt$GSCopy$1$ = -1840				; size = 4
$T9 = -1836						; size = 4
_devNumber$1$ = -1832					; size = 4
_devPath$1$ = -1828					; size = 4
tv6460 = -1828						; size = 4
_this$10 = -1828					; size = 4
_this$ = -1828						; size = 4
_driveNumber$1$ = -1824					; size = 4
_this$11 = -1824					; size = 4
_this$ = -1824						; size = 4
_openTest$12 = -1820					; size = 536
_openTest$13 = -1820					; size = 536
_dpi$14 = -1284						; size = 560
_info$15 = -1284					; size = 560
$T16 = -724						; size = 24
$T17 = -700						; size = 24
_geometry$18 = -700					; size = 24
_device$19 = -676					; size = 112
_devPathStr$20 = -564					; size = 24
_devPathStr$21 = -564					; size = 24
_systemDir$22 = -540					; size = 260
_name$23 = -280						; size = 128
_name$24 = -152						; size = 128
_device$25 = -136					; size = 112
_root$26 = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_noDeviceProperties$ = 12				; size = 1
_singleList$ = 16					; size = 1
_noFloppy$ = 20						; size = 1
_detectUnencryptedFilesystems$ = 24			; size = 1
?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z PROC ; GetAvailableHostDevices, COMDAT

; 11550: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f8 09 00
	00		 sub	 esp, 2552		; 000009f8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00031	c7 85 cc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp], 0
  0003b	89 bd d0 f8 ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], edi
  00041	89 bd c4 f8 ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi

; 11551: 	vector <HostDevice> devices;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0004d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00054	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 11696: 	}
; 11697: 
; 11698: 	return devices;

  0005b	33 f6		 xor	 esi, esi
  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	89 b5 d8 f8 ff
	ff		 mov	 DWORD PTR _devNumber$1$[ebp], esi
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetAvailab:

; 11555: 	{
; 11556: 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  00070	33 db		 xor	 ebx, ebx
$LL7@GetAvailab:

; 11557: 		{
; 11558: 			stringstream strm;

  00072	c7 85 0c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0007c	c7 85 1c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00086	83 c8 02	 or	 eax, 2
  00089	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00090	89 85 d4 f8 ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00096	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+104]
  0009c	89 85 cc f8 ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  000a2	0f 57 c0	 xorps	 xmm0, xmm0
  000a5	6a 00		 push	 0
  000a7	8d 85 24 f8 ff
	ff		 lea	 eax, DWORD PTR _strm$5[ebp+24]
  000ad	c7 85 74 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+104], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  000b7	50		 push	 eax
  000b8	c7 85 70 f8 ff
	ff 50 00 00 00	 mov	 DWORD PTR _strm$5[ebp+100], 80 ; 00000050H
  000c2	66 0f 13 85 14
	f8 ff ff	 movlpd	 QWORD PTR _strm$5[ebp+8], xmm0
  000ca	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
  000cf	8d 85 1c f8 ff
	ff		 lea	 eax, DWORD PTR _strm$5[ebp+16]
  000d5	89 85 dc f8 ff
	ff		 mov	 DWORD PTR _this$10[ebp], eax
  000db	8b 85 1c f8 ff
	ff		 mov	 eax, DWORD PTR _strm$5[ebp+16]
  000e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e4	c7 84 05 1c f8
	ff ff 00 00 00
	00		 mov	 DWORD PTR _strm$5[ebp+eax+16], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  000ef	8b 85 1c f8 ff
	ff		 mov	 eax, DWORD PTR _strm$5[ebp+16]
  000f5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f8	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  000fb	89 84 0d 18 f8
	ff ff		 mov	 DWORD PTR _strm$5[ebp+ecx+12], eax
  00102	8b 85 0c f8 ff
	ff		 mov	 eax, DWORD PTR _strm$5[ebp]
  00108	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010b	c7 84 05 0c f8
	ff ff 00 00 00
	00		 mov	 DWORD PTR _strm$5[ebp+eax], OFFSET ??_7?$basic_iostream@DU?$char_traits@D@std@@@std@@6B@
  00116	8b 85 0c f8 ff
	ff		 mov	 eax, DWORD PTR _strm$5[ebp]
  0011c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011f	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  00122	89 84 0d 08 f8
	ff ff		 mov	 DWORD PTR _strm$5[ebp+ecx-4], eax
  00129	8b 85 0c f8 ff
	ff		 mov	 eax, DWORD PTR _strm$5[ebp]
  0012f	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00136	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00139	c7 84 05 0c f8
	ff ff 00 00 00
	00		 mov	 DWORD PTR _strm$5[ebp+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00144	8b 85 0c f8 ff
	ff		 mov	 eax, DWORD PTR _strm$5[ebp]
  0014a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014d	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  00150	89 84 0d 08 f8
	ff ff		 mov	 DWORD PTR _strm$5[ebp+ecx-4], eax
  00157	8d 85 24 f8 ff
	ff		 lea	 eax, DWORD PTR _strm$5[ebp+24]
  0015d	8b c8		 mov	 ecx, eax
  0015f	89 85 dc f8 ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
  00165	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  0016a	c7 85 24 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+24], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00174	c7 85 5c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+80], 0
  0017e	c7 85 60 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+84], 0

; 11559: 			strm << "\\Device\\Harddisk" << devNumber << "\\Partition" << partNumber;

  00188	53		 push	 ebx
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DPPABKKK@?2Partition?$AA@
  0018e	56		 push	 esi
  0018f	8d 85 1c f8 ff
	ff		 lea	 eax, DWORD PTR _strm$5[ebp+16]
  00195	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001a7	83 c4 08	 add	 esp, 8
  001aa	8b c8		 mov	 ecx, eax
  001ac	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b7	83 c4 08	 add	 esp, 8
  001ba	8b c8		 mov	 ecx, eax
  001bc	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 11560: 			string devPathStr (strm.str());

  001c1	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _devPathStr$21[ebp]
  001c7	50		 push	 eax
  001c8	8d 8d 0c f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp]
  001ce	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str

; 11561: 			const char *devPath = devPathStr.c_str();

  001d3	83 bd e0 fd ff
	ff 10		 cmp	 DWORD PTR _devPathStr$21[ebp+20], 16 ; 00000010H
  001da	8d b5 cc fd ff
	ff		 lea	 esi, DWORD PTR _devPathStr$21[ebp]
  001e0	0f 43 b5 cc fd
	ff ff		 cmovae	 esi, DWORD PTR _devPathStr$21[ebp]

; 11562: 
; 11563: 			OPEN_TEST_STRUCT openTest;
; 11564: 			if (!OpenDevice (devPath, &openTest, detectUnencryptedFilesystems && partNumber != 0))

  001e7	80 7d 18 00	 cmp	 BYTE PTR _detectUnencryptedFilesystems$[ebp], 0
  001eb	89 b5 dc f8 ff
	ff		 mov	 DWORD PTR _devPath$1$[ebp], esi
  001f1	74 0b		 je	 SHORT $LN34@GetAvailab
  001f3	85 db		 test	 ebx, ebx
  001f5	74 07		 je	 SHORT $LN34@GetAvailab
  001f7	b8 01 00 00 00	 mov	 eax, 1
  001fc	eb 02		 jmp	 SHORT $LN35@GetAvailab
$LN34@GetAvailab:
  001fe	33 c0		 xor	 eax, eax
$LN35@GetAvailab:
  00200	50		 push	 eax
  00201	8d 85 e4 f8 ff
	ff		 lea	 eax, DWORD PTR _openTest$13[ebp]
  00207	50		 push	 eax
  00208	56		 push	 esi
  00209	e8 00 00 00 00	 call	 _OpenDevice
  0020e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00211	85 c0		 test	 eax, eax
  00213	0f 85 8a 00 00
	00		 jne	 $LN11@GetAvailab

; 11568: 
; 11569: 				continue;

  00219	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _devPathStr$21[ebp+20]
  0021f	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00223	85 db		 test	 ebx, ebx
  00225	0f 84 ca 06 00
	00		 je	 $LN2733@GetAvailab
  0022b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0022e	72 41		 jb	 SHORT $LN387@GetAvailab
  00230	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _devPathStr$21[ebp]
  00236	40		 inc	 eax
  00237	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0023c	72 2a		 jb	 SHORT $LN382@GetAvailab
  0023e	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00241	0f 85 17 08 00
	00		 jne	 $LN2738@GetAvailab
  00247	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0024a	3b c1		 cmp	 eax, ecx
  0024c	0f 83 0c 08 00
	00		 jae	 $LN2738@GetAvailab
  00252	2b c8		 sub	 ecx, eax
  00254	83 f9 04	 cmp	 ecx, 4
  00257	0f 82 01 08 00
	00		 jb	 $LN2738@GetAvailab
  0025d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00260	0f 87 f8 07 00
	00		 ja	 $LN2738@GetAvailab
  00266	8b c8		 mov	 ecx, eax
$LN382@GetAvailab:
  00268	51		 push	 ecx
  00269	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026e	83 c4 04	 add	 esp, 4
$LN387@GetAvailab:
  00271	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+104]
  00277	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+20], 15 ; 0000000fH
  00281	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+16], 0
  0028b	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR _devPathStr$21[ebp], 0
  00292	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00297	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0029e	e9 1a 06 00 00	 jmp	 $LN2788@GetAvailab
$LN11@GetAvailab:

; 11570: 			}
; 11571: 
; 11572: 			HostDevice device;

  002a3	33 c0		 xor	 eax, eax
  002a5	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _device$19[ebp], 0
  002af	0f 57 c0	 xorps	 xmm0, xmm0
  002b2	66 c7 85 60 fd
	ff ff 00 00	 mov	 WORD PTR _device$19[ebp+4], 0
  002bb	c6 85 62 fd ff
	ff 00		 mov	 BYTE PTR _device$19[ebp+6], 0
  002c2	c7 85 78 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _device$19[ebp+28], 15 ; 0000000fH
  002cc	c7 85 74 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _device$19[ebp+24], 0
  002d6	c6 85 64 fd ff
	ff 00		 mov	 BYTE PTR _device$19[ebp+8], 0
  002dd	c7 85 90 fd ff
	ff 07 00 00 00	 mov	 DWORD PTR _device$19[ebp+52], 7
  002e7	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _device$19[ebp+48], 0
  002f1	66 89 85 7c fd
	ff ff		 mov	 WORD PTR _device$19[ebp+32], ax
  002f8	c7 85 a8 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _device$19[ebp+76], 15 ; 0000000fH
  00302	89 85 a4 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+72], eax
  00308	88 85 94 fd ff
	ff		 mov	 BYTE PTR _device$19[ebp+56], al
  0030e	88 85 ac fd ff
	ff		 mov	 BYTE PTR _device$19[ebp+80], al
  00314	66 0f 13 85 b4
	fd ff ff	 movlpd	 QWORD PTR _device$19[ebp+88], xmm0
  0031c	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+100], eax
  00322	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+104], eax
  00328	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+108], eax

; 11573: 			device.SystemNumber = devNumber;

  0032e	8b 85 d8 f8 ff
	ff		 mov	 eax, DWORD PTR _devNumber$1$[ebp]
  00334	89 85 bc fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+96], eax

; 11574: 			device.Path = devPath;

  0033a	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0033d	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00341	75 04		 jne	 SHORT $LN816@GetAvailab
  00343	33 c9		 xor	 ecx, ecx
  00345	eb 12		 jmp	 SHORT $LN817@GetAvailab
$LN816@GetAvailab:
  00347	8b ce		 mov	 ecx, esi
  00349	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0034c	0f 1f 40 00	 npad	 4
$LL2780@GetAvailab:
  00350	8a 01		 mov	 al, BYTE PTR [ecx]
  00352	41		 inc	 ecx
  00353	84 c0		 test	 al, al
  00355	75 f9		 jne	 SHORT $LL2780@GetAvailab
  00357	2b ca		 sub	 ecx, edx
$LN817@GetAvailab:
  00359	51		 push	 ecx
  0035a	56		 push	 esi
  0035b	8d 8d 94 fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp+56]
  00361	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 11575: 
; 11576: 			PARTITION_INFORMATION partInfo;
; 11577: 
; 11578: 			if (GetPartitionInfo (devPath, &partInfo))

  00366	68 30 02 00 00	 push	 560			; 00000230H
  0036b	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _dpi$14[ebp]
  00371	6a 00		 push	 0
  00373	50		 push	 eax
  00374	e8 00 00 00 00	 call	 _memset
  00379	56		 push	 esi
  0037a	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _dpi$14[ebp]
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  00385	50		 push	 eax
  00386	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0038c	83 c4 18	 add	 esp, 24			; 00000018H
  0038f	8d 85 c0 f8 ff
	ff		 lea	 eax, DWORD PTR _dwResult$7[ebp]
  00395	6a 00		 push	 0
  00397	50		 push	 eax
  00398	68 30 02 00 00	 push	 560			; 00000230H
  0039d	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _dpi$14[ebp]
  003a3	50		 push	 eax
  003a4	68 30 02 00 00	 push	 560			; 00000230H
  003a9	50		 push	 eax
  003aa	68 38 20 22 00	 push	 2236472			; 00222038H
  003af	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  003b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  003bb	85 c0		 test	 eax, eax
  003bd	74 2a		 je	 SHORT $LN2784@GetAvailab

; 11579: 			{
; 11580: 				device.Bootable = partInfo.BootIndicator ? true : false;

  003bf	8b 85 1c fd ff
	ff		 mov	 eax, DWORD PTR _dpi$14[ebp+544]
  003c5	c1 e8 08	 shr	 eax, 8
  003c8	84 c0		 test	 al, al

; 11581: 				device.Size = partInfo.PartitionLength.QuadPart;

  003ca	8b 85 0c fd ff
	ff		 mov	 eax, DWORD PTR _dpi$14[ebp+528]
  003d0	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+88], eax
  003d6	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _dpi$14[ebp+532]
  003dc	0f 95 85 5c fd
	ff ff		 setne	 BYTE PTR _device$19[ebp]
  003e3	89 85 b8 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+92], eax
$LN2784@GetAvailab:

; 11582: 			}
; 11583: 
; 11584: 			device.HasUnencryptedFilesystem = (detectUnencryptedFilesystems && openTest.FilesystemDetected) ? true : false;

  003e9	80 7d 18 00	 cmp	 BYTE PTR _detectUnencryptedFilesystems$[ebp], 0
  003ed	74 10		 je	 SHORT $LN36@GetAvailab
  003ef	83 bd f8 fa ff
	ff 00		 cmp	 DWORD PTR _openTest$13[ebp+532], 0
  003f6	c6 85 62 fd ff
	ff 01		 mov	 BYTE PTR _device$19[ebp+6], 1
  003fd	75 07		 jne	 SHORT $LN37@GetAvailab
$LN36@GetAvailab:
  003ff	c6 85 62 fd ff
	ff 00		 mov	 BYTE PTR _device$19[ebp+6], 0
$LN37@GetAvailab:

; 11585: 
; 11586: 			if (!noDeviceProperties)

  00406	80 7d 0c 00	 cmp	 BYTE PTR _noDeviceProperties$[ebp], 0
  0040a	0f 85 a7 03 00
	00		 jne	 $LN1369@GetAvailab

; 11587: 			{
; 11588: 				DISK_GEOMETRY geometry;
; 11589: 
; 11590: 				wstringstream ws;

  00410	c7 85 5c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@
  0041a	c7 85 6c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp+16], OFFSET ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@
  00424	8b 85 d4 f8 ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  0042a	8d 8d c4 f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp+104]
  00430	83 c8 20	 or	 eax, 32			; 00000020H
  00433	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00437	89 85 d4 f8 ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  0043d	0f 57 c0	 xorps	 xmm0, xmm0
  00440	89 85 cc f8 ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  00446	8d 85 74 f7 ff
	ff		 lea	 eax, DWORD PTR _ws$4[ebp+24]
  0044c	6a 00		 push	 0
  0044e	50		 push	 eax
  0044f	c7 85 c4 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp+104], OFFSET ??_7?$basic_istream@_WU?$char_traits@_W@std@@@std@@6B@
  00459	c7 85 c0 f7 ff
	ff 50 00 00 00	 mov	 DWORD PTR _ws$4[ebp+100], 80 ; 00000050H
  00463	66 0f 13 85 64
	f7 ff ff	 movlpd	 QWORD PTR _ws$4[ebp+8], xmm0
  0046b	e8 00 00 00 00	 call	 ?init@?$basic_ios@_WU?$char_traits@_W@std@@@std@@IAEXPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::init
  00470	8d 85 6c f7 ff
	ff		 lea	 eax, DWORD PTR _ws$4[ebp+16]
  00476	89 85 e0 f8 ff
	ff		 mov	 DWORD PTR _this$11[ebp], eax
  0047c	8b 85 6c f7 ff
	ff		 mov	 eax, DWORD PTR _ws$4[ebp+16]
  00482	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00485	c7 84 05 6c f7
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ws$4[ebp+eax+16], OFFSET ??_7?$basic_ostream@_WU?$char_traits@_W@std@@@std@@6B@
  00490	8b 85 6c f7 ff
	ff		 mov	 eax, DWORD PTR _ws$4[ebp+16]
  00496	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00499	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0049c	89 84 0d 68 f7
	ff ff		 mov	 DWORD PTR _ws$4[ebp+ecx+12], eax
  004a3	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _ws$4[ebp]
  004a9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004ac	c7 84 05 5c f7
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ws$4[ebp+eax], OFFSET ??_7?$basic_iostream@_WU?$char_traits@_W@std@@@std@@6B@
  004b7	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _ws$4[ebp]
  004bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004c0	8d 41 e0	 lea	 eax, DWORD PTR [ecx-32]
  004c3	89 84 0d 58 f7
	ff ff		 mov	 DWORD PTR _ws$4[ebp+ecx-4], eax
  004ca	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _ws$4[ebp]
  004d0	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 18 ; 00000012H
  004d7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004da	c7 84 05 5c f7
	ff ff 00 00 00
	00		 mov	 DWORD PTR _ws$4[ebp+eax], OFFSET ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  004e5	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _ws$4[ebp]
  004eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004ee	8d 41 98	 lea	 eax, DWORD PTR [ecx-104]
  004f1	89 84 0d 58 f7
	ff ff		 mov	 DWORD PTR _ws$4[ebp+ecx-4], eax
  004f8	8d 85 74 f7 ff
	ff		 lea	 eax, DWORD PTR _ws$4[ebp+24]
  004fe	8b c8		 mov	 ecx, eax
  00500	89 85 e0 f8 ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
  00506	e8 00 00 00 00	 call	 ??0?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
  0050b	c7 85 74 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp+24], OFFSET ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@
  00515	c7 85 ac f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp+80], 0
  0051f	c7 85 b0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp+84], 0

; 11591: 				ws << devPathStr.c_str();

  00529	83 bd e0 fd ff
	ff 10		 cmp	 DWORD PTR _devPathStr$21[ebp+20], 16 ; 00000010H
  00530	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _devPathStr$21[ebp]
  00536	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  0053a	0f 43 85 cc fd
	ff ff		 cmovae	 eax, DWORD PTR _devPathStr$21[ebp]
  00541	50		 push	 eax
  00542	8d 85 6c f7 ff
	ff		 lea	 eax, DWORD PTR _ws$4[ebp+16]
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  0054e	83 c4 08	 add	 esp, 8

; 11592: 				int driveNumber = GetDiskDeviceDriveLetter ((wchar_t *) ws.str().c_str());

  00551	8d 85 2c fd ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00557	8d 8d 5c f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp]
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00563	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00567	72 02		 jb	 SHORT $LN943@GetAvailab
  00569	8b 00		 mov	 eax, DWORD PTR [eax]
$LN943@GetAvailab:
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00571	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR $T16[ebp+20]
  00577	83 c4 04	 add	 esp, 4
  0057a	89 85 e0 f8 ff
	ff		 mov	 DWORD PTR _driveNumber$1$[ebp], eax
  00580	83 f9 08	 cmp	 ecx, 8
  00583	72 56		 jb	 SHORT $LN1034@GetAvailab
  00585	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00588	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR $T16[ebp]
  0058e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00593	0f 87 c5 04 00
	00		 ja	 $LN2738@GetAvailab
  00599	03 c0		 add	 eax, eax
  0059b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  005a0	72 2a		 jb	 SHORT $LN1029@GetAvailab
  005a2	f6 c1 1f	 test	 cl, 31			; 0000001fH
  005a5	0f 85 b3 04 00
	00		 jne	 $LN2738@GetAvailab
  005ab	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  005ae	3b c1		 cmp	 eax, ecx
  005b0	0f 83 a8 04 00
	00		 jae	 $LN2738@GetAvailab
  005b6	2b c8		 sub	 ecx, eax
  005b8	83 f9 04	 cmp	 ecx, 4
  005bb	0f 82 9d 04 00
	00		 jb	 $LN2738@GetAvailab
  005c1	83 f9 23	 cmp	 ecx, 35			; 00000023H
  005c4	0f 87 94 04 00
	00		 ja	 $LN2738@GetAvailab
  005ca	8b c8		 mov	 ecx, eax
$LN1029@GetAvailab:
  005cc	51		 push	 ecx
  005cd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  005d2	8b 85 e0 f8 ff
	ff		 mov	 eax, DWORD PTR _driveNumber$1$[ebp]
  005d8	83 c4 04	 add	 esp, 4
$LN1034@GetAvailab:

; 11593: 
; 11594: 				if (driveNumber >= 0)

  005db	85 c0		 test	 eax, eax
  005dd	0f 88 82 01 00
	00		 js	 $LN17@GetAvailab

; 11595: 				{
; 11596: 					device.MountPoint += (char) (driveNumber + 'A');

  005e3	8b 95 74 fd ff
	ff		 mov	 edx, DWORD PTR _device$19[ebp+24]
  005e9	8b c2		 mov	 eax, edx
  005eb	f7 d0		 not	 eax
  005ed	83 f8 01	 cmp	 eax, 1
  005f0	0f 86 6d 04 00
	00		 jbe	 $LN2760@GetAvailab
  005f6	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  005f9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  005fc	0f 87 61 04 00
	00		 ja	 $LN2760@GetAvailab
  00602	8b bd 78 fd ff
	ff		 mov	 edi, DWORD PTR _device$19[ebp+28]
  00608	3b fe		 cmp	 edi, esi
  0060a	73 0f		 jae	 SHORT $LN1094@GetAvailab
  0060c	52		 push	 edx
  0060d	56		 push	 esi
  0060e	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp+8]
  00614	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00619	eb 1d		 jmp	 SHORT $LN2789@GetAvailab
$LN1094@GetAvailab:
  0061b	85 f6		 test	 esi, esi
  0061d	75 29		 jne	 SHORT $LN2791@GetAvailab
  0061f	83 ff 10	 cmp	 edi, 16			; 00000010H
  00622	89 b5 74 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+24], esi
  00628	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp+8]
  0062e	0f 43 85 64 fd
	ff ff		 cmovae	 eax, DWORD PTR _device$19[ebp+8]
  00635	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN2789@GetAvailab:
  00638	8b 95 74 fd ff
	ff		 mov	 edx, DWORD PTR _device$19[ebp+24]
  0063e	8b bd 78 fd ff
	ff		 mov	 edi, DWORD PTR _device$19[ebp+28]
  00644	85 f6		 test	 esi, esi
  00646	74 3a		 je	 SHORT $LN1346@GetAvailab
$LN2791@GetAvailab:
  00648	8a 8d e0 f8 ff
	ff		 mov	 cl, BYTE PTR _driveNumber$1$[ebp]
  0064e	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp+8]
  00654	80 c1 41	 add	 cl, 65			; 00000041H
  00657	83 ff 10	 cmp	 edi, 16			; 00000010H
  0065a	0f 43 85 64 fd
	ff ff		 cmovae	 eax, DWORD PTR _device$19[ebp+8]
  00661	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00664	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp+8]
  0066a	83 bd 78 fd ff
	ff 10		 cmp	 DWORD PTR _device$19[ebp+28], 16 ; 00000010H
  00671	89 b5 74 fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+24], esi
  00677	0f 43 85 64 fd
	ff ff		 cmovae	 eax, DWORD PTR _device$19[ebp+8]
  0067e	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 11597: 					device.MountPoint += ":";

$LN1346@GetAvailab:
  00682	6a 01		 push	 1
  00684	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00689	8d 8d 64 fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp+8]
  0068f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 11598: 
; 11599: 					wchar_t name[64];
; 11600: 					if (GetDriveLabel (driveNumber, name, sizeof (name)))

  00694	8b b5 e0 f8 ff
	ff		 mov	 esi, DWORD PTR _driveNumber$1$[ebp]
  0069a	c7 45 ea 3a 00
	5c 00		 mov	 DWORD PTR _root$26[ebp+2], 6029370 ; 005c003aH
  006a1	8d 46 41	 lea	 eax, DWORD PTR [esi+65]
  006a4	66 89 45 e8	 mov	 WORD PTR _root$26[ebp], ax
  006a8	33 c0		 xor	 eax, eax
  006aa	50		 push	 eax
  006ab	50		 push	 eax
  006ac	66 89 45 ee	 mov	 WORD PTR _root$26[ebp+6], ax
  006b0	8d 85 bc f8 ff
	ff		 lea	 eax, DWORD PTR _fileSystemFlags$6[ebp]
  006b6	50		 push	 eax
  006b7	6a 00		 push	 0
  006b9	6a 00		 push	 0
  006bb	6a 40		 push	 64			; 00000040H
  006bd	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _name$24[ebp]
  006c3	50		 push	 eax
  006c4	8d 45 e8	 lea	 eax, DWORD PTR _root$26[ebp]
  006c7	50		 push	 eax
  006c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationW@32
  006ce	85 c0		 test	 eax, eax
  006d0	74 40		 je	 SHORT $LN16@GetAvailab

; 11601: 						device.Name = name;

  006d2	66 83 bd 68 ff
	ff ff 00	 cmp	 WORD PTR _name$24[ebp], 0
  006da	75 04		 jne	 SHORT $LN1356@GetAvailab
  006dc	33 c0		 xor	 eax, eax
  006de	eb 1f		 jmp	 SHORT $LN1357@GetAvailab
$LN1356@GetAvailab:
  006e0	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _name$24[ebp]
  006e6	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
  006e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL2781@GetAvailab:
  006f0	66 8b 08	 mov	 cx, WORD PTR [eax]
  006f3	83 c0 02	 add	 eax, 2
  006f6	66 85 c9	 test	 cx, cx
  006f9	75 f5		 jne	 SHORT $LL2781@GetAvailab
  006fb	2b c2		 sub	 eax, edx
  006fd	d1 f8		 sar	 eax, 1
$LN1357@GetAvailab:
  006ff	50		 push	 eax
  00700	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _name$24[ebp]
  00706	50		 push	 eax
  00707	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp+32]
  0070d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN16@GetAvailab:

; 11602: 
; 11603: 					if (GetSystemDriveLetter() == 'A' + driveNumber)

  00712	68 04 01 00 00	 push	 260			; 00000104H
  00717	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _systemDir$22[ebp]
  0071d	50		 push	 eax
  0071e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  00724	85 c0		 test	 eax, eax
  00726	74 12		 je	 SHORT $LN1359@GetAvailab
  00728	0f be 85 e4 fd
	ff ff		 movsx	 eax, BYTE PTR _systemDir$22[ebp]
  0072f	50		 push	 eax
  00730	e8 00 00 00 00	 call	 _toupper
  00735	83 c4 04	 add	 esp, 4
  00738	eb 02		 jmp	 SHORT $LN1360@GetAvailab
$LN1359@GetAvailab:
  0073a	32 c0		 xor	 al, al
$LN1360@GetAvailab:
  0073c	0f b6 95 5d fd
	ff ff		 movzx	 edx, BYTE PTR _device$19[ebp+1]
  00743	8d 4e 41	 lea	 ecx, DWORD PTR [esi+65]
  00746	8b b5 dc f8 ff
	ff		 mov	 esi, DWORD PTR _devPath$1$[ebp]
  0074c	8b bd d0 f8 ff
	ff		 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00752	0f be c0	 movsx	 eax, al
  00755	3b c1		 cmp	 eax, ecx
  00757	b8 01 00 00 00	 mov	 eax, 1
  0075c	0f 44 d0	 cmove	 edx, eax
  0075f	88 95 5d fd ff
	ff		 mov	 BYTE PTR _device$19[ebp+1], dl
$LN17@GetAvailab:

; 11604: 						device.ContainsSystem = true;
; 11605: 				}
; 11606: 
; 11607: 				if (partNumber == 0 && GetDriveGeometry (devPath, &geometry))

  00765	85 db		 test	 ebx, ebx
  00767	75 22		 jne	 SHORT $LN18@GetAvailab
  00769	8d 85 44 fd ff
	ff		 lea	 eax, DWORD PTR _geometry$18[ebp]
  0076f	50		 push	 eax
  00770	56		 push	 esi
  00771	e8 00 00 00 00	 call	 _GetDriveGeometry
  00776	83 c4 08	 add	 esp, 8
  00779	85 c0		 test	 eax, eax
  0077b	74 0e		 je	 SHORT $LN18@GetAvailab

; 11608: 					device.Removable = (geometry.MediaType == RemovableMedia);

  0077d	83 bd 4c fd ff
	ff 0b		 cmp	 DWORD PTR _geometry$18[ebp+8], 11 ; 0000000bH
  00784	0f 94 85 ac fd
	ff ff		 sete	 BYTE PTR _device$19[ebp+80]
$LN18@GetAvailab:

; 11609: 			}

  0078b	8d 8d c4 f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp+104]
  00791	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00796	8d 85 c4 f7 ff
	ff		 lea	 eax, DWORD PTR _ws$4[ebp+104]
  0079c	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  007a0	50		 push	 eax
  007a1	c7 85 c4 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$4[ebp+104], OFFSET ??_7ios_base@std@@6B@
  007ab	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  007b0	83 c4 04	 add	 esp, 4
  007b3	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
$LN1369@GetAvailab:

; 11610: 
; 11611: 			if (partNumber == 0)

  007b7	85 db		 test	 ebx, ebx
  007b9	75 2f		 jne	 SHORT $LN19@GetAvailab

; 11612: 			{
; 11613: 				devices.push_back (device);

  007bb	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp]
  007c1	8b cf		 mov	 ecx, edi
  007c3	50		 push	 eax
  007c4	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back

; 11614: 				dev0 = devices.size() - 1;

  007c9	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  007cc	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  007d1	2b 0f		 sub	 ecx, DWORD PTR [edi]
  007d3	f7 e9		 imul	 ecx
  007d5	03 d1		 add	 edx, ecx
  007d7	c1 fa 06	 sar	 edx, 6
  007da	8b c2		 mov	 eax, edx
  007dc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007df	48		 dec	 eax
  007e0	03 c2		 add	 eax, edx
  007e2	89 85 c8 f8 ff
	ff		 mov	 DWORD PTR _dev0$[ebp], eax

; 11615: 			}
; 11616: 			else

  007e8	eb 7d		 jmp	 SHORT $LN20@GetAvailab
$LN19@GetAvailab:

; 11617: 			{
; 11618: 				// System creates a virtual partition1 for some storage devices without
; 11619: 				// partition table. We try to detect this case by comparing sizes of
; 11620: 				// partition0 and partition1. If they match, no partition of the device
; 11621: 				// is displayed to the user to avoid confusion. Drive letter assigned by
; 11622: 				// system to partition1 is assigned partition0
; 11623: 				if (partNumber == 1 && devices[dev0].Size == device.Size)

  007ea	8b b5 c8 f8 ff
	ff		 mov	 esi, DWORD PTR _dev0$[ebp]
  007f0	83 fb 01	 cmp	 ebx, 1
  007f3	75 21		 jne	 SHORT $LN2782@GetAvailab
  007f5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  007f7	6b d6 70	 imul	 edx, esi, 112
  007fa	8b 44 0a 58	 mov	 eax, DWORD PTR [edx+ecx+88]
  007fe	3b 85 b4 fd ff
	ff		 cmp	 eax, DWORD PTR _device$19[ebp+88]
  00804	75 10		 jne	 SHORT $LN2782@GetAvailab
  00806	8b 44 0a 5c	 mov	 eax, DWORD PTR [edx+ecx+92]
  0080a	3b 85 b8 fd ff
	ff		 cmp	 eax, DWORD PTR _device$19[ebp+92]
  00810	0f 84 57 01 00
	00		 je	 $LN2761@GetAvailab
$LN2782@GetAvailab:

; 11631: 				}
; 11632: 
; 11633: 				device.IsPartition = true;
; 11634: 				device.SystemNumber = partNumber;
; 11635: 				device.Removable = devices[dev0].Removable;

  00816	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00818	6b f6 70	 imul	 esi, esi, 112

; 11636: 
; 11637: 				if (device.ContainsSystem)

  0081b	80 bd 5d fd ff
	ff 00		 cmp	 BYTE PTR _device$19[ebp+1], 0
  00822	c6 85 60 fd ff
	ff 01		 mov	 BYTE PTR _device$19[ebp+4], 1
  00829	89 9d bc fd ff
	ff		 mov	 DWORD PTR _device$19[ebp+96], ebx
  0082f	8a 44 31 50	 mov	 al, BYTE PTR [ecx+esi+80]
  00833	88 85 ac fd ff
	ff		 mov	 BYTE PTR _device$19[ebp+80], al
  00839	74 05		 je	 SHORT $LN22@GetAvailab

; 11638: 					devices[dev0].ContainsSystem = true;

  0083b	c6 44 31 01 01	 mov	 BYTE PTR [ecx+esi+1], 1
$LN22@GetAvailab:

; 11639: 
; 11640: 				if (singleList)

  00840	80 7d 10 00	 cmp	 BYTE PTR _singleList$[ebp], 0
  00844	74 0e		 je	 SHORT $LN23@GetAvailab

; 11641: 					devices.push_back (device);

  00846	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp]
  0084c	8b cf		 mov	 ecx, edi
  0084e	50		 push	 eax
  0084f	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
$LN23@GetAvailab:

; 11642: 
; 11643: 				devices[dev0].Partitions.push_back (device);

  00854	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00856	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp]
  0085c	83 c1 64	 add	 ecx, 100		; 00000064H
  0085f	50		 push	 eax
  00860	03 ce		 add	 ecx, esi
  00862	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
$LN20@GetAvailab:

; 11644: 			}
; 11645: 		}

  00867	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp]
  0086d	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00872	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _devPathStr$21[ebp+20]
  00878	83 f8 10	 cmp	 eax, 16			; 00000010H
  0087b	72 13		 jb	 SHORT $LN2002@GetAvailab
  0087d	40		 inc	 eax
  0087e	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$21[ebp]
  00884	50		 push	 eax
  00885	ff b5 cc fd ff
	ff		 push	 DWORD PTR _devPathStr$21[ebp]
  0088b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN2002@GetAvailab:
  00890	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+104]
  00896	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+20], 15 ; 0000000fH
  008a0	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+16], 0
  008aa	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR _devPathStr$21[ebp], 0
  008b1	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  008b6	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 23 ; 00000017H
$LN2788@GetAvailab:
  008bd	8d 85 74 f8 ff
	ff		 lea	 eax, DWORD PTR _strm$5[ebp+104]
  008c3	c7 85 74 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+104], OFFSET ??_7ios_base@std@@6B@
  008cd	50		 push	 eax
  008ce	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  008d3	43		 inc	 ebx
  008d4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  008d8	83 c4 04	 add	 esp, 4
  008db	83 fb 20	 cmp	 ebx, 32			; 00000020H
  008de	0f 8d 5d 01 00
	00		 jge	 $LN2@GetAvailab

; 11555: 	{
; 11556: 		for (int partNumber = 0; partNumber < MAX_HOST_PARTITION_NUMBER; partNumber++)

  008e4	8b b5 d8 f8 ff
	ff		 mov	 esi, DWORD PTR _devNumber$1$[ebp]
  008ea	8b 85 d4 f8 ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  008f0	e9 7d f7 ff ff	 jmp	 $LL7@GetAvailab
$LN2733@GetAvailab:

; 11565: 			{
; 11566: 				if (partNumber == 0)
; 11567: 					break;

  008f5	83 f8 10	 cmp	 eax, 16			; 00000010H
  008f8	72 41		 jb	 SHORT $LN261@GetAvailab
  008fa	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _devPathStr$21[ebp]
  00900	40		 inc	 eax
  00901	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00906	72 2a		 jb	 SHORT $LN256@GetAvailab
  00908	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0090b	0f 85 4d 01 00
	00		 jne	 $LN2738@GetAvailab
  00911	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00914	3b c1		 cmp	 eax, ecx
  00916	0f 83 42 01 00
	00		 jae	 $LN2738@GetAvailab
  0091c	2b c8		 sub	 ecx, eax
  0091e	83 f9 04	 cmp	 ecx, 4
  00921	0f 82 37 01 00
	00		 jb	 $LN2738@GetAvailab
  00927	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0092a	0f 87 2e 01 00
	00		 ja	 $LN2738@GetAvailab
  00930	8b c8		 mov	 ecx, eax
$LN256@GetAvailab:
  00932	51		 push	 ecx
  00933	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00938	83 c4 04	 add	 esp, 4
$LN261@GetAvailab:
  0093b	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+104]
  00941	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+20], 15 ; 0000000fH
  0094b	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+16], 0
  00955	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR _devPathStr$21[ebp], 0
  0095c	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00961	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00968	e9 b7 00 00 00	 jmp	 $LN2792@GetAvailab
$LN2761@GetAvailab:

; 11624: 				{
; 11625: 					devices[dev0].IsVirtualPartition = true;

  0096d	6b f6 70	 imul	 esi, esi, 112
  00970	8b c1		 mov	 eax, ecx
  00972	c6 44 30 05 01	 mov	 BYTE PTR [eax+esi+5], 1

; 11626: 					devices[dev0].MountPoint = device.MountPoint;

  00977	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0097a	03 0f		 add	 ecx, DWORD PTR [edi]
  0097c	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp+8]
  00982	3b c8		 cmp	 ecx, eax
  00984	74 0a		 je	 SHORT $LN1426@GetAvailab
  00986	6a ff		 push	 -1
  00988	6a 00		 push	 0
  0098a	50		 push	 eax
  0098b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1426@GetAvailab:

; 11627: 					devices[dev0].Name = device.Name;

  00990	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00993	03 0f		 add	 ecx, DWORD PTR [edi]
  00995	8d 85 7c fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp+32]
  0099b	3b c8		 cmp	 ecx, eax
  0099d	74 0a		 je	 SHORT $LN1568@GetAvailab
  0099f	6a ff		 push	 -1
  009a1	6a 00		 push	 0
  009a3	50		 push	 eax
  009a4	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN1568@GetAvailab:

; 11628: 					devices[dev0].Path = device.Path;

  009a9	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  009ac	03 0f		 add	 ecx, DWORD PTR [edi]
  009ae	8d 85 94 fd ff
	ff		 lea	 eax, DWORD PTR _device$19[ebp+56]
  009b4	3b c8		 cmp	 ecx, eax
  009b6	74 0a		 je	 SHORT $LN1712@GetAvailab
  009b8	6a ff		 push	 -1
  009ba	6a 00		 push	 0
  009bc	50		 push	 eax
  009bd	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1712@GetAvailab:

; 11629: 					devices[dev0].HasUnencryptedFilesystem = device.HasUnencryptedFilesystem;

  009c2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  009c4	8a 85 62 fd ff
	ff		 mov	 al, BYTE PTR _device$19[ebp+6]
  009ca	88 44 31 06	 mov	 BYTE PTR [ecx+esi+6], al

; 11630: 					break;

  009ce	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp]
  009d4	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  009d9	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _devPathStr$21[ebp+20]
  009df	83 f8 10	 cmp	 eax, 16			; 00000010H
  009e2	72 13		 jb	 SHORT $LN1859@GetAvailab
  009e4	40		 inc	 eax
  009e5	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$21[ebp]
  009eb	50		 push	 eax
  009ec	ff b5 cc fd ff
	ff		 push	 DWORD PTR _devPathStr$21[ebp]
  009f2	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN1859@GetAvailab:
  009f7	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+104]
  009fd	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+20], 15 ; 0000000fH
  00a07	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _devPathStr$21[ebp+16], 0
  00a11	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR _devPathStr$21[ebp], 0
  00a18	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00a1d	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 22 ; 00000016H
$LN2792@GetAvailab:
  00a24	8d 85 74 f8 ff
	ff		 lea	 eax, DWORD PTR _strm$5[ebp+104]
  00a2a	c7 85 74 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$5[ebp+104], OFFSET ??_7ios_base@std@@6B@
  00a34	50		 push	 eax
  00a35	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00a3a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00a3e	83 c4 04	 add	 esp, 4
$LN2@GetAvailab:

; 11552: 	size_t dev0;
; 11553: 
; 11554: 	for (int devNumber = 0; devNumber < MAX_HOST_DRIVE_NUMBER; devNumber++)

  00a41	8b b5 d8 f8 ff
	ff		 mov	 esi, DWORD PTR _devNumber$1$[ebp]
  00a47	46		 inc	 esi
  00a48	89 b5 d8 f8 ff
	ff		 mov	 DWORD PTR _devNumber$1$[ebp], esi
  00a4e	83 fe 40	 cmp	 esi, 64			; 00000040H
  00a51	7d 1a		 jge	 SHORT $LN2779@GetAvailab
  00a53	8b 85 d4 f8 ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  00a59	e9 12 f6 ff ff	 jmp	 $LL4@GetAvailab
$LN2738@GetAvailab:

; 11568: 
; 11569: 				continue;

  00a5e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN2794@GetAvailab:
$LN2760@GetAvailab:

; 11595: 				{
; 11596: 					device.MountPoint += (char) (driveNumber + 'A');

  00a63	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00a68	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2795@GetAvailab:
$LN2779@GetAvailab:

; 11646: 	}
; 11647: 
; 11648: 	// Vista does not create partition links for dynamic volumes so it is necessary to scan \\Device\\HarddiskVolumeX devices
; 11649: 	if (CurrentOSMajor >= 6)

  00a6d	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  00a74	0f 8c 4f 03 00
	00		 jl	 $LN9@GetAvailab

; 11650: 	{
; 11651: 		for (int devNumber = 0; devNumber < 256; devNumber++)

  00a7a	0f b6 5d 18	 movzx	 ebx, BYTE PTR _detectUnencryptedFilesystems$[ebp]
  00a7e	33 ff		 xor	 edi, edi
  00a80	89 9d dc f8 ff
	ff		 mov	 DWORD PTR tv6460[ebp], ebx
$LL10@GetAvailab:

; 11652: 		{
; 11653: 			stringstream strm;

  00a86	6a 01		 push	 1
  00a88	6a 03		 push	 3
  00a8a	8d 8d ac f6 ff
	ff		 lea	 ecx, DWORD PTR _strm$3[ebp]
  00a90	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 11654: 			strm << "\\Device\\HarddiskVolume" << devNumber;

  00a95	57		 push	 edi
  00a96	8d 85 bc f6 ff
	ff		 lea	 eax, DWORD PTR _strm$3[ebp+16]
  00a9c	c7 45 fc 18 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 24 ; 00000018H
  00aa3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@
  00aa8	50		 push	 eax
  00aa9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00aae	83 c4 08	 add	 esp, 8
  00ab1	8b c8		 mov	 ecx, eax
  00ab3	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 11655: 			string devPathStr (strm.str());

  00ab8	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _devPathStr$20[ebp]
  00abe	50		 push	 eax
  00abf	8d 8d ac f6 ff
	ff		 lea	 ecx, DWORD PTR _strm$3[ebp]
  00ac5	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str

; 11656: 			const char *devPath = devPathStr.c_str();

  00aca	83 bd e0 fd ff
	ff 10		 cmp	 DWORD PTR _devPathStr$20[ebp+20], 16 ; 00000010H

; 11657: 
; 11658: 			OPEN_TEST_STRUCT openTest;
; 11659: 			if (!OpenDevice (devPath, &openTest, detectUnencryptedFilesystems))

  00ad1	8d 85 e4 f8 ff
	ff		 lea	 eax, DWORD PTR _openTest$12[ebp]
  00ad7	53		 push	 ebx
  00ad8	8d b5 cc fd ff
	ff		 lea	 esi, DWORD PTR _devPathStr$20[ebp]
  00ade	0f 43 b5 cc fd
	ff ff		 cmovae	 esi, DWORD PTR _devPathStr$20[ebp]
  00ae5	50		 push	 eax
  00ae6	56		 push	 esi
  00ae7	e8 00 00 00 00	 call	 _OpenDevice
  00aec	83 c4 0c	 add	 esp, 12			; 0000000cH
  00aef	85 c0		 test	 eax, eax
  00af1	75 50		 jne	 SHORT $LN25@GetAvailab

; 11660: 				continue;

  00af3	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _devPathStr$20[ebp+20]
  00af9	83 f8 10	 cmp	 eax, 16			; 00000010H
  00afc	72 13		 jb	 SHORT $LN2129@GetAvailab
  00afe	40		 inc	 eax
  00aff	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$20[ebp]
  00b05	50		 push	 eax
  00b06	ff b5 cc fd ff
	ff		 push	 DWORD PTR _devPathStr$20[ebp]
  00b0c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN2129@GetAvailab:
  00b11	8d 8d 14 f7 ff
	ff		 lea	 ecx, DWORD PTR _strm$3[ebp+104]
  00b17	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _devPathStr$20[ebp+20], 15 ; 0000000fH
  00b21	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _devPathStr$20[ebp+16], 0
  00b2b	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR _devPathStr$20[ebp], 0
  00b32	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00b37	c7 45 fc 1a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  00b3e	e9 56 02 00 00	 jmp	 $LN2793@GetAvailab
$LN25@GetAvailab:

; 11661: 
; 11662: 			DISK_PARTITION_INFO_STRUCT info;
; 11663: 			if (GetDeviceInfo (devPath, &info) && info.IsDynamic)

  00b43	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _info$15[ebp]
  00b49	50		 push	 eax
  00b4a	56		 push	 esi
  00b4b	e8 00 00 00 00	 call	 _GetDeviceInfo
  00b50	83 c4 08	 add	 esp, 8
  00b53	85 c0		 test	 eax, eax
  00b55	0f 84 f3 01 00
	00		 je	 $LN26@GetAvailab
  00b5b	83 bd 28 fd ff
	ff 00		 cmp	 DWORD PTR _info$15[ebp+556], 0
  00b62	0f 84 e6 01 00
	00		 je	 $LN26@GetAvailab

; 11664: 			{
; 11665: 				HostDevice device;

  00b68	33 c0		 xor	 eax, eax
  00b6a	c7 85 78 ff ff
	ff 00 00 01 00	 mov	 DWORD PTR _device$25[ebp], 65536 ; 00010000H
  00b74	0f 57 c0	 xorps	 xmm0, xmm0
  00b77	66 c7 85 7d ff
	ff ff 00 00	 mov	 WORD PTR _device$25[ebp+5], 0
  00b80	c7 45 94 0f 00
	00 00		 mov	 DWORD PTR _device$25[ebp+28], 15 ; 0000000fH
  00b87	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _device$25[ebp+24], 0
  00b8e	c6 45 80 00	 mov	 BYTE PTR _device$25[ebp+8], 0
  00b92	c7 45 ac 07 00
	00 00		 mov	 DWORD PTR _device$25[ebp+52], 7
  00b99	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _device$25[ebp+48], 0
  00ba0	66 89 45 98	 mov	 WORD PTR _device$25[ebp+32], ax
  00ba4	c7 45 c4 0f 00
	00 00		 mov	 DWORD PTR _device$25[ebp+76], 15 ; 0000000fH
  00bab	89 45 c0	 mov	 DWORD PTR _device$25[ebp+72], eax
  00bae	88 45 b0	 mov	 BYTE PTR _device$25[ebp+56], al
  00bb1	88 45 c8	 mov	 BYTE PTR _device$25[ebp+80], al
  00bb4	66 0f 13 45 d0	 movlpd	 QWORD PTR _device$25[ebp+88], xmm0
  00bb9	89 45 dc	 mov	 DWORD PTR _device$25[ebp+100], eax
  00bbc	89 45 e0	 mov	 DWORD PTR _device$25[ebp+104], eax
  00bbf	89 45 e4	 mov	 DWORD PTR _device$25[ebp+108], eax
  00bc2	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH

; 11666: 				device.DynamicVolume = true;
; 11667: 				device.IsPartition = true;

  00bc6	c6 85 7c ff ff
	ff 01		 mov	 BYTE PTR _device$25[ebp+4], 1

; 11668: 				device.SystemNumber = devNumber;

  00bcd	89 7d d8	 mov	 DWORD PTR _device$25[ebp+96], edi

; 11669: 				device.Path = devPath;

  00bd0	38 06		 cmp	 BYTE PTR [esi], al
  00bd2	75 04		 jne	 SHORT $LN2573@GetAvailab
  00bd4	33 c9		 xor	 ecx, ecx
  00bd6	eb 11		 jmp	 SHORT $LN2574@GetAvailab
$LN2573@GetAvailab:
  00bd8	8b ce		 mov	 ecx, esi
  00bda	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00bdd	0f 1f 00	 npad	 3
$LL2783@GetAvailab:
  00be0	8a 01		 mov	 al, BYTE PTR [ecx]
  00be2	41		 inc	 ecx
  00be3	84 c0		 test	 al, al
  00be5	75 f9		 jne	 SHORT $LL2783@GetAvailab
  00be7	2b ca		 sub	 ecx, edx
$LN2574@GetAvailab:
  00be9	51		 push	 ecx
  00bea	56		 push	 esi
  00beb	8d 4d b0	 lea	 ecx, DWORD PTR _device$25[ebp+56]
  00bee	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 11670: 				device.Size = info.partInfo.PartitionLength.QuadPart;
; 11671: 				device.HasUnencryptedFilesystem = (detectUnencryptedFilesystems && openTest.FilesystemDetected) ? true : false;

  00bf3	80 7d 18 00	 cmp	 BYTE PTR _detectUnencryptedFilesystems$[ebp], 0
  00bf7	8b 85 0c fd ff
	ff		 mov	 eax, DWORD PTR _info$15[ebp+528]
  00bfd	89 45 d0	 mov	 DWORD PTR _device$25[ebp+88], eax
  00c00	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _info$15[ebp+532]
  00c06	89 45 d4	 mov	 DWORD PTR _device$25[ebp+92], eax
  00c09	74 10		 je	 SHORT $LN42@GetAvailab
  00c0b	83 bd f8 fa ff
	ff 00		 cmp	 DWORD PTR _openTest$12[ebp+532], 0
  00c12	c6 85 7e ff ff
	ff 01		 mov	 BYTE PTR _device$25[ebp+6], 1
  00c19	75 07		 jne	 SHORT $LN43@GetAvailab
$LN42@GetAvailab:
  00c1b	c6 85 7e ff ff
	ff 00		 mov	 BYTE PTR _device$25[ebp+6], 0
$LN43@GetAvailab:

; 11672: 
; 11673: 				if (!noDeviceProperties)

  00c22	80 7d 0c 00	 cmp	 BYTE PTR _noDeviceProperties$[ebp], 0
  00c26	0f 85 05 01 00
	00		 jne	 $LN2618@GetAvailab

; 11674: 				{
; 11675: 					wstringstream ws;

  00c2c	6a 01		 push	 1
  00c2e	6a 03		 push	 3
  00c30	8d 8d fc f5 ff
	ff		 lea	 ecx, DWORD PTR _ws$2[ebp]
  00c36	e8 00 00 00 00	 call	 ??0?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@H@Z ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 11676: 					ws << devPathStr.c_str();

  00c3b	83 bd e0 fd ff
	ff 10		 cmp	 DWORD PTR _devPathStr$20[ebp+20], 16 ; 00000010H
  00c42	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _devPathStr$20[ebp]
  00c48	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  00c4c	0f 43 85 cc fd
	ff ff		 cmovae	 eax, DWORD PTR _devPathStr$20[ebp]
  00c53	50		 push	 eax
  00c54	8d 85 0c f6 ff
	ff		 lea	 eax, DWORD PTR _ws$2[ebp+16]
  00c5a	50		 push	 eax
  00c5b	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  00c60	83 c4 08	 add	 esp, 8

; 11677: 					int driveNumber = GetDiskDeviceDriveLetter ((wchar_t *) ws.str().c_str());

  00c63	8d 85 44 fd ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  00c69	8d 8d fc f5 ff
	ff		 lea	 ecx, DWORD PTR _ws$2[ebp]
  00c6f	50		 push	 eax
  00c70	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::str
  00c75	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00c79	72 02		 jb	 SHORT $LN2606@GetAvailab
  00c7b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN2606@GetAvailab:
  00c7d	50		 push	 eax
  00c7e	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00c83	83 c4 04	 add	 esp, 4
  00c86	8d 8d 44 fd ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00c8c	8b d8		 mov	 ebx, eax
  00c8e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 11678: 
; 11679: 					if (driveNumber >= 0)

  00c93	85 db		 test	 ebx, ebx
  00c95	78 68		 js	 SHORT $LN30@GetAvailab

; 11680: 					{
; 11681: 						device.MountPoint += (char) (driveNumber + 'A');

  00c97	8d 4b 41	 lea	 ecx, DWORD PTR [ebx+65]
  00c9a	0f b6 c9	 movzx	 ecx, cl
  00c9d	51		 push	 ecx
  00c9e	6a 01		 push	 1
  00ca0	8d 4d 80	 lea	 ecx, DWORD PTR _device$25[ebp+8]
  00ca3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 11682: 						device.MountPoint += ":";

  00ca8	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00cad	8d 4d 80	 lea	 ecx, DWORD PTR _device$25[ebp+8]
  00cb0	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 11683: 
; 11684: 						wchar_t name[64];
; 11685: 						if (GetDriveLabel (driveNumber, name, sizeof (name)))

  00cb5	68 80 00 00 00	 push	 128			; 00000080H
  00cba	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _name$23[ebp]
  00cc0	50		 push	 eax
  00cc1	53		 push	 ebx
  00cc2	e8 00 00 00 00	 call	 _GetDriveLabel
  00cc7	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cca	85 c0		 test	 eax, eax
  00ccc	74 0f		 je	 SHORT $LN29@GetAvailab

; 11686: 							device.Name = name;

  00cce	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _name$23[ebp]
  00cd4	50		 push	 eax
  00cd5	8d 4d 98	 lea	 ecx, DWORD PTR _device$25[ebp+32]
  00cd8	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
$LN29@GetAvailab:

; 11687: 
; 11688: 						if (GetSystemDriveLetter() == 'A' + driveNumber)

  00cdd	e8 00 00 00 00	 call	 _GetSystemDriveLetter
  00ce2	0f b6 95 79 ff
	ff ff		 movzx	 edx, BYTE PTR _device$25[ebp+1]
  00ce9	0f be c8	 movsx	 ecx, al
  00cec	8d 43 41	 lea	 eax, DWORD PTR [ebx+65]
  00cef	3b c8		 cmp	 ecx, eax
  00cf1	b8 01 00 00 00	 mov	 eax, 1
  00cf6	0f 44 d0	 cmove	 edx, eax
  00cf9	88 95 79 ff ff
	ff		 mov	 BYTE PTR _device$25[ebp+1], dl
$LN30@GetAvailab:

; 11689: 							device.ContainsSystem = true;
; 11690: 					}
; 11691: 				}

  00cff	8d 8d 64 f6 ff
	ff		 lea	 ecx, DWORD PTR _ws$2[ebp+104]
  00d05	e8 00 00 00 00	 call	 ??1?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@UAE@XZ ; std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00d0a	8d 85 64 f6 ff
	ff		 lea	 eax, DWORD PTR _ws$2[ebp+104]
  00d10	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  00d14	50		 push	 eax
  00d15	c7 85 64 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ws$2[ebp+104], OFFSET ??_7ios_base@std@@6B@
  00d1f	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00d24	8b 9d dc f8 ff
	ff		 mov	 ebx, DWORD PTR tv6460[ebp]
  00d2a	83 c4 04	 add	 esp, 4
  00d2d	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
$LN2618@GetAvailab:

; 11692: 
; 11693: 				devices.push_back (device);

  00d31	8b 8d d0 f8 ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00d37	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _device$25[ebp]
  00d3d	50		 push	 eax
  00d3e	e8 00 00 00 00	 call	 ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back

; 11694: 			}

  00d43	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _device$25[ebp]
  00d49	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
$LN26@GetAvailab:

; 11695: 		}

  00d4e	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _devPathStr$20[ebp+20]
  00d54	83 f8 10	 cmp	 eax, 16			; 00000010H
  00d57	72 13		 jb	 SHORT $LN2626@GetAvailab
  00d59	40		 inc	 eax
  00d5a	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$20[ebp]
  00d60	50		 push	 eax
  00d61	ff b5 cc fd ff
	ff		 push	 DWORD PTR _devPathStr$20[ebp]
  00d67	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN2626@GetAvailab:
  00d6c	8d 8d 14 f7 ff
	ff		 lea	 ecx, DWORD PTR _strm$3[ebp+104]
  00d72	c7 85 e0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _devPathStr$20[ebp+20], 15 ; 0000000fH
  00d7c	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _devPathStr$20[ebp+16], 0
  00d86	c6 85 cc fd ff
	ff 00		 mov	 BYTE PTR _devPathStr$20[ebp], 0
  00d8d	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00d92	c7 45 fc 1e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 30 ; 0000001eH
$LN2793@GetAvailab:
  00d99	8d 85 14 f7 ff
	ff		 lea	 eax, DWORD PTR _strm$3[ebp+104]
  00d9f	c7 85 14 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _strm$3[ebp+104], OFFSET ??_7ios_base@std@@6B@
  00da9	50		 push	 eax
  00daa	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00daf	47		 inc	 edi
  00db0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00db4	83 c4 04	 add	 esp, 4
  00db7	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  00dbd	0f 8c c3 fc ff
	ff		 jl	 $LL10@GetAvailab
  00dc3	8b bd d0 f8 ff
	ff		 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
$LN9@GetAvailab:

; 11696: 	}
; 11697: 
; 11698: 	return devices;

  00dc9	8b c7		 mov	 eax, edi

; 11699: }

  00dcb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00dce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00dd5	59		 pop	 ecx
  00dd6	5f		 pop	 edi
  00dd7	5e		 pop	 esi
  00dd8	5b		 pop	 ebx
  00dd9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ddc	33 cd		 xor	 ecx, ebp
  00dde	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00de3	8b e5		 mov	 esp, ebp
  00de5	5d		 pop	 ebp
  00de6	c3		 ret	 0
$LN2787@GetAvailab:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$0:
  00000	8b 85 cc f8 ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN47@GetAvailab
  0000f	83 a5 cc f8 ff
	ff fe		 and	 DWORD PTR $T8[ebp], -2	; fffffffeH
  00016	8b 8d c4 f8 ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
$LN47@GetAvailab:
  00021	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$12:
  00022	8b 85 cc f8 ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  00028	83 e0 02	 and	 eax, 2
  0002b	0f 84 12 00 00
	00		 je	 $LN71@GetAvailab
  00031	83 a5 cc f8 ff
	ff fd		 and	 DWORD PTR $T8[ebp], -3	; fffffffdH
  00038	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+104]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN71@GetAvailab:
  00043	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$16:
  00044	8d 8d 24 f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+24]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$13:
  0004f	8d 8d 2c f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp+32]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char> >::~basic_iostream<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$20:
  0005a	8b 8d dc f8 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$1:
  00065	8d 8d 0c f8 ff
	ff		 lea	 ecx, DWORD PTR _strm$5[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$2:
  00070	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$21[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$84:
  0007b	e8 00 00 00 00	 call	 ___std_terminate
  00080	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$3:
  00081	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR _device$19[ebp]
  00087	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$167:
  0008c	8b 85 cc f8 ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  00092	83 e0 20	 and	 eax, 32			; 00000020H
  00095	0f 84 12 00 00
	00		 je	 $LN824@GetAvailab
  0009b	83 a5 cc f8 ff
	ff df		 and	 DWORD PTR $T8[ebp], -33	; ffffffdfH
  000a2	8d 8d c4 f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp+104]
  000a8	e9 00 00 00 00	 jmp	 ??1?$basic_ios@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::~basic_ios<wchar_t,std::char_traits<wchar_t> >
$LN824@GetAvailab:
  000ad	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$171:
  000ae	8d 8d 74 f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp+24]
  000b4	e9 00 00 00 00	 jmp	 ??1?$basic_istream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t> >::~basic_istream<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$168:
  000b9	8d 8d 7c f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp+32]
  000bf	e9 00 00 00 00	 jmp	 ??1?$basic_iostream@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_iostream<wchar_t,std::char_traits<wchar_t> >::~basic_iostream<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$175:
  000c4	8b 8d e0 f8 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@UAE@XZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >::~basic_streambuf<wchar_t,std::char_traits<wchar_t> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$4:
  000cf	8d 8d 5c f7 ff
	ff		 lea	 ecx, DWORD PTR _ws$4[ebp]
  000d5	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$276:
  000da	e8 00 00 00 00	 call	 ___std_terminate
  000df	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$475:
  000e0	e8 00 00 00 00	 call	 ___std_terminate
  000e5	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$54:
  000e6	e8 00 00 00 00	 call	 ___std_terminate
  000eb	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$436:
  000ec	e8 00 00 00 00	 call	 ___std_terminate
  000f1	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$6:
  000f2	8d 8d ac f6 ff
	ff		 lea	 ecx, DWORD PTR _strm$3[ebp]
  000f8	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$7:
  000fd	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _devPathStr$20[ebp]
  00103	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$508:
  00108	e8 00 00 00 00	 call	 ___std_terminate
  0010d	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$8:
  0010e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _device$25[ebp]
  00114	e9 00 00 00 00	 jmp	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$9:
  00119	8d 8d fc f5 ff
	ff		 lea	 ecx, DWORD PTR _ws$2[ebp]
  0011f	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$599:
  00124	e8 00 00 00 00	 call	 ___std_terminate
  00129	c3		 ret	 0
__unwindfunclet$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z$629:
  0012a	e8 00 00 00 00	 call	 ___std_terminate
  0012f	c3		 ret	 0
__ehhandler$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z:
  00130	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00134	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00137	8b 8a f8 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2568]
  0013d	33 c8		 xor	 ecx, eax
  0013f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00144	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00147	33 c8		 xor	 ecx, eax
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z
  00153	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ENDP ; GetAvailableHostDevices
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; StringToUpperCase, COMDAT

; 10991: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 10992: 	string upperCase (str);

  00005	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b ce		 mov	 ecx, esi
  0000a	6a ff		 push	 -1
  0000c	6a 00		 push	 0
  0000e	ff 75 0c	 push	 DWORD PTR _str$[ebp]
  00011	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00018	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00026	c6 06 00	 mov	 BYTE PTR [esi], 0
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 10993: 	_strupr ((char *) upperCase.c_str());

  0002e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00032	72 12		 jb	 SHORT $LN143@StringToUp
  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 __strupr
  0003c	83 c4 04	 add	 esp, 4

; 10994: 	return upperCase;

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi

; 10995: }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0

; 10993: 	_strupr ((char *) upperCase.c_str());

$LN143@StringToUp:
  00046	8b c6		 mov	 eax, esi
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 __strupr
  0004e	83 c4 04	 add	 esp, 4

; 10994: 	return upperCase;

  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi

; 10995: }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?StringToUpperCase@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; StringToUpperCase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?WideToUtf8String@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
_TEXT	SEGMENT
$T1 = -65552						; size = 4
$T2 = -65548						; size = 8
_buf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_wideString$ = 12					; size = 4
?WideToUtf8String@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC ; WideToUtf8String, COMDAT

; 10947: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 00 01 00	 mov	 eax, 65552		; 00010010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _wideString$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	c7 85 f0 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 10948: 	if (wideString.empty())

  00028	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002c	75 22		 jne	 SHORT $LN5@WideToUtf8

; 10949: 		return std::string();

  0002e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 10956: 	return buf;

  00035	8b c6		 mov	 eax, esi
  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003e	c6 06 00	 mov	 BYTE PTR [esi], 0
  00041	5e		 pop	 esi

; 10957: }

  00042	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00045	33 cd		 xor	 ecx, ebp
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN5@WideToUtf8:

; 10950: 
; 10951: 	char buf[65536];
; 10952: 	int len = WideCharToMultiByte (CP_UTF8, 0, wideString.c_str(), -1, buf, array_capacity (buf) - 1, NULL, NULL);

  00050	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00054	72 02		 jb	 SHORT $LN144@WideToUtf8
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
$LN144@WideToUtf8:
  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00061	8d 8d fc ff fe
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00067	51		 push	 ecx
  00068	6a ff		 push	 -1
  0006a	50		 push	 eax
  0006b	6a 00		 push	 0
  0006d	68 e9 fd 00 00	 push	 65001			; 0000fde9H
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 10953: 	throw_sys_if (len == 0);

  00078	85 c0		 test	 eax, eax
  0007a	74 2e		 je	 SHORT $LN155@WideToUtf8

; 10954: 
; 10955: 	buf[len] = 0;

  0007c	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00081	73 4e		 jae	 SHORT $LN8@WideToUtf8
  00083	c6 84 05 fc ff
	fe ff 00	 mov	 BYTE PTR _buf$[ebp+eax], 0

; 10956: 	return buf;

  0008b	8b ce		 mov	 ecx, esi
  0008d	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 10957: }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	8b c6		 mov	 eax, esi
  0009e	33 cd		 xor	 ecx, ebp
  000a0	5e		 pop	 esi
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
$LN155@WideToUtf8:

; 10953: 	throw_sys_if (len == 0);

  000aa	c7 85 f4 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_7SystemException@GostCrypt@@6B@
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000ba	89 85 f8 ff fe
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
  000c0	8d 85 f4 ff fe
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c6	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@GostCrypt@@
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN157@WideToUtf8:
$LN8@WideToUtf8:

; 10954: 
; 10955: 	buf[len] = 0;

  000d1	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN158@WideToUtf8:
$LN153@WideToUtf8:
  000d6	cc		 int	 3
?WideToUtf8String@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ENDP ; WideToUtf8String
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
_TEXT	SEGMENT
$T1 = -65552						; size = 4
$T2 = -65548						; size = 8
_buf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_wideString$ = 12					; size = 4
?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC ; WideToSingleString, COMDAT

; 10969: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 00 01 00	 mov	 eax, 65552		; 00010010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _wideString$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	c7 85 f0 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 10970: 	if (wideString.empty())

  00028	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002c	75 22		 jne	 SHORT $LN5@WideToSing

; 10971: 		return std::string();

  0002e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 10978: 	return buf;

  00035	8b c6		 mov	 eax, esi
  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003e	c6 06 00	 mov	 BYTE PTR [esi], 0
  00041	5e		 pop	 esi

; 10979: }

  00042	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00045	33 cd		 xor	 ecx, ebp
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN5@WideToSing:

; 10972: 
; 10973: 	char buf[65536];
; 10974: 	int len = WideCharToMultiByte (CP_ACP, 0, wideString.c_str(), -1, buf, array_capacity (buf) - 1, NULL, NULL);

  00050	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00054	72 02		 jb	 SHORT $LN144@WideToSing
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
$LN144@WideToSing:
  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00061	8d 8d fc ff fe
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  00067	51		 push	 ecx
  00068	6a ff		 push	 -1
  0006a	50		 push	 eax
  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 10975: 	throw_sys_if (len == 0);

  00075	85 c0		 test	 eax, eax
  00077	74 2e		 je	 SHORT $LN155@WideToSing

; 10976: 
; 10977: 	buf[len] = 0;

  00079	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  0007e	73 4e		 jae	 SHORT $LN8@WideToSing
  00080	c6 84 05 fc ff
	fe ff 00	 mov	 BYTE PTR _buf$[ebp+eax], 0

; 10978: 	return buf;

  00088	8b ce		 mov	 ecx, esi
  0008a	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 10979: }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	8b c6		 mov	 eax, esi
  0009b	33 cd		 xor	 ecx, ebp
  0009d	5e		 pop	 esi
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN155@WideToSing:

; 10975: 	throw_sys_if (len == 0);

  000a7	c7 85 f4 ff fe
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_7SystemException@GostCrypt@@6B@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000b7	89 85 f8 ff fe
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
  000bd	8d 85 f4 ff fe
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c3	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@GostCrypt@@
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN157@WideToSing:
$LN8@WideToSing:

; 10976: 
; 10977: 	buf[len] = 0;

  000ce	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN158@WideToSing:
$LN153@WideToSing:
  000d3	cc		 int	 3
?WideToSingleString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ENDP ; WideToSingleString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T1 = -131088						; size = 4
$T2 = -131084						; size = 8
_wbuf$ = -131076					; size = 131072
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_utf8String$ = 12					; size = 4
?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; Utf8StringToWide, COMDAT

; 10925: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 00 02 00	 mov	 eax, 131088		; 00020010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _utf8String$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	c7 85 f0 ff fd
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 10926: 	if (utf8String.empty())

  00028	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0002c	75 24		 jne	 SHORT $LN5@Utf8String

; 10927: 		return std::wstring();

  0002e	33 c0		 xor	 eax, eax
  00030	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003e	66 89 06	 mov	 WORD PTR [esi], ax

; 10934: 	return wbuf;

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi

; 10935: }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	33 cd		 xor	 ecx, ebp
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN5@Utf8String:

; 10928: 
; 10929: 	WCHAR wbuf[65536];
; 10930: 	int wideLen = MultiByteToWideChar (CP_UTF8, 0, utf8String.c_str(), -1, wbuf, array_capacity (wbuf) - 1);

  00052	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00056	72 02		 jb	 SHORT $LN146@Utf8String
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN146@Utf8String:
  0005a	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0005f	8d 85 fc ff fd
	ff		 lea	 eax, DWORD PTR _wbuf$[ebp]
  00065	50		 push	 eax
  00066	6a ff		 push	 -1
  00068	51		 push	 ecx
  00069	6a 00		 push	 0
  0006b	68 e9 fd 00 00	 push	 65001			; 0000fde9H
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 10931: 	throw_sys_if (wideLen == 0);

  00076	85 c0		 test	 eax, eax
  00078	74 32		 je	 SHORT $LN157@Utf8String

; 10932: 
; 10933: 	wbuf[wideLen] = 0;

  0007a	03 c0		 add	 eax, eax
  0007c	3d 00 00 02 00	 cmp	 eax, 131072		; 00020000H
  00081	73 50		 jae	 SHORT $LN8@Utf8String
  00083	33 c9		 xor	 ecx, ecx
  00085	66 89 8c 05 fc
	ff fd ff	 mov	 WORD PTR _wbuf$[ebp+eax], cx

; 10934: 	return wbuf;

  0008d	8d 85 fc ff fd
	ff		 lea	 eax, DWORD PTR _wbuf$[ebp]
  00093	50		 push	 eax
  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 10935: }

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	8b c6		 mov	 eax, esi
  000a0	33 cd		 xor	 ecx, ebp
  000a2	5e		 pop	 esi
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN157@Utf8String:

; 10931: 	throw_sys_if (wideLen == 0);

  000ac	c7 85 f4 ff fd
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_7SystemException@GostCrypt@@6B@
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000bc	89 85 f8 ff fd
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
  000c2	8d 85 f4 ff fd
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c8	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@GostCrypt@@
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN159@Utf8String:
$LN8@Utf8String:

; 10932: 
; 10933: 	wbuf[wideLen] = 0;

  000d3	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN160@Utf8String:
$LN155@Utf8String:
  000d8	cc		 int	 3
?Utf8StringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; Utf8StringToWide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T1 = -131088						; size = 4
$T2 = -131084						; size = 8
_wbuf$ = -131076					; size = 131072
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_singleString$ = 12					; size = 4
?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; SingleStringToWide, COMDAT

; 10903: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 00 02 00	 mov	 eax, 131088		; 00020010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _singleString$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	c7 85 f0 ff fd
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 10904: 	if (singleString.empty())

  00028	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0002c	75 24		 jne	 SHORT $LN5@SingleStri

; 10905: 		return std::wstring();

  0002e	33 c0		 xor	 eax, eax
  00030	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003e	66 89 06	 mov	 WORD PTR [esi], ax

; 10912: 	return wbuf;

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi

; 10913: }

  00044	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00047	33 cd		 xor	 ecx, ebp
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN5@SingleStri:

; 10906: 
; 10907: 	WCHAR wbuf[65536];
; 10908: 	int wideLen = MultiByteToWideChar (CP_ACP, 0, singleString.c_str(), -1, wbuf, array_capacity (wbuf) - 1);

  00052	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00056	72 02		 jb	 SHORT $LN146@SingleStri
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN146@SingleStri:
  0005a	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0005f	8d 85 fc ff fd
	ff		 lea	 eax, DWORD PTR _wbuf$[ebp]
  00065	50		 push	 eax
  00066	6a ff		 push	 -1
  00068	51		 push	 ecx
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 10909: 	throw_sys_if (wideLen == 0);

  00073	85 c0		 test	 eax, eax
  00075	74 32		 je	 SHORT $LN157@SingleStri

; 10910: 
; 10911: 	wbuf[wideLen] = 0;

  00077	03 c0		 add	 eax, eax
  00079	3d 00 00 02 00	 cmp	 eax, 131072		; 00020000H
  0007e	73 50		 jae	 SHORT $LN8@SingleStri
  00080	33 c9		 xor	 ecx, ecx
  00082	66 89 8c 05 fc
	ff fd ff	 mov	 WORD PTR _wbuf$[ebp+eax], cx

; 10912: 	return wbuf;

  0008a	8d 85 fc ff fd
	ff		 lea	 eax, DWORD PTR _wbuf$[ebp]
  00090	50		 push	 eax
  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 10913: }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	8b c6		 mov	 eax, esi
  0009d	33 cd		 xor	 ecx, ebp
  0009f	5e		 pop	 esi
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
$LN157@SingleStri:

; 10909: 	throw_sys_if (wideLen == 0);

  000a9	c7 85 f4 ff fd
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_7SystemException@GostCrypt@@6B@
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000b9	89 85 f8 ff fd
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
  000bf	8d 85 f4 ff fd
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c5	68 00 00 00 00	 push	 OFFSET __TI2?AUSystemException@GostCrypt@@
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN159@SingleStri:
$LN8@SingleStri:

; 10910: 
; 10911: 	wbuf[wideLen] = 0;

  000d0	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN160@SingleStri:
$LN155@SingleStri:
  000d5	cc		 int	 3
?SingleStringToWide@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; SingleStringToWide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z
_TEXT	SEGMENT
_ofn$ = -3200						; size = 88
_defaultExtension$GSCopy$1$ = -3112			; size = 4
_stringId$GSCopy$1$ = -3108				; size = 4
_browseFilter$GSCopy$1$ = -3104				; size = 4
_hwndDlg$GSCopy$1$ = -3100				; size = 4
_lpszFileName$GSCopy$1$ = -3096				; size = 4
_filter$ = -3092					; size = 2048
_wInitialDir$ = -1044					; size = 520
_file$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_stringId$ = 12						; size = 4
_initialDir$ = 16					; size = 4
_lpszFileName$ = 20					; size = 4
_keepHistory$ = 24					; size = 4
_saveMode$ = 28						; size = 4
_browseFilter$ = 32					; size = 4
_initialFileName$ = 36					; size = 4
_defaultExtension$ = 40					; size = 4
?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z PROC ; BrowseFilesInDir, COMDAT

; 4454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 0c 00
	00		 sub	 esp, 3200		; 00000c80H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  00016	89 85 e4 f3 ff
	ff		 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], eax
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _stringId$[ebp]
  0001f	53		 push	 ebx
  00020	8b 5d 10	 mov	 ebx, DWORD PTR _initialDir$[ebp]
  00023	89 85 dc f3 ff
	ff		 mov	 DWORD PTR _stringId$GSCopy$1$[ebp], eax
  00029	8b 45 14	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0002c	56		 push	 esi
  0002d	89 85 e8 f3 ff
	ff		 mov	 DWORD PTR _lpszFileName$GSCopy$1$[ebp], eax
  00033	8b 45 20	 mov	 eax, DWORD PTR _browseFilter$[ebp]
  00036	57		 push	 edi
  00037	8b 7d 24	 mov	 edi, DWORD PTR _initialFileName$[ebp]
  0003a	89 85 e0 f3 ff
	ff		 mov	 DWORD PTR _browseFilter$GSCopy$1$[ebp], eax
  00040	8b 45 28	 mov	 eax, DWORD PTR _defaultExtension$[ebp]
  00043	68 08 02 00 00	 push	 520			; 00000208H
  00048	89 85 d8 f3 ff
	ff		 mov	 DWORD PTR _defaultExtension$GSCopy$1$[ebp], eax
  0004e	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00054	6a 00		 push	 0
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memset
  0005c	68 08 02 00 00	 push	 520			; 00000208H
  00061	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _wInitialDir$[ebp]
  00067	6a 00		 push	 0
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _memset
  0006f	83 c4 18	 add	 esp, 24			; 00000018H

; 4455 : 	OPENFILENAMEW ofn;
; 4456 : 	wchar_t file[GST_MAX_PATH] = { 0 };
; 4457 : 	wchar_t wInitialDir[GST_MAX_PATH] = { 0 };
; 4458 : 	wchar_t filter[1024];
; 4459 : 	BOOL status = FALSE;

  00072	33 f6		 xor	 esi, esi

; 4460 : 
; 4461 : 	CoInitialize (NULL);

  00074	56		 push	 esi
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 4462 : 
; 4463 : 	ZeroMemory (&ofn, sizeof (ofn));

  0007b	6a 58		 push	 88			; 00000058H
  0007d	8d 85 80 f3 ff
	ff		 lea	 eax, DWORD PTR _ofn$[ebp]
  00083	56		 push	 esi
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memset

; 4464 : 	*lpszFileName = 0;

  0008a	8b 85 e8 f3 ff
	ff		 mov	 eax, DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	c6 00 00	 mov	 BYTE PTR [eax], 0

; 4465 : 
; 4466 : 	if (initialDir)

  00096	85 db		 test	 ebx, ebx
  00098	74 26		 je	 SHORT $LN2@BrowseFile

; 4467 : 	{
; 4468 : 		swprintf_s (wInitialDir, sizeof (wInitialDir) / 2, L"%hs", initialDir);

  0009a	53		 push	 ebx
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  000a0	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _wInitialDir$[ebp]
  000a6	68 04 01 00 00	 push	 260			; 00000104H
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _swprintf_s

; 4469 : 		ofn.lpstrInitialDir			= wInitialDir;

  000b1	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _wInitialDir$[ebp]
  000b7	83 c4 10	 add	 esp, 16			; 00000010H
  000ba	89 85 ac f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+44], eax
$LN2@BrowseFile:

; 4470 : 	}
; 4471 : 
; 4472 : 	if (initialFileName)

  000c0	85 ff		 test	 edi, edi
  000c2	74 15		 je	 SHORT $LN3@BrowseFile

; 4473 : 		wcscpy_s (file, array_capacity (file), initialFileName);

  000c4	57		 push	 edi
  000c5	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  000cb	68 04 01 00 00	 push	 260			; 00000104H
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _wcscpy_s
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@BrowseFile:

; 4474 : 
; 4475 : 	ofn.lStructSize				= sizeof (ofn);
; 4476 : 	ofn.hwndOwner				= hwndDlg;

  000d9	8b 85 e4 f3 ff
	ff		 mov	 eax, DWORD PTR _hwndDlg$GSCopy$1$[ebp]

; 4477 : 
; 4478 : 	wsprintfW (filter, L"%ls (*.*)%c*.*%c%ls (*.gst)%c*.gst%c%c",

  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BLEDMAHO@GST_VOLUMES?$AA@
  000ea	c7 85 80 f3 ff
	ff 58 00 00 00	 mov	 DWORD PTR _ofn$[ebp], 88 ; 00000058H
  000f4	89 85 84 f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+4], eax
  000fa	e8 00 00 00 00	 call	 _GetString
  000ff	83 c4 04	 add	 esp, 4
  00102	50		 push	 eax
  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_09EEODDAII@ALL_FILES?$AA@
  0010c	e8 00 00 00 00	 call	 _GetString
  00111	83 c4 04	 add	 esp, 4
  00114	50		 push	 eax
  00115	8d 85 ec f3 ff
	ff		 lea	 eax, DWORD PTR _filter$[ebp]
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@HPAMBPDO@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAg?$AAs?$AAt?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAg@
  00120	50		 push	 eax
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 4479 : 		GetString ("ALL_FILES"), 0, 0, GetString ("GST_VOLUMES"), 0, 0, 0);
; 4480 : 	ofn.lpstrFilter				= browseFilter ? browseFilter : filter;

  00127	8b 8d e0 f3 ff
	ff		 mov	 ecx, DWORD PTR _browseFilter$GSCopy$1$[ebp]
  0012d	8d 85 ec f3 ff
	ff		 lea	 eax, DWORD PTR _filter$[ebp]

; 4481 : 	ofn.nFilterIndex			= 1;
; 4482 : 	ofn.lpstrFile				= file;
; 4483 : 	ofn.nMaxFile				= sizeof (file) / sizeof (file[0]);
; 4484 : 	ofn.lpstrTitle				= GetString (stringId);

  00133	ff b5 dc f3 ff
	ff		 push	 DWORD PTR _stringId$GSCopy$1$[ebp]
  00139	85 c9		 test	 ecx, ecx
  0013b	c7 85 98 f3 ff
	ff 01 00 00 00	 mov	 DWORD PTR _ofn$[ebp+24], 1
  00145	c7 85 a0 f3 ff
	ff 04 01 00 00	 mov	 DWORD PTR _ofn$[ebp+32], 260 ; 00000104H
  0014f	0f 45 c1	 cmovne	 eax, ecx
  00152	89 85 8c f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+12], eax
  00158	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  0015e	89 85 9c f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+28], eax
  00164	e8 00 00 00 00	 call	 _GetString
  00169	8b 5d 1c	 mov	 ebx, DWORD PTR _saveMode$[ebp]
  0016c	33 c9		 xor	 ecx, ecx

; 4485 : 	ofn.lpstrDefExt				= defaultExtension;
; 4486 : 	ofn.Flags					= OFN_HIDEREADONLY

  0016e	8b 7d 18	 mov	 edi, DWORD PTR _keepHistory$[ebp]
  00171	83 c4 28	 add	 esp, 40			; 00000028H
  00174	85 db		 test	 ebx, ebx
  00176	89 85 b0 f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+48], eax
  0017c	8b 85 d8 f3 ff
	ff		 mov	 eax, DWORD PTR _defaultExtension$GSCopy$1$[ebp]
  00182	0f 95 c1	 setne	 cl
  00185	89 85 bc f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+60], eax
  0018b	33 d2		 xor	 edx, edx
  0018d	b8 00 00 00 02	 mov	 eax, 33554432		; 02000000H
  00192	85 ff		 test	 edi, edi
  00194	0f 45 c2	 cmovne	 eax, edx
  00197	8d 0c 4d 04 08
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2052]
  0019e	0b c8		 or	 ecx, eax
  001a0	89 8d b4 f3 ff
	ff		 mov	 DWORD PTR _ofn$[ebp+52], ecx

; 4487 : 		| OFN_PATHMUSTEXIST
; 4488 : 		| (keepHistory ? 0 : OFN_DONTADDTORECENT)
; 4489 : 		| (saveMode ? OFN_OVERWRITEPROMPT : 0);
; 4490 : 
; 4491 : 	if (!keepHistory)

  001a6	85 ff		 test	 edi, edi
  001a8	75 05		 jne	 SHORT $LN4@BrowseFile

; 4492 : 		CleanLastVisitedMRU ();

  001aa	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN4@BrowseFile:

; 4493 : 
; 4494 : 	SystemFileSelectorCallerThreadId = GetCurrentThreadId();

  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  001b5	a3 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallerThreadId@@3KA, eax ; SystemFileSelectorCallerThreadId

; 4495 : 	SystemFileSelectorCallPending = TRUE;
; 4496 : 
; 4497 : 	if (!saveMode)
; 4498 : 	{
; 4499 : 		if (!GetOpenFileNameW (&ofn))

  001ba	8d 85 80 f3 ff
	ff		 lea	 eax, DWORD PTR _ofn$[ebp]
  001c0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 1 ; SystemFileSelectorCallPending
  001ca	50		 push	 eax
  001cb	85 db		 test	 ebx, ebx
  001cd	75 08		 jne	 SHORT $LN5@BrowseFile
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetOpenFileNameW@4

; 4500 : 			goto ret;
; 4501 : 	}
; 4502 : 	else

  001d5	eb 06		 jmp	 SHORT $LN14@BrowseFile
$LN5@BrowseFile:

; 4503 : 	{
; 4504 : 		if (!GetSaveFileNameW (&ofn))

  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSaveFileNameW@4
$LN14@BrowseFile:
  001dd	85 c0		 test	 eax, eax
  001df	74 36		 je	 SHORT $ret$16

; 4505 : 			goto ret;
; 4506 : 	}
; 4507 : 
; 4508 : 	SystemFileSelectorCallPending = FALSE;
; 4509 : 
; 4510 : 	WideCharToMultiByte (CP_ACP, 0, file, -1, lpszFileName, MAX_PATH, NULL, NULL);

  001e1	6a 00		 push	 0
  001e3	6a 00		 push	 0
  001e5	68 04 01 00 00	 push	 260			; 00000104H
  001ea	ff b5 e8 f3 ff
	ff		 push	 DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  001f0	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  001f6	89 35 00 00 00
	00		 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, esi ; SystemFileSelectorCallPending
  001fc	6a ff		 push	 -1
  001fe	50		 push	 eax
  001ff	6a 00		 push	 0
  00201	6a 00		 push	 0
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 4511 : 
; 4512 : 	if (!keepHistory)

  00209	85 ff		 test	 edi, edi
  0020b	75 05		 jne	 SHORT $LN11@BrowseFile

; 4513 : 		CleanLastVisitedMRU ();

  0020d	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN11@BrowseFile:

; 4514 : 
; 4515 : 	status = TRUE;

  00212	be 01 00 00 00	 mov	 esi, 1
$ret$16:

; 4516 : 
; 4517 : ret:
; 4518 : 	SystemFileSelectorCallPending = FALSE;

  00217	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 0 ; SystemFileSelectorCallPending

; 4519 : 	ResetCurrentDirectory();

  00221	e8 00 00 00 00	 call	 _ResetCurrentDirectory

; 4520 : 	CoUninitialize();

  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 4521 : 
; 4522 : 	return status;
; 4523 : }

  0022c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022f	8b c6		 mov	 eax, esi
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	33 cd		 xor	 ecx, ebp
  00235	5b		 pop	 ebx
  00236	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c3		 ret	 0
?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ENDP ; BrowseFilesInDir
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GHostDevice@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GHostDevice@@QAEPAXI@Z PROC				; HostDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 70		 push	 112			; 00000070H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GHostDevice@@QAEPAXI@Z ENDP				; HostDevice::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??4HostDevice@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4HostDevice@@QAEAAU0@ABU0@@Z PROC			; HostDevice::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000d	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00010	88 06		 mov	 BYTE PTR [esi], al
  00012	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00016	88 46 01	 mov	 BYTE PTR [esi+1], al
  00019	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  0001d	88 46 02	 mov	 BYTE PTR [esi+2], al
  00020	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00024	88 46 03	 mov	 BYTE PTR [esi+3], al
  00027	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  0002b	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002e	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  00032	88 46 05	 mov	 BYTE PTR [esi+5], al
  00035	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00039	88 46 06	 mov	 BYTE PTR [esi+6], al
  0003c	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  0003f	3b c8		 cmp	 ecx, eax
  00041	74 0a		 je	 SHORT $LN4@operator
  00043	6a ff		 push	 -1
  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@operator:
  0004d	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00050	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00053	3b c8		 cmp	 ecx, eax
  00055	74 0a		 je	 SHORT $LN135@operator
  00057	6a ff		 push	 -1
  00059	6a 00		 push	 0
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN135@operator:
  00061	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00064	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00067	3b c8		 cmp	 ecx, eax
  00069	74 0a		 je	 SHORT $LN268@operator
  0006b	6a ff		 push	 -1
  0006d	6a 00		 push	 0
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN268@operator:
  00075	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  00078	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0007b	88 46 50	 mov	 BYTE PTR [esi+80], al
  0007e	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00081	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00084	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  00087	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0008a	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0008d	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00090	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
  00099	5f		 pop	 edi
  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
??4HostDevice@@QAEAAU0@ABU0@@Z ENDP			; HostDevice::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0HostDevice@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0HostDevice@@QAE@ABU0@@Z PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0HostDevice@@QAE@ABU0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0002e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00031	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00034	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00037	88 06		 mov	 BYTE PTR [esi], al
  00039	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  0003d	88 46 01	 mov	 BYTE PTR [esi+1], al
  00040	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  00044	88 46 02	 mov	 BYTE PTR [esi+2], al
  00047	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  0004b	88 46 03	 mov	 BYTE PTR [esi+3], al
  0004e	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00052	88 46 04	 mov	 BYTE PTR [esi+4], al
  00055	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  00059	88 46 05	 mov	 BYTE PTR [esi+5], al
  0005c	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00060	88 46 06	 mov	 BYTE PTR [esi+6], al
  00063	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  0006a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00071	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00075	72 04		 jb	 SHORT $LN125@HostDevice
  00077	8b 01		 mov	 eax, DWORD PTR [ecx]
  00079	eb 02		 jmp	 SHORT $LN126@HostDevice
$LN125@HostDevice:
  0007b	8b c1		 mov	 eax, ecx
$LN126@HostDevice:
  0007d	6a ff		 push	 -1
  0007f	6a 00		 push	 0
  00081	52		 push	 edx
  00082	c6 00 00	 mov	 BYTE PTR [eax], 0
  00085	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008a	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  0008d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00094	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
  0009b	8d 57 20	 lea	 edx, DWORD PTR [edi+32]
  0009e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  000a5	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  000a9	72 04		 jb	 SHORT $LN252@HostDevice
  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	eb 02		 jmp	 SHORT $LN253@HostDevice
$LN252@HostDevice:
  000af	8b c1		 mov	 eax, ecx
$LN253@HostDevice:
  000b1	6a ff		 push	 -1
  000b3	33 db		 xor	 ebx, ebx
  000b5	53		 push	 ebx
  000b6	52		 push	 edx
  000b7	66 89 18	 mov	 WORD PTR [eax], bx
  000ba	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000bf	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  000c2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c6	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  000cd	8d 57 38	 lea	 edx, DWORD PTR [edi+56]
  000d0	89 59 10	 mov	 DWORD PTR [ecx+16], ebx
  000d3	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  000d7	72 04		 jb	 SHORT $LN377@HostDevice
  000d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000db	eb 02		 jmp	 SHORT $LN378@HostDevice
$LN377@HostDevice:
  000dd	8b c1		 mov	 eax, ecx
$LN378@HostDevice:
  000df	6a ff		 push	 -1
  000e1	6a 00		 push	 0
  000e3	52		 push	 edx
  000e4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000ec	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  000ef	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  000f2	88 46 50	 mov	 BYTE PTR [esi+80], al
  000f5	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  000f8	89 46 58	 mov	 DWORD PTR [esi+88], eax
  000fb	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  000fe	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00101	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00104	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00107	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  0010a	50		 push	 eax
  0010b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0010f	e8 00 00 00 00	 call	 ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
  00114	8b c6		 mov	 eax, esi
  00116	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00119	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00120	59		 pop	 ecx
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0HostDevice@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 38	 add	 ecx, 56			; 00000038H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0HostDevice@@QAE@ABU0@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0HostDevice@@QAE@ABU0@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0HostDevice@@QAE@ABU0@@Z ENDP				; HostDevice::HostDevice
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEXPAUHostDevice@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEXPAUHostDevice@@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1794 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEXPAUHostDevice@@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen, COMDAT
; _this$ = ecx

; 1765 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy, COMDAT
; _this$ = ecx

; 1636 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1637 : 		if (this->_Myfirst() != pointer())

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 4e		 je	 SHORT $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();
; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 0e		 je	 SHORT $LN43@Tidy
$LL44@Tidy:
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00019	83 c6 70	 add	 esi, 112		; 00000070H
  0001c	3b f7		 cmp	 esi, edi
  0001e	75 f2		 jne	 SHORT $LL44@Tidy
$LN43@Tidy:

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00020	8b 33		 mov	 esi, DWORD PTR [ebx]
  00022	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00027	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
  0002e	03 d1		 add	 edx, ecx
  00030	8b cb		 mov	 ecx, ebx
  00032	c1 fa 06	 sar	 edx, 6
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	50		 push	 eax
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate

; 1642 : 				this->_Myend() - this->_Myfirst());
; 1643 : 			this->_Myfirst() = pointer();

  00043	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 1644 : 			this->_Mylast() = pointer();

  00049	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1645 : 			this->_Myend() = pointer();

  00050	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  00057	5f		 pop	 edi
$LN2@Tidy:

; 1646 : 			}
; 1647 : 		}

  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	c3		 ret	 0
?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv275 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reserve, COMDAT
; _this$ = ecx

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1627 : 		if (_Unused_capacity() < _Count)

  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00010	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00013	2b f7		 sub	 esi, edi
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
  00019	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  0001c	c1 fa 06	 sar	 edx, 6
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	3b c6		 cmp	 eax, esi
  00028	73 62		 jae	 SHORT $LN2@Reserve

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  0002a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002c	2b f8		 sub	 edi, eax
  0002e	89 45 08	 mov	 DWORD PTR tv275[ebp], eax
  00031	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00036	f7 ef		 imul	 edi
  00038	b8 92 24 49 02	 mov	 eax, 38347922		; 02492492H
  0003d	03 d7		 add	 edx, edi
  0003f	c1 fa 06	 sar	 edx, 6
  00042	8b ca		 mov	 ecx, edx
  00044	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00047	03 ca		 add	 ecx, edx
  00049	2b c1		 sub	 eax, ecx
  0004b	3b c6		 cmp	 eax, esi
  0004d	72 44		 jb	 SHORT $LN134@Reserve

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  0004f	8d 3c 31	 lea	 edi, DWORD PTR [ecx+esi]
  00052	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00057	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0005a	2b 4d 08	 sub	 ecx, DWORD PTR tv275[ebp]
  0005d	f7 e9		 imul	 ecx
  0005f	03 d1		 add	 edx, ecx
  00061	33 c9		 xor	 ecx, ecx
  00063	c1 fa 06	 sar	 edx, 6
  00066	8b f2		 mov	 esi, edx
  00068	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0006b	03 f2		 add	 esi, edx
  0006d	ba 92 24 49 02	 mov	 edx, 38347922		; 02492492H
  00072	8b c6		 mov	 eax, esi
  00074	d1 e8		 shr	 eax, 1
  00076	2b d0		 sub	 edx, eax
  00078	03 c6		 add	 eax, esi
  0007a	3b d6		 cmp	 edx, esi
  0007c	0f 43 c8	 cmovae	 ecx, eax
  0007f	3b cf		 cmp	 ecx, edi
  00081	0f 43 f9	 cmovae	 edi, ecx
  00084	8b cb		 mov	 ecx, ebx
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reallocate
$LN2@Reserve:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 1632 : 			}
; 1633 : 		}

  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
$LN134@Reserve:

; 1630 : 				_Xlen();

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00098	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009d	cc		 int	 3
?_Reserve@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Size$1$ = -24						; size = 4
__Ptr$ = -24						; size = 4
__Last$1$ = -20						; size = 4
$T2 = -20						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reallocate, COMDAT
; _this$ = ecx

; 1601 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e4	 mov	 DWORD PTR _this$[ebp], edi

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00038	51		 push	 ecx
  00039	c6 45 ec 00	 mov	 BYTE PTR $T2[ebp], 0
  0003d	8b d8		 mov	 ebx, eax
  0003f	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00042	89 5d e8	 mov	 DWORD PTR __Ptr$[ebp], ebx
  00045	57		 push	 edi
  00046	53		 push	 ebx
  00047	ff 77 04	 push	 DWORD PTR [edi+4]
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00051	ff 37		 push	 DWORD PTR [edi]
  00053	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >

; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();

  00058	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	8b 37		 mov	 esi, DWORD PTR [edi]
  00060	8b c8		 mov	 ecx, eax
  00062	89 45 ec	 mov	 DWORD PTR __Last$1$[ebp], eax
  00065	2b ce		 sub	 ecx, esi
  00067	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0006c	f7 e9		 imul	 ecx
  0006e	03 d1		 add	 edx, ecx
  00070	c1 fa 06	 sar	 edx, 6
  00073	8b c2		 mov	 eax, edx
  00075	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00078	03 c2		 add	 eax, edx
  0007a	89 45 e8	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1612 : 		if (this->_Myfirst() != pointer())

  0007d	85 f6		 test	 esi, esi
  0007f	74 37		 je	 SHORT $LN3@Reallocate

; 1613 : 			{	// destroy and deallocate old array
; 1614 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00081	3b 75 ec	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00084	74 0f		 je	 SHORT $LN126@Reallocate
$LL127@Reallocate:
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  0008d	83 c6 70	 add	 esi, 112		; 00000070H
  00090	3b 75 ec	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00093	75 f1		 jne	 SHORT $LL127@Reallocate
$LN126@Reallocate:

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

  00095	8b 37		 mov	 esi, DWORD PTR [edi]
  00097	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0009c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0009f	2b ce		 sub	 ecx, esi
  000a1	f7 e9		 imul	 ecx
  000a3	03 d1		 add	 edx, ecx
  000a5	8b cf		 mov	 ecx, edi
  000a7	c1 fa 06	 sar	 edx, 6
  000aa	8b c2		 mov	 eax, edx
  000ac	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000af	03 c2		 add	 eax, edx
  000b1	50		 push	 eax
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate
$LN3@Reallocate:

; 1616 : 				this->_Myend() - this->_Myfirst());
; 1617 : 			}
; 1618 : 
; 1619 : 		this->_Orphan_all();
; 1620 : 		this->_Myend() = _Ptr + _Count;

  000b8	6b 45 08 70	 imul	 eax, DWORD PTR __Count$[ebp], 112
  000bc	03 c3		 add	 eax, ebx
  000be	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1621 : 		this->_Mylast() = _Ptr + _Size;

  000c1	6b 45 e8 70	 imul	 eax, DWORD PTR __Size$1$[ebp], 112
  000c5	03 c3		 add	 eax, ebx
  000c7	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1622 : 		this->_Myfirst() = _Ptr;

  000ca	89 1f		 mov	 DWORD PTR [edi], ebx

; 1623 : 		}

  000cc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000cf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d6	59		 pop	 ecx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z$0:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  000e0	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000e3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	ff 75 e8	 push	 DWORD PTR __Ptr$[ebp]
  000e9	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate

; 1608 : 		_RERAISE;

  000ee	6a 00		 push	 0
  000f0	6a 00		 push	 0
  000f2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN207@Reallocate:
$LN206@Reallocate:
  000f7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBE_NPBUHostDevice@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBE_NPBUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Inside, COMDAT
; _this$ = ecx

; 1596 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1598 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1598 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBE_NPBUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEII@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Grow_to, COMDAT
; _this$ = ecx

; 1585 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1586 : 		size_type _Capacity = capacity();

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000c	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000e	f7 ee		 imul	 esi
  00010	03 d6		 add	 edx, esi
  00012	c1 fa 06	 sar	 edx, 6
  00015	8b f2		 mov	 esi, edx
  00017	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001a	03 f2		 add	 esi, edx

; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001c	ba 92 24 49 02	 mov	 edx, 38347922		; 02492492H
  00021	8b c6		 mov	 eax, esi
  00023	d1 e8		 shr	 eax, 1
  00025	2b d0		 sub	 edx, eax
  00027	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  0002a	33 c0		 xor	 eax, eax
  0002c	3b d6		 cmp	 edx, esi
  0002e	5e		 pop	 esi
  0002f	0f 43 c1	 cmovae	 eax, ecx

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

  00032	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00035	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1591 : 			_Capacity = _Count;
; 1592 : 		return (_Capacity);
; 1593 : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Grow_to@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IBEII@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy, COMDAT
; _this$ = ecx

; 1580 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN13@Destroy
  0000f	90		 npad	 1
$LL14@Destroy:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	83 c6 70	 add	 esi, 112		; 00000070H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL14@Destroy
$LN13@Destroy:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1582 : 		}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy, COMDAT
; _this$ = ecx

; 1561 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1562 : 		this->_Myfirst() = pointer();
; 1563 : 		this->_Mylast() = pointer();
; 1564 : 		this->_Myend() = pointer();
; 1565 : 
; 1566 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	85 ff		 test	 edi, edi
  00020	75 08		 jne	 SHORT $LN2@Buy

; 1567 : 			return (false);

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 1577 : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Buy:

; 1568 : 		else if (max_size() < _Capacity)

  0002a	81 ff 92 24 49
	02		 cmp	 edi, 38347922		; 02492492H
  00030	77 1b		 ja	 SHORT $LN109@Buy

; 1570 : 		else
; 1571 : 			{	// nonempty array, allocate storage
; 1572 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);

  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
  00038	89 06		 mov	 DWORD PTR [esi], eax

; 1573 : 			this->_Mylast() = this->_Myfirst();

  0003a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1574 : 			this->_Myend() = this->_Myfirst() + _Capacity;

  0003d	6b c7 70	 imul	 eax, edi, 112
  00040	5f		 pop	 edi
  00041	03 06		 add	 eax, DWORD PTR [esi]
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1575 : 			}
; 1576 : 		return (true);

  00046	b0 01		 mov	 al, 1
  00048	5e		 pop	 esi

; 1577 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN109@Buy:

; 1569 : 			_Xlen();	// result too long

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00052	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN111@Buy:
$LN108@Buy:
  00057	cc		 int	 3
?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::clear, COMDAT
; _this$ = ecx

; 1539 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  00005	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00008	8b 37		 mov	 esi, DWORD PTR [edi]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 19		 je	 SHORT $LN70@clear
  0000e	66 90		 npad	 2
$LL34@clear:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00017	83 c6 70	 add	 esi, 112		; 00000070H
  0001a	3b f3		 cmp	 esi, ebx
  0001c	75 f2		 jne	 SHORT $LL34@clear

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx

; 1543 : 		}

  00026	c3		 ret	 0
$LN70@clear:

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00027	8b c6		 mov	 eax, esi
  00029	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx

; 1543 : 		}

  0002f	c3		 ret	 0
?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
$T5 = 8							; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back, COMDAT
; _this$ = ecx

; 1276 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 1277 : 		if (_Inside(_STD addressof(_Val)))

  00027	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0002d	3b f9		 cmp	 edi, ecx
  0002f	73 45		 jae	 SHORT $LN2@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	3b c7		 cmp	 eax, edi
  00035	77 3f		 ja	 SHORT $LN2@push_back

; 1278 : 			{	// push back an element
; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00037	2b f8		 sub	 edi, eax
  00039	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003e	f7 ef		 imul	 edi
  00040	03 d7		 add	 edx, edi
  00042	c1 fa 06	 sar	 edx, 6
  00045	8b fa		 mov	 edi, edx
  00047	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0004a	03 fa		 add	 edi, edx

; 1280 : 			if (this->_Mylast() == this->_Myend())

  0004c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0004f	75 09		 jne	 SHORT $LN4@push_back

; 1281 : 				_Reserve(1);

  00051	6a 01		 push	 1
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reserve
$LN4@push_back:

; 1282 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  0005a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005d	6b c7 70	 imul	 eax, edi, 112
  00060	89 4d 08	 mov	 DWORD PTR $T5[ebp], ecx
  00063	89 4d f0	 mov	 DWORD PTR $T3[ebp], ecx
  00066	03 06		 add	 eax, DWORD PTR [esi]
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	85 c9		 test	 ecx, ecx
  00071	74 2b		 je	 SHORT $LN210@push_back
  00073	50		 push	 eax

; 1284 : 				this->_Myfirst()[_Idx]);
; 1285 : 			++this->_Mylast();
; 1286 : 			}
; 1287 : 		else

  00074	eb 23		 jmp	 SHORT $LN229@push_back
$LN2@push_back:

; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

  00076	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00079	75 09		 jne	 SHORT $LN5@push_back

; 1290 : 				_Reserve(1);

  0007b	6a 01		 push	 1
  0007d	8b ce		 mov	 ecx, esi
  0007f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Reserve
$LN5@push_back:

; 1291 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1292 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  00084	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00087	89 4d 08	 mov	 DWORD PTR $T4[ebp], ecx
  0008a	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  0008d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00094	85 c9		 test	 ecx, ecx
  00096	74 06		 je	 SHORT $LN210@push_back
  00098	57		 push	 edi
$LN229@push_back:
  00099	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z
$LN210@push_back:

; 1293 : 				_Val);
; 1294 : 			++this->_Mylast();

  0009e	83 46 04 70	 add	 DWORD PTR [esi+4], 112	; 00000070H

; 1295 : 			}
; 1296 : 		}

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z$33:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__unwindfunclet$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z$57:
  00011	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00014	50		 push	 eax
  00015	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	c3		 ret	 0
__ehhandler$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z:
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXABUHostDevice@@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::push_back
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[], COMDAT
; _this$ = ecx

; 1230 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

  00003	6b 45 08 70	 imul	 eax, DWORD PTR __Pos$[ebp], 112
  00007	03 01		 add	 eax, DWORD PTR [ecx]

; 1243 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??A?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAUHostDevice@@I@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		{	// test if sequence is empty

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	0f 94 c0	 sete	 al

; 1190 : 		return (this->_Myfirst() == this->_Mylast());
; 1191 : 		}

  00008	c3		 ret	 0
?empty@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE_NXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 1185 : 		return (this->_Getal().max_size());

  00000	b8 92 24 49 02	 mov	 eax, 38347922		; 02492492H

; 1186 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::size, COMDAT
; _this$ = ecx

; 1179 : 		{	// return length of sequence

  00000	56		 push	 esi

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 06	 sar	 edx, 6
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1181 : 		}

  0001a	c3		 ret	 0
?size@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::end, COMDAT
; _this$ = ecx

; 1072 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1073 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1074 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@2@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::begin, COMDAT
; _this$ = ecx

; 1062 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1063 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1064 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@@2@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		{	// micro-optimization for capacity() - size()

  00000	56		 push	 esi

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 06	 sar	 edx, 6
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 1049 : 		}

  0001b	c3		 ret	 0
?_Unused_capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 06	 sar	 edx, 6
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1044 : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QBEIXZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -32						; size = 1
$T4 = -28						; size = 4
__Last$1$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 980  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 981  : 		if (this != &_Right)

  00030	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00033	3b f8		 cmp	 edi, eax
  00035	0f 84 a7 00 00
	00		 je	 $LN16@operator

; 982  : 			{	// different, assign it
; 983  : 			if (this->_Getal() != _Right._Getal()
; 984  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 985  : 				{	// change allocator before copying
; 986  : 				_Tidy();
; 987  : 				this->_Copy_alloc(_Right._Getal());
; 988  : 				}
; 989  : 
; 990  : 			this->_Orphan_all();
; 991  : 
; 992  : 			if (_Right.empty())

  0003b	8b 18		 mov	 ebx, DWORD PTR [eax]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	89 45 e8	 mov	 DWORD PTR __Last$1$[ebp], eax
  00043	3b d8		 cmp	 ebx, eax
  00045	75 0a		 jne	 SHORT $LN4@operator

; 993  : 				clear();	// new sequence empty, erase existing sequence

  00047	e8 00 00 00 00	 call	 ?clear@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::clear
  0004c	e9 91 00 00 00	 jmp	 $LN16@operator
$LN4@operator:

; 994  : 			else if (_Right.size() <= size())

  00051	8b 37		 mov	 esi, DWORD PTR [edi]
  00053	8b c8		 mov	 ecx, eax
  00055	2b cb		 sub	 ecx, ebx
  00057	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0005c	f7 e9		 imul	 ecx
  0005e	03 d1		 add	 edx, ecx
  00060	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00063	c1 fa 06	 sar	 edx, 6
  00066	2b ce		 sub	 ecx, esi
  00068	8b c2		 mov	 eax, edx
  0006a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006d	03 c2		 add	 eax, edx
  0006f	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
  00072	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00077	f7 e9		 imul	 ecx
  00079	03 d1		 add	 edx, ecx
  0007b	c1 fa 06	 sar	 edx, 6
  0007e	8b c2		 mov	 eax, edx
  00080	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00083	03 c2		 add	 eax, edx
  00085	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00088	39 45 e4	 cmp	 DWORD PTR $T4[ebp], eax
  0008b	77 6b		 ja	 SHORT $LN6@operator

; 995  : 				{	// enough elements, copy new and destroy old
; 996  : 				pointer _Ptr = _Copy_unchecked(_Right._Myfirst(),

  0008d	3b 5d e8	 cmp	 ebx, DWORD PTR __Last$1$[ebp]
  00090	74 18		 je	 SHORT $LN141@operator
  00092	8b 7d e8	 mov	 edi, DWORD PTR __Last$1$[ebp]
$LL142@operator:
  00095	53		 push	 ebx
  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z
  0009d	83 c3 70	 add	 ebx, 112		; 00000070H
  000a0	83 c6 70	 add	 esi, 112		; 00000070H
  000a3	3b df		 cmp	 ebx, edi
  000a5	75 ee		 jne	 SHORT $LL142@operator
  000a7	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
$LN141@operator:

; 997  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 998  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old

  000aa	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  000ad	3b f3		 cmp	 esi, ebx
  000af	74 0e		 je	 SHORT $LN165@operator
$LL166@operator:
  000b1	8b ce		 mov	 ecx, esi
  000b3	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  000b8	83 c6 70	 add	 esi, 112		; 00000070H
  000bb	3b f3		 cmp	 esi, ebx
  000bd	75 f2		 jne	 SHORT $LL166@operator
$LN165@operator:

; 999  : 				this->_Mylast() = this->_Myfirst() + _Right.size();

  000bf	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  000c2	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000c7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ca	2b 0a		 sub	 ecx, DWORD PTR [edx]
  000cc	f7 e9		 imul	 ecx
  000ce	03 d1		 add	 edx, ecx
  000d0	c1 fa 06	 sar	 edx, 6
  000d3	8b c2		 mov	 eax, edx
  000d5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d8	03 c2		 add	 eax, edx
  000da	6b c0 70	 imul	 eax, eax, 112
  000dd	03 07		 add	 eax, DWORD PTR [edi]
$LN488@operator:

; 1005 : 					_Ptr, this->_Myfirst());
; 1006 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),

  000df	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN16@operator:

; 1025 : 					_CATCH_END
; 1026 : 				}
; 1027 : 			}
; 1028 : 		return (*this);

  000e2	8b c7		 mov	 eax, edi

; 1029 : 		}

  000e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ee	59		 pop	 ecx
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
$LN6@operator:

; 1000 : 				}
; 1001 : 			else if (_Right.size() <= capacity())

  000f8	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000fb	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00100	2b ce		 sub	 ecx, esi
  00102	f7 e9		 imul	 ecx
  00104	03 d1		 add	 edx, ecx
  00106	c1 fa 06	 sar	 edx, 6
  00109	8b c2		 mov	 eax, edx
  0010b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0010e	03 c2		 add	 eax, edx
  00110	39 45 e4	 cmp	 DWORD PTR $T4[ebp], eax
  00113	77 33		 ja	 SHORT $LN8@operator

; 1002 : 				{	// enough room, copy and construct new
; 1003 : 				pointer _Ptr = _Right._Myfirst() + size();

  00115	6b 7d e0 70	 imul	 edi, DWORD PTR $T2[ebp], 112

; 1004 : 				_Copy_unchecked(_Right._Myfirst(),

  00119	56		 push	 esi
  0011a	03 fb		 add	 edi, ebx
  0011c	57		 push	 edi
  0011d	53		 push	 ebx
  0011e	e8 00 00 00 00	 call	 ??$_Copy_unchecked@PAUHostDevice@@PAU1@@std@@YAPAUHostDevice@@PAU1@00@Z ; std::_Copy_unchecked<HostDevice *,HostDevice *>

; 1005 : 					_Ptr, this->_Myfirst());
; 1006 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),

  00123	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00126	83 c4 08	 add	 esp, 8
  00129	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0012c	c6 45 e0 00	 mov	 BYTE PTR $T3[ebp], 0
  00130	ff 75 e0	 push	 DWORD PTR $T3[ebp]
  00133	50		 push	 eax
  00134	ff 70 04	 push	 DWORD PTR [eax+4]
  00137	ff 72 04	 push	 DWORD PTR [edx+4]
  0013a	57		 push	 edi
  0013b	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PAUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice *,HostDevice *,std::allocator<HostDevice> >
  00140	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00143	83 c4 18	 add	 esp, 24			; 00000018H

; 1007 : 					this->_Mylast());
; 1008 : 				}
; 1009 : 			else

  00146	eb 97		 jmp	 SHORT $LN488@operator
$LN8@operator:

; 1010 : 				{	// not enough room, allocate new array and construct new
; 1011 : 				if (this->_Myfirst() != pointer())

  00148	85 f6		 test	 esi, esi
  0014a	74 2e		 je	 SHORT $LN10@operator

; 1012 : 					{	// discard old array
; 1013 : 					_Destroy(this->_Myfirst(), this->_Mylast());

  0014c	ff 77 04	 push	 DWORD PTR [edi+4]
  0014f	8b cf		 mov	 ecx, edi
  00151	56		 push	 esi
  00152	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXPAUHostDevice@@0@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Destroy

; 1014 : 					this->_Getal().deallocate(this->_Myfirst(),

  00157	8b 37		 mov	 esi, DWORD PTR [edi]
  00159	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0015e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00161	2b ce		 sub	 ecx, esi
  00163	f7 e9		 imul	 ecx
  00165	03 d1		 add	 edx, ecx
  00167	8b cf		 mov	 ecx, edi
  00169	c1 fa 06	 sar	 edx, 6
  0016c	8b c2		 mov	 eax, edx
  0016e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00171	03 c2		 add	 eax, edx
  00173	50		 push	 eax
  00174	56		 push	 esi
  00175	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate
$LN10@operator:

; 1015 : 						this->_Myend() - this->_Myfirst());
; 1016 : 					}
; 1017 : 				if (_Buy(_Right.size()))

  0017a	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  0017d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00182	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00185	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00187	f7 e9		 imul	 ecx
  00189	03 d1		 add	 edx, ecx
  0018b	8b cf		 mov	 ecx, edi
  0018d	c1 fa 06	 sar	 edx, 6
  00190	8b c2		 mov	 eax, edx
  00192	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00195	03 c2		 add	 eax, edx
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?_Buy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAE_NI@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Buy
  0019d	84 c0		 test	 al, al
  0019f	0f 84 3d ff ff
	ff		 je	 $LN16@operator

; 1018 : 					_TRY_BEGIN
; 1019 : 					this->_Mylast() =

  001a5	ff 37		 push	 DWORD PTR [edi]
  001a7	8b cf		 mov	 ecx, edi
  001a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001b0	ff 73 04	 push	 DWORD PTR [ebx+4]
  001b3	ff 33		 push	 DWORD PTR [ebx]
  001b5	e8 00 00 00 00	 call	 ??$_Ucopy@PAUHostDevice@@@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEPAUHostDevice@@PAU2@00@Z ; std::vector<HostDevice,std::allocator<HostDevice> >::_Ucopy<HostDevice *>
  001ba	e9 20 ff ff ff	 jmp	 $LN488@operator
__catch$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z$0:

; 1020 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1021 : 						this->_Myfirst());
; 1022 : 					_CATCH_ALL
; 1023 : 					_Tidy();

  001bf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 1024 : 					_RERAISE;

  001c7	6a 00		 push	 0
  001c9	6a 00		 push	 0
  001cb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN489@operator:
$LN487@operator:
  001d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 976  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
??1?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::~vector<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEX$$QAV12@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Assign_rv, COMDAT
; _this$ = ecx

; 889  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 890  : 		_Assign_rv(_STD forward<_Myt>(_Right),

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0001c	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 891  : 			typename _Alty::propagate_on_container_move_assignment());
; 892  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Assign_rv@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEX$$QAV12@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::_Assign_rv, COMDAT
; _this$ = ecx

; 868  : 		{	// move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 869  : 		this->_Swap_all((_Myt&)_Right);
; 870  : 		this->_Myfirst() = _Right._Myfirst();

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 871  : 		this->_Mylast() = _Right._Mylast();

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 872  : 		this->_Myend() = _Right._Myend();

  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 873  : 
; 874  : 		_Right._Myfirst() = pointer();

  00016	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 875  : 		_Right._Mylast() = pointer();

  0001c	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 876  : 		_Right._Myend() = pointer();

  00023	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 877  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Assign_rv@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 854  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 855  : 		if (this != &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 29		 je	 SHORT $LN123@operator

; 856  : 			{	// different, assign it
; 857  : 			_Tidy();

  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 858  : 			if (_Alty::propagate_on_container_move_assignment::value
; 859  : 				&& this->_Getal() != _Right._Getal())
; 860  : 				this->_Move_alloc(_Right._Getal());
; 861  : 
; 862  : 			_Assign_rv(_STD forward<_Myt>(_Right));

  00013	8b 07		 mov	 eax, DWORD PTR [edi]
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00020	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00023	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00029	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00030	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN123@operator:

; 863  : 			}
; 864  : 		return (*this);

  00037	5f		 pop	 edi
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 865  : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??4?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 841  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 842  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	89 01		 mov	 DWORD PTR [ecx], eax
  0001e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00021	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00024	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00027	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 843  : 		}

  0002a	8b c1		 mov	 eax, ecx
  0002c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00032	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00039	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T2 = 8							; size = 1
__Right$ = 8						; size = 4
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 748  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 749  : 		if (_Buy(_Right.size()))

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00033	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004c	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0004f	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00051	f7 e9		 imul	 ecx
  00053	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00059	03 d1		 add	 edx, ecx
  0005b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00062	c1 fa 06	 sar	 edx, 6
  00065	8b fa		 mov	 edi, edx
  00067	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006e	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00071	03 fa		 add	 edi, edx
  00073	74 49		 je	 SHORT $LN7@vector
  00075	81 ff 92 24 49
	02		 cmp	 edi, 38347922		; 02492492H
  0007b	76 0a		 jbe	 SHORT $LN58@vector
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00082	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN257@vector:
$LN58@vector:
  00087	57		 push	 edi
  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
  0008f	89 06		 mov	 DWORD PTR [esi], eax
  00091	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 750  : 			_TRY_BEGIN
; 751  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),

  00094	51		 push	 ecx
  00095	6b c7 70	 imul	 eax, edi, 112
  00098	c6 45 08 00	 mov	 BYTE PTR $T2[ebp], 0
  0009c	ff 75 08	 push	 DWORD PTR $T2[ebp]
  0009f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000a6	56		 push	 esi
  000a7	03 06		 add	 eax, DWORD PTR [esi]
  000a9	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	ff 73 04	 push	 DWORD PTR [ebx+4]
  000b1	ff 33		 push	 DWORD PTR [ebx]
  000b3	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked1@PBUHostDevice@@PAU1@V?$allocator@UHostDevice@@@std@@@std@@YAPAUHostDevice@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_copy_al_unchecked1<HostDevice const *,HostDevice *,std::allocator<HostDevice> >
  000b8	83 c4 18	 add	 esp, 24			; 00000018H
  000bb	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 756  : 			_CATCH_END
; 757  : 		}

  000be	8b c6		 mov	 eax, esi
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
__catch$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z$0:

; 752  : 				this->_Myfirst());
; 753  : 			_CATCH_ALL
; 754  : 			_Tidy();

  000d4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 755  : 			_RERAISE;

  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN258@vector:
$LN256@vector:
  000e5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 706  : 		: _Mybase()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 708  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::vector<HostDevice,std::allocator<HostDevice> >::vector<HostDevice,std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<HostDevice> >,std::_Vector_val<std::_Simple_types<HostDevice> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<HostDevice> >::_Vector_val<std::_Simple_types<HostDevice> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 489  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<HostDevice> >::_Vector_val<std::_Simple_types<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myend, COMDAT
; _this$ = ecx

; 668  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 669  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myend, COMDAT
; _this$ = ecx

; 663  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 664  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Mylast, COMDAT
; _this$ = ecx

; 658  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 659  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Mylast, COMDAT
; _this$ = ecx

; 653  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 654  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myfirst, COMDAT
; _this$ = ecx

; 648  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 649  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABQAUHostDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myfirst, COMDAT
; _this$ = ecx

; 643  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 644  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAPAUHostDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Get_data, COMDAT
; _this$ = ecx

; 638  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 639  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Get_data, COMDAT
; _this$ = ecx

; 633  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 634  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UHostDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Getal, COMDAT
; _this$ = ecx

; 628  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 629  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Getal, COMDAT
; _this$ = ecx

; 623  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 624  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Swap_all, COMDAT
; _this$ = ecx

; 618  : 		_Get_data()._Swap_all(_Right._Get_data());
; 619  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Move_alloc@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Move_alloc@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 538  : 		_Pocma(_Getal(), _Al);
; 539  : 		}

  00000	c2 04 00	 ret	 4
?_Move_alloc@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Copy_alloc, COMDAT
; _this$ = ecx

; 533  : 		_Pocca(_Getal(), _Al);
; 534  : 		}

  00000	c2 04 00	 ret	 4
?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@2@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >, COMDAT
; _this$ = ecx

; 519  : 		: _Mypair(_Zero_then_variadic_args_t())

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 521  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >::_Vector_alloc<std::_Vec_base_types<HostDevice,std::allocator<HostDevice> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	b8 92 24 49 02	 mov	 eax, 38347922		; 02492492H

; 1009 : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  0000e	77 31		 ja	 SHORT $LN16@deallocate
  00010	6b c0 70	 imul	 eax, eax, 112
  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate
  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate
  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate
  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate
  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate
  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 988  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:
  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:
  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEXPAUHostDevice@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEPAUHostDevice@@I@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		}

  00003	5d		 pop	 ebp

; 976  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ; std::allocator<HostDevice>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEPAUHostDevice@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??4?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::operator=, COMDAT
; _this$ = ecx

; 963  : 		_Mybase::operator=(_STD move(_Right));
; 964  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 965  : 		}

  00002	c2 04 00	 ret	 4
??4?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::_Wrap_alloc<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 947  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::_Wrap_alloc<std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::_Wrap_alloc<std::allocator<HostDevice> >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::_Wrap_alloc<std::allocator<HostDevice> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<HostDevice> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UHostDevice@@@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<HostDevice> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SA?AV?$allocator@UHostDevice@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SA?AV?$allocator@UHostDevice@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<HostDevice> >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SA?AV?$allocator@UHostDevice@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<HostDevice> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAIABV?$allocator@UHostDevice@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAIABV?$allocator@UHostDevice@@@2@@Z PROC ; std::allocator_traits<std::allocator<HostDevice> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	b8 92 24 49 02	 mov	 eax, 38347922		; 02492492H

; 870  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UHostDevice@@@std@@@std@@SAIABV?$allocator@UHostDevice@@@2@@Z ENDP ; std::allocator_traits<std::allocator<HostDevice> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ PROC	; std::allocator<HostDevice>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 92 24 49 02	 mov	 eax, 38347922		; 02492492H

; 750  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UHostDevice@@@std@@QBEIXZ ENDP	; std::allocator<HostDevice>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  00013	77 3c		 ja	 SHORT $LN14@allocate
  00015	6b c0 70	 imul	 eax, eax, 112
  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate
  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate
  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4
  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:
  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:
  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:
  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:
  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@UHostDevice@@@std@@QAEPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z PROC ; std::allocator<HostDevice>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d 92 24 49 02	 cmp	 eax, 38347922		; 02492492H
  0000e	77 31		 ja	 SHORT $LN13@deallocate
  00010	6b c0 70	 imul	 eax, eax, 112
  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate
  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate
  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate
  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate
  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate
  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 721  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:
  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:
  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:
  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@UHostDevice@@@std@@QAEXPAUHostDevice@@I@Z ENDP ; std::allocator<HostDevice>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z PROC	; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UHostDevice@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UHostDevice@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UHostDevice@@@std@@QAE@XZ PROC		; std::allocator<HostDevice>::allocator<HostDevice>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UHostDevice@@@std@@QAE@XZ ENDP		; std::allocator<HostDevice>::allocator<HostDevice>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.h
;	COMDAT ??1HostDevice@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1HostDevice@@QAE@XZ PROC				; HostDevice::~HostDevice, COMDAT
; _this$ = ecx

; 495  : 	~HostDevice () { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1HostDevice@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
  00035	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00038	8d 77 38	 lea	 esi, DWORD PTR [edi+56]
  0003b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0003e	72 0b		 jb	 SHORT $LN143@HostDevice
  00040	40		 inc	 eax
  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	ff 36		 push	 DWORD PTR [esi]
  00046	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN143@HostDevice:
  0004b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00052	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00056	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0005d	72 02		 jb	 SHORT $LN232@HostDevice
  0005f	8b 36		 mov	 esi, DWORD PTR [esi]
$LN232@HostDevice:
  00061	c6 06 00	 mov	 BYTE PTR [esi], 0
  00064	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  00067	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0006a	83 f8 08	 cmp	 eax, 8
  0006d	72 0b		 jb	 SHORT $LN244@HostDevice
  0006f	40		 inc	 eax
  00070	8b ce		 mov	 ecx, esi
  00072	50		 push	 eax
  00073	ff 36		 push	 DWORD PTR [esi]
  00075	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN244@HostDevice:
  0007a	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00081	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00085	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0008c	72 02		 jb	 SHORT $LN335@HostDevice
  0008e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN335@HostDevice:
  00090	33 c0		 xor	 eax, eax
  00092	66 89 06	 mov	 WORD PTR [esi], ax
  00095	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00098	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009b	72 0d		 jb	 SHORT $LN347@HostDevice
  0009d	40		 inc	 eax
  0009e	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000a1	50		 push	 eax
  000a2	ff 77 08	 push	 DWORD PTR [edi+8]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN347@HostDevice:
  000aa	c7 47 1c 0f 00
	00 00		 mov	 DWORD PTR [edi+28], 15	; 0000000fH
  000b1	83 7f 1c 10	 cmp	 DWORD PTR [edi+28], 16	; 00000010H
  000b5	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  000bc	72 17		 jb	 SHORT $LN435@HostDevice
  000be	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000c1	c6 00 00	 mov	 BYTE PTR [eax], 0
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
$LN435@HostDevice:
  000d5	c6 47 08 00	 mov	 BYTE PTR [edi+8], 0
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1HostDevice@@QAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1HostDevice@@QAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1HostDevice@@QAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1HostDevice@@QAE@XZ ENDP				; HostDevice::~HostDevice
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.h
;	COMDAT ??0HostDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0HostDevice@@QAE@XZ PROC				; HostDevice::HostDevice, COMDAT
; _this$ = ecx

; 492  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 483  : 		Bootable (false),

  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 492  : 	{

  0000a	33 c0		 xor	 eax, eax
  0000c	66 c7 41 04 00
	00		 mov	 WORD PTR [ecx+4], 0
  00012	c6 41 06 00	 mov	 BYTE PTR [ecx+6], 0
  00016	c7 41 1c 0f 00
	00 00		 mov	 DWORD PTR [ecx+28], 15	; 0000000fH
  0001d	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00024	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0
  00028	c7 41 34 07 00
	00 00		 mov	 DWORD PTR [ecx+52], 7
  0002f	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00036	66 89 41 20	 mov	 WORD PTR [ecx+32], ax
  0003a	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  0003d	c7 41 4c 0f 00
	00 00		 mov	 DWORD PTR [ecx+76], 15	; 0000000fH
  00044	88 41 38	 mov	 BYTE PTR [ecx+56], al
  00047	88 41 50	 mov	 BYTE PTR [ecx+80], al
  0004a	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0004d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00050	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  00053	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  00056	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 493  : 	}

  00059	8b c1		 mov	 eax, ecx
  0005b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??0HostDevice@@QAE@XZ ENDP				; HostDevice::HostDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsApplicationInstalled
_TEXT	SEGMENT
_installed$1$ = -1112					; size = 4
_unistallKey$ = -1108					; size = 4
_regNameSize$ = -1104					; size = 4
$T1 = -1100						; size = 24
$T2 = -1076						; size = 24
$T3 = -1052						; size = 24
_regName$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_appName$ = 8						; size = 4
_IsApplicationInstalled PROC				; COMDAT

; 12115: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 04 00
	00		 sub	 esp, 1112		; 00000458H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _appName$[ebp]

; 12116: 	const char *uninstallRegName = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
; 12117: 	BOOL installed = FALSE;
; 12118: 	HKEY unistallKey;
; 12119: 	LONG res = RegOpenKeyEx (HKEY_LOCAL_MACHINE, uninstallRegName, 0, KEY_READ | KEY_WOW64_64KEY, &unistallKey);

  00017	8d 85 ac fb ff
	ff		 lea	 eax, DWORD PTR _unistallKey$[ebp]
  0001d	50		 push	 eax
  0001e	68 19 01 02 00	 push	 131353			; 00020119H
  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
  0002a	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0002f	c7 85 a8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _installed$1$[ebp], 0
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20

; 12120: 	if (res != ERROR_SUCCESS)

  0003f	85 c0		 test	 eax, eax
  00041	74 18		 je	 SHORT $LN4@IsApplicat

; 12121: 	{
; 12122: 		SetLastError (res);

  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 12123: 		return FALSE;

  0004a	33 c0		 xor	 eax, eax
  0004c	5f		 pop	 edi

; 12148: 	return installed;
; 12149: }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	33 cd		 xor	 ecx, ebp
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN4@IsApplicat:
  0005b	53		 push	 ebx

; 12124: 	}
; 12125: 
; 12126: 	char regName[1024];
; 12127: 	DWORD regNameSize = sizeof (regName);
; 12128: 	DWORD index = 0;
; 12129: 	while (RegEnumKeyEx (unistallKey, index++, regName, &regNameSize, NULL, NULL, NULL, NULL) == ERROR_SUCCESS)

  0005c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__RegEnumKeyExA@32
  00062	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _regNameSize$[ebp]
  00068	56		 push	 esi
  00069	33 f6		 xor	 esi, esi
  0006b	c7 85 b0 fb ff
	ff 00 04 00 00	 mov	 DWORD PTR _regNameSize$[ebp], 1024 ; 00000400H
  00075	56		 push	 esi
  00076	56		 push	 esi
  00077	56		 push	 esi
  00078	56		 push	 esi
  00079	50		 push	 eax
  0007a	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _regName$[ebp]
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	ff b5 ac fb ff
	ff		 push	 DWORD PTR _unistallKey$[ebp]
  00088	ff d3		 call	 ebx
  0008a	85 c0		 test	 eax, eax
  0008c	0f 85 3a 02 00
	00		 jne	 $LN532@IsApplicat
$LL2@IsApplicat:

; 12130: 	{
; 12131: 		if (strstr (regName, "{") == regName)

  00092	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _regName$[ebp]
  00098	46		 inc	 esi
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_01HCONENDN@?$HL?$AA@
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _strstr
  000a4	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _regName$[ebp]
  000aa	83 c4 08	 add	 esp, 8
  000ad	3b c1		 cmp	 eax, ecx
  000af	0f 85 c6 01 00
	00		 jne	 $LN6@IsApplicat

; 12132: 		{
; 12133: 			regNameSize = sizeof (regName);
; 12134: 			if (!ReadLocalMachineRegistryStringNonReflected ((string (uninstallRegName) + "\\" + regName).c_str(), "DisplayName", regName, &regNameSize))

  000b5	6a 33		 push	 51			; 00000033H
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HOJDGFDM@Software?2Microsoft?2Windows?2Curre@
  000bc	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c2	c7 85 b0 fb ff
	ff 00 04 00 00	 mov	 DWORD PTR _regNameSize$[ebp], 1024 ; 00000400H
  000cc	c7 85 f8 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
  000d6	c7 85 f4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  000e0	c6 85 e4 fb ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  000e7	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000ec	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _regName$[ebp]
  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_01KICIPPFI@?2?$AA@
  000f8	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000fe	50		 push	 eax
  000ff	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	50		 push	 eax
  0010f	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00122	72 02		 jb	 SHORT $LN155@IsApplicat
  00124	8b 00		 mov	 eax, DWORD PTR [eax]
$LN155@IsApplicat:
  00126	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR _regNameSize$[ebp]
  0012c	51		 push	 ecx
  0012d	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _regName$[ebp]
  00133	51		 push	 ecx
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLHPPPJP@DisplayName?$AA@
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryStringNonReflected
  0013f	83 c4 10	 add	 esp, 16			; 00000010H
  00142	85 c0		 test	 eax, eax
  00144	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+20]
  0014a	0f 94 c3	 sete	 bl
  0014d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00150	72 41		 jb	 SHORT $LN245@IsApplicat
  00152	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00158	40		 inc	 eax
  00159	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0015e	72 2a		 jb	 SHORT $LN240@IsApplicat
  00160	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00163	0f 85 86 01 00
	00		 jne	 $LN538@IsApplicat
  00169	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0016c	3b c1		 cmp	 eax, ecx
  0016e	0f 83 7b 01 00
	00		 jae	 $LN538@IsApplicat
  00174	2b c8		 sub	 ecx, eax
  00176	83 f9 04	 cmp	 ecx, 4
  00179	0f 82 70 01 00
	00		 jb	 $LN538@IsApplicat
  0017f	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00182	0f 87 67 01 00
	00		 ja	 $LN538@IsApplicat
  00188	8b c8		 mov	 ecx, eax
$LN240@IsApplicat:
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00190	83 c4 04	 add	 esp, 4
$LN245@IsApplicat:
  00193	8b 85 c8 fb ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+20]
  00199	c7 85 e0 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
  001a3	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp+16], 0
  001ad	c6 85 cc fb ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  001b4	83 f8 10	 cmp	 eax, 16			; 00000010H
  001b7	72 41		 jb	 SHORT $LN362@IsApplicat
  001b9	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  001bf	40		 inc	 eax
  001c0	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001c5	72 2a		 jb	 SHORT $LN357@IsApplicat
  001c7	f6 c1 1f	 test	 cl, 31			; 0000001fH
  001ca	0f 85 1f 01 00
	00		 jne	 $LN538@IsApplicat
  001d0	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  001d3	3b c1		 cmp	 eax, ecx
  001d5	0f 83 14 01 00
	00		 jae	 $LN538@IsApplicat
  001db	2b c8		 sub	 ecx, eax
  001dd	83 f9 04	 cmp	 ecx, 4
  001e0	0f 82 09 01 00
	00		 jb	 $LN538@IsApplicat
  001e6	83 f9 23	 cmp	 ecx, 35			; 00000023H
  001e9	0f 87 00 01 00
	00		 ja	 $LN538@IsApplicat
  001ef	8b c8		 mov	 ecx, eax
$LN357@IsApplicat:
  001f1	51		 push	 ecx
  001f2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f7	83 c4 04	 add	 esp, 4
$LN362@IsApplicat:
  001fa	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  00200	c7 85 c8 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T1[ebp+20], 15 ; 0000000fH
  0020a	c7 85 c4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp+16], 0
  00214	c6 85 b4 fb ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0021b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0021e	72 41		 jb	 SHORT $LN479@IsApplicat
  00220	8b 8d e4 fb ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00226	40		 inc	 eax
  00227	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0022c	72 2a		 jb	 SHORT $LN474@IsApplicat
  0022e	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00231	0f 85 b8 00 00
	00		 jne	 $LN538@IsApplicat
  00237	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0023a	3b c1		 cmp	 eax, ecx
  0023c	0f 83 ad 00 00
	00		 jae	 $LN538@IsApplicat
  00242	2b c8		 sub	 ecx, eax
  00244	83 f9 04	 cmp	 ecx, 4
  00247	0f 82 a2 00 00
	00		 jb	 $LN538@IsApplicat
  0024d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00250	0f 87 99 00 00
	00		 ja	 $LN538@IsApplicat
  00256	8b c8		 mov	 ecx, eax
$LN474@IsApplicat:
  00258	51		 push	 ecx
  00259	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0025e	83 c4 04	 add	 esp, 4
$LN479@IsApplicat:
  00261	0f b6 85 fc fb
	ff ff		 movzx	 eax, BYTE PTR _regName$[ebp]
  00268	33 c9		 xor	 ecx, ecx
  0026a	84 db		 test	 bl, bl
  0026c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__RegEnumKeyExA@32
  00272	0f 45 c1	 cmovne	 eax, ecx
  00275	88 85 fc fb ff
	ff		 mov	 BYTE PTR _regName$[ebp], al
$LN6@IsApplicat:

; 12135: 				regName[0] = 0;
; 12136: 		}
; 12137: 
; 12138: 		if (_stricmp (regName, appName) == 0)

  0027b	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _regName$[ebp]
  00281	57		 push	 edi
  00282	50		 push	 eax
  00283	e8 00 00 00 00	 call	 __stricmp
  00288	83 c4 08	 add	 esp, 8
  0028b	85 c0		 test	 eax, eax
  0028d	74 33		 je	 SHORT $LN531@IsApplicat

; 12124: 	}
; 12125: 
; 12126: 	char regName[1024];
; 12127: 	DWORD regNameSize = sizeof (regName);
; 12128: 	DWORD index = 0;
; 12129: 	while (RegEnumKeyEx (unistallKey, index++, regName, &regNameSize, NULL, NULL, NULL, NULL) == ERROR_SUCCESS)

  0028f	6a 00		 push	 0
  00291	6a 00		 push	 0
  00293	6a 00		 push	 0
  00295	6a 00		 push	 0
  00297	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _regNameSize$[ebp]

; 12141: 			break;
; 12142: 		}
; 12143: 
; 12144: 		regNameSize = sizeof (regName);

  0029d	c7 85 b0 fb ff
	ff 00 04 00 00	 mov	 DWORD PTR _regNameSize$[ebp], 1024 ; 00000400H
  002a7	50		 push	 eax
  002a8	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _regName$[ebp]
  002ae	50		 push	 eax
  002af	56		 push	 esi
  002b0	ff b5 ac fb ff
	ff		 push	 DWORD PTR _unistallKey$[ebp]
  002b6	ff d3		 call	 ebx
  002b8	85 c0		 test	 eax, eax
  002ba	0f 84 d2 fd ff
	ff		 je	 $LL2@IsApplicat

; 12124: 	}
; 12125: 
; 12126: 	char regName[1024];
; 12127: 	DWORD regNameSize = sizeof (regName);
; 12128: 	DWORD index = 0;
; 12129: 	while (RegEnumKeyEx (unistallKey, index++, regName, &regNameSize, NULL, NULL, NULL, NULL) == ERROR_SUCCESS)

  002c0	eb 0a		 jmp	 SHORT $LN532@IsApplicat
$LN531@IsApplicat:

; 12139: 		{
; 12140: 			installed = TRUE;

  002c2	c7 85 a8 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR _installed$1$[ebp], 1
$LN532@IsApplicat:

; 12145: 	}
; 12146: 
; 12147: 	RegCloseKey (unistallKey);

  002cc	ff b5 ac fb ff
	ff		 push	 DWORD PTR _unistallKey$[ebp]
  002d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 12148: 	return installed;
; 12149: }

  002d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002db	8b 85 a8 fb ff
	ff		 mov	 eax, DWORD PTR _installed$1$[ebp]
  002e1	33 cd		 xor	 ecx, ebp
  002e3	5e		 pop	 esi
  002e4	5b		 pop	 ebx
  002e5	5f		 pop	 edi
  002e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002eb	8b e5		 mov	 esp, ebp
  002ed	5d		 pop	 ebp
  002ee	c3		 ret	 0
$LN538@IsApplicat:

; 12132: 		{
; 12133: 			regNameSize = sizeof (regName);
; 12134: 			if (!ReadLocalMachineRegistryStringNonReflected ((string (uninstallRegName) + "\\" + regName).c_str(), "DisplayName", regName, &regNameSize))

  002ef	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN539@IsApplicat:
$LN537@IsApplicat:
  002f4	cc		 int	 3
_IsApplicationInstalled ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LaunchWindowsIsoBurner
_TEXT	SEGMENT
$T1 = -76						; size = 24
$T2 = -52						; size = 24
$T3 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_isoPath$ = 12						; size = 4
_LaunchWindowsIsoBurner PROC				; COMDAT

; 12031: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 0c	 mov	 esi, DWORD PTR _isoPath$[ebp]

; 12032: 	int r = (int) ShellExecute (hwnd, "open", ISO_BURNER_TOOL, (string ("\"") + isoPath + "\"").c_str(), NULL, SW_SHOWNORMAL);

  00014	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _hwnd$[ebp]
  0001b	6a 01		 push	 1
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  00022	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  00030	c6 45 e4 00	 mov	 BYTE PTR $T3[ebp], 0
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
  0003e	56		 push	 esi
  0003f	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  00042	50		 push	 eax
  00043	8d 45 b4	 lea	 eax, DWORD PTR $T1[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	50		 push	 eax
  00050	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00060	72 02		 jb	 SHORT $LN129@LaunchWind
  00062	8b 00		 mov	 eax, DWORD PTR [eax]
$LN129@LaunchWind:
  00064	6a 01		 push	 1
  00066	6a 00		 push	 0
  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JJLAKNKG@isoburn?4exe?$AA@
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00073	57		 push	 edi
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp+20]
  0007d	8b f0		 mov	 esi, eax
  0007f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00082	72 0d		 jb	 SHORT $LN139@LaunchWind
  00084	41		 inc	 ecx
  00085	51		 push	 ecx
  00086	ff 75 cc	 push	 DWORD PTR $T2[ebp]
  00089	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0008c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN139@LaunchWind:
  00091	8b 45 c8	 mov	 eax, DWORD PTR $T1[ebp+20]
  00094	c7 45 e0 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
  0009b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
  000a2	c6 45 cc 00	 mov	 BYTE PTR $T2[ebp], 0
  000a6	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a9	72 0d		 jb	 SHORT $LN240@LaunchWind
  000ab	40		 inc	 eax
  000ac	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  000af	50		 push	 eax
  000b0	ff 75 b4	 push	 DWORD PTR $T1[ebp]
  000b3	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN240@LaunchWind:
  000b8	8b 45 f8	 mov	 eax, DWORD PTR $T3[ebp+20]
  000bb	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T1[ebp+20], 15 ; 0000000fH
  000c2	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+16], 0
  000c9	c6 45 b4 00	 mov	 BYTE PTR $T1[ebp], 0
  000cd	83 f8 10	 cmp	 eax, 16			; 00000010H
  000d0	72 0d		 jb	 SHORT $LN341@LaunchWind
  000d2	40		 inc	 eax
  000d3	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  000d6	50		 push	 eax
  000d7	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  000da	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN341@LaunchWind:

; 12033: 
; 12034: 	if (r <= 32)

  000df	83 fe 20	 cmp	 esi, 32			; 00000020H
  000e2	7f 22		 jg	 SHORT $LN2@LaunchWind

; 12035: 	{
; 12036: 		SetLastError (r);

  000e4	56		 push	 esi
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 12037: 		handleWin32Error (hwnd);

  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 _handleWin32Error
  000f1	83 c4 04	 add	 esp, 4

; 12038: 
; 12039: 		return FALSE;

  000f4	33 c0		 xor	 eax, eax
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi

; 12040: 	}
; 12041: 
; 12042: 	return TRUE;
; 12043: }

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
$LN2@LaunchWind:
  00106	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00109	b8 01 00 00 00	 mov	 eax, 1
  0010e	5f		 pop	 edi
  0010f	33 cd		 xor	 ecx, ebp
  00111	5e		 pop	 esi
  00112	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
_LaunchWindowsIsoBurner ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsWindowsIsoBurnerAvailable
_TEXT	SEGMENT
_path$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_IsWindowsIsoBurnerAvailable PROC			; COMDAT

; 12002: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	68 08 02 00 00	 push	 520			; 00000208H
  00018	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset

; 12003: 	char path[MAX_PATH*2] = { 0 };
; 12004: 
; 12005: 	if (!IsOSAtLeast (WIN_7))

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	85 c0		 test	 eax, eax
  00030	7f 0c		 jg	 SHORT $LN10@IsWindowsI
  00032	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN10@IsWindowsI:
  0003e	c1 e0 08	 shl	 eax, 8
  00041	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  00047	c1 e0 08	 shl	 eax, 8
  0004a	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  00050	3d 00 01 06 00	 cmp	 eax, 393472		; 00060100H
  00055	7c 66		 jl	 SHORT $LN3@IsWindowsI

; 12006: 	{
; 12007: 		return FALSE;
; 12008: 	}
; 12009: 
; 12010: 	if (SUCCEEDED(SHGetFolderPath (NULL, CSIDL_SYSTEM, NULL, 0, path)))

  00057	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  0005d	50		 push	 eax
  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	6a 25		 push	 37			; 00000025H
  00064	6a 00		 push	 0
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  0006c	85 c0		 test	 eax, eax
  0006e	78 4d		 js	 SHORT $LN3@IsWindowsI

; 12011: 	{
; 12012: 		strcat (path, "\\" ISO_BURNER_TOOL);

  00070	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00076	49		 dec	 ecx
$LL18@IsWindowsI:
  00077	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0007a	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0007d	84 c0		 test	 al, al
  0007f	75 f6		 jne	 SHORT $LL18@IsWindowsI
  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@
  00086	89 01		 mov	 DWORD PTR [ecx], eax
  00088	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@+4
  0008d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00090	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@+8
  00095	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00098	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@HOCBKDMB@?2isoburn?4exe?$AA@+12
  0009d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 12013: 
; 12014: 		return (FileExists (path));

  000a0	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _FileExists
  000ac	83 c4 04	 add	 esp, 4

; 12015: 	}
; 12016: 
; 12017: 	return FALSE;
; 12018: }

  000af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN3@IsWindowsI:
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	33 c0		 xor	 eax, eax
  000c2	33 cd		 xor	 ecx, ebp
  000c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
_IsWindowsIsoBurnerAvailable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _VolumePathExists
_TEXT	SEGMENT
_openTest$ = -1108					; size = 536
$T1 = -572						; size = 24
_path$ = -548						; size = 24
_devicePath$2 = -524					; size = 260
_upperCasePath$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_volumePath$ = 8					; size = 4
_VolumePathExists PROC					; COMDAT

; 11973: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 04 00
	00		 sub	 esp, 1108		; 00000454H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _volumePath$[ebp]

; 11974: 	OPEN_TEST_STRUCT openTest;
; 11975: 	char upperCasePath[GST_MAX_PATH];
; 11976: 
; 11977: 	UpperCaseCopy (upperCasePath, volumePath);

  00017	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _upperCasePath$[ebp]
  0001d	56		 push	 esi
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _UpperCaseCopy

; 11978: 
; 11979: 	if (strstr (upperCasePath, "\\DEVICE\\") == upperCasePath)

  00024	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _upperCasePath$[ebp]
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_08FALOLEII@?2DEVICE?2?$AA@
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _strstr
  00035	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _upperCasePath$[ebp]
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
  0003e	3b c1		 cmp	 eax, ecx
  00040	75 21		 jne	 SHORT $LN2@VolumePath

; 11980: 		return OpenDevice (volumePath, &openTest, FALSE);

  00042	6a 00		 push	 0
  00044	8d 85 ac fb ff
	ff		 lea	 eax, DWORD PTR _openTest$[ebp]
  0004a	50		 push	 eax
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _OpenDevice
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
  00054	5e		 pop	 esi

; 11991: }

  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	33 cd		 xor	 ecx, ebp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN2@VolumePath:

; 11981: 
; 11982: 	string path = volumePath;

  00063	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00066	c7 85 f0 fd ff
	ff 0f 00 00 00	 mov	 DWORD PTR _path$[ebp+20], 15 ; 0000000fH
  00070	c7 85 ec fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _path$[ebp+16], 0
  0007a	c6 85 dc fd ff
	ff 00		 mov	 BYTE PTR _path$[ebp], 0
  00081	75 04		 jne	 SHORT $LN119@VolumePath
  00083	33 c9		 xor	 ecx, ecx
  00085	eb 12		 jmp	 SHORT $LN120@VolumePath
$LN119@VolumePath:
  00087	8b ce		 mov	 ecx, esi
  00089	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008c	0f 1f 40 00	 npad	 4
$LL275@VolumePath:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL275@VolumePath
  00097	2b ca		 sub	 ecx, edx
$LN120@VolumePath:
  00099	51		 push	 ecx
  0009a	56		 push	 esi
  0009b	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  000a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 11983: 	if (path.find ("\\\\?\\Volume{") == 0 && path.rfind ("}\\") == path.size() - 2)

  000a6	6a 0b		 push	 11			; 0000000bH
  000a8	6a 00		 push	 0
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CJEJOKNC@?2?2?$DP?2Volume?$HL?$AA@
  000af	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  000b5	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  000ba	85 c0		 test	 eax, eax
  000bc	75 71		 jne	 SHORT $LN4@VolumePath
  000be	6a 02		 push	 2
  000c0	6a ff		 push	 -1
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  000c7	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  000cd	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  000d2	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _path$[ebp+16]
  000d8	8d 4a fe	 lea	 ecx, DWORD PTR [edx-2]
  000db	3b c1		 cmp	 eax, ecx
  000dd	75 50		 jne	 SHORT $LN4@VolumePath

; 11984: 	{
; 11985: 		char devicePath[GST_MAX_PATH];
; 11986: 		if (QueryDosDevice (path.substr (4, path.size() - 5).c_str(), devicePath, GST_MAX_PATH) != 0)

  000df	8d 42 fb	 lea	 eax, DWORD PTR [edx-5]
  000e2	50		 push	 eax
  000e3	6a 04		 push	 4
  000e5	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000eb	50		 push	 eax
  000ec	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  000f2	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000f7	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000fb	72 02		 jb	 SHORT $LN170@VolumePath
  000fd	8b 00		 mov	 eax, DWORD PTR [eax]
$LN170@VolumePath:
  000ff	53		 push	 ebx
  00100	68 04 01 00 00	 push	 260			; 00000104H
  00105	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _devicePath$2[ebp]
  0010b	51		 push	 ecx
  0010c	50		 push	 eax
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryDosDeviceA@12
  00113	85 c0		 test	 eax, eax
  00115	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0011b	0f 95 c3	 setne	 bl
  0011e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00123	84 db		 test	 bl, bl
  00125	5b		 pop	 ebx
  00126	74 07		 je	 SHORT $LN4@VolumePath
  00128	be 01 00 00 00	 mov	 esi, 1
  0012d	eb 12		 jmp	 SHORT $LN6@VolumePath
$LN4@VolumePath:

; 11987: 			return TRUE;
; 11988: 	}
; 11989: 
; 11990: 	return _access (volumePath, 0) == 0;

  0012f	6a 00		 push	 0
  00131	56		 push	 esi
  00132	e8 00 00 00 00	 call	 __access
  00137	83 c4 08	 add	 esp, 8
  0013a	8b f0		 mov	 esi, eax
  0013c	f7 de		 neg	 esi
  0013e	1b f6		 sbb	 esi, esi
  00140	46		 inc	 esi
$LN6@VolumePath:
  00141	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR _path$[ebp+20]
  00147	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0014a	72 13		 jb	 SHORT $LN180@VolumePath
  0014c	41		 inc	 ecx
  0014d	51		 push	 ecx
  0014e	ff b5 dc fd ff
	ff		 push	 DWORD PTR _path$[ebp]
  00154	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  0015a	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN180@VolumePath:

; 11991: }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	8b c6		 mov	 eax, esi
  00164	33 cd		 xor	 ecx, ebp
  00166	5e		 pop	 esi
  00167	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
_VolumePathExists ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DisableFileCompression
_TEXT	SEGMENT
_bytesOut$ = -8						; size = 4
_format$ = -4						; size = 2
_file$ = 8						; size = 4
_DisableFileCompression PROC				; COMDAT

; 11949: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 11950: 	USHORT format;
; 11951: 	DWORD bytesOut;
; 11952: 
; 11953: 	if (!DeviceIoControl (file, FSCTL_GET_COMPRESSION, NULL, 0, &format, sizeof (format), &bytesOut, NULL))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _bytesOut$[ebp]
  00009	6a 00		 push	 0
  0000b	50		 push	 eax
  0000c	6a 02		 push	 2
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _format$[ebp]
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	68 3c 00 09 00	 push	 589884			; 0009003cH
  0001b	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@DisableFil

; 11961: }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@DisableFil:

; 11954: 		return FALSE;
; 11955: 
; 11956: 	if (format == COMPRESSION_FORMAT_NONE)

  0002c	66 83 7d fc 00	 cmp	 WORD PTR _format$[ebp], 0
  00031	75 09		 jne	 SHORT $LN3@DisableFil

; 11957: 		return TRUE;

  00033	b8 01 00 00 00	 mov	 eax, 1

; 11961: }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN3@DisableFil:

; 11958: 
; 11959: 	format = COMPRESSION_FORMAT_NONE;
; 11960: 	return DeviceIoControl (file, FSCTL_SET_COMPRESSION, &format, sizeof (format), NULL, 0, &bytesOut, NULL); 

  0003c	6a 00		 push	 0
  0003e	8d 45 f8	 lea	 eax, DWORD PTR _bytesOut$[ebp]
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _format$[ebp], 0
  00048	50		 push	 eax
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 02		 push	 2
  0004f	8d 45 fc	 lea	 eax, DWORD PTR _format$[ebp]
  00052	50		 push	 eax
  00053	68 40 c0 09 00	 push	 639040			; 0009c040H
  00058	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 11961: }

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_DisableFileCompression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _EnableElevatedCursorChange
_TEXT	SEGMENT
_winClass$1 = -48					; size = 48
_parent$ = 8						; size = 4
_EnableElevatedCursorChange PROC			; COMDAT

; 11915: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 11916: 	// Create a transparent window to work around a UAC issue preventing change of the cursor
; 11917: 	if (UacElevated)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _UacElevated, 0
  0000d	0f 84 a1 00 00
	00		 je	 $LN2@EnableElev

; 11918: 	{
; 11919: 		const char *className = "GostCryptEnableElevatedCursorChange";
; 11920: 		WNDCLASSEX winClass;
; 11921: 		HWND hWnd;
; 11922: 
; 11923: 		memset (&winClass, 0, sizeof (winClass));

  00013	56		 push	 esi
  00014	6a 30		 push	 48			; 00000030H
  00016	8d 45 d0	 lea	 eax, DWORD PTR _winClass$1[ebp]
  00019	6a 00		 push	 0
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memset

; 11924: 		winClass.cbSize = sizeof (WNDCLASSEX); 
; 11925: 		winClass.lpfnWndProc = (WNDPROC) EnableElevatedCursorChangeWndProc;
; 11926: 		winClass.hInstance = hInst;

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR _hInst
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	89 45 e4	 mov	 DWORD PTR _winClass$1[ebp+20], eax

; 11927: 		winClass.lpszClassName = className;
; 11928: 		RegisterClassEx (&winClass);

  0002c	8d 45 d0	 lea	 eax, DWORD PTR _winClass$1[ebp]
  0002f	c7 45 d0 30 00
	00 00		 mov	 DWORD PTR _winClass$1[ebp], 48 ; 00000030H
  00036	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _winClass$1[ebp+8], OFFSET ?EnableElevatedCursorChangeWndProc@@YGJPAUHWND__@@IIJ@Z ; EnableElevatedCursorChangeWndProc
  0003d	50		 push	 eax
  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _winClass$1[ebp+40], OFFSET ??_C@_0CE@DMPALGPC@GostCryptEnableElevatedCursorCha@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4

; 11929: 
; 11930: 		hWnd = CreateWindowEx (WS_EX_TOOLWINDOW | WS_EX_LAYERED, className, "GostCrypt UAC", 0, 0, 0, GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN), parent, NULL, hInst, NULL);

  0004b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetSystemMetrics@4
  00051	6a 00		 push	 0
  00053	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00059	6a 00		 push	 0
  0005b	ff 75 08	 push	 DWORD PTR _parent$[ebp]
  0005e	6a 01		 push	 1
  00060	ff d6		 call	 esi
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	ff d6		 call	 esi
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MNJOMPAF@GostCrypt?5UAC?$AA@
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DMPALGPC@GostCryptEnableElevatedCursorCha@
  00078	68 80 00 08 00	 push	 524416			; 00080080H
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48

; 11931: 		SetLayeredWindowAttributes (hWnd, 0, 1, LWA_ALPHA);

  00083	6a 02		 push	 2
  00085	6a 01		 push	 1
  00087	8b f0		 mov	 esi, eax
  00089	6a 00		 push	 0
  0008b	56		 push	 esi
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLayeredWindowAttributes@16

; 11932: 		ShowWindow (hWnd, SW_SHOWNORMAL);

  00092	6a 01		 push	 1
  00094	56		 push	 esi
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 11933: 
; 11934: 		DestroyWindow (hWnd);

  0009b	56		 push	 esi
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 11935: 		UnregisterClass (className, hInst);

  000a2	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DMPALGPC@GostCryptEnableElevatedCursorCha@
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassA@8
  000b3	5e		 pop	 esi
$LN2@EnableElev:

; 11936: 	}
; 11937: }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_EnableElevatedCursorChange ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RemoveDeviceWriteProtection
_TEXT	SEGMENT
_partitionNumber$ = -1572				; size = 4
_driveNumber$ = -1568					; size = 4
_temp$ = -1564						; size = 520
_diskpartScript$ = -1044				; size = 520
_cmdBatch$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_devicePath$ = 12					; size = 4
_RemoveDeviceWriteProtection PROC			; COMDAT

; 11836: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 06 00
	00		 sub	 esp, 1572		; 00000624H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _devicePath$[ebp]

; 11837: 	int driveNumber;
; 11838: 	int partitionNumber;
; 11839: 
; 11840: 	char temp[MAX_PATH*2];
; 11841: 	char cmdBatch[MAX_PATH*2];
; 11842: 	char diskpartScript[MAX_PATH*2];
; 11843: 
; 11844: 	if (sscanf (devicePath, "\\Device\\Harddisk%d\\Partition%d", &driveNumber, &partitionNumber) != 2)

  00016	8d 8d dc f9 ff
	ff		 lea	 ecx, DWORD PTR _partitionNumber$[ebp]
  0001c	57		 push	 edi
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _hwndDlg$[ebp]
  00020	51		 push	 ecx
  00021	8d 8d e0 f9 ff
	ff		 lea	 ecx, DWORD PTR _driveNumber$[ebp]
  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MDCLODBD@?2Device?2Harddisk?$CFd?2Partition?$CFd?$AA@
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _sscanf
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	83 f8 02	 cmp	 eax, 2
  00039	74 11		 je	 SHORT $LN2@RemoveDevi
$LN13@RemoveDevi:

; 11845: 		return FALSE;

  0003b	33 c0		 xor	 eax, eax
  0003d	5f		 pop	 edi

; 11884: 
; 11885: 	return TRUE;
; 11886: }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN2@RemoveDevi:

; 11846: 
; 11847: 	if (GetTempPath (sizeof (temp), temp) == 0)

  0004c	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00052	50		 push	 eax
  00053	68 08 02 00 00	 push	 520			; 00000208H
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8
  0005e	85 c0		 test	 eax, eax
  00060	74 d9		 je	 SHORT $LN13@RemoveDevi

; 11848: 		return FALSE;
; 11849: 
; 11850: 	_snprintf (cmdBatch, sizeof (cmdBatch), "%s\\GostCrypt_Write_Protection_Removal.cmd", temp);

  00062	56		 push	 esi
  00063	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GCBAHDNG@?$CFs?2GostCrypt_Write_Protection_Re@
  0006f	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _cmdBatch$[ebp]
  00075	68 08 02 00 00	 push	 520			; 00000208H
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 __snprintf

; 11851: 	_snprintf (diskpartScript, sizeof (diskpartScript), "%s\\GostCrypt_Write_Protection_Removal.diskpart", temp);

  00080	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HCNNGBFB@?$CFs?2GostCrypt_Write_Protection_Re@
  0008c	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _diskpartScript$[ebp]
  00092	68 08 02 00 00	 push	 520			; 00000208H
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 __snprintf

; 11852: 
; 11853: 	FILE *f = fopen (cmdBatch, "w");

  0009d	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _cmdBatch$[ebp]
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _fopen
  000ae	8b f0		 mov	 esi, eax
  000b0	83 c4 28	 add	 esp, 40			; 00000028H

; 11854: 	if (!f)

  000b3	85 f6		 test	 esi, esi
  000b5	75 1b		 jne	 SHORT $LN4@RemoveDevi

; 11855: 	{
; 11856: 		handleWin32Error (hwndDlg);

  000b7	57		 push	 edi
  000b8	e8 00 00 00 00	 call	 _handleWin32Error
  000bd	83 c4 04	 add	 esp, 4

; 11857: 		return FALSE;

  000c0	33 c0		 xor	 eax, eax
  000c2	5e		 pop	 esi
  000c3	5f		 pop	 edi

; 11884: 
; 11885: 	return TRUE;
; 11886: }

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN4@RemoveDevi:

; 11858: 	}
; 11859: 
; 11860: 	fprintf (f, "@diskpart /s \"%s\"\n@pause\n@del \"%s\" \"%s\"", diskpartScript, diskpartScript, cmdBatch);

  000d2	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _cmdBatch$[ebp]
  000d8	50		 push	 eax
  000d9	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _diskpartScript$[ebp]
  000df	50		 push	 eax
  000e0	50		 push	 eax
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FDJHAAPA@?$EAdiskpart?5?1s?5?$CC?$CFs?$CC?6?$EApause?6?$EAdel?5?$CC?$CF@
  000e6	56		 push	 esi
  000e7	e8 00 00 00 00	 call	 _fprintf

; 11861: 
; 11862: 	CheckFileStreamWriteErrors (f, cmdBatch);

  000ec	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _cmdBatch$[ebp]
  000f2	50		 push	 eax
  000f3	56		 push	 esi
  000f4	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 11863: 	fclose (f);

  000f9	56		 push	 esi
  000fa	e8 00 00 00 00	 call	 _fclose

; 11864: 
; 11865: 	f = fopen (diskpartScript, "w");

  000ff	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _diskpartScript$[ebp]
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _fopen
  00110	8b f0		 mov	 esi, eax
  00112	83 c4 28	 add	 esp, 40			; 00000028H

; 11866: 	if (!f)

  00115	85 f6		 test	 esi, esi
  00117	75 28		 jne	 SHORT $LN5@RemoveDevi

; 11867: 	{
; 11868: 		handleWin32Error (hwndDlg);

  00119	57		 push	 edi
  0011a	e8 00 00 00 00	 call	 _handleWin32Error
  0011f	83 c4 04	 add	 esp, 4

; 11869: 		DeleteFile (cmdBatch);

  00122	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _cmdBatch$[ebp]
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
  0012f	5e		 pop	 esi

; 11870: 		return FALSE;

  00130	33 c0		 xor	 eax, eax
  00132	5f		 pop	 edi

; 11884: 
; 11885: 	return TRUE;
; 11886: }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN5@RemoveDevi:

; 11871: 	}
; 11872: 
; 11873: 	fprintf (f, "select disk %d\nattributes disk clear readonly\n", driveNumber);

  00141	ff b5 e0 f9 ff
	ff		 push	 DWORD PTR _driveNumber$[ebp]
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DIEKEDPA@select?5disk?5?$CFd?6attributes?5disk?5c@
  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 _fprintf

; 11874: 
; 11875: 	if (partitionNumber != 0)

  00152	8b 85 dc f9 ff
	ff		 mov	 eax, DWORD PTR _partitionNumber$[ebp]
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015b	85 c0		 test	 eax, eax
  0015d	74 0f		 je	 SHORT $LN6@RemoveDevi

; 11876: 		fprintf (f, "select partition %d\nattributes volume clear readonly\n", partitionNumber);

  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@HAFOMLKA@select?5partition?5?$CFd?6attributes?5v@
  00165	56		 push	 esi
  00166	e8 00 00 00 00	 call	 _fprintf
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@RemoveDevi:

; 11877: 
; 11878: 	fprintf (f, "exit\n");

  0016e	68 00 00 00 00	 push	 OFFSET ??_C@_05DAJPPLDE@exit?6?$AA@
  00173	56		 push	 esi
  00174	e8 00 00 00 00	 call	 _fprintf

; 11879: 
; 11880: 	CheckFileStreamWriteErrors (f, diskpartScript);

  00179	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _diskpartScript$[ebp]
  0017f	50		 push	 eax
  00180	56		 push	 esi
  00181	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 11881: 	fclose (f);

  00186	56		 push	 esi
  00187	e8 00 00 00 00	 call	 _fclose
  0018c	83 c4 14	 add	 esp, 20			; 00000014H

; 11882: 
; 11883: 	ShellExecute (NULL, (!IsAdmin() && IsUacSupported()) ? "runas" : "open", cmdBatch, NULL, NULL, SW_SHOW);

  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsUserAnAdmin@0
  00195	85 c0		 test	 eax, eax
  00197	75 0e		 jne	 SHORT $LN8@RemoveDevi
  00199	e8 00 00 00 00	 call	 _IsUacSupported
  0019e	85 c0		 test	 eax, eax
  001a0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05KPBLJGDL@runas?$AA@
  001a5	75 05		 jne	 SHORT $LN9@RemoveDevi
$LN8@RemoveDevi:
  001a7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04PMOCAHAA@open?$AA@
$LN9@RemoveDevi:
  001ac	6a 05		 push	 5
  001ae	6a 00		 push	 0
  001b0	6a 00		 push	 0
  001b2	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _cmdBatch$[ebp]
  001b8	51		 push	 ecx
  001b9	50		 push	 eax
  001ba	6a 00		 push	 0
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 11884: 
; 11885: 	return TRUE;
; 11886: }

  001c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c5	b8 01 00 00 00	 mov	 eax, 1
  001ca	5e		 pop	 esi
  001cb	33 cd		 xor	 ecx, ebp
  001cd	5f		 pop	 edi
  001ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c3		 ret	 0
_RemoveDeviceWriteProtection ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _BufferContainsString
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_bufferSize$ = 12					; size = 4
_str$ = 16						; size = 4
_BufferContainsString PROC				; COMDAT

; 11774: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 11775: 	size_t strLen = strlen (str);

  00004	8b 75 10	 mov	 esi, DWORD PTR _str$[ebp]
  00007	57		 push	 edi
  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL13@BufferCont:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL13@BufferCont

; 11776: 
; 11777: 	if (bufferSize < strLen)

  00017	8b 45 0c	 mov	 eax, DWORD PTR _bufferSize$[ebp]
  0001a	2b f9		 sub	 edi, ecx
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 06		 jae	 SHORT $LN5@BufferCont

; 11778: 		return FALSE;

  00020	5f		 pop	 edi
  00021	33 c0		 xor	 eax, eax
  00023	5e		 pop	 esi

; 11789: }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN5@BufferCont:

; 11779: 
; 11780: 	bufferSize -= strLen;

  00026	2b c7		 sub	 eax, edi
  00028	53		 push	 ebx
  00029	89 45 0c	 mov	 DWORD PTR _bufferSize$[ebp], eax

; 11781: 
; 11782: 	for (size_t i = 0; i < bufferSize; ++i)

  0002c	bb 00 00 00 00	 mov	 ebx, 0
  00031	74 59		 je	 SHORT $LN3@BufferCont
$LL4@BufferCont:

; 11783: 	{
; 11784: 		if (memcmp (buffer + i, str, strLen) == 0)

  00033	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00036	8b c7		 mov	 eax, edi
  00038	03 d3		 add	 edx, ebx
  0003a	83 e8 04	 sub	 eax, 4
  0003d	72 12		 jb	 SHORT $LN16@BufferCont
  0003f	90		 npad	 1
$LL17@BufferCont:
  00040	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00042	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00044	75 10		 jne	 SHORT $LN15@BufferCont
  00046	83 c2 04	 add	 edx, 4
  00049	83 c6 04	 add	 esi, 4
  0004c	83 e8 04	 sub	 eax, 4
  0004f	73 ef		 jae	 SHORT $LL17@BufferCont
$LN16@BufferCont:
  00051	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00054	74 3d		 je	 SHORT $LN14@BufferCont
$LN15@BufferCont:
  00056	8a 0a		 mov	 cl, BYTE PTR [edx]
  00058	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0005a	75 27		 jne	 SHORT $LN18@BufferCont
  0005c	83 f8 fd	 cmp	 eax, -3			; fffffffdH
  0005f	74 32		 je	 SHORT $LN14@BufferCont
  00061	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  00064	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00067	75 1a		 jne	 SHORT $LN18@BufferCont
  00069	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0006c	74 25		 je	 SHORT $LN14@BufferCont
  0006e	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  00071	3a 4e 02	 cmp	 cl, BYTE PTR [esi+2]
  00074	75 0d		 jne	 SHORT $LN18@BufferCont
  00076	83 f8 ff	 cmp	 eax, -1
  00079	74 18		 je	 SHORT $LN14@BufferCont
  0007b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0007e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00081	74 10		 je	 SHORT $LN14@BufferCont
$LN18@BufferCont:

; 11781: 
; 11782: 	for (size_t i = 0; i < bufferSize; ++i)

  00083	8b 75 10	 mov	 esi, DWORD PTR _str$[ebp]
  00086	43		 inc	 ebx
  00087	3b 5d 0c	 cmp	 ebx, DWORD PTR _bufferSize$[ebp]
  0008a	72 a7		 jb	 SHORT $LL4@BufferCont
$LN3@BufferCont:
  0008c	5b		 pop	 ebx
  0008d	5f		 pop	 edi

; 11786: 	}
; 11787: 
; 11788: 	return FALSE;

  0008e	33 c0		 xor	 eax, eax
  00090	5e		 pop	 esi

; 11789: }

  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN14@BufferCont:
  00093	5b		 pop	 ebx
  00094	5f		 pop	 edi

; 11785: 			return TRUE;

  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	5e		 pop	 esi

; 11789: }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_BufferContainsString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CheckFilesystem
_TEXT	SEGMENT
_driveRoot$ = -4104					; size = 3
_param$ = -4100						; size = 2048
_msg$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
_driveNo$ = 8						; size = 4
_fixErrors$ = 12					; size = 4
_CheckFilesystem PROC					; COMDAT

; 11749: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 08 10 00 00	 mov	 eax, 4104		; 00001008H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 11750: 	wchar_t msg[1024], param[1024];
; 11751: 	char driveRoot[] = { 'A' + (char) driveNo, ':', 0 };

  00017	8a 45 08	 mov	 al, BYTE PTR _driveNo$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _fixErrors$[ebp]
  0001e	04 41		 add	 al, 65			; 00000041H
  00020	88 85 f8 ef ff
	ff		 mov	 BYTE PTR _driveRoot$[ebp], al
  00026	66 c7 85 f9 ef
	ff ff 3a 00	 mov	 WORD PTR _driveRoot$[ebp+1], 58 ; 0000003aH

; 11752: 
; 11753: 	if (fixErrors && AskWarnYesNo ("FILESYS_REPAIR_CONFIRM_BACKUP") == IDNO)

  0002f	85 ff		 test	 edi, edi
  00031	74 38		 je	 SHORT $LN2@CheckFiles
  00033	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0003a	0f 85 bc 00 00
	00		 jne	 $LN1@CheckFiles
  00040	6a 34		 push	 52			; 00000034H
  00042	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JFNCHGE@FILESYS_REPAIR_CONFIRM_BACKUP?$AA@
  0004d	e8 00 00 00 00	 call	 _GetString
  00052	83 c4 04	 add	 esp, 4
  00055	50		 push	 eax
  00056	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00062	83 f8 07	 cmp	 eax, 7
  00065	0f 84 91 00 00
	00		 je	 $LN1@CheckFiles
$LN2@CheckFiles:

; 11754: 		return;
; 11755: 
; 11756: 	wsprintfW (msg, GetString (fixErrors ? "REPAIRING_FS" : "CHECKING_FS"), driveRoot);

  0006b	8d 85 f8 ef ff
	ff		 lea	 eax, DWORD PTR _driveRoot$[ebp]
  00071	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0M@DMNKLGFJ@CHECKING_FS?$AA@
  00076	50		 push	 eax
  00077	85 ff		 test	 edi, edi
  00079	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0N@CFJEDEAE@REPAIRING_FS?$AA@
  0007e	0f 44 c1	 cmove	 eax, ecx
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _GetString
  00087	83 c4 04	 add	 esp, 4
  0008a	50		 push	 eax
  0008b	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00091	50		 push	 eax
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 11757: 	wsprintfW (param, fixErrors ? L"/C echo %s & chkdsk %hs /F /X & pause" : L"/C echo %s & chkdsk %hs & pause", msg, driveRoot);

  00098	8d 85 f8 ef ff
	ff		 lea	 eax, DWORD PTR _driveRoot$[ebp]
  0009e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_1EA@HMCMLJPJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?$CG?$AA?5?$AAp?$AAa?$AAu?$AAs?$AAe?$AA?$AA@
  000a3	50		 push	 eax
  000a4	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  000aa	85 ff		 test	 edi, edi
  000ac	50		 push	 eax
  000ad	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1EM@PJNCBGHJ@?$AA?1?$AAC?$AA?5?$AAe?$AAc?$AAh?$AAo?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CG?$AA?5?$AAc?$AAh?$AAk?$AAd?$AAs?$AAk?$AA?5?$AA?$CF?$AAh?$AAs?$AA?5?$AA?1?$AAF?$AA?5?$AA?1?$AAX?$AA?5?$AA?$CG?$AA?5@
  000b2	0f 44 c1	 cmove	 eax, ecx
  000b5	50		 push	 eax
  000b6	8d 85 fc ef ff
	ff		 lea	 eax, DWORD PTR _param$[ebp]
  000bc	50		 push	 eax
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  000c3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 11758: 
; 11759: 	ShellExecuteW (NULL, (!IsAdmin() && IsUacSupported()) ? L"runas" : L"open", L"cmd.exe", param, NULL, SW_SHOW);

  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsUserAnAdmin@0
  000cc	85 c0		 test	 eax, eax
  000ce	75 0e		 jne	 SHORT $LN4@CheckFiles
  000d0	e8 00 00 00 00	 call	 _IsUacSupported
  000d5	85 c0		 test	 eax, eax
  000d7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@CDHIAJCD@?$AAr?$AAu?$AAn?$AAa?$AAs?$AA?$AA@
  000dc	75 05		 jne	 SHORT $LN5@CheckFiles
$LN4@CheckFiles:
  000de	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_19BDAJEHDN@?$AAo?$AAp?$AAe?$AAn?$AA?$AA@
$LN5@CheckFiles:
  000e3	6a 05		 push	 5
  000e5	6a 00		 push	 0
  000e7	8d 8d fc ef ff
	ff		 lea	 ecx, DWORD PTR _param$[ebp]
  000ed	51		 push	 ecx
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@DBKIDAPL@?$AAc?$AAm?$AAd?$AA?4?$AAe?$AAx?$AAe?$AA?$AA@
  000f3	50		 push	 eax
  000f4	6a 00		 push	 0
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteW@24
$LN1@CheckFiles:

; 11760: }

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	33 cd		 xor	 ecx, ebp
  00101	5f		 pop	 edi
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
_CheckFilesystem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsFileOnReadOnlyFilesystem
_TEXT	SEGMENT
_d$ = -272						; size = 4
_flags$ = -268						; size = 4
_root$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_path$ = 8						; size = 4
_IsFileOnReadOnlyFilesystem PROC			; COMDAT

; 11726: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]

; 11727: 	char root[MAX_PATH];
; 11728: 	if (!GetVolumePathName (path, root, sizeof (root)))

  00016	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0001c	68 04 01 00 00	 push	 260			; 00000104H
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  00029	85 c0		 test	 eax, eax
  0002b	75 10		 jne	 SHORT $LN2@IsFileOnRe
$LN5@IsFileOnRe:

; 11729: 		return FALSE;

  0002d	33 c0		 xor	 eax, eax

; 11736: }

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 cd		 xor	 ecx, ebp
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN2@IsFileOnRe:

; 11730: 
; 11731: 	DWORD flags, d;
; 11732: 	if (!GetVolumeInformation (root, NULL, 0,  NULL, &d, &flags, NULL, 0))

  0003d	6a 00		 push	 0
  0003f	6a 00		 push	 0
  00041	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _flags$[ebp]
  00047	50		 push	 eax
  00048	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _d$[ebp]
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _root$[ebp]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  00062	85 c0		 test	 eax, eax
  00064	74 c7		 je	 SHORT $LN5@IsFileOnRe

; 11733: 		return FALSE;
; 11734: 
; 11735: 	return (flags & FILE_READ_ONLY_VOLUME) ? TRUE : FALSE;

  00066	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _flags$[ebp]

; 11736: }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	c1 e8 13	 shr	 eax, 19			; 00000013H
  00072	33 cd		 xor	 ecx, ebp
  00074	83 e0 01	 and	 eax, 1
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_IsFileOnReadOnlyFilesystem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FileHasReadOnlyAttribute
_TEXT	SEGMENT
_path$ = 8						; size = 4
_FileHasReadOnlyAttribute PROC				; COMDAT

; 11711: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 11712: 	DWORD attributes = GetFileAttributes (path);

  00003	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesA@4

; 11713: 	return attributes != INVALID_FILE_ATTRIBUTES && (attributes & FILE_ATTRIBUTE_READONLY) != 0;

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	74 0b		 je	 SHORT $LN3@FileHasRea
  00011	a8 01		 test	 al, 1
  00013	74 07		 je	 SHORT $LN3@FileHasRea
  00015	b8 01 00 00 00	 mov	 eax, 1

; 11714: }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN3@FileHasRea:

; 11713: 	return attributes != INVALID_FILE_ATTRIBUTES && (attributes & FILE_ATTRIBUTE_READONLY) != 0;

  0001c	33 c0		 xor	 eax, eax

; 11714: }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_FileHasReadOnlyAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DisablePagingFile
_TEXT	SEGMENT
_empty$ = -4						; size = 2
_DisablePagingFile PROC					; COMDAT

; 10888: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 10889: 	char empty[] = { 0, 0 };
; 10890: 	return WriteLocalMachineRegistryMultiString ("System\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "PagingFiles", empty, sizeof (empty));

  00004	6a 02		 push	 2
  00006	8d 45 fc	 lea	 eax, DWORD PTR _empty$[ebp]
  00009	66 c7 45 fc 00
	00		 mov	 WORD PTR _empty$[ebp], 0
  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  0001a	e8 00 00 00 00	 call	 _WriteLocalMachineRegistryMultiString
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 10891: }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_DisablePagingFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsPagingFileWildcardActive
_TEXT	SEGMENT
_size$ = -65544						; size = 4
_pagingFiles$ = -65540					; size = 65536
__$ArrayPad$ = -4					; size = 4
_IsPagingFileWildcardActive PROC			; COMDAT

; 10864: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 08 00 01 00	 mov	 eax, 65544		; 00010008H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 10865: 	char pagingFiles[65536];
; 10866: 	DWORD size = sizeof (pagingFiles);
; 10867: 	char *mmKey = "System\\CurrentControlSet\\Control\\Session Manager\\Memory Management";
; 10868: 
; 10869: 	if (!ReadLocalMachineRegistryString (mmKey, "PagingFiles", pagingFiles, &size))

  00017	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  0001d	c7 85 f8 ff fe
	ff 00 00 01 00	 mov	 DWORD PTR _size$[ebp], 65536 ; 00010000H
  00027	50		 push	 eax
  00028	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _pagingFiles$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  00039	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryString
  0003e	83 c4 10	 add	 esp, 16			; 00000010H
  00041	85 c0		 test	 eax, eax
  00043	75 2e		 jne	 SHORT $LN3@IsPagingFi

; 10870: 	{
; 10871: 		size = sizeof (pagingFiles);
; 10872: 		if (!ReadLocalMachineRegistryMultiString (mmKey, "PagingFiles", pagingFiles, &size))

  00045	8d 85 f8 ff fe
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  0004b	c7 85 f8 ff fe
	ff 00 00 01 00	 mov	 DWORD PTR _size$[ebp], 65536 ; 00010000H
  00055	50		 push	 eax
  00056	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _pagingFiles$[ebp]
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  00067	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryMultiString
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	85 c0		 test	 eax, eax
  00071	74 3a		 je	 SHORT $LN5@IsPagingFi
$LN3@IsPagingFi:

; 10873: 			size = 0;
; 10874: 	}
; 10875: 
; 10876: 	return size > 0 && strstr (pagingFiles, "?:\\") == pagingFiles;

  00073	83 bd f8 ff fe
	ff 00		 cmp	 DWORD PTR _size$[ebp], 0
  0007a	76 31		 jbe	 SHORT $LN5@IsPagingFi
  0007c	8d 85 fc ff fe
	ff		 lea	 eax, DWORD PTR _pagingFiles$[ebp]
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_03EJABLKAK@?$DP?3?2?$AA@
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _strstr
  0008d	8d 8d fc ff fe
	ff		 lea	 ecx, DWORD PTR _pagingFiles$[ebp]
  00093	83 c4 08	 add	 esp, 8
  00096	3b c1		 cmp	 eax, ecx
  00098	75 13		 jne	 SHORT $LN5@IsPagingFi
  0009a	b8 01 00 00 00	 mov	 eax, 1

; 10877: }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN5@IsPagingFi:
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 c0		 xor	 eax, eax
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
_IsPagingFileWildcardActive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsPagingFileActive
_TEXT	SEGMENT
_dwResult$1 = -65880					; size = 4
_size$ = -65876						; size = 4
_driveInfo$2 = -65872					; size = 24
_path$3 = -65848					; size = 24
_drivePath$4 = -65824					; size = 24
_data$ = -65800						; size = 65536
_sysDir$5 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_checkNonWindowsPartitionsOnly$ = 8			; size = 4
_IsPagingFileActive PROC				; COMDAT

; 10795: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 58 01 01 00	 mov	 eax, 65880		; 00010158H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 10796: 	// GlobalMemoryStatusEx() cannot be used to determine if a paging file is active
; 10797: 
; 10798: 	char data[65536];
; 10799: 	DWORD size = sizeof (data);

  00017	c7 85 ac fe fe
	ff 00 00 01 00	 mov	 DWORD PTR _size$[ebp], 65536 ; 00010000H

; 10800: 	
; 10801: 	if (IsPagingFileWildcardActive())

  00021	e8 00 00 00 00	 call	 _IsPagingFileWildcardActive
  00026	85 c0		 test	 eax, eax
  00028	74 13		 je	 SHORT $LN5@IsPagingFi

; 10802: 		return TRUE;

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 10853: }

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 cd		 xor	 ecx, ebp
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN5@IsPagingFi:
  0003d	56		 push	 esi

; 10803: 
; 10804: 	if (ReadLocalMachineRegistryMultiString ("System\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "PagingFiles", data, &size)
; 10805: 		&& size > 12 && !checkNonWindowsPartitionsOnly)

  0003e	8d 85 ac fe fe
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  00044	50		 push	 eax
  00045	8d 85 f8 fe fe
	ff		 lea	 eax, DWORD PTR _data$[ebp]
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BHFNFFHI@PagingFiles?$AA@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@FMLJHJOD@System?2CurrentControlSet?2Control@
  00056	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryMultiString
  0005b	8b 75 08	 mov	 esi, DWORD PTR _checkNonWindowsPartitionsOnly$[ebp]
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	85 c0		 test	 eax, eax
  00063	74 1f		 je	 SHORT $LN6@IsPagingFi
  00065	83 bd ac fe fe
	ff 0c		 cmp	 DWORD PTR _size$[ebp], 12 ; 0000000cH
  0006c	76 16		 jbe	 SHORT $LN6@IsPagingFi
  0006e	85 f6		 test	 esi, esi
  00070	75 12		 jne	 SHORT $LN6@IsPagingFi

; 10806: 		return TRUE;

  00072	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00075	5e		 pop	 esi

; 10853: }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN6@IsPagingFi:

; 10807: 
; 10808: 	if (!IsAdmin())

  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsUserAnAdmin@0
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 18 02 00
	00		 je	 $LN715@IsPagingFi

; 10810: 
; 10811: 	for (char drive = 'C'; drive <= 'Z'; ++drive)

  00092	53		 push	 ebx
  00093	57		 push	 edi
  00094	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CloseHandle@4
  0009a	b3 43		 mov	 bl, 67			; 00000043H
  0009c	0f 1f 40 00	 npad	 4
$LL4@IsPagingFi:

; 10812: 	{
; 10813: 		// Query geometry of the drive first to prevent "no medium" pop-ups
; 10814: 		string drivePath = "\\\\.\\X:";

  000a0	6a 06		 push	 6
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_06EFIGOLMA@?2?2?4?2X?3?$AA@
  000a7	8d 8d e0 fe fe
	ff		 lea	 ecx, DWORD PTR _drivePath$4[ebp]
  000ad	c7 85 f4 fe fe
	ff 0f 00 00 00	 mov	 DWORD PTR _drivePath$4[ebp+20], 15 ; 0000000fH
  000b7	c7 85 f0 fe fe
	ff 00 00 00 00	 mov	 DWORD PTR _drivePath$4[ebp+16], 0
  000c1	c6 85 e0 fe fe
	ff 00		 mov	 BYTE PTR _drivePath$4[ebp], 0
  000c8	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 10815: 		drivePath[4] = drive;

  000cd	83 bd f4 fe fe
	ff 10		 cmp	 DWORD PTR _drivePath$4[ebp+20], 16 ; 00000010H
  000d4	8d 85 e0 fe fe
	ff		 lea	 eax, DWORD PTR _drivePath$4[ebp]
  000da	0f 43 85 e0 fe
	fe ff		 cmovae	 eax, DWORD PTR _drivePath$4[ebp]
  000e1	88 58 04	 mov	 BYTE PTR [eax+4], bl

; 10816: 
; 10817: 		if (checkNonWindowsPartitionsOnly)

  000e4	85 f6		 test	 esi, esi
  000e6	74 54		 je	 SHORT $LN9@IsPagingFi

; 10818: 		{
; 10819: 			char sysDir[MAX_PATH];
; 10820: 			if (GetSystemDirectory (sysDir, sizeof (sysDir)) != 0 && toupper (sysDir[0]) == drive)

  000e8	68 04 01 00 00	 push	 260			; 00000104H
  000ed	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _sysDir$5[ebp]
  000f3	50		 push	 eax
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  000fa	85 c0		 test	 eax, eax
  000fc	74 3e		 je	 SHORT $LN9@IsPagingFi
  000fe	0f be 85 f8 fe
	ff ff		 movsx	 eax, BYTE PTR _sysDir$5[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 _toupper
  0010b	0f be cb	 movsx	 ecx, bl
  0010e	83 c4 04	 add	 esp, 4
  00111	3b c1		 cmp	 eax, ecx
  00113	75 27		 jne	 SHORT $LN9@IsPagingFi

; 10821: 				continue;

  00115	8b 85 f4 fe fe
	ff		 mov	 eax, DWORD PTR _drivePath$4[ebp+20]
  0011b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0011e	0f 82 3c 01 00
	00		 jb	 $LN2@IsPagingFi
  00124	40		 inc	 eax
  00125	8d 8d e0 fe fe
	ff		 lea	 ecx, DWORD PTR _drivePath$4[ebp]
  0012b	50		 push	 eax
  0012c	ff b5 e0 fe fe
	ff		 push	 DWORD PTR _drivePath$4[ebp]
  00132	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
  00137	e9 24 01 00 00	 jmp	 $LN2@IsPagingFi
$LN9@IsPagingFi:

; 10822: 		}
; 10823: 
; 10824: 		HANDLE handle = CreateFile (drivePath.c_str(), GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  0013c	83 bd f4 fe fe
	ff 10		 cmp	 DWORD PTR _drivePath$4[ebp+20], 16 ; 00000010H
  00143	8d 85 e0 fe fe
	ff		 lea	 eax, DWORD PTR _drivePath$4[ebp]
  00149	6a 00		 push	 0
  0014b	0f 43 85 e0 fe
	fe ff		 cmovae	 eax, DWORD PTR _drivePath$4[ebp]
  00152	6a 00		 push	 0
  00154	6a 03		 push	 3
  00156	6a 00		 push	 0
  00158	6a 03		 push	 3
  0015a	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0015f	50		 push	 eax
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00166	8b f0		 mov	 esi, eax

; 10825: 		
; 10826: 		if (handle == INVALID_HANDLE_VALUE)

  00168	83 fe ff	 cmp	 esi, -1
  0016b	0f 84 ce 00 00
	00		 je	 $LN714@IsPagingFi

; 10827: 			continue;
; 10828: 
; 10829: 		DISK_GEOMETRY driveInfo;
; 10830: 		DWORD dwResult;
; 10831: 
; 10832: 		if (!DeviceIoControl (handle, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0, &driveInfo, sizeof (driveInfo), &dwResult, NULL))

  00171	6a 00		 push	 0
  00173	8d 85 a8 fe fe
	ff		 lea	 eax, DWORD PTR _dwResult$1[ebp]
  00179	50		 push	 eax
  0017a	6a 18		 push	 24			; 00000018H
  0017c	8d 85 b0 fe fe
	ff		 lea	 eax, DWORD PTR _driveInfo$2[ebp]
  00182	50		 push	 eax
  00183	6a 00		 push	 0
  00185	6a 00		 push	 0
  00187	68 00 00 07 00	 push	 458752			; 00070000H
  0018c	56		 push	 esi
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 10833: 		{
; 10834: 			CloseHandle (handle);

  00193	56		 push	 esi
  00194	85 c0		 test	 eax, eax
  00196	75 07		 jne	 SHORT $LN11@IsPagingFi
  00198	ff d7		 call	 edi

; 10835: 			continue;

  0019a	e9 a0 00 00 00	 jmp	 $LN714@IsPagingFi
$LN11@IsPagingFi:

; 10836: 		}
; 10837: 
; 10838: 		CloseHandle (handle);

  0019f	ff d7		 call	 edi

; 10839: 
; 10840: 		// Test if a paging file exists and is locked by another process
; 10841: 		string path = "X:\\pagefile.sys";

  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OFMBGJKB@X?3?2pagefile?4sys?$AA@
  001a6	8d 8d c8 fe fe
	ff		 lea	 ecx, DWORD PTR _path$3[ebp]
  001ac	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 10842: 		path[0] = drive;

  001b1	83 bd dc fe fe
	ff 10		 cmp	 DWORD PTR _path$3[ebp+20], 16 ; 00000010H
  001b8	8d 85 c8 fe fe
	ff		 lea	 eax, DWORD PTR _path$3[ebp]

; 10843: 
; 10844: 		handle = CreateFile (path.c_str(), GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);

  001be	6a 00		 push	 0
  001c0	0f 43 85 c8 fe
	fe ff		 cmovae	 eax, DWORD PTR _path$3[ebp]
  001c7	6a 00		 push	 0
  001c9	6a 03		 push	 3
  001cb	6a 00		 push	 0
  001cd	88 18		 mov	 BYTE PTR [eax], bl
  001cf	8d 85 c8 fe fe
	ff		 lea	 eax, DWORD PTR _path$3[ebp]
  001d5	83 bd dc fe fe
	ff 10		 cmp	 DWORD PTR _path$3[ebp+20], 16 ; 00000010H
  001dc	6a 01		 push	 1
  001de	0f 43 85 c8 fe
	fe ff		 cmovae	 eax, DWORD PTR _path$3[ebp]
  001e5	68 00 00 00 80	 push	 -2147483648		; 80000000H
  001ea	50		 push	 eax
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28

; 10845: 		
; 10846: 		if (handle != INVALID_HANDLE_VALUE)

  001f1	83 f8 ff	 cmp	 eax, -1
  001f4	74 05		 je	 SHORT $LN12@IsPagingFi

; 10847: 			CloseHandle (handle);

  001f6	50		 push	 eax
  001f7	ff d7		 call	 edi
  001f9	eb 0b		 jmp	 SHORT $LN14@IsPagingFi
$LN12@IsPagingFi:

; 10848: 		else if (GetLastError() == ERROR_SHARING_VIOLATION)

  001fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00201	83 f8 20	 cmp	 eax, 32			; 00000020H
  00204	74 78		 je	 SHORT $LN702@IsPagingFi
$LN14@IsPagingFi:

; 10850: 	}

  00206	8b 85 dc fe fe
	ff		 mov	 eax, DWORD PTR _path$3[ebp+20]
  0020c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0020f	72 13		 jb	 SHORT $LN505@IsPagingFi
  00211	40		 inc	 eax
  00212	8d 8d c8 fe fe
	ff		 lea	 ecx, DWORD PTR _path$3[ebp]
  00218	50		 push	 eax
  00219	ff b5 c8 fe fe
	ff		 push	 DWORD PTR _path$3[ebp]
  0021f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN505@IsPagingFi:
  00224	c7 85 dc fe fe
	ff 0f 00 00 00	 mov	 DWORD PTR _path$3[ebp+20], 15 ; 0000000fH
  0022e	c7 85 d8 fe fe
	ff 00 00 00 00	 mov	 DWORD PTR _path$3[ebp+16], 0
  00238	c6 85 c8 fe fe
	ff 00		 mov	 BYTE PTR _path$3[ebp], 0
$LN714@IsPagingFi:
  0023f	8b 85 f4 fe fe
	ff		 mov	 eax, DWORD PTR _drivePath$4[ebp+20]
  00245	83 f8 10	 cmp	 eax, 16			; 00000010H
  00248	72 13		 jb	 SHORT $LN708@IsPagingFi
  0024a	40		 inc	 eax
  0024b	8d 8d e0 fe fe
	ff		 lea	 ecx, DWORD PTR _drivePath$4[ebp]
  00251	50		 push	 eax
  00252	ff b5 e0 fe fe
	ff		 push	 DWORD PTR _drivePath$4[ebp]
  00258	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN708@IsPagingFi:
  0025d	8b 75 08	 mov	 esi, DWORD PTR _checkNonWindowsPartitionsOnly$[ebp]
$LN2@IsPagingFi:

; 10810: 
; 10811: 	for (char drive = 'C'; drive <= 'Z'; ++drive)

  00260	fe c3		 inc	 bl
  00262	80 fb 5a	 cmp	 bl, 90			; 0000005aH
  00265	0f 8e 35 fe ff
	ff		 jle	 $LL4@IsPagingFi

; 10851: 
; 10852: 	return FALSE;

  0026b	5f		 pop	 edi
  0026c	5b		 pop	 ebx
  0026d	33 c0		 xor	 eax, eax
  0026f	5e		 pop	 esi

; 10853: }

  00270	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00273	33 cd		 xor	 ecx, ebp
  00275	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027a	8b e5		 mov	 esp, ebp
  0027c	5d		 pop	 ebp
  0027d	c3		 ret	 0
$LN702@IsPagingFi:

; 10849: 			return TRUE;

  0027e	8d 8d c8 fe fe
	ff		 lea	 ecx, DWORD PTR _path$3[ebp]
  00284	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00289	8d 8d e0 fe fe
	ff		 lea	 ecx, DWORD PTR _drivePath$4[ebp]
  0028f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 10853: }

  00294	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	5f		 pop	 edi
  0029d	5b		 pop	 ebx
  0029e	33 cd		 xor	 ecx, ebp
  002a0	5e		 pop	 esi
  002a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a6	8b e5		 mov	 esp, ebp
  002a8	5d		 pop	 ebp
  002a9	c3		 ret	 0
$LN715@IsPagingFi:

; 10809: 		AbortProcess ("UAC_INIT_ERROR");

  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NDJDHMAP@UAC_INIT_ERROR?$AA@
  002af	e8 00 00 00 00	 call	 _AbortProcess
$LN717@IsPagingFi:
$LN712@IsPagingFi:
  002b4	cc		 int	 3
_IsPagingFileActive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DoDriverInstall
_TEXT	SEGMENT
_bOK$1$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_DoDriverInstall PROC					; COMDAT

; 4005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4006 : #ifdef SETUP
; 4007 : 	if (SystemEncryptionUpdate)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _SystemEncryptionUpdate, 0
  0000b	74 09		 je	 SHORT $LN2@DoDriverIn

; 4008 : 		return TRUE;

  0000d	b8 01 00 00 00	 mov	 eax, 1

; 4062 : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@DoDriverIn:
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 4009 : #endif
; 4010 : 
; 4011 : 	SC_HANDLE hManager, hService = NULL;

  00019	33 f6		 xor	 esi, esi

; 4012 : 	BOOL bOK = FALSE, bRet;
; 4013 : 
; 4014 : 	hManager = OpenSCManager (NULL, NULL, SC_MANAGER_ALL_ACCESS);

  0001b	68 3f 00 0f 00	 push	 983103			; 000f003fH
  00020	56		 push	 esi
  00021	56		 push	 esi
  00022	89 75 fc	 mov	 DWORD PTR _bOK$1$[ebp], esi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerA@12

; 4015 : 	if (hManager == NULL)

  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  0002e	8b f8		 mov	 edi, eax
  00030	85 ff		 test	 edi, edi
  00032	74 75		 je	 SHORT $LN17@DoDriverIn

; 4016 : 		goto error;
; 4017 : 
; 4018 : #ifdef SETUP
; 4019 : 	StatusMessage (hwndDlg, "INSTALLING_DRIVER");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ECEMIBMM@INSTALLING_DRIVER?$AA@
  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 _StatusMessage
  0003f	83 c4 08	 add	 esp, 8

; 4020 : #endif
; 4021 : 
; 4022 : 	hService = CreateService (hManager, "gostcrypt", "gostcrypt",

  00042	56		 push	 esi
  00043	56		 push	 esi
  00044	56		 push	 esi
  00045	56		 push	 esi
  00046	56		 push	 esi
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KPLJJAIG@System32?2drivers?2gostcrypt?4sys?$AA@
  0004c	6a 01		 push	 1
  0004e	6a 01		 push	 1
  00050	6a 01		 push	 1
  00052	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_09JCILFBFB@gostcrypt?$AA@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_09JCILFBFB@gostcrypt?$AA@
  00061	57		 push	 edi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateServiceA@52
  00068	8b f0		 mov	 esi, eax

; 4023 : 		SERVICE_ALL_ACCESS, SERVICE_KERNEL_DRIVER, SERVICE_SYSTEM_START, SERVICE_ERROR_NORMAL,
; 4024 : 		"System32\\drivers\\gostcrypt.sys",
; 4025 : 		NULL, NULL, NULL, NULL, NULL);
; 4026 : 
; 4027 : 	if (hService == NULL)

  0006a	85 f6		 test	 esi, esi
  0006c	74 3b		 je	 SHORT $LN17@DoDriverIn

; 4028 : 		goto error;
; 4029 : 	else
; 4030 : 		CloseServiceHandle (hService);

  0006e	56		 push	 esi
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4

; 4031 : 
; 4032 : 	hService = OpenService (hManager, "gostcrypt", SERVICE_ALL_ACCESS);

  00075	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_09JCILFBFB@gostcrypt?$AA@
  0007f	57		 push	 edi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceA@12
  00086	8b f0		 mov	 esi, eax

; 4033 : 	if (hService == NULL)

  00088	85 f6		 test	 esi, esi
  0008a	74 1d		 je	 SHORT $LN17@DoDriverIn

; 4034 : 		goto error;
; 4035 : 
; 4036 : #ifdef SETUP
; 4037 : 	StatusMessage (hwndDlg, "STARTING_DRIVER");

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NDPFMBFD@STARTING_DRIVER?$AA@
  00091	53		 push	 ebx
  00092	e8 00 00 00 00	 call	 _StatusMessage
  00097	83 c4 08	 add	 esp, 8

; 4038 : #endif
; 4039 : 
; 4040 : 	bRet = StartService (hService, 0, NULL);

  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	56		 push	 esi
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StartServiceA@12

; 4041 : 	if (bRet == FALSE)

  000a5	85 c0		 test	 eax, eax
  000a7	75 35		 jne	 SHORT $LN12@DoDriverIn
$LN17@DoDriverIn:

; 4042 : 		goto error;
; 4043 : 
; 4044 : 	bOK = TRUE;
; 4045 : 
; 4046 : error:
; 4047 : 	if (bOK == FALSE && GetLastError () != ERROR_SERVICE_ALREADY_RUNNING)

  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000af	3d 20 04 00 00	 cmp	 eax, 1056		; 00000420H
  000b4	74 28		 je	 SHORT $LN12@DoDriverIn

; 4048 : 	{
; 4049 : 		handleWin32Error (hwndDlg);

  000b6	53		 push	 ebx
  000b7	e8 00 00 00 00	 call	 _handleWin32Error
  000bc	83 c4 04	 add	 esp, 4

; 4050 : 		MessageBoxW (hwndDlg, GetString ("DRIVER_INSTALL_FAILED"), lpszTitle, MB_ICONHAND);

  000bf	6a 10		 push	 16			; 00000010H
  000c1	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NAJKGDG@DRIVER_INSTALL_FAILED?$AA@
  000cc	e8 00 00 00 00	 call	 _GetString
  000d1	83 c4 04	 add	 esp, 4
  000d4	50		 push	 eax
  000d5	53		 push	 ebx
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 4051 : 	}
; 4052 : 	else

  000dc	eb 07		 jmp	 SHORT $LN13@DoDriverIn
$LN12@DoDriverIn:

; 4053 : 		bOK = TRUE;

  000de	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bOK$1$[ebp], 1
$LN13@DoDriverIn:

; 4054 : 
; 4055 : 	if (hService != NULL)
; 4056 : 		CloseServiceHandle (hService);

  000e5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CloseServiceHandle@4
  000eb	85 f6		 test	 esi, esi
  000ed	74 03		 je	 SHORT $LN14@DoDriverIn
  000ef	56		 push	 esi
  000f0	ff d3		 call	 ebx
$LN14@DoDriverIn:

; 4057 : 
; 4058 : 	if (hManager != NULL)

  000f2	85 ff		 test	 edi, edi
  000f4	74 03		 je	 SHORT $LN15@DoDriverIn

; 4059 : 		CloseServiceHandle (hManager);

  000f6	57		 push	 edi
  000f7	ff d3		 call	 ebx
$LN15@DoDriverIn:

; 4060 : 
; 4061 : 	return bOK;

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _bOK$1$[ebp]
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx

; 4062 : }

  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
_DoDriverInstall ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetDriveLabel
_TEXT	SEGMENT
_fileSystemFlags$ = -16					; size = 4
_root$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_driveNo$ = 8						; size = 4
_label$ = 12						; size = 4
_labelSize$ = 16					; size = 4
_GetDriveLabel PROC					; COMDAT

; 3290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3291 : 	DWORD fileSystemFlags;
; 3292 : 	wchar_t root[] = { L'A' + (wchar_t) driveNo, L':', L'\\', 0 };

  00010	8b 45 08	 mov	 eax, DWORD PTR _driveNo$[ebp]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _label$[ebp]
  00016	83 c0 41	 add	 eax, 65			; 00000041H
  00019	66 89 45 f4	 mov	 WORD PTR _root$[ebp], ax
  0001d	33 c0		 xor	 eax, eax

; 3293 : 
; 3294 : 	return GetVolumeInformationW (root, label, labelSize / 2, NULL, NULL, &fileSystemFlags, NULL, 0);

  0001f	50		 push	 eax
  00020	50		 push	 eax
  00021	66 89 45 fa	 mov	 WORD PTR _root$[ebp+6], ax
  00025	8d 45 f0	 lea	 eax, DWORD PTR _fileSystemFlags$[ebp]
  00028	50		 push	 eax
  00029	8b 45 10	 mov	 eax, DWORD PTR _labelSize$[ebp]
  0002c	99		 cdq
  0002d	6a 00		 push	 0
  0002f	2b c2		 sub	 eax, edx
  00031	c7 45 f6 3a 00
	5c 00		 mov	 DWORD PTR _root$[ebp+2], 6029370 ; 005c003aH
  00038	6a 00		 push	 0
  0003a	d1 f8		 sar	 eax, 1
  0003c	50		 push	 eax
  0003d	51		 push	 ecx
  0003e	8d 45 f4	 lea	 eax, DWORD PTR _root$[ebp]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationW@32

; 3295 : }

  00048	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004b	33 cd		 xor	 ecx, ebp
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_GetDriveLabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AccommodateTextField
_TEXT	SEGMENT
_sizes$1 = -4360					; size = 8
_sizes$2 = -4360					; size = 8
_vertOffset$1$ = -4356					; size = 4
tv246 = -4352						; size = 4
_horizSubOffset$1$ = -4348				; size = 4
_hwndDlg$GSCopy$1$ = -4344				; size = 4
_alignPosDiff$1$ = -4344				; size = 4
_hFont$GSCopy$1$ = -4340				; size = 4
_vertSubOffset$1$ = -4340				; size = 4
_width$1$ = -4340					; size = 4
_textMetrics$3 = -4336					; size = 56
_windowInfo$ = -4280					; size = 60
_trec$ = -4220						; size = 16
_wrec$ = -4204						; size = 16
_rec$ = -4188						; size = 16
_text$ = -4172						; size = 4168
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_bFirstUpdate$ = 16					; size = 4
_hFont$ = 20						; size = 4
_AccommodateTextField PROC				; COMDAT

; 948  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 08 11 00 00	 mov	 eax, 4360		; 00001108H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR _ctrlId$[ebp]
  0001a	8b 4d 14	 mov	 ecx, DWORD PTR _hFont$[ebp]
  0001d	53		 push	 ebx
  0001e	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00021	56		 push	 esi
  00022	57		 push	 edi

; 949  : 	RECT rec, wrec, trec;
; 950  : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	89 9d 08 ef ff
	ff		 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], ebx
  0002b	89 8d 0c ef ff
	ff		 mov	 DWORD PTR _hFont$GSCopy$1$[ebp], ecx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 951  : 	int width, origWidth, height, origHeight;
; 952  : 	int horizSubOffset, vertSubOffset, vertOffset, alignPosDiff = 0;
; 953  : 	wchar_t text [MAX_URL_LENGTH];
; 954  : 	WINDOWINFO windowInfo;
; 955  : 	BOOL bBorderlessWindow = !(GetWindowLongPtr (hwndDlg, GWL_STYLE) & (WS_BORDER | WS_DLGFRAME));

  00037	6a f0		 push	 -16			; fffffff0H
  00039	53		 push	 ebx
  0003a	8b f0		 mov	 esi, eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00042	25 00 00 c0 00	 and	 eax, 12582912		; 00c00000H
  00047	89 85 00 ef ff
	ff		 mov	 DWORD PTR tv246[ebp], eax

; 956  : 
; 957  : 	// Resize the field according to its length and font size and move if centered or right-aligned
; 958  : 
; 959  : 	GetWindowTextW (hwndCtrl, text, sizeof (text) / sizeof (wchar_t));

  0004d	8d 85 b4 ef ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  00053	68 24 08 00 00	 push	 2084			; 00000824H
  00058	50		 push	 eax
  00059	56		 push	 esi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextW@12

; 960  : 
; 961  : 	width = GetTextGfxWidth (hwndCtrl, text, hFont);

  00060	56		 push	 esi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00067	8b 9d 0c ef ff
	ff		 mov	 ebx, DWORD PTR _hFont$GSCopy$1$[ebp]
  0006d	8b f8		 mov	 edi, eax
  0006f	53		 push	 ebx
  00070	57		 push	 edi
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00077	8d 8d b4 ef ff
	ff		 lea	 ecx, DWORD PTR _text$[ebp]
  0007d	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
$LL18@Accommodat:
  00080	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00083	83 c1 02	 add	 ecx, 2
  00086	66 85 c0	 test	 ax, ax
  00089	75 f5		 jne	 SHORT $LL18@Accommodat
  0008b	2b ca		 sub	 ecx, edx
  0008d	8d 85 f8 ee ff
	ff		 lea	 eax, DWORD PTR _sizes$2[ebp]
  00093	50		 push	 eax
  00094	d1 f9		 sar	 ecx, 1
  00096	8d 85 b4 ef ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  0009c	51		 push	 ecx
  0009d	50		 push	 eax
  0009e	57		 push	 edi
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16
  000a5	8d 85 10 ef ff
	ff		 lea	 eax, DWORD PTR _textMetrics$3[ebp]
  000ab	50		 push	 eax
  000ac	57		 push	 edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextMetricsA@8
  000b3	57		 push	 edi
  000b4	56		 push	 esi
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  000bb	8b 85 f8 ee ff
	ff		 mov	 eax, DWORD PTR _sizes$2[ebp]
  000c1	2b 85 30 ef ff
	ff		 sub	 eax, DWORD PTR _textMetrics$3[ebp+32]

; 962  : 	height = GetTextGfxHeight (hwndCtrl, text, hFont);

  000c7	56		 push	 esi
  000c8	89 85 0c ef ff
	ff		 mov	 DWORD PTR _width$1$[ebp], eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  000d4	8b f8		 mov	 edi, eax
  000d6	53		 push	 ebx
  000d7	57		 push	 edi
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  000de	8d 8d b4 ef ff
	ff		 lea	 ecx, DWORD PTR _text$[ebp]
  000e4	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
$LL19@Accommodat:
  000e7	66 8b 01	 mov	 ax, WORD PTR [ecx]
  000ea	83 c1 02	 add	 ecx, 2
  000ed	66 85 c0	 test	 ax, ax
  000f0	75 f5		 jne	 SHORT $LL19@Accommodat
  000f2	2b ca		 sub	 ecx, edx
  000f4	8d 85 f8 ee ff
	ff		 lea	 eax, DWORD PTR _sizes$1[ebp]
  000fa	50		 push	 eax
  000fb	d1 f9		 sar	 ecx, 1
  000fd	8d 85 b4 ef ff
	ff		 lea	 eax, DWORD PTR _text$[ebp]
  00103	51		 push	 ecx
  00104	50		 push	 eax
  00105	57		 push	 edi
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16
  0010c	57		 push	 edi
  0010d	56		 push	 esi
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 963  : 
; 964  : 	GetClientRect (hwndCtrl, &rec);		

  00114	8d 85 a4 ef ff
	ff		 lea	 eax, DWORD PTR _rec$[ebp]
  0011a	50		 push	 eax
  0011b	56		 push	 esi
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 965  : 	origWidth = rec.right;
; 966  : 	origHeight = rec.bottom;
; 967  : 
; 968  : 	if (width >= 0
; 969  : 		&& (!bFirstUpdate || origWidth > width))	// The original width of the field is the maximum allowed size 

  00122	8b 8d 0c ef ff
	ff		 mov	 ecx, DWORD PTR _width$1$[ebp]
  00128	8b bd ac ef ff
	ff		 mov	 edi, DWORD PTR _rec$[ebp+8]
  0012e	8b 9d b0 ef ff
	ff		 mov	 ebx, DWORD PTR _rec$[ebp+12]
  00134	85 c9		 test	 ecx, ecx
  00136	0f 88 61 01 00
	00		 js	 $LN2@Accommodat
  0013c	83 7d 10 00	 cmp	 DWORD PTR _bFirstUpdate$[ebp], 0
  00140	74 08		 je	 SHORT $LN3@Accommodat
  00142	3b f9		 cmp	 edi, ecx
  00144	0f 8e 53 01 00
	00		 jle	 $LN2@Accommodat
$LN3@Accommodat:

; 970  : 	{
; 971  : 		horizSubOffset = origWidth - width;

  0014a	8b c7		 mov	 eax, edi
  0014c	2b c1		 sub	 eax, ecx
  0014e	89 85 04 ef ff
	ff		 mov	 DWORD PTR _horizSubOffset$1$[ebp], eax

; 972  : 		vertSubOffset = origHeight - height;

  00154	8b c3		 mov	 eax, ebx
  00156	2b 85 fc ee ff
	ff		 sub	 eax, DWORD PTR _sizes$1[ebp+4]
  0015c	89 85 0c ef ff
	ff		 mov	 DWORD PTR _vertSubOffset$1$[ebp], eax

; 973  : 
; 974  : 		// Window coords
; 975  : 		GetWindowRect(hwndDlg, &wrec);

  00162	8d 85 94 ef ff
	ff		 lea	 eax, DWORD PTR _wrec$[ebp]
  00168	50		 push	 eax
  00169	ff b5 08 ef ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 976  : 		GetClientRect(hwndDlg, &trec);

  00175	8d 85 84 ef ff
	ff		 lea	 eax, DWORD PTR _trec$[ebp]
  0017b	50		 push	 eax
  0017c	ff b5 08 ef ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00188	83 bd 00 ef ff
	ff 00		 cmp	 DWORD PTR tv246[ebp], 0

; 977  : 
; 978  : 		// Vertical "title bar" offset
; 979  : 		vertOffset = wrec.bottom - wrec.top - trec.bottom - (bBorderlessWindow ? 0 : GetSystemMetrics(SM_CYFIXEDFRAME));

  0018f	75 04		 jne	 SHORT $LN10@Accommodat
  00191	33 c9		 xor	 ecx, ecx
  00193	eb 0a		 jmp	 SHORT $LN11@Accommodat
$LN10@Accommodat:
  00195	6a 08		 push	 8
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0019d	8b c8		 mov	 ecx, eax
$LN11@Accommodat:
  0019f	8b 85 a0 ef ff
	ff		 mov	 eax, DWORD PTR _wrec$[ebp+12]
  001a5	2b c1		 sub	 eax, ecx
  001a7	2b 85 90 ef ff
	ff		 sub	 eax, DWORD PTR _trec$[ebp+12]
  001ad	2b 85 98 ef ff
	ff		 sub	 eax, DWORD PTR _wrec$[ebp+4]
  001b3	89 85 fc ee ff
	ff		 mov	 DWORD PTR _vertOffset$1$[ebp], eax

; 980  : 
; 981  : 		// Text field coords
; 982  : 		GetWindowRect(hwndCtrl, &rec);

  001b9	8d 85 a4 ef ff
	ff		 lea	 eax, DWORD PTR _rec$[ebp]
  001bf	50		 push	 eax
  001c0	56		 push	 esi
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 983  : 
; 984  : 		// Alignment offset
; 985  : 		windowInfo.cbSize = sizeof(windowInfo);
; 986  : 		GetWindowInfo (hwndCtrl, &windowInfo);

  001c7	8d 85 48 ef ff
	ff		 lea	 eax, DWORD PTR _windowInfo$[ebp]
  001cd	c7 85 48 ef ff
	ff 3c 00 00 00	 mov	 DWORD PTR _windowInfo$[ebp], 60 ; 0000003cH
  001d7	50		 push	 eax
  001d8	56		 push	 esi
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowInfo@8

; 987  : 
; 988  : 		if (windowInfo.dwStyle & SS_CENTER)

  001df	8b 85 6c ef ff
	ff		 mov	 eax, DWORD PTR _windowInfo$[ebp+36]
  001e5	a8 01		 test	 al, 1
  001e7	74 0d		 je	 SHORT $LN4@Accommodat

; 989  : 			alignPosDiff = horizSubOffset / 2;

  001e9	8b 85 04 ef ff
	ff		 mov	 eax, DWORD PTR _horizSubOffset$1$[ebp]
  001ef	99		 cdq
  001f0	2b c2		 sub	 eax, edx
  001f2	d1 f8		 sar	 eax, 1
  001f4	eb 0a		 jmp	 SHORT $LN20@Accommodat
$LN4@Accommodat:

; 990  : 		else if (windowInfo.dwStyle & SS_RIGHT)

  001f6	a8 02		 test	 al, 2
  001f8	74 68		 je	 SHORT $LN7@Accommodat

; 991  : 			alignPosDiff = horizSubOffset;

  001fa	8b 85 04 ef ff
	ff		 mov	 eax, DWORD PTR _horizSubOffset$1$[ebp]
$LN20@Accommodat:
  00200	89 85 08 ef ff
	ff		 mov	 DWORD PTR _alignPosDiff$1$[ebp], eax

; 992  : 		
; 993  : 		// Resize/move
; 994  : 		if (alignPosDiff > 0)

  00206	85 c0		 test	 eax, eax
  00208	7e 58		 jle	 SHORT $LN7@Accommodat
  0020a	83 bd 00 ef ff
	ff 00		 cmp	 DWORD PTR tv246[ebp], 0

; 995  : 		{
; 996  : 			// Resize and move the text field
; 997  : 			MoveWindow (hwndCtrl,

  00211	75 04		 jne	 SHORT $LN12@Accommodat
  00213	33 c9		 xor	 ecx, ecx
  00215	eb 0a		 jmp	 SHORT $LN13@Accommodat
$LN12@Accommodat:
  00217	6a 07		 push	 7
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0021f	8b c8		 mov	 ecx, eax
$LN13@Accommodat:
  00221	2b 9d 0c ef ff
	ff		 sub	 ebx, DWORD PTR _vertSubOffset$1$[ebp]
  00227	8b 85 a8 ef ff
	ff		 mov	 eax, DWORD PTR _rec$[ebp+4]
  0022d	2b 85 98 ef ff
	ff		 sub	 eax, DWORD PTR _wrec$[ebp+4]
  00233	2b 85 fc ee ff
	ff		 sub	 eax, DWORD PTR _vertOffset$1$[ebp]
  00239	2b bd 04 ef ff
	ff		 sub	 edi, DWORD PTR _horizSubOffset$1$[ebp]
  0023f	6a 01		 push	 1
  00241	53		 push	 ebx
  00242	57		 push	 edi
  00243	50		 push	 eax
  00244	8b 85 a4 ef ff
	ff		 mov	 eax, DWORD PTR _rec$[ebp]
  0024a	2b c1		 sub	 eax, ecx
  0024c	2b 85 94 ef ff
	ff		 sub	 eax, DWORD PTR _wrec$[ebp]
  00252	03 85 08 ef ff
	ff		 add	 eax, DWORD PTR _alignPosDiff$1$[ebp]
  00258	50		 push	 eax
  00259	56		 push	 esi
  0025a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 998  : 				rec.left - wrec.left - (bBorderlessWindow ? 0 : GetSystemMetrics(SM_CXFIXEDFRAME)) + alignPosDiff,
; 999  : 				rec.top - wrec.top - vertOffset,
; 1000 : 				origWidth - horizSubOffset,
; 1001 : 				origHeight - vertSubOffset,
; 1002 : 				TRUE);
; 1003 : 		}
; 1004 : 		else

  00260	eb 1d		 jmp	 SHORT $LN8@Accommodat
$LN7@Accommodat:

; 1005 : 		{
; 1006 : 			// Resize the text field
; 1007 : 			SetWindowPos (hwndCtrl, 0, 0, 0,

  00262	2b 9d 0c ef ff
	ff		 sub	 ebx, DWORD PTR _vertSubOffset$1$[ebp]
  00268	2b bd 04 ef ff
	ff		 sub	 edi, DWORD PTR _horizSubOffset$1$[ebp]
  0026e	6a 06		 push	 6
  00270	53		 push	 ebx
  00271	57		 push	 edi
  00272	6a 00		 push	 0
  00274	6a 00		 push	 0
  00276	6a 00		 push	 0
  00278	56		 push	 esi
  00279	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
$LN8@Accommodat:

; 1008 : 				origWidth - horizSubOffset,
; 1009 : 				origHeight - vertSubOffset,
; 1010 : 				SWP_NOMOVE | SWP_NOZORDER);
; 1011 : 		}
; 1012 : 
; 1013 : 		SetWindowPos (hwndCtrl, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  0027f	6a 03		 push	 3
  00281	6a 00		 push	 0
  00283	6a 00		 push	 0
  00285	6a 00		 push	 0
  00287	6a 00		 push	 0
  00289	6a 01		 push	 1
  0028b	56		 push	 esi
  0028c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 1014 : 
; 1015 : 		InvalidateRect (hwndCtrl, NULL, TRUE);

  00292	6a 01		 push	 1
  00294	6a 00		 push	 0
  00296	56		 push	 esi
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12
$LN2@Accommodat:

; 1016 : 	}
; 1017 : }

  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	5f		 pop	 edi
  002a1	5e		 pop	 esi
  002a2	33 cd		 xor	 ecx, ebp
  002a4	5b		 pop	 ebx
  002a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c3		 ret	 0
_AccommodateTextField ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ToBootPwdField
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_ToBootPwdField PROC					; COMDAT

; 1059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1060 : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00004	ff 75 0c	 push	 DWORD PTR _ctrlId$[ebp]
  00007	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00010	8b f8		 mov	 edi, eax

; 1061 : 
; 1062 : 	SetWindowLongPtr (hwndCtrl, GWLP_USERDATA, (LONG_PTR) GetWindowLongPtr (hwndCtrl, GWLP_WNDPROC));

  00012	6a fc		 push	 -4			; fffffffcH
  00014	57		 push	 edi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0001b	50		 push	 eax
  0001c	6a eb		 push	 -21			; ffffffebH
  0001e	57		 push	 edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 1063 : 	SetWindowLongPtr (hwndCtrl, GWLP_WNDPROC, (LONG_PTR) BootPwdFieldProc);

  00025	68 00 00 00 00	 push	 OFFSET ?BootPwdFieldProc@@YGJPAUHWND__@@IIJ@Z ; BootPwdFieldProc
  0002a	6a fc		 push	 -4			; fffffffcH
  0002c	57		 push	 edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00033	5f		 pop	 edi

; 1064 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_ToBootPwdField ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ToCustHyperlink
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_hFont$ = 16						; size = 4
_ToCustHyperlink PROC					; COMDAT

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 917  : 	HWND hwndCtrl = GetDlgItem (hwndDlg, ctrlId);

  00004	ff 75 0c	 push	 DWORD PTR _ctrlId$[ebp]
  00007	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 918  : 
; 919  : 	SendMessage (hwndCtrl, WM_SETFONT, (WPARAM) hFont, 0);

  00010	6a 00		 push	 0
  00012	ff 75 10	 push	 DWORD PTR _hFont$[ebp]
  00015	8b f8		 mov	 edi, eax
  00017	6a 30		 push	 48			; 00000030H
  00019	57		 push	 edi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 920  : 
; 921  : 	SetWindowLongPtr (hwndCtrl, GWLP_USERDATA, (LONG_PTR) GetWindowLongPtr (hwndCtrl, GWLP_WNDPROC));

  00020	6a fc		 push	 -4			; fffffffcH
  00022	57		 push	 edi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00029	50		 push	 eax
  0002a	6a eb		 push	 -21			; ffffffebH
  0002c	57		 push	 edi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 922  : 	SetWindowLongPtr (hwndCtrl, GWLP_WNDPROC, (LONG_PTR) HyperlinkProc);

  00033	68 00 00 00 00	 push	 OFFSET ?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z ; HyperlinkProc
  00038	6a fc		 push	 -4			; fffffffcH
  0003a	57		 push	 edi
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 923  : 
; 924  : 	// Resize the field according to its actual size in pixels and move it if centered or right-aligned.
; 925  : 	// This should be done again if the link text changes.
; 926  : 	AccommodateTextField (hwndDlg, ctrlId, TRUE, hFont);

  00041	ff 75 10	 push	 DWORD PTR _hFont$[ebp]
  00044	6a 01		 push	 1
  00046	ff 75 0c	 push	 DWORD PTR _ctrlId$[ebp]
  00049	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0004c	e8 00 00 00 00	 call	 _AccommodateTextField
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 927  : 
; 928  : 	return TRUE;

  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	5f		 pop	 edi

; 929  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_ToCustHyperlink ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ToHyperlink
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_ctrlId$ = 12						; size = 4
_ToHyperlink PROC					; COMDAT

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 901  : 	return ToCustHyperlink (hwndDlg, ctrlId, hUserUnderlineFont);

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR _hUserUnderlineFont
  0000a	57		 push	 edi
  0000b	ff 75 0c	 push	 DWORD PTR _ctrlId$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00017	6a 00		 push	 0
  00019	53		 push	 ebx
  0001a	8b f8		 mov	 edi, eax
  0001c	6a 30		 push	 48			; 00000030H
  0001e	57		 push	 edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00025	6a fc		 push	 -4			; fffffffcH
  00027	57		 push	 edi
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  0002e	50		 push	 eax
  0002f	6a eb		 push	 -21			; ffffffebH
  00031	57		 push	 edi
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00038	68 00 00 00 00	 push	 OFFSET ?HyperlinkProc@@YGJPAUHWND__@@IIJ@Z ; HyperlinkProc
  0003d	6a fc		 push	 -4			; fffffffcH
  0003f	57		 push	 edi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00046	53		 push	 ebx
  00047	6a 01		 push	 1
  00049	ff 75 0c	 push	 DWORD PTR _ctrlId$[ebp]
  0004c	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0004f	e8 00 00 00 00	 call	 _AccommodateTextField
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	5f		 pop	 edi
  0005d	5b		 pop	 ebx

; 902  : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_ToHyperlink ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetTextGfxHeight
_TEXT	SEGMENT
_sizes$ = -8						; size = 8
_hwndDlgItem$ = 8					; size = 4
_text$ = 12						; size = 4
_hFont$ = 16						; size = 4
_GetTextGfxHeight PROC					; COMDAT

; 799  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 800  : 	SIZE sizes;
; 801  : 	HDC hdc = GetDC (hwndDlgItem); 

  00008	ff 75 08	 push	 DWORD PTR _hwndDlgItem$[ebp]
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 802  : 
; 803  : 	SelectObject(hdc, (HGDIOBJ) hFont);

  00011	ff 75 10	 push	 DWORD PTR _hFont$[ebp]
  00014	8b f0		 mov	 esi, eax
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 804  : 
; 805  : 	GetTextExtentPoint32W (hdc, text, wcslen (text), &sizes);

  0001d	8b 55 0c	 mov	 edx, DWORD PTR _text$[ebp]
  00020	8b ca		 mov	 ecx, edx
  00022	8d 59 02	 lea	 ebx, DWORD PTR [ecx+2]
$LL3@GetTextGfx:
  00025	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00028	83 c1 02	 add	 ecx, 2
  0002b	66 85 c0	 test	 ax, ax
  0002e	75 f5		 jne	 SHORT $LL3@GetTextGfx
  00030	2b cb		 sub	 ecx, ebx
  00032	8d 45 f8	 lea	 eax, DWORD PTR _sizes$[ebp]
  00035	50		 push	 eax
  00036	d1 f9		 sar	 ecx, 1
  00038	51		 push	 ecx
  00039	52		 push	 edx
  0003a	56		 push	 esi
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16

; 806  : 
; 807  : 	ReleaseDC (hwndDlgItem, hdc); 

  00041	56		 push	 esi
  00042	ff 75 08	 push	 DWORD PTR _hwndDlgItem$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 808  : 
; 809  : 	return ((int) sizes.cy);

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _sizes$[ebp+4]
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 810  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_GetTextGfxHeight ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetTextGfxWidth
_TEXT	SEGMENT
_sizes$ = -72						; size = 8
_text$GSCopy$1$ = -64					; size = 4
_textMetrics$ = -60					; size = 56
__$ArrayPad$ = -4					; size = 4
_hwndDlgItem$ = 8					; size = 4
_text$ = 12						; size = 4
_hFont$ = 16						; size = 4
_GetTextGfxWidth PROC					; COMDAT

; 771  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _text$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlgItem$[ebp]
  00017	56		 push	 esi
  00018	8b 75 10	 mov	 esi, DWORD PTR _hFont$[ebp]
  0001b	57		 push	 edi

; 772  : 	SIZE sizes;
; 773  : 	TEXTMETRIC textMetrics;
; 774  : 	HDC hdc = GetDC (hwndDlgItem); 

  0001c	53		 push	 ebx
  0001d	89 45 c0	 mov	 DWORD PTR _text$GSCopy$1$[ebp], eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00026	8b f8		 mov	 edi, eax

; 775  : 
; 776  : 	SelectObject(hdc, (HGDIOBJ) hFont);

  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 777  : 
; 778  : 	GetTextExtentPoint32W (hdc, text, wcslen (text), &sizes);

  00030	8b 55 c0	 mov	 edx, DWORD PTR _text$GSCopy$1$[ebp]
  00033	8b ca		 mov	 ecx, edx
  00035	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL3@GetTextGfx:
  00040	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00043	83 c1 02	 add	 ecx, 2
  00046	66 85 c0	 test	 ax, ax
  00049	75 f5		 jne	 SHORT $LL3@GetTextGfx
  0004b	2b ce		 sub	 ecx, esi
  0004d	8d 45 b8	 lea	 eax, DWORD PTR _sizes$[ebp]
  00050	50		 push	 eax
  00051	d1 f9		 sar	 ecx, 1
  00053	51		 push	 ecx
  00054	52		 push	 edx
  00055	57		 push	 edi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16

; 779  : 
; 780  : 	GetTextMetrics(hdc, &textMetrics);	// Necessary for non-TrueType raster fonts (tmOverhang)

  0005c	8d 45 c4	 lea	 eax, DWORD PTR _textMetrics$[ebp]
  0005f	50		 push	 eax
  00060	57		 push	 edi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextMetricsA@8

; 781  : 
; 782  : 	ReleaseDC (hwndDlgItem, hdc); 

  00067	57		 push	 edi
  00068	53		 push	 ebx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 783  : 
; 784  : 	return ((int) sizes.cx - (int) textMetrics.tmOverhang);
; 785  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	8b 45 b8	 mov	 eax, DWORD PTR _sizes$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	2b 45 e4	 sub	 eax, DWORD PTR _textMetrics$[ebp+32]
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_GetTextGfxWidth ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CompensateDPIFont
_TEXT	SEGMENT
tv130 = -8						; size = 8
tv73 = -8						; size = 8
_tmpVal$1 = -8						; size = 8
_val$ = 8						; size = 4
_CompensateDPIFont PROC					; COMDAT

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 694  : 	if (ScreenDPI == USER_DEFAULT_SCREEN_DPI)

  00006	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0000d	75 07		 jne	 SHORT $LN2@Compensate

; 695  : 		return val;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _val$[ebp]

; 704  : 	}
; 705  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@Compensate:
  00016	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _val$[ebp]

; 696  : 	else
; 697  : 	{
; 698  : 		double tmpVal = (double) val * DPIScaleFactorY * DlgAspectRatio * 0.999;
; 699  : 
; 700  : 		if (tmpVal > 0)
; 701  : 			return (int) floor(tmpVal);

  0001b	83 ec 08	 sub	 esp, 8
  0001e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00022	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?DPIScaleFactorY@@3NA
  0002a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR _DlgAspectRatio
  00032	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  0003a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00042	f2 0f 11 45 f8	 movsd	 QWORD PTR _tmpVal$1[ebp], xmm0
  00047	dd 45 f8	 fld	 QWORD PTR _tmpVal$1[ebp]
  0004a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0004d	76 14		 jbe	 SHORT $LN4@Compensate
  0004f	e8 00 00 00 00	 call	 _floor
  00054	dd 5d f8	 fstp	 QWORD PTR tv130[ebp]
  00057	f2 0f 2c 45 f8	 cvttsd2si eax, QWORD PTR tv130[ebp]

; 702  : 		else
; 703  : 			return (int) ceil(tmpVal);

  0005c	83 c4 08	 add	 esp, 8

; 704  : 	}
; 705  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN4@Compensate:

; 702  : 		else
; 703  : 			return (int) ceil(tmpVal);

  00063	e8 00 00 00 00	 call	 _ceil
  00068	dd 5d f8	 fstp	 QWORD PTR tv73[ebp]
  0006b	f2 0f 2c 45 f8	 cvttsd2si eax, QWORD PTR tv73[ebp]
  00070	83 c4 08	 add	 esp, 8

; 704  : 	}
; 705  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_CompensateDPIFont ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CompensateYDPI
_TEXT	SEGMENT
tv128 = -8						; size = 8
tv80 = -8						; size = 8
_tmpVal$1 = -8						; size = 8
_val$ = 8						; size = 4
_CompensateYDPI PROC					; COMDAT

; 745  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 746  : 	if (ScreenDPI == USER_DEFAULT_SCREEN_DPI)

  00006	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0000d	75 07		 jne	 SHORT $LN2@Compensate

; 747  : 		return val;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _val$[ebp]

; 756  : 	}
; 757  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@Compensate:
  00016	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _val$[ebp]

; 748  : 	else
; 749  : 	{
; 750  : 		double tmpVal = (double) val * DPIScaleFactorY;
; 751  : 
; 752  : 		if (tmpVal > 0)
; 753  : 			return (int) floor(tmpVal);

  0001b	83 ec 08	 sub	 esp, 8
  0001e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00022	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?DPIScaleFactorY@@3NA
  0002a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00032	f2 0f 11 45 f8	 movsd	 QWORD PTR _tmpVal$1[ebp], xmm0
  00037	dd 45 f8	 fld	 QWORD PTR _tmpVal$1[ebp]
  0003a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0003d	76 14		 jbe	 SHORT $LN4@Compensate
  0003f	e8 00 00 00 00	 call	 _floor
  00044	dd 5d f8	 fstp	 QWORD PTR tv128[ebp]
  00047	f2 0f 2c 45 f8	 cvttsd2si eax, QWORD PTR tv128[ebp]

; 754  : 		else
; 755  : 			return (int) ceil(tmpVal);

  0004c	83 c4 08	 add	 esp, 8

; 756  : 	}
; 757  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN4@Compensate:

; 754  : 		else
; 755  : 			return (int) ceil(tmpVal);

  00053	e8 00 00 00 00	 call	 _ceil
  00058	dd 5d f8	 fstp	 QWORD PTR tv80[ebp]
  0005b	f2 0f 2c 45 f8	 cvttsd2si eax, QWORD PTR tv80[ebp]
  00060	83 c4 08	 add	 esp, 8

; 756  : 	}
; 757  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_CompensateYDPI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CompensateXDPI
_TEXT	SEGMENT
tv128 = -8						; size = 8
tv80 = -8						; size = 8
_tmpVal$1 = -8						; size = 8
_val$ = 8						; size = 4
_CompensateXDPI PROC					; COMDAT

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 720  : 	if (ScreenDPI == USER_DEFAULT_SCREEN_DPI)

  00006	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0000d	75 07		 jne	 SHORT $LN2@Compensate

; 721  : 		return val;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _val$[ebp]

; 730  : 	}
; 731  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@Compensate:
  00016	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _val$[ebp]

; 722  : 	else
; 723  : 	{
; 724  : 		double tmpVal = (double) val * DPIScaleFactorX;
; 725  : 
; 726  : 		if (tmpVal > 0)
; 727  : 			return (int) floor(tmpVal);

  0001b	83 ec 08	 sub	 esp, 8
  0001e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00022	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR ?DPIScaleFactorX@@3NA
  0002a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00032	f2 0f 11 45 f8	 movsd	 QWORD PTR _tmpVal$1[ebp], xmm0
  00037	dd 45 f8	 fld	 QWORD PTR _tmpVal$1[ebp]
  0003a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0003d	76 14		 jbe	 SHORT $LN4@Compensate
  0003f	e8 00 00 00 00	 call	 _floor
  00044	dd 5d f8	 fstp	 QWORD PTR tv128[ebp]
  00047	f2 0f 2c 45 f8	 cvttsd2si eax, QWORD PTR tv128[ebp]

; 728  : 		else
; 729  : 			return (int) ceil(tmpVal);

  0004c	83 c4 08	 add	 esp, 8

; 730  : 	}
; 731  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN4@Compensate:

; 728  : 		else
; 729  : 			return (int) ceil(tmpVal);

  00053	e8 00 00 00 00	 call	 _ceil
  00058	dd 5d f8	 fstp	 QWORD PTR tv80[ebp]
  0005b	f2 0f 2c 45 f8	 cvttsd2si eax, QWORD PTR tv80[ebp]
  00060	83 c4 08	 add	 esp, 8

; 730  : 	}
; 731  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_CompensateXDPI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsVolumeDeviceHosted
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_IsVolumeDeviceHosted PROC				; COMDAT

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 399  : 	return strstr (lpszDiskFile, "\\Device\\") == lpszDiskFile

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpszDiskFile$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_08MBBBEOPI@?2Device?2?$AA@
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _strstr
  00012	83 c4 08	 add	 esp, 8
  00015	3b c6		 cmp	 eax, esi
  00017	74 17		 je	 SHORT $LN3@IsVolumeDe
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_08FALOLEII@?2DEVICE?2?$AA@
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _strstr
  00024	83 c4 08	 add	 esp, 8
  00027	3b c6		 cmp	 eax, esi
  00029	74 05		 je	 SHORT $LN3@IsVolumeDe
  0002b	33 c0		 xor	 eax, eax
  0002d	5e		 pop	 esi

; 400  : 		|| strstr (lpszDiskFile, "\\DEVICE\\") == lpszDiskFile;
; 401  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN3@IsVolumeDe:

; 399  : 	return strstr (lpszDiskFile, "\\Device\\") == lpszDiskFile

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	5e		 pop	 esi

; 400  : 		|| strstr (lpszDiskFile, "\\DEVICE\\") == lpszDiskFile;
; 401  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_IsVolumeDeviceHosted ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetDriveGeometry
_TEXT	SEGMENT
_dwResult$ = -552					; size = 4
_dg$ = -548						; size = 544
__$ArrayPad$ = -4					; size = 4
_deviceName$ = 8					; size = 4
_diskGeometry$ = 12					; size = 4
_GetDriveGeometry PROC					; COMDAT

; 7713 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _deviceName$[ebp]

; 7714 : 	BOOL bResult;
; 7715 : 	DWORD dwResult;
; 7716 : 	DISK_GEOMETRY_STRUCT dg;
; 7717 : 
; 7718 : 	memset (&dg, 0, sizeof(dg));

  00017	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _dg$[ebp]
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _diskGeometry$[ebp]
  00021	68 20 02 00 00	 push	 544			; 00000220H
  00026	6a 00		 push	 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset

; 7719 : 	wsprintfW ((PWSTR) &dg.deviceName, L"%hs", deviceName);

  0002e	56		 push	 esi
  0002f	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _dg$[ebp]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00041	83 c4 18	 add	 esp, 24			; 00000018H

; 7720 : 
; 7721 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_GET_DRIVE_GEOMETRY, &dg,

  00044	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	68 20 02 00 00	 push	 544			; 00000220H
  00052	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _dg$[ebp]
  00058	50		 push	 eax
  00059	68 20 02 00 00	 push	 544			; 00000220H
  0005e	50		 push	 eax
  0005f	68 3c 20 22 00	 push	 2236476			; 0022203cH
  00064	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7722 : 		sizeof (dg), &dg, sizeof (dg), &dwResult, NULL);
; 7723 : 
; 7724 : 	memcpy (diskGeometry, &dg.diskGeometry, sizeof (DISK_GEOMETRY));

  00070	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR _dg$[ebp+520]

; 7725 : 	return bResult;
; 7726 : }

  00074	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00077	33 cd		 xor	 ecx, ebp
  00079	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  0007c	f3 0f 7e 45 f4	 movq	 xmm0, QWORD PTR _dg$[ebp+536]
  00081	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_GetDriveGeometry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetDeviceInfo
_TEXT	SEGMENT
_deviceName$ = 8					; size = 4
_dwResult$ = 12						; size = 4
_info$ = 12						; size = 4
_GetDeviceInfo PROC					; COMDAT

; 7693 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 7694 : 	DWORD dwResult;
; 7695 : 
; 7696 : 	memset (info, 0, sizeof(*info));

  00004	8b 75 0c	 mov	 esi, DWORD PTR _info$[ebp]
  00007	68 30 02 00 00	 push	 560			; 00000230H
  0000c	6a 00		 push	 0
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memset

; 7697 : 	wsprintfW ((PWSTR) &info->deviceName, L"%hs", deviceName);

  00014	ff 75 08	 push	 DWORD PTR _deviceName$[ebp]
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  0001c	56		 push	 esi
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00023	83 c4 18	 add	 esp, 24			; 00000018H

; 7698 : 
; 7699 : 	return DeviceIoControl (hDriver, GST_IOCTL_GET_DRIVE_PARTITION_INFO, info, sizeof (*info), info, sizeof (*info), &dwResult, NULL);

  00026	8d 45 0c	 lea	 eax, DWORD PTR _dwResult$[ebp]
  00029	6a 00		 push	 0
  0002b	50		 push	 eax
  0002c	68 30 02 00 00	 push	 560			; 00000230H
  00031	56		 push	 esi
  00032	68 30 02 00 00	 push	 560			; 00000230H
  00037	56		 push	 esi
  00038	68 38 20 22 00	 push	 2236472			; 00222038H
  0003d	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00049	5e		 pop	 esi

; 7700 : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_GetDeviceInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetPartitionInfo
_TEXT	SEGMENT
_dwResult$ = -568					; size = 4
_dpi$ = -564						; size = 560
__$ArrayPad$ = -4					; size = 4
_deviceName$ = 8					; size = 4
_rpartInfo$ = 12					; size = 4
_GetPartitionInfo PROC					; COMDAT

; 7667 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 02 00
	00		 sub	 esp, 568		; 00000238H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _deviceName$[ebp]

; 7668 : 	BOOL bResult;
; 7669 : 	DWORD dwResult;
; 7670 : 	DISK_PARTITION_INFO_STRUCT dpi;
; 7671 : 
; 7672 : 	memset (&dpi, 0, sizeof(dpi));

  00017	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _dpi$[ebp]
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _rpartInfo$[ebp]
  00021	68 30 02 00 00	 push	 560			; 00000230H
  00026	6a 00		 push	 0
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset

; 7673 : 	wsprintfW ((PWSTR) &dpi.deviceName, L"%hs", deviceName);

  0002e	56		 push	 esi
  0002f	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _dpi$[ebp]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00041	83 c4 18	 add	 esp, 24			; 00000018H

; 7674 : 
; 7675 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_GET_DRIVE_PARTITION_INFO, &dpi,

  00044	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	68 30 02 00 00	 push	 560			; 00000230H
  00052	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _dpi$[ebp]
  00058	50		 push	 eax
  00059	68 30 02 00 00	 push	 560			; 00000230H
  0005e	50		 push	 eax
  0005f	68 38 20 22 00	 push	 2236472			; 00222038H
  00064	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7676 : 		sizeof (dpi), &dpi, sizeof (dpi), &dwResult, NULL);
; 7677 : 
; 7678 : 	memcpy (rpartInfo, &dpi.partInfo, sizeof (PARTITION_INFORMATION));

  00070	0f 10 45 d4	 movups	 xmm0, XMMWORD PTR _dpi$[ebp+520]

; 7679 : 	return bResult;
; 7680 : }

  00074	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00077	33 cd		 xor	 ecx, ebp
  00079	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  0007c	0f 10 45 e4	 movups	 xmm0, XMMWORD PTR _dpi$[ebp+536]
  00080	0f 11 47 10	 movups	 XMMWORD PTR [edi+16], xmm0
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_GetPartitionInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _OpenOnlineHelp
_TEXT	SEGMENT
_OpenOnlineHelp PROC					; COMDAT

; 9885 : 	//Applink ("help", TRUE, "");
; 9886 : 	Extlink("http://www.gostcrypt.org/redirect.php?a=2");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
  00005	e8 00 00 00 00	 call	 _Extlink
  0000a	59		 pop	 ecx

; 9887 : }

  0000b	c3		 ret	 0
_OpenOnlineHelp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SelectMultipleFilesNext
_TEXT	SEGMENT
tv225 = -8						; size = 4
tv202 = -4						; size = 4
_lpszFileName$ = 8					; size = 4
_SelectMultipleFilesNext PROC				; COMDAT

; 4623 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 4624 : 	if (SelectMultipleFilesOffset == 0)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SelectMultipleFilesOffset@@3HA, 0
  0000d	75 06		 jne	 SHORT $LN2@SelectMult

; 4625 : 		return FALSE;

  0000f	33 c0		 xor	 eax, eax

; 4640 : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN2@SelectMult:
  00015	53		 push	 ebx

; 4626 : 
; 4627 : 	strncpy (lpszFileName, SelectMultipleFilesPath, GST_MAX_PATH);

  00016	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	68 04 01 00 00	 push	 260			; 00000104H
  00020	68 00 00 00 00	 push	 OFFSET ?SelectMultipleFilesPath@@3PADA
  00025	53		 push	 ebx
  00026	e8 00 00 00 00	 call	 _strncpy

; 4628 : 	lpszFileName[GST_MAX_PATH - 1] = 0;
; 4629 : 
; 4630 : 	if (lpszFileName[strlen (lpszFileName) - 1] != '\\')

  0002b	8b cb		 mov	 ecx, ebx
  0002d	c6 83 03 01 00
	00 00		 mov	 BYTE PTR [ebx+259], 0
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
  00037	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL6@SelectMult:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL6@SelectMult
  00047	2b ca		 sub	 ecx, edx
  00049	80 7c 19 ff 5c	 cmp	 BYTE PTR [ecx+ebx-1], 92 ; 0000005cH
  0004e	74 16		 je	 SHORT $LN3@SelectMult

; 4631 : 		strcat (lpszFileName, "\\");

  00050	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
$LL7@SelectMult:
  00053	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00056	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00059	84 c0		 test	 al, al
  0005b	75 f6		 jne	 SHORT $LL7@SelectMult
  0005d	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00063	66 89 07	 mov	 WORD PTR [edi], ax
$LN3@SelectMult:

; 4632 : 
; 4633 : 	strcat (lpszFileName, SelectMultipleFilesPath + SelectMultipleFilesOffset);

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectMultipleFilesOffset@@3HA
  0006b	8d 90 00 00 00
	00		 lea	 edx, DWORD PTR ?SelectMultipleFilesPath@@3PADA[eax]
  00071	8b f2		 mov	 esi, edx
  00073	8b ca		 mov	 ecx, edx
$LL8@SelectMult:
  00075	8a 06		 mov	 al, BYTE PTR [esi]
  00077	46		 inc	 esi
  00078	84 c0		 test	 al, al
  0007a	75 f9		 jne	 SHORT $LL8@SelectMult
  0007c	2b f1		 sub	 esi, ecx
  0007e	4b		 dec	 ebx
  0007f	90		 npad	 1
$LL9@SelectMult:
  00080	8a 43 01	 mov	 al, BYTE PTR [ebx+1]
  00083	43		 inc	 ebx
  00084	84 c0		 test	 al, al
  00086	75 f8		 jne	 SHORT $LL9@SelectMult
  00088	8b ce		 mov	 ecx, esi
  0008a	8b fb		 mov	 edi, ebx
  0008c	89 75 f8	 mov	 DWORD PTR tv225[ebp], esi
  0008f	8b f2		 mov	 esi, edx
  00091	c1 e9 02	 shr	 ecx, 2
  00094	f3 a5		 rep movsd
  00096	8b 4d f8	 mov	 ecx, DWORD PTR tv225[ebp]
  00099	83 e1 03	 and	 ecx, 3
  0009c	f3 a4		 rep movsb
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi

; 4634 : 
; 4635 : 	SelectMultipleFilesOffset += strlen (SelectMultipleFilesPath + SelectMultipleFilesOffset) + 1;

  000a0	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000a3	5b		 pop	 ebx
$LL10@SelectMult:
  000a4	8a 02		 mov	 al, BYTE PTR [edx]
  000a6	42		 inc	 edx
  000a7	84 c0		 test	 al, al
  000a9	75 f9		 jne	 SHORT $LL10@SelectMult
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SelectMultipleFilesOffset@@3HA
  000b0	2b d1		 sub	 edx, ecx
  000b2	40		 inc	 eax

; 4636 : 	if (SelectMultipleFilesPath[SelectMultipleFilesOffset] == 0)

  000b3	33 c9		 xor	 ecx, ecx
  000b5	03 c2		 add	 eax, edx
  000b7	38 88 00 00 00
	00		 cmp	 BYTE PTR ?SelectMultipleFilesPath@@3PADA[eax], cl
  000bd	0f 44 c1	 cmove	 eax, ecx
  000c0	a3 00 00 00 00	 mov	 DWORD PTR ?SelectMultipleFilesOffset@@3HA, eax

; 4637 : 		SelectMultipleFilesOffset = 0;
; 4638 : 
; 4639 : 	return TRUE;

  000c5	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 4640 : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_SelectMultipleFilesNext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SelectMultipleFiles
_TEXT	SEGMENT
_ofn$ = -264284						; size = 88
_lpszFileName$GSCopy$1$ = -264196			; size = 4
_file$ = -264192					; size = 262140
_filter$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_stringId$ = 12						; size = 4
_lpszFileName$ = 16					; size = 4
_keepHistory$ = 20					; size = 4
_SelectMultipleFiles PROC				; COMDAT

; 4541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 5c 08 04 00	 mov	 eax, 264284		; 0004085cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 10	 mov	 eax, DWORD PTR _lpszFileName$[ebp]
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  0001f	57		 push	 edi
  00020	8b 7d 0c	 mov	 edi, DWORD PTR _stringId$[ebp]
  00023	68 fc ff 03 00	 push	 262140			; 0003fffcH
  00028	89 85 fc f7 fb
	ff		 mov	 DWORD PTR _lpszFileName$GSCopy$1$[ebp], eax
  0002e	8d 85 00 f8 fb
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00034	6a 00		 push	 0
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memset
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4542 : 	OPENFILENAMEW ofn;
; 4543 : 	wchar_t file[0xffff * 2] = { 0 };	// The size must not exceed 0xffff*2 due to a bug in Windows 2000 and XP SP1
; 4544 : 	wchar_t filter[1024];
; 4545 : 	BOOL status = FALSE;

  0003f	33 db		 xor	 ebx, ebx

; 4546 : 
; 4547 : 	CoInitialize (NULL);

  00041	53		 push	 ebx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 4548 : 
; 4549 : 	ZeroMemory (&ofn, sizeof (ofn));

  00048	6a 58		 push	 88			; 00000058H
  0004a	8d 85 a4 f7 fb
	ff		 lea	 eax, DWORD PTR _ofn$[ebp]
  00050	53		 push	 ebx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _memset

; 4550 : 
; 4551 : 	*lpszFileName = 0;

  00057	8b 85 fc f7 fb
	ff		 mov	 eax, DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4552 : 	ofn.lStructSize				= sizeof (ofn);

  00060	c7 85 a4 f7 fb
	ff 58 00 00 00	 mov	 DWORD PTR _ofn$[ebp], 88 ; 00000058H

; 4553 : 	ofn.hwndOwner				= hwndDlg;

  0006a	89 b5 a8 f7 fb
	ff		 mov	 DWORD PTR _ofn$[ebp+4], esi

; 4554 : 	wsprintfW (filter, L"%ls (*.*)%c*.*%c%ls (*.gst)%c*.gst%c%c",

  00070	53		 push	 ebx
  00071	53		 push	 ebx
  00072	53		 push	 ebx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BLEDMAHO@GST_VOLUMES?$AA@
  00078	88 18		 mov	 BYTE PTR [eax], bl
  0007a	e8 00 00 00 00	 call	 _GetString
  0007f	83 c4 04	 add	 esp, 4
  00082	50		 push	 eax
  00083	53		 push	 ebx
  00084	53		 push	 ebx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_09EEODDAII@ALL_FILES?$AA@
  0008a	e8 00 00 00 00	 call	 _GetString
  0008f	83 c4 04	 add	 esp, 4
  00092	50		 push	 eax
  00093	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _filter$[ebp]
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@HPAMBPDO@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AA?$CK?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AA?$CK?$AA?$CF?$AAc?$AA?$CF?$AAl?$AAs?$AA?5?$AA?$CI?$AA?$CK?$AA?4?$AAg?$AAs?$AAt?$AA?$CJ?$AA?$CF?$AAc?$AA?$CK?$AA?4?$AAg@
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 4555 : 		GetString ("ALL_FILES"), 0, 0, GetString ("GST_VOLUMES"), 0, 0, 0);
; 4556 : 	ofn.lpstrFilter				= filter;

  000a5	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _filter$[ebp]

; 4557 : 	ofn.nFilterIndex			= 1;

  000ab	c7 85 bc f7 fb
	ff 01 00 00 00	 mov	 DWORD PTR _ofn$[ebp+24], 1
  000b5	89 85 b0 f7 fb
	ff		 mov	 DWORD PTR _ofn$[ebp+12], eax

; 4558 : 	ofn.lpstrFile				= file;

  000bb	8d 85 00 f8 fb
	ff		 lea	 eax, DWORD PTR _file$[ebp]

; 4559 : 	ofn.nMaxFile				= sizeof (file) / sizeof (file[0]);
; 4560 : 	ofn.lpstrTitle				= GetString (stringId);

  000c1	57		 push	 edi
  000c2	89 85 c0 f7 fb
	ff		 mov	 DWORD PTR _ofn$[ebp+28], eax
  000c8	c7 85 c4 f7 fb
	ff fe ff 01 00	 mov	 DWORD PTR _ofn$[ebp+32], 131070 ; 0001fffeH
  000d2	e8 00 00 00 00	 call	 _GetString
  000d7	8b 4d 14	 mov	 ecx, DWORD PTR _keepHistory$[ebp]
  000da	83 c4 28	 add	 esp, 40			; 00000028H
  000dd	89 85 d4 f7 fb
	ff		 mov	 DWORD PTR _ofn$[ebp+48], eax
  000e3	85 c9		 test	 ecx, ecx
  000e5	b8 04 0a 08 02	 mov	 eax, 34081284		; 02080a04H
  000ea	ba 04 0a 08 00	 mov	 edx, 526852		; 00080a04H
  000ef	0f 45 c2	 cmovne	 eax, edx

; 4561 : 	ofn.Flags					= OFN_HIDEREADONLY

  000f2	89 85 d8 f7 fb
	ff		 mov	 DWORD PTR _ofn$[ebp+52], eax

; 4562 : 		| OFN_EXPLORER
; 4563 : 		| OFN_PATHMUSTEXIST
; 4564 : 		| OFN_ALLOWMULTISELECT
; 4565 : 		| (keepHistory ? 0 : OFN_DONTADDTORECENT);
; 4566 : 	
; 4567 : 	if (!keepHistory)

  000f8	75 05		 jne	 SHORT $LN4@SelectMult

; 4568 : 		CleanLastVisitedMRU ();

  000fa	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN4@SelectMult:

; 4569 : 
; 4570 : 	SystemFileSelectorCallerThreadId = GetCurrentThreadId();

  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  00105	a3 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallerThreadId@@3KA, eax ; SystemFileSelectorCallerThreadId

; 4571 : 	SystemFileSelectorCallPending = TRUE;
; 4572 : 
; 4573 : 	if (!GetOpenFileNameW (&ofn))

  0010a	8d 85 a4 f7 fb
	ff		 lea	 eax, DWORD PTR _ofn$[ebp]
  00110	50		 push	 eax
  00111	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 1 ; SystemFileSelectorCallPending
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetOpenFileNameW@4
  00121	85 c0		 test	 eax, eax
  00123	0f 84 ae 00 00
	00		 je	 $ret$16

; 4574 : 		goto ret;
; 4575 : 
; 4576 : 	SystemFileSelectorCallPending = FALSE;
; 4577 : 
; 4578 : 	if (file[ofn.nFileOffset - 1] != 0)

  00129	0f b7 85 dc f7
	fb ff		 movzx	 eax, WORD PTR _ofn$[ebp+56]

; 4579 : 	{
; 4580 : 		// Single file selected
; 4581 : 		WideCharToMultiByte (CP_ACP, 0, file, -1, lpszFileName, MAX_PATH, NULL, NULL);

  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	89 1d 00 00 00
	00		 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, ebx ; SystemFileSelectorCallPending
  0013a	66 39 9c 45 fe
	f7 fb ff	 cmp	 WORD PTR _file$[ebp+eax*2-2], bx
  00142	8d 85 00 f8 fb
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  00148	68 04 01 00 00	 push	 260			; 00000104H
  0014d	74 1b		 je	 SHORT $LN7@SelectMult
  0014f	ff b5 fc f7 fb
	ff		 push	 DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  00155	6a ff		 push	 -1
  00157	50		 push	 eax
  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 4582 : 		SelectMultipleFilesOffset = 0;

  00162	89 1d 00 00 00
	00		 mov	 DWORD PTR ?SelectMultipleFilesOffset@@3HA, ebx

; 4583 : 	}
; 4584 : 	else

  00168	eb 5d		 jmp	 SHORT $LN8@SelectMult
$LN7@SelectMult:

; 4585 : 	{
; 4586 : 		// Multiple files selected
; 4587 : 		int n;
; 4588 : 		wchar_t *f = file;
; 4589 : 		char *s = SelectMultipleFilesPath;
; 4590 : 		while ((n = WideCharToMultiByte (CP_ACP, 0, f, -1, s, MAX_PATH, NULL, NULL)) > 1)

  0016a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__WideCharToMultiByte@32
  00170	8d b5 00 f8 fb
	ff		 lea	 esi, DWORD PTR _file$[ebp]
  00176	bf 00 00 00 00	 mov	 edi, OFFSET ?SelectMultipleFilesPath@@3PADA
  0017b	57		 push	 edi
  0017c	6a ff		 push	 -1
  0017e	50		 push	 eax
  0017f	6a 00		 push	 0
  00181	6a 00		 push	 0
  00183	ff d3		 call	 ebx
  00185	83 f8 01	 cmp	 eax, 1
  00188	7e 23		 jle	 SHORT $LN3@SelectMult
  0018a	66 0f 1f 44 00
	00		 npad	 6
$LL2@SelectMult:
  00190	6a 00		 push	 0
  00192	6a 00		 push	 0
  00194	68 04 01 00 00	 push	 260			; 00000104H

; 4591 : 		{
; 4592 : 			f += n;
; 4593 : 			s += n;

  00199	03 f8		 add	 edi, eax
  0019b	8d 34 46	 lea	 esi, DWORD PTR [esi+eax*2]
  0019e	57		 push	 edi
  0019f	6a ff		 push	 -1
  001a1	56		 push	 esi
  001a2	6a 00		 push	 0
  001a4	6a 00		 push	 0
  001a6	ff d3		 call	 ebx
  001a8	83 f8 01	 cmp	 eax, 1
  001ab	7f e3		 jg	 SHORT $LL2@SelectMult
$LN3@SelectMult:

; 4594 : 		}
; 4595 : 
; 4596 : 		SelectMultipleFilesOffset = ofn.nFileOffset;

  001ad	0f b7 85 dc f7
	fb ff		 movzx	 eax, WORD PTR _ofn$[ebp+56]

; 4597 : 		SelectMultipleFilesNext (lpszFileName);

  001b4	ff b5 fc f7 fb
	ff		 push	 DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  001ba	a3 00 00 00 00	 mov	 DWORD PTR ?SelectMultipleFilesOffset@@3HA, eax
  001bf	e8 00 00 00 00	 call	 _SelectMultipleFilesNext
  001c4	83 c4 04	 add	 esp, 4
$LN8@SelectMult:

; 4598 : 	}
; 4599 : 
; 4600 : 	if (!keepHistory)

  001c7	83 7d 14 00	 cmp	 DWORD PTR _keepHistory$[ebp], 0
  001cb	75 05		 jne	 SHORT $LN9@SelectMult

; 4601 : 		CleanLastVisitedMRU ();

  001cd	e8 00 00 00 00	 call	 _CleanLastVisitedMRU
$LN9@SelectMult:

; 4602 : 
; 4603 : 	status = TRUE;

  001d2	bb 01 00 00 00	 mov	 ebx, 1
$ret$16:

; 4604 : 	
; 4605 : ret:
; 4606 : 	SystemFileSelectorCallPending = FALSE;

  001d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?SystemFileSelectorCallPending@@3HA, 0 ; SystemFileSelectorCallPending

; 4607 : 	ResetCurrentDirectory();

  001e1	e8 00 00 00 00	 call	 _ResetCurrentDirectory

; 4608 : 	CoUninitialize();

  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 4609 : 
; 4610 : 	return status;
; 4611 : }

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ef	8b c3		 mov	 eax, ebx
  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5b		 pop	 ebx
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c3		 ret	 0
_SelectMultipleFiles ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ReportUnexpectedState
_TEXT	SEGMENT
_finalMsg$ = -16052					; size = 16048
__$ArrayPad$ = -4					; size = 4
_techInfo$ = 8						; size = 4
_ReportUnexpectedState PROC				; COMDAT

; 10499: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b4 3e 00 00	 mov	 eax, 16052		; 00003eb4H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 08	 mov	 eax, DWORD PTR _techInfo$[ebp]

; 10500: 	wchar_t finalMsg[8024];
; 10501: 
; 10502: 	wsprintfW (finalMsg, GetString ("UNEXPECTED_STATE"), techInfo);

  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FLLBKCCB@UNEXPECTED_STATE?$AA@
  00020	e8 00 00 00 00	 call	 _GetString
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8d 85 4c c1 ff
	ff		 lea	 eax, DWORD PTR _finalMsg$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10503: 	MessageBoxW (MainDlg, finalMsg, lpszTitle, MB_ICONERROR | MB_SETFOREGROUND | MB_TOPMOST);

  00039	8d 85 4c c1 ff
	ff		 lea	 eax, DWORD PTR _finalMsg$[ebp]
  0003f	68 10 00 05 00	 push	 327696			; 00050010H
  00044	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0004a	50		 push	 eax
  0004b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 10504: }

  00057	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005a	33 cd		 xor	 ecx, ebp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_ReportUnexpectedState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InconsistencyResolved
_TEXT	SEGMENT
_finalMsg$ = -16052					; size = 16048
__$ArrayPad$ = -4					; size = 4
_techInfo$ = 8						; size = 4
_InconsistencyResolved PROC				; COMDAT

; 10482: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b4 3e 00 00	 mov	 eax, 16052		; 00003eb4H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	8b 45 08	 mov	 eax, DWORD PTR _techInfo$[ebp]

; 10483: 	wchar_t finalMsg[8024];
; 10484: 
; 10485: 	wsprintfW (finalMsg, GetString ("INCONSISTENCY_RESOLVED"), techInfo);

  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GEMJKNEE@INCONSISTENCY_RESOLVED?$AA@
  00020	e8 00 00 00 00	 call	 _GetString
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8d 85 4c c1 ff
	ff		 lea	 eax, DWORD PTR _finalMsg$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10486: 	MessageBoxW (MainDlg, finalMsg, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  00039	8d 85 4c c1 ff
	ff		 lea	 eax, DWORD PTR _finalMsg$[ebp]
  0003f	68 30 00 05 00	 push	 327728			; 00050030H
  00044	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0004a	50		 push	 eax
  0004b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 10487: }

  00057	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005a	33 cd		 xor	 ecx, ebp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_InconsistencyResolved ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _MapResource
_TEXT	SEGMENT
_resourceType$ = 8					; size = 4
_resourceId$ = 12					; size = 4
_size$ = 16						; size = 4
_MapResource PROC					; COMDAT

; 10459: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10460: 	HGLOBAL hResL; 
; 10461:     HRSRC hRes;
; 10462: 
; 10463: 	hRes = FindResource (NULL, MAKEINTRESOURCE(resourceId), resourceType);

  00003	0f b7 45 0c	 movzx	 eax, WORD PTR _resourceId$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	ff 75 08	 push	 DWORD PTR _resourceType$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  00016	8b f0		 mov	 esi, eax

; 10464: 	hResL = LoadResource (NULL, hRes);

  00018	56		 push	 esi
  00019	6a 00		 push	 0
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8

; 10465: 
; 10466: 	if (size != NULL)

  00021	8b 7d 10	 mov	 edi, DWORD PTR _size$[ebp]
  00024	8b d8		 mov	 ebx, eax
  00026	85 ff		 test	 edi, edi
  00028	74 0b		 je	 SHORT $LN2@MapResourc

; 10467: 		*size = SizeofResource (NULL, hRes);

  0002a	56		 push	 esi
  0002b	6a 00		 push	 0
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8
  00033	89 07		 mov	 DWORD PTR [edi], eax
$LN2@MapResourc:

; 10468:   
; 10469: 	return (BYTE *) LockResource (hResL);

  00035	53		 push	 ebx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 10470: }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_MapResource ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FindGSTWindowEnum@8
_TEXT	SEGMENT
_name$1 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
_FindGSTWindowEnum@8 PROC				; COMDAT

; 10430: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 0c	 mov	 edi, DWORD PTR _lParam$[ebp]

; 10431: 	if (*(HWND *)lParam == hwnd)

  00018	39 37		 cmp	 DWORD PTR [edi], esi
  0001a	74 7f		 je	 SHORT $LN5@FindGSTWin

; 10432: 		return TRUE;
; 10433: 
; 10434: 	if (GetWindowLongPtr (hwnd, GWLP_USERDATA) == (LONG_PTR) 'TRUE')

  0001c	6a eb		 push	 -21			; ffffffebH
  0001e	56		 push	 esi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00025	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  0002a	75 6f		 jne	 SHORT $LN5@FindGSTWin

; 10435: 	{
; 10436: 		char name[32] = { 0 };
; 10437: 		GetWindowText (hwnd, name, sizeof (name) - 1);

  0002c	6a 1f		 push	 31			; 0000001fH
  0002e	8d 45 dc	 lea	 eax, DWORD PTR _name$1[ebp]
  00031	c6 45 dc 00	 mov	 BYTE PTR _name$1[ebp], 0
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _name$1[ebp+25], 0
  0003f	50		 push	 eax
  00040	56		 push	 esi
  00041	0f 11 45 dd	 movups	 XMMWORD PTR _name$1[ebp+1], xmm0
  00045	66 c7 45 f9 00
	00		 mov	 WORD PTR _name$1[ebp+29], 0
  0004b	66 0f d6 45 ed	 movq	 QWORD PTR _name$1[ebp+17], xmm0
  00050	c6 45 fb 00	 mov	 BYTE PTR _name$1[ebp+31], 0
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 10438: 		if (hwnd != MainDlg && strcmp (name, "GostCrypt") == 0)

  0005a	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR _MainDlg
  00060	74 39		 je	 SHORT $LN5@FindGSTWin
  00062	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  00067	8d 4d dc	 lea	 ecx, DWORD PTR _name$1[ebp]
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL7@FindGSTWin:
  00070	8a 11		 mov	 dl, BYTE PTR [ecx]
  00072	3a 10		 cmp	 dl, BYTE PTR [eax]
  00074	75 1a		 jne	 SHORT $LN8@FindGSTWin
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN9@FindGSTWin
  0007a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0007d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00080	75 0e		 jne	 SHORT $LN8@FindGSTWin
  00082	83 c1 02	 add	 ecx, 2
  00085	83 c0 02	 add	 eax, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL7@FindGSTWin
$LN9@FindGSTWin:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN10@FindGSTWin
$LN8@FindGSTWin:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN10@FindGSTWin:
  00095	85 c0		 test	 eax, eax
  00097	75 02		 jne	 SHORT $LN5@FindGSTWin

; 10439: 		{
; 10440: 			if (lParam != 0)
; 10441: 				*((HWND *)lParam) = hwnd;

  00099	89 37		 mov	 DWORD PTR [edi], esi
$LN5@FindGSTWin:

; 10442: 		}
; 10443: 	}
; 10444: 	return TRUE;
; 10445: }

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	5f		 pop	 edi
  000a4	33 cd		 xor	 ecx, ebp
  000a6	5e		 pop	 esi
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
_FindGSTWindowEnum@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseGSTWindowsEnum@8
_TEXT	SEGMENT
_name$1 = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_lParam$ = 12						; size = 4
_CloseGSTWindowsEnum@8 PROC				; COMDAT

; 10399: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _lParam$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]

; 10400: 	if (GetWindowLongPtr (hwnd, GWLP_USERDATA) == (LONG_PTR) 'TRUE')

  0001b	6a eb		 push	 -21			; ffffffebH
  0001d	56		 push	 esi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00024	3d 45 55 52 54	 cmp	 eax, 1414681925		; 54525545H
  00029	0f 85 98 00 00
	00		 jne	 $LN12@CloseGSTWi

; 10401: 	{
; 10402: 		char name[1024] = { 0 };
; 10403: 		GetWindowText (hwnd, name, sizeof (name) - 1);

  0002f	68 00 04 00 00	 push	 1024			; 00000400H
  00034	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _name$1[ebp]
  0003a	6a 00		 push	 0
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _name$1[ebp]
  0004b	68 ff 03 00 00	 push	 1023			; 000003ffH
  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 10404: 		if (hwnd != MainDlg && strstr (name, "GostCrypt"))

  00058	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR _MainDlg
  0005e	74 67		 je	 SHORT $LN12@CloseGSTWi
  00060	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _name$1[ebp]
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _strstr
  00071	83 c4 08	 add	 esp, 8
  00074	85 c0		 test	 eax, eax
  00076	74 4f		 je	 SHORT $LN12@CloseGSTWi

; 10405: 		{
; 10406: 			PostMessage (hwnd, GST_APPMSG_CLOSE_BKG_TASK, 0, 0);

  00078	57		 push	 edi
  00079	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__PostMessageA@16
  0007f	6a 00		 push	 0
  00081	6a 00		 push	 0
  00083	68 04 80 00 00	 push	 32772			; 00008004H
  00088	56		 push	 esi
  00089	ff d7		 call	 edi

; 10407: 
; 10408: 			if (DriverVersion < 0x0430)

  0008b	81 3d 00 00 00
	00 30 04 00 00	 cmp	 DWORD PTR ?DriverVersion@@3JA, 1072 ; DriverVersion, 00000430H
  00095	7d 09		 jge	 SHORT $LN4@CloseGSTWi

; 10409: 				PostMessage (hwnd, WM_ENDSESSION, 0, 0);

  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	6a 16		 push	 22			; 00000016H
  0009d	56		 push	 esi
  0009e	ff d7		 call	 edi
$LN4@CloseGSTWi:

; 10410: 
; 10411: 			PostMessage (hwnd, WM_CLOSE, 0, 0);

  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	6a 10		 push	 16			; 00000010H
  000a6	56		 push	 esi
  000a7	ff d7		 call	 edi

; 10415: 		}
; 10416: 	}
; 10417: 	return TRUE;

  000a9	b8 01 00 00 00	 mov	 eax, 1
  000ae	5f		 pop	 edi
  000af	85 db		 test	 ebx, ebx
  000b1	74 19		 je	 SHORT $LN5@CloseGSTWi

; 10412: 
; 10413: 			if (lParam != 0)
; 10414: 				*((BOOL *)lParam) = TRUE;

  000b3	5e		 pop	 esi
  000b4	89 03		 mov	 DWORD PTR [ebx], eax
  000b6	5b		 pop	 ebx

; 10418: }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
$LN12@CloseGSTWi:

; 10415: 		}
; 10416: 	}
; 10417: 	return TRUE;

  000c7	b8 01 00 00 00	 mov	 eax, 1
$LN5@CloseGSTWi:

; 10418: }

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	5e		 pop	 esi
  000d0	33 cd		 xor	 ecx, ebp
  000d2	5b		 pop	 ebx
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
_CloseGSTWindowsEnum@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _HandleDriveNotReadyError
_TEXT	SEGMENT
_size$ = -12						; size = 4
_value$ = -8						; size = 4
_hkey$ = -4						; size = 4
_HandleDriveNotReadyError PROC				; COMDAT

; 10367: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 10368: 	HKEY hkey = 0;
; 10369: 	DWORD value = 0, size = sizeof (DWORD);
; 10370: 
; 10371: 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Services\\MountMgr",
; 10372: 		0, KEY_READ, &hkey) != ERROR_SUCCESS)

  00006	8d 45 fc	 lea	 eax, DWORD PTR _hkey$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hkey$[ebp], 0
  00010	50		 push	 eax
  00011	68 19 00 02 00	 push	 131097			; 00020019H
  00016	6a 00		 push	 0
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PBEPCFPL@SYSTEM?2CurrentControlSet?2Service@
  0001d	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _value$[ebp], 0
  00029	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _size$[ebp], 4
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00036	85 c0		 test	 eax, eax
  00038	0f 85 9a 00 00
	00		 jne	 $LN1@HandleDriv

; 10373: 		return;
; 10374: 
; 10375: 	if (RegQueryValueEx (hkey, "NoAutoMount", 0, 0, (LPBYTE) &value, &size) == ERROR_SUCCESS 
; 10376: 		&& value != 0)

  0003e	8d 45 f4	 lea	 eax, DWORD PTR _size$[ebp]
  00041	50		 push	 eax
  00042	8d 45 f8	 lea	 eax, DWORD PTR _value$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PNKDIFLK@NoAutoMount?$AA@
  0004f	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00058	85 c0		 test	 eax, eax
  0005a	75 1c		 jne	 SHORT $LN3@HandleDriv
  0005c	39 45 f8	 cmp	 DWORD PTR _value$[ebp], eax
  0005f	74 17		 je	 SHORT $LN3@HandleDriv

; 10377: 	{
; 10378: 		Warning ("SYS_AUTOMOUNT_DISABLED");

  00061	39 05 00 00 00
	00		 cmp	 DWORD PTR _Silent, eax
  00067	75 66		 jne	 SHORT $LN11@HandleDriv
  00069	6a 30		 push	 48			; 00000030H
  0006b	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DCKIMKAI@SYS_AUTOMOUNT_DISABLED?$AA@
  00076	eb 42		 jmp	 SHORT $LN14@HandleDriv
$LN3@HandleDriv:

; 10379: 	}
; 10380: 	else if (nCurrentOS == WIN_VISTA && CurrentOSServicePack < 1)

  00078	83 3d 00 00 00
	00 0b		 cmp	 DWORD PTR _nCurrentOS, 11 ; 0000000bH
  0007f	75 23		 jne	 SHORT $LN5@HandleDriv
  00081	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _CurrentOSServicePack, 1
  00088	7d 1a		 jge	 SHORT $LN5@HandleDriv

; 10381: 		Warning ("SYS_ASSIGN_DRIVE_LETTER");

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GBJLPDI@SYS_ASSIGN_DRIVE_LETTER?$AA@
  0008f	e8 00 00 00 00	 call	 _Warning
  00094	83 c4 04	 add	 esp, 4

; 10384: 
; 10385: 	RegCloseKey (hkey);

  00097	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 10386: }

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN5@HandleDriv:

; 10382: 	else
; 10383: 		Warning ("DEVICE_NOT_READY_ERROR");

  000a4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  000ab	75 22		 jne	 SHORT $LN11@HandleDriv
  000ad	6a 30		 push	 48			; 00000030H
  000af	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KELIABGB@DEVICE_NOT_READY_ERROR?$AA@
$LN14@HandleDriv:
  000ba	e8 00 00 00 00	 call	 _GetString
  000bf	83 c4 04	 add	 esp, 4
  000c2	50		 push	 eax
  000c3	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN11@HandleDriv:

; 10384: 
; 10385: 	RegCloseKey (hkey);

  000cf	ff 75 fc	 push	 DWORD PTR _hkey$[ebp]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN1@HandleDriv:

; 10386: }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
_HandleDriveNotReadyError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RelativePath2Absolute
_TEXT	SEGMENT
_path$1 = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
_RelativePath2Absolute PROC				; COMDAT

; 10340: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _szFileName$[ebp]

; 10341: 	if (szFileName[0] != '\\'
; 10342: 		&& strchr (szFileName, ':') == 0
; 10343: 		&& strstr (szFileName, "Volume{") != szFileName)

  00017	80 3b 5c	 cmp	 BYTE PTR [ebx], 92	; 0000005cH
  0001a	0f 84 b4 00 00
	00		 je	 $LN13@RelativePa
  00020	6a 3a		 push	 58			; 0000003aH
  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 _strchr
  00028	83 c4 08	 add	 esp, 8
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 a1 00 00
	00		 jne	 $LN13@RelativePa
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  00038	53		 push	 ebx
  00039	e8 00 00 00 00	 call	 _strstr
  0003e	83 c4 08	 add	 esp, 8
  00041	3b c3		 cmp	 eax, ebx
  00043	0f 84 8b 00 00
	00		 je	 $LN13@RelativePa

; 10344: 	{
; 10345: 		char path[MAX_PATH*2];
; 10346: 		GetCurrentDirectory (MAX_PATH, path);

  00049	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$1[ebp]
  0004f	50		 push	 eax
  00050	68 04 01 00 00	 push	 260			; 00000104H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentDirectoryA@8

; 10347: 
; 10348: 		if (path[strlen (path) - 1] != '\\')

  0005b	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _path$1[ebp]
  00061	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL9@RelativePa:
  00064	8a 01		 mov	 al, BYTE PTR [ecx]
  00066	41		 inc	 ecx
  00067	84 c0		 test	 al, al
  00069	75 f9		 jne	 SHORT $LL9@RelativePa
  0006b	2b ca		 sub	 ecx, edx
  0006d	56		 push	 esi
  0006e	57		 push	 edi
  0006f	80 bc 0d f3 fd
	ff ff 5c	 cmp	 BYTE PTR _path$1[ebp+ecx-1], 92 ; 0000005cH
  00077	74 1a		 je	 SHORT $LN3@RelativePa

; 10349: 			strcat (path, "\\");

  00079	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _path$1[ebp]
  0007f	4f		 dec	 edi
$LL10@RelativePa:
  00080	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00083	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00086	84 c0		 test	 al, al
  00088	75 f6		 jne	 SHORT $LL10@RelativePa
  0008a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00090	66 89 07	 mov	 WORD PTR [edi], ax
$LN3@RelativePa:

; 10350: 
; 10351: 		strcat (path, szFileName);

  00093	8b d3		 mov	 edx, ebx
  00095	8b f3		 mov	 esi, ebx
$LL11@RelativePa:
  00097	8a 02		 mov	 al, BYTE PTR [edx]
  00099	42		 inc	 edx
  0009a	84 c0		 test	 al, al
  0009c	75 f9		 jne	 SHORT $LL11@RelativePa
  0009e	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _path$1[ebp]
  000a4	2b d6		 sub	 edx, esi
  000a6	4f		 dec	 edi
$LL12@RelativePa:
  000a7	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000aa	47		 inc	 edi
  000ab	84 c0		 test	 al, al
  000ad	75 f8		 jne	 SHORT $LL12@RelativePa
  000af	8b ca		 mov	 ecx, edx

; 10352: 		strncpy (szFileName, path, MAX_PATH-1);

  000b1	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$1[ebp]
  000b7	c1 e9 02	 shr	 ecx, 2
  000ba	f3 a5		 rep movsd
  000bc	8b ca		 mov	 ecx, edx
  000be	68 03 01 00 00	 push	 259			; 00000103H
  000c3	83 e1 03	 and	 ecx, 3
  000c6	50		 push	 eax
  000c7	f3 a4		 rep movsb
  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 _strncpy
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
$LN13@RelativePa:

; 10353: 	}
; 10354: 
; 10355: 	return szFileName;
; 10356: }

  000d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d7	8b c3		 mov	 eax, ebx
  000d9	33 cd		 xor	 ecx, ebp
  000db	5b		 pop	 ebx
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
_RelativePath2Absolute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Extlink
_TEXT	SEGMENT
_url$ = -2088						; size = 2084
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_Extlink PROC						; COMDAT

; 10319: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 08 00
	00		 sub	 esp, 2088		; 00000828H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 10320: 	char url [MAX_URL_LENGTH];
; 10321: 	
; 10322: 	ArrowWaitCursor();

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A
  00018	85 c0		 test	 eax, eax
  0001a	75 11		 jne	 SHORT $LN4@Extlink
  0001c	68 8a 7f 00 00	 push	 32650			; 00007f8aH
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00028	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A, eax
$LN4@Extlink:
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A

; 10323: 	
; 10324: 	sprintf_s (url, sizeof(url), dest);

  00039	ff 75 08	 push	 DWORD PTR _dest$[ebp]
  0003c	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor
  00041	8d 85 d8 f7 ff
	ff		 lea	 eax, DWORD PTR _url$[ebp]
  00047	68 24 08 00 00	 push	 2084			; 00000824H
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _sprintf_s
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 10325: 	ShellExecute (NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);

  00055	8d 85 d8 f7 ff
	ff		 lea	 eax, DWORD PTR _url$[ebp]
  0005b	6a 01		 push	 1
  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	50		 push	 eax
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00067	6a 00		 push	 0
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 10326: 	
; 10327: 	Sleep (200);

  0006f	68 c8 00 00 00	 push	 200			; 000000c8H
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 10328: 	NormalCursor ();

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  0007f	85 c0		 test	 eax, eax
  00081	75 11		 jne	 SHORT $LN7@Extlink
  00083	68 00 7f 00 00	 push	 32512			; 00007f00H
  00088	50		 push	 eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  0008f	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN7@Extlink:
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 10329: }

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_Extlink ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Applink
_TEXT	SEGMENT
$T1 = -2148						; size = 4
_extraOutput$GSCopy$1$ = -2144				; size = 4
_dest$GSCopy$1$ = -2140					; size = 4
$T2 = -2136						; size = 24
$T3 = -2112						; size = 24
_url$ = -2088						; size = 2084
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_bSendOS$ = 12						; size = 4
_extraOutput$ = 16					; size = 4
_Applink PROC						; COMDAT

; 10298: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 08 00
	00		 sub	 esp, 2148		; 00000864H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00016	89 85 a4 f7 ff
	ff		 mov	 DWORD PTR _dest$GSCopy$1$[ebp], eax
  0001c	8b 45 10	 mov	 eax, DWORD PTR _extraOutput$[ebp]
  0001f	53		 push	 ebx
  00020	89 85 a0 f7 ff
	ff		 mov	 DWORD PTR _extraOutput$GSCopy$1$[ebp], eax
  00026	33 db		 xor	 ebx, ebx

; 10299: 	char url [MAX_URL_LENGTH];
; 10300: 
; 10301: 	ArrowWaitCursor ();

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A
  0002d	89 9d 9c f7 ff
	ff		 mov	 DWORD PTR $T1[ebp], ebx
  00033	85 c0		 test	 eax, eax
  00035	75 11		 jne	 SHORT $LN8@Applink
  00037	68 8a 7f 00 00	 push	 32650			; 00007f8aH
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00043	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A, eax
$LN8@Applink:
  00048	50		 push	 eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A
  00054	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor

; 10302: 
; 10303: 	sprintf_s (url, sizeof (url), GST_APPLINK "%s%s&dest=%s", bSendOS ? ("&os=" + GetWindowsEdition()).c_str() : "", extraOutput, dest);

  00059	39 5d 0c	 cmp	 DWORD PTR _bSendOS$[ebp], ebx
  0005c	74 30		 je	 SHORT $LN3@Applink
  0005e	8d 85 a8 f7 ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?GetWindowsEdition@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetWindowsEdition
  0006a	50		 push	 eax
  0006b	8d 85 c0 f7 ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_04CIEGKLKE@?$CGos?$DN?$AA@
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0007c	83 c4 10	 add	 esp, 16			; 00000010H
  0007f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00083	72 02		 jb	 SHORT $LN23@Applink
  00085	8b 00		 mov	 eax, DWORD PTR [eax]
$LN23@Applink:
  00087	bb 03 00 00 00	 mov	 ebx, 3
  0008c	eb 05		 jmp	 SHORT $LN4@Applink
$LN3@Applink:
  0008e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@Applink:
  00093	ff b5 a4 f7 ff
	ff		 push	 DWORD PTR _dest$GSCopy$1$[ebp]
  00099	ff b5 a0 f7 ff
	ff		 push	 DWORD PTR _extraOutput$GSCopy$1$[ebp]
  0009f	50		 push	 eax
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@CODPILBK@http?3?1?1www?4gostcrypt?4org?1applink@
  000a5	8d 85 d8 f7 ff
	ff		 lea	 eax, DWORD PTR _url$[ebp]
  000ab	68 24 08 00 00	 push	 2084			; 00000824H
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _sprintf_s
  000b6	83 c4 18	 add	 esp, 24			; 00000018H
  000b9	f6 c3 02	 test	 bl, 2
  000bc	74 3c		 je	 SHORT $LN28@Applink
  000be	8b 85 d4 f7 ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+20]
  000c4	83 e3 fd	 and	 ebx, -3			; fffffffdH
  000c7	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ca	72 13		 jb	 SHORT $LN33@Applink
  000cc	40		 inc	 eax
  000cd	8d 8d c0 f7 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000d3	50		 push	 eax
  000d4	ff b5 c0 f7 ff
	ff		 push	 DWORD PTR $T3[ebp]
  000da	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN33@Applink:
  000df	c7 85 d4 f7 ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
  000e9	c7 85 d0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0
  000f3	c6 85 c0 f7 ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
$LN28@Applink:
  000fa	f6 c3 01	 test	 bl, 1
  000fd	5b		 pop	 ebx
  000fe	74 1e		 je	 SHORT $LN134@Applink
  00100	8b 85 bc f7 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+20]
  00106	83 f8 10	 cmp	 eax, 16			; 00000010H
  00109	72 13		 jb	 SHORT $LN134@Applink
  0010b	40		 inc	 eax
  0010c	8d 8d a8 f7 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00112	50		 push	 eax
  00113	ff b5 a8 f7 ff
	ff		 push	 DWORD PTR $T2[ebp]
  00119	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN134@Applink:

; 10304: 	ShellExecute (NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);

  0011e	6a 01		 push	 1
  00120	6a 00		 push	 0
  00122	6a 00		 push	 0
  00124	8d 85 d8 f7 ff
	ff		 lea	 eax, DWORD PTR _url$[ebp]
  0012a	50		 push	 eax
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00130	6a 00		 push	 0
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 10305: 
; 10306: 	Sleep (200);

  00138	68 c8 00 00 00	 push	 200			; 000000c8H
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 10307: 	NormalCursor ();

  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  00148	85 c0		 test	 eax, eax
  0014a	75 11		 jne	 SHORT $LN230@Applink
  0014c	68 00 7f 00 00	 push	 32512			; 00007f00H
  00151	50		 push	 eax
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN230@Applink:
  0015d	50		 push	 eax
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 10308: }

  00164	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00167	33 cd		 xor	 ecx, ebp
  00169	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_Applink ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RestartComputer
_TEXT	SEGMENT
_hTkn$ = -24						; size = 4
_tokenPrivil$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_RestartComputer PROC					; COMDAT

; 10154: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 10155: 	TOKEN_PRIVILEGES tokenPrivil; 
; 10156: 	HANDLE hTkn; 
; 10157: 
; 10158: 	if (!OpenProcessToken (GetCurrentProcess (), TOKEN_QUERY|TOKEN_ADJUST_PRIVILEGES, &hTkn))

  00010	8d 45 e8	 lea	 eax, DWORD PTR _hTkn$[ebp]
  00013	50		 push	 eax
  00014	6a 28		 push	 40			; 00000028H
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  0001c	50		 push	 eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenProcessToken@12
  00023	85 c0		 test	 eax, eax
  00025	75 10		 jne	 SHORT $LN2@RestartCom
$LN6@RestartCom:

; 10159: 	{
; 10160: 		return false; 

  00027	33 c0		 xor	 eax, eax

; 10172: 		SHTDN_REASON_MAJOR_OTHER | SHTDN_REASON_MINOR_OTHER | SHTDN_REASON_FLAG_PLANNED)) 
; 10173: 		return false; 
; 10174: 
; 10175: 	return true;
; 10176: }

  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN2@RestartCom:

; 10161: 	}
; 10162: 
; 10163: 	LookupPrivilegeValue (NULL, SE_SHUTDOWN_NAME, &tokenPrivil.Privileges[0].Luid); 

  00037	8d 45 f0	 lea	 eax, DWORD PTR _tokenPrivil$[ebp+4]
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@POPFGFGJ@SeShutdownPrivilege?$AA@
  00040	6a 00		 push	 0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LookupPrivilegeValueA@12

; 10164: 	tokenPrivil.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED; 
; 10165: 	tokenPrivil.PrivilegeCount = 1;    
; 10166: 
; 10167: 	AdjustTokenPrivileges (hTkn, false, &tokenPrivil, 0, (PTOKEN_PRIVILEGES) NULL, 0); 

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	8d 45 ec	 lea	 eax, DWORD PTR _tokenPrivil$[ebp]
  00051	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _tokenPrivil$[ebp+12], 2
  00058	50		 push	 eax
  00059	6a 00		 push	 0
  0005b	ff 75 e8	 push	 DWORD PTR _hTkn$[ebp]
  0005e	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _tokenPrivil$[ebp], 1
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AdjustTokenPrivileges@24

; 10168: 	if (GetLastError() != ERROR_SUCCESS) 

  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00071	85 c0		 test	 eax, eax
  00073	75 b2		 jne	 SHORT $LN6@RestartCom

; 10169: 		return false; 
; 10170: 
; 10171: 	if (!ExitWindowsEx (EWX_REBOOT,

  00075	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0007a	6a 02		 push	 2
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExitWindowsEx@8

; 10172: 		SHTDN_REASON_MAJOR_OTHER | SHTDN_REASON_MINOR_OTHER | SHTDN_REASON_FLAG_PLANNED)) 
; 10173: 		return false; 
; 10174: 
; 10175: 	return true;
; 10176: }

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	f7 d8		 neg	 eax
  00087	1b c0		 sbb	 eax, eax
  00089	33 cd		 xor	 ecx, ebp
  0008b	f7 d8		 neg	 eax
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_RestartComputer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _EnableWow64FsRedirection
_TEXT	SEGMENT
_enable$ = 8						; size = 4
_EnableWow64FsRedirection PROC				; COMDAT

; 10135: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10136: 	typedef BOOLEAN (__stdcall *Wow64EnableWow64FsRedirection_t) (BOOL enable);
; 10137: 	Wow64EnableWow64FsRedirection_t wow64EnableWow64FsRedirection = (Wow64EnableWow64FsRedirection_t) GetProcAddress (GetModuleHandle ("kernel32"), "Wow64EnableWow64FsRedirection");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LNOCKJOB@Wow64EnableWow64FsRedirection?$AA@
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_08PNLNEKOB@kernel32?$AA@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 10138: 
; 10139:     if (!wow64EnableWow64FsRedirection)

  0001a	85 c0		 test	 eax, eax
  0001c	75 02		 jne	 SHORT $LN2@EnableWow6

; 10143: }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
$LN2@EnableWow6:

; 10140: 		return FALSE;
; 10141: 
; 10142:     return wow64EnableWow64FsRedirection (enable);

  00020	ff 75 08	 push	 DWORD PTR _enable$[ebp]
  00023	ff d0		 call	 eax
  00025	0f b6 c0	 movzx	 eax, al

; 10143: }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_EnableWow64FsRedirection ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsHiddenOSRunning
_TEXT	SEGMENT
$T2 = -1500						; size = 1480
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_IsHiddenOSRunning PROC					; COMDAT

; 10104: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_IsHiddenOSRunning
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d0 05 00
	00		 sub	 esp, 1488		; 000005d0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 10105: 	static BOOL statusCached = FALSE;
; 10106: 	static BOOL hiddenOSRunning;
; 10107: 
; 10108: 	if (!statusCached)

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?statusCached@?1??IsHiddenOSRunning@@9@4HA, 0
  00038	75 40		 jne	 SHORT $LN10@IsHiddenOS

; 10109: 	{
; 10110: 		try
; 10111: 		{
; 10112: 			hiddenOSRunning = BootEncryption (MainDlg).IsHiddenSystemRunning();

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00040	8d 8d 24 fa ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0004d	e8 00 00 00 00	 call	 ??0BootEncryption@GostCrypt@@QAE@PAUHWND__@@@Z ; GostCrypt::BootEncryption::BootEncryption
  00052	8b c8		 mov	 ecx, eax
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00058	e8 00 00 00 00	 call	 ?IsHiddenSystemRunning@BootEncryption@GostCrypt@@QAE_NXZ ; GostCrypt::BootEncryption::IsHiddenSystemRunning
  0005d	0f b6 c0	 movzx	 eax, al
  00060	8d 8d 24 fa ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00066	a3 00 00 00 00	 mov	 DWORD PTR ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA, eax
  0006b	e8 00 00 00 00	 call	 ??1BootEncryption@GostCrypt@@QAE@XZ ; GostCrypt::BootEncryption::~BootEncryption
$LN9@IsHiddenOS:

; 10118: 
; 10119: 		statusCached = TRUE;

  00070	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?statusCached@?1??IsHiddenOSRunning@@9@4HA, 1
$LN10@IsHiddenOS:

; 10120: 	}
; 10121: 
; 10122: 	return hiddenOSRunning;

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA

; 10123: }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
__catch$_IsHiddenOSRunning$0:

; 10113: 		}
; 10114: 		catch (...)
; 10115: 		{
; 10116: 			hiddenOSRunning = FALSE;

  0009b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hiddenOSRunning@?1??IsHiddenOSRunning@@9@4HA, 0

; 10117: 		}

  000a5	b8 00 00 00 00	 mov	 eax, $LN9@IsHiddenOS
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_IsHiddenOSRunning$2:
  00000	8d 8d 24 fa ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@GostCrypt@@QAE@XZ ; GostCrypt::BootEncryption::~BootEncryption
__ehhandler$_IsHiddenOSRunning:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 20 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1504]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_IsHiddenOSRunning
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_IsHiddenOSRunning ENDP
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsServerOS
_TEXT	SEGMENT
_osVer$ = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_IsServerOS PROC					; COMDAT

; 10085: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 10086: 	OSVERSIONINFOEXA osVer;
; 10087: 	osVer.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEXA);
; 10088: 	GetVersionExA ((LPOSVERSIONINFOA) &osVer);

  00013	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _osVer$[ebp]
  00019	c7 85 60 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR _osVer$[ebp], 156 ; 0000009cH
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 10089: 
; 10090: 	return (osVer.wProductType == VER_NT_SERVER || osVer.wProductType == VER_NT_DOMAIN_CONTROLLER);

  0002a	8a 45 fa	 mov	 al, BYTE PTR _osVer$[ebp+154]
  0002d	3c 03		 cmp	 al, 3
  0002f	74 14		 je	 SHORT $LN3@IsServerOS
  00031	3c 02		 cmp	 al, 2
  00033	74 10		 je	 SHORT $LN3@IsServerOS
  00035	33 c0		 xor	 eax, eax

; 10091: }

  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN3@IsServerOS:
  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_IsServerOS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Is64BitOs
_TEXT	SEGMENT
_Is64BitOs PROC						; COMDAT

; 10058:     static BOOL isWow64 = FALSE;
; 10059: 	static BOOL valid = FALSE;
; 10060: 	typedef BOOL (__stdcall *LPFN_ISWOW64PROCESS ) (HANDLE hProcess,PBOOL Wow64Process);
; 10061: 	LPFN_ISWOW64PROCESS fnIsWow64Process;
; 10062: 
; 10063: 	if (valid)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?valid@?1??Is64BitOs@@9@4HA, 0
  00007	74 06		 je	 SHORT $LN2@Is64BitOs

; 10064: 		return isWow64;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?isWow64@?1??Is64BitOs@@9@4HA

; 10073:     return isWow64;
; 10074: }

  0000e	c3		 ret	 0
$LN2@Is64BitOs:
  0000f	56		 push	 esi

; 10065: 
; 10066: 	fnIsWow64Process = (LPFN_ISWOW64PROCESS) GetProcAddress (GetModuleHandle("kernel32"), "IsWow64Process");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LKABJJMO@IsWow64Process?$AA@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_08PNLNEKOB@kernel32?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00027	8b f0		 mov	 esi, eax

; 10067: 
; 10068:     if (fnIsWow64Process != NULL)

  00029	85 f6		 test	 esi, esi
  0002b	74 29		 je	 SHORT $LN6@Is64BitOs

; 10069:         if (!fnIsWow64Process (GetCurrentProcess(), &isWow64))

  0002d	68 00 00 00 00	 push	 OFFSET ?isWow64@?1??Is64BitOs@@9@4HA
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00038	50		 push	 eax
  00039	ff d6		 call	 esi
  0003b	f7 d8		 neg	 eax

; 10070: 			isWow64 = FALSE;
; 10071: 
; 10072: 	valid = TRUE;

  0003d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?valid@?1??Is64BitOs@@9@4HA, 1
  00047	5e		 pop	 esi
  00048	1b c0		 sbb	 eax, eax
  0004a	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?isWow64@?1??Is64BitOs@@9@4HA
  00050	a3 00 00 00 00	 mov	 DWORD PTR ?isWow64@?1??Is64BitOs@@9@4HA, eax

; 10073:     return isWow64;
; 10074: }

  00055	c3		 ret	 0
$LN6@Is64BitOs:

; 10069:         if (!fnIsWow64Process (GetCurrentProcess(), &isWow64))

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?isWow64@?1??Is64BitOs@@9@4HA

; 10070: 			isWow64 = FALSE;
; 10071: 
; 10072: 	valid = TRUE;

  0005b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?valid@?1??Is64BitOs@@9@4HA, 1
  00065	5e		 pop	 esi

; 10073:     return isWow64;
; 10074: }

  00066	c3		 ret	 0
_Is64BitOs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsOSVersionAtLeast
_TEXT	SEGMENT
_reqMinOS$ = 8						; size = 4
_reqMinServicePack$ = 12				; size = 4
_IsOSVersionAtLeast PROC				; COMDAT

; 10023: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10024: 	/* When updating this function, update IsOSAtLeast() in Ntdriver.c too. */
; 10025: 
; 10026: 	if (CurrentOSMajor <= 0)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _CurrentOSMajor, 0
  0000a	7f 07		 jg	 SHORT $LN4@IsOSVersio

; 10027: 		GST_THROW_FATAL_EXCEPTION;

  0000c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN4@IsOSVersio:

; 10028: 
; 10029: 	int major = 0, minor = 0;
; 10030: 
; 10031: 	switch (reqMinOS)

  00013	8b 45 08	 mov	 eax, DWORD PTR _reqMinOS$[ebp]
  00016	33 d2		 xor	 edx, edx
  00018	56		 push	 esi
  00019	83 c0 f9	 add	 eax, -7			; fffffff9H
  0001c	33 f6		 xor	 esi, esi
  0001e	83 f8 06	 cmp	 eax, 6
  00021	77 37		 ja	 SHORT $LN10@IsOSVersio
  00023	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@IsOSVersio[eax*4]
$LN5@IsOSVersio:

; 10032: 	{
; 10033: 	case WIN_2000:			major = 5; minor = 0; break;

  0002a	ba 05 00 00 00	 mov	 edx, 5
  0002f	33 f6		 xor	 esi, esi
  00031	eb 2d		 jmp	 SHORT $LN2@IsOSVersio
$LN6@IsOSVersio:

; 10034: 	case WIN_XP:			major = 5; minor = 1; break;

  00033	ba 05 00 00 00	 mov	 edx, 5
  00038	8d 72 fc	 lea	 esi, DWORD PTR [edx-4]
  0003b	eb 23		 jmp	 SHORT $LN2@IsOSVersio
$LN7@IsOSVersio:

; 10035: 	case WIN_SERVER_2003:	major = 5; minor = 2; break;

  0003d	ba 05 00 00 00	 mov	 edx, 5
  00042	8d 72 fd	 lea	 esi, DWORD PTR [edx-3]
  00045	eb 19		 jmp	 SHORT $LN2@IsOSVersio
$LN8@IsOSVersio:

; 10036: 	case WIN_VISTA:			major = 6; minor = 0; break;

  00047	ba 06 00 00 00	 mov	 edx, 6
  0004c	33 f6		 xor	 esi, esi
  0004e	eb 10		 jmp	 SHORT $LN2@IsOSVersio
$LN9@IsOSVersio:

; 10037: 	case WIN_7:				major = 6; minor = 1; break;

  00050	ba 06 00 00 00	 mov	 edx, 6
  00055	8d 72 fb	 lea	 esi, DWORD PTR [edx-5]
  00058	eb 06		 jmp	 SHORT $LN2@IsOSVersio
$LN10@IsOSVersio:

; 10038: 
; 10039: 	default:
; 10040: 		GST_THROW_FATAL_EXCEPTION;

  0005a	88 15 00 00 00
	00		 mov	 BYTE PTR ds:0, dl
$LN2@IsOSVersio:

; 10041: 		break;
; 10042: 	}
; 10043: 
; 10044: 	return ((CurrentOSMajor << 16 | CurrentOSMinor << 8 | CurrentOSServicePack)

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
  00066	33 c0		 xor	 eax, eax
  00068	c1 e1 08	 shl	 ecx, 8
  0006b	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSMinor
  00071	c1 e2 08	 shl	 edx, 8
  00074	0b d6		 or	 edx, esi
  00076	c1 e1 08	 shl	 ecx, 8
  00079	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSServicePack
  0007f	c1 e2 08	 shl	 edx, 8
  00082	0b 55 0c	 or	 edx, DWORD PTR _reqMinServicePack$[ebp]
  00085	3b ca		 cmp	 ecx, edx
  00087	5e		 pop	 esi
  00088	0f 9d c0	 setge	 al

; 10045: 		>= (major << 16 | minor << 8 | reqMinServicePack));
; 10046: }

  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
  0008d	0f 1f 00	 npad	 3
$LN13@IsOSVersio:
  00090	00 00 00 00	 DD	 $LN5@IsOSVersio
  00094	00 00 00 00	 DD	 $LN6@IsOSVersio
  00098	00 00 00 00	 DD	 $LN10@IsOSVersio
  0009c	00 00 00 00	 DD	 $LN7@IsOSVersio
  000a0	00 00 00 00	 DD	 $LN8@IsOSVersio
  000a4	00 00 00 00	 DD	 $LN10@IsOSVersio
  000a8	00 00 00 00	 DD	 $LN9@IsOSVersio
_IsOSVersionAtLeast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsOSAtLeast
_TEXT	SEGMENT
_reqMinOS$ = 8						; size = 4
_IsOSAtLeast PROC					; COMDAT

; 10004: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10005: 	return IsOSVersionAtLeast (reqMinOS, 0);

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _reqMinOS$[ebp]
  00008	e8 00 00 00 00	 call	 _IsOSVersionAtLeast
  0000d	83 c4 08	 add	 esp, 8

; 10006: }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_IsOSAtLeast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DebugMsgBox
_TEXT	SEGMENT
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_format$ = 8						; size = 4
_DebugMsgBox PROC					; COMDAT

; 9983 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 9984 : 	char buf[1024];
; 9985 : 	va_list val;
; 9986 : 
; 9987 : 	va_start(val, format);
; 9988 : 	_vsnprintf (buf, sizeof (buf), format, val);

  00013	8d 45 0c	 lea	 eax, DWORD PTR _format$[ebp+4]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	ff 75 08	 push	 DWORD PTR _format$[ebp]
  0001c	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00022	68 00 04 00 00	 push	 1024			; 00000400H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	ff 70 04	 push	 DWORD PTR [eax+4]
  00032	83 c9 01	 or	 ecx, 1
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  0003b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 9989 : 	va_end(val);
; 9990 : 
; 9991 : 	MessageBox (MainDlg, buf, "GostCrypt debug", 0);

  0003e	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00044	6a 00		 push	 0
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ONMDCELG@GostCrypt?5debug?$AA@
  0004b	50		 push	 eax
  0004c	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 9992 : }

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_DebugMsgBox ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Debug
_TEXT	SEGMENT
_buf$ = -1028						; size = 1024
__$ArrayPad$ = -4					; size = 4
_format$ = 8						; size = 4
_Debug	PROC						; COMDAT

; 9962 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 9963 : 	char buf[1024];
; 9964 : 	va_list val;
; 9965 : 
; 9966 : 	va_start(val, format);
; 9967 : 	_vsnprintf (buf, sizeof (buf), format, val);

  00013	8d 45 0c	 lea	 eax, DWORD PTR _format$[ebp+4]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	ff 75 08	 push	 DWORD PTR _format$[ebp]
  0001c	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00022	68 00 04 00 00	 push	 1024			; 00000400H
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	ff 70 04	 push	 DWORD PTR [eax+4]
  00032	83 c9 01	 or	 ecx, 1
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  0003b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 9968 : 	va_end(val);
; 9969 : 
; 9970 : 	OutputDebugString (buf);

  0003e	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 9971 : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	33 cd		 xor	 ecx, ebp
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_Debug	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ConfigReadString
_TEXT	SEGMENT
_configKey$ = 8						; size = 4
_defaultValue$ = 12					; size = 4
_str$ = 16						; size = 4
_maxLen$ = 20						; size = 4
_ConfigReadString PROC					; COMDAT

; 9835 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9836 : 	if (ConfigRead (configKey, str, maxLen))

  00003	ff 75 14	 push	 DWORD PTR _maxLen$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _configKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ConfigRead@@YAHPAD0H@Z	; ConfigRead
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _defaultValue$[ebp]
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	0f 45 4d 10	 cmovne	 ecx, DWORD PTR _str$[ebp]
  0001d	8b c1		 mov	 eax, ecx

; 9837 : 		return str;
; 9838 : 	else
; 9839 : 		return defaultValue;
; 9840 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_ConfigReadString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ConfigReadInt
_TEXT	SEGMENT
_s$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_configKey$ = 8						; size = 4
_defaultValue$ = 12					; size = 4
_ConfigReadInt PROC					; COMDAT

; 9813 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _configKey$[ebp]

; 9814 : 	char s[32];
; 9815 : 
; 9816 : 	if (ConfigRead (configKey, s, sizeof (s)))

  00013	8d 4d dc	 lea	 ecx, DWORD PTR _s$[ebp]
  00016	6a 20		 push	 32			; 00000020H
  00018	51		 push	 ecx
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?ConfigRead@@YAHPAD0H@Z	; ConfigRead
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00022	85 c0		 test	 eax, eax
  00024	74 1a		 je	 SHORT $LN2@ConfigRead

; 9817 : 		return atoi (s);

  00026	8d 45 dc	 lea	 eax, DWORD PTR _s$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _atoi
  0002f	83 c4 04	 add	 esp, 4

; 9818 : 	else
; 9819 : 		return defaultValue;
; 9820 : }

  00032	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00035	33 cd		 xor	 ecx, ebp
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN2@ConfigRead:
  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	8b 45 0c	 mov	 eax, DWORD PTR _defaultValue$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_ConfigReadInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ConfigWriteInt
_TEXT	SEGMENT
_val$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_configKey$ = 8						; size = 4
_configValue$ = 12					; size = 4
_ConfigWriteInt PROC					; COMDAT

; 9763 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 9764 : 	char val[32];
; 9765 : 	sprintf (val, "%d", configValue);

  00011	ff 75 0c	 push	 DWORD PTR _configValue$[ebp]
  00014	8b 75 08	 mov	 esi, DWORD PTR _configKey$[ebp]
  00017	8d 45 dc	 lea	 eax, DWORD PTR _val$[ebp]
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _sprintf
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9766 : 	return ConfigWriteString (configKey, val);

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A, 0
  0002f	75 11		 jne	 SHORT $LN4@ConfigWrit
  00031	33 c0		 xor	 eax, eax
  00033	5e		 pop	 esi

; 9767 : }

  00034	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00037	33 cd		 xor	 ecx, ebp
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0

; 9766 : 	return ConfigWriteString (configKey, val);

$LN4@ConfigWrit:
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00047	85 c0		 test	 eax, eax
  00049	74 1c		 je	 SHORT $LN8@ConfigWrit
  0004b	56		 push	 esi
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _XmlFindElementByAttributeValue
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	85 c0		 test	 eax, eax
  00061	74 04		 je	 SHORT $LN8@ConfigWrit
  00063	c6 40 01 21	 mov	 BYTE PTR [eax+1], 33	; 00000021H
$LN8@ConfigWrit:
  00067	8d 45 dc	 lea	 eax, DWORD PTR _val$[ebp]
  0006a	50		 push	 eax
  0006b	56		 push	 esi
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
  00071	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  00077	e8 00 00 00 00	 call	 _fprintf

; 9767 : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	f7 d8		 neg	 eax
  00084	1b c0		 sbb	 eax, eax
  00086	33 cd		 xor	 ecx, ebp
  00088	f7 d8		 neg	 eax
  0008a	5e		 pop	 esi
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_ConfigWriteInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ConfigWriteString
_TEXT	SEGMENT
_configKey$ = 8						; size = 4
_configValue$ = 12					; size = 4
_ConfigWriteString PROC					; COMDAT

; 9734 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9735 : 	char *c;
; 9736 : 	if (ConfigFileHandle == NULL)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A, 0
  0000a	75 04		 jne	 SHORT $LN2@ConfigWrit

; 9737 : 		return FALSE;

  0000c	33 c0		 xor	 eax, eax

; 9748 : 		ConfigFileHandle, "\n\t\t<config key=\"%s\">%s</config>",
; 9749 : 		configKey, configValue);
; 9750 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@ConfigWrit:

; 9738 : 
; 9739 : 	// Mark previous config value as updated
; 9740 : 	if (ConfigBuffer != NULL)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00015	85 c0		 test	 eax, eax
  00017	74 1e		 je	 SHORT $LN6@ConfigWrit

; 9741 : 	{
; 9742 : 		c = XmlFindElementByAttributeValue (ConfigBuffer, "config", "key", configKey);

  00019	ff 75 08	 push	 DWORD PTR _configKey$[ebp]
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _XmlFindElementByAttributeValue
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 9743 : 		if (c != NULL)

  0002f	85 c0		 test	 eax, eax
  00031	74 04		 je	 SHORT $LN6@ConfigWrit

; 9744 : 			c[1] = '!';

  00033	c6 40 01 21	 mov	 BYTE PTR [eax+1], 33	; 00000021H
$LN6@ConfigWrit:

; 9745 : 	}
; 9746 : 
; 9747 : 	return 0 != fprintf (

  00037	ff 75 0c	 push	 DWORD PTR _configValue$[ebp]
  0003a	ff 75 08	 push	 DWORD PTR _configKey$[ebp]
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
  00042	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  00048	e8 00 00 00 00	 call	 _fprintf
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	f7 d8		 neg	 eax
  00052	1b c0		 sbb	 eax, eax
  00054	f7 d8		 neg	 eax

; 9748 : 		ConfigFileHandle, "\n\t\t<config key=\"%s\">%s</config>",
; 9749 : 		configKey, configValue);
; 9750 : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_ConfigWriteString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ConfigWriteEnd
_TEXT	SEGMENT
_size$1 = -2184						; size = 4
_value$ = -2180						; size = 2048
_key$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_ConfigWriteEnd PROC					; COMDAT

; 9687 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 08 00
	00		 sub	 esp, 2184		; 00000888H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 9688 : 	char *xml = ConfigBuffer;
; 9689 : 	char key[128], value[2048];
; 9690 : 
; 9691 : 	if (ConfigFileHandle == NULL) return FALSE;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  00018	56		 push	 esi
  00019	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _ConfigBuffer
  0001f	85 c0		 test	 eax, eax
  00021	75 0f		 jne	 SHORT $LN10@ConfigWrit
  00023	5e		 pop	 esi

; 9718 : 	}
; 9719 : 
; 9720 : 	return TRUE;
; 9721 : }

  00024	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00027	33 cd		 xor	 ecx, ebp
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN10@ConfigWrit:

; 9692 : 
; 9693 : 	// Write unmodified values
; 9694 : 	while (xml && (xml = XmlFindElement (xml, "config")))

  00032	85 f6		 test	 esi, esi
  00034	74 72		 je	 SHORT $LN3@ConfigWrit
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@ConfigWrit:
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _XmlFindElement
  0004b	8b f0		 mov	 esi, eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 f6		 test	 esi, esi
  00052	74 4f		 je	 SHORT $LN14@ConfigWrit

; 9695 : 	{
; 9696 : 		XmlGetAttributeText (xml, "key", key, sizeof (key));

  00054	68 80 00 00 00	 push	 128			; 00000080H
  00059	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _key$[ebp]
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 9697 : 		XmlGetNodeText (xml, value, sizeof (value));

  0006b	68 00 08 00 00	 push	 2048			; 00000800H
  00070	8d 85 7c f7 ff
	ff		 lea	 eax, DWORD PTR _value$[ebp]
  00076	50		 push	 eax
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 _XmlGetNodeText

; 9698 : 
; 9699 : 		fprintf (ConfigFileHandle, "\n\t\t<config key=\"%s\">%s</config>", key, value);

  0007d	8d 85 7c f7 ff
	ff		 lea	 eax, DWORD PTR _value$[ebp]
  00083	50		 push	 eax
  00084	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _key$[ebp]
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EGANCHGG@?6?7?7?$DMconfig?5key?$DN?$CC?$CFs?$CC?$DO?$CFs?$DM?1config?$DO?$AA@
  00090	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  00096	e8 00 00 00 00	 call	 _fprintf
  0009b	83 c4 2c	 add	 esp, 44			; 0000002cH

; 9700 : 		xml++;

  0009e	83 c6 01	 add	 esi, 1
  000a1	75 9d		 jne	 SHORT $LL2@ConfigWrit
$LN14@ConfigWrit:

; 9692 : 
; 9693 : 	// Write unmodified values
; 9694 : 	while (xml && (xml = XmlFindElement (xml, "config")))

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
$LN3@ConfigWrit:
  000a8	57		 push	 edi

; 9701 : 	}
; 9702 : 
; 9703 : 	fputs ("\n\t</configuration>", ConfigFileHandle);

  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CKNEEBKA@?6?7?$DM?1configuration?$DO?$AA@
  000af	e8 00 00 00 00	 call	 _fputs

; 9704 : 	XmlWriteFooter (ConfigFileHandle);

  000b4	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  000ba	e8 00 00 00 00	 call	 _XmlWriteFooter

; 9705 : 
; 9706 : 	GSTFlushFile (ConfigFileHandle);

  000bf	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  000c5	56		 push	 esi
  000c6	e8 00 00 00 00	 call	 __fileno
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 __get_osfhandle
  000d1	56		 push	 esi
  000d2	8b f8		 mov	 edi, eax
  000d4	e8 00 00 00 00	 call	 _fflush
  000d9	83 c4 18	 add	 esp, 24			; 00000018H
  000dc	83 ff ff	 cmp	 edi, -1
  000df	74 07		 je	 SHORT $LN7@ConfigWrit
  000e1	57		 push	 edi
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushFileBuffers@4
$LN7@ConfigWrit:

; 9707 : 
; 9708 : 	CheckFileStreamWriteErrors (ConfigFileHandle, GST_APPD_FILENAME_CONFIGURATION);

  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  000ed	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  000f3	e8 00 00 00 00	 call	 _CheckFileStreamWriteErrors

; 9709 : 
; 9710 : 	fclose (ConfigFileHandle);

  000f8	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  000fe	e8 00 00 00 00	 call	 _fclose

; 9711 : 	ConfigFileHandle = NULL;
; 9712 : 
; 9713 : 	if (ConfigBuffer != NULL)

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00108	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A, 0
  00115	5f		 pop	 edi
  00116	85 c0		 test	 eax, eax
  00118	74 2b		 je	 SHORT $LN5@ConfigWrit

; 9714 : 	{
; 9715 : 		DWORD size;
; 9716 : 		free (ConfigBuffer);

  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _free
  00120	83 c4 04	 add	 esp, 4

; 9717 : 		ConfigBuffer = LoadFile (GetConfigPath (GST_APPD_FILENAME_CONFIGURATION), &size);

  00123	8d 85 78 f7 ff
	ff		 lea	 eax, DWORD PTR _size$1[ebp]
  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  0012f	e8 00 00 00 00	 call	 _GetConfigPath
  00134	83 c4 04	 add	 esp, 4
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _LoadFile
  0013d	83 c4 08	 add	 esp, 8
  00140	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax
$LN5@ConfigWrit:

; 9718 : 	}
; 9719 : 
; 9720 : 	return TRUE;
; 9721 : }

  00145	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	b8 01 00 00 00	 mov	 eax, 1
  0014d	33 cd		 xor	 ecx, ebp
  0014f	5e		 pop	 esi
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c3		 ret	 0
_ConfigWriteEnd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ConfigWriteBegin
_TEXT	SEGMENT
_size$ = -4						; size = 4
_ConfigWriteBegin PROC					; COMDAT

; 9657 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 9658 : 	DWORD size;
; 9659 : 	if (ConfigFileHandle != NULL) 

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A, 0
  0000b	75 64		 jne	 SHORT $LN6@ConfigWrit

; 9660 : 		return FALSE;
; 9661 : 
; 9662 : 	if (ConfigBuffer == NULL)

  0000d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _ConfigBuffer, 0
  00014	75 1f		 jne	 SHORT $LN3@ConfigWrit

; 9663 : 		ConfigBuffer = LoadFile (GetConfigPath (GST_APPD_FILENAME_CONFIGURATION), &size);

  00016	8d 45 fc	 lea	 eax, DWORD PTR _size$[ebp]
  00019	50		 push	 eax
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  0001f	e8 00 00 00 00	 call	 _GetConfigPath
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _LoadFile
  0002d	83 c4 08	 add	 esp, 8
  00030	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax
$LN3@ConfigWrit:

; 9664 : 
; 9665 : 	ConfigFileHandle = fopen (GetConfigPath (GST_APPD_FILENAME_CONFIGURATION), "w");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  0003f	e8 00 00 00 00	 call	 _GetConfigPath
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _fopen
  0004d	83 c4 08	 add	 esp, 8
  00050	a3 00 00 00 00	 mov	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A, eax

; 9666 : 	if (ConfigFileHandle == NULL)

  00055	85 c0		 test	 eax, eax
  00057	75 1e		 jne	 SHORT $LN4@ConfigWrit

; 9667 : 	{
; 9668 : 		free (ConfigBuffer);

  00059	ff 35 00 00 00
	00		 push	 DWORD PTR _ConfigBuffer
  0005f	e8 00 00 00 00	 call	 _free
  00064	83 c4 04	 add	 esp, 4

; 9669 : 		ConfigBuffer = NULL;

  00067	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, 0
$LN6@ConfigWrit:

; 9670 : 		return FALSE;

  00071	33 c0		 xor	 eax, eax

; 9676 : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN4@ConfigWrit:

; 9671 : 	}
; 9672 : 	XmlWriteHeader (ConfigFileHandle);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _XmlWriteHeader

; 9673 : 	fputs ("\n\t<configuration>", ConfigFileHandle);

  0007d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ConfigFileHandle@@3PAU_iobuf@@A
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@COHEMPD@?6?7?$DMconfiguration?$DO?$AA@
  00088	e8 00 00 00 00	 call	 _fputs
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 9674 : 
; 9675 : 	return TRUE;

  00090	b8 01 00 00 00	 mov	 eax, 1

; 9676 : }

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_ConfigWriteBegin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskMultiChoice
_TEXT	SEGMENT
_params$ = -8						; size = 8
_strings$ = 8						; size = 4
_bBold$ = 12						; size = 4
_AskMultiChoice PROC					; COMDAT

; 9637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 9638 : 	MULTI_CHOICE_DLGPROC_PARAMS params;
; 9639 : 
; 9640 : 	params.strings = &strings[0];

  00006	8b 45 08	 mov	 eax, DWORD PTR _strings$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _params$[ebp], eax

; 9641 : 	params.bold = bBold;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _bBold$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR _params$[ebp+4], eax

; 9642 : 
; 9643 : 	return DialogBoxParamW (hInst, 

  00012	8d 45 f8	 lea	 eax, DWORD PTR _params$[ebp]
  00015	50		 push	 eax
  00016	68 00 00 00 00	 push	 OFFSET _MultiChoiceDialogProc@16
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00021	68 97 13 00 00	 push	 5015			; 00001397H
  00026	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 9644 : 		MAKEINTRESOURCEW (IDD_MULTI_CHOICE_DLG), MainDlg,
; 9645 : 		(DLGPROC) MultiChoiceDialogProc, (LPARAM) &params);
; 9646 : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_AskMultiChoice ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskErrNoYes
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskErrNoYes PROC					; COMDAT

; 9614 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9615 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskErrNoYe
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9617 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskErrNoYe:

; 9616 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONERROR | MB_YESNO | MB_DEFBUTTON2);

  00013	68 14 01 00 00	 push	 276			; 00000114H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9617 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskErrNoYes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskErrYesNo
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskErrYesNo PROC					; COMDAT

; 9599 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9600 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskErrYesN
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9602 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskErrYesN:

; 9601 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONERROR | MB_YESNO | MB_DEFBUTTON1);

  00013	6a 14		 push	 20			; 00000014H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9602 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_AskErrYesNo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnCancelOk
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskWarnCancelOk PROC					; COMDAT

; 9584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9585 : 	if (Silent) return IDCANCEL;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnCan
  0000c	b8 02 00 00 00	 mov	 eax, 2

; 9587 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnCan:

; 9586 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_OKCANCEL | MB_DEFBUTTON2);

  00013	68 31 01 00 00	 push	 305			; 00000131H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9587 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskWarnCancelOk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnOkCancel
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskWarnOkCancel PROC					; COMDAT

; 9569 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9570 : 	if (Silent) return IDCANCEL;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnOkC
  0000c	b8 02 00 00 00	 mov	 eax, 2

; 9572 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnOkC:

; 9571 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_OKCANCEL | MB_DEFBUTTON1);

  00013	6a 31		 push	 49			; 00000031H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9572 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_AskWarnOkCancel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnNoYesTopmost
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskWarnNoYesTopmost PROC				; COMDAT

; 9554 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9555 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnNoY
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9557 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnNoY:

; 9556 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON2 | MB_SETFOREGROUND | MB_TOPMOST);

  00013	68 34 01 05 00	 push	 327988			; 00050134H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9557 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskWarnNoYesTopmost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnNoYesString
_TEXT	SEGMENT
_string$ = 8						; size = 4
_AskWarnNoYesString PROC				; COMDAT

; 9539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9540 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnNoY
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9542 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnNoY:

; 9541 : 	return MessageBoxW (MainDlg, string, lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON2);

  00013	68 34 01 00 00	 push	 308			; 00000134H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _string$[ebp]
  00021	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9542 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_AskWarnNoYesString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnNoYes
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskWarnNoYes PROC					; COMDAT

; 9524 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9525 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnNoY
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9527 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnNoY:

; 9526 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON2);

  00013	68 34 01 00 00	 push	 308			; 00000134H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9527 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskWarnNoYes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnYesNoStringTopmost
_TEXT	SEGMENT
_string$ = 8						; size = 4
_AskWarnYesNoStringTopmost PROC				; COMDAT

; 9509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9510 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnYes
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9512 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnYes:

; 9511 : 	return MessageBoxW (MainDlg, string, lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON1 | MB_SETFOREGROUND | MB_TOPMOST);

  00013	68 34 00 05 00	 push	 327732			; 00050034H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _string$[ebp]
  00021	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9512 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_AskWarnYesNoStringTopmost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnYesNoTopmost
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskWarnYesNoTopmost PROC				; COMDAT

; 9494 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9495 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnYes
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9497 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnYes:

; 9496 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON1 | MB_SETFOREGROUND | MB_TOPMOST);

  00013	68 34 00 05 00	 push	 327732			; 00050034H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9497 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskWarnYesNoTopmost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnYesNoString
_TEXT	SEGMENT
_string$ = 8						; size = 4
_AskWarnYesNoString PROC				; COMDAT

; 9479 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9480 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnYes
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9482 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnYes:

; 9481 : 	return MessageBoxW (MainDlg, string, lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON1);

  00013	6a 34		 push	 52			; 00000034H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _string$[ebp]
  0001e	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9482 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_AskWarnYesNoString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskWarnYesNo
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskWarnYesNo PROC					; COMDAT

; 9464 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9465 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskWarnYes
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9467 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskWarnYes:

; 9466 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_YESNO | MB_DEFBUTTON1);

  00013	6a 34		 push	 52			; 00000034H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9467 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_AskWarnYesNo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskOkCancel
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskOkCancel PROC					; COMDAT

; 9449 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9450 : 	if (Silent) return IDCANCEL;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskOkCance
  0000c	b8 02 00 00 00	 mov	 eax, 2

; 9452 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskOkCance:

; 9451 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONQUESTION | MB_OKCANCEL | MB_DEFBUTTON1);

  00013	6a 21		 push	 33			; 00000021H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9452 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_AskOkCancel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskNoYes
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskNoYes PROC						; COMDAT

; 9434 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9435 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskNoYes
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9437 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskNoYes:

; 9436 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON2);

  00013	68 24 01 00 00	 push	 292			; 00000124H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9437 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskNoYes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskYesNoTopmost
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskYesNoTopmost PROC					; COMDAT

; 9419 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9420 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskYesNoTo
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9422 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskYesNoTo:

; 9421 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON1 | MB_SETFOREGROUND | MB_TOPMOST);

  00013	68 24 00 05 00	 push	 327716			; 00050024H
  00018	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001e	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00021	e8 00 00 00 00	 call	 _GetString
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9422 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_AskYesNoTopmost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskYesNoString
_TEXT	SEGMENT
_str$ = 8						; size = 4
_AskYesNoString PROC					; COMDAT

; 9404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9405 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskYesNoSt
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9407 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskYesNoSt:

; 9406 : 	return MessageBoxW (MainDlg, str, lpszTitle, MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON1);

  00013	6a 24		 push	 36			; 00000024H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _str$[ebp]
  0001e	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9407 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_AskYesNoString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AskYesNo
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AskYesNo PROC						; COMDAT

; 9389 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9390 : 	if (Silent) return IDNO;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 07		 je	 SHORT $LN2@AskYesNo
  0000c	b8 07 00 00 00	 mov	 eax, 7

; 9392 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@AskYesNo:

; 9391 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONQUESTION | MB_YESNO | MB_DEFBUTTON1);

  00013	6a 24		 push	 36			; 00000024H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9392 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_AskYesNo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ErrorTopMost
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_ErrorTopMost PROC					; COMDAT

; 9359 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9360 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@ErrorTopMo
  0000c	33 c0		 xor	 eax, eax

; 9362 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@ErrorTopMo:

; 9361 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONERROR | MB_SETFOREGROUND | MB_TOPMOST);

  00010	68 10 00 05 00	 push	 327696			; 00050010H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9362 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_ErrorTopMost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ErrorDirect
_TEXT	SEGMENT
_errMsg$ = 8						; size = 4
_ErrorDirect PROC					; COMDAT

; 9374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9375 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@ErrorDirec
  0000c	33 c0		 xor	 eax, eax

; 9377 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@ErrorDirec:

; 9376 : 	return MessageBoxW (MainDlg, errMsg, lpszTitle, MB_ICONERROR);

  00010	6a 10		 push	 16			; 00000010H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00018	ff 75 08	 push	 DWORD PTR _errMsg$[ebp]
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9377 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_ErrorDirect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Error
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_Error	PROC						; COMDAT

; 9344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9345 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@Error
  0000c	33 c0		 xor	 eax, eax

; 9347 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@Error:

; 9346 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONERROR);

  00010	6a 10		 push	 16			; 00000010H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00018	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001b	e8 00 00 00 00	 call	 _GetString
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9347 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_Error	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _WarningDirect
_TEXT	SEGMENT
_warnMsg$ = 8						; size = 4
_WarningDirect PROC					; COMDAT

; 9329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9330 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@WarningDir
  0000c	33 c0		 xor	 eax, eax

; 9332 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@WarningDir:

; 9331 : 	return MessageBoxW (MainDlg, warnMsg, lpszTitle, MB_ICONWARNING);

  00010	6a 30		 push	 48			; 00000030H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00018	ff 75 08	 push	 DWORD PTR _warnMsg$[ebp]
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9332 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_WarningDirect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _WarningTopMost
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_WarningTopMost PROC					; COMDAT

; 9314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9315 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@WarningTop
  0000c	33 c0		 xor	 eax, eax

; 9317 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@WarningTop:

; 9316 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);

  00010	68 30 00 05 00	 push	 327728			; 00050030H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9317 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_WarningTopMost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Warning
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_Warning PROC						; COMDAT

; 9299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9300 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@Warning
  0000c	33 c0		 xor	 eax, eax

; 9302 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@Warning:

; 9301 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONWARNING);

  00010	6a 30		 push	 48			; 00000030H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00018	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001b	e8 00 00 00 00	 call	 _GetString
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9302 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_Warning ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InfoDirect
_TEXT	SEGMENT
_msg$ = 8						; size = 4
_InfoDirect PROC					; COMDAT

; 9284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9285 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@InfoDirect
  0000c	33 c0		 xor	 eax, eax

; 9287 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@InfoDirect:

; 9286 : 	return MessageBoxW (MainDlg, msg, lpszTitle, MB_ICONINFORMATION);

  00010	6a 40		 push	 64			; 00000040H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00018	ff 75 08	 push	 DWORD PTR _msg$[ebp]
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9287 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_InfoDirect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InfoTopMost
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_InfoTopMost PROC					; COMDAT

; 9269 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9270 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@InfoTopMos
  0000c	33 c0		 xor	 eax, eax

; 9272 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@InfoTopMos:

; 9271 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONINFORMATION | MB_SETFOREGROUND | MB_TOPMOST);

  00010	68 40 00 05 00	 push	 327744			; 00050040H
  00015	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001b	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001e	e8 00 00 00 00	 call	 _GetString
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9272 : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_InfoTopMost ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _Info
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_Info	PROC						; COMDAT

; 9254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9255 : 	if (Silent) return 0;

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	74 04		 je	 SHORT $LN2@Info
  0000c	33 c0		 xor	 eax, eax

; 9257 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@Info:

; 9256 : 	return MessageBoxW (MainDlg, GetString (stringId), lpszTitle, MB_ICONINFORMATION);

  00010	6a 40		 push	 64			; 00000040H
  00012	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00018	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  0001b	e8 00 00 00 00	 call	 _GetString
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 9257 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
_Info	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _WarningBalloonDirect
_TEXT	SEGMENT
_headingString$ = 8					; size = 4
_textString$ = 12					; size = 4
_WarningBalloonDirect PROC				; COMDAT

; 9234 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9235 : 	if (Silent) 

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	75 2c		 jne	 SHORT $LN1@WarningBal

; 9236 : 		return;
; 9237 : 
; 9238 : 	TaskBarIconDisplayBalloonTooltip (MainDlg,

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _textString$[ebp]
  0000f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00014	85 c0		 test	 eax, eax
  00016	6a 01		 push	 1
  00018	0f 45 c8	 cmovne	 ecx, eax
  0001b	8b 45 08	 mov	 eax, DWORD PTR _headingString$[ebp]
  0001e	51		 push	 ecx
  0001f	85 c0		 test	 eax, eax
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@
  00026	0f 45 c8	 cmovne	 ecx, eax
  00029	51		 push	 ecx
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	e8 00 00 00 00	 call	 _TaskBarIconDisplayBalloonTooltip
  00035	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@WarningBal:

; 9239 : 		headingString == NULL ? L"GostCrypt" : headingString, 
; 9240 : 		textString == NULL ? L" " : textString, 
; 9241 : 		TRUE);
; 9242 : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_WarningBalloonDirect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _WarningBalloon
_TEXT	SEGMENT
_headingStringId$ = 8					; size = 4
_textStringId$ = 12					; size = 4
_WarningBalloon PROC					; COMDAT

; 9212 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9213 : 	if (Silent) 

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	75 44		 jne	 SHORT $LN1@WarningBal

; 9214 : 		return;
; 9215 : 
; 9216 : 	TaskBarIconDisplayBalloonTooltip (MainDlg,

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _textStringId$[ebp]
  0000f	56		 push	 esi
  00010	85 c0		 test	 eax, eax
  00012	75 07		 jne	 SHORT $LN4@WarningBal
  00014	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00019	eb 0b		 jmp	 SHORT $LN5@WarningBal
$LN4@WarningBal:
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _GetString
  00021	83 c4 04	 add	 esp, 4
  00024	8b f0		 mov	 esi, eax
$LN5@WarningBal:
  00026	8b 45 08	 mov	 eax, DWORD PTR _headingStringId$[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	75 07		 jne	 SHORT $LN6@WarningBal
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@
  00032	eb 09		 jmp	 SHORT $LN7@WarningBal
$LN6@WarningBal:
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _GetString
  0003a	83 c4 04	 add	 esp, 4
$LN7@WarningBal:
  0003d	6a 01		 push	 1
  0003f	56		 push	 esi
  00040	50		 push	 eax
  00041	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00047	e8 00 00 00 00	 call	 _TaskBarIconDisplayBalloonTooltip
  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	5e		 pop	 esi
$LN1@WarningBal:

; 9217 : 		headingStringId == NULL ? L"GostCrypt" : GetString (headingStringId), 
; 9218 : 		textStringId == NULL ? L" " : GetString (textStringId), 
; 9219 : 		TRUE);
; 9220 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_WarningBalloon ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InfoBalloonDirect
_TEXT	SEGMENT
_headingString$ = 8					; size = 4
_textString$ = 12					; size = 4
_InfoBalloonDirect PROC					; COMDAT

; 9190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9191 : 	if (Silent) 

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	75 2c		 jne	 SHORT $LN1@InfoBalloo

; 9192 : 		return;
; 9193 : 
; 9194 : 	TaskBarIconDisplayBalloonTooltip (MainDlg,

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _textString$[ebp]
  0000f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00014	85 c0		 test	 eax, eax
  00016	6a 00		 push	 0
  00018	0f 45 c8	 cmovne	 ecx, eax
  0001b	8b 45 08	 mov	 eax, DWORD PTR _headingString$[ebp]
  0001e	51		 push	 ecx
  0001f	85 c0		 test	 eax, eax
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@
  00026	0f 45 c8	 cmovne	 ecx, eax
  00029	51		 push	 ecx
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00030	e8 00 00 00 00	 call	 _TaskBarIconDisplayBalloonTooltip
  00035	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@InfoBalloo:

; 9195 : 		headingString == NULL ? L"GostCrypt" : headingString, 
; 9196 : 		textString == NULL ? L" " : textString, 
; 9197 : 		FALSE);
; 9198 : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_InfoBalloonDirect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InfoBalloon
_TEXT	SEGMENT
_headingStringId$ = 8					; size = 4
_textStringId$ = 12					; size = 4
_InfoBalloon PROC					; COMDAT

; 9168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9169 : 	if (Silent) 

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0000a	75 44		 jne	 SHORT $LN1@InfoBalloo

; 9170 : 		return;
; 9171 : 
; 9172 : 	TaskBarIconDisplayBalloonTooltip (MainDlg,

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _textStringId$[ebp]
  0000f	56		 push	 esi
  00010	85 c0		 test	 eax, eax
  00012	75 07		 jne	 SHORT $LN4@InfoBalloo
  00014	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@
  00019	eb 0b		 jmp	 SHORT $LN5@InfoBalloo
$LN4@InfoBalloo:
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _GetString
  00021	83 c4 04	 add	 esp, 4
  00024	8b f0		 mov	 esi, eax
$LN5@InfoBalloo:
  00026	8b 45 08	 mov	 eax, DWORD PTR _headingStringId$[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	75 07		 jne	 SHORT $LN6@InfoBalloo
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BE@NJGOLFGO@?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AA?$AA@
  00032	eb 09		 jmp	 SHORT $LN7@InfoBalloo
$LN6@InfoBalloo:
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _GetString
  0003a	83 c4 04	 add	 esp, 4
$LN7@InfoBalloo:
  0003d	6a 00		 push	 0
  0003f	56		 push	 esi
  00040	50		 push	 eax
  00041	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00047	e8 00 00 00 00	 call	 _TaskBarIconDisplayBalloonTooltip
  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	5e		 pop	 esi
$LN1@InfoBalloo:

; 9173 : 		headingStringId == NULL ? L"GostCrypt" : GetString (headingStringId), 
; 9174 : 		textStringId == NULL ? L" " : GetString (textStringId), 
; 9175 : 		FALSE);
; 9176 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_InfoBalloon ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _TaskBarIconDisplayBalloonTooltip
_TEXT	SEGMENT
_tnid$ = -956						; size = 952
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_headline$ = 12						; size = 4
_text$ = 16						; size = 4
_warning$ = 20						; size = 4
_TaskBarIconDisplayBalloonTooltip PROC			; COMDAT

; 9126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 03 00
	00		 sub	 esp, 956		; 000003bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 9127 : 	if (nCurrentOS == WIN_2000)

  00013	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  0001a	53		 push	 ebx
  0001b	8b 5d 08	 mov	 ebx, DWORD PTR _hwnd$[ebp]
  0001e	56		 push	 esi
  0001f	8b 75 0c	 mov	 esi, DWORD PTR _headline$[ebp]
  00022	57		 push	 edi
  00023	8b 7d 10	 mov	 edi, DWORD PTR _text$[ebp]
  00026	75 31		 jne	 SHORT $LN2@TaskBarIco

; 9128 : 	{
; 9129 : 		MessageBoxW (MainDlg, text, headline, warning ? MB_ICONWARNING : MB_ICONINFORMATION);

  00028	83 7d 14 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002c	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00031	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00036	0f 45 c1	 cmovne	 eax, ecx
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	57		 push	 edi
  0003c	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 9154 : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	33 cd		 xor	 ecx, ebp
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN2@TaskBarIco:

; 9130 : 		return;
; 9131 : 	}
; 9132 : 
; 9133 : 	NOTIFYICONDATAW tnid; 
; 9134 : 
; 9135 : 	ZeroMemory (&tnid, sizeof (tnid));

  00059	68 b8 03 00 00	 push	 952			; 000003b8H
  0005e	8d 85 44 fc ff
	ff		 lea	 eax, DWORD PTR _tnid$[ebp]
  00064	6a 00		 push	 0
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _memset

; 9136 : 
; 9137 : 	tnid.cbSize = sizeof (tnid); 
; 9138 : 	tnid.hWnd = hwnd; 
; 9139 : 	tnid.uID = IDI_GOSTCRYPT_ICON; 
; 9140 : 	//tnid.uVersion = (IsOSAtLeast (WIN_VISTA) ? NOTIFYICON_VERSION_4 : NOTIFYICON_VERSION);
; 9141 : 
; 9142 : 	//Shell_NotifyIconW (NIM_SETVERSION, &tnid);
; 9143 : 
; 9144 : 	tnid.uFlags = NIF_INFO; 
; 9145 : 	tnid.dwInfoFlags = (warning ? NIIF_WARNING : NIIF_INFO);
; 9146 : 	tnid.uTimeout = (IsOSAtLeast (WIN_VISTA) ? 1000 : 5000); // in ms

  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
  00072	33 c0		 xor	 eax, eax
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	c7 85 44 fc ff
	ff b8 03 00 00	 mov	 DWORD PTR _tnid$[ebp], 952 ; 000003b8H
  00081	39 45 14	 cmp	 DWORD PTR _warning$[ebp], eax
  00084	89 9d 48 fc ff
	ff		 mov	 DWORD PTR _tnid$[ebp+4], ebx
  0008a	0f 95 c0	 setne	 al
  0008d	c7 85 4c fc ff
	ff f5 01 00 00	 mov	 DWORD PTR _tnid$[ebp+8], 501 ; 000001f5H
  00097	40		 inc	 eax
  00098	c7 85 50 fc ff
	ff 10 00 00 00	 mov	 DWORD PTR _tnid$[ebp+12], 16 ; 00000010H
  000a2	89 45 e8	 mov	 DWORD PTR _tnid$[ebp+932], eax
  000a5	85 c9		 test	 ecx, ecx
  000a7	7f 0d		 jg	 SHORT $LN9@TaskBarIco
  000a9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
$LN9@TaskBarIco:
  000b6	c1 e1 08	 shl	 ecx, 8
  000b9	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  000be	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSMinor
  000c4	b8 88 13 00 00	 mov	 eax, 5000		; 00001388H
  000c9	c1 e1 08	 shl	 ecx, 8
  000cc	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSServicePack
  000d2	81 f9 00 00 06
	00		 cmp	 ecx, 393216		; 00060000H

; 9147 : 
; 9148 : 	wcsncpy (tnid.szInfoTitle, headline, ARRAYSIZE (tnid.szInfoTitle) - 1);

  000d8	6a 3f		 push	 63			; 0000003fH
  000da	0f 4d c2	 cmovge	 eax, edx
  000dd	89 85 64 ff ff
	ff		 mov	 DWORD PTR _tnid$[ebp+800], eax
  000e3	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _tnid$[ebp+804]
  000e9	56		 push	 esi
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _wcsncpy

; 9149 : 	wcsncpy (tnid.szInfo, text, ARRAYSIZE (tnid.szInfo) - 1);

  000f0	68 ff 00 00 00	 push	 255			; 000000ffH
  000f5	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR _tnid$[ebp+288]
  000fb	57		 push	 edi
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _wcsncpy

; 9150 : 
; 9151 : 	// Display the balloon tooltip quickly twice in a row to avoid the slow and unwanted "fade-in" phase
; 9152 : 	Shell_NotifyIconW (NIM_MODIFY, &tnid);

  00102	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__Shell_NotifyIconW@8
  00108	8d 85 44 fc ff
	ff		 lea	 eax, DWORD PTR _tnid$[ebp]
  0010e	83 c4 18	 add	 esp, 24			; 00000018H
  00111	50		 push	 eax
  00112	6a 01		 push	 1
  00114	ff d6		 call	 esi

; 9153 : 	Shell_NotifyIconW (NIM_MODIFY, &tnid);

  00116	8d 85 44 fc ff
	ff		 lea	 eax, DWORD PTR _tnid$[ebp]
  0011c	50		 push	 eax
  0011d	6a 01		 push	 1
  0011f	ff d6		 call	 esi

; 9154 : }

  00121	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	33 cd		 xor	 ecx, ebp
  00128	5b		 pop	 ebx
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_TaskBarIconDisplayBalloonTooltip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _OpenPageHelp
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_nPage$ = 12						; size = 4
_OpenPageHelp PROC					; COMDAT

; 9854 : 	int r = (int)ShellExecute (NULL, "open", szHelpFile, NULL, NULL, SW_SHOWNORMAL);

  00000	6a 01		 push	 1
  00002	6a 00		 push	 0
  00004	6a 00		 push	 0
  00006	68 00 00 00 00	 push	 OFFSET _szHelpFile
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00010	6a 00		 push	 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 9855 : 
; 9856 : 	if (r == ERROR_FILE_NOT_FOUND)

  00018	83 f8 02	 cmp	 eax, 2
  0001b	75 2b		 jne	 SHORT $LN3@OpenPageHe

; 9857 : 	{
; 9858 : 		// Try the secondary help file
; 9859 : 		r = (int)ShellExecute (NULL, "open", szHelpFile2, NULL, NULL, SW_SHOWNORMAL);

  0001d	6a 01		 push	 1
  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	68 00 00 00 00	 push	 OFFSET _szHelpFile2
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  0002d	6a 00		 push	 0
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 9860 : 
; 9861 : 		if (r == ERROR_FILE_NOT_FOUND)

  00035	83 f8 02	 cmp	 eax, 2
  00038	75 0e		 jne	 SHORT $LN3@OpenPageHe

; 9862 : 		{
; 9863 : 			OpenOnlineHelp ();

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
  0003f	e8 00 00 00 00	 call	 _Extlink
  00044	83 c4 04	 add	 esp, 4

; 9872 : 	}
; 9873 : }

  00047	c3		 ret	 0
$LN3@OpenPageHe:

; 9864 : 			return;
; 9865 : 		}
; 9866 : 	}
; 9867 : 
; 9868 : 	if (r == SE_ERR_NOASSOC)

  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	75 3b		 jne	 SHORT $LN5@OpenPageHe

; 9869 : 	{
; 9870 : 		if (AskYesNo ("HELP_READER_ERROR") == IDYES)

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00054	75 32		 jne	 SHORT $LN5@OpenPageHe
  00056	6a 24		 push	 36			; 00000024H
  00058	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HCJJOEDJ@HELP_READER_ERROR?$AA@
  00063	e8 00 00 00 00	 call	 _GetString
  00068	83 c4 04	 add	 esp, 4
  0006b	50		 push	 eax
  0006c	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00078	83 f8 06	 cmp	 eax, 6
  0007b	75 0b		 jne	 SHORT $LN5@OpenPageHe

; 9871 : 			OpenOnlineHelp ();

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
  00082	e8 00 00 00 00	 call	 _Extlink
  00087	59		 pop	 ecx
$LN5@OpenPageHe:

; 9872 : 	}
; 9873 : }

  00088	c3		 ret	 0
_OpenPageHelp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetSystemDriveLetter
_TEXT	SEGMENT
_systemDir$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_GetSystemDriveLetter PROC				; COMDAT

; 9104 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 9105 : 	char systemDir [MAX_PATH];
; 9106 : 
; 9107 : 	if (GetSystemDirectory (systemDir, sizeof (systemDir)))

  00013	68 04 01 00 00	 push	 260			; 00000104H
  00018	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _systemDir$[ebp]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryA@8
  00025	85 c0		 test	 eax, eax
  00027	74 1e		 je	 SHORT $LN2@GetSystemD

; 9108 : 		return (char) (toupper (systemDir [0]));

  00029	0f be 85 f8 fe
	ff ff		 movsx	 eax, BYTE PTR _systemDir$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _toupper
  00036	83 c4 04	 add	 esp, 4

; 9109 : 	else
; 9110 : 		return 0;
; 9111 : }

  00039	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003c	33 cd		 xor	 ecx, ebp
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN2@GetSystemD:
  00047	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004a	32 c0		 xor	 al, al
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_GetSystemDriveLetter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetProgramConfigPath
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_GetProgramConfigPath PROC				; COMDAT

; 9053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9054 : 	static char path[MAX_PATH * 2] = { 0 };
; 9055 : 
; 9056 : 	if (SUCCEEDED (SHGetFolderPath (NULL, CSIDL_COMMON_APPDATA | CSIDL_FLAG_CREATE, NULL, 0, path)))

  00003	68 00 00 00 00	 push	 OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	68 23 80 00 00	 push	 32803			; 00008023H
  00011	6a 00		 push	 0
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  00019	85 c0		 test	 eax, eax

; 9057 : 	{
; 9058 : 		strcat (path, "\\GostCrypt\\");

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  00020	78 6d		 js	 SHORT $LN2@GetProgram
  00022	48		 dec	 eax
$LL7@GetProgram:
  00023	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00026	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00029	84 c9		 test	 cl, cl
  0002b	75 f6		 jne	 SHORT $LL7@GetProgram
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@
  00033	56		 push	 esi
  00034	89 08		 mov	 DWORD PTR [eax], ecx
  00036	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@+4
  0003c	57		 push	 edi
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00040	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@+8

; 9059 : 		CreateDirectory (path, NULL);

  00046	6a 00		 push	 0
  00048	68 00 00 00 00	 push	 OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  0004d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 9060 : 		strcat (path, fileName);

  00056	8b 55 08	 mov	 edx, DWORD PTR _fileName$[ebp]
  00059	8b f2		 mov	 esi, edx
  0005b	0f 1f 44 00 00	 npad	 5
$LL8@GetProgram:
  00060	8a 02		 mov	 al, BYTE PTR [edx]
  00062	42		 inc	 edx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL8@GetProgram
  00067	bf 00 00 00 00	 mov	 edi, OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  0006c	2b d6		 sub	 edx, esi
  0006e	4f		 dec	 edi
  0006f	90		 npad	 1
$LL9@GetProgram:
  00070	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00073	47		 inc	 edi
  00074	84 c0		 test	 al, al
  00076	75 f8		 jne	 SHORT $LL9@GetProgram
  00078	8b ca		 mov	 ecx, edx

; 9064 : 
; 9065 : 	return path;

  0007a	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetProgramConfigPath@@9@4PADA
  0007f	c1 e9 02	 shr	 ecx, 2
  00082	f3 a5		 rep movsd
  00084	8b ca		 mov	 ecx, edx
  00086	83 e1 03	 and	 ecx, 3
  00089	f3 a4		 rep movsb
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi

; 9066 : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN2@GetProgram:

; 9061 : 	}
; 9062 : 	else
; 9063 : 		path[0] = 0;

  0008f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?path@?1??GetProgramConfigPath@@9@4PADA, 0

; 9066 : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_GetProgramConfigPath ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetConfigPath
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_GetConfigPath PROC					; COMDAT

; 9020 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 9021 : 	static char path[MAX_PATH * 2] = { 0 };
; 9022 : 
; 9023 : 	if (IsNonInstallMode ())

  00005	e8 00 00 00 00	 call	 _IsNonInstallMode
  0000a	85 c0		 test	 eax, eax
  0000c	74 58		 je	 SHORT $LN2@GetConfigP

; 9024 : 	{
; 9025 : 		GetModPath (path, sizeof (path));

  0000e	68 08 02 00 00	 push	 520			; 00000208H
  00013	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00018	6a 00		 push	 0
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  00020	6a 5c		 push	 92			; 0000005cH
  00022	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00027	e8 00 00 00 00	 call	 _strrchr

; 9026 : 		strcat (path, fileName);

  0002c	8b 55 08	 mov	 edx, DWORD PTR _fileName$[ebp]
  0002f	83 c4 08	 add	 esp, 8
  00032	8b f2		 mov	 esi, edx
  00034	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LL12@GetConfigP:
  00038	8a 02		 mov	 al, BYTE PTR [edx]
  0003a	42		 inc	 edx
  0003b	84 c0		 test	 al, al
  0003d	75 f9		 jne	 SHORT $LL12@GetConfigP
  0003f	bf 00 00 00 00	 mov	 edi, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00044	2b d6		 sub	 edx, esi
  00046	4f		 dec	 edi
$LL13@GetConfigP:
  00047	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  0004a	47		 inc	 edi
  0004b	84 c0		 test	 al, al
  0004d	75 f8		 jne	 SHORT $LL13@GetConfigP
  0004f	8b ca		 mov	 ecx, edx

; 9039 : 
; 9040 : 	return path;

  00051	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00056	c1 e9 02	 shr	 ecx, 2
  00059	f3 a5		 rep movsd
  0005b	8b ca		 mov	 ecx, edx
  0005d	83 e1 03	 and	 ecx, 3
  00060	f3 a4		 rep movsb
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 9041 : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN2@GetConfigP:

; 9027 : 
; 9028 : 		return path;
; 9029 : 	}
; 9030 : 
; 9031 : 	if (SUCCEEDED(SHGetFolderPath (NULL, CSIDL_APPDATA | CSIDL_FLAG_CREATE, NULL, 0, path)))

  00066	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	68 1a 80 00 00	 push	 32794			; 0000801aH
  00074	6a 00		 push	 0
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  0007c	85 c0		 test	 eax, eax
  0007e	78 6f		 js	 SHORT $LN3@GetConfigP

; 9032 : 	{
; 9033 : 		strcat (path, "\\GostCrypt\\");

  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  00085	49		 dec	 ecx
$LL14@GetConfigP:
  00086	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00089	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0008c	84 c0		 test	 al, al
  0008e	75 f6		 jne	 SHORT $LL14@GetConfigP
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@
  00095	89 01		 mov	 DWORD PTR [ecx], eax
  00097	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@+4
  0009c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0009f	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@+8

; 9034 : 		CreateDirectory (path, NULL);

  000a4	6a 00		 push	 0
  000a6	68 00 00 00 00	 push	 OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000ab	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 9035 : 		strcat (path, fileName);

  000b4	8b 55 08	 mov	 edx, DWORD PTR _fileName$[ebp]
  000b7	8b f2		 mov	 esi, edx
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL15@GetConfigP:
  000c0	8a 02		 mov	 al, BYTE PTR [edx]
  000c2	42		 inc	 edx
  000c3	84 c0		 test	 al, al
  000c5	75 f9		 jne	 SHORT $LL15@GetConfigP
  000c7	bf 00 00 00 00	 mov	 edi, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000cc	2b d6		 sub	 edx, esi
  000ce	4f		 dec	 edi
  000cf	90		 npad	 1
$LL16@GetConfigP:
  000d0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000d3	47		 inc	 edi
  000d4	84 c0		 test	 al, al
  000d6	75 f8		 jne	 SHORT $LL16@GetConfigP
  000d8	8b ca		 mov	 ecx, edx

; 9039 : 
; 9040 : 	return path;

  000da	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000df	c1 e9 02	 shr	 ecx, 2
  000e2	f3 a5		 rep movsd
  000e4	8b ca		 mov	 ecx, edx
  000e6	83 e1 03	 and	 ecx, 3
  000e9	f3 a4		 rep movsb
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi

; 9041 : }

  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
$LN3@GetConfigP:
  000ef	5f		 pop	 edi

; 9036 : 	}
; 9037 : 	else
; 9038 : 		path[0] = 0;

  000f0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?path@?1??GetConfigPath@@9@4PADA, 0

; 9039 : 
; 9040 : 	return path;

  000f7	b8 00 00 00 00	 mov	 eax, OFFSET ?path@?1??GetConfigPath@@9@4PADA
  000fc	5e		 pop	 esi

; 9041 : }

  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_GetConfigPath ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetModPath
_TEXT	SEGMENT
_path$ = 8						; size = 4
_maxSize$ = 12						; size = 4
_GetModPath PROC					; COMDAT

; 9004 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 9005 : 	GetModuleFileName (NULL, path, maxSize);

  00004	ff 75 0c	 push	 DWORD PTR _maxSize$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _path$[ebp]
  0000a	56		 push	 esi
  0000b	6a 00		 push	 0
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 9006 : 	strrchr (path, '\\')[1] = 0;

  00013	6a 5c		 push	 92			; 0000005cH
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _strrchr
  0001b	83 c4 08	 add	 esp, 8
  0001e	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 9007 : 	return path;

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi

; 9008 : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_GetModPath ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LoadFileBlock
_TEXT	SEGMENT
_seekOffsetNew$ = -12					; size = 8
_bytesRead$ = -4					; size = 4
_fileName$ = 8						; size = 4
_fileOffset$ = 12					; size = 8
_count$ = 20						; size = 4
_LoadFileBlock PROC					; COMDAT

; 8926 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 8927 : 	char *buf;
; 8928 : 	DWORD bytesRead = 0;
; 8929 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 8930 : 
; 8931 : 	HANDLE h = CreateFile (fileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 03		 push	 3
  0000d	6a 00		 push	 0
  0000f	6a 03		 push	 3
  00011	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00016	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bytesRead$[ebp], 0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00026	8b f0		 mov	 esi, eax

; 8932 : 	if (h == INVALID_HANDLE_VALUE)

  00028	83 fe ff	 cmp	 esi, -1
  0002b	74 1e		 je	 SHORT $LN10@LoadFileBl

; 8933 : 		return NULL;
; 8934 : 
; 8935 : 	seekOffset.QuadPart = fileOffset;
; 8936 : 
; 8937 : 	if (SetFilePointerEx (h, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  0002d	6a 00		 push	 0
  0002f	8d 45 f4	 lea	 eax, DWORD PTR _seekOffsetNew$[ebp]
  00032	50		 push	 eax
  00033	ff 75 10	 push	 DWORD PTR _fileOffset$[ebp+4]
  00036	ff 75 0c	 push	 DWORD PTR _fileOffset$[ebp]
  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00040	85 c0		 test	 eax, eax
  00042	75 0e		 jne	 SHORT $LN3@LoadFileBl

; 8938 : 	{
; 8939 : 		CloseHandle (h);

  00044	56		 push	 esi
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN10@LoadFileBl:

; 8940 : 		return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 8965 : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN3@LoadFileBl:
  00052	53		 push	 ebx

; 8941 : 	}
; 8942 : 
; 8943 : 	buf = (char *) malloc (count);

  00053	8b 5d 14	 mov	 ebx, DWORD PTR _count$[ebp]
  00056	57		 push	 edi
  00057	53		 push	 ebx
  00058	e8 00 00 00 00	 call	 _malloc
  0005d	8b f8		 mov	 edi, eax
  0005f	83 c4 04	 add	 esp, 4

; 8944 : 
; 8945 : 	if (buf == NULL)

  00062	85 ff		 test	 edi, edi
  00064	75 10		 jne	 SHORT $LN4@LoadFileBl

; 8946 : 	{
; 8947 : 		CloseHandle (h);

  00066	56		 push	 esi
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0006d	5f		 pop	 edi
  0006e	5b		 pop	 ebx

; 8948 : 		return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	5e		 pop	 esi

; 8965 : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN4@LoadFileBl:

; 8949 : 	}
; 8950 :  
; 8951 : 	ZeroMemory (buf, count);

  00076	53		 push	 ebx
  00077	6a 00		 push	 0
  00079	57		 push	 edi
  0007a	e8 00 00 00 00	 call	 _memset
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8952 : 
; 8953 : 	if (buf != NULL)
; 8954 : 		ReadFile (h, buf, count, &bytesRead, NULL);

  00082	8d 45 fc	 lea	 eax, DWORD PTR _bytesRead$[ebp]
  00085	6a 00		 push	 0
  00087	50		 push	 eax
  00088	53		 push	 ebx
  00089	57		 push	 edi
  0008a	56		 push	 esi
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 8955 : 
; 8956 : 	CloseHandle (h);

  00091	56		 push	 esi
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8957 : 
; 8958 : 	if (bytesRead != count)

  00098	39 5d fc	 cmp	 DWORD PTR _bytesRead$[ebp], ebx
  0009b	74 12		 je	 SHORT $LN6@LoadFileBl

; 8959 : 	{
; 8960 : 		free (buf);

  0009d	57		 push	 edi
  0009e	e8 00 00 00 00	 call	 _free
  000a3	83 c4 04	 add	 esp, 4

; 8961 : 		return NULL;

  000a6	33 c0		 xor	 eax, eax
  000a8	5f		 pop	 edi
  000a9	5b		 pop	 ebx
  000aa	5e		 pop	 esi

; 8965 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
$LN6@LoadFileBl:

; 8962 : 	}
; 8963 : 
; 8964 : 	return buf;

  000af	8b c7		 mov	 eax, edi
  000b1	5f		 pop	 edi
  000b2	5b		 pop	 ebx
  000b3	5e		 pop	 esi

; 8965 : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_LoadFileBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LoadFile
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_size$ = 12						; size = 4
_LoadFile PROC						; COMDAT

; 8886 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 8887 : 	char *buf;
; 8888 : 	HANDLE h = CreateFile (fileName, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	6a 03		 push	 3
  0000a	6a 00		 push	 0
  0000c	6a 03		 push	 3
  0000e	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00013	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001c	8b f0		 mov	 esi, eax

; 8889 : 	if (h == INVALID_HANDLE_VALUE)

  0001e	83 fe ff	 cmp	 esi, -1
  00021	75 05		 jne	 SHORT $LN2@LoadFile

; 8890 : 		return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	5e		 pop	 esi

; 8911 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN2@LoadFile:
  00028	53		 push	 ebx
  00029	57		 push	 edi

; 8891 : 
; 8892 : 	*size = GetFileSize (h, NULL);

  0002a	6a 00		 push	 0
  0002c	56		 push	 esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00033	8b 5d 0c	 mov	 ebx, DWORD PTR _size$[ebp]
  00036	89 03		 mov	 DWORD PTR [ebx], eax

; 8893 : 	buf = (char *) malloc (*size + 1);

  00038	40		 inc	 eax
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _malloc
  0003f	8b f8		 mov	 edi, eax
  00041	83 c4 04	 add	 esp, 4

; 8894 : 
; 8895 : 	if (buf == NULL)

  00044	85 ff		 test	 edi, edi
  00046	75 0e		 jne	 SHORT $LN3@LoadFile

; 8896 : 	{
; 8897 : 		CloseHandle (h);

  00048	56		 push	 esi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx

; 8898 : 		return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 8911 : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN3@LoadFile:

; 8899 : 	}
; 8900 : 
; 8901 : 	ZeroMemory (buf, *size + 1);

  00056	8b 03		 mov	 eax, DWORD PTR [ebx]
  00058	40		 inc	 eax
  00059	50		 push	 eax
  0005a	6a 00		 push	 0
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 _memset
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8902 : 
; 8903 : 	if (!ReadFile (h, buf, *size, size, NULL))

  00065	6a 00		 push	 0
  00067	53		 push	 ebx
  00068	ff 33		 push	 DWORD PTR [ebx]
  0006a	57		 push	 edi
  0006b	56		 push	 esi
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00072	85 c0		 test	 eax, eax
  00074	75 0b		 jne	 SHORT $LN4@LoadFile

; 8904 : 	{
; 8905 : 		free (buf);

  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 _free
  0007c	83 c4 04	 add	 esp, 4

; 8906 : 		buf = NULL;

  0007f	33 ff		 xor	 edi, edi
$LN4@LoadFile:

; 8907 : 	}
; 8908 : 
; 8909 : 	CloseHandle (h);

  00081	56		 push	 esi
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8910 : 	return buf;

  00088	8b c7		 mov	 eax, edi
  0008a	5f		 pop	 edi
  0008b	5b		 pop	 ebx
  0008c	5e		 pop	 esi

; 8911 : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_LoadFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LoadInt32
_TEXT	SEGMENT
_seekOffsetNew$ = -12					; size = 8
_bytesRead$ = -4					; size = 4
_filePath$ = 8						; size = 4
_result$ = 12						; size = 4
_fileOffset$ = 16					; size = 8
_LoadInt32 PROC						; COMDAT

; 8780 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 8781 : 	size_t bufSize = sizeof(__int32);
; 8782 : 	unsigned char *buffer = (unsigned char *) malloc (bufSize);

  00008	6a 04		 push	 4
  0000a	e8 00 00 00 00	 call	 _malloc
  0000f	8b f0		 mov	 esi, eax
  00011	83 c4 04	 add	 esp, 4

; 8783 : 	unsigned char *bufferPtr = buffer;
; 8784 : 	HANDLE src = NULL;
; 8785 : 	DWORD bytesRead;
; 8786 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 8787 : 	BOOL retVal = FALSE;

  00014	33 db		 xor	 ebx, ebx

; 8788 : 
; 8789 : 	if (buffer == NULL)

  00016	85 f6		 test	 esi, esi
  00018	75 09		 jne	 SHORT $LN2@LoadInt32

; 8790 : 		return -1;

  0001a	5e		 pop	 esi
  0001b	83 c8 ff	 or	 eax, -1
  0001e	5b		 pop	 ebx

; 8819 : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN2@LoadInt32:
  00023	57		 push	 edi

; 8791 : 
; 8792 : 	src = CreateFile (filePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	6a 03		 push	 3
  0002a	6a 00		 push	 0
  0002c	6a 03		 push	 3
  0002e	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00033	ff 75 08	 push	 DWORD PTR _filePath$[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0003c	8b f8		 mov	 edi, eax

; 8793 : 
; 8794 : 	if (src == INVALID_HANDLE_VALUE)

  0003e	83 ff ff	 cmp	 edi, -1
  00041	75 12		 jne	 SHORT $LN3@LoadInt32

; 8795 : 	{
; 8796 : 		free (buffer);

  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _free
  00049	83 c4 04	 add	 esp, 4

; 8797 : 		return FALSE;

  0004c	33 c0		 xor	 eax, eax
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 8819 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@LoadInt32:

; 8798 : 	}
; 8799 : 
; 8800 : 	seekOffset.QuadPart = fileOffset;
; 8801 : 
; 8802 : 	if (SetFilePointerEx (src, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  00055	6a 00		 push	 0
  00057	8d 45 f4	 lea	 eax, DWORD PTR _seekOffsetNew$[ebp]
  0005a	50		 push	 eax
  0005b	ff 75 14	 push	 DWORD PTR _fileOffset$[ebp+4]
  0005e	ff 75 10	 push	 DWORD PTR _fileOffset$[ebp]
  00061	57		 push	 edi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00068	85 c0		 test	 eax, eax
  0006a	74 42		 je	 SHORT $fsif_end$12

; 8803 : 		goto fsif_end;
; 8804 : 
; 8805 : 	if (ReadFile (src, buffer, bufSize, &bytesRead, NULL) == 0 
; 8806 : 		|| bytesRead != bufSize)

  0006c	6a 00		 push	 0
  0006e	8d 45 fc	 lea	 eax, DWORD PTR _bytesRead$[ebp]
  00071	50		 push	 eax
  00072	6a 04		 push	 4
  00074	56		 push	 esi
  00075	57		 push	 edi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0007c	85 c0		 test	 eax, eax
  0007e	74 2e		 je	 SHORT $fsif_end$12
  00080	83 7d fc 04	 cmp	 DWORD PTR _bytesRead$[ebp], 4
  00084	75 28		 jne	 SHORT $fsif_end$12

; 8807 : 		goto fsif_end;
; 8808 : 
; 8809 : 
; 8810 : 	retVal = TRUE;
; 8811 : 
; 8812 : 	*result = mgetLong(bufferPtr);

  00086	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  00089	bb 01 00 00 00	 mov	 ebx, 1
  0008e	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  00095	c1 e2 08	 shl	 edx, 8
  00098	0b d0		 or	 edx, eax
  0009a	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  0009e	c1 e2 08	 shl	 edx, 8
  000a1	0b d0		 or	 edx, eax
  000a3	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  000a7	c1 e2 08	 shl	 edx, 8
  000aa	0b d0		 or	 edx, eax
  000ac	89 11		 mov	 DWORD PTR [ecx], edx
$fsif_end$12:

; 8813 : 
; 8814 : fsif_end:
; 8815 : 	CloseHandle (src);

  000ae	57		 push	 edi
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8816 : 	free (buffer);

  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 _free
  000bb	83 c4 04	 add	 esp, 4

; 8817 : 
; 8818 : 	return retVal;

  000be	8b c3		 mov	 eax, ebx
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx

; 8819 : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
_LoadInt32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LoadInt16
_TEXT	SEGMENT
_seekOffsetNew$ = -12					; size = 8
_bytesRead$ = -4					; size = 4
_filePath$ = 8						; size = 4
_result$ = 12						; size = 4
_fileOffset$ = 16					; size = 8
_LoadInt16 PROC						; COMDAT

; 8834 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 8835 : 	size_t bufSize = sizeof(__int16);
; 8836 : 	unsigned char *buffer = (unsigned char *) malloc (bufSize);

  00008	6a 02		 push	 2
  0000a	e8 00 00 00 00	 call	 _malloc
  0000f	8b f0		 mov	 esi, eax
  00011	83 c4 04	 add	 esp, 4

; 8837 : 	unsigned char *bufferPtr = buffer;
; 8838 : 	HANDLE src = NULL;
; 8839 : 	DWORD bytesRead;
; 8840 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 8841 : 	BOOL retVal = FALSE;

  00014	33 db		 xor	 ebx, ebx

; 8842 : 
; 8843 : 	if (buffer == NULL)

  00016	85 f6		 test	 esi, esi
  00018	75 09		 jne	 SHORT $LN2@LoadInt16

; 8844 : 		return -1;

  0001a	5e		 pop	 esi
  0001b	83 c8 ff	 or	 eax, -1
  0001e	5b		 pop	 ebx

; 8873 : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN2@LoadInt16:
  00023	57		 push	 edi

; 8845 : 
; 8846 : 	src = CreateFile (filePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	6a 03		 push	 3
  0002a	6a 00		 push	 0
  0002c	6a 03		 push	 3
  0002e	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00033	ff 75 08	 push	 DWORD PTR _filePath$[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0003c	8b f8		 mov	 edi, eax

; 8847 : 
; 8848 : 	if (src == INVALID_HANDLE_VALUE)

  0003e	83 ff ff	 cmp	 edi, -1
  00041	75 12		 jne	 SHORT $LN3@LoadInt16

; 8849 : 	{
; 8850 : 		free (buffer);

  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _free
  00049	83 c4 04	 add	 esp, 4

; 8851 : 		return FALSE;

  0004c	33 c0		 xor	 eax, eax
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 8873 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN3@LoadInt16:

; 8852 : 	}
; 8853 : 
; 8854 : 	seekOffset.QuadPart = fileOffset;
; 8855 : 
; 8856 : 	if (SetFilePointerEx (src, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  00055	6a 00		 push	 0
  00057	8d 45 f4	 lea	 eax, DWORD PTR _seekOffsetNew$[ebp]
  0005a	50		 push	 eax
  0005b	ff 75 14	 push	 DWORD PTR _fileOffset$[ebp+4]
  0005e	ff 75 10	 push	 DWORD PTR _fileOffset$[ebp]
  00061	57		 push	 edi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00068	85 c0		 test	 eax, eax
  0006a	74 30		 je	 SHORT $fsif_end$12

; 8857 : 		goto fsif_end;
; 8858 : 
; 8859 : 	if (ReadFile (src, buffer, bufSize, &bytesRead, NULL) == 0 
; 8860 : 		|| bytesRead != bufSize)

  0006c	6a 00		 push	 0
  0006e	8d 45 fc	 lea	 eax, DWORD PTR _bytesRead$[ebp]
  00071	50		 push	 eax
  00072	6a 02		 push	 2
  00074	56		 push	 esi
  00075	57		 push	 edi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0007c	85 c0		 test	 eax, eax
  0007e	74 1c		 je	 SHORT $fsif_end$12
  00080	83 7d fc 02	 cmp	 DWORD PTR _bytesRead$[ebp], 2
  00084	75 16		 jne	 SHORT $fsif_end$12

; 8861 : 		goto fsif_end;
; 8862 : 
; 8863 : 
; 8864 : 	retVal = TRUE;
; 8865 : 
; 8866 : 	*result = mgetWord(bufferPtr);

  00086	0f b6 16	 movzx	 edx, BYTE PTR [esi]
  00089	bb 01 00 00 00	 mov	 ebx, 1
  0008e	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _result$[ebp]
  00095	c1 e2 08	 shl	 edx, 8
  00098	0b d0		 or	 edx, eax
  0009a	89 11		 mov	 DWORD PTR [ecx], edx
$fsif_end$12:

; 8867 : 
; 8868 : fsif_end:
; 8869 : 	CloseHandle (src);

  0009c	57		 push	 edi
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8870 : 	free (buffer);

  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _free
  000a9	83 c4 04	 add	 esp, 4

; 8871 : 
; 8872 : 	return retVal;

  000ac	8b c3		 mov	 eax, ebx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx

; 8873 : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
_LoadInt16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetFileSize64
_TEXT	SEGMENT
_size$ = -8						; size = 8
_path$ = 8						; size = 4
_GetFileSize64 PROC					; COMDAT

; 8978 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 8979 :   	HANDLE h = CreateFile (path, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 03		 push	 3
  0000d	6a 00		 push	 0
  0000f	6a 03		 push	 3
  00011	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00016	ff 75 08	 push	 DWORD PTR _path$[ebp]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001f	8b f0		 mov	 esi, eax

; 8980 : 	LARGE_INTEGER size;
; 8981 : 
; 8982 : 	if (h == INVALID_HANDLE_VALUE)

  00021	83 fe ff	 cmp	 esi, -1
  00024	75 0a		 jne	 SHORT $LN2@GetFileSiz
$LN5@GetFileSiz:

; 8983 : 		return -1;

  00026	83 c8 ff	 or	 eax, -1
  00029	0b d0		 or	 edx, eax
  0002b	5e		 pop	 esi

; 8991 : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN2@GetFileSiz:

; 8984 : 
; 8985 : 	if (GetFileSizeEx (h, &size) == 0)

  00030	8d 45 f8	 lea	 eax, DWORD PTR _size$[ebp]
  00033	50		 push	 eax
  00034	56		 push	 esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  0003b	85 c0		 test	 eax, eax
  0003d	74 e7		 je	 SHORT $LN5@GetFileSiz

; 8986 : 		return -1;
; 8987 : 
; 8988 : 	CloseHandle (h);

  0003f	56		 push	 esi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8989 : 
; 8990 : 	return size.QuadPart;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00049	8b 55 fc	 mov	 edx, DWORD PTR _size$[ebp+4]
  0004c	5e		 pop	 esi

; 8991 : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_GetFileSize64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetSizeString
_TEXT	SEGMENT
_size$ = 8						; size = 8
_str$ = 16						; size = 4
_GetSizeString PROC					; COMDAT

; 5099 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5100 : 	static wchar_t *b, *kb, *mb, *gb, *tb, *pb;
; 5101 : 	static int serNo;
; 5102 : 
; 5103 : 	if (b == NULL || serNo != LocalizationSerialNo)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?b@?1??GetSizeString@@9@4PA_WA
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _LocalizationSerialNo
  0000e	85 c0		 test	 eax, eax
  00010	74 08		 je	 SHORT $LN3@GetSizeStr
  00012	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?serNo@?1??GetSizeString@@9@4HA, ecx
  00018	74 63		 je	 SHORT $LN2@GetSizeStr
$LN3@GetSizeStr:

; 5104 : 	{
; 5105 : 		serNo = LocalizationSerialNo;
; 5106 : 		kb = GetString ("KB");

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_02LODOGJEL@KB?$AA@
  0001f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?serNo@?1??GetSizeString@@9@4HA, ecx
  00025	e8 00 00 00 00	 call	 _GetString

; 5107 : 		mb = GetString ("MB");

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_02LKLDBFPJ@MB?$AA@
  0002f	a3 00 00 00 00	 mov	 DWORD PTR ?kb@?1??GetSizeString@@9@4PA_WA, eax
  00034	e8 00 00 00 00	 call	 _GetString

; 5108 : 		gb = GetString ("GB");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_02LHCEJACP@GB?$AA@
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?mb@?1??GetSizeString@@9@4PA_WA, eax
  00043	e8 00 00 00 00	 call	 _GetString

; 5109 : 		tb = GetString ("TB");

  00048	68 00 00 00 00	 push	 OFFSET ??_C@_02KJEEINAG@TB?$AA@
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?gb@?1??GetSizeString@@9@4PA_WA, eax
  00052	e8 00 00 00 00	 call	 _GetString

; 5110 : 		pb = GetString ("PB");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_02KOENCFNK@PB?$AA@
  0005c	a3 00 00 00 00	 mov	 DWORD PTR ?tb@?1??GetSizeString@@9@4PA_WA, eax
  00061	e8 00 00 00 00	 call	 _GetString

; 5111 : 		b = GetString ("BYTE");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_04ELFAHOMP@BYTE?$AA@
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?pb@?1??GetSizeString@@9@4PA_WA, eax
  00070	e8 00 00 00 00	 call	 _GetString
  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	a3 00 00 00 00	 mov	 DWORD PTR ?b@?1??GetSizeString@@9@4PA_WA, eax
$LN2@GetSizeStr:

; 5112 : 	}
; 5113 : 
; 5114 : 	if (size > 1024I64*1024*1024*1024*1024*99)

  0007d	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp+4]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00083	81 fa 00 00 8c
	01		 cmp	 edx, 25952256		; 018c0000H
  00089	72 24		 jb	 SHORT $LN4@GetSizeStr
  0008b	77 04		 ja	 SHORT $LN23@GetSizeStr
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 1e		 je	 SHORT $LN4@GetSizeStr
$LN23@GetSizeStr:

; 5115 : 		swprintf (str, L"%I64d %s", size/1024/1024/1024/1024/1024, pb);

  00091	ff 35 00 00 00
	00		 push	 DWORD PTR ?pb@?1??GetSizeString@@9@4PA_WA
  00097	c1 ea 12	 shr	 edx, 18			; 00000012H
  0009a	6a 00		 push	 0
  0009c	52		 push	 edx
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@

; 5125 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024), gb);

  000a2	ff 75 10	 push	 DWORD PTR _str$[ebp]
  000a5	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  000aa	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
$LN4@GetSizeStr:

; 5116 : 	else if (size > 1024I64*1024*1024*1024*1024)

  000af	81 fa 00 00 04
	00		 cmp	 edx, 262144		; 00040000H
  000b5	72 26		 jb	 SHORT $LN6@GetSizeStr
  000b7	77 04		 ja	 SHORT $LN24@GetSizeStr
  000b9	85 c9		 test	 ecx, ecx
  000bb	74 20		 je	 SHORT $LN6@GetSizeStr
$LN24@GetSizeStr:

; 5117 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024/1024/1024), pb);

  000bd	ff 35 00 00 00
	00		 push	 DWORD PTR ?pb@?1??GetSizeString@@9@4PA_WA
  000c3	e8 00 00 00 00	 call	 __ultod3
  000c8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f50000000000000
  000d0	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000d4	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000d8	e9 45 01 00 00	 jmp	 $LN33@GetSizeStr
$LN6@GetSizeStr:

; 5118 : 	else if (size > 1024I64*1024*1024*1024*99)

  000dd	81 fa 00 63 00
	00		 cmp	 edx, 25344		; 00006300H
  000e3	72 24		 jb	 SHORT $LN8@GetSizeStr
  000e5	77 04		 ja	 SHORT $LN25@GetSizeStr
  000e7	85 c9		 test	 ecx, ecx
  000e9	74 1e		 je	 SHORT $LN8@GetSizeStr
$LN25@GetSizeStr:

; 5119 : 		swprintf (str, L"%I64d %s",size/1024/1024/1024/1024, tb);

  000eb	ff 35 00 00 00
	00		 push	 DWORD PTR ?tb@?1??GetSizeString@@9@4PA_WA
  000f1	c1 ea 08	 shr	 edx, 8
  000f4	6a 00		 push	 0
  000f6	52		 push	 edx
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@

; 5125 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024), gb);

  000fc	ff 75 10	 push	 DWORD PTR _str$[ebp]
  000ff	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  00104	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
$LN8@GetSizeStr:

; 5120 : 	else if (size > 1024I64*1024*1024*1024)

  00109	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0010f	72 22		 jb	 SHORT $LN10@GetSizeStr
  00111	77 04		 ja	 SHORT $LN26@GetSizeStr
  00113	85 c9		 test	 ecx, ecx
  00115	74 1c		 je	 SHORT $LN10@GetSizeStr
$LN26@GetSizeStr:

; 5121 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024/1024), tb);

  00117	ff 35 00 00 00
	00		 push	 DWORD PTR ?tb@?1??GetSizeString@@9@4PA_WA
  0011d	e8 00 00 00 00	 call	 __ultod3
  00122	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f50000000000000
  0012a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0012e	e9 ef 00 00 00	 jmp	 $LN33@GetSizeStr
$LN10@GetSizeStr:

; 5122 : 	else if (size > 1024I64*1024*1024*99)

  00133	83 fa 18	 cmp	 edx, 24			; 00000018H
  00136	72 2b		 jb	 SHORT $LN12@GetSizeStr
  00138	77 08		 ja	 SHORT $LN27@GetSizeStr
  0013a	81 f9 00 00 00
	c0		 cmp	 ecx, -1073741824	; c0000000H
  00140	76 21		 jbe	 SHORT $LN12@GetSizeStr
$LN27@GetSizeStr:

; 5123 : 		swprintf (str, L"%I64d %s",size/1024/1024/1024, gb);

  00142	ff 35 00 00 00
	00		 push	 DWORD PTR ?gb@?1??GetSizeString@@9@4PA_WA
  00148	0f ac d1 1e	 shrd	 ecx, edx, 30
  0014c	c1 ea 1e	 shr	 edx, 30			; 0000001eH
  0014f	52		 push	 edx
  00150	51		 push	 ecx
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@

; 5125 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024), gb);

  00156	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00159	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  0015e	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
$LN12@GetSizeStr:

; 5124 : 	else if (size > 1024I64*1024*1024)

  00163	85 d2		 test	 edx, edx
  00165	0f 85 a4 00 00
	00		 jne	 $LN28@GetSizeStr
  0016b	81 f9 00 00 00
	40		 cmp	 ecx, 1073741824		; 40000000H
  00171	0f 87 98 00 00
	00		 ja	 $LN28@GetSizeStr

; 5126 : 	else if (size > 1024I64*1024*99)

  00177	85 d2		 test	 edx, edx
  00179	75 73		 jne	 SHORT $LN29@GetSizeStr
  0017b	81 f9 00 00 30
	06		 cmp	 ecx, 103809024		; 06300000H
  00181	77 6b		 ja	 SHORT $LN29@GetSizeStr

; 5128 : 	else if (size > 1024I64*1024)

  00183	85 d2		 test	 edx, edx
  00185	75 4a		 jne	 SHORT $LN30@GetSizeStr
  00187	81 f9 00 00 10
	00		 cmp	 ecx, 1048576		; 00100000H
  0018d	77 42		 ja	 SHORT $LN30@GetSizeStr

; 5130 : 	else if (size >= 1024I64)

  0018f	85 d2		 test	 edx, edx
  00191	75 1d		 jne	 SHORT $LN31@GetSizeStr
  00193	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00199	73 15		 jae	 SHORT $LN31@GetSizeStr

; 5132 : 	else
; 5133 : 		swprintf (str, L"%I64d %s", size, b);

  0019b	50		 push	 eax
  0019c	52		 push	 edx
  0019d	51		 push	 ecx
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  001a3	ff 75 10	 push	 DWORD PTR _str$[ebp]
  001a6	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  001ab	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  001ae	5d		 pop	 ebp
  001af	c3		 ret	 0
$LN31@GetSizeStr:

; 5131 : 		swprintf (str, L"%I64d %s", size/1024, kb);

  001b0	ff 35 00 00 00
	00		 push	 DWORD PTR ?kb@?1??GetSizeString@@9@4PA_WA
  001b6	0f ac d1 0a	 shrd	 ecx, edx, 10
  001ba	c1 ea 0a	 shr	 edx, 10			; 0000000aH
  001bd	52		 push	 edx
  001be	51		 push	 ecx
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  001c4	ff 75 10	 push	 DWORD PTR _str$[ebp]
  001c7	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  001cc	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  001cf	5d		 pop	 ebp
  001d0	c3		 ret	 0
$LN30@GetSizeStr:

; 5129 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024), mb);

  001d1	ff 35 00 00 00
	00		 push	 DWORD PTR ?mb@?1??GetSizeString@@9@4PA_WA
  001d7	e8 00 00 00 00	 call	 __ultod3
  001dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50000000000000
  001e4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50000000000000
  001ec	eb 40		 jmp	 SHORT $LN34@GetSizeStr
$LN29@GetSizeStr:

; 5127 : 		swprintf (str, L"%I64d %s", size/1024/1024, mb);

  001ee	ff 35 00 00 00
	00		 push	 DWORD PTR ?mb@?1??GetSizeString@@9@4PA_WA
  001f4	0f ac d1 14	 shrd	 ecx, edx, 20
  001f8	c1 ea 14	 shr	 edx, 20			; 00000014H
  001fb	52		 push	 edx
  001fc	51		 push	 ecx
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@JJPHEOJD@?$AA?$CF?$AAI?$AA6?$AA4?$AAd?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  00202	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00205	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  0020a	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  0020d	5d		 pop	 ebp
  0020e	c3		 ret	 0
$LN28@GetSizeStr:

; 5125 : 		swprintf (str, L"%.1f %s",(double)(size/1024.0/1024/1024), gb);

  0020f	ff 35 00 00 00
	00		 push	 DWORD PTR ?gb@?1??GetSizeString@@9@4PA_WA
  00215	e8 00 00 00 00	 call	 __ultod3
  0021a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f50000000000000
$LN33@GetSizeStr:
  00222	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00226	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0022a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
$LN34@GetSizeStr:
  0022e	83 ec 08	 sub	 esp, 8
  00231	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00236	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@PMDFMIGE@?$AA?$CF?$AA?4?$AA1?$AAf?$AA?5?$AA?$CF?$AAs?$AA?$AA@
  0023b	ff 75 10	 push	 DWORD PTR _str$[ebp]
  0023e	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  00243	83 c4 14	 add	 esp, 20			; 00000014H

; 5134 : }

  00246	5d		 pop	 ebp
  00247	c3		 ret	 0
_GetSizeString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetDriverRefCount
_TEXT	SEGMENT
_dwResult$ = -8						; size = 4
_refCount$ = -4						; size = 4
_GetDriverRefCount PROC					; COMDAT

; 8753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 8754 : 	DWORD dwResult;
; 8755 : 	BOOL bResult;
; 8756 : 	int refCount;
; 8757 : 
; 8758 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_GET_DEVICE_REFCOUNT, &refCount, sizeof (refCount), &refCount,

  00006	6a 00		 push	 0
  00008	8d 45 f8	 lea	 eax, DWORD PTR _dwResult$[ebp]
  0000b	50		 push	 eax
  0000c	6a 04		 push	 4
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _refCount$[ebp]
  00011	50		 push	 eax
  00012	6a 04		 push	 4
  00014	50		 push	 eax
  00015	68 20 20 22 00	 push	 2236448			; 00222020H
  0001a	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 8759 : 		sizeof (refCount), &dwResult, NULL);
; 8760 : 
; 8761 : 	if (bResult)

  00026	83 c9 ff	 or	 ecx, -1
  00029	85 c0		 test	 eax, eax
  0002b	0f 45 4d fc	 cmovne	 ecx, DWORD PTR _refCount$[ebp]
  0002f	8b c1		 mov	 eax, ecx

; 8762 : 		return refCount;
; 8763 : 	else
; 8764 : 		return -1;
; 8765 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_GetDriverRefCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetMountList
_TEXT	SEGMENT
_dwResult$ = -4						; size = 4
_list$ = 8						; size = 4
_GetMountList PROC					; COMDAT

; 8735 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 8736 : 	DWORD dwResult;
; 8737 : 
; 8738 : 	memset (list, 0, sizeof (*list));

  00005	8b 75 08	 mov	 esi, DWORD PTR _list$[ebp]
  00008	68 74 36 00 00	 push	 13940			; 00003674H
  0000d	6a 00		 push	 0
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8739 : 	return DeviceIoControl (hDriver, GST_IOCTL_GET_MOUNTED_VOLUMES, list,

  00018	8d 45 fc	 lea	 eax, DWORD PTR _dwResult$[ebp]
  0001b	6a 00		 push	 0
  0001d	50		 push	 eax
  0001e	68 74 36 00 00	 push	 13940			; 00003674H
  00023	56		 push	 esi
  00024	68 74 36 00 00	 push	 13940			; 00003674H
  00029	56		 push	 esi
  0002a	68 18 20 22 00	 push	 2236440			; 00222018H
  0002f	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0003b	5e		 pop	 esi

; 8740 : 		sizeof (*list), list, sizeof (*list), &dwResult,
; 8741 : 		NULL);
; 8742 : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_GetMountList ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ListSubItemSetW
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_subIndex$ = 16						; size = 4
_string$ = 20						; size = 4
_ListSubItemSetW PROC					; COMDAT

; 8714 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 8715 : 	LVITEMW li;
; 8716 : 	memset (&li, 0, sizeof(li));

  00006	6a 34		 push	 52			; 00000034H
  00008	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset

; 8717 : 
; 8718 : 	li.mask = LVIF_TEXT;
; 8719 : 	li.pszText = string;

  00013	8b 45 14	 mov	 eax, DWORD PTR _string$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	89 45 e0	 mov	 DWORD PTR _li$[ebp+20], eax

; 8720 : 	li.iItem = index; 

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  0001f	89 45 d0	 mov	 DWORD PTR _li$[ebp+4], eax

; 8721 : 	li.iSubItem = subIndex;

  00022	8b 45 10	 mov	 eax, DWORD PTR _subIndex$[ebp]
  00025	89 45 d4	 mov	 DWORD PTR _li$[ebp+8], eax

; 8722 : 	return SendMessageW (list, LVM_SETITEMW, 0, (LPARAM)(&li));

  00028	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	68 4c 10 00 00	 push	 4172			; 0000104cH
  00033	ff 75 08	 push	 DWORD PTR _list$[ebp]
  00036	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _li$[ebp], 1
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 8723 : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_ListSubItemSetW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ListSubItemSet
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_subIndex$ = 16						; size = 4
_string$ = 20						; size = 4
_ListSubItemSet PROC					; COMDAT

; 8690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 8691 : 	LVITEM li;
; 8692 : 	memset (&li, 0, sizeof(li));

  00006	6a 34		 push	 52			; 00000034H
  00008	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset

; 8693 : 
; 8694 : 	li.mask = LVIF_TEXT;
; 8695 : 	li.pszText = string;

  00013	8b 45 14	 mov	 eax, DWORD PTR _string$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	89 45 e0	 mov	 DWORD PTR _li$[ebp+20], eax

; 8696 : 	li.iItem = index; 

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  0001f	89 45 d0	 mov	 DWORD PTR _li$[ebp+4], eax

; 8697 : 	li.iSubItem = subIndex;

  00022	8b 45 10	 mov	 eax, DWORD PTR _subIndex$[ebp]
  00025	89 45 d4	 mov	 DWORD PTR _li$[ebp+8], eax

; 8698 : 	return ListView_SetItem (list, &li);

  00028	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	68 06 10 00 00	 push	 4102			; 00001006H
  00033	ff 75 08	 push	 DWORD PTR _list$[ebp]
  00036	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _li$[ebp], 1
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 8699 : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_ListSubItemSet ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ListItemAddW
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_string$ = 16						; size = 4
_ListItemAddW PROC					; COMDAT

; 8666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 8667 : 	LVITEMW li;
; 8668 : 	memset (&li, 0, sizeof(li));

  00006	6a 34		 push	 52			; 00000034H
  00008	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset

; 8669 : 
; 8670 : 	li.mask = LVIF_TEXT;
; 8671 : 	li.pszText = string;

  00013	8b 45 10	 mov	 eax, DWORD PTR _string$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	89 45 e0	 mov	 DWORD PTR _li$[ebp+20], eax

; 8672 : 	li.iItem = index; 

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  0001f	89 45 d0	 mov	 DWORD PTR _li$[ebp+4], eax

; 8673 : 	li.iSubItem = 0;
; 8674 : 	return SendMessageW (list, LVM_INSERTITEMW, 0, (LPARAM)(&li));

  00022	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	68 4d 10 00 00	 push	 4173			; 0000104dH
  0002d	ff 75 08	 push	 DWORD PTR _list$[ebp]
  00030	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _li$[ebp], 1
  00037	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _li$[ebp+8], 0
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 8675 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_ListItemAddW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ListItemAdd
_TEXT	SEGMENT
_li$ = -52						; size = 52
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_string$ = 16						; size = 4
_ListItemAdd PROC					; COMDAT

; 8643 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 8644 : 	LVITEM li;
; 8645 : 	memset (&li, 0, sizeof(li));

  00006	6a 34		 push	 52			; 00000034H
  00008	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset

; 8646 : 
; 8647 : 	li.mask = LVIF_TEXT;
; 8648 : 	li.pszText = string;

  00013	8b 45 10	 mov	 eax, DWORD PTR _string$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	89 45 e0	 mov	 DWORD PTR _li$[ebp+20], eax

; 8649 : 	li.iItem = index; 

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  0001f	89 45 d0	 mov	 DWORD PTR _li$[ebp+4], eax

; 8650 : 	li.iSubItem = 0;
; 8651 : 	return ListView_InsertItem (list, &li);

  00022	8d 45 cc	 lea	 eax, DWORD PTR _li$[ebp]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	68 07 10 00 00	 push	 4103			; 00001007H
  0002d	ff 75 08	 push	 DWORD PTR _list$[ebp]
  00030	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _li$[ebp], 1
  00037	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _li$[ebp+8], 0
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 8652 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_ListItemAdd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CleanLastVisitedMRU
_TEXT	SEGMENT
_bufout$1 = -139980					; size = 65536
_buf$2 = -74444						; size = 65536
_strTmp$ = -8908					; size = 8192
_exeFilename$ = -716					; size = 520
_regPath$ = -196					; size = 128
_key$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_CleanLastVisitedMRU PROC				; COMDAT

; 8535 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 cc 22 02 00	 mov	 eax, 139980		; 000222ccH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 8536 : 	WCHAR exeFilename[MAX_PATH];
; 8537 : 	WCHAR *strToMatch;
; 8538 : 
; 8539 : 	WCHAR strTmp[4096];
; 8540 : 	char regPath[128];
; 8541 : 	char key[64];
; 8542 : 	int id, len;
; 8543 : 
; 8544 : 	GetModuleFileNameW (NULL, exeFilename, sizeof (exeFilename) / sizeof(exeFilename[0]));

  0001a	68 04 01 00 00	 push	 260			; 00000104H
  0001f	8d 85 34 fd ff
	ff		 lea	 eax, DWORD PTR _exeFilename$[ebp]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameW@12

; 8545 : 	strToMatch = wcsrchr (exeFilename, '\\') + 1;

  0002e	8d 85 34 fd ff
	ff		 lea	 eax, DWORD PTR _exeFilename$[ebp]
  00034	6a 5c		 push	 92			; 0000005cH
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _wcsrchr

; 8546 : 
; 8547 : 	sprintf (regPath, "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisited%sMRU", IsOSAtLeast (WIN_VISTA) ? "Pidl" : "");

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
  00042	83 c4 08	 add	 esp, 8
  00045	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  00048	85 c9		 test	 ecx, ecx
  0004a	7f 0d		 jg	 SHORT $LN26@CleanLastV
  0004c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _CurrentOSMajor
$LN26@CleanLastV:
  00059	c1 e1 08	 shl	 ecx, 8
  0005c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00061	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSMinor
  00067	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04MBHGDIPH@Pidl?$AA@
  0006c	c1 e1 08	 shl	 ecx, 8
  0006f	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSServicePack
  00075	81 f9 00 00 06
	00		 cmp	 ecx, 393216		; 00060000H
  0007b	0f 4c c2	 cmovl	 eax, edx
  0007e	50		 push	 eax
  0007f	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _regPath$[ebp]
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@FCPBNDLP@Software?2Microsoft?2Windows?2Curre@
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _sprintf

; 8548 : 
; 8549 : 	for (id = (IsOSAtLeast (WIN_VISTA) ? 0 : 'a'); id <= (IsOSAtLeast (WIN_VISTA) ? 1000 : 'z'); id++)

  00090	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMajor
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	85 d2		 test	 edx, edx
  0009b	7f 0d		 jg	 SHORT $LN39@CleanLastV
  0009d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMajor
$LN39@CleanLastV:
  000aa	8b c2		 mov	 eax, edx
  000ac	33 c9		 xor	 ecx, ecx
  000ae	c1 e0 08	 shl	 eax, 8
  000b1	be 61 00 00 00	 mov	 esi, 97			; 00000061H
  000b6	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  000bc	c1 e0 08	 shl	 eax, 8
  000bf	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  000c5	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  000ca	0f 4d f1	 cmovge	 esi, ecx
$LN100@CleanLastV:
  000cd	bf e8 03 00 00	 mov	 edi, 1000		; 000003e8H
  000d2	85 d2		 test	 edx, edx
  000d4	7f 0d		 jg	 SHORT $LN52@CleanLastV
  000d6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMajor
$LN52@CleanLastV:
  000e3	8b ca		 mov	 ecx, edx
  000e5	b8 7a 00 00 00	 mov	 eax, 122		; 0000007aH
  000ea	c1 e1 08	 shl	 ecx, 8
  000ed	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSMinor
  000f3	c1 e1 08	 shl	 ecx, 8
  000f6	0b 0d 00 00 00
	00		 or	 ecx, DWORD PTR _CurrentOSServicePack
  000fc	81 f9 00 00 06
	00		 cmp	 ecx, 393216		; 00060000H
  00102	0f 4d c7	 cmovge	 eax, edi
  00105	3b f0		 cmp	 esi, eax
  00107	0f 8f e1 01 00
	00		 jg	 $LN13@CleanLastV

; 8550 : 	{
; 8551 : 		*strTmp = 0;

  0010d	33 c0		 xor	 eax, eax
  0010f	66 89 85 34 dd
	ff ff		 mov	 WORD PTR _strTmp$[ebp], ax

; 8552 : 		sprintf (key, (IsOSAtLeast (WIN_VISTA) ? "%d" : "%c"), id);

  00116	85 d2		 test	 edx, edx
  00118	7f 0b		 jg	 SHORT $LN65@CleanLastV
  0011a	a2 00 00 00 00	 mov	 BYTE PTR ds:0, al
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMajor
$LN65@CleanLastV:
  00125	c1 e2 08	 shl	 edx, 8
  00128	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
  0012d	0b 15 00 00 00
	00		 or	 edx, DWORD PTR _CurrentOSMinor
  00133	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  00138	c1 e2 08	 shl	 edx, 8
  0013b	0b 15 00 00 00
	00		 or	 edx, DWORD PTR _CurrentOSServicePack
  00141	81 fa 00 00 06
	00		 cmp	 edx, 393216		; 00060000H
  00147	56		 push	 esi
  00148	0f 4c c1	 cmovl	 eax, ecx
  0014b	50		 push	 eax
  0014c	8d 45 bc	 lea	 eax, DWORD PTR _key$[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _sprintf

; 8553 : 
; 8554 : 		if ((len = ReadRegistryBytes (regPath, key, (char *) strTmp, sizeof (strTmp))) > 0)

  00155	68 00 20 00 00	 push	 8192			; 00002000H
  0015a	8d 85 34 dd ff
	ff		 lea	 eax, DWORD PTR _strTmp$[ebp]
  00160	50		 push	 eax
  00161	8d 45 bc	 lea	 eax, DWORD PTR _key$[ebp]
  00164	50		 push	 eax
  00165	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _regPath$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _ReadRegistryBytes
  00171	8b f8		 mov	 edi, eax
  00173	83 c4 1c	 add	 esp, 28			; 0000001cH
  00176	85 ff		 test	 edi, edi
  00178	7e 14		 jle	 SHORT $LN2@CleanLastV

; 8555 : 		{
; 8556 : 			if (_wcsicmp (strTmp, strToMatch) == 0) 

  0017a	8d 85 34 dd ff
	ff		 lea	 eax, DWORD PTR _strTmp$[ebp]
  00180	53		 push	 ebx
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 __wcsicmp
  00187	83 c4 08	 add	 esp, 8
  0018a	85 c0		 test	 eax, eax
  0018c	74 0c		 je	 SHORT $LN91@CleanLastV
$LN2@CleanLastV:

; 8548 : 
; 8549 : 	for (id = (IsOSAtLeast (WIN_VISTA) ? 0 : 'a'); id <= (IsOSAtLeast (WIN_VISTA) ? 1000 : 'z'); id++)

  0018e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _CurrentOSMajor
  00194	46		 inc	 esi
  00195	e9 33 ff ff ff	 jmp	 $LN100@CleanLastV
$LN91@CleanLastV:

; 8557 : 			{
; 8558 : 				char buf[65536], bufout[sizeof (buf)];
; 8559 : 
; 8560 : 				// Overwrite the entry with zeroes while keeping its original size
; 8561 : 				memset (strTmp, 0, len);

  0019a	57		 push	 edi
  0019b	8d 85 34 dd ff
	ff		 lea	 eax, DWORD PTR _strTmp$[ebp]
  001a1	6a 00		 push	 0
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 _memset

; 8562 : 				if (!WriteRegistryBytes (regPath, key, (char *) strTmp, len))

  001a9	57		 push	 edi
  001aa	8d 85 34 dd ff
	ff		 lea	 eax, DWORD PTR _strTmp$[ebp]
  001b0	50		 push	 eax
  001b1	8d 45 bc	 lea	 eax, DWORD PTR _key$[ebp]
  001b4	50		 push	 eax
  001b5	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _regPath$[ebp]
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 _WriteRegistryBytes
  001c1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001c4	85 c0		 test	 eax, eax
  001c6	75 1e		 jne	 SHORT $LN11@CleanLastV

; 8563 : 					MessageBoxW (NULL, GetString ("CLEAN_WINMRU_FAILED"), lpszTitle, ICON_HAND);

  001c8	6a 10		 push	 16			; 00000010H
  001ca	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KHAIBFAM@CLEAN_WINMRU_FAILED?$AA@
  001d5	e8 00 00 00 00	 call	 _GetString
  001da	83 c4 04	 add	 esp, 4
  001dd	50		 push	 eax
  001de	6a 00		 push	 0
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN11@CleanLastV:

; 8564 : 
; 8565 : 				DeleteRegistryValue (regPath, key);

  001e6	8d 45 bc	 lea	 eax, DWORD PTR _key$[ebp]
  001e9	50		 push	 eax
  001ea	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _regPath$[ebp]
  001f0	50		 push	 eax
  001f1	e8 00 00 00 00	 call	 _DeleteRegistryValue

; 8566 : 
; 8567 : 				// Remove ID from MRUList
; 8568 : 				if (IsOSAtLeast (WIN_VISTA))

  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  001fb	83 c4 08	 add	 esp, 8
  001fe	85 c0		 test	 eax, eax
  00200	7f 0c		 jg	 SHORT $LN78@CleanLastV
  00202	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN78@CleanLastV:
  0020e	c1 e0 08	 shl	 eax, 8

; 8569 : 				{
; 8570 : 					int *p = (int *)buf;

  00211	8d bd 34 dd fe
	ff		 lea	 edi, DWORD PTR _buf$2[ebp]
  00217	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor

; 8571 : 					int *pout = (int *)bufout;

  0021d	8d 9d 34 dd fd
	ff		 lea	 ebx, DWORD PTR _bufout$1[ebp]
  00223	c1 e0 08	 shl	 eax, 8
  00226	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  0022c	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H

; 8572 : 					int l;
; 8573 : 
; 8574 : 					l = len = ReadRegistryBytes ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU", "MRUListEx", buf, sizeof (buf));

  00231	8b c7		 mov	 eax, edi
  00233	68 00 00 01 00	 push	 65536			; 00010000H
  00238	50		 push	 eax
  00239	7c 60		 jl	 SHORT $LN12@CleanLastV
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_09FBJLNPFF@MRUListEx?$AA@
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@
  00245	e8 00 00 00 00	 call	 _ReadRegistryBytes
  0024a	83 c4 10	 add	 esp, 16			; 00000010H

; 8575 : 					while (l > 0)

  0024d	85 c0		 test	 eax, eax
  0024f	7e 1f		 jle	 SHORT $LN6@CleanLastV

; 8569 : 				{
; 8570 : 					int *p = (int *)buf;

  00251	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00254	c1 e9 02	 shr	 ecx, 2
  00257	41		 inc	 ecx
$LL5@CleanLastV:

; 8576 : 					{
; 8577 : 						l -= sizeof (int);
; 8578 : 
; 8579 : 						if (*p == id)

  00258	8b 17		 mov	 edx, DWORD PTR [edi]
  0025a	3b d6		 cmp	 edx, esi
  0025c	75 05		 jne	 SHORT $LN14@CleanLastV

; 8580 : 						{
; 8581 : 							p++;
; 8582 : 							len -= sizeof (int);

  0025e	83 e8 04	 sub	 eax, 4

; 8583 : 							continue;

  00261	eb 05		 jmp	 SHORT $LN92@CleanLastV
$LN14@CleanLastV:

; 8584 : 						}
; 8585 : 						*pout++ = *p++;

  00263	89 13		 mov	 DWORD PTR [ebx], edx
  00265	83 c3 04	 add	 ebx, 4
$LN92@CleanLastV:

; 8575 : 					while (l > 0)

  00268	83 c7 04	 add	 edi, 4
  0026b	83 e9 01	 sub	 ecx, 1
  0026e	75 e8		 jne	 SHORT $LL5@CleanLastV
$LN6@CleanLastV:

; 8586 : 					}
; 8587 : 
; 8588 : 					WriteRegistryBytes ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU", "MRUListEx", bufout, len);

  00270	50		 push	 eax
  00271	8d 85 34 dd fd
	ff		 lea	 eax, DWORD PTR _bufout$1[ebp]
  00277	50		 push	 eax
  00278	68 00 00 00 00	 push	 OFFSET ??_C@_09FBJLNPFF@MRUListEx?$AA@
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@FIHCEBDK@Software?2Microsoft?2Windows?2Curre@
  00282	e8 00 00 00 00	 call	 _WriteRegistryBytes
  00287	83 c4 10	 add	 esp, 16			; 00000010H
  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx

; 8608 : 				}
; 8609 : 
; 8610 : 				break;
; 8611 : 			}
; 8612 : 		}
; 8613 : 	}
; 8614 : }

  0028d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00290	33 cd		 xor	 ecx, ebp
  00292	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00297	8b e5		 mov	 esp, ebp
  00299	5d		 pop	 ebp
  0029a	c3		 ret	 0
$LN12@CleanLastV:

; 8589 : 				}
; 8590 : 				else
; 8591 : 				{
; 8592 : 					char *p = buf;
; 8593 : 					char *pout = bufout;
; 8594 : 
; 8595 : 					ReadRegistryString ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU", "MRUList", "", buf, sizeof (buf));

  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_07GIFPBEK@MRUList?$AA@
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@
  002aa	e8 00 00 00 00	 call	 _ReadRegistryString
  002af	83 c4 14	 add	 esp, 20			; 00000014H

; 8596 : 					while (*p)

  002b2	80 bd 34 dd fe
	ff 00		 cmp	 BYTE PTR _buf$2[ebp], 0
  002b9	74 17		 je	 SHORT $LN8@CleanLastV
  002bb	0f 1f 44 00 00	 npad	 5
$LL7@CleanLastV:

; 8597 : 					{
; 8598 : 						if (*p == id)

  002c0	8a 0f		 mov	 cl, BYTE PTR [edi]
  002c2	0f be c1	 movsx	 eax, cl
  002c5	3b c6		 cmp	 eax, esi
  002c7	74 03		 je	 SHORT $LN93@CleanLastV

; 8599 : 						{
; 8600 : 							p++;
; 8601 : 							continue;
; 8602 : 						}
; 8603 : 						*pout++ = *p++;

  002c9	88 0b		 mov	 BYTE PTR [ebx], cl
  002cb	43		 inc	 ebx
$LN93@CleanLastV:

; 8596 : 					while (*p)

  002cc	47		 inc	 edi
  002cd	80 3f 00	 cmp	 BYTE PTR [edi], 0
  002d0	75 ee		 jne	 SHORT $LL7@CleanLastV
$LN8@CleanLastV:

; 8604 : 					}
; 8605 : 					*pout++ = 0;
; 8606 : 
; 8607 : 					WriteRegistryString ("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU", "MRUList", bufout);

  002d2	8d 85 34 dd fd
	ff		 lea	 eax, DWORD PTR _bufout$1[ebp]
  002d8	c6 03 00	 mov	 BYTE PTR [ebx], 0
  002db	50		 push	 eax
  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_07GIFPBEK@MRUList?$AA@
  002e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@PILLFCOM@Software?2Microsoft?2Windows?2Curre@
  002e6	e8 00 00 00 00	 call	 _WriteRegistryString
  002eb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@CleanLastV:

; 8608 : 				}
; 8609 : 
; 8610 : 				break;
; 8611 : 			}
; 8612 : 		}
; 8613 : 	}
; 8614 : }

  002ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi
  002f3	33 cd		 xor	 ecx, ebp
  002f5	5b		 pop	 ebx
  002f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fb	8b e5		 mov	 esp, ebp
  002fd	5d		 pop	 ebp
  002fe	c3		 ret	 0
_CleanLastVisitedMRU ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ManageStartupSeqWiz
_TEXT	SEGMENT
tv85 = -592						; size = 4
_exe$1 = -588						; size = 520
_regk$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_bRemove$ = 8						; size = 4
_arg$ = 12						; size = 4
_ManageStartupSeqWiz PROC				; COMDAT

; 8494 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 02 00
	00		 sub	 esp, 592		; 00000250H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _arg$[ebp]

; 8495 : 	char regk [64];
; 8496 : 
; 8497 : 	GetStartupRegKeyName (regk);

  00017	8d 45 bc	 lea	 eax, DWORD PTR _regk$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _GetStartupRegKeyName
  00020	83 c4 04	 add	 esp, 4

; 8498 : 
; 8499 : 	if (!bRemove)

  00023	83 7d 08 00	 cmp	 DWORD PTR _bRemove$[ebp], 0
  00027	0f 85 e9 00 00
	00		 jne	 $LN2@ManageStar

; 8500 : 	{
; 8501 : 		char exe[MAX_PATH * 2] = { '"' };

  0002d	68 07 02 00 00	 push	 519			; 00000207H
  00032	8d 85 b5 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp+1]
  00038	c6 85 b4 fd ff
	ff 22		 mov	 BYTE PTR _exe$1[ebp], 34 ; 00000022H
  0003f	6a 00		 push	 0
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8502 : 		GetModuleFileName (NULL, exe + 1, sizeof (exe) - 1);

  0004a	8d 85 b5 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp+1]
  00050	68 07 02 00 00	 push	 519			; 00000207H
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 8503 : 
; 8504 : #ifndef VOLFORMAT
; 8505 : 			{
; 8506 : 				char *tmp = NULL;
; 8507 : 
; 8508 : 				if (tmp = strrchr (exe, '\\'))

  0005e	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp]
  00064	6a 5c		 push	 92			; 0000005cH
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _strrchr
  0006c	8b d0		 mov	 edx, eax
  0006e	83 c4 08	 add	 esp, 8
  00071	85 d2		 test	 edx, edx
  00073	74 1c		 je	 SHORT $LN4@ManageStar

; 8509 : 					strcpy (++tmp, "GostCrypt Format.exe");

  00075	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BF@MBKAOEOG@GostCrypt?5Format?4exe?$AA@
  0007c	0f 11 42 01	 movups	 XMMWORD PTR [edx+1], xmm0
  00080	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0BF@MBKAOEOG@GostCrypt?5Format?4exe?$AA@+16
  00086	89 4a 11	 mov	 DWORD PTR [edx+17], ecx
  00089	a0 14 00 00 00	 mov	 al, BYTE PTR ??_C@_0BF@MBKAOEOG@GostCrypt?5Format?4exe?$AA@+20
  0008e	88 42 15	 mov	 BYTE PTR [edx+21], al
$LN4@ManageStar:

; 8510 : 			}
; 8511 : #endif
; 8512 : 
; 8513 : 		if (strlen (arg) > 0)

  00091	8b cb		 mov	 ecx, ebx
  00093	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL9@ManageStar:
  00096	8a 01		 mov	 al, BYTE PTR [ecx]
  00098	41		 inc	 ecx
  00099	84 c0		 test	 al, al
  0009b	75 f9		 jne	 SHORT $LL9@ManageStar
  0009d	2b ca		 sub	 ecx, edx
  0009f	74 4e		 je	 SHORT $LN5@ManageStar

; 8514 : 		{
; 8515 : 			strcat (exe, "\" ");

  000a1	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _exe$1[ebp]
  000a7	49		 dec	 ecx
$LL10@ManageStar:
  000a8	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000ab	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000ae	84 c0		 test	 al, al
  000b0	75 f6		 jne	 SHORT $LL10@ManageStar
  000b2	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02KOPDJAMB@?$CC?5?$AA@
  000b8	66 89 01	 mov	 WORD PTR [ecx], ax
  000bb	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_02KOPDJAMB@?$CC?5?$AA@+2
  000c0	56		 push	 esi
  000c1	57		 push	 edi
  000c2	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 8516 : 			strcat (exe, arg);

  000c5	8b f3		 mov	 esi, ebx
$LL11@ManageStar:
  000c7	8a 03		 mov	 al, BYTE PTR [ebx]
  000c9	43		 inc	 ebx
  000ca	84 c0		 test	 al, al
  000cc	75 f9		 jne	 SHORT $LL11@ManageStar
  000ce	8d bd b4 fd ff
	ff		 lea	 edi, DWORD PTR _exe$1[ebp]
  000d4	2b de		 sub	 ebx, esi
  000d6	4f		 dec	 edi
$LL12@ManageStar:
  000d7	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000da	47		 inc	 edi
  000db	84 c0		 test	 al, al
  000dd	75 f8		 jne	 SHORT $LL12@ManageStar
  000df	8b cb		 mov	 ecx, ebx
  000e1	c1 e9 02	 shr	 ecx, 2
  000e4	f3 a5		 rep movsd
  000e6	8b cb		 mov	 ecx, ebx
  000e8	83 e1 03	 and	 ecx, 3
  000eb	f3 a4		 rep movsb
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
$LN5@ManageStar:

; 8517 : 		}
; 8518 : 
; 8519 : 		WriteRegistryString (regk, "GostCrypt Format", exe);

  000ef	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp]
  000f5	50		 push	 eax
  000f6	8d 45 bc	 lea	 eax, DWORD PTR _regk$[ebp]
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GBMFPGPM@GostCrypt?5Format?$AA@
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 _WriteRegistryString
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	5b		 pop	 ebx

; 8523 : }

  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	33 cd		 xor	 ecx, ebp
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$LN2@ManageStar:

; 8520 : 	}
; 8521 : 	else
; 8522 : 		DeleteRegistryValue (regk, "GostCrypt Format");

  00116	8d 45 bc	 lea	 eax, DWORD PTR _regk$[ebp]
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GBMFPGPM@GostCrypt?5Format?$AA@
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _DeleteRegistryValue

; 8523 : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	83 c4 08	 add	 esp, 8
  0012a	33 cd		 xor	 ecx, ebp
  0012c	5b		 pop	 ebx
  0012d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
_ManageStartupSeqWiz ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ManageStartupSeq
_TEXT	SEGMENT
_exe$1 = -588						; size = 520
_regk$2 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ManageStartupSeq PROC					; COMDAT

; 8449 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 02 00
	00		 sub	 esp, 588		; 0000024cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 8450 : 	if (!IsNonInstallMode ())

  00013	e8 00 00 00 00	 call	 _IsNonInstallMode
  00018	85 c0		 test	 eax, eax
  0001a	0f 85 23 01 00
	00		 jne	 $LN4@ManageStar

; 8451 : 	{
; 8452 : 		char regk [64];
; 8453 : 
; 8454 : 		GetStartupRegKeyName (regk);

  00020	8d 45 bc	 lea	 eax, DWORD PTR _regk$2[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _GetStartupRegKeyName
  00029	83 c4 04	 add	 esp, 4

; 8455 : 
; 8456 : 		if (bStartOnLogon || bMountDevicesOnLogon || bMountFavoritesOnLogon)

  0002c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bStartOnLogon, 0
  00033	75 31		 jne	 SHORT $LN5@ManageStar
  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountDevicesOnLogon, 0
  0003c	75 28		 jne	 SHORT $LN5@ManageStar
  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountFavoritesOnLogon, 0
  00045	75 1f		 jne	 SHORT $LN5@ManageStar

; 8476 : 		}
; 8477 : 		else
; 8478 : 			DeleteRegistryValue (regk, "GostCrypt");

  00047	8d 45 bc	 lea	 eax, DWORD PTR _regk$2[ebp]
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _DeleteRegistryValue
  00055	83 c4 08	 add	 esp, 8

; 8479 : 	}
; 8480 : }

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN5@ManageStar:
  00066	56		 push	 esi
  00067	57		 push	 edi

; 8457 : 		{
; 8458 : 			char exe[MAX_PATH * 2] = { '"' };

  00068	68 07 02 00 00	 push	 519			; 00000207H
  0006d	8d 85 b5 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp+1]
  00073	c6 85 b4 fd ff
	ff 22		 mov	 BYTE PTR _exe$1[ebp], 34 ; 00000022H
  0007a	6a 00		 push	 0
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _memset
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8459 : 
; 8460 : 			GetModuleFileName (NULL, exe + 1, sizeof (exe) - 1);

  00085	8d 85 b5 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp+1]
  0008b	68 07 02 00 00	 push	 519			; 00000207H
  00090	50		 push	 eax
  00091	6a 00		 push	 0
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 8461 : 
; 8462 : #ifdef VOLFORMAT
; 8463 : 			{
; 8464 : 				char *tmp = NULL;
; 8465 : 
; 8466 : 				if (tmp = strrchr (exe, '\\'))
; 8467 : 					strcpy (++tmp, "GostCrypt.exe");
; 8468 : 			}
; 8469 : #endif
; 8470 : 			strcat (exe, "\" /q preferences /a logon");

  00099	8d bd b4 fd ff
	ff		 lea	 edi, DWORD PTR _exe$1[ebp]
  0009f	4f		 dec	 edi
$LL9@ManageStar:
  000a0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000a3	47		 inc	 edi
  000a4	84 c0		 test	 al, al
  000a6	75 f8		 jne	 SHORT $LL9@ManageStar

; 8471 : 
; 8472 : 			if (bMountDevicesOnLogon) strcat (exe, " /a devices");

  000a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountDevicesOnLogon, 0
  000af	b9 06 00 00 00	 mov	 ecx, 6
  000b4	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BK@NFGDLGMG@?$CC?5?1q?5preferences?5?1a?5logon?$AA@
  000b9	f3 a5		 rep movsd
  000bb	66 a5		 movsw
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	74 28		 je	 SHORT $LN6@ManageStar
  000c1	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _exe$1[ebp]
  000c7	49		 dec	 ecx
$LL10@ManageStar:
  000c8	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000cb	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000ce	84 c0		 test	 al, al
  000d0	75 f6		 jne	 SHORT $LL10@ManageStar
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@
  000d7	89 01		 mov	 DWORD PTR [ecx], eax
  000d9	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@+4
  000de	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000e1	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@JCEADJGE@?5?1a?5devices?$AA@+8
  000e6	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN6@ManageStar:

; 8473 : 			if (bMountFavoritesOnLogon) strcat (exe, " /a favorites");

  000e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bMountFavoritesOnLogon, 0
  000f0	74 39		 je	 SHORT $LN7@ManageStar
  000f2	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _exe$1[ebp]
  000f8	49		 dec	 ecx
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@ManageStar:
  00100	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00103	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00106	84 c0		 test	 al, al
  00108	75 f6		 jne	 SHORT $LL11@ManageStar
  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@
  0010f	89 01		 mov	 DWORD PTR [ecx], eax
  00111	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@+4
  00116	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00119	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@+8
  0011e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00121	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@LOPOCHJI@?5?1a?5favorites?$AA@+12
  00127	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax
$LN7@ManageStar:

; 8474 : 
; 8475 : 			WriteRegistryString (regk, "GostCrypt", exe);

  0012b	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _exe$1[ebp]
  00131	50		 push	 eax
  00132	8d 45 bc	 lea	 eax, DWORD PTR _regk$2[ebp]
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _WriteRegistryString
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@ManageStar:

; 8479 : 	}
; 8480 : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
_ManageStartupSeq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SetListScrollHPos
_TEXT	SEGMENT
_hList$ = 8						; size = 4
_topMostVisibleItem$ = 12				; size = 4
_SetListScrollHPos PROC					; COMDAT

; 8429 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 8430 : 	int testedPos = 0;

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _hList$[ebp]
  0000f	33 f6		 xor	 esi, esi
$LL4@SetListScr:

; 8431 : 
; 8432 : 	do
; 8433 : 	{
; 8434 : 		SendMessage (hList, LVM_SCROLL, 0, testedPos);

  00011	56		 push	 esi
  00012	6a 00		 push	 0
  00014	68 14 10 00 00	 push	 4116			; 00001014H
  00019	57		 push	 edi
  0001a	ff d3		 call	 ebx

; 8435 : 
; 8436 : 	} while (ListView_GetTopIndex (hList) < topMostVisibleItem && ++testedPos < 10000);

  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	68 27 10 00 00	 push	 4135			; 00001027H
  00025	57		 push	 edi
  00026	ff d3		 call	 ebx
  00028	3b 45 0c	 cmp	 eax, DWORD PTR _topMostVisibleItem$[ebp]
  0002b	7d 09		 jge	 SHORT $LN5@SetListScr
  0002d	46		 inc	 esi
  0002e	81 fe 10 27 00
	00		 cmp	 esi, 10000		; 00002710H
  00034	7c db		 jl	 SHORT $LL4@SetListScr
$LN5@SetListScr:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 8437 : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_SetListScrollHPos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetCheckBox
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_dlgItem$ = 12						; size = 4
_GetCheckBox PROC					; COMDAT

; 8413 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8414 : 	return IsButtonChecked (GetDlgItem (hwndDlg, dlgItem));

  00003	ff 75 0c	 push	 DWORD PTR _dlgItem$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	68 f0 00 00 00	 push	 240			; 000000f0H
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0001f	48		 dec	 eax
  00020	f7 d8		 neg	 eax
  00022	1b c0		 sbb	 eax, eax
  00024	40		 inc	 eax

; 8415 : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_GetCheckBox ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SetCheckBox
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_dlgItem$ = 12						; size = 4
_state$ = 16						; size = 4
_SetCheckBox PROC					; COMDAT

; 8398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8399 : 	return SendDlgItemMessage (hwndDlg, dlgItem, BM_SETCHECK, state ? BST_CHECKED : BST_UNCHECKED, 0);

  00003	33 c0		 xor	 eax, eax
  00005	39 45 10	 cmp	 DWORD PTR _state$[ebp], eax
  00008	6a 00		 push	 0
  0000a	0f 95 c0	 setne	 al
  0000d	50		 push	 eax
  0000e	68 f1 00 00 00	 push	 241			; 000000f1H
  00013	ff 75 0c	 push	 DWORD PTR _dlgItem$[ebp]
  00016	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 8400 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_SetCheckBox ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DriverUnload
_TEXT	SEGMENT
_dwResult$ = -15580					; size = 4
_hService$ = -15576					; size = 4
_volumesMounted$ = -15572				; size = 4
_hManager$1$ = -15568					; size = 4
_driver$ = -15564					; size = 13940
$T2 = -1624						; size = 1480
$T3 = -144						; size = 94
_status$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_DriverUnload PROC					; COMDAT

; 4155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_DriverUnload
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	b8 cc 3c 00 00	 mov	 eax, 15564		; 00003cccH
  00017	e8 00 00 00 00	 call	 __chkstk
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 4156 : 	MOUNT_LIST_STRUCT driver;
; 4157 : 	int refCount;
; 4158 : 	int volumesMounted;
; 4159 : 	DWORD dwResult;
; 4160 : 	BOOL bResult;
; 4161 : 
; 4162 : 	SC_HANDLE hManager, hService = NULL;

  00036	33 ff		 xor	 edi, edi

; 4163 : 	BOOL bRet;
; 4164 : 	SERVICE_STATUS status;
; 4165 : 	int x;
; 4166 : 	BOOL driverUnloaded = FALSE;

  00038	33 db		 xor	 ebx, ebx

; 4167 : 
; 4168 : 	if (hDriver == INVALID_HANDLE_VALUE)

  0003a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _hDriver, -1
  00041	89 bd 28 c3 ff
	ff		 mov	 DWORD PTR _hService$[ebp], edi
  00047	0f 84 b4 01 00
	00		 je	 $LN45@DriverUnlo

; 4169 : 		return TRUE;
; 4170 : 	
; 4171 : 	try
; 4172 : 	{
; 4173 : 		if (BootEncryption (NULL).GetStatus().DeviceFilterActive)

  0004d	53		 push	 ebx
  0004e	8d 8d a8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00054	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00057	e8 00 00 00 00	 call	 ??0BootEncryption@GostCrypt@@QAE@PAUHWND__@@@Z ; GostCrypt::BootEncryption::BootEncryption
  0005c	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00066	51		 push	 ecx
  00067	8b c8		 mov	 ecx, eax
  00069	e8 00 00 00 00	 call	 ?GetStatus@BootEncryption@GostCrypt@@QAE?AUBootEncryptionStatus@@XZ ; GostCrypt::BootEncryption::GetStatus
  0006e	8d 8d a8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00074	8b 30		 mov	 esi, DWORD PTR [eax]
  00076	e8 00 00 00 00	 call	 ??1BootEncryption@GostCrypt@@QAE@XZ ; GostCrypt::BootEncryption::~BootEncryption
  0007b	85 f6		 test	 esi, esi
  0007d	74 2c		 je	 SHORT $LN33@DriverUnlo
$LN27@DriverUnlo:

; 4252 : 	}
; 4253 : 
; 4254 : 	return FALSE;

  0007f	33 c0		 xor	 eax, eax
$LN1@DriverUnlo:

; 4255 : }

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	33 cd		 xor	 ecx, ebp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
__catch$_DriverUnload$0:

; 4174 : 			return FALSE;
; 4175 : 	}
; 4176 : 	catch (...) { }

  0009d	b8 00 00 00 00	 mov	 eax, $LN41@DriverUnlo
  000a2	c3		 ret	 0
$LN41@DriverUnlo:
  000a3	8b bd 28 c3 ff
	ff		 mov	 edi, DWORD PTR _hService$[ebp]
  000a9	8b df		 mov	 ebx, edi
$LN33@DriverUnlo:

; 4177 : 
; 4178 : 	// Test for mounted volumes
; 4179 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_IS_ANY_VOLUME_MOUNTED, NULL, 0, &volumesMounted, sizeof (volumesMounted), &dwResult, NULL);

  000ab	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeviceIoControl@32
  000b1	8d 85 24 c3 ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  000b7	6a 00		 push	 0
  000b9	50		 push	 eax
  000ba	6a 04		 push	 4
  000bc	8d 85 2c c3 ff
	ff		 lea	 eax, DWORD PTR _volumesMounted$[ebp]
  000c2	50		 push	 eax
  000c3	6a 00		 push	 0
  000c5	6a 00		 push	 0
  000c7	68 28 20 22 00	 push	 2236456			; 00222028H
  000cc	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  000d2	ff d6		 call	 esi

; 4180 : 
; 4181 : 	if (!bResult)

  000d4	85 c0		 test	 eax, eax
  000d6	75 3b		 jne	 SHORT $LN42@DriverUnlo

; 4182 : 	{
; 4183 : 		bResult = DeviceIoControl (hDriver, GST_IOCTL_LEGACY_GET_MOUNTED_VOLUMES, NULL, 0, &driver, sizeof (driver), &dwResult, NULL);

  000d8	50		 push	 eax
  000d9	8d 85 24 c3 ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  000df	50		 push	 eax
  000e0	68 74 36 00 00	 push	 13940			; 00003674H
  000e5	8d 85 34 c3 ff
	ff		 lea	 eax, DWORD PTR _driver$[ebp]
  000eb	50		 push	 eax
  000ec	6a 00		 push	 0
  000ee	6a 00		 push	 0
  000f0	68 04 20 07 00	 push	 466948			; 00072004H
  000f5	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  000fb	ff d6		 call	 esi

; 4184 : 		if (bResult)

  000fd	85 c0		 test	 eax, eax
  000ff	0f 84 fc 00 00
	00		 je	 $LN45@DriverUnlo

; 4185 : 			volumesMounted = driver.ulMountedDrives;

  00105	8b 85 34 c3 ff
	ff		 mov	 eax, DWORD PTR _driver$[ebp]
  0010b	89 85 2c c3 ff
	ff		 mov	 DWORD PTR _volumesMounted$[ebp], eax
  00111	eb 06		 jmp	 SHORT $LN40@DriverUnlo
$LN42@DriverUnlo:

; 4191 : 			return FALSE;
; 4192 : 	}
; 4193 : 	else
; 4194 : 		return TRUE;

  00113	8b 85 2c c3 ff
	ff		 mov	 eax, DWORD PTR _volumesMounted$[ebp]
$LN40@DriverUnlo:

; 4186 : 	}
; 4187 : 
; 4188 : 	if (bResult)
; 4189 : 	{
; 4190 : 		if (volumesMounted != 0)

  00119	85 c0		 test	 eax, eax
  0011b	0f 85 5e ff ff
	ff		 jne	 $LN27@DriverUnlo

; 4195 : 
; 4196 : 	// Test for any applications attached to driver
; 4197 : 	refCount = GetDriverRefCount ();

  00121	e8 00 00 00 00	 call	 _GetDriverRefCount

; 4198 : 
; 4199 : 	if (refCount > 1)

  00126	83 f8 01	 cmp	 eax, 1
  00129	0f 8f 50 ff ff
	ff		 jg	 $LN27@DriverUnlo

; 4200 : 		return FALSE;
; 4201 : 
; 4202 : 	CloseHandle (hDriver);

  0012f	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 4203 : 	hDriver = INVALID_HANDLE_VALUE;
; 4204 : 
; 4205 : 	// Stop driver service
; 4206 : 
; 4207 : 	hManager = OpenSCManager (NULL, NULL, SC_MANAGER_ALL_ACCESS);

  0013b	68 3f 00 0f 00	 push	 983103			; 000f003fH
  00140	6a 00		 push	 0
  00142	6a 00		 push	 0
  00144	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _hDriver, -1
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerA@12
  00154	89 85 30 c3 ff
	ff		 mov	 DWORD PTR _hManager$1$[ebp], eax

; 4208 : 	if (hManager == NULL)

  0015a	85 c0		 test	 eax, eax
  0015c	74 6f		 je	 SHORT $error$46

; 4209 : 		goto error;
; 4210 : 
; 4211 : 	hService = OpenService (hManager, "gostcrypt", SERVICE_ALL_ACCESS);

  0015e	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_09JCILFBFB@gostcrypt?$AA@
  00168	50		 push	 eax
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceA@12
  0016f	8b f8		 mov	 edi, eax

; 4212 : 	if (hService == NULL)

  00171	85 ff		 test	 edi, edi
  00173	74 67		 je	 SHORT $LN43@DriverUnlo

; 4213 : 		goto error;
; 4214 : 
; 4215 : 	bRet = QueryServiceStatus (hService, &status);

  00175	8d 45 d0	 lea	 eax, DWORD PTR _status$[ebp]
  00178	50		 push	 eax
  00179	57		 push	 edi
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatus@8

; 4216 : 	if (bRet != TRUE)

  00180	83 f8 01	 cmp	 eax, 1
  00183	75 48		 jne	 SHORT $error$46

; 4217 : 		goto error;
; 4218 : 
; 4219 : 	if (status.dwCurrentState != SERVICE_STOPPED)

  00185	39 45 d4	 cmp	 DWORD PTR _status$[ebp+4], eax
  00188	74 3e		 je	 SHORT $LN20@DriverUnlo

; 4220 : 	{
; 4221 : 		ControlService (hService, SERVICE_CONTROL_STOP, &status);

  0018a	8d 45 d0	 lea	 eax, DWORD PTR _status$[ebp]
  0018d	50		 push	 eax
  0018e	6a 01		 push	 1
  00190	57		 push	 edi
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ControlService@12

; 4222 : 
; 4223 : 		for (x = 0; x < 10; x++)

  00197	33 f6		 xor	 esi, esi
  00199	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@DriverUnlo:

; 4224 : 		{
; 4225 : 			bRet = QueryServiceStatus (hService, &status);

  001a0	8d 45 d0	 lea	 eax, DWORD PTR _status$[ebp]
  001a3	50		 push	 eax
  001a4	57		 push	 edi
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatus@8

; 4226 : 			if (bRet != TRUE)

  001ab	83 f8 01	 cmp	 eax, 1
  001ae	75 1d		 jne	 SHORT $error$46

; 4227 : 				goto error;
; 4228 : 
; 4229 : 			if (status.dwCurrentState == SERVICE_STOPPED)

  001b0	39 45 d4	 cmp	 DWORD PTR _status$[ebp+4], eax
  001b3	74 13		 je	 SHORT $LN20@DriverUnlo

; 4230 : 			{
; 4231 : 				driverUnloaded = TRUE;
; 4232 : 				break;
; 4233 : 			}
; 4234 : 
; 4235 : 			Sleep (200);

  001b5	68 c8 00 00 00	 push	 200			; 000000c8H
  001ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  001c0	46		 inc	 esi
  001c1	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  001c4	7c da		 jl	 SHORT $LL4@DriverUnlo

; 4227 : 				goto error;
; 4228 : 
; 4229 : 			if (status.dwCurrentState == SERVICE_STOPPED)

  001c6	eb 05		 jmp	 SHORT $error$46
$LN20@DriverUnlo:

; 4236 : 		}
; 4237 : 	}
; 4238 : 	else
; 4239 : 		driverUnloaded = TRUE;

  001c8	bb 01 00 00 00	 mov	 ebx, 1
$error$46:

; 4240 : 
; 4241 : error:
; 4242 : 	if (hService != NULL)

  001cd	85 ff		 test	 edi, edi
  001cf	74 0b		 je	 SHORT $LN43@DriverUnlo

; 4243 : 		CloseServiceHandle (hService);

  001d1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseServiceHandle@4
  001d7	57		 push	 edi
  001d8	ff d6		 call	 esi
  001da	eb 06		 jmp	 SHORT $LN25@DriverUnlo
$LN43@DriverUnlo:
  001dc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseServiceHandle@4
$LN25@DriverUnlo:

; 4244 : 
; 4245 : 	if (hManager != NULL)

  001e2	8b 85 30 c3 ff
	ff		 mov	 eax, DWORD PTR _hManager$1$[ebp]
  001e8	85 c0		 test	 eax, eax
  001ea	74 03		 je	 SHORT $LN26@DriverUnlo

; 4246 : 		CloseServiceHandle (hManager);

  001ec	50		 push	 eax
  001ed	ff d6		 call	 esi
$LN26@DriverUnlo:
  001ef	85 db		 test	 ebx, ebx

; 4247 : 
; 4248 : 	if (driverUnloaded)

  001f1	0f 84 88 fe ff
	ff		 je	 $LN27@DriverUnlo

; 4249 : 	{
; 4250 : 		hDriver = INVALID_HANDLE_VALUE;

  001f7	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _hDriver, -1
$LN45@DriverUnlo:

; 4251 : 		return TRUE;

  00201	b8 01 00 00 00	 mov	 eax, 1
  00206	e9 76 fe ff ff	 jmp	 $LN1@DriverUnlo
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_DriverUnload$6:
  00000	8d 8d a8 f9 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1BootEncryption@GostCrypt@@QAE@XZ ; GostCrypt::BootEncryption::~BootEncryption
__ehhandler$_DriverUnload:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 20 c3 ff
	ff		 mov	 ecx, DWORD PTR [edx-15584]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_DriverUnload
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_DriverUnload ENDP
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsNonInstallMode
_TEXT	SEGMENT
_dw$ = -532						; size = 4
_hkey$ = -528						; size = 4
_path$1 = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_IsNonInstallMode PROC					; COMDAT

; 8315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 8316 : 	HKEY hkey;
; 8317 : 	DWORD dw;
; 8318 : 
; 8319 : 	if (bPortableModeConfirmed)

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bPortableModeConfirmed@@3HA, 0 ; bPortableModeConfirmed
  0001a	75 39		 jne	 SHORT $LN12@IsNonInsta

; 8320 : 		return TRUE;
; 8321 : 
; 8322 : 	if (hDriver != INVALID_HANDLE_VALUE)

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver

; 8323 : 	{
; 8324 : 		// The driver is running
; 8325 : 		if (DeviceIoControl (hDriver, GST_IOCTL_GET_PORTABLE_MODE_STATUS, NULL, 0, NULL, 0, &dw, 0))

  00021	6a 00		 push	 0
  00023	83 f8 ff	 cmp	 eax, -1
  00026	74 40		 je	 SHORT $LN3@IsNonInsta
  00028	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _dw$[ebp]
  0002e	51		 push	 ecx
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	68 64 20 22 00	 push	 2236516			; 00222064H
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00043	85 c0		 test	 eax, eax
  00045	0f 84 4d 01 00
	00		 je	 $LN5@IsNonInsta

; 8326 : 		{
; 8327 : 			bPortableModeConfirmed = TRUE;

  0004b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?bPortableModeConfirmed@@3HA, 1 ; bPortableModeConfirmed
$LN12@IsNonInsta:

; 8380 : 		return FALSE;
; 8381 : 	}
; 8382 : 	else
; 8383 : 		return TRUE;

  00055	b8 01 00 00 00	 mov	 eax, 1

; 8384 : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN3@IsNonInsta:

; 8328 : 			return TRUE;
; 8329 : 		}
; 8330 : 		else
; 8331 : 		{
; 8332 : 			// This is also returned if we fail to determine the status (it does not mean that portable mode is disproved).
; 8333 : 			return FALSE;	
; 8334 : 		}
; 8335 : 	}
; 8336 : 	else
; 8337 : 	{
; 8338 : 		// The tests in this block are necessary because this function is in some cases called before DriverAttach().
; 8339 : 
; 8340 : 		HANDLE hDriverTmp = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00068	6a 00		 push	 0
  0006a	6a 03		 push	 3
  0006c	6a 00		 push	 0
  0006e	6a 03		 push	 3
  00070	6a 00		 push	 0
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PFCBNFDJ@?2?2?4?2GostCrypt?$AA@
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28

; 8341 : 
; 8342 : 		if (hDriverTmp == INVALID_HANDLE_VALUE)

  0007d	83 f8 ff	 cmp	 eax, -1
  00080	0f 85 d9 00 00
	00		 jne	 $LN7@IsNonInsta

; 8343 : 		{
; 8344 : 			// The driver was not found in the system path
; 8345 : 
; 8346 : 			char path[MAX_PATH * 2] = { 0 };
; 8347 : 
; 8348 : 			// We can't use GetConfigPath() here because it would call us back (indirect recursion)
; 8349 : 			if (SUCCEEDED(SHGetFolderPath (NULL, CSIDL_APPDATA, NULL, 0, path)))

  00086	68 08 02 00 00	 push	 520			; 00000208H
  0008b	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$1[ebp]
  00091	6a 00		 push	 0
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _memset
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$1[ebp]
  000a2	50		 push	 eax
  000a3	6a 00		 push	 0
  000a5	6a 00		 push	 0
  000a7	6a 1a		 push	 26			; 0000001aH
  000a9	6a 00		 push	 0
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  000b1	85 c0		 test	 eax, eax
  000b3	78 a0		 js	 SHORT $LN12@IsNonInsta

; 8350 : 			{
; 8351 : 				strcat (path, "\\GostCrypt\\");

  000b5	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _path$1[ebp]
  000bb	49		 dec	 ecx
  000bc	0f 1f 40 00	 npad	 4
$LL17@IsNonInsta:
  000c0	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000c3	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000c6	84 c0		 test	 al, al
  000c8	75 f6		 jne	 SHORT $LL17@IsNonInsta
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@
  000cf	89 01		 mov	 DWORD PTR [ecx], eax
  000d1	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@+4
  000d6	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000d9	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@GKPCCOCO@?2GostCrypt?2?$AA@+8
  000de	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 8352 : 				strcat (path, GST_APPD_FILENAME_SYSTEM_ENCRYPTION);

  000e1	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _path$1[ebp]
  000e7	49		 dec	 ecx
$LL18@IsNonInsta:
  000e8	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000eb	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000ee	84 c0		 test	 al, al
  000f0	75 f6		 jne	 SHORT $LL18@IsNonInsta
  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  000f7	89 01		 mov	 DWORD PTR [ecx], eax
  000f9	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+4
  000fe	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00101	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+8
  00106	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00109	a1 0c 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+12
  0010e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00111	a1 10 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+16
  00116	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00119	66 a1 14 00 00
	00		 mov	 ax, WORD PTR ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@+20
  0011f	66 89 41 14	 mov	 WORD PTR [ecx+20], ax

; 8353 : 
; 8354 : 				if (FileExists (path))

  00123	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$1[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _FileExists
  0012f	83 c4 04	 add	 esp, 4
  00132	85 c0		 test	 eax, eax
  00134	0f 84 1b ff ff
	ff		 je	 $LN12@IsNonInsta

; 8355 : 				{
; 8356 : 					// To maintain consistency and safety, if the system encryption config file exits, we cannot
; 8357 : 					// allow portable mode. (This happens e.g. when the pretest fails and the user selects 
; 8358 : 					// "Last Known Good Configuration" from the Windows boot menu.)
; 8359 : 
; 8360 : 					// However, if UAC elevation is needed, we have to confirm portable mode first (after we are elevated, we won't).
; 8361 : 					if (!IsAdmin () && IsUacSupported ())

  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsUserAnAdmin@0
  00140	85 c0		 test	 eax, eax
  00142	75 54		 jne	 SHORT $LN5@IsNonInsta
  00144	e8 00 00 00 00	 call	 _IsUacSupported
  00149	85 c0		 test	 eax, eax
  0014b	0f 85 04 ff ff
	ff		 jne	 $LN12@IsNonInsta

; 8384 : }

  00151	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00154	33 cd		 xor	 ecx, ebp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
$LN7@IsNonInsta:

; 8362 : 						return TRUE;
; 8363 : 
; 8364 : 					return FALSE;
; 8365 : 				}
; 8366 : 			}
; 8367 : 
; 8368 : 			// As the driver was not found in the system path, we can predict that we will run in portable mode
; 8369 : 			return TRUE;	
; 8370 : 		}
; 8371 : 		else
; 8372 : 			CloseHandle (hDriverTmp);

  0015f	50		 push	 eax
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8373 : 	}
; 8374 : 
; 8375 : 	// The following test may be unreliable in some cases (e.g. after the user selects restore "Last Known Good
; 8376 : 	// Configuration" from the Windows boot menu).
; 8377 : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\GostCrypt", 0, KEY_READ, &hkey) == ERROR_SUCCESS)

  00166	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _hkey$[ebp]
  0016c	50		 push	 eax
  0016d	68 19 00 02 00	 push	 131097			; 00020019H
  00172	6a 00		 push	 0
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@MNMIDBOE@Software?2Microsoft?2Windows?2Curre@
  00179	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00184	85 c0		 test	 eax, eax
  00186	0f 85 c9 fe ff
	ff		 jne	 $LN12@IsNonInsta

; 8378 : 	{
; 8379 : 		RegCloseKey (hkey);

  0018c	ff b5 f0 fd ff
	ff		 push	 DWORD PTR _hkey$[ebp]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN5@IsNonInsta:

; 8384 : }

  00198	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019b	33 c0		 xor	 eax, eax
  0019d	33 cd		 xor	 ecx, ebp
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_IsNonInstallMode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _PrintHardCopyTextUTF16
_TEXT	SEGMENT
_text$GSCopy$1$ = -1576					; size = 4
_bytesWritten$1 = -1572					; size = 4
_bytesWritten$2 = -1572					; size = 4
_cl$ = -1568						; size = 780
_filename$ = -788					; size = 261
_path$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_text$ = 8						; size = 4
_title$ = 12						; size = 4
_textByteLen$ = 16					; size = 4
_PrintHardCopyTextUTF16 PROC				; COMDAT

; 8257 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 06 00
	00		 sub	 esp, 1576		; 00000628H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _text$[ebp]
  00016	89 85 d8 f9 ff
	ff		 mov	 DWORD PTR _text$GSCopy$1$[ebp], eax

; 8258 : 	char cl [MAX_PATH*3] = {"/p \""};

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04IOIMBAGL@?1p?5?$CC?$AA@
  00021	89 85 e0 f9 ff
	ff		 mov	 DWORD PTR _cl$[ebp], eax
  00027	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04IOIMBAGL@?1p?5?$CC?$AA@+4
  0002c	68 07 03 00 00	 push	 775			; 00000307H
  00031	88 85 e4 f9 ff
	ff		 mov	 BYTE PTR _cl$[ebp+4], al
  00037	8d 85 e5 f9 ff
	ff		 lea	 eax, DWORD PTR _cl$[ebp+5]
  0003d	6a 00		 push	 0
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _memset
  00045	68 08 02 00 00	 push	 520			; 00000208H
  0004a	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  00050	6a 00		 push	 0
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memset
  00058	68 05 01 00 00	 push	 261			; 00000105H
  0005d	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  00063	6a 00		 push	 0
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset

; 8259 : 	char path [MAX_PATH * 2] = { 0 };
; 8260 : 	char filename [MAX_PATH + 1] = { 0 };
; 8261 : 
; 8262 : 	strcpy (filename, title);

  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _title$[ebp]
  0006e	8d 95 ec fc ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  00074	83 c4 24	 add	 esp, 36			; 00000024H
  00077	2b d1		 sub	 edx, ecx
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@PrintHardC:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00085	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00089	84 c0		 test	 al, al
  0008b	75 f3		 jne	 SHORT $LL8@PrintHardC

; 8263 : 	//strcat (filename, ".txt");
; 8264 : 
; 8265 : 	GetTempPath (sizeof (path), path);

  0008d	56		 push	 esi
  0008e	57		 push	 edi
  0008f	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  00095	50		 push	 eax
  00096	68 08 02 00 00	 push	 520			; 00000208H
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8

; 8266 : 
; 8267 : 	if (!FileExists (path))

  000a1	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _FileExists
  000ad	83 c4 04	 add	 esp, 4
  000b0	85 c0		 test	 eax, eax
  000b2	75 52		 jne	 SHORT $LN2@PrintHardC

; 8268 : 	{
; 8269 : 		strcpy (path, GetConfigPath (filename));

  000b4	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _filename$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _GetConfigPath
  000c0	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _path$[ebp]
  000c6	83 c4 04	 add	 esp, 4
  000c9	2b d0		 sub	 edx, eax
  000cb	0f 1f 44 00 00	 npad	 5
$LL9@PrintHardC:
  000d0	8a 08		 mov	 cl, BYTE PTR [eax]
  000d2	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000d5	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  000d9	84 c9		 test	 cl, cl
  000db	75 f3		 jne	 SHORT $LL9@PrintHardC

; 8270 : 
; 8271 : 		if (strlen(path) < 2)

  000dd	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  000e3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL46@PrintHardC:
  000e6	8a 01		 mov	 al, BYTE PTR [ecx]
  000e8	41		 inc	 ecx
  000e9	84 c0		 test	 al, al
  000eb	75 f9		 jne	 SHORT $LL46@PrintHardC
  000ed	2b ca		 sub	 ecx, edx
  000ef	83 f9 02	 cmp	 ecx, 2
  000f2	73 42		 jae	 SHORT $LN3@PrintHardC

; 8272 : 			return FALSE;

  000f4	5f		 pop	 edi
  000f5	33 c0		 xor	 eax, eax
  000f7	5e		 pop	 esi

; 8302 : 
; 8303 : 	return TRUE;
; 8304 : }

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
$LN2@PrintHardC:

; 8273 : 	}
; 8274 : 	else
; 8275 : 	{
; 8276 : 		strcat (path, filename);

  00106	8d 95 ec fc ff
	ff		 lea	 edx, DWORD PTR _filename$[ebp]
  0010c	8b f2		 mov	 esi, edx
  0010e	66 90		 npad	 2
$LL47@PrintHardC:
  00110	8a 02		 mov	 al, BYTE PTR [edx]
  00112	42		 inc	 edx
  00113	84 c0		 test	 al, al
  00115	75 f9		 jne	 SHORT $LL47@PrintHardC
  00117	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _path$[ebp]
  0011d	2b d6		 sub	 edx, esi
  0011f	4f		 dec	 edi
$LL48@PrintHardC:
  00120	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00123	47		 inc	 edi
  00124	84 c0		 test	 al, al
  00126	75 f8		 jne	 SHORT $LL48@PrintHardC
  00128	8b ca		 mov	 ecx, edx
  0012a	c1 e9 02	 shr	 ecx, 2
  0012d	f3 a5		 rep movsd
  0012f	8b ca		 mov	 ecx, edx
  00131	83 e1 03	 and	 ecx, 3
  00134	f3 a4		 rep movsb
$LN3@PrintHardC:

; 8277 : 	}
; 8278 : 
; 8279 : 	// Write the Unicode signature
; 8280 : 	if (!SaveBufferToFile ("\xFF\xFE", path, 2, FALSE))

  00136	6a 00		 push	 0
  00138	6a 00		 push	 0
  0013a	6a 02		 push	 2
  0013c	6a 00		 push	 0
  0013e	6a 03		 push	 3
  00140	68 00 00 00 40	 push	 1073741824		; 40000000H
  00145	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  0014b	be 01 00 00 00	 mov	 esi, 1
  00150	50		 push	 eax
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00157	8b f8		 mov	 edi, eax
  00159	83 ff ff	 cmp	 edi, -1
  0015c	75 2f		 jne	 SHORT $LN11@PrintHardC
$LN53@PrintHardC:
  0015e	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00164	e8 00 00 00 00	 call	 _handleWin32Error
  00169	83 c4 04	 add	 esp, 4

; 8281 : 	{
; 8282 : 		remove (path);

  0016c	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _remove
  00178	83 c4 04	 add	 esp, 4

; 8283 : 		return FALSE;

  0017b	33 c0		 xor	 eax, eax
  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi

; 8302 : 
; 8303 : 	return TRUE;
; 8304 : }

  0017f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00182	33 cd		 xor	 ecx, ebp
  00184	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0

; 8277 : 	}
; 8278 : 
; 8279 : 	// Write the Unicode signature
; 8280 : 	if (!SaveBufferToFile ("\xFF\xFE", path, 2, FALSE))

$LN11@PrintHardC:
  0018d	6a 00		 push	 0
  0018f	8d 85 dc f9 ff
	ff		 lea	 eax, DWORD PTR _bytesWritten$2[ebp]
  00195	50		 push	 eax
  00196	6a 02		 push	 2
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_02DEBJNODD@?$PP?$PO?$AA@
  0019d	57		 push	 edi
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  001a4	85 c0		 test	 eax, eax
  001a6	74 09		 je	 SHORT $LN14@PrintHardC
  001a8	83 bd dc f9 ff
	ff 02		 cmp	 DWORD PTR _bytesWritten$2[ebp], 2
  001af	74 1d		 je	 SHORT $LN16@PrintHardC
$LN14@PrintHardC:
  001b1	33 f6		 xor	 esi, esi
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001b9	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  001be	74 0e		 je	 SHORT $LN16@PrintHardC
  001c0	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  001c6	e8 00 00 00 00	 call	 _handleWin32Error
  001cb	83 c4 04	 add	 esp, 4
$LN16@PrintHardC:
  001ce	57		 push	 edi
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  001d5	85 f6		 test	 esi, esi
  001d7	75 34		 jne	 SHORT $LN5@PrintHardC
  001d9	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _remove
  001e5	83 c4 04	 add	 esp, 4
  001e8	85 f6		 test	 esi, esi
  001ea	75 21		 jne	 SHORT $LN5@PrintHardC
$LN42@PrintHardC:

; 8281 : 	{
; 8282 : 		remove (path);

  001ec	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 _remove
  001f8	83 c4 04	 add	 esp, 4

; 8283 : 		return FALSE;

  001fb	33 c0		 xor	 eax, eax
  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi

; 8302 : 
; 8303 : 	return TRUE;
; 8304 : }

  001ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00202	33 cd		 xor	 ecx, ebp
  00204	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
$LN5@PrintHardC:

; 8284 : 	}
; 8285 : 
; 8286 : 	// Write the actual text
; 8287 : 	if (!SaveBufferToFile ((char *) text, path, textByteLen, TRUE))

  0020d	6a 00		 push	 0
  0020f	6a 00		 push	 0
  00211	6a 03		 push	 3
  00213	6a 00		 push	 0
  00215	6a 03		 push	 3
  00217	68 00 00 00 40	 push	 1073741824		; 40000000H
  0021c	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  00222	bf 01 00 00 00	 mov	 edi, 1
  00227	50		 push	 eax
  00228	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0022e	8b f0		 mov	 esi, eax
  00230	83 fe ff	 cmp	 esi, -1
  00233	0f 84 25 ff ff
	ff		 je	 $LN53@PrintHardC
  00239	6a 02		 push	 2
  0023b	6a 00		 push	 0
  0023d	6a 00		 push	 0
  0023f	56		 push	 esi
  00240	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00246	6a 00		 push	 0
  00248	8d 85 dc f9 ff
	ff		 lea	 eax, DWORD PTR _bytesWritten$1[ebp]
  0024e	50		 push	 eax
  0024f	ff 75 10	 push	 DWORD PTR _textByteLen$[ebp]
  00252	ff b5 d8 f9 ff
	ff		 push	 DWORD PTR _text$GSCopy$1$[ebp]
  00258	56		 push	 esi
  00259	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0025f	85 c0		 test	 eax, eax
  00261	74 0b		 je	 SHORT $LN24@PrintHardC
  00263	8b 45 10	 mov	 eax, DWORD PTR _textByteLen$[ebp]
  00266	3b 85 dc f9 ff
	ff		 cmp	 eax, DWORD PTR _bytesWritten$1[ebp]
  0026c	74 16		 je	 SHORT $LN26@PrintHardC
$LN24@PrintHardC:
  0026e	33 ff		 xor	 edi, edi
  00270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00276	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0027c	e8 00 00 00 00	 call	 _handleWin32Error
  00281	83 c4 04	 add	 esp, 4
$LN26@PrintHardC:
  00284	56		 push	 esi
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0028b	85 ff		 test	 edi, edi
  0028d	0f 84 59 ff ff
	ff		 je	 $LN42@PrintHardC

; 8288 : 	{
; 8289 : 		remove (path);
; 8290 : 		return FALSE;
; 8291 : 	}
; 8292 : 
; 8293 : 	strcat (cl, path);

  00293	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _path$[ebp]
  00299	8b f2		 mov	 esi, edx
  0029b	0f 1f 44 00 00	 npad	 5
$LL49@PrintHardC:
  002a0	8a 02		 mov	 al, BYTE PTR [edx]
  002a2	42		 inc	 edx
  002a3	84 c0		 test	 al, al
  002a5	75 f9		 jne	 SHORT $LL49@PrintHardC
  002a7	8d bd e0 f9 ff
	ff		 lea	 edi, DWORD PTR _cl$[ebp]
  002ad	2b d6		 sub	 edx, esi
  002af	4f		 dec	 edi
$LL50@PrintHardC:
  002b0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  002b3	47		 inc	 edi
  002b4	84 c0		 test	 al, al
  002b6	75 f8		 jne	 SHORT $LL50@PrintHardC
  002b8	8b ca		 mov	 ecx, edx
  002ba	c1 e9 02	 shr	 ecx, 2
  002bd	f3 a5		 rep movsd
  002bf	8b ca		 mov	 ecx, edx
  002c1	83 e1 03	 and	 ecx, 3
  002c4	f3 a4		 rep movsb

; 8294 : 	strcat (cl, "\"");

  002c6	8d bd e0 f9 ff
	ff		 lea	 edi, DWORD PTR _cl$[ebp]
  002cc	4f		 dec	 edi
  002cd	0f 1f 00	 npad	 3
$LL51@PrintHardC:
  002d0	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  002d3	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  002d6	84 c0		 test	 al, al
  002d8	75 f6		 jne	 SHORT $LL51@PrintHardC
  002da	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BJJEKLCA@?$CC?$AA@

; 8295 : 
; 8296 : 	WaitCursor ();

  002e0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__LoadCursorA@8
  002e6	66 89 07	 mov	 WORD PTR [edi], ax
  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A
  002ee	85 c0		 test	 eax, eax
  002f0	75 0e		 jne	 SHORT $LN31@PrintHardC
  002f2	68 02 7f 00 00	 push	 32514			; 00007f02H
  002f7	6a 00		 push	 0
  002f9	ff d6		 call	 esi
  002fb	a3 00 00 00 00	 mov	 DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A, eax
$LN31@PrintHardC:
  00300	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetCursor@4
  00306	50		 push	 eax
  00307	ff d7		 call	 edi
  00309	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A

; 8297 : 	ShellExecute (NULL, "open", PRINT_TOOL, cl, NULL, SW_HIDE);

  0030e	6a 00		 push	 0
  00310	6a 00		 push	 0
  00312	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor
  00317	8d 85 e0 f9 ff
	ff		 lea	 eax, DWORD PTR _cl$[ebp]
  0031d	50		 push	 eax
  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_07MAJILGNB@notepad?$AA@
  00323	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00328	6a 00		 push	 0
  0032a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 8298 : 	Sleep (6000);

  00330	68 70 17 00 00	 push	 6000			; 00001770H
  00335	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 8299 : 	NormalCursor();

  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  00340	85 c0		 test	 eax, eax
  00342	75 0d		 jne	 SHORT $LN34@PrintHardC
  00344	68 00 7f 00 00	 push	 32512			; 00007f00H
  00349	50		 push	 eax
  0034a	ff d6		 call	 esi
  0034c	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN34@PrintHardC:
  00351	50		 push	 eax
  00352	ff d7		 call	 edi

; 8300 : 
; 8301 : 	remove (path);

  00354	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  0035a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 _remove

; 8302 : 
; 8303 : 	return TRUE;
; 8304 : }

  0036a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036d	83 c4 04	 add	 esp, 4
  00370	33 cd		 xor	 ecx, ebp
  00372	b8 01 00 00 00	 mov	 eax, 1
  00377	5f		 pop	 edi
  00378	5e		 pop	 esi
  00379	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0037e	8b e5		 mov	 esp, ebp
  00380	5d		 pop	 ebp
  00381	c3		 ret	 0
_PrintHardCopyTextUTF16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GSTFlushFile
_TEXT	SEGMENT
_f$ = 8							; size = 4
_GSTFlushFile PROC					; COMDAT

; 8231 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 8232 : 	HANDLE hf = (HANDLE) _get_osfhandle (_fileno (f));

  00004	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00007	e8 00 00 00 00	 call	 __fileno
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __get_osfhandle

; 8233 : 
; 8234 : 	fflush (f);

  00012	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00015	8b f8		 mov	 edi, eax
  00017	e8 00 00 00 00	 call	 _fflush
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8235 : 
; 8236 : 	if (hf == INVALID_HANDLE_VALUE)

  0001f	83 ff ff	 cmp	 edi, -1
  00022	75 05		 jne	 SHORT $LN2@GSTFlushFi

; 8237 : 		return FALSE;

  00024	33 c0		 xor	 eax, eax
  00026	5f		 pop	 edi

; 8240 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@GSTFlushFi:

; 8238 : 
; 8239 : 	return FlushFileBuffers (hf) != 0;

  00029	57		 push	 edi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushFileBuffers@4
  00030	f7 d8		 neg	 eax
  00032	5f		 pop	 edi
  00033	1b c0		 sbb	 eax, eax
  00035	f7 d8		 neg	 eax

; 8240 : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_GSTFlushFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SaveBufferToFile
_TEXT	SEGMENT
_inputBuffer$ = 8					; size = 4
_destinationFile$ = 12					; size = 4
_inputLength$ = 16					; size = 4
_bytesWritten$ = 20					; size = 4
_bAppend$ = 20						; size = 4
_SaveBufferToFile PROC					; COMDAT

; 8180 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 8181 : 	HANDLE dst;
; 8182 : 	DWORD bytesWritten;
; 8183 : 	BOOL res = TRUE;
; 8184 : 
; 8185 : 	dst = CreateFile (destinationFile,

  00005	8b 75 14	 mov	 esi, DWORD PTR _bAppend$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	57		 push	 edi
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	85 f6		 test	 esi, esi
  00011	bb 01 00 00 00	 mov	 ebx, 1
  00016	0f 95 c0	 setne	 al
  00019	83 c0 02	 add	 eax, 2
  0001c	50		 push	 eax
  0001d	6a 00		 push	 0
  0001f	6a 03		 push	 3
  00021	68 00 00 00 40	 push	 1073741824		; 40000000H
  00026	ff 75 0c	 push	 DWORD PTR _destinationFile$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0002f	8b f8		 mov	 edi, eax

; 8186 : 		GENERIC_WRITE,
; 8187 : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, bAppend ? OPEN_EXISTING : CREATE_ALWAYS, 0, NULL);
; 8188 : 
; 8189 : 	if (dst == INVALID_HANDLE_VALUE)

  00031	83 ff ff	 cmp	 edi, -1
  00034	75 15		 jne	 SHORT $LN2@SaveBuffer

; 8190 : 	{
; 8191 : 		handleWin32Error (MainDlg);

  00036	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0003c	e8 00 00 00 00	 call	 _handleWin32Error
  00041	83 c4 04	 add	 esp, 4

; 8192 : 		return FALSE;

  00044	33 c0		 xor	 eax, eax
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 8218 : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN2@SaveBuffer:

; 8193 : 	}
; 8194 : 
; 8195 : 	if (bAppend)

  0004b	85 f6		 test	 esi, esi
  0004d	74 0d		 je	 SHORT $LN3@SaveBuffer

; 8196 : 		SetFilePointer (dst, 0, NULL, FILE_END);

  0004f	6a 02		 push	 2
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	57		 push	 edi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
$LN3@SaveBuffer:

; 8197 : 
; 8198 : 	if (!WriteFile (dst, inputBuffer, inputLength, &bytesWritten, NULL)
; 8199 : 		|| inputLength != bytesWritten)

  0005c	6a 00		 push	 0
  0005e	8d 45 14	 lea	 eax, DWORD PTR _bytesWritten$[ebp]
  00061	50		 push	 eax
  00062	ff 75 10	 push	 DWORD PTR _inputLength$[ebp]
  00065	ff 75 08	 push	 DWORD PTR _inputBuffer$[ebp]
  00068	57		 push	 edi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0006f	85 c0		 test	 eax, eax
  00071	74 08		 je	 SHORT $LN5@SaveBuffer
  00073	8b 45 10	 mov	 eax, DWORD PTR _inputLength$[ebp]
  00076	3b 45 14	 cmp	 eax, DWORD PTR _bytesWritten$[ebp]
  00079	74 21		 je	 SHORT $LN7@SaveBuffer
$LN5@SaveBuffer:

; 8200 : 	{
; 8201 : 		res = FALSE;

  0007b	33 db		 xor	 ebx, ebx

; 8202 : 	}
; 8203 : 
; 8204 : 	if (!res)
; 8205 : 	{
; 8206 : 		// If CREATE_ALWAYS is used, ERROR_ALREADY_EXISTS is returned after successful overwrite
; 8207 : 		// of an existing file (it's not an error)
; 8208 : 		if (! (GetLastError() == ERROR_ALREADY_EXISTS && !bAppend) )	

  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00083	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00088	75 04		 jne	 SHORT $LN8@SaveBuffer
  0008a	85 f6		 test	 esi, esi
  0008c	74 0e		 je	 SHORT $LN7@SaveBuffer
$LN8@SaveBuffer:

; 8209 : 			handleWin32Error (MainDlg);

  0008e	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00094	e8 00 00 00 00	 call	 _handleWin32Error
  00099	83 c4 04	 add	 esp, 4
$LN7@SaveBuffer:

; 8210 : 	}
; 8211 : 
; 8212 : 	CloseHandle (dst);

  0009c	57		 push	 edi
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000a3	85 db		 test	 ebx, ebx

; 8213 : 
; 8214 : 	if (!res && !bAppend)

  000a5	75 0f		 jne	 SHORT $LN9@SaveBuffer
  000a7	85 f6		 test	 esi, esi
  000a9	75 0b		 jne	 SHORT $LN9@SaveBuffer

; 8215 : 		remove (destinationFile);

  000ab	ff 75 0c	 push	 DWORD PTR _destinationFile$[ebp]
  000ae	e8 00 00 00 00	 call	 _remove
  000b3	83 c4 04	 add	 esp, 4
$LN9@SaveBuffer:

; 8216 : 
; 8217 : 	return res;

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	8b c3		 mov	 eax, ebx
  000ba	5b		 pop	 ebx

; 8218 : }

  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
_SaveBufferToFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GSTCopyFile
_TEXT	SEGMENT
_fileTime$ = -20					; size = 8
_bytesWritten$ = -12					; size = 4
_dst$1$ = -8						; size = 4
_bytesRead$ = -4					; size = 4
_sourceFileName$ = 8					; size = 4
_destinationFile$ = 12					; size = 4
_GSTCopyFile PROC					; COMDAT

; 8108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 8109 : 	__int8 *buffer;
; 8110 : 	HANDLE src, dst;
; 8111 : 	FILETIME fileTime;
; 8112 : 	DWORD bytesRead, bytesWritten;
; 8113 : 	BOOL res;
; 8114 : 
; 8115 : 	src = CreateFile (sourceFileName,

  00008	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__CreateFileA@28
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	6a 03		 push	 3
  00014	6a 00		 push	 0
  00016	6a 03		 push	 3
  00018	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0001d	ff 75 08	 push	 DWORD PTR _sourceFileName$[ebp]
  00020	ff d7		 call	 edi
  00022	8b f0		 mov	 esi, eax

; 8116 : 		GENERIC_READ,
; 8117 : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 8118 : 
; 8119 : 	if (src == INVALID_HANDLE_VALUE)

  00024	83 fe ff	 cmp	 esi, -1
  00027	74 25		 je	 SHORT $LN17@GSTCopyFil

; 8120 : 		return FALSE;
; 8121 : 
; 8122 : 	dst = CreateFile (destinationFile,

  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	6a 02		 push	 2
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	68 00 00 00 40	 push	 1073741824		; 40000000H
  00038	ff 75 0c	 push	 DWORD PTR _destinationFile$[ebp]
  0003b	ff d7		 call	 edi
  0003d	8b f8		 mov	 edi, eax
  0003f	89 7d f8	 mov	 DWORD PTR _dst$1$[ebp], edi

; 8123 : 		GENERIC_WRITE,
; 8124 : 		0, NULL, CREATE_ALWAYS, 0, NULL);
; 8125 : 
; 8126 : 	if (dst == INVALID_HANDLE_VALUE)

  00042	83 ff ff	 cmp	 edi, -1
  00045	75 0f		 jne	 SHORT $LN5@GSTCopyFil

; 8127 : 	{
; 8128 : 		CloseHandle (src);

  00047	56		 push	 esi
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN17@GSTCopyFil:

; 8129 : 		return FALSE;

  0004e	5f		 pop	 edi
  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 8164 : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN5@GSTCopyFil:
  00056	53		 push	 ebx

; 8130 : 	}
; 8131 : 
; 8132 : 	buffer = (char *) malloc (64 * 1024);

  00057	68 00 00 01 00	 push	 65536			; 00010000H
  0005c	e8 00 00 00 00	 call	 _malloc
  00061	8b d8		 mov	 ebx, eax
  00063	83 c4 04	 add	 esp, 4

; 8133 : 	if (!buffer)

  00066	85 db		 test	 ebx, ebx
  00068	75 15		 jne	 SHORT $LN11@GSTCopyFil

; 8134 : 	{
; 8135 : 		CloseHandle (src);

  0006a	56		 push	 esi
  0006b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00071	ff d6		 call	 esi

; 8136 : 		CloseHandle (dst);

  00073	57		 push	 edi
  00074	ff d6		 call	 esi
  00076	5b		 pop	 ebx
  00077	5f		 pop	 edi

; 8137 : 		return FALSE;

  00078	33 c0		 xor	 eax, eax
  0007a	5e		 pop	 esi

; 8164 : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN11@GSTCopyFil:

; 8138 : 	}
; 8139 : 
; 8140 : 	while (res = ReadFile (src, buffer, 64 * 1024, &bytesRead, NULL))

  0007f	6a 00		 push	 0
  00081	8d 45 fc	 lea	 eax, DWORD PTR _bytesRead$[ebp]
  00084	50		 push	 eax
  00085	68 00 00 01 00	 push	 65536			; 00010000H
  0008a	53		 push	 ebx
  0008b	56		 push	 esi
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00092	8b f8		 mov	 edi, eax
  00094	85 ff		 test	 edi, edi
  00096	74 48		 je	 SHORT $LN3@GSTCopyFil
$LL2@GSTCopyFil:

; 8141 : 	{
; 8142 : 		if (bytesRead == 0)

  00098	8b 45 fc	 mov	 eax, DWORD PTR _bytesRead$[ebp]
  0009b	85 c0		 test	 eax, eax
  0009d	74 3c		 je	 SHORT $LN12@GSTCopyFil

; 8145 : 			break;
; 8146 : 		}
; 8147 : 
; 8148 : 		if (!WriteFile (dst, buffer, bytesRead, &bytesWritten, NULL)
; 8149 : 			|| bytesRead != bytesWritten)

  0009f	6a 00		 push	 0
  000a1	8d 4d f4	 lea	 ecx, DWORD PTR _bytesWritten$[ebp]
  000a4	51		 push	 ecx
  000a5	50		 push	 eax
  000a6	53		 push	 ebx
  000a7	ff 75 f8	 push	 DWORD PTR _dst$1$[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  000b0	85 c0		 test	 eax, eax
  000b2	74 23		 je	 SHORT $LN13@GSTCopyFil
  000b4	8b 45 fc	 mov	 eax, DWORD PTR _bytesRead$[ebp]
  000b7	3b 45 f4	 cmp	 eax, DWORD PTR _bytesWritten$[ebp]
  000ba	75 1b		 jne	 SHORT $LN13@GSTCopyFil

; 8138 : 	}
; 8139 : 
; 8140 : 	while (res = ReadFile (src, buffer, 64 * 1024, &bytesRead, NULL))

  000bc	6a 00		 push	 0
  000be	8d 45 fc	 lea	 eax, DWORD PTR _bytesRead$[ebp]
  000c1	50		 push	 eax
  000c2	68 00 00 01 00	 push	 65536			; 00010000H
  000c7	53		 push	 ebx
  000c8	56		 push	 esi
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  000cf	8b f8		 mov	 edi, eax
  000d1	85 ff		 test	 edi, edi
  000d3	75 c3		 jne	 SHORT $LL2@GSTCopyFil

; 8145 : 			break;
; 8146 : 		}
; 8147 : 
; 8148 : 		if (!WriteFile (dst, buffer, bytesRead, &bytesWritten, NULL)
; 8149 : 			|| bytesRead != bytesWritten)

  000d5	eb 09		 jmp	 SHORT $LN3@GSTCopyFil
$LN13@GSTCopyFil:

; 8150 : 		{
; 8151 : 			res = 0;

  000d7	33 ff		 xor	 edi, edi
  000d9	eb 05		 jmp	 SHORT $LN3@GSTCopyFil
$LN12@GSTCopyFil:

; 8143 : 		{
; 8144 : 			res = 1;

  000db	bf 01 00 00 00	 mov	 edi, 1
$LN3@GSTCopyFil:

; 8152 : 			break;
; 8153 : 		}
; 8154 : 	}
; 8155 : 
; 8156 : 	GetFileTime (src, NULL, NULL, &fileTime);

  000e0	8d 45 ec	 lea	 eax, DWORD PTR _fileTime$[ebp]
  000e3	50		 push	 eax
  000e4	6a 00		 push	 0
  000e6	6a 00		 push	 0
  000e8	56		 push	 esi
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16

; 8157 : 	SetFileTime (dst, NULL, NULL, &fileTime);

  000ef	8d 45 ec	 lea	 eax, DWORD PTR _fileTime$[ebp]
  000f2	50		 push	 eax
  000f3	6a 00		 push	 0
  000f5	6a 00		 push	 0
  000f7	ff 75 f8	 push	 DWORD PTR _dst$1$[ebp]
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFileTime@16

; 8158 : 
; 8159 : 	CloseHandle (src);

  00100	56		 push	 esi
  00101	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  00107	ff d6		 call	 esi

; 8160 : 	CloseHandle (dst);

  00109	ff 75 f8	 push	 DWORD PTR _dst$1$[ebp]
  0010c	ff d6		 call	 esi

; 8161 : 
; 8162 : 	free (buffer);

  0010e	53		 push	 ebx
  0010f	e8 00 00 00 00	 call	 _free
  00114	83 c4 04	 add	 esp, 4

; 8163 : 	return res != 0;

  00117	33 c0		 xor	 eax, eax
  00119	85 ff		 test	 edi, edi
  0011b	0f 95 c0	 setne	 al
  0011e	5b		 pop	 ebx
  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi

; 8164 : }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
_GSTCopyFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FindStringInFile
_TEXT	SEGMENT
_seekOffsetNew$ = -52					; size = 8
_size$1 = -44						; size = 8
tv312 = -40						; size = 4
tv313 = -36						; size = 4
_bytesRead$ = -32					; size = 4
_retVal$2$ = -28					; size = 4
_retVal$1$ = -24					; size = 4
_bExit$1$ = -20						; size = 4
_filePos$ = -16						; size = 8
_filePos$1$ = -12					; size = 4
_z$1$ = -12						; size = 4
_src$1$ = -8						; size = 4
_filePos$2$ = -4					; size = 4
_filePath$ = 8						; size = 4
_str$ = 12						; size = 4
_strLen$ = 16						; size = 4
_FindStringInFile PROC					; COMDAT

; 8026 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 8027 : 	int bufSize = 64 * BYTES_PER_KB;
; 8028 : 	char *buffer = (char *) err_malloc (bufSize);

  00006	68 00 00 01 00	 push	 65536			; 00010000H
  0000b	e8 00 00 00 00	 call	 _malloc
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 f4	 mov	 DWORD PTR _z$1$[ebp], eax
  00016	85 c0		 test	 eax, eax
  00018	0f 84 d5 01 00
	00		 je	 $LN48@FindString

; 8029 : 	HANDLE src = NULL;
; 8030 : 	DWORD bytesRead;
; 8031 : 	BOOL readRetVal;
; 8032 : 	__int64 filePos = GetFileSize64 (filePath);

  0001e	53		 push	 ebx
  0001f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CreateFileA@28
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	8b 7d 08	 mov	 edi, DWORD PTR _filePath$[ebp]
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	6a 03		 push	 3
  00030	6a 00		 push	 0
  00032	6a 03		 push	 3
  00034	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00039	57		 push	 edi
  0003a	ff d3		 call	 ebx
  0003c	8b f0		 mov	 esi, eax
  0003e	83 fe ff	 cmp	 esi, -1
  00041	74 74		 je	 SHORT $LN8@FindString
  00043	8d 45 d4	 lea	 eax, DWORD PTR _size$1[ebp]
  00046	50		 push	 eax
  00047	56		 push	 esi
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  0004e	85 c0		 test	 eax, eax
  00050	74 65		 je	 SHORT $LN8@FindString
  00052	56		 push	 esi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00059	8b 45 d8	 mov	 eax, DWORD PTR _size$1[ebp+4]
  0005c	8b 75 d4	 mov	 esi, DWORD PTR _size$1[ebp]
  0005f	89 45 fc	 mov	 DWORD PTR _filePos$2$[ebp], eax

; 8033 : 	int bufPos = 0;
; 8034 : 	LARGE_INTEGER seekOffset, seekOffsetNew;
; 8035 : 	BOOL bExit = FALSE;

  00062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bExit$1$[ebp], 0

; 8036 : 	int filePosStep;
; 8037 : 	__int64 retVal = -1;

  00069	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _retVal$1$[ebp], -1
  00070	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _retVal$2$[ebp], -1

; 8038 : 
; 8039 : 	if (filePos <= 0 
; 8040 : 		|| buffer == NULL 
; 8041 : 		|| strLen > bufSize
; 8042 : 		|| strLen < 1)

  00077	85 c0		 test	 eax, eax
  00079	7c 3c		 jl	 SHORT $LN8@FindString
  0007b	7f 04		 jg	 SHORT $LN38@FindString
  0007d	85 f6		 test	 esi, esi
  0007f	74 36		 je	 SHORT $LN8@FindString
$LN38@FindString:
  00081	8b 45 10	 mov	 eax, DWORD PTR _strLen$[ebp]
  00084	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00089	7f 2c		 jg	 SHORT $LN8@FindString
  0008b	83 f8 01	 cmp	 eax, 1
  0008e	7c 27		 jl	 SHORT $LN8@FindString

; 8043 : 		return -1;
; 8044 : 
; 8045 : 	src = CreateFile (filePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00090	6a 00		 push	 0
  00092	6a 00		 push	 0
  00094	6a 03		 push	 3
  00096	6a 00		 push	 0
  00098	6a 03		 push	 3
  0009a	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0009f	57		 push	 edi
  000a0	ff d3		 call	 ebx
  000a2	8b f8		 mov	 edi, eax
  000a4	89 7d f8	 mov	 DWORD PTR _src$1$[ebp], edi

; 8046 : 
; 8047 : 	if (src == INVALID_HANDLE_VALUE)

  000a7	83 ff ff	 cmp	 edi, -1
  000aa	75 17		 jne	 SHORT $LN9@FindString

; 8048 : 	{
; 8049 : 		free (buffer);

  000ac	ff 75 f4	 push	 DWORD PTR _z$1$[ebp]
  000af	e8 00 00 00 00	 call	 _free
  000b4	83 c4 04	 add	 esp, 4
$LN8@FindString:

; 8050 : 		return -1;

  000b7	5f		 pop	 edi
  000b8	83 c8 ff	 or	 eax, -1
  000bb	5e		 pop	 esi
  000bc	0b d0		 or	 edx, eax
  000be	5b		 pop	 ebx

; 8094 : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
$LN9@FindString:
  000c3	8b 5d f4	 mov	 ebx, DWORD PTR _z$1$[ebp]

; 8051 : 	}
; 8052 : 
; 8053 : 	filePosStep = bufSize - strLen + 1;

  000c6	b8 01 00 01 00	 mov	 eax, 65537		; 00010001H
  000cb	2b 45 10	 sub	 eax, DWORD PTR _strLen$[ebp]
  000ce	99		 cdq
  000cf	8b c8		 mov	 ecx, eax
  000d1	89 55 d8	 mov	 DWORD PTR tv312[ebp], edx
  000d4	89 4d dc	 mov	 DWORD PTR tv313[ebp], ecx
$LL4@FindString:

; 8054 : 
; 8055 : 	do
; 8056 : 	{
; 8057 : 		filePos -= filePosStep;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _filePos$2$[ebp]
  000da	2b f1		 sub	 esi, ecx
  000dc	89 75 f4	 mov	 DWORD PTR _filePos$1$[ebp], esi
  000df	1b c2		 sbb	 eax, edx
  000e1	89 45 fc	 mov	 DWORD PTR _filePos$2$[ebp], eax

; 8058 : 
; 8059 : 		if (filePos < 0)

  000e4	85 c0		 test	 eax, eax
  000e6	7f 21		 jg	 SHORT $LN10@FindString
  000e8	7c 04		 jl	 SHORT $LN39@FindString
  000ea	85 f6		 test	 esi, esi
  000ec	73 1b		 jae	 SHORT $LN10@FindString
$LN39@FindString:
  000ee	0f 57 c0	 xorps	 xmm0, xmm0

; 8060 : 		{
; 8061 : 			filePos = 0;
; 8062 : 			bExit = TRUE;

  000f1	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bExit$1$[ebp], 1
  000f8	66 0f 13 45 f0	 movlpd	 QWORD PTR _filePos$[ebp], xmm0
  000fd	8b 45 f4	 mov	 eax, DWORD PTR _filePos$[ebp+4]
  00100	8b 75 f0	 mov	 esi, DWORD PTR _filePos$[ebp]
  00103	89 45 fc	 mov	 DWORD PTR _filePos$2$[ebp], eax
  00106	89 75 f4	 mov	 DWORD PTR _filePos$1$[ebp], esi
$LN10@FindString:

; 8063 : 		}
; 8064 : 
; 8065 : 		seekOffset.QuadPart = filePos;
; 8066 : 
; 8067 : 		if (SetFilePointerEx (src, seekOffset, &seekOffsetNew, FILE_BEGIN) == 0)

  00109	6a 00		 push	 0
  0010b	8d 4d cc	 lea	 ecx, DWORD PTR _seekOffsetNew$[ebp]
  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	56		 push	 esi
  00111	57		 push	 edi
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00118	85 c0		 test	 eax, eax
  0011a	0f 84 b6 00 00
	00		 je	 $fsif_end$50

; 8068 : 			goto fsif_end;
; 8069 : 
; 8070 : 		if ((readRetVal = ReadFile (src, buffer, bufSize, &bytesRead, NULL)) == 0 
; 8071 : 			|| bytesRead == 0)

  00120	6a 00		 push	 0
  00122	8d 45 e0	 lea	 eax, DWORD PTR _bytesRead$[ebp]
  00125	50		 push	 eax
  00126	68 00 00 01 00	 push	 65536			; 00010000H
  0012b	53		 push	 ebx
  0012c	57		 push	 edi
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00133	85 c0		 test	 eax, eax
  00135	0f 84 9b 00 00
	00		 je	 $fsif_end$50
  0013b	8b 7d e0	 mov	 edi, DWORD PTR _bytesRead$[ebp]
  0013e	85 ff		 test	 edi, edi
  00140	0f 84 8d 00 00
	00		 je	 $LN45@FindString

; 8072 : 			goto fsif_end;
; 8073 : 
; 8074 : 		bufPos = bytesRead - strLen;

  00146	8b 4d 10	 mov	 ecx, DWORD PTR _strLen$[ebp]
  00149	2b f9		 sub	 edi, ecx

; 8075 : 
; 8076 : 		while (bufPos > 0)

  0014b	85 ff		 test	 edi, edi
  0014d	7e 5f		 jle	 SHORT $LN2@FindString
  0014f	90		 npad	 1
$LL5@FindString:

; 8077 : 		{
; 8078 : 			if (memcmp (buffer + bufPos, str, strLen) == 0)

  00150	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  00153	8d 14 3b	 lea	 edx, DWORD PTR [ebx+edi]
  00156	8b f1		 mov	 esi, ecx
  00158	83 ee 04	 sub	 esi, 4
  0015b	72 14		 jb	 SHORT $LN42@FindString
  0015d	0f 1f 00	 npad	 3
$LL43@FindString:
  00160	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00162	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00164	75 10		 jne	 SHORT $LN41@FindString
  00166	83 c2 04	 add	 edx, 4
  00169	83 c0 04	 add	 eax, 4
  0016c	83 ee 04	 sub	 esi, 4
  0016f	73 ef		 jae	 SHORT $LL43@FindString
$LN42@FindString:
  00171	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00174	74 4c		 je	 SHORT $LN40@FindString
$LN41@FindString:
  00176	8a 0a		 mov	 cl, BYTE PTR [edx]
  00178	3a 08		 cmp	 cl, BYTE PTR [eax]
  0017a	75 27		 jne	 SHORT $LN44@FindString
  0017c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0017f	74 41		 je	 SHORT $LN40@FindString
  00181	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  00184	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  00187	75 1a		 jne	 SHORT $LN44@FindString
  00189	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0018c	74 34		 je	 SHORT $LN40@FindString
  0018e	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  00191	3a 48 02	 cmp	 cl, BYTE PTR [eax+2]
  00194	75 0d		 jne	 SHORT $LN44@FindString
  00196	83 fe ff	 cmp	 esi, -1
  00199	74 27		 je	 SHORT $LN40@FindString
  0019b	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  0019e	3a 48 03	 cmp	 cl, BYTE PTR [eax+3]
  001a1	74 1f		 je	 SHORT $LN40@FindString
$LN44@FindString:

; 8075 : 
; 8076 : 		while (bufPos > 0)

  001a3	8b 4d 10	 mov	 ecx, DWORD PTR _strLen$[ebp]

; 8082 : 				goto fsif_end;
; 8083 : 			}
; 8084 : 			bufPos--;

  001a6	4f		 dec	 edi
  001a7	85 ff		 test	 edi, edi
  001a9	7f a5		 jg	 SHORT $LL5@FindString
  001ab	8b 75 f4	 mov	 esi, DWORD PTR _filePos$1$[ebp]
$LN2@FindString:

; 8085 : 		}
; 8086 : 
; 8087 : 	} while (!bExit);

  001ae	83 7d ec 00	 cmp	 DWORD PTR _bExit$1$[ebp], 0
  001b2	8b 7d f8	 mov	 edi, DWORD PTR _src$1$[ebp]
  001b5	75 1f		 jne	 SHORT $fsif_end$50
  001b7	8b 4d dc	 mov	 ecx, DWORD PTR tv313[ebp]
  001ba	8b 55 d8	 mov	 edx, DWORD PTR tv312[ebp]
  001bd	e9 15 ff ff ff	 jmp	 $LL4@FindString
$LN40@FindString:

; 8079 : 			{
; 8080 : 				// String found
; 8081 : 				retVal = filePos + bufPos;

  001c2	8b c7		 mov	 eax, edi
  001c4	99		 cdq
  001c5	03 45 f4	 add	 eax, DWORD PTR _filePos$1$[ebp]
  001c8	8b ca		 mov	 ecx, edx
  001ca	89 45 e8	 mov	 DWORD PTR _retVal$1$[ebp], eax
  001cd	13 4d fc	 adc	 ecx, DWORD PTR _filePos$2$[ebp]
  001d0	89 4d e4	 mov	 DWORD PTR _retVal$2$[ebp], ecx
$LN45@FindString:
  001d3	8b 7d f8	 mov	 edi, DWORD PTR _src$1$[ebp]
$fsif_end$50:

; 8088 : 
; 8089 : fsif_end:
; 8090 : 	CloseHandle (src);

  001d6	57		 push	 edi
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 8091 : 	free (buffer);

  001dd	53		 push	 ebx
  001de	e8 00 00 00 00	 call	 _free

; 8092 : 
; 8093 : 	return retVal;

  001e3	8b 45 e8	 mov	 eax, DWORD PTR _retVal$1$[ebp]
  001e6	83 c4 04	 add	 esp, 4
  001e9	8b 55 e4	 mov	 edx, DWORD PTR _retVal$2$[ebp]
  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi
  001ee	5b		 pop	 ebx

; 8094 : }

  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c3		 ret	 0
$LN48@FindString:

; 8027 : 	int bufSize = 64 * BYTES_PER_KB;
; 8028 : 	char *buffer = (char *) err_malloc (bufSize);

  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  001f8	e8 00 00 00 00	 call	 _AbortProcess
$LN49@FindString:
$LN47@FindString:
  001fd	cc		 int	 3
_FindStringInFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FileExists
_TEXT	SEGMENT
_filePath$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_filePathPtr$ = 8					; size = 4
_FileExists PROC					; COMDAT

; 7991 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 7992 : 	char filePath [GST_MAX_PATH];
; 7993 : 
; 7994 : 	// Strip quotation marks (if any)
; 7995 : 	if (filePathPtr [0] == '"')

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _filePathPtr$[ebp]

; 7996 : 	{
; 7997 : 		strcpy (filePath, filePathPtr + 1);

  00016	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _filePath$[ebp]
  0001c	80 39 22	 cmp	 BYTE PTR [ecx], 34	; 00000022H
  0001f	75 12		 jne	 SHORT $LN2@FileExists
  00021	41		 inc	 ecx
  00022	2b d1		 sub	 edx, ecx
$LL6@FileExists:
  00024	8a 01		 mov	 al, BYTE PTR [ecx]
  00026	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00029	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0002d	84 c0		 test	 al, al
  0002f	75 f3		 jne	 SHORT $LL6@FileExists

; 7998 : 	}
; 7999 : 	else

  00031	eb 0f		 jmp	 SHORT $LN3@FileExists
$LN2@FileExists:

; 8000 : 	{
; 8001 : 		strcpy (filePath, filePathPtr);

  00033	2b d1		 sub	 edx, ecx
$LL7@FileExists:
  00035	8a 01		 mov	 al, BYTE PTR [ecx]
  00037	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0003a	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0003e	84 c0		 test	 al, al
  00040	75 f3		 jne	 SHORT $LL7@FileExists
$LN3@FileExists:

; 8002 : 	}
; 8003 : 
; 8004 : 	// Strip quotation marks (if any)
; 8005 : 	if (filePath [strlen (filePath) - 1] == '"')

  00042	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _filePath$[ebp]
  00048	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0004b	0f 1f 44 00 00	 npad	 5
$LL16@FileExists:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL16@FileExists
  00057	2b ca		 sub	 ecx, edx
  00059	80 bc 0d f7 fe
	ff ff 22	 cmp	 BYTE PTR _filePath$[ebp+ecx-1], 34 ; 00000022H
  00061	75 10		 jne	 SHORT $LN4@FileExists

; 8006 : 		filePath [strlen (filePath) - 1] = 0;

  00063	49		 dec	 ecx
  00064	81 f9 04 01 00
	00		 cmp	 ecx, 260		; 00000104H
  0006a	73 30		 jae	 SHORT $LN18@FileExists
  0006c	88 84 0d f8 fe
	ff ff		 mov	 BYTE PTR _filePath$[ebp+ecx], al
$LN4@FileExists:

; 8007 : 
; 8008 :     return (_access (filePath, 0) != -1);

  00073	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _filePath$[ebp]
  00079	6a 00		 push	 0
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 __access
  00081	33 c9		 xor	 ecx, ecx
  00083	83 c4 08	 add	 esp, 8
  00086	83 f8 ff	 cmp	 eax, -1
  00089	0f 95 c1	 setne	 cl
  0008c	8b c1		 mov	 eax, ecx

; 8009 : }

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00091	33 cd		 xor	 ecx, ebp
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN18@FileExists:

; 8006 : 		filePath [strlen (filePath) - 1] = 0;

  0009c	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN19@FileExists:
$LN17@FileExists:
  000a1	cc		 int	 3
_FileExists ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FindString
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
_buf$ = 8						; size = 4
_str$ = 12						; size = 4
_bufLen$ = 16						; size = 8
_strLen$ = 24						; size = 4
_startOffset$ = 28					; size = 8
_FindString PROC					; COMDAT

; 7961 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7962 : 	if (buf == NULL 
; 7963 : 		|| str == NULL 
; 7964 : 		|| strLen > bufLen
; 7965 : 		|| bufLen < 1
; 7966 : 		|| strLen < 1
; 7967 : 		|| startOffset > bufLen - strLen)

  00003	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	85 d2		 test	 edx, edx
  0000e	0f 84 c7 00 00
	00		 je	 $LN6@FindString
  00014	83 7d 0c 00	 cmp	 DWORD PTR _str$[ebp], 0
  00018	0f 84 bd 00 00
	00		 je	 $LN6@FindString
  0001e	8b 4d 14	 mov	 ecx, DWORD PTR _bufLen$[ebp+4]
  00021	33 ff		 xor	 edi, edi
  00023	8b 75 18	 mov	 esi, DWORD PTR _strLen$[ebp]
  00026	3b f9		 cmp	 edi, ecx
  00028	0f 8f ad 00 00
	00		 jg	 $LN6@FindString
  0002e	8b 45 10	 mov	 eax, DWORD PTR _bufLen$[ebp]
  00031	7c 08		 jl	 SHORT $LN14@FindString
  00033	3b f0		 cmp	 esi, eax
  00035	0f 87 a0 00 00
	00		 ja	 $LN6@FindString
$LN14@FindString:
  0003b	85 c9		 test	 ecx, ecx
  0003d	0f 8c 98 00 00
	00		 jl	 $LN6@FindString
  00043	7f 09		 jg	 SHORT $LN15@FindString
  00045	83 f8 01	 cmp	 eax, 1
  00048	0f 82 8d 00 00
	00		 jb	 $LN6@FindString
$LN15@FindString:
  0004e	83 fe 01	 cmp	 esi, 1
  00051	0f 82 84 00 00
	00		 jb	 $LN6@FindString
  00057	8b 5d 20	 mov	 ebx, DWORD PTR _startOffset$[ebp+4]
  0005a	2b c6		 sub	 eax, esi
  0005c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0005f	1b cf		 sbb	 ecx, edi
  00061	89 4d fc	 mov	 DWORD PTR $T2[ebp], ecx
  00064	3b d9		 cmp	 ebx, ecx
  00066	7f 73		 jg	 SHORT $LN6@FindString
  00068	8b 7d 1c	 mov	 edi, DWORD PTR _startOffset$[ebp]
  0006b	7c 04		 jl	 SHORT $LL16@FindString
  0006d	3b f8		 cmp	 edi, eax
  0006f	77 6a		 ja	 SHORT $LN6@FindString
$LL16@FindString:

; 7973 : 	{
; 7974 : 		if (memcmp (buf + i, str, strLen) == 0)

  00071	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  00074	03 d7		 add	 edx, edi
  00076	83 ee 04	 sub	 esi, 4
  00079	72 16		 jb	 SHORT $LN19@FindString
  0007b	0f 1f 44 00 00	 npad	 5
$LL20@FindString:
  00080	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00082	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00084	75 10		 jne	 SHORT $LN18@FindString
  00086	83 c2 04	 add	 edx, 4
  00089	83 c0 04	 add	 eax, 4
  0008c	83 ee 04	 sub	 esi, 4
  0008f	73 ef		 jae	 SHORT $LL20@FindString
$LN19@FindString:
  00091	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00094	74 51		 je	 SHORT $LN17@FindString
$LN18@FindString:
  00096	8a 0a		 mov	 cl, BYTE PTR [edx]
  00098	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009a	75 27		 jne	 SHORT $LN21@FindString
  0009c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0009f	74 46		 je	 SHORT $LN17@FindString
  000a1	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  000a4	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  000a7	75 1a		 jne	 SHORT $LN21@FindString
  000a9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000ac	74 39		 je	 SHORT $LN17@FindString
  000ae	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  000b1	3a 48 02	 cmp	 cl, BYTE PTR [eax+2]
  000b4	75 0d		 jne	 SHORT $LN21@FindString
  000b6	83 fe ff	 cmp	 esi, -1
  000b9	74 2c		 je	 SHORT $LN17@FindString
  000bb	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  000be	3a 48 03	 cmp	 cl, BYTE PTR [eax+3]
  000c1	74 24		 je	 SHORT $LN17@FindString
$LN21@FindString:

; 7970 : 	}
; 7971 : 
; 7972 : 	for (int64 i = startOffset; i <= bufLen - strLen; i++)

  000c3	8b 75 18	 mov	 esi, DWORD PTR _strLen$[ebp]
  000c6	83 c7 01	 add	 edi, 1
  000c9	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  000cc	83 d3 00	 adc	 ebx, 0
  000cf	3b 5d fc	 cmp	 ebx, DWORD PTR $T2[ebp]
  000d2	7c 9d		 jl	 SHORT $LL16@FindString
  000d4	7f 05		 jg	 SHORT $LN6@FindString
  000d6	3b 7d f8	 cmp	 edi, DWORD PTR $T1[ebp]
  000d9	76 96		 jbe	 SHORT $LL16@FindString
$LN6@FindString:
  000db	5f		 pop	 edi

; 7968 : 	{
; 7969 : 		return -1;

  000dc	83 c8 ff	 or	 eax, -1
  000df	5e		 pop	 esi
  000e0	0b d0		 or	 edx, eax
  000e2	5b		 pop	 ebx

; 7976 : 	}
; 7977 : 
; 7978 : 	return -1;
; 7979 : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
$LN17@FindString:

; 7975 : 			return i;

  000e7	8b c7		 mov	 eax, edi
  000e9	8b d3		 mov	 edx, ebx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx

; 7976 : 	}
; 7977 : 
; 7978 : 	return -1;
; 7979 : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_FindString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DismountDrive
_TEXT	SEGMENT
_dwResult$ = -528					; size = 4
_devPath$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_devName$ = 8						; size = 4
_devicePath$ = 12					; size = 4
_DismountDrive PROC					; COMDAT

; 7895 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 02 00
	00		 sub	 esp, 528		; 00000210H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 7896 : 	DWORD dwResult;
; 7897 : 	HANDLE hVolume;
; 7898 : 	BOOL bResult = FALSE;
; 7899 : 	int attempt = UNMOUNT_MAX_AUTO_RETRIES;
; 7900 : 	int driveLetterNo = -1;
; 7901 : 	WCHAR devPath [MAX_PATH];
; 7902 : 
; 7903 : 	strcpy ((char *) devPath, devicePath);

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _devicePath$[ebp]
  00016	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _devPath$[ebp]
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _devName$[ebp]
  00022	be 1e 00 00 00	 mov	 esi, 30			; 0000001eH
  00027	2b d1		 sub	 edx, ecx
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@DismountDr:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00035	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00039	84 c0		 test	 al, al
  0003b	75 f3		 jne	 SHORT $LL9@DismountDr

; 7904 : 	ToUNICODE ((char *) devPath);

  0003d	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _devPath$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _ToUNICODE

; 7905 : 	driveLetterNo = GetDiskDeviceDriveLetter (devPath);

  00049	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _devPath$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter
  00055	83 c4 08	 add	 esp, 8
  00058	8b d8		 mov	 ebx, eax

; 7906 : 
; 7907 : 
; 7908 : 	hVolume = CreateFile (devName, GENERIC_READ | GENERIC_WRITE,

  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	6a 03		 push	 3
  00060	6a 00		 push	 0
  00062	6a 03		 push	 3
  00064	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00069	57		 push	 edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00070	8b f8		 mov	 edi, eax

; 7909 : 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 7910 : 
; 7911 : 	if (hVolume == INVALID_HANDLE_VALUE)

  00072	83 ff ff	 cmp	 edi, -1
  00075	75 13		 jne	 SHORT $LN6@DismountDr

; 7912 : 		return INVALID_HANDLE_VALUE;

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	0b c0		 or	 eax, eax
  0007b	5b		 pop	 ebx

; 7941 : 
; 7942 : 	return (bResult ? hVolume : INVALID_HANDLE_VALUE);
; 7943 : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN6@DismountDr:

; 7913 : 
; 7914 : 
; 7915 : 	// Try to lock the volume first so that dismount is not forced. 
; 7916 : 	// If we fail, we will dismount anyway even if it needs to be forced.
; 7917 : 
; 7918 : 	CloseVolumeExplorerWindows (MainDlg, driveLetterNo);

  0008a	85 db		 test	 ebx, ebx
  0008c	78 16		 js	 SHORT $LN14@DismountDr
  0008e	53		 push	 ebx
  0008f	68 00 00 00 00	 push	 OFFSET _CloseVolumeExplorerWindowsEnum@8
  00094	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?explorerCloseSent@@3HA, 0
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8
$LN14@DismountDr:

; 7919 : 
; 7920 : 	while (!(bResult = DeviceIoControl (hVolume, FSCTL_LOCK_VOLUME, NULL, 0, NULL, 0, &dwResult, NULL)) 
; 7921 : 		&& attempt > 0)

  000a4	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__DeviceIoControl@32
  000aa	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  000b0	6a 00		 push	 0
  000b2	50		 push	 eax
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	68 18 00 09 00	 push	 589848			; 00090018H
  000c0	57		 push	 edi
  000c1	ff d3		 call	 ebx
  000c3	85 c0		 test	 eax, eax
  000c5	75 2a		 jne	 SHORT $LN24@DismountDr
$LL2@DismountDr:
  000c7	85 f6		 test	 esi, esi
  000c9	7e 26		 jle	 SHORT $LN24@DismountDr

; 7922 : 	{
; 7923 : 		Sleep (UNMOUNT_AUTO_RETRY_DELAY);

  000cb	6a 32		 push	 50			; 00000032H
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  000d3	6a 00		 push	 0
  000d5	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]

; 7924 : 		attempt--;

  000db	4e		 dec	 esi
  000dc	50		 push	 eax
  000dd	6a 00		 push	 0
  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	68 18 00 09 00	 push	 589848			; 00090018H
  000ea	57		 push	 edi
  000eb	ff d3		 call	 ebx
  000ed	85 c0		 test	 eax, eax
  000ef	74 d6		 je	 SHORT $LL2@DismountDr
$LN24@DismountDr:

; 7925 : 	}
; 7926 : 
; 7927 : 
; 7928 : 	// Try to dismount the volume
; 7929 : 
; 7930 : 	attempt = UNMOUNT_MAX_AUTO_RETRIES;
; 7931 : 
; 7932 : 	while (!(bResult = DeviceIoControl (hVolume, FSCTL_DISMOUNT_VOLUME, NULL, 0, NULL, 0, &dwResult, NULL)) 
; 7933 : 		&& attempt > 0)

  000f1	6a 00		 push	 0
  000f3	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  000f9	be 1e 00 00 00	 mov	 esi, 30			; 0000001eH
  000fe	50		 push	 eax
  000ff	6a 00		 push	 0
  00101	6a 00		 push	 0
  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	68 20 00 09 00	 push	 589856			; 00090020H
  0010c	57		 push	 edi
  0010d	ff d3		 call	 ebx
  0010f	8b d8		 mov	 ebx, eax
  00111	85 db		 test	 ebx, ebx
  00113	75 3d		 jne	 SHORT $LN7@DismountDr
$LL4@DismountDr:
  00115	85 f6		 test	 esi, esi
  00117	7e 2e		 jle	 SHORT $LN5@DismountDr

; 7934 : 	{
; 7935 : 		Sleep (UNMOUNT_AUTO_RETRY_DELAY);

  00119	6a 32		 push	 50			; 00000032H
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00121	6a 00		 push	 0
  00123	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]

; 7936 : 		attempt--;

  00129	4e		 dec	 esi
  0012a	50		 push	 eax
  0012b	6a 00		 push	 0
  0012d	6a 00		 push	 0
  0012f	6a 00		 push	 0
  00131	6a 00		 push	 0
  00133	68 20 00 09 00	 push	 589856			; 00090020H
  00138	57		 push	 edi
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0013f	8b d8		 mov	 ebx, eax
  00141	85 db		 test	 ebx, ebx
  00143	74 d0		 je	 SHORT $LL4@DismountDr

; 7937 : 	}
; 7938 : 
; 7939 : 	if (!bResult)

  00145	eb 0b		 jmp	 SHORT $LN7@DismountDr
$LN5@DismountDr:
  00147	85 db		 test	 ebx, ebx
  00149	75 07		 jne	 SHORT $LN7@DismountDr

; 7940 : 		CloseHandle (hVolume);

  0014b	57		 push	 edi
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN7@DismountDr:

; 7941 : 
; 7942 : 	return (bResult ? hVolume : INVALID_HANDLE_VALUE);
; 7943 : }

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	83 c8 ff	 or	 eax, -1
  00158	85 db		 test	 ebx, ebx
  0015a	0f 45 c7	 cmovne	 eax, edi
  0015d	33 cd		 xor	 ecx, ebp
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
_DismountDrive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetDeviceSize
_TEXT	SEGMENT
_dwResult$1 = -568					; size = 4
_dpi$2 = -564						; size = 560
__$ArrayPad$ = -4					; size = 4
_devicePath$ = 8					; size = 4
_GetDeviceSize PROC					; COMDAT

; 7875 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 02 00
	00		 sub	 esp, 568		; 00000238H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _devicePath$[ebp]

; 7876 : 	PARTITION_INFORMATION partitionInfo;
; 7877 : 
; 7878 : 	if (!GetPartitionInfo (devicePath, &partitionInfo))

  00017	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _dpi$2[ebp]
  0001d	68 30 02 00 00	 push	 560			; 00000230H
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset
  0002a	56		 push	 esi
  0002b	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _dpi$2[ebp]
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs?$AA?$AA@
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	8d 85 c8 fd ff
	ff		 lea	 eax, DWORD PTR _dwResult$1[ebp]
  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	68 30 02 00 00	 push	 560			; 00000230H
  0004e	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _dpi$2[ebp]
  00054	50		 push	 eax
  00055	68 30 02 00 00	 push	 560			; 00000230H
  0005a	50		 push	 eax
  0005b	68 38 20 22 00	 push	 2236472			; 00222038H
  00060	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  0006c	5e		 pop	 esi
  0006d	85 c0		 test	 eax, eax
  0006f	75 13		 jne	 SHORT $LN2@GetDeviceS

; 7879 : 		return -1;

  00071	83 c8 ff	 or	 eax, -1
  00074	0b d0		 or	 edx, eax

; 7880 : 
; 7881 : 	return partitionInfo.PartitionLength.QuadPart;
; 7882 : }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN2@GetDeviceS:
  00084	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00087	8b 45 dc	 mov	 eax, DWORD PTR _dpi$2[ebp+528]
  0008a	33 cd		 xor	 ecx, ebp
  0008c	8b 55 e0	 mov	 edx, DWORD PTR _dpi$2[ebp+532]
  0008f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_GetDeviceSize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetStatsFreeSpaceOnPartition
_TEXT	SEGMENT
_totalNumberOfBytes$ = -588				; size = 8
_totalNumberOfFreeBytes$ = -580				; size = 8
_partitionInfo$1 = -572					; size = 32
_percentFree$GSCopy$1$ = -540				; size = 4
tv186 = -536						; size = 8
_freeSpaceSize$ = -536					; size = 8
_szRootPath$ = -528					; size = 4
_devPath$ = -524					; size = 520
__$ArrayPad$ = -4					; size = 4
_devicePath$ = 8					; size = 4
_percentFree$ = 12					; size = 4
_occupiedBytes$ = 16					; size = 4
_silent$ = 20						; size = 4
_GetStatsFreeSpaceOnPartition PROC			; COMDAT

; 7811 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 02 00
	00		 sub	 esp, 588		; 0000024cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _occupiedBytes$[ebp]

; 7812 : 	WCHAR devPath [MAX_PATH];
; 7813 : 	int driveLetterNo = -1;
; 7814 : 	char szRootPath[4] = {0, ':', '\\', 0};
; 7815 : 	ULARGE_INTEGER freeSpaceSize;
; 7816 : 	ULARGE_INTEGER totalNumberOfBytes;
; 7817 : 	ULARGE_INTEGER totalNumberOfFreeBytes;
; 7818 : 
; 7819 : 	strcpy ((char *) devPath, devicePath);

  00017	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _devPath$[ebp]
  0001d	56		 push	 esi
  0001e	8b 75 08	 mov	 esi, DWORD PTR _devicePath$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	57		 push	 edi
  00024	8b 7d 0c	 mov	 edi, DWORD PTR _percentFree$[ebp]
  00027	2b d6		 sub	 edx, esi
  00029	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _percentFree$GSCopy$1$[ebp], edi
  0002f	c7 85 f0 fd ff
	ff 00 3a 5c 00	 mov	 DWORD PTR _szRootPath$[ebp], 6044160 ; 005c3a00H
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@GetStatsFr:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00045	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00049	84 c0		 test	 al, al
  0004b	75 f3		 jne	 SHORT $LL11@GetStatsFr

; 7820 : 	ToUNICODE ((char *) devPath);

  0004d	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _devPath$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _ToUNICODE

; 7821 : 
; 7822 : 	driveLetterNo = GetDiskDeviceDriveLetter (devPath);

  00059	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _devPath$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _GetDiskDeviceDriveLetter

; 7823 : 	szRootPath[0] = (char) driveLetterNo + 'A';

  00065	04 41		 add	 al, 65			; 00000041H
  00067	83 c4 08	 add	 esp, 8
  0006a	88 85 f0 fd ff
	ff		 mov	 BYTE PTR _szRootPath$[ebp], al

; 7824 : 
; 7825 : 
; 7826 : 	if (!GetDiskFreeSpaceEx (szRootPath, &freeSpaceSize, &totalNumberOfBytes, &totalNumberOfFreeBytes))

  00070	8d 85 bc fd ff
	ff		 lea	 eax, DWORD PTR _totalNumberOfFreeBytes$[ebp]
  00076	50		 push	 eax
  00077	8d 85 b4 fd ff
	ff		 lea	 eax, DWORD PTR _totalNumberOfBytes$[ebp]
  0007d	50		 push	 eax
  0007e	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _freeSpaceSize$[ebp]
  00084	50		 push	 eax
  00085	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _szRootPath$[ebp]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceExA@16
  00092	85 c0		 test	 eax, eax
  00094	75 54		 jne	 SHORT $LN2@GetStatsFr

; 7827 : 	{
; 7828 : 		if (!silent)

  00096	39 45 14	 cmp	 DWORD PTR _silent$[ebp], eax
  00099	75 39		 jne	 SHORT $LN12@GetStatsFr

; 7829 : 		{
; 7830 : 			handleWin32Error (MainDlg);

  0009b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  000a1	e8 00 00 00 00	 call	 _handleWin32Error
  000a6	83 c4 04	 add	 esp, 4

; 7831 : 			Error ("CANNOT_CALC_SPACE");

  000a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  000b0	75 22		 jne	 SHORT $LN12@GetStatsFr
  000b2	6a 10		 push	 16			; 00000010H
  000b4	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LBACDGOD@CANNOT_CALC_SPACE?$AA@
  000bf	e8 00 00 00 00	 call	 _GetString
  000c4	83 c4 04	 add	 esp, 4
  000c7	50		 push	 eax
  000c8	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN12@GetStatsFr:

; 7832 : 		}
; 7833 : 
; 7834 : 		return -1;

  000d4	5f		 pop	 edi
  000d5	83 c8 ff	 or	 eax, -1
  000d8	5e		 pop	 esi
  000d9	0b d0		 or	 edx, eax
  000db	5b		 pop	 ebx

; 7859 : 	}
; 7860 : 
; 7861 : 	return freeSpaceSize.QuadPart;
; 7862 : }

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000df	33 cd		 xor	 ecx, ebp
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
$LN2@GetStatsFr:

; 7835 : 	}
; 7836 : 
; 7837 : 
; 7838 : 	if (percentFree != NULL || occupiedBytes != NULL)

  000ea	85 ff		 test	 edi, edi
  000ec	75 15		 jne	 SHORT $LN5@GetStatsFr
  000ee	85 db		 test	 ebx, ebx
  000f0	75 11		 jne	 SHORT $LN5@GetStatsFr

; 7858 : 			*percentFree = (float) ((double) freeSpaceSize.QuadPart / (double) partitionInfo.PartitionLength.QuadPart * 100.0);

  000f2	8b b5 ec fd ff
	ff		 mov	 esi, DWORD PTR _freeSpaceSize$[ebp+4]
  000f8	8b bd e8 fd ff
	ff		 mov	 edi, DWORD PTR _freeSpaceSize$[ebp]
  000fe	e9 b4 00 00 00	 jmp	 $LN9@GetStatsFr
$LN5@GetStatsFr:

; 7839 : 	{
; 7840 : 		// Determine occupied space and % of free space
; 7841 : 
; 7842 : 		PARTITION_INFORMATION partitionInfo;
; 7843 : 
; 7844 : 		if (!GetPartitionInfo (devicePath, &partitionInfo))

  00103	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _partitionInfo$1[ebp]
  00109	50		 push	 eax
  0010a	56		 push	 esi
  0010b	e8 00 00 00 00	 call	 _GetPartitionInfo
  00110	83 c4 08	 add	 esp, 8
  00113	85 c0		 test	 eax, eax
  00115	75 33		 jne	 SHORT $LN6@GetStatsFr

; 7845 : 		{
; 7846 : 			if (!silent)

  00117	39 45 14	 cmp	 DWORD PTR _silent$[ebp], eax
  0011a	75 18		 jne	 SHORT $LN7@GetStatsFr

; 7847 : 			{
; 7848 : 				handleWin32Error (MainDlg);

  0011c	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00122	e8 00 00 00 00	 call	 _handleWin32Error

; 7849 : 				Error ("CANT_GET_VOLSIZE");

  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FNOFFGJI@CANT_GET_VOLSIZE?$AA@
  0012c	e8 00 00 00 00	 call	 _Error
  00131	83 c4 08	 add	 esp, 8
$LN7@GetStatsFr:

; 7850 : 			}
; 7851 : 			return -1;

  00134	5f		 pop	 edi
  00135	83 c8 ff	 or	 eax, -1
  00138	5e		 pop	 esi
  00139	0b d0		 or	 edx, eax
  0013b	5b		 pop	 ebx

; 7859 : 	}
; 7860 : 
; 7861 : 	return freeSpaceSize.QuadPart;
; 7862 : }

  0013c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	33 cd		 xor	 ecx, ebp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
$LN6@GetStatsFr:

; 7852 : 		}
; 7853 : 
; 7854 : 		if (occupiedBytes != NULL)

  0014a	8b b5 ec fd ff
	ff		 mov	 esi, DWORD PTR _freeSpaceSize$[ebp+4]
  00150	8b bd e8 fd ff
	ff		 mov	 edi, DWORD PTR _freeSpaceSize$[ebp]
  00156	85 db		 test	 ebx, ebx
  00158	74 15		 je	 SHORT $LN8@GetStatsFr

; 7855 : 			*occupiedBytes = partitionInfo.PartitionLength.QuadPart - freeSpaceSize.QuadPart;

  0015a	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _partitionInfo$1[ebp+8]
  00160	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _partitionInfo$1[ebp+12]
  00166	2b cf		 sub	 ecx, edi
  00168	89 0b		 mov	 DWORD PTR [ebx], ecx
  0016a	1b c6		 sbb	 eax, esi
  0016c	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN8@GetStatsFr:

; 7856 : 
; 7857 : 		if (percentFree != NULL)

  0016f	8b 9d e4 fd ff
	ff		 mov	 ebx, DWORD PTR _percentFree$GSCopy$1$[ebp]
  00175	85 db		 test	 ebx, ebx
  00177	74 3e		 je	 SHORT $LN9@GetStatsFr

; 7858 : 			*percentFree = (float) ((double) freeSpaceSize.QuadPart / (double) partitionInfo.PartitionLength.QuadPart * 100.0);

  00179	8b d6		 mov	 edx, esi
  0017b	8b cf		 mov	 ecx, edi
  0017d	e8 00 00 00 00	 call	 __ultod3
  00182	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR _partitionInfo$1[ebp+12]
  00188	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _partitionInfo$1[ebp+8]
  0018e	f2 0f 11 85 e8
	fd ff ff	 movsd	 QWORD PTR tv186[ebp], xmm0
  00196	e8 00 00 00 00	 call	 __ltod3
  0019b	f2 0f 10 8d e8
	fd ff ff	 movsd	 xmm1, QWORD PTR tv186[ebp]
  001a3	f2 0f 5e c8	 divsd	 xmm1, xmm0
  001a7	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4059000000000000
  001af	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  001b3	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
$LN9@GetStatsFr:

; 7859 : 	}
; 7860 : 
; 7861 : 	return freeSpaceSize.QuadPart;
; 7862 : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	8b c7		 mov	 eax, edi
  001bc	5f		 pop	 edi
  001bd	8b d6		 mov	 edx, esi
  001bf	33 cd		 xor	 ecx, ebp
  001c1	5e		 pop	 esi
  001c2	5b		 pop	 ebx
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
_GetStatsFreeSpaceOnPartition ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FileSystemAppearsEmpty
_TEXT	SEGMENT
_occupiedBytes$ = -12					; size = 8
_percentFreeSpace$ = -4					; size = 4
_devicePath$ = 8					; size = 4
_FileSystemAppearsEmpty PROC				; COMDAT

; 7776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7777 : 	float percentFreeSpace = 0.0;
; 7778 : 	__int64 occupiedBytes = 0;
; 7779 : 
; 7780 : 	if (GetStatsFreeSpaceOnPartition (devicePath, &percentFreeSpace, &occupiedBytes, TRUE) != -1)

  00006	6a 01		 push	 1
  00008	8d 45 f4	 lea	 eax, DWORD PTR _occupiedBytes$[ebp]
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _percentFreeSpace$[ebp], 0
  00012	50		 push	 eax
  00013	8d 45 fc	 lea	 eax, DWORD PTR _percentFreeSpace$[ebp]
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	50		 push	 eax
  0001a	ff 75 08	 push	 DWORD PTR _devicePath$[ebp]
  0001d	66 0f 13 45 f4	 movlpd	 QWORD PTR _occupiedBytes$[ebp], xmm0
  00022	e8 00 00 00 00	 call	 _GetStatsFreeSpaceOnPartition
  00027	23 c2		 and	 eax, edx
  00029	83 c4 10	 add	 esp, 16			; 00000010H
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	74 43		 je	 SHORT $LN2@FileSystem

; 7781 : 	{
; 7782 : 		if (occupiedBytes > BYTES_PER_GB && percentFreeSpace < 99.99	// "percentFreeSpace < 99.99" is needed because an NTFS filesystem larger than several terabytes can have more than 1GB of data in use, even if there are no files stored on it.
; 7783 : 			|| percentFreeSpace < 88)		// A 24-MB NTFS filesystem has 11.5% of space in use even if there are no files stored on it.

  00031	83 7d f8 00	 cmp	 DWORD PTR _occupiedBytes$[ebp+4], 0
  00035	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _percentFreeSpace$[ebp]
  0003a	7c 1c		 jl	 SHORT $LN7@FileSystem
  0003c	7f 09		 jg	 SHORT $LN9@FileSystem
  0003e	81 7d f4 00 00
	00 40		 cmp	 DWORD PTR _occupiedBytes$[ebp], 1073741824 ; 40000000H
  00045	76 11		 jbe	 SHORT $LN7@FileSystem
$LN9@FileSystem:
  00047	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4058ff5c28f5c28f
  0004f	0f 5a ca	 cvtps2pd xmm1, xmm2
  00052	66 0f 2f c1	 comisd	 xmm0, xmm1
  00056	77 0d		 ja	 SHORT $LN6@FileSystem
$LN7@FileSystem:
  00058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42b00000
  00060	0f 2f c2	 comiss	 xmm0, xmm2
  00063	76 06		 jbe	 SHORT $LN4@FileSystem
$LN6@FileSystem:

; 7784 : 		{
; 7785 : 			return 0;

  00065	33 c0		 xor	 eax, eax

; 7792 : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN4@FileSystem:

; 7786 : 		}
; 7787 : 		else
; 7788 : 			return 1;

  0006b	b8 01 00 00 00	 mov	 eax, 1

; 7792 : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN2@FileSystem:

; 7789 : 	}
; 7790 : 	else
; 7791 : 		return -1;

  00074	83 c8 ff	 or	 eax, -1

; 7792 : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_FileSystemAppearsEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetDiskDeviceDriveLetter
_TEXT	SEGMENT
_dwResult$1 = -2616					; size = 4
_drive$2 = -2612					; size = 6
_resolve$3 = -2604					; size = 1040
_target$ = -1564					; size = 520
_device$ = -1044					; size = 520
_link$ = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_deviceName$ = 8					; size = 4
_GetDiskDeviceDriveLetter PROC				; COMDAT

; 7739 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 0a 00
	00		 sub	 esp, 2616		; 00000a38H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _deviceName$[ebp]

; 7740 : 	int i;
; 7741 : 	WCHAR link[MAX_PATH];
; 7742 : 	WCHAR target[MAX_PATH];
; 7743 : 	WCHAR device[MAX_PATH];
; 7744 : 
; 7745 : 	if (!ResolveSymbolicLink (deviceName, device))

  00018	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _device$[ebp]
  0001e	57		 push	 edi
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 _ResolveSymbolicLink
  00026	83 c4 08	 add	 esp, 8
  00029	85 c0		 test	 eax, eax
  0002b	75 18		 jne	 SHORT $LN5@GetDiskDev

; 7746 : 		wcscpy (device, deviceName);

  0002d	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _device$[ebp]
  00033	2b ce		 sub	 ecx, esi
$LL8@GetDiskDev:
  00035	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00038	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  0003b	66 89 44 31 fe	 mov	 WORD PTR [ecx+esi-2], ax
  00040	66 85 c0	 test	 ax, ax
  00043	75 f0		 jne	 SHORT $LL8@GetDiskDev
$LN5@GetDiskDev:

; 7747 : 
; 7748 : 	for (i = 0; i < 26; i++)

  00045	33 db		 xor	 ebx, ebx

; 7749 : 	{
; 7750 : 		WCHAR drive[] = { (WCHAR) i + 'A', ':', 0 };

  00047	c7 85 ce f5 ff
	ff 3a 00 00 00	 mov	 DWORD PTR _drive$2[ebp+2], 58 ; 0000003aH
$LL4@GetDiskDev:

; 7751 : 
; 7752 : 		wcscpy (link, L"\\DosDevices\\");

  00051	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BK@LABJKOM@?$AA?2?$AAD?$AAo?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?2?$AA?$AA@
  00058	8d 43 41	 lea	 eax, DWORD PTR [ebx+65]
  0005b	66 89 85 cc f5
	ff ff		 mov	 WORD PTR _drive$2[ebp], ax

; 7753 : 		wcscat (link, drive);

  00062	8d 95 cc f5 ff
	ff		 lea	 edx, DWORD PTR _drive$2[ebp]
  00068	66 a1 18 00 00
	00		 mov	 ax, WORD PTR ??_C@_1BK@LABJKOM@?$AA?2?$AAD?$AAo?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?2?$AA?$AA@+24
  0006e	8b f2		 mov	 esi, edx
  00070	0f 11 85 f4 fd
	ff ff		 movups	 XMMWORD PTR _link$[ebp], xmm0
  00077	66 89 85 0c fe
	ff ff		 mov	 WORD PTR _link$[ebp+24], ax
  0007e	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BK@LABJKOM@?$AA?2?$AAD?$AAo?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?2?$AA?$AA@+16
  00086	66 0f d6 85 04
	fe ff ff	 movq	 QWORD PTR _link$[ebp+16], xmm0
  0008e	66 90		 npad	 2
$LL27@GetDiskDev:
  00090	66 8b 02	 mov	 ax, WORD PTR [edx]
  00093	83 c2 02	 add	 edx, 2
  00096	66 85 c0	 test	 ax, ax
  00099	75 f5		 jne	 SHORT $LL27@GetDiskDev
  0009b	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR _link$[ebp]
  000a1	2b d6		 sub	 edx, esi
  000a3	83 c7 fe	 add	 edi, -2			; fffffffeH
$LL28@GetDiskDev:
  000a6	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  000aa	83 c7 02	 add	 edi, 2
  000ad	66 85 c0	 test	 ax, ax
  000b0	75 f4		 jne	 SHORT $LL28@GetDiskDev
  000b2	8b ca		 mov	 ecx, edx

; 7754 : 
; 7755 : 		ResolveSymbolicLink (link, target);

  000b4	8d 85 d4 f5 ff
	ff		 lea	 eax, DWORD PTR _resolve$3[ebp]
  000ba	c1 e9 02	 shr	 ecx, 2
  000bd	f3 a5		 rep movsd
  000bf	8b ca		 mov	 ecx, edx
  000c1	68 10 04 00 00	 push	 1040			; 00000410H
  000c6	83 e1 03	 and	 ecx, 3
  000c9	6a 00		 push	 0
  000cb	f3 a4		 rep movsb
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _memset
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d6	33 c9		 xor	 ecx, ecx
  000d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@GetDiskDev:
  000e0	0f b7 84 0d f4
	fd ff ff	 movzx	 eax, WORD PTR _link$[ebp+ecx]
  000e8	8d 49 02	 lea	 ecx, DWORD PTR [ecx+2]
  000eb	66 89 84 0d d2
	f5 ff ff	 mov	 WORD PTR _resolve$3[ebp+ecx-2], ax
  000f3	66 85 c0	 test	 ax, ax
  000f6	75 e8		 jne	 SHORT $LL11@GetDiskDev
  000f8	6a 00		 push	 0
  000fa	8d 85 c8 f5 ff
	ff		 lea	 eax, DWORD PTR _dwResult$1[ebp]
  00100	50		 push	 eax
  00101	68 10 04 00 00	 push	 1040			; 00000410H
  00106	8d 85 d4 f5 ff
	ff		 lea	 eax, DWORD PTR _resolve$3[ebp]
  0010c	50		 push	 eax
  0010d	68 10 04 00 00	 push	 1040			; 00000410H
  00112	50		 push	 eax
  00113	68 44 20 22 00	 push	 2236484			; 00222044H
  00118	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00124	33 c0		 xor	 eax, eax
  00126	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL12@GetDiskDev:
  00130	0f b7 8c 05 dc
	f7 ff ff	 movzx	 ecx, WORD PTR _resolve$3[ebp+eax+520]
  00138	8d 40 02	 lea	 eax, DWORD PTR [eax+2]
  0013b	66 89 8c 05 e2
	f9 ff ff	 mov	 WORD PTR _target$[ebp+eax-2], cx
  00143	66 85 c9	 test	 cx, cx
  00146	75 e8		 jne	 SHORT $LL12@GetDiskDev

; 7756 : 
; 7757 : 		if (wcscmp (device, target) == 0)

  00148	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR _target$[ebp]
  0014e	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _device$[ebp]
$LL29@GetDiskDev:
  00154	66 8b 10	 mov	 dx, WORD PTR [eax]
  00157	66 3b 11	 cmp	 dx, WORD PTR [ecx]
  0015a	75 1e		 jne	 SHORT $LN30@GetDiskDev
  0015c	66 85 d2	 test	 dx, dx
  0015f	74 15		 je	 SHORT $LN31@GetDiskDev
  00161	66 8b 50 02	 mov	 dx, WORD PTR [eax+2]
  00165	66 3b 51 02	 cmp	 dx, WORD PTR [ecx+2]
  00169	75 0f		 jne	 SHORT $LN30@GetDiskDev
  0016b	83 c0 04	 add	 eax, 4
  0016e	83 c1 04	 add	 ecx, 4
  00171	66 85 d2	 test	 dx, dx
  00174	75 de		 jne	 SHORT $LL29@GetDiskDev
$LN31@GetDiskDev:
  00176	33 c0		 xor	 eax, eax
  00178	eb 05		 jmp	 SHORT $LN32@GetDiskDev
$LN30@GetDiskDev:
  0017a	1b c0		 sbb	 eax, eax
  0017c	83 c8 01	 or	 eax, 1
$LN32@GetDiskDev:
  0017f	85 c0		 test	 eax, eax
  00181	74 1e		 je	 SHORT $LN17@GetDiskDev

; 7747 : 
; 7748 : 	for (i = 0; i < 26; i++)

  00183	43		 inc	 ebx
  00184	83 fb 1a	 cmp	 ebx, 26			; 0000001aH
  00187	0f 8c c4 fe ff
	ff		 jl	 $LL4@GetDiskDev

; 7758 : 			return i;
; 7759 : 	}
; 7760 : 
; 7761 : 	return -1;

  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	83 c8 ff	 or	 eax, -1
  00192	5b		 pop	 ebx

; 7762 : }

  00193	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00196	33 cd		 xor	 ecx, ebp
  00198	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c3		 ret	 0
$LN17@GetDiskDev:
  001a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	8b c3		 mov	 eax, ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	33 cd		 xor	 ecx, ebp
  001aa	5b		 pop	 ebx
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
_GetDiskDeviceDriveLetter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ResolveSymbolicLink
_TEXT	SEGMENT
_dwResult$ = -1048					; size = 4
_resolve$ = -1044					; size = 1040
__$ArrayPad$ = -4					; size = 4
_symLinkName$ = 8					; size = 4
_targetName$ = 12					; size = 4
_ResolveSymbolicLink PROC				; COMDAT

; 7639 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _targetName$[ebp]

; 7640 : 	BOOL bResult;
; 7641 : 	DWORD dwResult;
; 7642 : 	RESOLVE_SYMLINK_STRUCT resolve;
; 7643 : 
; 7644 : 	memset (&resolve, 0, sizeof(resolve));

  00017	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _resolve$[ebp]
  0001d	68 10 04 00 00	 push	 1040			; 00000410H
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset

; 7645 : 	wcscpy ((PWSTR) &resolve.symLinkName, symLinkName);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _symLinkName$[ebp]
  0002d	8d 95 ec fb ff
	ff		 lea	 edx, DWORD PTR _resolve$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	2b d0		 sub	 edx, eax
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL3@ResolveSym:
  00040	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00043	8d 40 02	 lea	 eax, DWORD PTR [eax+2]
  00046	66 89 4c 02 fe	 mov	 WORD PTR [edx+eax-2], cx
  0004b	66 85 c9	 test	 cx, cx
  0004e	75 f0		 jne	 SHORT $LL3@ResolveSym

; 7646 : 
; 7647 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_GET_RESOLVED_SYMLINK, &resolve,

  00050	6a 00		 push	 0
  00052	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  00058	50		 push	 eax
  00059	68 10 04 00 00	 push	 1040			; 00000410H
  0005e	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _resolve$[ebp]
  00064	50		 push	 eax
  00065	68 10 04 00 00	 push	 1040			; 00000410H
  0006a	50		 push	 eax
  0006b	68 44 20 22 00	 push	 2236484			; 00222044H
  00070	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7648 : 		sizeof (resolve), &resolve, sizeof (resolve), &dwResult,
; 7649 : 		NULL);
; 7650 : 
; 7651 : 	wcscpy (targetName, (PWSTR) &resolve.targetName);

  0007c	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _resolve$[ebp+520]
  00082	8b ca		 mov	 ecx, edx
  00084	2b f1		 sub	 esi, ecx
  00086	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ResolveSym:
  00090	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00093	8d 52 02	 lea	 edx, DWORD PTR [edx+2]
  00096	66 89 4c 16 fe	 mov	 WORD PTR [esi+edx-2], cx
  0009b	66 85 c9	 test	 cx, cx
  0009e	75 f0		 jne	 SHORT $LL4@ResolveSym

; 7652 : 
; 7653 : 	return bResult;
; 7654 : }

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	33 cd		 xor	 ecx, ebp
  000a5	5e		 pop	 esi
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_ResolveSymbolicLink ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsUacSupported
_TEXT	SEGMENT
_size$ = -12						; size = 4
_hkey$ = -8						; size = 4
_value$ = -4						; size = 4
_IsUacSupported PROC					; COMDAT

; 7610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7611 : 	HKEY hkey;
; 7612 : 	DWORD value = 1, size = sizeof (DWORD);
; 7613 : 
; 7614 : 	if (!IsOSAtLeast (WIN_VISTA))

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  0000b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _value$[ebp], 1
  00012	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _size$[ebp], 4
  00019	85 c0		 test	 eax, eax
  0001b	7f 0c		 jg	 SHORT $LN11@IsUacSuppo
  0001d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN11@IsUacSuppo:
  00029	c1 e0 08	 shl	 eax, 8
  0002c	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  00032	c1 e0 08	 shl	 eax, 8
  00035	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  0003b	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  00040	7d 06		 jge	 SHORT $LN2@IsUacSuppo

; 7615 : 		return FALSE;

  00042	33 c0		 xor	 eax, eax

; 7626 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN2@IsUacSuppo:

; 7616 : 
; 7617 : 	if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 0, KEY_READ, &hkey) == ERROR_SUCCESS)

  00048	8d 45 f8	 lea	 eax, DWORD PTR _hkey$[ebp]
  0004b	50		 push	 eax
  0004c	68 19 00 02 00	 push	 131097			; 00020019H
  00051	6a 00		 push	 0
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IFNHFOHB@Software?2Microsoft?2Windows?2Curre@
  00058	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00063	85 c0		 test	 eax, eax
  00065	75 33		 jne	 SHORT $LN3@IsUacSuppo

; 7618 : 	{
; 7619 : 		if (RegQueryValueEx (hkey, "EnableLUA", 0, 0, (LPBYTE) &value, &size) != ERROR_SUCCESS)

  00067	8d 45 f4	 lea	 eax, DWORD PTR _size$[ebp]
  0006a	50		 push	 eax
  0006b	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0006e	50		 push	 eax
  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_09IMBMLODE@EnableLUA?$AA@
  00078	ff 75 f8	 push	 DWORD PTR _hkey$[ebp]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _value$[ebp]
  00084	85 c0		 test	 eax, eax

; 7620 : 			value = 1;
; 7621 : 
; 7622 : 		RegCloseKey (hkey);

  00086	ff 75 f8	 push	 DWORD PTR _hkey$[ebp]
  00089	ba 01 00 00 00	 mov	 edx, 1
  0008e	0f 45 ca	 cmovne	 ecx, edx
  00091	89 4d fc	 mov	 DWORD PTR _value$[ebp], ecx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN3@IsUacSuppo:

; 7623 : 	}
; 7624 : 
; 7625 : 	return value != 0;

  0009a	33 c0		 xor	 eax, eax
  0009c	39 45 fc	 cmp	 DWORD PTR _value$[ebp], eax
  0009f	0f 95 c0	 setne	 al

; 7626 : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_IsUacSupported ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsBuiltInAdmin
_TEXT	SEGMENT
_finally7584$ = -16					; size = 4
_finally7593$ = -12					; size = 4
_procToken$ = -8					; size = 4
_size$ = -4						; size = 4
_IsBuiltInAdmin PROC					; COMDAT

; 7577 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 7578 : 	HANDLE procToken;
; 7579 : 	DWORD size;
; 7580 : 
; 7581 : 	if (!IsAdmin() || !OpenProcessToken (GetCurrentProcess(), TOKEN_QUERY, &procToken))

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsUserAnAdmin@0
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 ba 00 00
	00		 je	 $LN3@IsBuiltInA
  00014	8d 45 f8	 lea	 eax, DWORD PTR _procToken$[ebp]
  00017	50		 push	 eax
  00018	6a 08		 push	 8
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenProcessToken@12
  00027	85 c0		 test	 eax, eax
  00029	0f 84 9f 00 00
	00		 je	 $LN3@IsBuiltInA

; 7583 : 
; 7584 : 	finally_do_arg (HANDLE, procToken, { CloseHandle (finally_arg); });

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _procToken$[ebp]

; 7585 : 
; 7586 : 	if (GetTokenInformation (procToken, TokenUser, NULL, 0, &size) || GetLastError() != ERROR_INSUFFICIENT_BUFFER)

  00032	8d 4d fc	 lea	 ecx, DWORD PTR _size$[ebp]
  00035	56		 push	 esi
  00036	51		 push	 ecx
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	6a 01		 push	 1
  0003d	50		 push	 eax
  0003e	89 45 f0	 mov	 DWORD PTR _finally7584$[ebp], eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTokenInformation@20
  00047	85 c0		 test	 eax, eax
  00049	75 72		 jne	 SHORT $LN5@IsBuiltInA
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00051	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00054	75 67		 jne	 SHORT $LN5@IsBuiltInA

; 7587 : 		return FALSE;
; 7588 : 
; 7589 : 	TOKEN_USER *tokenUser = (TOKEN_USER *) malloc (size);

  00056	ff 75 fc	 push	 DWORD PTR _size$[ebp]
  00059	e8 00 00 00 00	 call	 _malloc
  0005e	8b f0		 mov	 esi, eax
  00060	83 c4 04	 add	 esp, 4

; 7590 : 	if (!tokenUser)

  00063	85 f6		 test	 esi, esi
  00065	74 56		 je	 SHORT $LN5@IsBuiltInA

; 7591 : 		return FALSE;
; 7592 : 
; 7593 : 	finally_do_arg (void *, tokenUser, { free (finally_arg); });
; 7594 : 
; 7595 : 	if (!GetTokenInformation (procToken, TokenUser, tokenUser, size, &size))

  00067	8d 45 fc	 lea	 eax, DWORD PTR _size$[ebp]
  0006a	89 75 f4	 mov	 DWORD PTR _finally7593$[ebp], esi
  0006d	50		 push	 eax
  0006e	ff 75 fc	 push	 DWORD PTR _size$[ebp]
  00071	56		 push	 esi
  00072	6a 01		 push	 1
  00074	ff 75 f8	 push	 DWORD PTR _procToken$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTokenInformation@20
  0007d	85 c0		 test	 eax, eax
  0007f	75 19		 jne	 SHORT $LN7@IsBuiltInA

; 7596 : 		return FALSE;
; 7597 : 
; 7598 : 	return IsWellKnownSid (tokenUser->User.Sid, WinAccountAdministratorSid);

  00081	8d 4d f4	 lea	 ecx, DWORD PTR _finally7593$[ebp]
  00084	33 f6		 xor	 esi, esi
  00086	e8 00 00 00 00	 call	 ??1Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ; `IsBuiltInAdmin'::`2'::Finally7593::~Finally7593
  0008b	8d 4d f0	 lea	 ecx, DWORD PTR _finally7584$[ebp]
  0008e	e8 00 00 00 00	 call	 ??1Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ; `IsBuiltInAdmin'::`2'::Finally7584::~Finally7584
  00093	8b c6		 mov	 eax, esi
  00095	5e		 pop	 esi

; 7599 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN7@IsBuiltInA:

; 7596 : 		return FALSE;
; 7597 : 
; 7598 : 	return IsWellKnownSid (tokenUser->User.Sid, WinAccountAdministratorSid);

  0009a	6a 26		 push	 38			; 00000026H
  0009c	ff 36		 push	 DWORD PTR [esi]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWellKnownSid@8
  000a4	8d 4d f4	 lea	 ecx, DWORD PTR _finally7593$[ebp]
  000a7	8b f0		 mov	 esi, eax
  000a9	e8 00 00 00 00	 call	 ??1Finally7593@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ; `IsBuiltInAdmin'::`2'::Finally7593::~Finally7593
  000ae	8d 4d f0	 lea	 ecx, DWORD PTR _finally7584$[ebp]
  000b1	e8 00 00 00 00	 call	 ??1Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ; `IsBuiltInAdmin'::`2'::Finally7584::~Finally7584
  000b6	8b c6		 mov	 eax, esi
  000b8	5e		 pop	 esi

; 7599 : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN5@IsBuiltInA:

; 7596 : 		return FALSE;
; 7597 : 
; 7598 : 	return IsWellKnownSid (tokenUser->User.Sid, WinAccountAdministratorSid);

  000bd	8d 4d f0	 lea	 ecx, DWORD PTR _finally7584$[ebp]
  000c0	33 f6		 xor	 esi, esi
  000c2	e8 00 00 00 00	 call	 ??1Finally7584@?1??IsBuiltInAdmin@@YAHXZ@QAE@XZ ; `IsBuiltInAdmin'::`2'::Finally7584::~Finally7584
  000c7	8b c6		 mov	 eax, esi
  000c9	5e		 pop	 esi

; 7599 : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
$LN3@IsBuiltInA:

; 7582 : 		return FALSE;

  000ce	33 c0		 xor	 eax, eax

; 7599 : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_IsBuiltInAdmin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsAdmin
_TEXT	SEGMENT
_IsAdmin PROC						; COMDAT

; 7565 : 	return IsUserAnAdmin ();

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__IsUserAnAdmin@0
_IsAdmin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetMountedVolumeDriveNo
_TEXT	SEGMENT
_dwResult$ = -14512					; size = 4
_mlist$ = -14504					; size = 13940
_resolvedPath$ = -564					; size = 24
_volume$ = -540						; size = 536
__$ArrayPad$ = -4					; size = 4
_volname$ = 8						; size = 4
_GetMountedVolumeDriveNo PROC				; COMDAT

; 7523 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b0 38 00 00	 mov	 eax, 14512		; 000038b0H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _volname$[ebp]
  0001b	57		 push	 edi

; 7524 : 	MOUNT_LIST_STRUCT mlist;
; 7525 : 	DWORD dwResult;
; 7526 : 	int i;
; 7527 : 	char volume[GST_MAX_PATH*2+16];
; 7528 : 
; 7529 : 	if (volname == NULL)

  0001c	85 f6		 test	 esi, esi
  0001e	75 13		 jne	 SHORT $LN5@GetMounted

; 7530 : 		return -1;

  00020	83 c8 ff	 or	 eax, -1

; 7553 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN5@GetMounted:

; 7531 : 
; 7532 : 	strcpy (volume, volname);

  00033	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _volume$[ebp]
  00039	8b ce		 mov	 ecx, esi
  0003b	2b d6		 sub	 edx, esi
  0003d	0f 1f 00	 npad	 3
$LL10@GetMounted:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00045	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00049	84 c0		 test	 al, al
  0004b	75 f3		 jne	 SHORT $LL10@GetMounted

; 7533 : 
; 7534 : 	if (strstr (volname, "\\Device\\") != volname)

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_08MBBBEOPI@?2Device?2?$AA@
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _strstr
  00058	83 c4 08	 add	 esp, 8
  0005b	3b c6		 cmp	 eax, esi
  0005d	74 15		 je	 SHORT $LN6@GetMounted

; 7535 : 		sprintf(volume, "\\??\\%s", volname);

  0005f	56		 push	 esi
  00060	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _sprintf
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@GetMounted:

; 7536 : 
; 7537 : 	string resolvedPath = VolumeGuidPathToDevicePath (volname);

  00074	83 ec 18	 sub	 esp, 24			; 00000018H
  00077	8b d4		 mov	 edx, esp
  00079	c7 42 14 0f 00
	00 00		 mov	 DWORD PTR [edx+20], 15	; 0000000fH
  00080	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00087	c6 02 00	 mov	 BYTE PTR [edx], 0
  0008a	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0008d	75 04		 jne	 SHORT $LN124@GetMounted
  0008f	33 c9		 xor	 ecx, ecx
  00091	eb 0e		 jmp	 SHORT $LN125@GetMounted
$LN124@GetMounted:
  00093	8b ce		 mov	 ecx, esi
  00095	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL281@GetMounted:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL281@GetMounted
  0009f	2b cf		 sub	 ecx, edi
$LN125@GetMounted:
  000a1	51		 push	 ecx
  000a2	56		 push	 esi
  000a3	8b ca		 mov	 ecx, edx
  000a5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000aa	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  000b6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7538 : 	if (!resolvedPath.empty())

  000b9	83 bd dc fd ff
	ff 00		 cmp	 DWORD PTR _resolvedPath$[ebp+16], 0
  000c0	74 29		 je	 SHORT $LN7@GetMounted

; 7539 : 		strcpy_s (volume, sizeof (volume), resolvedPath.c_str());

  000c2	83 bd e0 fd ff
	ff 10		 cmp	 DWORD PTR _resolvedPath$[ebp+20], 16 ; 00000010H
  000c9	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$[ebp]
  000cf	0f 43 85 cc fd
	ff ff		 cmovae	 eax, DWORD PTR _resolvedPath$[ebp]
  000d6	50		 push	 eax
  000d7	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  000dd	68 18 02 00 00	 push	 536			; 00000218H
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _strcpy_s
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@GetMounted:

; 7540 : 
; 7541 : 	ToUNICODE (volume);

  000eb	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _ToUNICODE

; 7542 : 
; 7543 : 	memset (&mlist, 0, sizeof (mlist));

  000f7	68 74 36 00 00	 push	 13940			; 00003674H
  000fc	8d 85 58 c7 ff
	ff		 lea	 eax, DWORD PTR _mlist$[ebp]
  00102	6a 00		 push	 0
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _memset
  0010a	83 c4 10	 add	 esp, 16			; 00000010H

; 7544 : 	DeviceIoControl (hDriver, GST_IOCTL_GET_MOUNTED_VOLUMES, &mlist,

  0010d	8d 85 50 c7 ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  00113	6a 00		 push	 0
  00115	50		 push	 eax
  00116	68 74 36 00 00	 push	 13940			; 00003674H
  0011b	8d 85 58 c7 ff
	ff		 lea	 eax, DWORD PTR _mlist$[ebp]
  00121	50		 push	 eax
  00122	68 74 36 00 00	 push	 13940			; 00003674H
  00127	50		 push	 eax
  00128	68 18 20 22 00	 push	 2236440			; 00222018H
  0012d	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7545 : 		sizeof (mlist), &mlist, sizeof (mlist), &dwResult,
; 7546 : 		NULL);
; 7547 : 
; 7548 : 	for (i=0 ; i<26; i++)

  00139	33 f6		 xor	 esi, esi
  0013b	8d bd 5c c7 ff
	ff		 lea	 edi, DWORD PTR _mlist$[ebp+4]
$LL4@GetMounted:

; 7549 : 		if (0 == _wcsicmp ((wchar_t *) mlist.wszVolume[i], (WCHAR *)volume))

  00141	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  00147	50		 push	 eax
  00148	57		 push	 edi
  00149	e8 00 00 00 00	 call	 __wcsicmp
  0014e	83 c4 08	 add	 esp, 8
  00151	85 c0		 test	 eax, eax
  00153	74 0f		 je	 SHORT $LN11@GetMounted

; 7545 : 		sizeof (mlist), &mlist, sizeof (mlist), &dwResult,
; 7546 : 		NULL);
; 7547 : 
; 7548 : 	for (i=0 ; i<26; i++)

  00155	46		 inc	 esi
  00156	81 c7 08 02 00
	00		 add	 edi, 520		; 00000208H
  0015c	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  0015f	7c e0		 jl	 SHORT $LL4@GetMounted

; 7550 : 			return i;
; 7551 : 
; 7552 : 	return -1;

  00161	83 ce ff	 or	 esi, -1
$LN11@GetMounted:
  00164	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _resolvedPath$[ebp+20]
  0016a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0016d	72 31		 jb	 SHORT $LN241@GetMounted
  0016f	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _resolvedPath$[ebp]
  00175	40		 inc	 eax
  00176	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0017b	72 1a		 jb	 SHORT $LN236@GetMounted
  0017d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00180	75 30		 jne	 SHORT $LN283@GetMounted
  00182	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00185	3b c1		 cmp	 eax, ecx
  00187	73 2e		 jae	 SHORT $LN285@GetMounted
  00189	2b c8		 sub	 ecx, eax
  0018b	83 f9 04	 cmp	 ecx, 4
  0018e	72 2c		 jb	 SHORT $LN286@GetMounted
  00190	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00193	77 2c		 ja	 SHORT $LN287@GetMounted
  00195	8b c8		 mov	 ecx, eax
$LN236@GetMounted:
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019d	83 c4 04	 add	 esp, 4
$LN241@GetMounted:

; 7553 : }

  001a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a3	8b c6		 mov	 eax, esi
  001a5	5f		 pop	 edi
  001a6	33 cd		 xor	 ecx, ebp
  001a8	5e		 pop	 esi
  001a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c3		 ret	 0
$LN283@GetMounted:

; 7550 : 			return i;
; 7551 : 
; 7552 : 	return -1;

  001b2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN288@GetMounted:
$LN285@GetMounted:
  001b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN289@GetMounted:
$LN286@GetMounted:
  001bc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN290@GetMounted:
$LN287@GetMounted:
  001c1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN291@GetMounted:
$LN282@GetMounted:
  001c6	cc		 int	 3
_GetMountedVolumeDriveNo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsMountedVolume
_TEXT	SEGMENT
_dwResult$ = -14512					; size = 4
_mlist$ = -14504					; size = 13940
_resolvedPath$ = -564					; size = 24
_volume$ = -540						; size = 536
__$ArrayPad$ = -4					; size = 4
_volname$ = 8						; size = 4
_IsMountedVolume PROC					; COMDAT

; 7484 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 b0 38 00 00	 mov	 eax, 14512		; 000038b0H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _volname$[ebp]

; 7485 : 	MOUNT_LIST_STRUCT mlist;
; 7486 : 	DWORD dwResult;
; 7487 : 	int i;
; 7488 : 	char volume[GST_MAX_PATH*2+16];
; 7489 : 
; 7490 : 	strcpy (volume, volname);

  0001b	8d 95 e4 fd ff
	ff		 lea	 edx, DWORD PTR _volume$[ebp]
  00021	57		 push	 edi
  00022	8b ce		 mov	 ecx, esi
  00024	2b d6		 sub	 edx, esi
$LL9@IsMountedV:
  00026	8a 01		 mov	 al, BYTE PTR [ecx]
  00028	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0002b	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0002f	84 c0		 test	 al, al
  00031	75 f3		 jne	 SHORT $LL9@IsMountedV

; 7491 : 
; 7492 : 	if (strstr (volname, "\\Device\\") != volname)

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_08MBBBEOPI@?2Device?2?$AA@
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _strstr
  0003e	83 c4 08	 add	 esp, 8
  00041	3b c6		 cmp	 eax, esi
  00043	74 15		 je	 SHORT $LN5@IsMountedV

; 7493 : 		sprintf(volume, "\\??\\%s", volname);

  00045	56		 push	 esi
  00046	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_06OLPECHEJ@?2?$DP?$DP?2?$CFs?$AA@
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _sprintf
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@IsMountedV:

; 7494 : 
; 7495 : 	string resolvedPath = VolumeGuidPathToDevicePath (volname);

  0005a	83 ec 18	 sub	 esp, 24			; 00000018H
  0005d	8b d4		 mov	 edx, esp
  0005f	c7 42 14 0f 00
	00 00		 mov	 DWORD PTR [edx+20], 15	; 0000000fH
  00066	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  0006d	c6 02 00	 mov	 BYTE PTR [edx], 0
  00070	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00073	75 04		 jne	 SHORT $LN121@IsMountedV
  00075	33 c9		 xor	 ecx, ecx
  00077	eb 10		 jmp	 SHORT $LN122@IsMountedV
$LN121@IsMountedV:
  00079	8b ce		 mov	 ecx, esi
  0007b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0007e	66 90		 npad	 2
$LL278@IsMountedV:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL278@IsMountedV
  00087	2b cf		 sub	 ecx, edi
$LN122@IsMountedV:
  00089	51		 push	 ecx
  0008a	56		 push	 esi
  0008b	8b ca		 mov	 ecx, edx
  0008d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00092	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  0009e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7496 : 	if (!resolvedPath.empty())

  000a1	83 bd dc fd ff
	ff 00		 cmp	 DWORD PTR _resolvedPath$[ebp+16], 0
  000a8	74 29		 je	 SHORT $LN6@IsMountedV

; 7497 : 		strcpy_s (volume, sizeof (volume), resolvedPath.c_str());

  000aa	83 bd e0 fd ff
	ff 10		 cmp	 DWORD PTR _resolvedPath$[ebp+20], 16 ; 00000010H
  000b1	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$[ebp]
  000b7	0f 43 85 cc fd
	ff ff		 cmovae	 eax, DWORD PTR _resolvedPath$[ebp]
  000be	50		 push	 eax
  000bf	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  000c5	68 18 02 00 00	 push	 536			; 00000218H
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _strcpy_s
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@IsMountedV:

; 7498 : 
; 7499 : 	ToUNICODE (volume);

  000d3	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _ToUNICODE

; 7500 : 
; 7501 : 	memset (&mlist, 0, sizeof (mlist));

  000df	68 74 36 00 00	 push	 13940			; 00003674H
  000e4	8d 85 58 c7 ff
	ff		 lea	 eax, DWORD PTR _mlist$[ebp]
  000ea	6a 00		 push	 0
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 _memset
  000f2	83 c4 10	 add	 esp, 16			; 00000010H

; 7502 : 	DeviceIoControl (hDriver, GST_IOCTL_GET_MOUNTED_VOLUMES, &mlist,

  000f5	8d 85 50 c7 ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  000fb	6a 00		 push	 0
  000fd	50		 push	 eax
  000fe	68 74 36 00 00	 push	 13940			; 00003674H
  00103	8d 85 58 c7 ff
	ff		 lea	 eax, DWORD PTR _mlist$[ebp]
  00109	50		 push	 eax
  0010a	68 74 36 00 00	 push	 13940			; 00003674H
  0010f	50		 push	 eax
  00110	68 18 20 22 00	 push	 2236440			; 00222018H
  00115	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7503 : 		sizeof (mlist), &mlist, sizeof (mlist), &dwResult,
; 7504 : 		NULL);
; 7505 : 
; 7506 : 	for (i=0 ; i<26; i++)

  00121	33 f6		 xor	 esi, esi
  00123	8d bd 5c c7 ff
	ff		 lea	 edi, DWORD PTR _mlist$[ebp+4]
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@IsMountedV:

; 7507 : 		if (0 == _wcsicmp ((wchar_t *) mlist.wszVolume[i], (WCHAR *)volume))

  00130	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _volume$[ebp]
  00136	50		 push	 eax
  00137	57		 push	 edi
  00138	e8 00 00 00 00	 call	 __wcsicmp
  0013d	83 c4 08	 add	 esp, 8
  00140	85 c0		 test	 eax, eax
  00142	74 10		 je	 SHORT $LN272@IsMountedV

; 7503 : 		sizeof (mlist), &mlist, sizeof (mlist), &dwResult,
; 7504 : 		NULL);
; 7505 : 
; 7506 : 	for (i=0 ; i<26; i++)

  00144	46		 inc	 esi
  00145	81 c7 08 02 00
	00		 add	 edi, 520		; 00000208H
  0014b	83 fe 1a	 cmp	 esi, 26			; 0000001aH
  0014e	7c e0		 jl	 SHORT $LL4@IsMountedV

; 7508 : 			return TRUE;
; 7509 : 
; 7510 : 	return FALSE;

  00150	33 f6		 xor	 esi, esi
  00152	eb 05		 jmp	 SHORT $LN10@IsMountedV
$LN272@IsMountedV:
  00154	be 01 00 00 00	 mov	 esi, 1
$LN10@IsMountedV:
  00159	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _resolvedPath$[ebp+20]
  0015f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00162	72 31		 jb	 SHORT $LN238@IsMountedV
  00164	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR _resolvedPath$[ebp]
  0016a	40		 inc	 eax
  0016b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00170	72 1a		 jb	 SHORT $LN233@IsMountedV
  00172	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00175	75 30		 jne	 SHORT $LN280@IsMountedV
  00177	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0017a	3b c1		 cmp	 eax, ecx
  0017c	73 2e		 jae	 SHORT $LN282@IsMountedV
  0017e	2b c8		 sub	 ecx, eax
  00180	83 f9 04	 cmp	 ecx, 4
  00183	72 2c		 jb	 SHORT $LN283@IsMountedV
  00185	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00188	77 2c		 ja	 SHORT $LN284@IsMountedV
  0018a	8b c8		 mov	 ecx, eax
$LN233@IsMountedV:
  0018c	51		 push	 ecx
  0018d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00192	83 c4 04	 add	 esp, 4
$LN238@IsMountedV:

; 7511 : }

  00195	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00198	8b c6		 mov	 eax, esi
  0019a	5f		 pop	 edi
  0019b	33 cd		 xor	 ecx, ebp
  0019d	5e		 pop	 esi
  0019e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
$LN280@IsMountedV:

; 7508 : 			return TRUE;
; 7509 : 
; 7510 : 	return FALSE;

  001a7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN285@IsMountedV:
$LN282@IsMountedV:
  001ac	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN286@IsMountedV:
$LN283@IsMountedV:
  001b1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN287@IsMountedV:
$LN284@IsMountedV:
  001b6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN288@IsMountedV:
$LN279@IsMountedV:
  001bb	cc		 int	 3
_IsMountedVolume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsPasswordCacheEmpty
_TEXT	SEGMENT
_dw$ = -4						; size = 4
_IsPasswordCacheEmpty PROC				; COMDAT

; 7469 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7470 : 	DWORD dw;
; 7471 : 	return !DeviceIoControl (hDriver, GST_IOCTL_GET_PASSWORD_CACHE_STATUS, 0, 0, 0, 0, &dw, 0);

  00004	6a 00		 push	 0
  00006	8d 45 fc	 lea	 eax, DWORD PTR _dw$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	68 2c 20 22 00	 push	 2236460			; 0022202cH
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00023	f7 d8		 neg	 eax
  00025	1b c0		 sbb	 eax, eax
  00027	40		 inc	 eax

; 7472 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_IsPasswordCacheEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _UnmountVolume
_TEXT	SEGMENT
_dwResult$1 = -28					; size = 4
_hwndDlg$GSCopy$1$ = -24				; size = 4
_root$2 = -24						; size = 4
_unmount$3 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_nDosDriveNo$ = 12					; size = 4
_forceUnmount$ = 16					; size = 4
_UnmountVolume PROC					; COMDAT

; 7411 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  00013	53		 push	 ebx

; 7412 : 	int result;
; 7413 : 	BOOL forced = forceUnmount;
; 7414 : 	int dismountMaxRetries = UNMOUNT_MAX_AUTO_RETRIES;

  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _nDosDriveNo$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__Sleep@4
  0001f	be 1e 00 00 00	 mov	 esi, 30			; 0000001eH
  00024	89 45 e8	 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], eax
$retry$45:

; 7415 : 
; 7416 : retry:
; 7417 : 	BroadcastDeviceChange (DBT_DEVICEREMOVEPENDING, nDosDriveNo, 0);

  00027	6a 00		 push	 0
  00029	53		 push	 ebx
  0002a	68 03 80 00 00	 push	 32771			; 00008003H
  0002f	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$LL4@UnmountVol:

; 7418 : 
; 7419 : 	do
; 7420 : 	{
; 7421 : 		result = DriverUnmountVolume (hwndDlg, nDosDriveNo, forced);

  00037	8b 45 10	 mov	 eax, DWORD PTR _forceUnmount$[ebp]
  0003a	6a 00		 push	 0
  0003c	89 45 f0	 mov	 DWORD PTR _unmount$3[ebp+4], eax
  0003f	8d 45 e4	 lea	 eax, DWORD PTR _dwResult$1[ebp]
  00042	50		 push	 eax
  00043	6a 10		 push	 16			; 00000010H
  00045	8d 45 ec	 lea	 eax, DWORD PTR _unmount$3[ebp]
  00048	89 5d ec	 mov	 DWORD PTR _unmount$3[ebp], ebx
  0004b	50		 push	 eax
  0004c	6a 10		 push	 16			; 00000010H
  0004e	50		 push	 eax
  0004f	68 10 20 22 00	 push	 2236432			; 00222010H
  00054	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00060	85 c0		 test	 eax, eax
  00062	0f 84 e9 00 00
	00		 je	 $LN42@UnmountVol

; 7422 : 
; 7423 : 		if (result == ERR_FILES_OPEN)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _unmount$3[ebp+12]
  0006b	83 f8 06	 cmp	 eax, 6
  0006e	0f 85 b4 00 00
	00		 jne	 $LN3@UnmountVol

; 7424 : 			Sleep (UNMOUNT_AUTO_RETRY_DELAY);

  00074	6a 32		 push	 50			; 00000032H
  00076	ff d7		 call	 edi

; 7425 : 		else
; 7426 : 			break;
; 7427 : 
; 7428 : 	} while (--dismountMaxRetries > 0);

  00078	4e		 dec	 esi
  00079	85 f6		 test	 esi, esi
  0007b	7f ba		 jg	 SHORT $LL4@UnmountVol

; 7431 : 	{
; 7432 : 		if (result == ERR_FILES_OPEN && !Silent)

  0007d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00084	0f 85 fd 00 00
	00		 jne	 $LN31@UnmountVol

; 7433 : 		{
; 7434 : 			if (IDYES == AskWarnYesNoTopmost ("UNMOUNT_LOCK_FAILED"))

  0008a	68 34 00 05 00	 push	 327732			; 00050034H
  0008f	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NAPDCKKE@UNMOUNT_LOCK_FAILED?$AA@
  0009a	e8 00 00 00 00	 call	 _GetString
  0009f	83 c4 04	 add	 esp, 4
  000a2	50		 push	 eax
  000a3	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  000af	83 f8 06	 cmp	 eax, 6
  000b2	75 0c		 jne	 SHORT $LN9@UnmountVol

; 7435 : 			{
; 7436 : 				forced = TRUE;

  000b4	c7 45 10 01 00
	00 00		 mov	 DWORD PTR _forceUnmount$[ebp], 1

; 7437 : 				goto retry;

  000bb	e9 67 ff ff ff	 jmp	 $retry$45
$LN9@UnmountVol:

; 7438 : 			}
; 7439 : 
; 7440 : 			if (IsOSAtLeast (WIN_7))

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  000c5	85 c0		 test	 eax, eax
  000c7	7f 0c		 jg	 SHORT $LN23@UnmountVol
  000c9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN23@UnmountVol:
  000d5	c1 e0 08	 shl	 eax, 8
  000d8	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  000de	c1 e0 08	 shl	 eax, 8
  000e1	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  000e7	3d 00 01 06 00	 cmp	 eax, 393472		; 00060100H
  000ec	0f 8c 95 00 00
	00		 jl	 $LN31@UnmountVol

; 7441 : 			{
; 7442 : 				// Undo SHCNE_DRIVEREMOVED
; 7443 : 				char root[] = { (char) nDosDriveNo + 'A', ':', '\\', 0 };
; 7444 : 				SHChangeNotify (SHCNE_DRIVEADD, SHCNF_PATH, root, NULL);

  000f2	6a 00		 push	 0
  000f4	8d 45 e8	 lea	 eax, DWORD PTR _root$2[ebp]
  000f7	66 c7 45 e9 3a
	5c		 mov	 WORD PTR _root$2[ebp+1], 23610 ; 00005c3aH
  000fd	50		 push	 eax
  000fe	6a 01		 push	 1
  00100	80 c3 41	 add	 bl, 65			; 00000041H
  00103	c6 45 eb 00	 mov	 BYTE PTR _root$2[ebp+3], 0
  00107	68 00 01 00 00	 push	 256			; 00000100H
  0010c	88 5d e8	 mov	 BYTE PTR _root$2[ebp], bl
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHChangeNotify@16
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi

; 7451 : 
; 7452 : 		return FALSE;

  00117	33 c0		 xor	 eax, eax
  00119	5b		 pop	 ebx

; 7458 : }

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011d	33 cd		 xor	 ecx, ebp
  0011f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
$LN3@UnmountVol:

; 7429 : 
; 7430 : 	if (result != 0)

  00128	85 c0		 test	 eax, eax
  0012a	75 30		 jne	 SHORT $LN8@UnmountVol

; 7453 : 	} 
; 7454 : 	
; 7455 : 	BroadcastDeviceChange (DBT_DEVICEREMOVECOMPLETE, nDosDriveNo, 0);

  0012c	50		 push	 eax
  0012d	53		 push	 ebx
  0012e	68 04 80 00 00	 push	 32772			; 00008004H
  00133	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7456 : 
; 7457 : 	return TRUE;

  0013b	b8 01 00 00 00	 mov	 eax, 1
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx

; 7458 : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
$LN42@UnmountVol:

; 7418 : 
; 7419 : 	do
; 7420 : 	{
; 7421 : 		result = DriverUnmountVolume (hwndDlg, nDosDriveNo, forced);

  00151	ff 75 e8	 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00154	e8 00 00 00 00	 call	 _handleWin32Error
  00159	83 c4 04	 add	 esp, 4
$LN8@UnmountVol:

; 7445 : 			}
; 7446 : 
; 7447 : 			return FALSE;
; 7448 : 		}
; 7449 : 
; 7450 : 		Error ("UNMOUNT_FAILED");

  0015c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00163	75 22		 jne	 SHORT $LN31@UnmountVol
  00165	6a 10		 push	 16			; 00000010H
  00167	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@INOOLPM@UNMOUNT_FAILED?$AA@
  00172	e8 00 00 00 00	 call	 _GetString
  00177	83 c4 04	 add	 esp, 4
  0017a	50		 push	 eax
  0017b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN31@UnmountVol:

; 7458 : }

  00187	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018a	33 c0		 xor	 eax, eax
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	33 cd		 xor	 ecx, ebp
  00190	5b		 pop	 ebx
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
_UnmountVolume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _MountVolume
_TEXT	SEGMENT
_dwResult$2 = -10020					; size = 4
_dwResult$ = -10016					; size = 4
_dw$3 = -10012						; size = 4
_driveNo$4 = -10008					; size = 4
_flags$5 = -10004					; size = 4
_bps$6 = -10000						; size = 4
tv3573 = -9996						; size = 4
_favoriteMountOnArrivalRetryCount$1$ = -9992		; size = 4
_d$7 = -9988						; size = 4
_bDevice$2$ = -9984					; size = 4
_hwndDlg$GSCopy$1$ = -9980				; size = 4
_password$GSCopy$1$ = -9976				; size = 4
_mountOptions$GSCopy$1$ = -9972				; size = 4
_volumePath$GSCopy$1$ = -9968				; size = 4
_openTestStruct$8 = -9964				; size = 536
_mount$ = -9428						; size = 736
$T9 = -8692						; size = 24
$T10 = -8668						; size = 24
$T11 = -8644						; size = 24
$T12 = -8620						; size = 24
$T13 = -8596						; size = 24
$T14 = -8572						; size = 24
_resolvedPath$15 = -8548				; size = 24
_path$ = -8524						; size = 24
_msg$16 = -8500						; size = 2048
_msg$17 = -6452						; size = 2048
_msg$18 = -4404						; size = 2048
_msg$19 = -2356						; size = 2048
_root$ = -308						; size = 260
_mountPoint$20 = -48					; size = 6
_mountPoint$21 = -40					; size = 6
_mountPoint$22 = -32					; size = 6
_mountPoint$23 = -24					; size = 6
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_volumePath$ = 16					; size = 4
_password$ = 20						; size = 4
_cachePassword$ = 24					; size = 4
_sharedAccess$ = 28					; size = 4
_mountOptions$ = 32					; size = 4
_quiet$ = 36						; size = 4
_bReportWrongPassword$ = 40				; size = 4
_MountVolume PROC					; COMDAT

; 7106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_MountVolume
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 18 27 00 00	 mov	 eax, 10008		; 00002718H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b 5d 10	 mov	 ebx, DWORD PTR _volumePath$[ebp]
  00035	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  00038	8b 75 14	 mov	 esi, DWORD PTR _password$[ebp]
  0003b	8b 7d 20	 mov	 edi, DWORD PTR _mountOptions$[ebp]

; 7107 : 	MOUNT_STRUCT mount;
; 7108 : 	DWORD dwResult;
; 7109 : 	BOOL bResult, bDevice;
; 7110 : 	char root[MAX_PATH];
; 7111 : 	int favoriteMountOnArrivalRetryCount = 0;
; 7112 : 
; 7113 : #ifdef GSTMOUNT
; 7114 : 	if (mountOptions->PartitionInInactiveSysEncScope)
; 7115 : 	{
; 7116 : 		if (!CheckSysEncMountWithoutPBA (volumePath, quiet))
; 7117 : 			return -1;
; 7118 : 	}
; 7119 : #endif
; 7120 : 
; 7121 : 	if (IsMountedVolume (volumePath))

  0003e	53		 push	 ebx
  0003f	89 85 04 d9 ff
	ff		 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], eax
  00045	89 9d 10 d9 ff
	ff		 mov	 DWORD PTR _volumePath$GSCopy$1$[ebp], ebx
  0004b	89 b5 08 d9 ff
	ff		 mov	 DWORD PTR _password$GSCopy$1$[ebp], esi
  00051	89 bd 0c d9 ff
	ff		 mov	 DWORD PTR _mountOptions$GSCopy$1$[ebp], edi
  00057	c7 85 f8 d8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _favoriteMountOnArrivalRetryCount$1$[ebp], 0
  00061	e8 00 00 00 00	 call	 _IsMountedVolume
  00066	83 c4 04	 add	 esp, 4
  00069	85 c0		 test	 eax, eax
  0006b	74 39		 je	 SHORT $LN12@MountVolum

; 7122 : 	{
; 7123 : 		if (!quiet)

  0006d	83 7d 24 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  00071	75 2b		 jne	 SHORT $LN70@MountVolum

; 7124 : 			Error ("VOL_ALREADY_MOUNTED");

  00073	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0007a	75 22		 jne	 SHORT $LN70@MountVolum
  0007c	6a 10		 push	 16			; 00000010H
  0007e	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
$LN1754@MountVolum:
  00089	e8 00 00 00 00	 call	 _GetString
  0008e	83 c4 04	 add	 esp, 4
  00091	50		 push	 eax
  00092	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN70@MountVolum:

; 7125 : 		return -1;

  0009e	83 c8 ff	 or	 eax, -1
  000a1	e9 c0 0b 00 00	 jmp	 $LN1@MountVolum
$LN12@MountVolum:

; 7126 : 	}
; 7127 : 
; 7128 : 	if (!IsDriveAvailable (driveNo))

  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR _driveNo$[ebp]
  000af	ba 01 00 00 00	 mov	 edx, 1
  000b4	d3 e2		 shl	 edx, cl
  000b6	85 c2		 test	 eax, edx
  000b8	74 1e		 je	 SHORT $LN14@MountVolum

; 7129 : 	{
; 7130 : 		if (!quiet)

  000ba	83 7d 24 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  000be	75 de		 jne	 SHORT $LN70@MountVolum

; 7131 : 			Error ("DRIVE_LETTER_UNAVAILABLE");

  000c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  000c7	75 d5		 jne	 SHORT $LN70@MountVolum
  000c9	6a 10		 push	 16			; 00000010H
  000cb	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PCMNJMOK@DRIVE_LETTER_UNAVAILABLE?$AA@

; 7132 : 
; 7133 : 		return -1;

  000d6	eb b1		 jmp	 SHORT $LN1754@MountVolum
$LN14@MountVolum:

; 7134 : 	}
; 7135 : 
; 7136 : 	// If using cached passwords, check cache status first
; 7137 : 	if (password == NULL && IsPasswordCacheEmpty ())

  000d8	85 f6		 test	 esi, esi
  000da	75 25		 jne	 SHORT $LN16@MountVolum
  000dc	56		 push	 esi
  000dd	8d 85 e4 d8 ff
	ff		 lea	 eax, DWORD PTR _dw$3[ebp]
  000e3	50		 push	 eax
  000e4	56		 push	 esi
  000e5	56		 push	 esi
  000e6	56		 push	 esi
  000e7	56		 push	 esi
  000e8	68 2c 20 22 00	 push	 2236460			; 0022202cH
  000ed	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  000f9	85 c0		 test	 eax, eax
  000fb	0f 84 65 0b 00
	00		 je	 $LN1@MountVolum
$LN16@MountVolum:

; 7138 : 		return 0;
; 7139 : 
; 7140 : 	ZeroMemory (&mount, sizeof (mount));

  00101	68 e0 02 00 00	 push	 736			; 000002e0H
  00106	8d 85 2c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp]
  0010c	6a 00		 push	 0
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _memset
  00114	33 c0		 xor	 eax, eax
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	39 45 1c	 cmp	 DWORD PTR _sharedAccess$[ebp], eax
  0011c	0f 94 c0	 sete	 al

; 7141 : 	mount.bExclusiveAccess = sharedAccess ? FALSE : TRUE;

  0011f	89 85 a0 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+628], eax

; 7142 : 	mount.SystemFavorite = MountVolumesAsSystemFavorite;

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR _MountVolumesAsSystemFavorite
  0012a	89 85 b4 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+648], eax

; 7143 : 	mount.UseBackupHeader =  mountOptions->UseBackupHeader;

  00130	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  00133	89 85 04 de ff
	ff		 mov	 DWORD PTR _mount$[ebp+728], eax

; 7144 : 	mount.RecoveryMode = mountOptions->RecoveryMode;

  00139	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0013c	89 85 08 de ff
	ff		 mov	 DWORD PTR _mount$[ebp+732], eax
  00142	8d 85 3c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+16]
  00148	2b c3		 sub	 eax, ebx
  0014a	89 85 f4 d8 ff
	ff		 mov	 DWORD PTR tv3573[ebp], eax
$retry$1755:

; 7145 : 
; 7146 : retry:
; 7147 : 	mount.nDosDriveNo = driveNo;

  00150	8b 45 0c	 mov	 eax, DWORD PTR _driveNo$[ebp]
  00153	89 85 90 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+612], eax

; 7148 : 	mount.bCache = cachePassword;

  00159	8b 45 18	 mov	 eax, DWORD PTR _cachePassword$[ebp]
  0015c	89 85 8c dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+608], eax

; 7149 : 
; 7150 : 	mount.bPartitionInInactiveSysEncScope = FALSE;

  00162	c7 85 ac dd ff
	ff 00 00 00 00	 mov	 DWORD PTR _mount$[ebp+640], 0

; 7151 : 
; 7152 : 	if (password != NULL)

  0016c	85 f6		 test	 esi, esi
  0016e	74 3a		 je	 SHORT $LN17@MountVolum

; 7153 : 		mount.VolumePassword = *password;

  00170	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00173	0f 11 85 44 dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+536], xmm0
  0017a	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  0017e	0f 11 85 54 dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+552], xmm0
  00185	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  00189	0f 11 85 64 dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+568], xmm0
  00190	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  00194	0f 11 85 74 dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+584], xmm0
  0019b	f3 0f 7e 46 40	 movq	 xmm0, QWORD PTR [esi+64]
  001a0	66 0f d6 85 84
	dd ff ff	 movq	 QWORD PTR _mount$[ebp+600], xmm0

; 7154 : 	else

  001a8	eb 0a		 jmp	 SHORT $LN18@MountVolum
$LN17@MountVolum:

; 7155 : 		mount.VolumePassword.Length = 0;

  001aa	c7 85 44 dd ff
	ff 00 00 00 00	 mov	 DWORD PTR _mount$[ebp+536], 0
$LN18@MountVolum:

; 7156 : 
; 7157 : 	if (!mountOptions->ReadOnly && mountOptions->ProtectHiddenVolume)

  001b4	8b 07		 mov	 eax, DWORD PTR [edi]
  001b6	85 c0		 test	 eax, eax
  001b8	75 4a		 jne	 SHORT $LN19@MountVolum
  001ba	39 47 08	 cmp	 DWORD PTR [edi+8], eax
  001bd	74 45		 je	 SHORT $LN19@MountVolum

; 7158 : 	{
; 7159 : 		mount.ProtectedHidVolPassword = mountOptions->ProtectedHidVolPassword;

  001bf	0f 10 47 14	 movups	 xmm0, XMMWORD PTR [edi+20]

; 7160 : 		mount.bProtectHiddenVolume = TRUE;

  001c3	c7 85 b8 dd ff
	ff 01 00 00 00	 mov	 DWORD PTR _mount$[ebp+652], 1
  001cd	0f 11 85 bc dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+656], xmm0
  001d4	0f 10 47 24	 movups	 xmm0, XMMWORD PTR [edi+36]
  001d8	0f 11 85 cc dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+672], xmm0
  001df	0f 10 47 34	 movups	 xmm0, XMMWORD PTR [edi+52]
  001e3	0f 11 85 dc dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+688], xmm0
  001ea	0f 10 47 44	 movups	 xmm0, XMMWORD PTR [edi+68]
  001ee	0f 11 85 ec dd
	ff ff		 movups	 XMMWORD PTR _mount$[ebp+704], xmm0
  001f5	f3 0f 7e 47 54	 movq	 xmm0, QWORD PTR [edi+84]
  001fa	66 0f d6 85 fc
	dd ff ff	 movq	 QWORD PTR _mount$[ebp+720], xmm0

; 7161 : 	}
; 7162 : 	else

  00202	eb 0a		 jmp	 SHORT $LN20@MountVolum
$LN19@MountVolum:

; 7163 : 		mount.bProtectHiddenVolume = FALSE;

  00204	c7 85 b8 dd ff
	ff 00 00 00 00	 mov	 DWORD PTR _mount$[ebp+652], 0
$LN20@MountVolum:

; 7164 : 
; 7165 : 	mount.bMountReadOnly = mountOptions->ReadOnly;
; 7166 : 	mount.bMountRemovable = mountOptions->Removable;
; 7167 : 	mount.bPreserveTimestamp = mountOptions->PreserveTimestamp;
; 7168 : 
; 7169 : 	mount.bMountManager = TRUE;
; 7170 : 
; 7171 : 	// Windows 2000 mount manager causes problems with remounted volumes
; 7172 : 	if (CurrentOSMajor == 5 && CurrentOSMinor == 0)

  0020e	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _CurrentOSMajor, 5
  00215	89 85 98 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+620], eax
  0021b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0021e	89 85 9c dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+624], eax
  00224	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00227	89 85 a8 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+636], eax
  0022d	b8 01 00 00 00	 mov	 eax, 1
  00232	89 85 a4 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+632], eax
  00238	75 11		 jne	 SHORT $LN21@MountVolum
  0023a	33 c9		 xor	 ecx, ecx
  0023c	39 0d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSMinor, ecx
  00242	0f 44 c1	 cmove	 eax, ecx
  00245	89 85 a4 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+632], eax
$LN21@MountVolum:

; 7173 : 		mount.bMountManager = FALSE;
; 7174 : 
; 7175 : 	string path = volumePath;

  0024b	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  0024e	c7 85 c8 de ff
	ff 0f 00 00 00	 mov	 DWORD PTR _path$[ebp+20], 15 ; 0000000fH
  00258	c7 85 c4 de ff
	ff 00 00 00 00	 mov	 DWORD PTR _path$[ebp+16], 0
  00262	c6 85 b4 de ff
	ff 00		 mov	 BYTE PTR _path$[ebp], 0
  00269	75 04		 jne	 SHORT $LN206@MountVolum
  0026b	33 c9		 xor	 ecx, ecx
  0026d	eb 0e		 jmp	 SHORT $LN207@MountVolum
$LN206@MountVolum:
  0026f	8b cb		 mov	 ecx, ebx
  00271	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL1727@MountVolum:
  00274	8a 01		 mov	 al, BYTE PTR [ecx]
  00276	41		 inc	 ecx
  00277	84 c0		 test	 al, al
  00279	75 f9		 jne	 SHORT $LL1727@MountVolum
  0027b	2b ca		 sub	 ecx, edx
$LN207@MountVolum:
  0027d	51		 push	 ecx
  0027e	53		 push	 ebx
  0027f	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00285	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 7176 : 	if (path.find ("\\\\?\\") == 0)

  0028a	6a 04		 push	 4
  0028c	6a 00		 push	 0
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_04HMNMCKMH@?2?2?$DP?2?$AA@
  00293	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00299	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0029e	85 c0		 test	 eax, eax
  002a0	0f 85 ca 00 00
	00		 jne	 $LN631@MountVolum

; 7177 : 	{
; 7178 : 		// Remove \\?\ prefix
; 7179 : 		path = path.substr (4);

  002a6	6a ff		 push	 -1
  002a8	6a 04		 push	 4
  002aa	8d 85 84 de ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  002b0	50		 push	 eax
  002b1	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  002b7	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  002bc	8b f0		 mov	 esi, eax
  002be	8d 85 b4 de ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  002c4	3b c6		 cmp	 eax, esi
  002c6	74 45		 je	 SHORT $LN219@MountVolum
  002c8	8b 85 c8 de ff
	ff		 mov	 eax, DWORD PTR _path$[ebp+20]
  002ce	83 f8 10	 cmp	 eax, 16			; 00000010H
  002d1	72 13		 jb	 SHORT $LN225@MountVolum
  002d3	40		 inc	 eax
  002d4	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  002da	50		 push	 eax
  002db	ff b5 b4 de ff
	ff		 push	 DWORD PTR _path$[ebp]
  002e1	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN225@MountVolum:
  002e6	56		 push	 esi
  002e7	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  002ed	c7 85 c8 de ff
	ff 0f 00 00 00	 mov	 DWORD PTR _path$[ebp+20], 15 ; 0000000fH
  002f7	c7 85 c4 de ff
	ff 00 00 00 00	 mov	 DWORD PTR _path$[ebp+16], 0
  00301	c6 85 b4 de ff
	ff 00		 mov	 BYTE PTR _path$[ebp], 0
  00308	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN219@MountVolum:
  0030d	8b 85 98 de ff
	ff		 mov	 eax, DWORD PTR $T14[ebp+20]
  00313	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0031a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0031d	72 13		 jb	 SHORT $LN515@MountVolum
  0031f	40		 inc	 eax
  00320	8d 8d 84 de ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00326	50		 push	 eax
  00327	ff b5 84 de ff
	ff		 push	 DWORD PTR $T14[ebp]
  0032d	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN515@MountVolum:

; 7180 : 		strcpy_s (volumePath, GST_MAX_PATH, path.c_str());

  00332	83 bd c8 de ff
	ff 10		 cmp	 DWORD PTR _path$[ebp+20], 16 ; 00000010H
  00339	8d 85 b4 de ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  0033f	c7 85 98 de ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH
  00349	0f 43 85 b4 de
	ff ff		 cmovae	 eax, DWORD PTR _path$[ebp]
  00350	50		 push	 eax
  00351	68 04 01 00 00	 push	 260			; 00000104H
  00356	53		 push	 ebx
  00357	c7 85 94 de ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp+16], 0
  00361	c6 85 84 de ff
	ff 00		 mov	 BYTE PTR $T14[ebp], 0
  00368	e8 00 00 00 00	 call	 _strcpy_s
  0036d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7181 : 	}
; 7182 : 	
; 7183 : 	if (path.find ("Volume{") == 0 && path.rfind ("}\\") == path.size() - 2)

$LN631@MountVolum:
  00370	6a 07		 push	 7
  00372	6a 00		 push	 0
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_07HBPFMAGN@Volume?$HL?$AA@
  00379	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  0037f	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00384	85 c0		 test	 eax, eax
  00386	0f 85 bf 00 00
	00		 jne	 $LN806@MountVolum
  0038c	6a 02		 push	 2
  0038e	6a ff		 push	 -1
  00390	68 00 00 00 00	 push	 OFFSET ??_C@_02EKJJMPLG@?$HN?2?$AA@
  00395	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  0039b	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  003a0	8b 8d c4 de ff
	ff		 mov	 ecx, DWORD PTR _path$[ebp+16]
  003a6	83 c1 fe	 add	 ecx, -2			; fffffffeH
  003a9	3b c1		 cmp	 eax, ecx
  003ab	0f 85 9a 00 00
	00		 jne	 $LN806@MountVolum

; 7184 : 	{
; 7185 : 		string resolvedPath = VolumeGuidPathToDevicePath (path);

  003b1	83 ec 18	 sub	 esp, 24			; 00000018H
  003b4	8d 85 b4 de ff
	ff		 lea	 eax, DWORD PTR _path$[ebp]
  003ba	8b cc		 mov	 ecx, esp
  003bc	6a ff		 push	 -1
  003be	6a 00		 push	 0
  003c0	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  003c7	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  003ce	50		 push	 eax
  003cf	c6 01 00	 mov	 BYTE PTR [ecx], 0
  003d2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003d7	8d 85 9c de ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$15[ebp]
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 ?VolumeGuidPathToDevicePath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; VolumeGuidPathToDevicePath
  003e3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7186 : 
; 7187 : 		if (!resolvedPath.empty())

  003e6	83 bd ac de ff
	ff 00		 cmp	 DWORD PTR _resolvedPath$15[ebp+16], 0
  003ed	74 23		 je	 SHORT $LN24@MountVolum

; 7188 : 			strcpy_s (volumePath, GST_MAX_PATH, resolvedPath.c_str());

  003ef	83 bd b0 de ff
	ff 10		 cmp	 DWORD PTR _resolvedPath$15[ebp+20], 16 ; 00000010H
  003f6	8d 85 9c de ff
	ff		 lea	 eax, DWORD PTR _resolvedPath$15[ebp]
  003fc	0f 43 85 9c de
	ff ff		 cmovae	 eax, DWORD PTR _resolvedPath$15[ebp]
  00403	50		 push	 eax
  00404	68 04 01 00 00	 push	 260			; 00000104H
  00409	53		 push	 ebx
  0040a	e8 00 00 00 00	 call	 _strcpy_s
  0040f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@MountVolum:

; 7189 : 	}

  00412	8b 85 b0 de ff
	ff		 mov	 eax, DWORD PTR _resolvedPath$15[ebp+20]
  00418	83 f8 10	 cmp	 eax, 16			; 00000010H
  0041b	72 13		 jb	 SHORT $LN811@MountVolum
  0041d	40		 inc	 eax
  0041e	8d 8d 9c de ff
	ff		 lea	 ecx, DWORD PTR _resolvedPath$15[ebp]
  00424	50		 push	 eax
  00425	ff b5 9c de ff
	ff		 push	 DWORD PTR _resolvedPath$15[ebp]
  0042b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN811@MountVolum:
  00430	c7 85 b0 de ff
	ff 0f 00 00 00	 mov	 DWORD PTR _resolvedPath$15[ebp+20], 15 ; 0000000fH
  0043a	c7 85 ac de ff
	ff 00 00 00 00	 mov	 DWORD PTR _resolvedPath$15[ebp+16], 0
  00444	c6 85 9c de ff
	ff 00		 mov	 BYTE PTR _resolvedPath$15[ebp], 0
$LN806@MountVolum:

; 7190 : 
; 7191 : 	CreateFullVolumePath ((char *) mount.wszVolume, volumePath, &bDevice);

  0044b	8b f3		 mov	 esi, ebx
  0044d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL1728@MountVolum:
  00450	8a 06		 mov	 al, BYTE PTR [esi]
  00452	46		 inc	 esi
  00453	84 c0		 test	 al, al
  00455	75 f9		 jne	 SHORT $LL1728@MountVolum
  00457	2b f1		 sub	 esi, ecx
  00459	88 84 35 3c db
	ff ff		 mov	 BYTE PTR _mount$[ebp+esi+16], al
  00460	83 ee 01	 sub	 esi, 1
  00463	78 31		 js	 SHORT $LN912@MountVolum
  00465	8b fb		 mov	 edi, ebx
  00467	8d 85 3c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+16]
  0046d	2b f8		 sub	 edi, eax
  0046f	90		 npad	 1
$LL911@MountVolum:
  00470	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00473	0f be 84 05 3c
	db ff ff	 movsx	 eax, BYTE PTR _mount$[ebp+eax+16]
  0047b	50		 push	 eax
  0047c	e8 00 00 00 00	 call	 _toupper
  00481	83 c4 04	 add	 esp, 4
  00484	88 84 35 3c db
	ff ff		 mov	 BYTE PTR _mount$[ebp+esi+16], al
  0048b	83 ee 01	 sub	 esi, 1
  0048e	79 e0		 jns	 SHORT $LL911@MountVolum
  00490	8b bd 0c d9 ff
	ff		 mov	 edi, DWORD PTR _mountOptions$GSCopy$1$[ebp]
$LN912@MountVolum:
  00496	33 d2		 xor	 edx, edx
  00498	8d 8d 3c db ff
	ff		 lea	 ecx, DWORD PTR _mount$[ebp+16]
  0049e	81 39 5c 44 45
	56		 cmp	 DWORD PTR [ecx], 1447380060 ; 5645445cH
  004a4	89 95 00 d9 ff
	ff		 mov	 DWORD PTR _bDevice$2$[ebp], edx
  004aa	75 19		 jne	 SHORT $LN1730@MountVolum
  004ac	66 81 79 04 49
	43		 cmp	 WORD PTR [ecx+4], 17225	; 00004349H
  004b2	75 11		 jne	 SHORT $LN1730@MountVolum
  004b4	80 79 06 45	 cmp	 BYTE PTR [ecx+6], 69	; 00000045H
  004b8	75 0b		 jne	 SHORT $LN1730@MountVolum
  004ba	ba 01 00 00 00	 mov	 edx, 1
  004bf	89 95 00 d9 ff
	ff		 mov	 DWORD PTR _bDevice$2$[ebp], edx
$LN1730@MountVolum:
  004c5	8b b5 f4 d8 ff
	ff		 mov	 esi, DWORD PTR tv3573[ebp]
  004cb	8b cb		 mov	 ecx, ebx
  004cd	0f 1f 00	 npad	 3
$LL909@MountVolum:
  004d0	8a 01		 mov	 al, BYTE PTR [ecx]
  004d2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  004d5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  004d9	84 c0		 test	 al, al
  004db	75 f3		 jne	 SHORT $LL909@MountVolum
  004dd	85 d2		 test	 edx, edx

; 7192 : 
; 7193 : 	if (!bDevice)

  004df	0f 85 68 01 00
	00		 jne	 $LN29@MountVolum

; 7194 : 	{
; 7195 : 		// UNC path
; 7196 : 		if (path.find ("\\\\") == 0)

  004e5	6a 02		 push	 2
  004e7	52		 push	 edx
  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_02HDBGODGB@?2?2?$AA@
  004ed	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  004f3	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  004f8	85 c0		 test	 eax, eax
  004fa	0f 85 ba 00 00
	00		 jne	 $LN1039@MountVolum

; 7197 : 		{
; 7198 : 			strcpy_s ((char *)mount.wszVolume, array_capacity (mount.wszVolume), ("UNC" + path.substr (1)).c_str());

  00500	6a ff		 push	 -1
  00502	6a 01		 push	 1
  00504	8d 85 54 de ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0050a	50		 push	 eax
  0050b	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00511	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00516	50		 push	 eax
  00517	8d 85 6c de ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  0051d	68 00 00 00 00	 push	 OFFSET ??_C@_03IDDIGDHP@UNC?$AA@
  00522	50		 push	 eax
  00523	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00528	83 c4 0c	 add	 esp, 12			; 0000000cH
  0052b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0052f	72 02		 jb	 SHORT $LN934@MountVolum
  00531	8b 00		 mov	 eax, DWORD PTR [eax]
$LN934@MountVolum:
  00533	50		 push	 eax
  00534	8d 85 3c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+16]
  0053a	68 04 01 00 00	 push	 260			; 00000104H
  0053f	50		 push	 eax
  00540	e8 00 00 00 00	 call	 _strcpy_s
  00545	8b 85 80 de ff
	ff		 mov	 eax, DWORD PTR $T13[ebp+20]
  0054b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0054e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00551	72 13		 jb	 SHORT $LN943@MountVolum
  00553	40		 inc	 eax
  00554	8d 8d 6c de ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0055a	50		 push	 eax
  0055b	ff b5 6c de ff
	ff		 push	 DWORD PTR $T13[ebp]
  00561	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN943@MountVolum:
  00566	8b 85 68 de ff
	ff		 mov	 eax, DWORD PTR $T12[ebp+20]
  0056c	c7 85 80 de ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T13[ebp+20], 15 ; 0000000fH
  00576	c7 85 7c de ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp+16], 0
  00580	c6 85 6c de ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0
  00587	83 f8 10	 cmp	 eax, 16			; 00000010H
  0058a	72 13		 jb	 SHORT $LN1044@MountVolum
  0058c	40		 inc	 eax
  0058d	8d 8d 54 de ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00593	50		 push	 eax
  00594	ff b5 54 de ff
	ff		 push	 DWORD PTR $T12[ebp]
  0059a	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN1044@MountVolum:
  0059f	c7 85 68 de ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH
  005a9	c7 85 64 de ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 0
  005b3	c6 85 54 de ff
	ff 00		 mov	 BYTE PTR $T12[ebp], 0
$LN1039@MountVolum:

; 7199 : 		}
; 7200 : 
; 7201 : 		if (GetVolumePathName (volumePath, root, sizeof (root) - 1))

  005ba	68 03 01 00 00	 push	 259			; 00000103H
  005bf	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _root$[ebp]
  005c5	50		 push	 eax
  005c6	53		 push	 ebx
  005c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumePathNameA@12
  005cd	85 c0		 test	 eax, eax
  005cf	74 7c		 je	 SHORT $LN29@MountVolum

; 7202 : 		{
; 7203 : 			DWORD bps, flags, d;
; 7204 : 			if (GetDiskFreeSpace (root, &d, &bps, &d, &d))

  005d1	8d 85 fc d8 ff
	ff		 lea	 eax, DWORD PTR _d$7[ebp]
  005d7	50		 push	 eax
  005d8	50		 push	 eax
  005d9	8d 85 f0 d8 ff
	ff		 lea	 eax, DWORD PTR _bps$6[ebp]
  005df	50		 push	 eax
  005e0	8d 85 fc d8 ff
	ff		 lea	 eax, DWORD PTR _d$7[ebp]
  005e6	50		 push	 eax
  005e7	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _root$[ebp]
  005ed	50		 push	 eax
  005ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDiskFreeSpaceA@20
  005f4	8b 8d 94 dd ff
	ff		 mov	 ecx, DWORD PTR _mount$[ebp+616]
  005fa	85 c0		 test	 eax, eax
  005fc	0f 45 8d f0 d8
	ff ff		 cmovne	 ecx, DWORD PTR _bps$6[ebp]

; 7205 : 				mount.BytesPerSector = bps;
; 7206 : 
; 7207 : 			// Read-only host filesystem
; 7208 : 			if (!mount.bMountReadOnly && GetVolumeInformation (root, NULL, 0,  NULL, &d, &flags, NULL, 0))

  00603	83 bd 98 dd ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+620], 0
  0060a	89 8d 94 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+616], ecx
  00610	75 3b		 jne	 SHORT $LN29@MountVolum
  00612	6a 00		 push	 0
  00614	6a 00		 push	 0
  00616	8d 85 ec d8 ff
	ff		 lea	 eax, DWORD PTR _flags$5[ebp]
  0061c	50		 push	 eax
  0061d	8d 85 fc d8 ff
	ff		 lea	 eax, DWORD PTR _d$7[ebp]
  00623	50		 push	 eax
  00624	6a 00		 push	 0
  00626	6a 00		 push	 0
  00628	6a 00		 push	 0
  0062a	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _root$[ebp]
  00630	50		 push	 eax
  00631	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVolumeInformationA@32
  00637	85 c0		 test	 eax, eax
  00639	74 12		 je	 SHORT $LN29@MountVolum

; 7209 : 				mount.bMountReadOnly = (flags & FILE_READ_ONLY_VOLUME) != 0;

  0063b	8b 85 ec d8 ff
	ff		 mov	 eax, DWORD PTR _flags$5[ebp]
  00641	c1 e8 13	 shr	 eax, 19			; 00000013H
  00644	83 e0 01	 and	 eax, 1
  00647	89 85 98 dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+620], eax
$LN29@MountVolum:

; 7210 : 		}
; 7211 : 	}
; 7212 : 
; 7213 : 	ToUNICODE ((char *) mount.wszVolume);

  0064d	8d 85 3c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+16]
  00653	50		 push	 eax
  00654	e8 00 00 00 00	 call	 _ToUNICODE
  00659	83 c4 04	 add	 esp, 4

; 7214 : 
; 7215 : 	if (mountOptions->PartitionInInactiveSysEncScope)

  0065c	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00660	74 2c		 je	 SHORT $LN30@MountVolum

; 7216 : 	{
; 7217 : 		if (mount.wszVolume == NULL || swscanf_s ((const wchar_t *) mount.wszVolume,

  00662	6a 04		 push	 4
  00664	8d 85 b0 dd ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+644]
  0066a	50		 push	 eax
  0066b	8d 85 3c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+16]
  00671	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@KHADBPEJ@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  00676	50		 push	 eax
  00677	e8 00 00 00 00	 call	 _swscanf_s
  0067c	83 c4 10	 add	 esp, 16			; 00000010H
  0067f	83 f8 01	 cmp	 eax, 1
  00682	0f 85 fc 01 00
	00		 jne	 $LN41@MountVolum

; 7218 : 			WIDE("\\Device\\Harddisk%d\\Partition"),
; 7219 : 			&mount.nPartitionInInactiveSysEncScopeDriveNo,
; 7220 : 			sizeof(mount.nPartitionInInactiveSysEncScopeDriveNo)) != 1)
; 7221 : 		{
; 7222 : 			return -1;
; 7223 : 		}
; 7224 : 
; 7225 : 		mount.bPartitionInInactiveSysEncScope = TRUE;

  00688	89 85 ac dd ff
	ff		 mov	 DWORD PTR _mount$[ebp+640], eax
$LN30@MountVolum:

; 7226 : 	}
; 7227 : 
; 7228 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_MOUNT_VOLUME, &mount,

  0068e	6a 00		 push	 0
  00690	8d 85 e0 d8 ff
	ff		 lea	 eax, DWORD PTR _dwResult$[ebp]
  00696	50		 push	 eax
  00697	68 e0 02 00 00	 push	 736			; 000002e0H
  0069c	8d 85 2c db ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp]
  006a2	50		 push	 eax
  006a3	68 e0 02 00 00	 push	 736			; 000002e0H
  006a8	50		 push	 eax
  006a9	68 0c 20 22 00	 push	 2236428			; 0022200cH
  006ae	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  006b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 7229 : 		sizeof (mount), &mount, sizeof (mount), &dwResult, NULL);
; 7230 : 
; 7231 : 	burn (&mount.VolumePassword, sizeof (mount.VolumePassword));

  006ba	8d 8d 44 dd ff
	ff		 lea	 ecx, DWORD PTR _mount$[ebp+536]
  006c0	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  006c5	8b d8		 mov	 ebx, eax
  006c7	8b fa		 mov	 edi, edx
  006c9	8b f1		 mov	 esi, ecx
  006cb	0f 1f 44 00 00	 npad	 5
$LL1140@MountVolum:
  006d0	c6 06 00	 mov	 BYTE PTR [esi], 0
  006d3	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  006d6	83 ef 01	 sub	 edi, 1
  006d9	75 f5		 jne	 SHORT $LL1140@MountVolum
  006db	0f 1f 44 00 00	 npad	 5
$LL5@MountVolum:
  006e0	c6 01 00	 mov	 BYTE PTR [ecx], 0
  006e3	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  006e6	83 ea 01	 sub	 edx, 1
  006e9	75 f5		 jne	 SHORT $LL5@MountVolum

; 7232 : 	burn (&mount.ProtectedHidVolPassword, sizeof (mount.ProtectedHidVolPassword));

  006eb	8d 85 bc dd ff
	ff		 lea	 eax, DWORD PTR _mount$[ebp+656]
  006f1	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  006f6	8b f1		 mov	 esi, ecx
  006f8	8b d0		 mov	 edx, eax
  006fa	66 0f 1f 44 00
	00		 npad	 6
$LL1144@MountVolum:
  00700	c6 02 00	 mov	 BYTE PTR [edx], 0
  00703	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00706	83 ee 01	 sub	 esi, 1
  00709	75 f5		 jne	 SHORT $LL1144@MountVolum
  0070b	0f 1f 44 00 00	 npad	 5
$LL10@MountVolum:
  00710	c6 00 00	 mov	 BYTE PTR [eax], 0
  00713	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00716	83 e9 01	 sub	 ecx, 1
  00719	75 f5		 jne	 SHORT $LL10@MountVolum

; 7233 : 
; 7234 : 	if (bResult == FALSE)

  0071b	85 db		 test	 ebx, ebx
  0071d	0f 85 d9 00 00
	00		 jne	 $LN33@MountVolum

; 7235 : 	{
; 7236 : 		// Volume already open by another process
; 7237 : 		if (GetLastError () == ERROR_SHARING_VIOLATION)

  00723	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetLastError@0
  00729	ff d3		 call	 ebx
  0072b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0072e	0f 85 2c 01 00
	00		 jne	 $LN34@MountVolum

; 7238 : 		{
; 7239 : 			if (FavoriteMountOnArrivalInProgress && ++favoriteMountOnArrivalRetryCount < 10)

  00734	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _FavoriteMountOnArrivalInProgress, 0
  0073b	74 56		 je	 SHORT $LN35@MountVolum
  0073d	8b 85 f8 d8 ff
	ff		 mov	 eax, DWORD PTR _favoriteMountOnArrivalRetryCount$1$[ebp]
  00743	40		 inc	 eax
  00744	89 85 f8 d8 ff
	ff		 mov	 DWORD PTR _favoriteMountOnArrivalRetryCount$1$[ebp], eax
  0074a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0074d	7d 44		 jge	 SHORT $LN35@MountVolum

; 7240 : 			{
; 7241 : 				Sleep (500);

  0074f	68 f4 01 00 00	 push	 500			; 000001f4H
  00754	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
$LN1750@MountVolum:

; 7242 : 				goto retry;

  0075a	8b 85 c8 de ff
	ff		 mov	 eax, DWORD PTR _path$[ebp+20]
  00760	8b 9d 10 d9 ff
	ff		 mov	 ebx, DWORD PTR _volumePath$GSCopy$1$[ebp]
  00766	8b bd 0c d9 ff
	ff		 mov	 edi, DWORD PTR _mountOptions$GSCopy$1$[ebp]
  0076c	8b b5 08 d9 ff
	ff		 mov	 esi, DWORD PTR _password$GSCopy$1$[ebp]
  00772	83 f8 10	 cmp	 eax, 16			; 00000010H
  00775	0f 82 d5 f9 ff
	ff		 jb	 $retry$1755
  0077b	40		 inc	 eax
  0077c	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00782	50		 push	 eax
  00783	ff b5 b4 de ff
	ff		 push	 DWORD PTR _path$[ebp]
  00789	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
  0078e	e9 bd f9 ff ff	 jmp	 $retry$1755
$LN35@MountVolum:

; 7243 : 			}
; 7244 : 
; 7245 : 			if (mount.bExclusiveAccess == FALSE)

  00793	83 bd a0 dd ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+628], 0
  0079a	0f 84 a5 00 00
	00		 je	 $LN1698@MountVolum

; 7249 : 
; 7250 : 				return -1;
; 7251 : 			}
; 7252 : 			else
; 7253 : 			{
; 7254 : 				if (quiet)

  007a0	83 7d 24 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  007a4	74 0c		 je	 SHORT $LN39@MountVolum

; 7255 : 				{
; 7256 : 					mount.bExclusiveAccess = FALSE;

  007a6	c7 85 a0 dd ff
	ff 00 00 00 00	 mov	 DWORD PTR _mount$[ebp+628], 0

; 7257 : 					goto retry;

  007b0	eb a8		 jmp	 SHORT $LN1750@MountVolum
$LN39@MountVolum:

; 7258 : 				}
; 7259 : 
; 7260 : 				// Ask user 
; 7261 : 				if (IDYES == AskWarnNoYes ("FILE_IN_USE"))

  007b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  007b9	0f 85 c5 00 00
	00		 jne	 $LN41@MountVolum
  007bf	68 34 01 00 00	 push	 308			; 00000134H
  007c4	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  007ca	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CLFBJLHD@FILE_IN_USE?$AA@
  007cf	e8 00 00 00 00	 call	 _GetString
  007d4	83 c4 04	 add	 esp, 4
  007d7	50		 push	 eax
  007d8	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  007de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  007e4	83 f8 06	 cmp	 eax, 6
  007e7	0f 85 97 00 00
	00		 jne	 $LN41@MountVolum

; 7262 : 				{
; 7263 : 					mount.bExclusiveAccess = FALSE;

  007ed	c7 85 a0 dd ff
	ff 00 00 00 00	 mov	 DWORD PTR _mount$[ebp+628], 0

; 7264 : 					goto retry;

  007f7	e9 5e ff ff ff	 jmp	 $LN1750@MountVolum
$LN33@MountVolum:

; 7273 : 
; 7274 : 		return -1;
; 7275 : 	}
; 7276 : 
; 7277 : 	if (mount.nReturnCode != 0)

  007fc	8b 85 2c db ff
	ff		 mov	 eax, DWORD PTR _mount$[ebp]
  00802	85 c0		 test	 eax, eax
  00804	0f 84 0d 02 00
	00		 je	 $LN43@MountVolum

; 7278 : 	{
; 7279 : 		if (mount.nReturnCode == ERR_PASSWORD_WRONG)

  0080a	83 f8 03	 cmp	 eax, 3
  0080d	0f 85 e8 01 00
	00		 jne	 $LN44@MountVolum

; 7280 : 		{
; 7281 : 			// Do not report wrong password, if not instructed to 
; 7282 : 			if (bReportWrongPassword)

  00813	83 7d 28 00	 cmp	 DWORD PTR _bReportWrongPassword$[ebp], 0
  00817	0f 84 f3 01 00
	00		 je	 $LN52@MountVolum

; 7283 : 			{
; 7284 : 				IncreaseWrongPwdRetryCount (1);		// We increase the count here only if bReportWrongPassword is TRUE, because "Auto-Mount All Devices" and other callers do it separately

  0081d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?WrongPwdRetryCounter@@3HA ; WrongPwdRetryCounter
  00822	40		 inc	 eax
  00823	a3 00 00 00 00	 mov	 DWORD PTR ?WrongPwdRetryCounter@@3HA, eax ; WrongPwdRetryCounter

; 7285 : 
; 7286 : 				if (WrongPwdRetryCountOverLimit () 
; 7287 : 					&& !mount.UseBackupHeader)

  00828	83 f8 02	 cmp	 eax, 2
  0082b	7e 5f		 jle	 SHORT $LN46@MountVolum
  0082d	83 bd 04 de ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+728], 0
  00834	75 56		 jne	 SHORT $LN46@MountVolum

; 7288 : 				{
; 7289 : 					// Retry using embedded header backup (if any)
; 7290 : 					mount.UseBackupHeader = TRUE;

  00836	c7 85 04 de ff
	ff 01 00 00 00	 mov	 DWORD PTR _mount$[ebp+728], 1

; 7291 : 					goto retry;

  00840	e9 15 ff ff ff	 jmp	 $LN1750@MountVolum
$LN1698@MountVolum:

; 7246 : 			{
; 7247 : 				if (!quiet)

  00845	83 7d 24 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  00849	75 39		 jne	 SHORT $LN41@MountVolum

; 7248 : 					Error ("FILE_IN_USE_FAILED");

  0084b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NBNNICAF@FILE_IN_USE_FAILED?$AA@
  00850	e8 00 00 00 00	 call	 _Error

; 7272 : 			handleWin32Error (hwndDlg);

  00855	83 c4 04	 add	 esp, 4
  00858	83 ce ff	 or	 esi, -1
  0085b	e9 e6 03 00 00	 jmp	 $LN69@MountVolum
$LN34@MountVolum:

; 7265 : 				}
; 7266 : 			}
; 7267 : 
; 7268 : 			return -1;
; 7269 : 		}
; 7270 : 
; 7271 : 		if (!quiet && (!MultipleMountOperationInProgress || GetLastError() != ERROR_NOT_READY))

  00860	83 7d 24 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  00864	75 1e		 jne	 SHORT $LN41@MountVolum
  00866	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _MultipleMountOperationInProgress, 0
  0086d	74 07		 je	 SHORT $LN42@MountVolum
  0086f	ff d3		 call	 ebx
  00871	83 f8 15	 cmp	 eax, 21			; 00000015H
  00874	74 0e		 je	 SHORT $LN41@MountVolum
$LN42@MountVolum:

; 7272 : 			handleWin32Error (hwndDlg);

  00876	ff b5 04 d9 ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  0087c	e8 00 00 00 00	 call	 _handleWin32Error
  00881	83 c4 04	 add	 esp, 4
$LN41@MountVolum:
  00884	83 ce ff	 or	 esi, -1
  00887	e9 ba 03 00 00	 jmp	 $LN69@MountVolum
$LN46@MountVolum:
  0088c	8b bd 00 d9 ff
	ff		 mov	 edi, DWORD PTR _bDevice$2$[ebp]
  00892	85 ff		 test	 edi, edi

; 7292 : 				}
; 7293 : 
; 7294 : 				if (bDevice && mount.bProtectHiddenVolume)

  00894	0f 84 4a 01 00
	00		 je	 $LN47@MountVolum
  0089a	83 bd b8 dd ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+652], 0
  008a1	0f 84 3d 01 00
	00		 je	 $LN47@MountVolum

; 7295 : 				{
; 7296 : 					int driveNo;
; 7297 : 
; 7298 : 					if (sscanf (volumePath, "\\Device\\Harddisk%d\\Partition", &driveNo) == 1)

  008a7	8b 9d 10 d9 ff
	ff		 mov	 ebx, DWORD PTR _volumePath$GSCopy$1$[ebp]
  008ad	8d 85 e8 d8 ff
	ff		 lea	 eax, DWORD PTR _driveNo$4[ebp]
  008b3	50		 push	 eax
  008b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CEPHIDFC@?2Device?2Harddisk?$CFd?2Partition?$AA@
  008b9	53		 push	 ebx
  008ba	e8 00 00 00 00	 call	 _sscanf
  008bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  008c2	83 f8 01	 cmp	 eax, 1
  008c5	0f 85 45 01 00
	00		 jne	 $LN52@MountVolum

; 7299 : 					{
; 7300 : 						OPEN_TEST_STRUCT openTestStruct;
; 7301 : 						memset (&openTestStruct, 0, sizeof (openTestStruct));

  008cb	68 18 02 00 00	 push	 536			; 00000218H
  008d0	8d 85 14 d9 ff
	ff		 lea	 eax, DWORD PTR _openTestStruct$8[ebp]
  008d6	6a 00		 push	 0
  008d8	50		 push	 eax
  008d9	e8 00 00 00 00	 call	 _memset

; 7302 : 
; 7303 : 						openTestStruct.bDetectGSTBootLoader = TRUE;
; 7304 : 						_snwprintf ((wchar_t *) openTestStruct.wszFileName, array_capacity (openTestStruct.wszFileName), L"\\Device\\Harddisk%d\\Partition0", driveNo);

  008de	ff b5 e8 d8 ff
	ff		 push	 DWORD PTR _driveNo$4[ebp]
  008e4	8d 85 14 d9 ff
	ff		 lea	 eax, DWORD PTR _openTestStruct$8[ebp]
  008ea	c7 85 1c db ff
	ff 01 00 00 00	 mov	 DWORD PTR _openTestStruct$8[ebp+520], 1
  008f4	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@FMJIKGBL@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAd?$AAi?$AAs?$AAk?$AA?$CF?$AAd?$AA?2?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AA0?$AA?$AA@
  008f9	68 04 01 00 00	 push	 260			; 00000104H
  008fe	50		 push	 eax
  008ff	e8 00 00 00 00	 call	 __snwprintf
  00904	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7305 : 
; 7306 : 						DWORD dwResult;
; 7307 : 						if (DeviceIoControl (hDriver, GST_IOCTL_OPEN_TEST, &openTestStruct, sizeof (OPEN_TEST_STRUCT), &openTestStruct, sizeof (OPEN_TEST_STRUCT), &dwResult, NULL) && openTestStruct.GSTBootLoaderDetected)

  00907	8d 85 dc d8 ff
	ff		 lea	 eax, DWORD PTR _dwResult$2[ebp]
  0090d	6a 00		 push	 0
  0090f	50		 push	 eax
  00910	68 18 02 00 00	 push	 536			; 00000218H
  00915	8d 85 14 d9 ff
	ff		 lea	 eax, DWORD PTR _openTestStruct$8[ebp]
  0091b	50		 push	 eax
  0091c	68 18 02 00 00	 push	 536			; 00000218H
  00921	50		 push	 eax
  00922	68 34 20 22 00	 push	 2236468			; 00222034H
  00927	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0092d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  00933	85 c0		 test	 eax, eax
  00935	0f 84 8e 00 00
	00		 je	 $LN50@MountVolum
  0093b	83 bd 20 db ff
	ff 00		 cmp	 DWORD PTR _openTestStruct$8[ebp+524], 0
  00942	0f 84 81 00 00
	00		 je	 $LN50@MountVolum

; 7308 : 							WarningDirect ((GetWrongPasswordErrorMessage (hwndDlg) + L"\n\n" + GetString ("HIDDEN_VOL_PROT_PASSWORD_US_KEYB_LAYOUT")).c_str());

  00948	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EOBACLIE@HIDDEN_VOL_PROT_PASSWORD_US_KEYB@
  0094d	e8 00 00 00 00	 call	 _GetString
  00952	83 c4 04	 add	 esp, 4
  00955	50		 push	 eax
  00956	68 00 00 00 00	 push	 OFFSET ??_C@_15IABLJNFO@?$AA?6?$AA?6?$AA?$AA@
  0095b	ff b5 04 d9 ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00961	8d 85 0c de ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00967	50		 push	 eax
  00968	e8 00 00 00 00	 call	 ?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z ; GetWrongPasswordErrorMessage
  0096d	83 c4 08	 add	 esp, 8
  00970	50		 push	 eax
  00971	8d 85 24 de ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00977	50		 push	 eax
  00978	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0097d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00980	50		 push	 eax
  00981	8d 85 3c de ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00987	50		 push	 eax
  00988	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0098d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00990	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00994	72 02		 jb	 SHORT $LN1572@MountVolum
  00996	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1572@MountVolum:
  00998	50		 push	 eax
  00999	e8 00 00 00 00	 call	 _WarningDirect
  0099e	83 c4 04	 add	 esp, 4
  009a1	8d 8d 3c de ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  009a7	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  009ac	8d 8d 24 de ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  009b2	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  009b7	8d 8d 0c de ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  009bd	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 7322 : 
; 7323 : 		return 0;

  009c2	33 f6		 xor	 esi, esi
  009c4	e9 7d 02 00 00	 jmp	 $LN69@MountVolum
$LN50@MountVolum:

; 7309 : 						else
; 7310 : 							handleError (hwndDlg, mount.nReturnCode);

  009c9	ff b5 2c db ff
	ff		 push	 DWORD PTR _mount$[ebp]

; 7311 : 					}
; 7312 : 				}
; 7313 : 				else
; 7314 : 					handleError (hwndDlg, mount.nReturnCode);

  009cf	ff b5 04 d9 ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  009d5	e8 00 00 00 00	 call	 _handleError
  009da	83 c4 08	 add	 esp, 8

; 7315 : 			}
; 7316 : 
; 7317 : 			return 0;

  009dd	33 f6		 xor	 esi, esi
  009df	e9 62 02 00 00	 jmp	 $LN69@MountVolum
$LN47@MountVolum:

; 7311 : 					}
; 7312 : 				}
; 7313 : 				else
; 7314 : 					handleError (hwndDlg, mount.nReturnCode);

  009e4	6a 03		 push	 3
  009e6	ff b5 04 d9 ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  009ec	e8 00 00 00 00	 call	 _handleError
  009f1	83 c4 08	 add	 esp, 8

; 7315 : 			}
; 7316 : 
; 7317 : 			return 0;

  009f4	33 f6		 xor	 esi, esi
  009f6	e9 4b 02 00 00	 jmp	 $LN69@MountVolum
$LN44@MountVolum:

; 7318 : 		}
; 7319 : 
; 7320 : 		if (!quiet)

  009fb	83 7d 24 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  009ff	75 0f		 jne	 SHORT $LN52@MountVolum

; 7321 : 			handleError (hwndDlg, mount.nReturnCode);

  00a01	50		 push	 eax
  00a02	ff b5 04 d9 ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00a08	e8 00 00 00 00	 call	 _handleError
  00a0d	83 c4 08	 add	 esp, 8
$LN52@MountVolum:

; 7322 : 
; 7323 : 		return 0;

  00a10	33 f6		 xor	 esi, esi
  00a12	e9 2f 02 00 00	 jmp	 $LN69@MountVolum
$LN43@MountVolum:

; 7324 : 	}
; 7325 : 
; 7326 : 	// Mount successful
; 7327 : 
; 7328 : 	if (mount.UseBackupHeader != mountOptions->UseBackupHeader
; 7329 : 		&& mount.UseBackupHeader)

  00a17	8b 8d 0c d9 ff
	ff		 mov	 ecx, DWORD PTR _mountOptions$GSCopy$1$[ebp]
  00a1d	8b 85 04 de ff
	ff		 mov	 eax, DWORD PTR _mount$[ebp+728]
  00a23	3b 41 5c	 cmp	 eax, DWORD PTR [ecx+92]
  00a26	74 20		 je	 SHORT $LN1737@MountVolum
  00a28	85 c0		 test	 eax, eax
  00a2a	74 1c		 je	 SHORT $LN1737@MountVolum

; 7330 : 	{
; 7331 : 		if (bReportWrongPassword && !Silent)

  00a2c	83 7d 28 00	 cmp	 DWORD PTR _bReportWrongPassword$[ebp], 0
  00a30	74 16		 je	 SHORT $LN1737@MountVolum
  00a32	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00a39	75 0d		 jne	 SHORT $LN1737@MountVolum

; 7332 : 			Warning ("HEADER_DAMAGED_AUTO_USED_HEADER_BAK");

  00a3b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NGBHCJPO@HEADER_DAMAGED_AUTO_USED_HEADER_@
  00a40	e8 00 00 00 00	 call	 _Warning
  00a45	83 c4 04	 add	 esp, 4
$LN1737@MountVolum:

; 7333 : 	}
; 7334 : 	
; 7335 : 	LastMountedVolumeDirty = mount.FilesystemDirty;

  00a48	8b 85 30 db ff
	ff		 mov	 eax, DWORD PTR _mount$[ebp+4]

; 7336 : 
; 7337 : 	if (mount.FilesystemDirty)

  00a4e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfW
  00a54	a3 00 00 00 00	 mov	 DWORD PTR _LastMountedVolumeDirty, eax
  00a59	85 c0		 test	 eax, eax
  00a5b	74 4b		 je	 SHORT $LN1738@MountVolum

; 7338 : 	{
; 7339 : 		wchar_t msg[1024];
; 7340 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  00a5d	8b 5d 0c	 mov	 ebx, DWORD PTR _driveNo$[ebp]
  00a60	c7 45 da 3a 00
	00 00		 mov	 DWORD PTR _mountPoint$21[ebp+2], 58 ; 0000003aH
  00a67	8d 43 41	 lea	 eax, DWORD PTR [ebx+65]
  00a6a	66 89 45 d8	 mov	 WORD PTR _mountPoint$21[ebp], ax

; 7341 : 		wsprintfW (msg, GetString ("MOUNTED_VOLUME_DIRTY"), mountPoint);

  00a6e	8d 45 d8	 lea	 eax, DWORD PTR _mountPoint$21[ebp]
  00a71	50		 push	 eax
  00a72	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GHMEOCNL@MOUNTED_VOLUME_DIRTY?$AA@
  00a77	e8 00 00 00 00	 call	 _GetString
  00a7c	83 c4 04	 add	 esp, 4
  00a7f	50		 push	 eax
  00a80	8d 85 cc f6 ff
	ff		 lea	 eax, DWORD PTR _msg$19[ebp]
  00a86	50		 push	 eax
  00a87	ff d6		 call	 esi

; 7342 : 
; 7343 : 		if (AskWarnYesNoStringTopmost (msg) == IDYES)

  00a89	8d 85 cc f6 ff
	ff		 lea	 eax, DWORD PTR _msg$19[ebp]
  00a8f	50		 push	 eax
  00a90	e8 00 00 00 00	 call	 _AskWarnYesNoStringTopmost
  00a95	83 c4 10	 add	 esp, 16			; 00000010H
  00a98	83 f8 06	 cmp	 eax, 6
  00a9b	75 0b		 jne	 SHORT $LN1738@MountVolum

; 7344 : 			CheckFilesystem (driveNo, TRUE);

  00a9d	6a 01		 push	 1
  00a9f	53		 push	 ebx
  00aa0	e8 00 00 00 00	 call	 _CheckFilesystem
  00aa5	83 c4 08	 add	 esp, 8
$LN1738@MountVolum:

; 7345 : 	}
; 7346 : 
; 7347 : 	if (mount.VolumeMountedReadOnlyAfterAccessDenied
; 7348 : 		&& !Silent
; 7349 : 		&& !bDevice
; 7350 : 		&& !FileHasReadOnlyAttribute (volumePath)
; 7351 : 		&& !IsFileOnReadOnlyFilesystem (volumePath))

  00aa8	83 bd 34 db ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+8], 0
  00aaf	8b 9d 10 d9 ff
	ff		 mov	 ebx, DWORD PTR _volumePath$GSCopy$1$[ebp]
  00ab5	0f 84 bb 00 00
	00		 je	 $LN1748@MountVolum
  00abb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00ac2	8b bd 00 d9 ff
	ff		 mov	 edi, DWORD PTR _bDevice$2$[ebp]
  00ac8	75 59		 jne	 SHORT $LN1739@MountVolum
  00aca	85 ff		 test	 edi, edi
  00acc	75 55		 jne	 SHORT $LN1739@MountVolum
  00ace	53		 push	 ebx
  00acf	e8 00 00 00 00	 call	 _FileHasReadOnlyAttribute
  00ad4	83 c4 04	 add	 esp, 4
  00ad7	85 c0		 test	 eax, eax
  00ad9	75 48		 jne	 SHORT $LN1739@MountVolum
  00adb	53		 push	 ebx
  00adc	e8 00 00 00 00	 call	 _IsFileOnReadOnlyFilesystem
  00ae1	83 c4 04	 add	 esp, 4
  00ae4	85 c0		 test	 eax, eax
  00ae6	75 3b		 jne	 SHORT $LN1739@MountVolum

; 7352 : 	{
; 7353 : 		wchar_t msg[1024];
; 7354 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  00ae8	8b 45 0c	 mov	 eax, DWORD PTR _driveNo$[ebp]
  00aeb	83 c0 41	 add	 eax, 65			; 00000041H
  00aee	c7 45 d2 3a 00
	00 00		 mov	 DWORD PTR _mountPoint$20[ebp+2], 58 ; 0000003aH
  00af5	66 89 45 d0	 mov	 WORD PTR _mountPoint$20[ebp], ax

; 7355 : 		wsprintfW (msg, GetString ("MOUNTED_CONTAINER_FORCED_READ_ONLY"), mountPoint);

  00af9	8d 45 d0	 lea	 eax, DWORD PTR _mountPoint$20[ebp]
  00afc	50		 push	 eax
  00afd	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@HGDBCKJG@MOUNTED_CONTAINER_FORCED_READ_ON@
  00b02	e8 00 00 00 00	 call	 _GetString
  00b07	83 c4 04	 add	 esp, 4
  00b0a	50		 push	 eax
  00b0b	8d 85 cc ee ff
	ff		 lea	 eax, DWORD PTR _msg$18[ebp]
  00b11	50		 push	 eax
  00b12	ff d6		 call	 esi

; 7356 : 
; 7357 : 		WarningDirect (msg);

  00b14	8d 85 cc ee ff
	ff		 lea	 eax, DWORD PTR _msg$18[ebp]
  00b1a	50		 push	 eax
  00b1b	e8 00 00 00 00	 call	 _WarningDirect
  00b20	83 c4 10	 add	 esp, 16			; 00000010H
$LN1739@MountVolum:

; 7358 : 	}
; 7359 : 
; 7360 : 	if (mount.VolumeMountedReadOnlyAfterAccessDenied
; 7361 : 		&& !Silent
; 7362 : 		&& bDevice)

  00b23	83 bd 34 db ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+8], 0
  00b2a	74 4a		 je	 SHORT $LN1748@MountVolum
  00b2c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00b33	75 41		 jne	 SHORT $LN1748@MountVolum

; 7363 : 	{
; 7364 : 		wchar_t msg[1024];
; 7365 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  00b35	85 ff		 test	 edi, edi
  00b37	8b 7d 0c	 mov	 edi, DWORD PTR _driveNo$[ebp]
  00b3a	74 3d		 je	 SHORT $LN58@MountVolum
  00b3c	8d 47 41	 lea	 eax, DWORD PTR [edi+65]
  00b3f	c7 45 ea 3a 00
	00 00		 mov	 DWORD PTR _mountPoint$23[ebp+2], 58 ; 0000003aH
  00b46	66 89 45 e8	 mov	 WORD PTR _mountPoint$23[ebp], ax

; 7366 : 		wsprintfW (msg, GetString ("MOUNTED_DEVICE_FORCED_READ_ONLY"), mountPoint);

  00b4a	8d 45 e8	 lea	 eax, DWORD PTR _mountPoint$23[ebp]
  00b4d	50		 push	 eax
  00b4e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HAHCAFMF@MOUNTED_DEVICE_FORCED_READ_ONLY?$AA@
  00b53	e8 00 00 00 00	 call	 _GetString
  00b58	83 c4 04	 add	 esp, 4
  00b5b	50		 push	 eax
  00b5c	8d 85 cc e6 ff
	ff		 lea	 eax, DWORD PTR _msg$17[ebp]
  00b62	50		 push	 eax
  00b63	ff d6		 call	 esi

; 7367 : 
; 7368 : 		WarningDirect (msg);

  00b65	8d 85 cc e6 ff
	ff		 lea	 eax, DWORD PTR _msg$17[ebp]
  00b6b	50		 push	 eax
  00b6c	e8 00 00 00 00	 call	 _WarningDirect
  00b71	83 c4 10	 add	 esp, 16			; 00000010H
  00b74	eb 03		 jmp	 SHORT $LN58@MountVolum
$LN1748@MountVolum:
  00b76	8b 7d 0c	 mov	 edi, DWORD PTR _driveNo$[ebp]
$LN58@MountVolum:

; 7369 : 	}
; 7370 : 
; 7371 : 	if (mount.VolumeMountedReadOnlyAfterDeviceWriteProtected
; 7372 : 		&& !Silent
; 7373 : 		&& strstr (volumePath, "\\Device\\Harddisk") == volumePath)

  00b79	83 bd 38 db ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+12], 0
  00b80	0f 84 93 00 00
	00		 je	 $LN60@MountVolum
  00b86	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00b8d	0f 85 86 00 00
	00		 jne	 $LN60@MountVolum
  00b93	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EPPOJBJL@?2Device?2Harddisk?$AA@
  00b98	53		 push	 ebx
  00b99	e8 00 00 00 00	 call	 _strstr
  00b9e	83 c4 08	 add	 esp, 8
  00ba1	3b c3		 cmp	 eax, ebx
  00ba3	75 74		 jne	 SHORT $LN60@MountVolum

; 7374 : 	{
; 7375 : 		wchar_t msg[1024];
; 7376 : 		wchar_t mountPoint[] = { L'A' + (wchar_t) driveNo, L':', 0 };

  00ba5	8d 47 41	 lea	 eax, DWORD PTR [edi+65]
  00ba8	c7 45 e2 3a 00
	00 00		 mov	 DWORD PTR _mountPoint$22[ebp+2], 58 ; 0000003aH
  00baf	66 89 45 e0	 mov	 WORD PTR _mountPoint$22[ebp], ax

; 7377 : 		wsprintfW (msg, GetString ("MOUNTED_DEVICE_FORCED_READ_ONLY_WRITE_PROTECTION"), mountPoint);

  00bb3	8d 45 e0	 lea	 eax, DWORD PTR _mountPoint$22[ebp]
  00bb6	50		 push	 eax
  00bb7	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LCJCCDBH@MOUNTED_DEVICE_FORCED_READ_ONLY_@
  00bbc	e8 00 00 00 00	 call	 _GetString
  00bc1	83 c4 04	 add	 esp, 4
  00bc4	50		 push	 eax
  00bc5	8d 85 cc de ff
	ff		 lea	 eax, DWORD PTR _msg$16[ebp]
  00bcb	50		 push	 eax
  00bcc	ff d6		 call	 esi

; 7378 : 
; 7379 : 		WarningDirect (msg);

  00bce	8d 85 cc de ff
	ff		 lea	 eax, DWORD PTR _msg$16[ebp]
  00bd4	50		 push	 eax
  00bd5	e8 00 00 00 00	 call	 _WarningDirect
  00bda	83 c4 10	 add	 esp, 16			; 00000010H

; 7380 : 
; 7381 : 		if (CurrentOSMajor >= 6
; 7382 : 			&& strstr (volumePath, "\\Device\\HarddiskVolume") != volumePath
; 7383 : 			&& AskNoYes ("ASK_REMOVE_DEVICE_WRITE_PROTECTION") == IDYES)

  00bdd	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  00be4	7c 33		 jl	 SHORT $LN60@MountVolum
  00be6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GHLJCPDI@?2Device?2HarddiskVolume?$AA@
  00beb	53		 push	 ebx
  00bec	e8 00 00 00 00	 call	 _strstr
  00bf1	83 c4 08	 add	 esp, 8
  00bf4	3b c3		 cmp	 eax, ebx
  00bf6	74 21		 je	 SHORT $LN60@MountVolum
  00bf8	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MHPFPHDI@ASK_REMOVE_DEVICE_WRITE_PROTECTI@
  00bfd	e8 00 00 00 00	 call	 _AskNoYes
  00c02	83 c4 04	 add	 esp, 4
  00c05	83 f8 06	 cmp	 eax, 6
  00c08	75 0f		 jne	 SHORT $LN60@MountVolum

; 7384 : 		{
; 7385 : 			RemoveDeviceWriteProtection (hwndDlg, volumePath);

  00c0a	53		 push	 ebx
  00c0b	ff b5 04 d9 ff
	ff		 push	 DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00c11	e8 00 00 00 00	 call	 _RemoveDeviceWriteProtection
  00c16	83 c4 08	 add	 esp, 8
$LN60@MountVolum:

; 7386 : 		}
; 7387 : 	}
; 7388 : 
; 7389 : 	ResetWrongPwdRetryCount ();
; 7390 : 
; 7391 : 	BroadcastDeviceChange (DBT_DEVICEARRIVAL, driveNo, 0);

  00c19	6a 00		 push	 0
  00c1b	57		 push	 edi
  00c1c	68 00 80 00 00	 push	 32768			; 00008000H
  00c21	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?WrongPwdRetryCounter@@3HA, 0 ; WrongPwdRetryCounter
  00c2b	e8 00 00 00 00	 call	 _BroadcastDeviceChange
  00c30	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7392 : 
; 7393 : 	if (mount.bExclusiveAccess == FALSE)
; 7394 : 		return 2;

  00c33	be 02 00 00 00	 mov	 esi, 2
  00c38	83 bd a0 dd ff
	ff 00		 cmp	 DWORD PTR _mount$[ebp+628], 0
  00c3f	74 05		 je	 SHORT $LN69@MountVolum

; 7395 : 
; 7396 : 	return 1;

  00c41	be 01 00 00 00	 mov	 esi, 1
$LN69@MountVolum:
  00c46	8b 8d c8 de ff
	ff		 mov	 ecx, DWORD PTR _path$[ebp+20]
  00c4c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00c4f	72 13		 jb	 SHORT $LN1587@MountVolum
  00c51	41		 inc	 ecx
  00c52	51		 push	 ecx
  00c53	ff b5 b4 de ff
	ff		 push	 DWORD PTR _path$[ebp]
  00c59	8d 8d b4 de ff
	ff		 lea	 ecx, DWORD PTR _path$[ebp]
  00c5f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN1587@MountVolum:
  00c64	8b c6		 mov	 eax, esi
$LN1@MountVolum:

; 7397 : }

  00c66	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00c69	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c70	59		 pop	 ecx
  00c71	5f		 pop	 edi
  00c72	5e		 pop	 esi
  00c73	5b		 pop	 ebx
  00c74	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c77	33 cd		 xor	 ecx, ebp
  00c79	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c7e	8b e5		 mov	 esp, ebp
  00c80	5d		 pop	 ebp
  00c81	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_MountVolume$26:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$_MountVolume:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 8a d8 d8 ff
	ff		 mov	 ecx, DWORD PTR [edx-10024]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_MountVolume
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_MountVolume ENDP
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _BroadcastDeviceChange
_TEXT	SEGMENT
_dwResult$ = -68					; size = 4
_root$1 = -64						; size = 4
_dbv$ = -56						; size = 20
_target$2 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_nDosDriveNo$ = 12					; size = 4
_driveMap$ = 16						; size = 4
_BroadcastDeviceChange PROC				; COMDAT

; 7019 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi

; 7020 : 	DEV_BROADCAST_VOLUME dbv;
; 7021 : 	DWORD_PTR dwResult;
; 7022 : 	LONG eventId = 0;

  00011	33 ff		 xor	 edi, edi

; 7023 : 	int i;
; 7024 : 
; 7025 : 	if (DeviceChangeBroadcastDisabled)

  00013	39 3d 00 00 00
	00		 cmp	 DWORD PTR _DeviceChangeBroadcastDisabled, edi
  00019	0f 85 aa 01 00
	00		 jne	 $LN1@BroadcastD

; 7026 : 		return;
; 7027 : 
; 7028 : 	if (message == DBT_DEVICEARRIVAL)

  0001f	56		 push	 esi
  00020	8b 75 08	 mov	 esi, DWORD PTR _message$[ebp]
  00023	81 fe 00 80 00
	00		 cmp	 esi, 32768		; 00008000H
  00029	75 07		 jne	 SHORT $LN6@BroadcastD

; 7029 : 		eventId = SHCNE_DRIVEADD;

  0002b	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  00030	eb 4a		 jmp	 SHORT $LN10@BroadcastD
$LN6@BroadcastD:

; 7030 : 	else if (message == DBT_DEVICEREMOVECOMPLETE)

  00032	81 fe 04 80 00
	00		 cmp	 esi, 32772		; 00008004H
  00038	75 07		 jne	 SHORT $LN8@BroadcastD

; 7031 : 		eventId = SHCNE_DRIVEREMOVED;

  0003a	bf 80 00 00 00	 mov	 edi, 128		; 00000080H
  0003f	eb 3b		 jmp	 SHORT $LN10@BroadcastD
$LN8@BroadcastD:

; 7032 : 	else if (IsOSAtLeast (WIN_7) && message == DBT_DEVICEREMOVEPENDING) // Explorer on Windows 7 holds open handles of all drives when 'Computer' is expanded in navigation pane. SHCNE_DRIVEREMOVED must be used as DBT_DEVICEREMOVEPENDING is ignored.

  00041	39 3d 00 00 00
	00		 cmp	 DWORD PTR _CurrentOSMajor, edi
  00047	7f 07		 jg	 SHORT $LN28@BroadcastD
  00049	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN28@BroadcastD:
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  00055	c1 e0 08	 shl	 eax, 8
  00058	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  0005e	c1 e0 08	 shl	 eax, 8
  00061	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  00067	3d 00 01 06 00	 cmp	 eax, 393472		; 00060100H
  0006c	7c 0e		 jl	 SHORT $LN10@BroadcastD
  0006e	81 fe 03 80 00
	00		 cmp	 esi, 32771		; 00008003H
  00074	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00079	0f 44 f8	 cmove	 edi, eax
$LN10@BroadcastD:

; 7033 : 		eventId = SHCNE_DRIVEREMOVED;
; 7034 : 
; 7035 : 	if (driveMap == 0)

  0007c	8b 55 10	 mov	 edx, DWORD PTR _driveMap$[ebp]
  0007f	85 d2		 test	 edx, edx
  00081	75 0d		 jne	 SHORT $LN11@BroadcastD

; 7036 : 		driveMap = (1 << nDosDriveNo);

  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _nDosDriveNo$[ebp]
  00086	ba 01 00 00 00	 mov	 edx, 1
  0008b	d3 e2		 shl	 edx, cl
  0008d	89 55 10	 mov	 DWORD PTR _driveMap$[ebp], edx
$LN11@BroadcastD:
  00090	85 ff		 test	 edi, edi

; 7037 : 
; 7038 : 	if (eventId != 0)

  00092	0f 84 9f 00 00
	00		 je	 $LN3@BroadcastD

; 7039 : 	{
; 7040 : 		for (i = 0; i < 26; i++)

  00098	53		 push	 ebx
  00099	33 db		 xor	 ebx, ebx
  0009b	0f 1f 44 00 00	 npad	 5
$LL4@BroadcastD:

; 7041 : 		{
; 7042 : 			if (driveMap & (1 << i))

  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	8b cb		 mov	 ecx, ebx
  000a7	d3 e0		 shl	 eax, cl
  000a9	85 c2		 test	 eax, edx
  000ab	74 7f		 je	 SHORT $LN2@BroadcastD

; 7043 : 			{
; 7044 : 				char root[] = { (char) i + 'A', ':', '\\', 0 };

  000ad	8d 43 41	 lea	 eax, DWORD PTR [ebx+65]
  000b0	66 c7 45 c1 3a
	5c		 mov	 WORD PTR _root$1[ebp+1], 23610 ; 00005c3aH

; 7045 : 				SHChangeNotify (eventId, SHCNF_PATH, root, NULL);

  000b6	6a 00		 push	 0
  000b8	88 45 c0	 mov	 BYTE PTR _root$1[ebp], al
  000bb	8d 45 c0	 lea	 eax, DWORD PTR _root$1[ebp]
  000be	50		 push	 eax
  000bf	6a 01		 push	 1
  000c1	57		 push	 edi
  000c2	c6 45 c3 00	 mov	 BYTE PTR _root$1[ebp+3], 0
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHChangeNotify@16

; 7046 : 
; 7047 : 				if (nCurrentOS == WIN_2000 && RemoteSession)

  000cc	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR _nCurrentOS, 7
  000d3	75 54		 jne	 SHORT $LN42@BroadcastD
  000d5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _RemoteSession, 0
  000dc	74 4b		 je	 SHORT $LN42@BroadcastD

; 7048 : 				{
; 7049 : 					char target[32];
; 7050 : 					wsprintf (target, "%ls%c", GST_MOUNT_PREFIX, i + 'A');

  000de	8d 43 41	 lea	 eax, DWORD PTR [ebx+65]
  000e1	50		 push	 eax
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_1DA@HFFKBABD@?$AA?2?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?2?$AAG?$AAo?$AAs?$AAt?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAo?$AAl?$AAu?$AAm?$AAe?$AA?$AA@
  000e7	8d 45 dc	 lea	 eax, DWORD PTR _target$2[ebp]
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_05EMECODII@?$CFls?$CFc?$AA@
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000f6	83 c4 10	 add	 esp, 16			; 00000010H

; 7051 : 					root[2] = 0;

  000f9	c6 45 c2 00	 mov	 BYTE PTR _root$1[ebp+2], 0

; 7052 : 
; 7053 : 					if (message == DBT_DEVICEARRIVAL)

  000fd	81 fe 00 80 00
	00		 cmp	 esi, 32768		; 00008000H
  00103	75 0c		 jne	 SHORT $LN15@BroadcastD

; 7054 : 						DefineDosDevice (DDD_RAW_TARGET_PATH, root, target);

  00105	8d 45 dc	 lea	 eax, DWORD PTR _target$2[ebp]
  00108	50		 push	 eax
  00109	8d 45 c0	 lea	 eax, DWORD PTR _root$1[ebp]
  0010c	50		 push	 eax
  0010d	6a 01		 push	 1
  0010f	eb 12		 jmp	 SHORT $LN43@BroadcastD
$LN15@BroadcastD:

; 7055 : 					else if (message == DBT_DEVICEREMOVECOMPLETE)

  00111	81 fe 04 80 00
	00		 cmp	 esi, 32772		; 00008004H
  00117	75 10		 jne	 SHORT $LN42@BroadcastD

; 7056 : 						DefineDosDevice (DDD_RAW_TARGET_PATH| DDD_REMOVE_DEFINITION

  00119	8d 45 dc	 lea	 eax, DWORD PTR _target$2[ebp]
  0011c	50		 push	 eax
  0011d	8d 45 c0	 lea	 eax, DWORD PTR _root$1[ebp]
  00120	50		 push	 eax
  00121	6a 07		 push	 7
$LN43@BroadcastD:
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefineDosDeviceA@12
$LN42@BroadcastD:
  00129	8b 55 10	 mov	 edx, DWORD PTR _driveMap$[ebp]
$LN2@BroadcastD:

; 7039 : 	{
; 7040 : 		for (i = 0; i < 26; i++)

  0012c	43		 inc	 ebx
  0012d	83 fb 1a	 cmp	 ebx, 26			; 0000001aH
  00130	0f 8c 6a ff ff
	ff		 jl	 $LL4@BroadcastD
  00136	5b		 pop	 ebx
$LN3@BroadcastD:

; 7057 : 						| DDD_EXACT_MATCH_ON_REMOVE, root, target);
; 7058 : 				}
; 7059 : 			}
; 7060 : 		}
; 7061 : 	}
; 7062 : 
; 7063 : 	dbv.dbcv_size = sizeof (dbv); 
; 7064 : 	dbv.dbcv_devicetype = DBT_DEVTYP_VOLUME; 
; 7065 : 	dbv.dbcv_reserved = 0;
; 7066 : 	dbv.dbcv_unitmask = driveMap;
; 7067 : 	dbv.dbcv_flags = 0; 
; 7068 : 
; 7069 : 	UINT timeOut = 1000;
; 7070 : 
; 7071 : 	// SHChangeNotify() works on Vista, so the Explorer does not require WM_DEVICECHANGE
; 7072 : 	if (CurrentOSMajor >= 6)
; 7073 : 		timeOut = 100;
; 7074 : 
; 7075 : 	IgnoreWmDeviceChange = TRUE;
; 7076 : 	SendMessageTimeout (HWND_BROADCAST, WM_DEVICECHANGE, message, (LPARAM)(&dbv), SMTO_ABORTIFHUNG, timeOut, &dwResult);

  00137	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageTimeoutA@28
  0013d	33 c0		 xor	 eax, eax
  0013f	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  00146	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0014b	66 89 45 d8	 mov	 WORD PTR _dbv$[ebp+16], ax
  0014f	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00154	0f 4d c1	 cmovge	 eax, ecx
  00157	c7 45 c8 14 00
	00 00		 mov	 DWORD PTR _dbv$[ebp], 20 ; 00000014H
  0015e	8d 4d bc	 lea	 ecx, DWORD PTR _dwResult$[ebp]
  00161	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR _dbv$[ebp+4], 2
  00168	51		 push	 ecx
  00169	50		 push	 eax
  0016a	6a 02		 push	 2
  0016c	8d 45 c8	 lea	 eax, DWORD PTR _dbv$[ebp]
  0016f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _dbv$[ebp+8], 0
  00176	50		 push	 eax
  00177	56		 push	 esi
  00178	68 19 02 00 00	 push	 537			; 00000219H
  0017d	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00182	89 55 d4	 mov	 DWORD PTR _dbv$[ebp+12], edx
  00185	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _IgnoreWmDeviceChange, 1
  0018f	ff d7		 call	 edi

; 7077 : 
; 7078 : 	// Explorer prior Vista sometimes fails to register a new drive
; 7079 : 	if (CurrentOSMajor < 6 && message == DBT_DEVICEARRIVAL)

  00191	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR _CurrentOSMajor, 6
  00198	7d 24		 jge	 SHORT $LN19@BroadcastD
  0019a	81 fe 00 80 00
	00		 cmp	 esi, 32768		; 00008000H
  001a0	75 1c		 jne	 SHORT $LN19@BroadcastD

; 7080 : 		SendMessageTimeout (HWND_BROADCAST, WM_DEVICECHANGE, message, (LPARAM)(&dbv), SMTO_ABORTIFHUNG, 200, &dwResult);

  001a2	8d 45 bc	 lea	 eax, DWORD PTR _dwResult$[ebp]
  001a5	50		 push	 eax
  001a6	68 c8 00 00 00	 push	 200			; 000000c8H
  001ab	6a 02		 push	 2
  001ad	8d 45 c8	 lea	 eax, DWORD PTR _dbv$[ebp]
  001b0	50		 push	 eax
  001b1	56		 push	 esi
  001b2	68 19 02 00 00	 push	 537			; 00000219H
  001b7	68 ff ff 00 00	 push	 65535			; 0000ffffH
  001bc	ff d7		 call	 edi
$LN19@BroadcastD:

; 7081 : 
; 7082 : 	IgnoreWmDeviceChange = FALSE;

  001be	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _IgnoreWmDeviceChange, 0
  001c8	5e		 pop	 esi
$LN1@BroadcastD:

; 7083 : }

  001c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cc	33 cd		 xor	 ecx, ebp
  001ce	5f		 pop	 edi
  001cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c3		 ret	 0
_BroadcastDeviceChange ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DriverUnmountVolume
_TEXT	SEGMENT
_dwResult$ = -24					; size = 4
_unmount$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_nDosDriveNo$ = 12					; size = 4
_forced$ = 16						; size = 4
_DriverUnmountVolume PROC				; COMDAT

; 6970 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6971 : 	UNMOUNT_STRUCT unmount;
; 6972 : 	DWORD dwResult;
; 6973 : 
; 6974 : 	BOOL bResult;
; 6975 : 	
; 6976 : 	unmount.nDosDriveNo = nDosDriveNo;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _nDosDriveNo$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]

; 6977 : 	unmount.ignoreOpenFiles = forced;
; 6978 : 
; 6979 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_DISMOUNT_VOLUME, &unmount,

  00017	6a 00		 push	 0
  00019	89 45 ec	 mov	 DWORD PTR _unmount$[ebp], eax
  0001c	8b 45 10	 mov	 eax, DWORD PTR _forced$[ebp]
  0001f	89 45 f0	 mov	 DWORD PTR _unmount$[ebp+4], eax
  00022	8d 45 e8	 lea	 eax, DWORD PTR _dwResult$[ebp]
  00025	50		 push	 eax
  00026	6a 10		 push	 16			; 00000010H
  00028	8d 45 ec	 lea	 eax, DWORD PTR _unmount$[ebp]
  0002b	50		 push	 eax
  0002c	6a 10		 push	 16			; 00000010H
  0002e	50		 push	 eax
  0002f	68 10 20 22 00	 push	 2236432			; 00222010H
  00034	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 6980 : 		sizeof (unmount), &unmount, sizeof (unmount), &dwResult, NULL);
; 6981 : 
; 6982 : 	if (bResult == FALSE)

  00040	85 c0		 test	 eax, eax
  00042	75 1d		 jne	 SHORT $LN2@DriverUnmo

; 6983 : 	{
; 6984 : 		handleWin32Error (hwndDlg);

  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 _handleWin32Error
  0004a	83 c4 04	 add	 esp, 4

; 6985 : 		return 1;

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	5e		 pop	 esi

; 6986 : 	}
; 6987 : 
; 6988 : #ifdef GSTMOUNT
; 6989 : 
; 6990 : 	if (unmount.nReturnCode == ERR_SUCCESS
; 6991 : 		&& unmount.HiddenVolumeProtectionTriggered
; 6992 : 		&& !VolumeNotificationsList.bHidVolDamagePrevReported [nDosDriveNo])
; 6993 : 	{
; 6994 : 		wchar_t msg[4096];
; 6995 : 
; 6996 : 		VolumeNotificationsList.bHidVolDamagePrevReported [nDosDriveNo] = TRUE;
; 6997 : 		swprintf (msg, GetString ("DAMAGE_TO_HIDDEN_VOLUME_PREVENTED"), nDosDriveNo + 'A');
; 6998 : 		SetForegroundWindow (hwndDlg);
; 6999 : 		MessageBoxW (hwndDlg, msg, lpszTitle, MB_ICONWARNING | MB_SETFOREGROUND | MB_TOPMOST);
; 7000 : 	}
; 7001 : 
; 7002 : #endif	// #ifdef GSTMOUNT
; 7003 : 
; 7004 : 	return unmount.nReturnCode;
; 7005 : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN2@DriverUnmo:
  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	8b 45 f8	 mov	 eax, DWORD PTR _unmount$[ebp+12]
  00067	33 cd		 xor	 ecx, ebp
  00069	5e		 pop	 esi
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_DriverUnmountVolume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsDeviceMounted
_TEXT	SEGMENT
_dwResult$ = -4						; size = 4
_deviceName$ = 8					; size = 4
_IsDeviceMounted PROC					; COMDAT

; 6939 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 6940 : 	BOOL bResult = FALSE;
; 6941 : 	DWORD dwResult;
; 6942 : 	HANDLE dev = INVALID_HANDLE_VALUE;
; 6943 : 
; 6944 : 	if ((dev = CreateFile (deviceName,
; 6945 : 		GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE,
; 6946 : 		NULL,
; 6947 : 		OPEN_EXISTING,
; 6948 : 		0,
; 6949 : 		NULL)) != INVALID_HANDLE_VALUE)

  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 03		 push	 3
  0000b	6a 00		 push	 0
  0000d	6a 03		 push	 3
  0000f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00014	ff 75 08	 push	 DWORD PTR _deviceName$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001d	8b f8		 mov	 edi, eax
  0001f	83 ff ff	 cmp	 edi, -1
  00022	74 2c		 je	 SHORT $LN4@IsDeviceMo

; 6950 : 	{
; 6951 : 		bResult = DeviceIoControl (dev, FSCTL_IS_VOLUME_MOUNTED, NULL, 0, NULL, 0, &dwResult, NULL);

  00024	56		 push	 esi
  00025	6a 00		 push	 0
  00027	8d 45 fc	 lea	 eax, DWORD PTR _dwResult$[ebp]
  0002a	50		 push	 eax
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	68 28 00 09 00	 push	 589864			; 00090028H
  00038	57		 push	 edi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 6952 : 		CloseHandle (dev);

  0003f	57		 push	 edi
  00040	8b f0		 mov	 esi, eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 6953 : 	}
; 6954 : 
; 6955 : 	return bResult;

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi
  0004b	5f		 pop	 edi

; 6956 : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN4@IsDeviceMo:

; 6953 : 	}
; 6954 : 
; 6955 : 	return bResult;

  00050	33 c0		 xor	 eax, eax
  00052	5f		 pop	 edi

; 6956 : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_IsDeviceMounted ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsDriveAvailable
_TEXT	SEGMENT
_driveNo$ = 8						; size = 4
_IsDriveAvailable PROC					; COMDAT

; 6925 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6926 : 	return (GetLogicalDrives() & (1 << driveNo)) == 0;

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _driveNo$[ebp]
  0000c	ba 01 00 00 00	 mov	 edx, 1
  00011	d3 e2		 shl	 edx, cl
  00013	23 c2		 and	 eax, edx
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 6927 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_IsDriveAvailable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetLastAvailableDrive
_TEXT	SEGMENT
_GetLastAvailableDrive PROC				; COMDAT

; 6903 : 	DWORD dwUsedDrives = GetLogicalDrives();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0

; 6904 : 	int i;
; 6905 : 
; 6906 : 	for (i = 25; i > 2; i--)

  00006	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@GetLastAva:

; 6907 : 	{
; 6908 : 		if (!(dwUsedDrives & 1 << i))

  00010	ba 01 00 00 00	 mov	 edx, 1
  00015	d3 e2		 shl	 edx, cl
  00017	85 d0		 test	 edx, eax
  00019	74 0a		 je	 SHORT $LN8@GetLastAva

; 6904 : 	int i;
; 6905 : 
; 6906 : 	for (i = 25; i > 2; i--)

  0001b	49		 dec	 ecx
  0001c	83 f9 02	 cmp	 ecx, 2
  0001f	7f ef		 jg	 SHORT $LL4@GetLastAva

; 6910 : 	}
; 6911 : 
; 6912 : 	return -1;

  00021	83 c8 ff	 or	 eax, -1

; 6913 : }

  00024	c3		 ret	 0
$LN8@GetLastAva:

; 6909 : 			return i;

  00025	8b c1		 mov	 eax, ecx

; 6913 : }

  00027	c3		 ret	 0
_GetLastAvailableDrive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetFirstAvailableDrive
_TEXT	SEGMENT
_GetFirstAvailableDrive PROC				; COMDAT

; 6881 : 	DWORD dwUsedDrives = GetLogicalDrives();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLogicalDrives@0

; 6882 : 	int i;
; 6883 : 
; 6884 : 	for (i = 3; i < 26; i++)

  00006	b9 03 00 00 00	 mov	 ecx, 3
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@GetFirstAv:

; 6885 : 	{
; 6886 : 		if (!(dwUsedDrives & 1 << i))

  00010	ba 01 00 00 00	 mov	 edx, 1
  00015	d3 e2		 shl	 edx, cl
  00017	85 d0		 test	 edx, eax
  00019	74 0a		 je	 SHORT $LN8@GetFirstAv

; 6882 : 	int i;
; 6883 : 
; 6884 : 	for (i = 3; i < 26; i++)

  0001b	41		 inc	 ecx
  0001c	83 f9 1a	 cmp	 ecx, 26			; 0000001aH
  0001f	7c ef		 jl	 SHORT $LL4@GetFirstAv

; 6888 : 	}
; 6889 : 
; 6890 : 	return -1;

  00021	83 c8 ff	 or	 eax, -1

; 6891 : }

  00024	c3		 ret	 0
$LN8@GetFirstAv:

; 6887 : 			return i;

  00025	8b c1		 mov	 eax, ecx

; 6891 : }

  00027	c3		 ret	 0
_GetFirstAvailableDrive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _WrongPwdRetryCountOverLimit
_TEXT	SEGMENT
_WrongPwdRetryCountOverLimit PROC			; COMDAT

; 6868 : 	return (WrongPwdRetryCounter > GST_TRY_HEADER_BAK_AFTER_NBR_WRONG_PWD_TRIES);

  00000	33 c0		 xor	 eax, eax
  00002	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?WrongPwdRetryCounter@@3HA, 2 ; WrongPwdRetryCounter
  00009	0f 9f c0	 setg	 al

; 6869 : }

  0000c	c3		 ret	 0
_WrongPwdRetryCountOverLimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ResetWrongPwdRetryCount
_TEXT	SEGMENT
_ResetWrongPwdRetryCount PROC				; COMDAT

; 6855 : 	WrongPwdRetryCounter = 0;

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?WrongPwdRetryCounter@@3HA, 0 ; WrongPwdRetryCounter

; 6856 : }

  0000a	c3		 ret	 0
_ResetWrongPwdRetryCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IncreaseWrongPwdRetryCount
_TEXT	SEGMENT
_count$ = 8						; size = 4
_IncreaseWrongPwdRetryCount PROC			; COMDAT

; 6841 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6842 : 	WrongPwdRetryCounter += count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _count$[ebp]
  00006	01 05 00 00 00
	00		 add	 DWORD PTR ?WrongPwdRetryCounter@@3HA, eax ; WrongPwdRetryCounter

; 6843 : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
_IncreaseWrongPwdRetryCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CheckFileExtension
_TEXT	SEGMENT
_fileName$ = 8						; size = 4
_CheckFileExtension PROC				; COMDAT

; 6798 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 6799 : 	int i = 0;
; 6800 : 	char *ext = strrchr (fileName, '.');

  00004	6a 2e		 push	 46			; 0000002eH
  00006	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00009	e8 00 00 00 00	 call	 _strrchr
  0000e	8b f8		 mov	 edi, eax
  00010	83 c4 08	 add	 esp, 8

; 6801 : 	static char *problemFileExt[] = {
; 6802 : 		// These are protected by the Windows Resource Protection
; 6803 : 		".asa", ".asp", ".aspx", ".ax", ".bas", ".bat", ".bin", ".cer", ".chm", ".clb", ".cmd", ".cnt", ".cnv",
; 6804 : 		".com", ".cpl", ".cpx", ".crt", ".csh", ".dll", ".drv", ".dtd", ".exe", ".fxp", ".grp", ".h1s", ".hlp",
; 6805 : 		".hta", ".ime", ".inf", ".ins", ".isp", ".its", ".js", ".jse", ".ksh", ".lnk", ".mad", ".maf", ".mag",
; 6806 : 		".mam", ".man", ".maq", ".mar", ".mas", ".mat", ".mau", ".mav", ".maw", ".mda", ".mdb", ".mde", ".mdt",
; 6807 : 		".mdw", ".mdz", ".msc", ".msi", ".msp", ".mst", ".mui", ".nls", ".ocx", ".ops", ".pal", ".pcd", ".pif",
; 6808 : 		".prf", ".prg", ".pst", ".reg", ".scf", ".scr", ".sct", ".shb", ".shs", ".sys", ".tlb", ".tsp", ".url",
; 6809 : 		".vb", ".vbe", ".vbs", ".vsmacros", ".vss", ".vst", ".vsw", ".ws", ".wsc", ".wsf", ".wsh", ".xsd", ".xsl",
; 6810 : 		// These additional file extensions are usually watched by antivirus programs
; 6811 : 		".386", ".acm", ".ade", ".adp", ".ani", ".app", ".asd", ".asf", ".asx", ".awx", ".ax", ".boo", ".bz2", ".cdf",
; 6812 : 		".class", ".dhtm", ".dhtml",".dlo", ".emf", ".eml", ".flt", ".fot", ".gz", ".hlp", ".htm", ".html", ".ini", 
; 6813 : 		".j2k", ".jar", ".jff", ".jif", ".jmh", ".jng", ".jp2", ".jpe", ".jpeg", ".jpg", ".lsp", ".mod", ".nws",
; 6814 : 		".obj", ".olb", ".osd", ".ov1", ".ov2", ".ov3", ".ovl", ".ovl", ".ovr", ".pdr", ".pgm", ".php", ".pkg",
; 6815 : 		".pl", ".png", ".pot", ".pps", ".ppt", ".ps1", ".ps1xml", ".psc1", ".rar", ".rpl", ".rtf", ".sbf", ".script", ".sh", ".sha", ".shtm",
; 6816 : 		".shtml", ".spl", ".swf", ".tar", ".tgz", ".tmp", ".ttf", ".vcs", ".vlm", ".vxd", ".vxo", ".wiz", ".wll", ".wmd",
; 6817 : 		".wmf",	".wms", ".wmz", ".wpc", ".wsc", ".wsh", ".wwk", ".xhtm", ".xhtml", ".xl", ".xml", ".zip", ".7z", 0};
; 6818 : 
; 6819 : 	if (!ext)

  00013	85 ff		 test	 edi, edi
  00015	75 03		 jne	 SHORT $LN9@CheckFileE
  00017	5f		 pop	 edi

; 6829 : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN9@CheckFileE:

; 6820 : 		return FALSE;
; 6821 : 
; 6822 : 	while (problemFileExt[i])

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?problemFileExt@?1??CheckFileExtension@@9@4PAPADA, 0
  00021	56		 push	 esi
  00022	74 23		 je	 SHORT $LN3@CheckFileE
  00024	be 00 00 00 00	 mov	 esi, OFFSET ?problemFileExt@?1??CheckFileExtension@@9@4PAPADA
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@CheckFileE:

; 6823 : 	{
; 6824 : 		if (!_stricmp (ext, problemFileExt[i++]))

  00030	ff 36		 push	 DWORD PTR [esi]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 __stricmp
  00038	83 c4 08	 add	 esp, 8
  0003b	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0003e	85 c0		 test	 eax, eax
  00040	74 0b		 je	 SHORT $LN10@CheckFileE

; 6820 : 		return FALSE;
; 6821 : 
; 6822 : 	while (problemFileExt[i])

  00042	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00045	75 e9		 jne	 SHORT $LL2@CheckFileE
$LN3@CheckFileE:
  00047	5e		 pop	 esi

; 6826 : 	}
; 6827 : 
; 6828 : 	return FALSE;

  00048	33 c0		 xor	 eax, eax
  0004a	5f		 pop	 edi

; 6829 : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN10@CheckFileE:
  0004d	5e		 pop	 esi

; 6825 : 			return TRUE;

  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	5f		 pop	 edi

; 6829 : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_CheckFileExtension ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CheckCapsLock
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_quiet$ = 12						; size = 4
_CheckCapsLock PROC					; COMDAT

; 6774 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6775 : 	if ((GetKeyState(VK_CAPITAL) & 1) != 0)	

  00003	6a 14		 push	 20			; 00000014H
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  0000b	a8 01		 test	 al, 1
  0000d	74 2c		 je	 SHORT $LN2@CheckCapsL

; 6776 : 	{
; 6777 : 		if (!quiet)

  0000f	83 7d 0c 00	 cmp	 DWORD PTR _quiet$[ebp], 0
  00013	75 1f		 jne	 SHORT $LN3@CheckCapsL

; 6778 : 		{
; 6779 : 			MessageBoxW (hwnd, GetString ("CAPSLOCK_ON"), lpszTitle, MB_ICONEXCLAMATION);

  00015	6a 30		 push	 48			; 00000030H
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MKBGBFGO@CAPSLOCK_ON?$AA@
  00022	e8 00 00 00 00	 call	 _GetString
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	ff 75 08	 push	 DWORD PTR _hwnd$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN3@CheckCapsL:

; 6780 : 		}
; 6781 : 		return TRUE;

  00034	b8 01 00 00 00	 mov	 eax, 1

; 6784 : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN2@CheckCapsL:

; 6782 : 	}
; 6783 : 	return FALSE;

  0003b	33 c0		 xor	 eax, eax

; 6784 : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_CheckCapsLock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseVolumeExplorerWindows
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_CloseVolumeExplorerWindows PROC			; COMDAT

; 5056 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5057 : 	if (driveNo >= 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _driveNo$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 16		 js	 SHORT $LN4@CloseVolum

; 5058 : 	{
; 5059 : 		explorerCloseSent = FALSE;
; 5060 : 		EnumWindows (CloseVolumeExplorerWindowsEnum, (LPARAM) driveNo);

  0000a	50		 push	 eax
  0000b	68 00 00 00 00	 push	 OFFSET _CloseVolumeExplorerWindowsEnum@8
  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?explorerCloseSent@@3HA, 0
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumWindows@8
$LN4@CloseVolum:

; 5061 : 	}
; 5062 : 
; 5063 : 	return explorerCloseSent;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?explorerCloseSent@@3HA

; 5064 : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_CloseVolumeExplorerWindows ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseVolumeExplorerWindowsEnum@8
_TEXT	SEGMENT
_s$ = -276						; size = 260
_driveStr$ = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_driveNo$ = 12						; size = 4
_CloseVolumeExplorerWindowsEnum@8 PROC			; COMDAT

; 5022 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5023 : 	char driveStr[10];
; 5024 : 	char s[MAX_PATH];
; 5025 : 
; 5026 : 	sprintf (driveStr, "%c:\\", driveNo + 'A');

  00013	8b 45 0c	 mov	 eax, DWORD PTR _driveNo$[ebp]
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  0001a	83 c0 41	 add	 eax, 65			; 00000041H
  0001d	50		 push	 eax
  0001e	8d 45 f0	 lea	 eax, DWORD PTR _driveStr$[ebp]
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_04CGJNICGF@?$CFc?3?2?$AA@
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _sprintf
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5027 : 
; 5028 : 	GetClassName (hwnd, s, sizeof s);

  0002f	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00035	68 04 01 00 00	 push	 260			; 00000104H
  0003a	50		 push	 eax
  0003b	56		 push	 esi
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassNameA@12

; 5029 : 	if (strcmp (s, "CabinetWClass") == 0)

  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0O@DMIKDLEM@CabinetWClass?$AA@
  00047	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0004d	0f 1f 00	 npad	 3
$LL7@CloseVolum:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN8@CloseVolum
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN9@CloseVolum
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN8@CloseVolum
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL7@CloseVolum
$LN9@CloseVolum:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN10@CloseVolum
$LN8@CloseVolum:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN10@CloseVolum:
  00075	85 c0		 test	 eax, eax
  00077	75 59		 jne	 SHORT $LN2@CloseVolum

; 5030 : 	{
; 5031 : 		GetWindowText (hwnd, s, sizeof s);

  00079	68 04 01 00 00	 push	 260			; 00000104H
  0007e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00084	50		 push	 eax
  00085	56		 push	 esi
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextA@12

; 5032 : 		if (strstr (s, driveStr) != NULL)

  0008c	8d 45 f0	 lea	 eax, DWORD PTR _driveStr$[ebp]
  0008f	50		 push	 eax
  00090	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _strstr
  0009c	83 c4 08	 add	 esp, 8
  0009f	85 c0		 test	 eax, eax
  000a1	74 19		 je	 SHORT $LN3@CloseVolum

; 5033 : 		{
; 5034 : 			PostMessage (hwnd, WM_CLOSE, 0, 0);

  000a3	6a 00		 push	 0
  000a5	6a 00		 push	 0
  000a7	6a 10		 push	 16			; 00000010H
  000a9	56		 push	 esi
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 5035 : 			explorerCloseSent = TRUE;

  000b0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?explorerCloseSent@@3HA, 1

; 5036 : 			return TRUE;

  000ba	eb 16		 jmp	 SHORT $LN2@CloseVolum
$LN3@CloseVolum:

; 5037 : 		}
; 5038 : 
; 5039 : 		explorerTopLevelWindow = hwnd;
; 5040 : 		EnumChildWindows (hwnd, CloseVolumeExplorerWindowsChildEnum, (LPARAM) driveStr);

  000bc	8d 45 f0	 lea	 eax, DWORD PTR _driveStr$[ebp]
  000bf	89 35 00 00 00
	00		 mov	 DWORD PTR ?explorerTopLevelWindow@@3PAUHWND__@@A, esi
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET ?CloseVolumeExplorerWindowsChildEnum@@YGHPAUHWND__@@J@Z ; CloseVolumeExplorerWindowsChildEnum
  000cb	56		 push	 esi
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN2@CloseVolum:

; 5041 : 	}
; 5042 : 
; 5043 : 	return TRUE;
; 5044 : }

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d5	b8 01 00 00 00	 mov	 eax, 1
  000da	33 cd		 xor	 ecx, ebp
  000dc	5e		 pop	 esi
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 08 00	 ret	 8
_CloseVolumeExplorerWindowsEnum@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _OpenVolumeExplorerWindow
_TEXT	SEGMENT
_fInfo$ = -364						; size = 352
_dosName$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
_driveNo$ = 8						; size = 4
_OpenVolumeExplorerWindow PROC				; COMDAT

; 4973 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4974 : 	char dosName[5];
; 4975 : 	SHFILEINFO fInfo;
; 4976 : 
; 4977 : 	sprintf (dosName, "%c:\\", (char) driveNo + 'A');

  00013	0f be 45 08	 movsx	 eax, BYTE PTR _driveNo$[ebp]
  00017	83 c0 41	 add	 eax, 65			; 00000041H
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR _dosName$[ebp]
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_04CGJNICGF@?$CFc?3?2?$AA@
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _sprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4978 : 
; 4979 : 	// Force explorer to discover the drive
; 4980 : 	SHGetFileInfo (dosName, 0, &fInfo, sizeof (fInfo), 0);

  0002c	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _fInfo$[ebp]
  00032	6a 00		 push	 0
  00034	68 60 01 00 00	 push	 352			; 00000160H
  00039	50		 push	 eax
  0003a	6a 00		 push	 0
  0003c	8d 45 f4	 lea	 eax, DWORD PTR _dosName$[ebp]
  0003f	50		 push	 eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFileInfoA@20

; 4981 : 
; 4982 : 	ShellExecute (NULL, "open", dosName, NULL, NULL, SW_SHOWNORMAL);

  00046	6a 01		 push	 1
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	8d 45 f4	 lea	 eax, DWORD PTR _dosName$[ebp]
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_04PMOCAHAA@open?$AA@
  00055	6a 00		 push	 0
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShellExecuteA@24

; 4983 : }

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00060	33 cd		 xor	 ecx, ebp
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_OpenVolumeExplorerWindow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LocalizeDialog
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_stringId$ = 12						; size = 4
_LocalizeDialog PROC					; COMDAT

; 4950 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4951 : 	LastDialogId = stringId;
; 4952 : 	SetWindowLongPtr (hwnd, GWLP_USERDATA, (LONG_PTR) 'TRUE');

  00004	8b 75 08	 mov	 esi, DWORD PTR _hwnd$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _stringId$[ebp]
  0000b	68 45 55 52 54	 push	 1414681925		; 54525545H
  00010	6a eb		 push	 -21			; ffffffebH
  00012	56		 push	 esi
  00013	89 3d 00 00 00
	00		 mov	 DWORD PTR _LastDialogId, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 4953 : 	SendMessage (hwnd, WM_SETFONT, (WPARAM) hUserFont, 0);

  0001f	6a 00		 push	 0
  00021	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  00027	6a 30		 push	 48			; 00000030H
  00029	56		 push	 esi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 4954 : 
; 4955 : 	if (stringId == NULL)

  00030	85 ff		 test	 edi, edi
  00032	75 0e		 jne	 SHORT $LN2@LocalizeDi

; 4956 : 		SetWindowText (hwnd, "GostCrypt");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  00039	56		 push	 esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 4957 : 	else

  00040	eb 11		 jmp	 SHORT $LN3@LocalizeDi
$LN2@LocalizeDi:

; 4958 : 		SetWindowTextW (hwnd, GetString (stringId));

  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 _GetString
  00048	83 c4 04	 add	 esp, 4
  0004b	50		 push	 eax
  0004c	56		 push	 esi
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN3@LocalizeDi:

; 4959 : 	
; 4960 : 	if (hUserFont != 0)

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00058	85 c0		 test	 eax, eax
  0005a	74 0d		 je	 SHORT $LN4@LocalizeDi

; 4961 : 		EnumChildWindows (hwnd, LocalizeDialogEnum, (LPARAM) hUserFont);

  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ; LocalizeDialogEnum
  00062	56		 push	 esi
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN4@LocalizeDi:
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 4962 : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_LocalizeDialog ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CheckFileStreamWriteErrors
_TEXT	SEGMENT
_s$1 = -524						; size = 520
__$ArrayPad$ = -4					; size = 4
_file$ = 8						; size = 4
_fileName$ = 12						; size = 4
_CheckFileStreamWriteErrors PROC			; COMDAT

; 4890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _fileName$[ebp]

; 4891 : 	if (ferror (file))

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _ferror
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	74 58		 je	 SHORT $LN2@CheckFileS

; 4892 : 	{
; 4893 : 		wchar_t s[GST_MAX_PATH];
; 4894 : 		swprintf_s (s, ARRAYSIZE (s), GetString ("CANNOT_WRITE_FILE_X"), fileName);

  00027	56		 push	 esi
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BADKJOBO@CANNOT_WRITE_FILE_X?$AA@
  0002d	e8 00 00 00 00	 call	 _GetString
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _s$1[ebp]
  0003c	68 04 01 00 00	 push	 260			; 00000104H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _swprintf_s
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 4895 : 		ErrorDirect (s);

  0004a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00051	75 1b		 jne	 SHORT $LN4@CheckFileS
  00053	6a 10		 push	 16			; 00000010H
  00055	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0005b	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _s$1[ebp]
  00061	50		 push	 eax
  00062	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN4@CheckFileS:

; 4896 : 
; 4897 : 		return FALSE;

  0006e	33 c0		 xor	 eax, eax
  00070	5e		 pop	 esi

; 4898 : 	}
; 4899 : 
; 4900 : 	return TRUE;
; 4901 : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	33 cd		 xor	 ecx, ebp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN2@CheckFileS:
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	33 cd		 xor	 ecx, ebp
  00089	5e		 pop	 esi
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_CheckFileStreamWriteErrors ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _handleError
_TEXT	SEGMENT
$T1 = -8220						; size = 24
_szTmp$ = -8196						; size = 8192
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_code$ = 12						; size = 4
_handleError PROC					; COMDAT

; 4775 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 1c 20 00 00	 mov	 eax, 8220		; 0000201cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4776 : 	WCHAR szTmp[4096];
; 4777 : 
; 4778 : 	if (Silent) return;

  00017	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  0001e	56		 push	 esi
  0001f	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00022	0f 85 09 03 00
	00		 jne	 $LN2@handleErro

; 4779 : 
; 4780 : 	switch (code)

  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _code$[ebp]
  0002b	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0002e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00031	0f 87 c5 02 00
	00		 ja	 $LN31@handleErro
  00037	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN52@handleErro[eax*4]
$LN5@handleErro:

; 4781 : 	{
; 4782 : 	case ERR_OS_ERROR:
; 4783 : 		handleWin32Error (hwndDlg);

  0003e	56		 push	 esi
  0003f	e8 00 00 00 00	 call	 _handleWin32Error
  00044	83 c4 04	 add	 esp, 4
  00047	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  00048	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004b	33 cd		 xor	 ecx, ebp
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN6@handleErro:

; 4784 : 		break;
; 4785 : 	case ERR_OUTOFMEMORY:
; 4786 : 		MessageBoxW (hwndDlg, GetString ("OUTOFMEMORY"), lpszTitle, ICON_HAND);

  00056	6a 10		 push	 16			; 00000010H
  00058	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  00063	e8 00 00 00 00	 call	 _GetString
  00068	83 c4 04	 add	 esp, 4

; 4787 : 		break;

  0006b	e9 b9 02 00 00	 jmp	 $LN50@handleErro
$LN7@handleErro:

; 4788 : 
; 4789 : 	case ERR_PASSWORD_WRONG:
; 4790 : 		MessageBoxW (hwndDlg, GetWrongPasswordErrorMessage (hwndDlg).c_str(), lpszTitle, MB_ICONWARNING);

  00070	8d 85 e4 df ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00076	56		 push	 esi
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?GetWrongPasswordErrorMessage@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z ; GetWrongPasswordErrorMessage
  0007d	83 c4 08	 add	 esp, 8
  00080	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00084	72 02		 jb	 SHORT $LN46@handleErro
  00086	8b 00		 mov	 eax, DWORD PTR [eax]
$LN46@handleErro:
  00088	6a 30		 push	 48			; 00000030H
  0008a	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00090	50		 push	 eax
  00091	56		 push	 esi
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00098	8d 8d e4 df ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0009e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a3	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
$LN8@handleErro:

; 4791 : 		break;
; 4792 : 
; 4793 : 	case ERR_DRIVE_NOT_FOUND:
; 4794 : 		MessageBoxW (hwndDlg, GetString ("NOT_FOUND"), lpszTitle, ICON_HAND);

  000b2	6a 10		 push	 16			; 00000010H
  000b4	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_09IILMPLJM@NOT_FOUND?$AA@
  000bf	e8 00 00 00 00	 call	 _GetString
  000c4	83 c4 04	 add	 esp, 4

; 4795 : 		break;

  000c7	e9 5d 02 00 00	 jmp	 $LN50@handleErro
$LN9@handleErro:

; 4796 : 	case ERR_FILES_OPEN:
; 4797 : 		MessageBoxW (hwndDlg, GetString ("OPENFILES_DRIVER"), lpszTitle, ICON_HAND);

  000cc	6a 10		 push	 16			; 00000010H
  000ce	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HBDCANKP@OPENFILES_DRIVER?$AA@
  000d9	e8 00 00 00 00	 call	 _GetString
  000de	83 c4 04	 add	 esp, 4

; 4798 : 		break;

  000e1	e9 43 02 00 00	 jmp	 $LN50@handleErro
$LN10@handleErro:

; 4799 : 	case ERR_FILES_OPEN_LOCK:
; 4800 : 		MessageBoxW (hwndDlg, GetString ("OPENFILES_LOCK"), lpszTitle, ICON_HAND);

  000e6	6a 10		 push	 16			; 00000010H
  000e8	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DNONBLBD@OPENFILES_LOCK?$AA@
  000f3	e8 00 00 00 00	 call	 _GetString
  000f8	83 c4 04	 add	 esp, 4

; 4801 : 		break;

  000fb	e9 29 02 00 00	 jmp	 $LN50@handleErro
$LN11@handleErro:

; 4802 : 	case ERR_VOL_SIZE_WRONG:
; 4803 : 		MessageBoxW (hwndDlg, GetString ("VOL_SIZE_WRONG"), lpszTitle, ICON_HAND);

  00100	6a 10		 push	 16			; 00000010H
  00102	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HPMGPOAF@VOL_SIZE_WRONG?$AA@
  0010d	e8 00 00 00 00	 call	 _GetString
  00112	83 c4 04	 add	 esp, 4

; 4804 : 		break;

  00115	e9 0f 02 00 00	 jmp	 $LN50@handleErro
$LN12@handleErro:

; 4805 : 	case ERR_COMPRESSION_NOT_SUPPORTED:
; 4806 : 		MessageBoxW (hwndDlg, GetString ("COMPRESSION_NOT_SUPPORTED"), lpszTitle, ICON_HAND);

  0011a	6a 10		 push	 16			; 00000010H
  0011c	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@FLKCANLN@COMPRESSION_NOT_SUPPORTED?$AA@
  00127	e8 00 00 00 00	 call	 _GetString
  0012c	83 c4 04	 add	 esp, 4

; 4807 : 		break;

  0012f	e9 f5 01 00 00	 jmp	 $LN50@handleErro
$LN13@handleErro:

; 4808 : 	case ERR_PASSWORD_CHANGE_VOL_TYPE:
; 4809 : 		MessageBoxW (hwndDlg, GetString ("WRONG_VOL_TYPE"), lpszTitle, ICON_HAND);

  00134	6a 10		 push	 16			; 00000010H
  00136	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BKLABIJI@WRONG_VOL_TYPE?$AA@
  00141	e8 00 00 00 00	 call	 _GetString
  00146	83 c4 04	 add	 esp, 4

; 4810 : 		break;

  00149	e9 db 01 00 00	 jmp	 $LN50@handleErro
$LN14@handleErro:

; 4811 : 	case ERR_VOL_SEEKING:
; 4812 : 		MessageBoxW (hwndDlg, GetString ("VOL_SEEKING"), lpszTitle, ICON_HAND);

  0014e	6a 10		 push	 16			; 00000010H
  00150	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KFLNHABP@VOL_SEEKING?$AA@
  0015b	e8 00 00 00 00	 call	 _GetString
  00160	83 c4 04	 add	 esp, 4

; 4813 : 		break;

  00163	e9 c1 01 00 00	 jmp	 $LN50@handleErro
$LN15@handleErro:

; 4814 : 	case ERR_CIPHER_INIT_FAILURE:
; 4815 : 		MessageBoxW (hwndDlg, GetString ("ERR_CIPHER_INIT_FAILURE"), lpszTitle, ICON_HAND);

  00168	6a 10		 push	 16			; 00000010H
  0016a	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00170	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BFLHAGLK@ERR_CIPHER_INIT_FAILURE?$AA@
  00175	e8 00 00 00 00	 call	 _GetString
  0017a	83 c4 04	 add	 esp, 4

; 4816 : 		break;

  0017d	e9 a7 01 00 00	 jmp	 $LN50@handleErro
$LN16@handleErro:

; 4817 : 	case ERR_CIPHER_INIT_WEAK_KEY:
; 4818 : 		MessageBoxW (hwndDlg, GetString ("ERR_CIPHER_INIT_WEAK_KEY"), lpszTitle, ICON_HAND);

  00182	6a 10		 push	 16			; 00000010H
  00184	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DGGCCNCK@ERR_CIPHER_INIT_WEAK_KEY?$AA@
  0018f	e8 00 00 00 00	 call	 _GetString
  00194	83 c4 04	 add	 esp, 4

; 4819 : 		break;

  00197	e9 8d 01 00 00	 jmp	 $LN50@handleErro
$LN17@handleErro:

; 4820 : 	case ERR_VOL_ALREADY_MOUNTED:
; 4821 : 		MessageBoxW (hwndDlg, GetString ("VOL_ALREADY_MOUNTED"), lpszTitle, ICON_HAND);

  0019c	6a 10		 push	 16			; 00000010H
  0019e	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEFDJEPG@VOL_ALREADY_MOUNTED?$AA@
  001a9	e8 00 00 00 00	 call	 _GetString
  001ae	83 c4 04	 add	 esp, 4

; 4822 : 		break;

  001b1	e9 73 01 00 00	 jmp	 $LN50@handleErro
$LN18@handleErro:

; 4823 : 	case ERR_FILE_OPEN_FAILED:
; 4824 : 		MessageBoxW (hwndDlg, GetString ("FILE_OPEN_FAILED"), lpszTitle, ICON_HAND);

  001b6	6a 10		 push	 16			; 00000010H
  001b8	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GLPAMHI@FILE_OPEN_FAILED?$AA@
  001c3	e8 00 00 00 00	 call	 _GetString
  001c8	83 c4 04	 add	 esp, 4

; 4825 : 		break;

  001cb	e9 59 01 00 00	 jmp	 $LN50@handleErro
$LN19@handleErro:

; 4826 : 	case ERR_VOL_MOUNT_FAILED:
; 4827 : 		MessageBoxW (hwndDlg, GetString  ("VOL_MOUNT_FAILED"), lpszTitle, ICON_HAND);

  001d0	6a 10		 push	 16			; 00000010H
  001d2	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JCPIJGNN@VOL_MOUNT_FAILED?$AA@
  001dd	e8 00 00 00 00	 call	 _GetString
  001e2	83 c4 04	 add	 esp, 4

; 4828 : 		break;

  001e5	e9 3f 01 00 00	 jmp	 $LN50@handleErro
$LN20@handleErro:

; 4829 : 	case ERR_NO_FREE_DRIVES:
; 4830 : 		MessageBoxW (hwndDlg, GetString ("NO_FREE_DRIVES"), lpszTitle, ICON_HAND);

  001ea	6a 10		 push	 16			; 00000010H
  001ec	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  001f2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ECPPAAM@NO_FREE_DRIVES?$AA@
  001f7	e8 00 00 00 00	 call	 _GetString
  001fc	83 c4 04	 add	 esp, 4

; 4831 : 		break;

  001ff	e9 25 01 00 00	 jmp	 $LN50@handleErro
$LN21@handleErro:

; 4832 : 	case ERR_ACCESS_DENIED:
; 4833 : 		MessageBoxW (hwndDlg, GetString ("ACCESS_DENIED"), lpszTitle, ICON_HAND);

  00204	6a 10		 push	 16			; 00000010H
  00206	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ILOHOCOF@ACCESS_DENIED?$AA@
  00211	e8 00 00 00 00	 call	 _GetString
  00216	83 c4 04	 add	 esp, 4

; 4834 : 		break;

  00219	e9 0b 01 00 00	 jmp	 $LN50@handleErro
$LN22@handleErro:

; 4835 : 
; 4836 : 	case ERR_DRIVER_VERSION:
; 4837 : 		Error ("DRIVER_VERSION");

  0021e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LICKOHFP@DRIVER_VERSION?$AA@
  00223	e8 00 00 00 00	 call	 _Error
  00228	83 c4 04	 add	 esp, 4
  0022b	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  0022c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022f	33 cd		 xor	 ecx, ebp
  00231	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00236	8b e5		 mov	 esp, ebp
  00238	5d		 pop	 ebp
  00239	c3		 ret	 0
$LN23@handleErro:

; 4838 : 		break;
; 4839 : 
; 4840 : 	case ERR_NEW_VERSION_REQUIRED:
; 4841 : 		MessageBoxW (hwndDlg, GetString ("NEW_VERSION_REQUIRED"), lpszTitle, ICON_HAND);

  0023a	6a 10		 push	 16			; 00000010H
  0023c	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LDKGLOCG@NEW_VERSION_REQUIRED?$AA@
  00247	e8 00 00 00 00	 call	 _GetString
  0024c	83 c4 04	 add	 esp, 4

; 4842 : 		break;

  0024f	e9 d5 00 00 00	 jmp	 $LN50@handleErro
$LN24@handleErro:

; 4843 : 
; 4844 : 	case ERR_SELF_TESTS_FAILED:
; 4845 : 		Error ("ERR_SELF_TESTS_FAILED");

  00254	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DKEEGIEL@ERR_SELF_TESTS_FAILED?$AA@
  00259	e8 00 00 00 00	 call	 _Error
  0025e	83 c4 04	 add	 esp, 4
  00261	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  00262	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00265	33 cd		 xor	 ecx, ebp
  00267	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
$LN25@handleErro:

; 4846 : 		break;
; 4847 : 
; 4848 : 	case ERR_VOL_FORMAT_BAD:
; 4849 : 		Error ("ERR_VOL_FORMAT_BAD");

  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GJIBONDI@ERR_VOL_FORMAT_BAD?$AA@
  00275	e8 00 00 00 00	 call	 _Error
  0027a	83 c4 04	 add	 esp, 4
  0027d	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  0027e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00281	33 cd		 xor	 ecx, ebp
  00283	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c3		 ret	 0
$LN26@handleErro:

; 4850 : 		break;
; 4851 : 
; 4852 : 	case ERR_ENCRYPTION_NOT_COMPLETED:
; 4853 : 		Error ("ERR_ENCRYPTION_NOT_COMPLETED");

  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JLJPGHCL@ERR_ENCRYPTION_NOT_COMPLETED?$AA@
  00291	e8 00 00 00 00	 call	 _Error
  00296	83 c4 04	 add	 esp, 4
  00299	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  0029a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029d	33 cd		 xor	 ecx, ebp
  0029f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a4	8b e5		 mov	 esp, ebp
  002a6	5d		 pop	 ebp
  002a7	c3		 ret	 0
$LN27@handleErro:

; 4854 : 		break;
; 4855 : 
; 4856 : 	case ERR_NONSYS_INPLACE_ENC_INCOMPLETE:
; 4857 : 		Error ("ERR_NONSYS_INPLACE_ENC_INCOMPLETE");

  002a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BGLNMIMN@ERR_NONSYS_INPLACE_ENC_INCOMPLET@
  002ad	e8 00 00 00 00	 call	 _Error
  002b2	83 c4 04	 add	 esp, 4
  002b5	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  002b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b9	33 cd		 xor	 ecx, ebp
  002bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c3		 ret	 0
$LN28@handleErro:

; 4858 : 		break;
; 4859 : 
; 4860 : 	case ERR_SYS_HIDVOL_HEAD_REENC_MODE_WRONG:
; 4861 : 		Error ("ERR_SYS_HIDVOL_HEAD_REENC_MODE_WRONG");

  002c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MBJPLKGL@ERR_SYS_HIDVOL_HEAD_REENC_MODE_W@
  002c9	e8 00 00 00 00	 call	 _Error
  002ce	83 c4 04	 add	 esp, 4
  002d1	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  002d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d5	33 cd		 xor	 ecx, ebp
  002d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002dc	8b e5		 mov	 esp, ebp
  002de	5d		 pop	 ebp
  002df	c3		 ret	 0
$LN29@handleErro:

; 4862 : 		break;
; 4863 : 
; 4864 : 	case ERR_PARAMETER_INCORRECT:
; 4865 : 		Error ("ERR_PARAMETER_INCORRECT");

  002e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NIGJHOFH@ERR_PARAMETER_INCORRECT?$AA@
  002e5	e8 00 00 00 00	 call	 _Error
  002ea	83 c4 04	 add	 esp, 4
  002ed	5e		 pop	 esi

; 4876 : 	}
; 4877 : }

  002ee	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f1	33 cd		 xor	 ecx, ebp
  002f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f8	8b e5		 mov	 esp, ebp
  002fa	5d		 pop	 ebp
  002fb	c3		 ret	 0
$LN31@handleErro:

; 4866 : 		break;
; 4867 : 
; 4868 : 	case ERR_USER_ABORT:
; 4869 : 	case ERR_DONT_REPORT:
; 4870 : 		// A non-error
; 4871 : 		break;
; 4872 : 
; 4873 : 	default:
; 4874 : 		wsprintfW (szTmp, GetString ("ERR_UNKNOWN"), code);

  002fc	51		 push	 ecx
  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FDOCLIJD@ERR_UNKNOWN?$AA@
  00302	e8 00 00 00 00	 call	 _GetString
  00307	83 c4 04	 add	 esp, 4
  0030a	50		 push	 eax
  0030b	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00311	50		 push	 eax
  00312	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00318	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4875 : 		MessageBoxW (hwndDlg, szTmp, lpszTitle, ICON_HAND);

  0031b	8d 85 fc df ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00321	6a 10		 push	 16			; 00000010H
  00323	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
$LN50@handleErro:
  00329	50		 push	 eax
  0032a	56		 push	 esi
  0032b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN2@handleErro:

; 4876 : 	}
; 4877 : }

  00331	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00334	33 cd		 xor	 ecx, ebp
  00336	5e		 pop	 esi
  00337	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c3		 ret	 0
$LN52@handleErro:
  00340	00 00 00 00	 DD	 $LN5@handleErro
  00344	00 00 00 00	 DD	 $LN6@handleErro
  00348	00 00 00 00	 DD	 $LN7@handleErro
  0034c	00 00 00 00	 DD	 $LN25@handleErro
  00350	00 00 00 00	 DD	 $LN8@handleErro
  00354	00 00 00 00	 DD	 $LN9@handleErro
  00358	00 00 00 00	 DD	 $LN11@handleErro
  0035c	00 00 00 00	 DD	 $LN12@handleErro
  00360	00 00 00 00	 DD	 $LN13@handleErro
  00364	00 00 00 00	 DD	 $LN31@handleErro
  00368	00 00 00 00	 DD	 $LN14@handleErro
  0036c	00 00 00 00	 DD	 $LN31@handleErro
  00370	00 00 00 00	 DD	 $LN10@handleErro
  00374	00 00 00 00	 DD	 $LN31@handleErro
  00378	00 00 00 00	 DD	 $LN22@handleErro
  0037c	00 00 00 00	 DD	 $LN23@handleErro
  00380	00 00 00 00	 DD	 $LN15@handleErro
  00384	00 00 00 00	 DD	 $LN16@handleErro
  00388	00 00 00 00	 DD	 $LN24@handleErro
  0038c	00 00 00 00	 DD	 $LN31@handleErro
  00390	00 00 00 00	 DD	 $LN17@handleErro
  00394	00 00 00 00	 DD	 $LN20@handleErro
  00398	00 00 00 00	 DD	 $LN18@handleErro
  0039c	00 00 00 00	 DD	 $LN19@handleErro
  003a0	00 00 00 00	 DD	 $LN31@handleErro
  003a4	00 00 00 00	 DD	 $LN21@handleErro
  003a8	00 00 00 00	 DD	 $LN31@handleErro
  003ac	00 00 00 00	 DD	 $LN2@handleErro
  003b0	00 00 00 00	 DD	 $LN26@handleErro
  003b4	00 00 00 00	 DD	 $LN29@handleErro
  003b8	00 00 00 00	 DD	 $LN28@handleErro
  003bc	00 00 00 00	 DD	 $LN27@handleErro
  003c0	00 00 00 00	 DD	 $LN2@handleErro
_handleError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _BrowseDirectories
_TEXT	SEGMENT
_bi$ = -36						; size = 32
_pMalloc$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_lpszTitle$ = 12					; size = 4
_dirName$ = 16						; size = 4
_BrowseDirectories PROC					; COMDAT

; 4685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi

; 4686 : 	BROWSEINFOW bi;
; 4687 : 	LPITEMIDLIST pidl;
; 4688 : 	LPMALLOC pMalloc;
; 4689 : 	BOOL bOK  = FALSE;

  00007	33 f6		 xor	 esi, esi

; 4690 : 
; 4691 : 	CoInitialize (NULL);

  00009	56		 push	 esi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 4692 : 
; 4693 : 	if (SUCCEEDED (SHGetMalloc (&pMalloc))) 

  00010	8d 45 fc	 lea	 eax, DWORD PTR _pMalloc$[ebp]
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetMalloc@4
  0001a	85 c0		 test	 eax, eax
  0001c	78 72		 js	 SHORT $LN3@BrowseDire

; 4694 : 	{
; 4695 : 		ZeroMemory (&bi, sizeof(bi));
; 4696 : 		bi.hwndOwner = hwndDlg;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _hwndDlg$[ebp]
  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	53		 push	 ebx
  00025	57		 push	 edi

; 4697 : 		bi.pszDisplayName = 0;
; 4698 : 		bi.lpszTitle = GetString (lpszTitle);

  00026	ff 75 0c	 push	 DWORD PTR _lpszTitle$[ebp]
  00029	0f 11 45 dc	 movups	 XMMWORD PTR _bi$[ebp], xmm0
  0002d	89 45 dc	 mov	 DWORD PTR _bi$[ebp], eax
  00030	0f 11 45 ec	 movups	 XMMWORD PTR _bi$[ebp+16], xmm0
  00034	89 75 e4	 mov	 DWORD PTR _bi$[ebp+8], esi
  00037	e8 00 00 00 00	 call	 _GetString

; 4699 : 		bi.pidlRoot = 0;
; 4700 : 		bi.ulFlags = BIF_RETURNONLYFSDIRS | BIF_STATUSTEXT;
; 4701 : 		bi.lpfn = BrowseCallbackProc;
; 4702 : 		bi.lParam = (LPARAM)dirName;

  0003c	8b 5d 10	 mov	 ebx, DWORD PTR _dirName$[ebp]
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 e8	 mov	 DWORD PTR _bi$[ebp+12], eax

; 4703 : 
; 4704 : 		pidl = SHBrowseForFolderW (&bi);

  00045	8d 45 dc	 lea	 eax, DWORD PTR _bi$[ebp]
  00048	89 75 e0	 mov	 DWORD PTR _bi$[ebp+4], esi
  0004b	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _bi$[ebp+16], 5
  00052	50		 push	 eax
  00053	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bi$[ebp+20], OFFSET _BrowseCallbackProc@16
  0005a	89 5d f4	 mov	 DWORD PTR _bi$[ebp+24], ebx
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHBrowseForFolderW@4
  00063	8b f8		 mov	 edi, eax

; 4705 : 		if (pidl != NULL) 

  00065	85 ff		 test	 edi, edi
  00067	74 25		 je	 SHORT $LN6@BrowseDire

; 4706 : 		{
; 4707 : 			if (SHGetPathFromIDList(pidl, dirName)) 

  00069	53		 push	 ebx
  0006a	57		 push	 edi
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetPathFromIDListA@8
  00071	85 c0		 test	 eax, eax
  00073	b9 01 00 00 00	 mov	 ecx, 1

; 4708 : 			{
; 4709 : 				bOK = TRUE;
; 4710 : 			}
; 4711 : 
; 4712 : 			pMalloc->Free (pidl);

  00078	8b 45 fc	 mov	 eax, DWORD PTR _pMalloc$[ebp]
  0007b	0f 45 f1	 cmovne	 esi, ecx
  0007e	57		 push	 edi
  0007f	50		 push	 eax
  00080	8b 08		 mov	 ecx, DWORD PTR [eax]
  00082	ff 51 14	 call	 DWORD PTR [ecx+20]

; 4713 : 			pMalloc->Release();

  00085	8b 4d fc	 mov	 ecx, DWORD PTR _pMalloc$[ebp]
  00088	51		 push	 ecx
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	ff 52 08	 call	 DWORD PTR [edx+8]
$LN6@BrowseDire:
  0008e	5f		 pop	 edi
  0008f	5b		 pop	 ebx
$LN3@BrowseDire:

; 4714 : 		}
; 4715 : 	}
; 4716 : 
; 4717 : 	CoUninitialize();

  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 4718 : 
; 4719 : 	return bOK;

  00096	8b c6		 mov	 eax, esi
  00098	5e		 pop	 esi

; 4720 : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_BrowseDirectories ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _BrowseFiles
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_stringId$ = 12						; size = 4
_lpszFileName$ = 16					; size = 4
_keepHistory$ = 20					; size = 4
_saveMode$ = 24						; size = 4
_browseFilter$ = 28					; size = 4
_BrowseFiles PROC					; COMDAT

; 4432 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4433 : 	return BrowseFilesInDir (hwndDlg, stringId, NULL, lpszFileName, keepHistory, saveMode, browseFilter);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 1c	 push	 DWORD PTR _browseFilter$[ebp]
  0000a	ff 75 18	 push	 DWORD PTR _saveMode$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR _keepHistory$[ebp]
  00010	ff 75 10	 push	 DWORD PTR _lpszFileName$[ebp]
  00013	6a 00		 push	 0
  00015	ff 75 0c	 push	 DWORD PTR _stringId$[ebp]
  00018	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  0001b	e8 00 00 00 00	 call	 ?BrowseFilesInDir@@YAHPAUHWND__@@PAD11HHPA_WPB_W3@Z ; BrowseFilesInDir
  00020	83 c4 24	 add	 esp, 36			; 00000024H

; 4434 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_BrowseFiles ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ResetCurrentDirectory
_TEXT	SEGMENT
_p$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_ResetCurrentDirectory PROC				; COMDAT

; 4404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 4405 : 	char p[MAX_PATH];
; 4406 : 	if (!IsNonInstallMode () && SHGetFolderPath (NULL, CSIDL_PROFILE, NULL, 0, p) == ERROR_SUCCESS)

  00013	e8 00 00 00 00	 call	 _IsNonInstallMode
  00018	85 c0		 test	 eax, eax
  0001a	75 19		 jne	 SHORT $LN2@ResetCurre
  0001c	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _p$[ebp]
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	6a 28		 push	 40			; 00000028H
  00029	6a 00		 push	 0
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHGetFolderPathA@20
  00031	85 c0		 test	 eax, eax
  00033	74 29		 je	 SHORT $LN9@ResetCurre
$LN2@ResetCurre:

; 4407 : 	{
; 4408 : 		SetCurrentDirectory (p);
; 4409 : 	}
; 4410 : 	else
; 4411 : 	{
; 4412 : 		GetModPath (p, sizeof (p));

  00035	68 04 01 00 00	 push	 260			; 00000104H
  0003a	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _p$[ebp]
  00040	50		 push	 eax
  00041	6a 00		 push	 0
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  00049	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _p$[ebp]
  0004f	6a 5c		 push	 92			; 0000005cH
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _strrchr
  00057	83 c4 08	 add	 esp, 8
  0005a	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN9@ResetCurre:

; 4413 : 		SetCurrentDirectory (p);

  0005e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _p$[ebp]
  00064	50		 push	 eax
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCurrentDirectoryA@4

; 4414 : 	}
; 4415 : }

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_ResetCurrentDirectory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DriverAttach
_TEXT	SEGMENT
_dwResult$1 = -4					; size = 4
_DriverAttach PROC					; COMDAT

; 4266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4267 : 	/* Try to open a handle to the device driver. It will be closed later. */
; 4268 : 
; 4269 : #ifndef SETUP
; 4270 : 
; 4271 : 	int nLoadRetryCount = 0;
; 4272 : start:
; 4273 : 
; 4274 : #endif
; 4275 : 
; 4276 : 	hDriver = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

  00004	6a 00		 push	 0
  00006	6a 00		 push	 0
  00008	6a 03		 push	 3
  0000a	6a 00		 push	 0
  0000c	6a 03		 push	 3
  0000e	6a 00		 push	 0
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PFCBNFDJ@?2?2?4?2GostCrypt?$AA@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _hDriver, eax

; 4277 : 
; 4278 : 	if (hDriver == INVALID_HANDLE_VALUE)

  00020	83 f8 ff	 cmp	 eax, -1
  00023	75 09		 jne	 SHORT $LN3@DriverAtta

; 4279 : 	{
; 4280 : #ifndef SETUP
; 4281 : 
; 4282 : 		LoadSysEncSettings (NULL);
; 4283 : 
; 4284 : 		if (!CreateDriverSetupMutex ())
; 4285 : 		{
; 4286 : 			// Another instance is already attempting to install, register or start the driver
; 4287 : 
; 4288 : 			while (!CreateDriverSetupMutex ())
; 4289 : 			{
; 4290 : 				Sleep (100);	// Wait until the other instance finishes
; 4291 : 			}
; 4292 : 
; 4293 : 			// Try to open a handle to the driver again (keep the mutex in case the other instance failed)
; 4294 : 			goto start;		
; 4295 : 		}
; 4296 : 		else
; 4297 : 		{
; 4298 : 			// No other instance is currently attempting to install, register or start the driver
; 4299 : 
; 4300 : 			if (SystemEncryptionStatus != SYSENC_STATUS_NONE)
; 4301 : 			{
; 4302 : 				// This is an inconsistent state. The config file indicates system encryption should be
; 4303 : 				// active, but the driver is not running. This may happen e.g. when the pretest fails and 
; 4304 : 				// the user selects "Last Known Good Configuration" from the Windows boot menu.
; 4305 : 				// To fix this, we're going to reinstall the driver, start it, and register it for boot.
; 4306 : 
; 4307 : 				if (DoDriverInstall (NULL))
; 4308 : 				{
; 4309 : 					Sleep (1000);
; 4310 : 					hDriver = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 4311 : 
; 4312 : 					try
; 4313 : 					{
; 4314 : 						BootEncryption bootEnc (NULL);
; 4315 : 						bootEnc.RegisterBootDriver (bootEnc.GetHiddenOSCreationPhase() != GST_HIDDEN_OS_CREATION_PHASE_NONE ? true : false);
; 4316 : 					}
; 4317 : 					catch (Exception &e)
; 4318 : 					{
; 4319 : 						e.Show (NULL);
; 4320 : 					}
; 4321 : 				}
; 4322 : 
; 4323 : 				CloseDriverSetupMutex ();
; 4324 : 			}
; 4325 : 			else
; 4326 : 			{
; 4327 : 				// Attempt to load the driver (non-install/portable mode)
; 4328 : load:
; 4329 : 				BOOL res = DriverLoad ();
; 4330 : 
; 4331 : 				CloseDriverSetupMutex ();
; 4332 : 
; 4333 : 				if (res != ERROR_SUCCESS)
; 4334 : 					return res;
; 4335 : 
; 4336 : 				bPortableModeConfirmed = TRUE;
; 4337 : 
; 4338 : 				hDriver = CreateFile (WIN32_ROOT_PREFIX, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
; 4339 : 			}
; 4340 : 
; 4341 : 			if (bPortableModeConfirmed)
; 4342 : 				NotifyDriverOfPortableMode ();
; 4343 : 		}
; 4344 : 
; 4345 : #endif	// #ifndef SETUP
; 4346 : 
; 4347 : 		if (hDriver == INVALID_HANDLE_VALUE)
; 4348 : 			return ERR_OS_ERROR;

  00025	b8 01 00 00 00	 mov	 eax, 1

; 4393 : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@DriverAtta:

; 4349 : 	}
; 4350 : 
; 4351 : 	CloseDriverSetupMutex ();

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
  00035	74 2a		 je	 SHORT $LN12@DriverAtta
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00043	85 c0		 test	 eax, eax
  00045	74 1a		 je	 SHORT $LN12@DriverAtta
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00053	85 c0		 test	 eax, eax
  00055	74 0a		 je	 SHORT $LN12@DriverAtta
  00057	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
$LN12@DriverAtta:

; 4352 : 
; 4353 : 	if (hDriver != INVALID_HANDLE_VALUE)

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00066	83 f8 ff	 cmp	 eax, -1
  00069	74 55		 je	 SHORT $LN6@DriverAtta

; 4354 : 	{
; 4355 : 		DWORD dwResult;
; 4356 : 
; 4357 : 		BOOL bResult = DeviceIoControl (hDriver, GST_IOCTL_GET_DRIVER_VERSION, NULL, 0, &DriverVersion, sizeof (DriverVersion), &dwResult, NULL);

  0006b	6a 00		 push	 0
  0006d	8d 4d fc	 lea	 ecx, DWORD PTR _dwResult$1[ebp]
  00070	51		 push	 ecx
  00071	6a 04		 push	 4
  00073	68 00 00 00 00	 push	 OFFSET ?DriverVersion@@3JA ; DriverVersion
  00078	6a 00		 push	 0
  0007a	6a 00		 push	 0
  0007c	68 04 20 22 00	 push	 2236420			; 00222004H
  00081	50		 push	 eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 4358 : 
; 4359 : 		if (!bResult)

  00088	85 c0		 test	 eax, eax
  0008a	75 34		 jne	 SHORT $LN6@DriverAtta

; 4360 : 			bResult = DeviceIoControl (hDriver, GST_IOCTL_LEGACY_GET_DRIVER_VERSION, NULL, 0, &DriverVersion, sizeof (DriverVersion), &dwResult, NULL);

  0008c	50		 push	 eax
  0008d	8d 45 fc	 lea	 eax, DWORD PTR _dwResult$1[ebp]
  00090	50		 push	 eax
  00091	6a 04		 push	 4
  00093	68 00 00 00 00	 push	 OFFSET ?DriverVersion@@3JA ; DriverVersion
  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	68 18 20 07 00	 push	 466968			; 00072018H
  000a1	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 4361 : 
; 4362 : #ifndef SETUP // Don't check version during setup to allow removal of another version
; 4363 : 		if (bResult == FALSE)
; 4364 : 		{
; 4365 : 			return ERR_OS_ERROR;
; 4366 : 		}
; 4367 : /**
; 4368 :  *
; 4369 :  *	\fn else if (DriverVersion != VERSION_NUM)
; 4370 :  *	\brief
; 4371 :  *	\param[in] DriverVersion !=
; 4372 :  *	\return
; 4373 :  *
; 4374 :  */
; 4375 : 		else if (DriverVersion != VERSION_NUM)
; 4376 : 		{
; 4377 : 			// Unload an incompatbile version of the driver loaded in non-install mode and load the required version
; 4378 : 			if (IsNonInstallMode () && CreateDriverSetupMutex () && DriverUnload () && nLoadRetryCount++ < 3)
; 4379 : 				goto load;
; 4380 : 
; 4381 : 			CloseDriverSetupMutex ();
; 4382 : 			CloseHandle (hDriver);
; 4383 : 			hDriver = INVALID_HANDLE_VALUE;
; 4384 : 			return ERR_DRIVER_VERSION;
; 4385 : 		}
; 4386 : #else
; 4387 : 		if (!bResult)

  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DriverVersion@@3JA ; DriverVersion
  000b3	33 d2		 xor	 edx, edx
  000b5	85 c0		 test	 eax, eax
  000b7	0f 44 ca	 cmove	 ecx, edx
  000ba	89 0d 00 00 00
	00		 mov	 DWORD PTR ?DriverVersion@@3JA, ecx ; DriverVersion
$LN6@DriverAtta:

; 4388 : 			DriverVersion = 0;
; 4389 : #endif
; 4390 : 	}
; 4391 : 
; 4392 : 	return 0;

  000c0	33 c0		 xor	 eax, eax

; 4393 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
_DriverAttach ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _MultiChoiceDialogProc@16
_TEXT	SEGMENT
tv688 = -164						; size = 4
tv808 = -160						; size = 4
_nBaseButtonWidth$1$ = -160				; size = 4
_vertSubOffset$1$ = -156				; size = 4
tv689 = -156						; size = 4
_nActiveChoices$1$ = -152				; size = 4
_newLineSeqCount$1$ = -148				; size = 4
tv813 = -144						; size = 4
_hwndDlg$GSCopy$1$ = -140				; size = 4
tv792 = -136						; size = 4
_pwStr$1$ = -136					; size = 4
_nBaseButtonHeight$1$ = -136				; size = 4
_lParam$GSCopy$1$ = -132				; size = 4
tv812 = -132						; size = 4
tv829 = -128						; size = 4
_vertOffset$1$ = -124					; size = 4
_nStr$2$ = -124						; size = 4
_horizSubOffset$1$ = -120				; size = 4
_pStr$2$ = -120						; size = 4
_offset$2$ = -116					; size = 4
_vertMsgHeightOffset$2$ = -116				; size = 4
tv790 = -116						; size = 4
_nTextGfxLineHeight$1$ = -116				; size = 4
_nLongestButtonCaptionWidth$1$ = -116			; size = 4
_wtrec$ = -112						; size = 16
_trec$ = -96						; size = 16
_wrec$ = -80						; size = 16
_rec$ = -64						; size = 16
_nChoiceIDs$ = -48					; size = 44
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_MultiChoiceDialogProc@16 PROC				; COMDAT

; 6543 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000013e0000013df000013dd000013dc

; 6544 : 	int nChoiceIDs [MAX_MULTI_CHOICES+1] = { IDC_MULTI_CHOICE_MSG, IDC_CHOICE1, IDC_CHOICE2, IDC_CHOICE3,
; 6545 : 		IDC_CHOICE4, IDC_CHOICE5, IDC_CHOICE6, IDC_CHOICE7, IDC_CHOICE8, IDC_CHOICE9, IDC_CHOICE10 };
; 6546 : 	int nBaseButtonWidth = 0;
; 6547 : 	int nBaseButtonHeight = 0;
; 6548 : 	int nActiveChoices = -1;
; 6549 : 	int nStr = 0;
; 6550 : 	int vertSubOffset, horizSubOffset, vertMsgHeightOffset;
; 6551 : 	int vertOffset = 0;
; 6552 : 	int nLongestButtonCaptionWidth = 6;
; 6553 : 	int nLongestButtonCaptionCharLen = 1;
; 6554 : 	int nTextGfxLineHeight = 0;
; 6555 : 	int nMainTextLenInChars = 0;
; 6556 : 	int newLineSeqCount = 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0001f	83 ca ff	 or	 edx, -1
  00022	0f 11 45 d0	 movups	 XMMWORD PTR _nChoiceIDs$[ebp], xmm0
  00026	89 85 6c ff ff
	ff		 mov	 DWORD PTR _newLineSeqCount$1$[ebp], eax
  0002c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000003000000020000000100000000

; 6557 : 	RECT rec, wrec, wtrec, trec;
; 6558 : 	BOOL bResolve;
; 6559 : 
; 6560 : 	WORD lw = LOWORD (wParam);
; 6561 : 
; 6562 : 	switch (uMsg)

  00033	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00036	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@000013e3000013e3000013e3000013e3
  0003e	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _lParam$GSCopy$1$[ebp], ecx
  00044	c7 45 e0 e1 13
	00 00		 mov	 DWORD PTR _nChoiceIDs$[ebp+16], 5089 ; 000013e1H
  0004b	c7 45 e4 de 13
	00 00		 mov	 DWORD PTR _nChoiceIDs$[ebp+20], 5086 ; 000013deH
  00052	c7 45 e8 e2 13
	00 00		 mov	 DWORD PTR _nChoiceIDs$[ebp+24], 5090 ; 000013e2H
  00059	89 95 68 ff ff
	ff		 mov	 DWORD PTR _nActiveChoices$1$[ebp], edx
  0005f	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _nStr$2$[ebp], 0
  00066	c7 45 8c 06 00
	00 00		 mov	 DWORD PTR _nLongestButtonCaptionWidth$1$[ebp], 6
  0006d	53		 push	 ebx
  0006e	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00071	89 9d 74 ff ff
	ff		 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], ebx
  00077	57		 push	 edi
  00078	8d 7a 02	 lea	 edi, DWORD PTR [edx+2]
  0007b	0f 11 45 ec	 movups	 XMMWORD PTR _nChoiceIDs$[ebp+28], xmm0
  0007f	83 e8 10	 sub	 eax, 16			; 00000010H
  00082	0f 84 09 07 00
	00		 je	 $LN28@MultiChoic
  00088	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  0008d	74 47		 je	 SHORT $LN16@MultiChoic
  0008f	2b c7		 sub	 eax, edi
  00091	75 29		 jne	 SHORT $LN14@MultiChoic

; 6735 : 		}
; 6736 : 
; 6737 : 	case WM_COMMAND:
; 6738 : 
; 6739 : 		if (lw == IDCLOSE || lw == IDCANCEL)

  00093	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00096	66 83 f9 08	 cmp	 cx, 8
  0009a	0f 84 f1 06 00
	00		 je	 $LN28@MultiChoic
  000a0	66 83 f9 02	 cmp	 cx, 2
  000a4	0f 84 e7 06 00
	00		 je	 $LN28@MultiChoic

; 6740 : 		{
; 6741 : 			EndDialog (hwndDlg, 0);
; 6742 : 			return 1;
; 6743 : 		}
; 6744 : 
; 6745 : 		for (nStr = 1; nStr < MAX_MULTI_CHOICES+1; nStr++)

  000aa	8b c7		 mov	 eax, edi
  000ac	0f b7 c9	 movzx	 ecx, cx
  000af	90		 npad	 1
$LL15@MultiChoic:

; 6746 : 		{
; 6747 : 			if (lw == nChoiceIDs[nStr])

  000b0	3b 4c 85 d0	 cmp	 ecx, DWORD PTR _nChoiceIDs$[ebp+eax*4]
  000b4	74 1a		 je	 SHORT $LN71@MultiChoic

; 6740 : 		{
; 6741 : 			EndDialog (hwndDlg, 0);
; 6742 : 			return 1;
; 6743 : 		}
; 6744 : 
; 6745 : 		for (nStr = 1; nStr < MAX_MULTI_CHOICES+1; nStr++)

  000b6	40		 inc	 eax
  000b7	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000ba	7c f4		 jl	 SHORT $LL15@MultiChoic
$LN14@MultiChoic:
  000bc	5f		 pop	 edi

; 6757 : 		return 1;
; 6758 : 	}
; 6759 : 
; 6760 : 	return 0;

  000bd	33 c0		 xor	 eax, eax
  000bf	5b		 pop	 ebx

; 6761 : }

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 10 00	 ret	 16			; 00000010H
$LN71@MultiChoic:

; 6748 : 			{
; 6749 : 				EndDialog (hwndDlg, nStr);

  000d0	50		 push	 eax

; 6750 : 				return 1;

  000d1	e9 bd 06 00 00	 jmp	 $LN101@MultiChoic
$LN16@MultiChoic:

; 6563 : 	{
; 6564 : 	case WM_INITDIALOG:
; 6565 : 		{
; 6566 : 			char **pStr = (char **) ((MULTI_CHOICE_DLGPROC_PARAMS *) lParam)->strings;

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]

; 6567 : 			char **pStrOrig = pStr;
; 6568 : 			wchar_t **pwStr = (wchar_t **) ((MULTI_CHOICE_DLGPROC_PARAMS *) lParam)->strings;
; 6569 : 			wchar_t **pwStrOrig = pwStr;
; 6570 : 
; 6571 : 			LocalizeDialog (hwndDlg, NULL);

  000d8	68 45 55 52 54	 push	 1414681925		; 54525545H
  000dd	6a eb		 push	 -21			; ffffffebH
  000df	53		 push	 ebx
  000e0	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pwStr$1$[ebp], eax
  000e6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, 0
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  000f6	6a 00		 push	 0
  000f8	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  000fe	6a 30		 push	 48			; 00000030H
  00100	53		 push	 ebx
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  0010c	53		 push	 ebx
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00118	85 c0		 test	 eax, eax
  0011a	74 0d		 je	 SHORT $LN65@MultiChoic
  0011c	50		 push	 eax
  0011d	68 00 00 00 00	 push	 OFFSET ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ; LocalizeDialogEnum
  00122	53		 push	 ebx
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN65@MultiChoic:

; 6572 : 
; 6573 : 			SetWindowPos (hwndDlg, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  00129	56		 push	 esi
  0012a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetWindowPos@28
  00130	6a 03		 push	 3
  00132	6a 00		 push	 0
  00134	6a 00		 push	 0
  00136	6a 00		 push	 0
  00138	6a 00		 push	 0
  0013a	6a ff		 push	 -1
  0013c	53		 push	 ebx
  0013d	ff d6		 call	 esi

; 6574 : 			SetWindowPos (hwndDlg, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  0013f	6a 03		 push	 3
  00141	6a 00		 push	 0
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	6a 00		 push	 0
  00149	6a fe		 push	 -2			; fffffffeH
  0014b	53		 push	 ebx
  0014c	ff d6		 call	 esi

; 6575 : 
; 6576 : 			bResolve = (*pStr == NULL);

  0014e	8b b5 78 ff ff
	ff		 mov	 esi, DWORD PTR _pwStr$1$[ebp]

; 6577 : 
; 6578 : 			// Style
; 6579 : 			if (((MULTI_CHOICE_DLGPROC_PARAMS *) lParam)->bold)

  00154	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _lParam$GSCopy$1$[ebp]
  0015a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__GetDlgItem@8
  00160	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00162	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00166	89 4d 80	 mov	 DWORD PTR tv829[ebp], ecx
  00169	74 22		 je	 SHORT $LN17@MultiChoic

; 6580 : 			{
; 6581 : 				SendMessage (GetDlgItem (hwndDlg, IDC_MULTI_CHOICE_MSG), WM_SETFONT, (WPARAM) hUserBoldFont, (LPARAM) TRUE);

  0016b	6a 01		 push	 1
  0016d	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserBoldFont
  00173	6a 30		 push	 48			; 00000030H
  00175	68 dc 13 00 00	 push	 5084			; 000013dcH
  0017a	53		 push	 ebx
  0017b	ff d2		 call	 edx
  0017d	50		 push	 eax
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00184	8b 4d 80	 mov	 ecx, DWORD PTR tv829[ebp]
  00187	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__GetDlgItem@8
$LN17@MultiChoic:

; 6582 : 			}
; 6583 : 
; 6584 : 			// Process the strings
; 6585 : 			pStr++;

  0018d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 6586 : 			pwStr++;

  00190	83 c6 04	 add	 esi, 4
  00193	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv813[ebp], eax
  00199	89 45 88	 mov	 DWORD PTR _pStr$2$[ebp], eax
  0019c	89 b5 7c ff ff
	ff		 mov	 DWORD PTR tv812[ebp], esi
  001a2	eb 09		 jmp	 SHORT $LN6@MultiChoic
$LL100@MultiChoic:
  001a4	8b 4d 80	 mov	 ecx, DWORD PTR tv829[ebp]
  001a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__GetDlgItem@8
$LN6@MultiChoic:

; 6587 : 
; 6588 : 			do 
; 6589 : 			{
; 6590 : 				if (*pStr != 0)

  001ad	8b 00		 mov	 eax, DWORD PTR [eax]
  001af	85 c0		 test	 eax, eax
  001b1	0f 84 1d 01 00
	00		 je	 $LN18@MultiChoic
  001b7	85 c9		 test	 ecx, ecx

; 6591 : 				{
; 6592 : 					SetWindowTextW (GetDlgItem(hwndDlg, nChoiceIDs[nStr]), bResolve ? GetString(*pStr) : *pwStr);

  001b9	75 0b		 jne	 SHORT $LN30@MultiChoic
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 _GetString
  001c1	83 c4 04	 add	 esp, 4
  001c4	eb 02		 jmp	 SHORT $LN31@MultiChoic
$LN30@MultiChoic:
  001c6	8b 06		 mov	 eax, DWORD PTR [esi]
$LN31@MultiChoic:
  001c8	50		 push	 eax
  001c9	8b 45 84	 mov	 eax, DWORD PTR _nStr$2$[ebp]
  001cc	ff 74 85 d0	 push	 DWORD PTR _nChoiceIDs$[ebp+eax*4]
  001d0	53		 push	 ebx
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  001d7	50		 push	 eax
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8

; 6593 : 
; 6594 : 					if (nStr > 0)

  001de	83 7d 84 00	 cmp	 DWORD PTR _nStr$2$[ebp], 0
  001e2	0f 8e d8 00 00
	00		 jle	 $LN43@MultiChoic
  001e8	83 7d 80 00	 cmp	 DWORD PTR tv829[ebp], 0

; 6595 : 					{
; 6596 : 						nLongestButtonCaptionWidth = max (

  001ec	75 0f		 jne	 SHORT $LN32@MultiChoic
  001ee	8b 45 88	 mov	 eax, DWORD PTR _pStr$2$[ebp]
  001f1	ff 30		 push	 DWORD PTR [eax]
  001f3	e8 00 00 00 00	 call	 _GetString
  001f8	83 c4 04	 add	 esp, 4
  001fb	eb 02		 jmp	 SHORT $LN33@MultiChoic
$LN32@MultiChoic:
  001fd	8b 06		 mov	 eax, DWORD PTR [esi]
$LN33@MultiChoic:
  001ff	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  00205	50		 push	 eax
  00206	68 dd 13 00 00	 push	 5085			; 000013ddH
  0020b	53		 push	 ebx
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 _GetTextGfxWidth
  00218	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021b	3b 45 8c	 cmp	 eax, DWORD PTR _nLongestButtonCaptionWidth$1$[ebp]
  0021e	7e 36		 jle	 SHORT $LN36@MultiChoic
  00220	83 7d 80 00	 cmp	 DWORD PTR tv829[ebp], 0
  00224	75 0f		 jne	 SHORT $LN34@MultiChoic
  00226	8b 45 88	 mov	 eax, DWORD PTR _pStr$2$[ebp]
  00229	ff 30		 push	 DWORD PTR [eax]
  0022b	e8 00 00 00 00	 call	 _GetString
  00230	83 c4 04	 add	 esp, 4
  00233	eb 02		 jmp	 SHORT $LN35@MultiChoic
$LN34@MultiChoic:
  00235	8b 06		 mov	 eax, DWORD PTR [esi]
$LN35@MultiChoic:
  00237	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  0023d	50		 push	 eax
  0023e	68 dd 13 00 00	 push	 5085			; 000013ddH
  00243	53		 push	 ebx
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 _GetTextGfxWidth
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH
  00253	89 45 8c	 mov	 DWORD PTR _nLongestButtonCaptionWidth$1$[ebp], eax
$LN36@MultiChoic:

; 6597 : 							GetTextGfxWidth (GetDlgItem(hwndDlg, IDC_CHOICE1),
; 6598 : 											bResolve ? GetString(*pStr) : *pwStr,
; 6599 : 											hUserFont),
; 6600 : 							nLongestButtonCaptionWidth);
; 6601 : 
; 6602 : 						nLongestButtonCaptionCharLen = max (nLongestButtonCaptionCharLen, 

  00256	8b 55 80	 mov	 edx, DWORD PTR tv829[ebp]
  00259	85 d2		 test	 edx, edx
  0025b	75 12		 jne	 SHORT $LN38@MultiChoic
  0025d	8b 45 88	 mov	 eax, DWORD PTR _pStr$2$[ebp]
  00260	ff 30		 push	 DWORD PTR [eax]
  00262	e8 00 00 00 00	 call	 _GetString
  00267	8b 55 80	 mov	 edx, DWORD PTR tv829[ebp]
  0026a	83 c4 04	 add	 esp, 4
  0026d	eb 02		 jmp	 SHORT $LN39@MultiChoic
$LN38@MultiChoic:
  0026f	8b 06		 mov	 eax, DWORD PTR [esi]
$LN39@MultiChoic:
  00271	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  00274	89 8d 78 ff ff
	ff		 mov	 DWORD PTR tv792[ebp], ecx
  0027a	66 0f 1f 44 00
	00		 npad	 6
$LL96@MultiChoic:
  00280	66 8b 08	 mov	 cx, WORD PTR [eax]
  00283	83 c0 02	 add	 eax, 2
  00286	66 85 c9	 test	 cx, cx
  00289	75 f5		 jne	 SHORT $LL96@MultiChoic
  0028b	2b 85 78 ff ff
	ff		 sub	 eax, DWORD PTR tv792[ebp]
  00291	d1 f8		 sar	 eax, 1
  00293	3b f8		 cmp	 edi, eax
  00295	7f 29		 jg	 SHORT $LN43@MultiChoic
  00297	85 d2		 test	 edx, edx
  00299	75 11		 jne	 SHORT $LN40@MultiChoic
  0029b	8b 45 88	 mov	 eax, DWORD PTR _pStr$2$[ebp]
  0029e	ff 30		 push	 DWORD PTR [eax]
  002a0	e8 00 00 00 00	 call	 _GetString
  002a5	83 c4 04	 add	 esp, 4
  002a8	8b f8		 mov	 edi, eax
  002aa	eb 02		 jmp	 SHORT $LN41@MultiChoic
$LN40@MultiChoic:
  002ac	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN41@MultiChoic:
  002ae	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
$LL97@MultiChoic:
  002b1	66 8b 07	 mov	 ax, WORD PTR [edi]
  002b4	83 c7 02	 add	 edi, 2
  002b7	66 85 c0	 test	 ax, ax
  002ba	75 f5		 jne	 SHORT $LL97@MultiChoic
  002bc	2b f9		 sub	 edi, ecx
  002be	d1 ff		 sar	 edi, 1
$LN43@MultiChoic:

; 6603 : 							(int) wcslen ((const wchar_t *) (bResolve ? GetString(*pStr) : *pwStr)));
; 6604 : 					}
; 6605 : 
; 6606 : 					nActiveChoices++;
; 6607 : 					pStr++;

  002c0	8b 45 88	 mov	 eax, DWORD PTR _pStr$2$[ebp]
  002c3	ff 85 68 ff ff
	ff		 inc	 DWORD PTR _nActiveChoices$1$[ebp]
  002c9	83 c0 04	 add	 eax, 4
  002cc	89 45 88	 mov	 DWORD PTR _pStr$2$[ebp], eax

; 6608 : 					pwStr++;

  002cf	83 c6 04	 add	 esi, 4

; 6609 : 				}
; 6610 : 				else

  002d2	eb 16		 jmp	 SHORT $LN19@MultiChoic
$LN18@MultiChoic:

; 6611 : 				{
; 6612 : 					ShowWindow(GetDlgItem(hwndDlg, nChoiceIDs[nStr]), SW_HIDE);

  002d4	8b 45 84	 mov	 eax, DWORD PTR _nStr$2$[ebp]
  002d7	6a 00		 push	 0
  002d9	ff 74 85 d0	 push	 DWORD PTR _nChoiceIDs$[ebp+eax*4]
  002dd	53		 push	 ebx
  002de	ff d2		 call	 edx
  002e0	50		 push	 eax
  002e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  002e7	8b 45 88	 mov	 eax, DWORD PTR _pStr$2$[ebp]
$LN19@MultiChoic:

; 6613 : 				}
; 6614 : 				nStr++;

  002ea	8b 4d 84	 mov	 ecx, DWORD PTR _nStr$2$[ebp]
  002ed	41		 inc	 ecx
  002ee	89 4d 84	 mov	 DWORD PTR _nStr$2$[ebp], ecx

; 6615 : 
; 6616 : 			} while (nStr < MAX_MULTI_CHOICES+1);

  002f1	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  002f4	0f 8c aa fe ff
	ff		 jl	 $LL100@MultiChoic
  002fa	83 7d 80 00	 cmp	 DWORD PTR tv829[ebp], 0

; 6617 : 
; 6618 : 			// Length of main message in characters (not bytes)
; 6619 : 			nMainTextLenInChars = wcslen ((const wchar_t *) (bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1)));

  002fe	75 14		 jne	 SHORT $LN44@MultiChoic
  00300	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv813[ebp]
  00306	ff 30		 push	 DWORD PTR [eax]
  00308	e8 00 00 00 00	 call	 _GetString
  0030d	83 c4 04	 add	 esp, 4
  00310	8b d8		 mov	 ebx, eax
  00312	eb 08		 jmp	 SHORT $LN45@MultiChoic
$LN44@MultiChoic:
  00314	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv812[ebp]
  0031a	8b 18		 mov	 ebx, DWORD PTR [eax]
$LN45@MultiChoic:
  0031c	8d 4b 02	 lea	 ecx, DWORD PTR [ebx+2]
  0031f	90		 npad	 1
$LL98@MultiChoic:
  00320	66 8b 03	 mov	 ax, WORD PTR [ebx]
  00323	83 c3 02	 add	 ebx, 2
  00326	66 85 c0	 test	 ax, ax
  00329	75 f5		 jne	 SHORT $LL98@MultiChoic
  0032b	2b d9		 sub	 ebx, ecx
  0032d	d1 fb		 sar	 ebx, 1

; 6620 : 
; 6621 : 			if (nMainTextLenInChars > 200 
; 6622 : 				&& nMainTextLenInChars / nLongestButtonCaptionCharLen >= 10)

  0032f	81 fb c8 00 00
	00		 cmp	 ebx, 200		; 000000c8H
  00335	7e 29		 jle	 SHORT $LN21@MultiChoic
  00337	8b c3		 mov	 eax, ebx
  00339	99		 cdq
  0033a	f7 ff		 idiv	 edi
  0033c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0033f	7c 1f		 jl	 SHORT $LN21@MultiChoic

; 6623 : 			{
; 6624 : 				// As the main text is longer than 200 characters, we will "pad" the widest button caption with 
; 6625 : 				// spaces (if it is not wide enough) so as to increase the width of the whole dialog window. 
; 6626 : 				// Otherwise, it would look too tall (dialog boxes look better when they are more wide than tall).
; 6627 : 				nLongestButtonCaptionWidth = CompensateXDPI (max (

  00341	b9 5e 01 00 00	 mov	 ecx, 350		; 0000015eH
  00346	8b c3		 mov	 eax, ebx
  00348	3b d9		 cmp	 ebx, ecx
  0034a	0f 4f c1	 cmovg	 eax, ecx
  0034d	39 45 8c	 cmp	 DWORD PTR _nLongestButtonCaptionWidth$1$[ebp], eax
  00350	0f 4f 45 8c	 cmovg	 eax, DWORD PTR _nLongestButtonCaptionWidth$1$[ebp]
  00354	50		 push	 eax
  00355	e8 00 00 00 00	 call	 _CompensateXDPI
  0035a	83 c4 04	 add	 esp, 4
  0035d	89 45 8c	 mov	 DWORD PTR _nLongestButtonCaptionWidth$1$[ebp], eax
$LN21@MultiChoic:

; 6628 : 					nLongestButtonCaptionWidth, 
; 6629 : 					min (350, nMainTextLenInChars)));
; 6630 : 			}
; 6631 : 
; 6632 : 			// Get the window coords
; 6633 : 			GetWindowRect(hwndDlg, &wrec);

  00360	8b bd 74 ff ff
	ff		 mov	 edi, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  00366	8d 45 b0	 lea	 eax, DWORD PTR _wrec$[ebp]
  00369	50		 push	 eax
  0036a	57		 push	 edi
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 6634 : 
; 6635 : 			// Get the base button size
; 6636 : 			GetClientRect(GetDlgItem(hwndDlg, IDC_CHOICE1), &rec);

  00371	8d 45 c0	 lea	 eax, DWORD PTR _rec$[ebp]
  00374	50		 push	 eax
  00375	68 dd 13 00 00	 push	 5085			; 000013ddH
  0037a	57		 push	 edi
  0037b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00381	50		 push	 eax
  00382	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 6637 : 			nBaseButtonWidth = rec.right + 2;

  00388	8b 75 c8	 mov	 esi, DWORD PTR _rec$[ebp+8]

; 6638 : 			nBaseButtonHeight = rec.bottom + 2;

  0038b	8b 45 cc	 mov	 eax, DWORD PTR _rec$[ebp+12]
  0038e	83 c6 02	 add	 esi, 2
  00391	83 c0 02	 add	 eax, 2
  00394	89 b5 60 ff ff
	ff		 mov	 DWORD PTR _nBaseButtonWidth$1$[ebp], esi

; 6639 : 
; 6640 : 			// Increase in width based on the gfx length of the widest button caption
; 6641 : 			horizSubOffset = min (CompensateXDPI (500), max (0, nLongestButtonCaptionWidth + CompensateXDPI (50) - nBaseButtonWidth));

  0039a	6a 32		 push	 50			; 00000032H
  0039c	89 85 78 ff ff
	ff		 mov	 DWORD PTR _nBaseButtonHeight$1$[ebp], eax
  003a2	e8 00 00 00 00	 call	 _CompensateXDPI
  003a7	8b 4d 8c	 mov	 ecx, DWORD PTR _nLongestButtonCaptionWidth$1$[ebp]
  003aa	2b ce		 sub	 ecx, esi
  003ac	03 c1		 add	 eax, ecx
  003ae	33 c9		 xor	 ecx, ecx
  003b0	85 c0		 test	 eax, eax
  003b2	89 45 8c	 mov	 DWORD PTR tv790[ebp], eax
  003b5	8b f0		 mov	 esi, eax
  003b7	68 f4 01 00 00	 push	 500			; 000001f4H
  003bc	0f 48 f1	 cmovs	 esi, ecx
  003bf	e8 00 00 00 00	 call	 _CompensateXDPI
  003c4	83 c4 08	 add	 esp, 8
  003c7	89 45 88	 mov	 DWORD PTR _horizSubOffset$1$[ebp], eax
  003ca	3b c6		 cmp	 eax, esi
  003cc	7c 0f		 jl	 SHORT $LN50@MultiChoic
  003ce	8b 4d 8c	 mov	 ecx, DWORD PTR tv790[ebp]
  003d1	33 d2		 xor	 edx, edx
  003d3	85 c9		 test	 ecx, ecx
  003d5	8b c1		 mov	 eax, ecx
  003d7	0f 48 c2	 cmovs	 eax, edx
  003da	89 45 88	 mov	 DWORD PTR _horizSubOffset$1$[ebp], eax
$LN50@MultiChoic:

; 6642 : 
; 6643 : 			// Vertical "title bar" offset
; 6644 : 			GetClientRect(hwndDlg, &wtrec);

  003dd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetClientRect@8
  003e3	8d 45 90	 lea	 eax, DWORD PTR _wtrec$[ebp]
  003e6	50		 push	 eax
  003e7	57		 push	 edi
  003e8	ff d6		 call	 esi

; 6645 : 			vertOffset = wrec.bottom - wrec.top - wtrec.bottom - GetSystemMetrics(SM_CYFIXEDFRAME);

  003ea	6a 08		 push	 8
  003ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  003f2	8b 4d bc	 mov	 ecx, DWORD PTR _wrec$[ebp+12]
  003f5	2b 4d 9c	 sub	 ecx, DWORD PTR _wtrec$[ebp+12]
  003f8	2b 4d b4	 sub	 ecx, DWORD PTR _wrec$[ebp+4]
  003fb	2b c8		 sub	 ecx, eax

; 6646 : 
; 6647 : 			// Height/width of the message text
; 6648 : 			GetClientRect(GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG), &trec);

  003fd	8d 45 a0	 lea	 eax, DWORD PTR _trec$[ebp]
  00400	50		 push	 eax
  00401	68 dc 13 00 00	 push	 5084			; 000013dcH
  00406	57		 push	 edi
  00407	89 4d 84	 mov	 DWORD PTR _vertOffset$1$[ebp], ecx
  0040a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00410	50		 push	 eax
  00411	ff d6		 call	 esi
  00413	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]

; 6649 : 
; 6650 : 			// Determine the number of newlines contained in the message text
; 6651 : 			{
; 6652 : 				int64 offset = -1;

  00416	83 ce ff	 or	 esi, -1
  00419	8b 5d 80	 mov	 ebx, DWORD PTR tv829[ebp]
  0041c	99		 cdq
  0041d	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv689[ebp], eax
  00423	8b fa		 mov	 edi, edx
  00425	89 75 8c	 mov	 DWORD PTR _offset$2$[ebp], esi
  00428	0b c6		 or	 eax, esi
  0042a	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv688[ebp], edx
$LL9@MultiChoic:
  00430	85 db		 test	 ebx, ebx

; 6653 : 
; 6654 : 				do
; 6655 : 				{
; 6656 : 					offset = FindString ((char *) (bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1)), 

  00432	75 17		 jne	 SHORT $LN54@MultiChoic
  00434	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv813[ebp]
  0043a	ff 30		 push	 DWORD PTR [eax]
  0043c	e8 00 00 00 00	 call	 _GetString
  00441	8b c8		 mov	 ecx, eax
  00443	83 c4 04	 add	 esp, 4
  00446	8b 45 8c	 mov	 eax, DWORD PTR _offset$2$[ebp]
  00449	eb 08		 jmp	 SHORT $LN55@MultiChoic
$LN54@MultiChoic:
  0044b	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv812[ebp]
  00451	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN55@MultiChoic:
  00453	83 c6 01	 add	 esi, 1
  00456	83 d0 00	 adc	 eax, 0
  00459	50		 push	 eax
  0045a	56		 push	 esi
  0045b	6a 02		 push	 2
  0045d	57		 push	 edi
  0045e	ff b5 64 ff ff
	ff		 push	 DWORD PTR tv689[ebp]
  00464	68 00 00 00 00	 push	 OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  00469	51		 push	 ecx
  0046a	e8 00 00 00 00	 call	 _FindString

; 6657 : 						(char *) L"\n",
; 6658 : 						nMainTextLenInChars * 2, 
; 6659 : 						wcslen (L"\n") * 2, 
; 6660 : 						offset + 1);
; 6661 : 
; 6662 : 					newLineSeqCount++;

  0046f	ff 85 6c ff ff
	ff		 inc	 DWORD PTR _newLineSeqCount$1$[ebp]
  00475	8b f0		 mov	 esi, eax
  00477	8b c2		 mov	 eax, edx

; 6663 : 
; 6664 : 				} while (offset != -1);

  00479	8b ce		 mov	 ecx, esi
  0047b	23 c8		 and	 ecx, eax
  0047d	89 45 8c	 mov	 DWORD PTR _offset$2$[ebp], eax
  00480	83 c4 1c	 add	 esp, 28			; 0000001cH
  00483	83 f9 ff	 cmp	 ecx, -1
  00486	75 a8		 jne	 SHORT $LL9@MultiChoic
  00488	85 db		 test	 ebx, ebx

; 6665 : 			}
; 6666 : 
; 6667 : 			nTextGfxLineHeight = GetTextGfxHeight (GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG),

  0048a	75 12		 jne	 SHORT $LN56@MultiChoic
  0048c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv813[ebp]
  00492	ff 30		 push	 DWORD PTR [eax]
  00494	e8 00 00 00 00	 call	 _GetString
  00499	83 c4 04	 add	 esp, 4
  0049c	eb 08		 jmp	 SHORT $LN57@MultiChoic
$LN56@MultiChoic:
  0049e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv812[ebp]
  004a4	8b 00		 mov	 eax, DWORD PTR [eax]
$LN57@MultiChoic:
  004a6	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  004ac	8b bd 74 ff ff
	ff		 mov	 edi, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  004b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  004b8	50		 push	 eax
  004b9	68 dc 13 00 00	 push	 5084			; 000013dcH
  004be	57		 push	 edi
  004bf	ff d6		 call	 esi
  004c1	50		 push	 eax
  004c2	e8 00 00 00 00	 call	 _GetTextGfxHeight
  004c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ca	89 45 8c	 mov	 DWORD PTR _nTextGfxLineHeight$1$[ebp], eax
  004cd	85 db		 test	 ebx, ebx

; 6668 : 								bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1),
; 6669 : 								hUserFont);
; 6670 : 
; 6671 : 			vertMsgHeightOffset = ((GetTextGfxWidth (GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG),

  004cf	75 12		 jne	 SHORT $LN58@MultiChoic
  004d1	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv813[ebp]
  004d7	ff 30		 push	 DWORD PTR [eax]
  004d9	e8 00 00 00 00	 call	 _GetString
  004de	83 c4 04	 add	 esp, 4
  004e1	eb 08		 jmp	 SHORT $LN59@MultiChoic
$LN58@MultiChoic:
  004e3	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv812[ebp]
  004e9	8b 00		 mov	 eax, DWORD PTR [eax]
$LN59@MultiChoic:
  004eb	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  004f1	50		 push	 eax
  004f2	68 dc 13 00 00	 push	 5084			; 000013dcH
  004f7	57		 push	 edi
  004f8	ff d6		 call	 esi
  004fa	50		 push	 eax
  004fb	e8 00 00 00 00	 call	 _GetTextGfxWidth
  00500	8b 4d a8	 mov	 ecx, DWORD PTR _trec$[ebp+8]
  00503	03 4d 88	 add	 ecx, DWORD PTR _horizSubOffset$1$[ebp]
  00506	99		 cdq
  00507	f7 f9		 idiv	 ecx
  00509	8b 75 ac	 mov	 esi, DWORD PTR _trec$[ebp+12]

; 6672 : 								bResolve ? GetString(*(pStrOrig+1)) : *(pwStrOrig+1),
; 6673 : 								hUserFont) / (trec.right + horizSubOffset) + 1)	* nTextGfxLineHeight) - trec.bottom;
; 6674 : 
; 6675 : 			vertMsgHeightOffset = min (CompensateYDPI (350), vertMsgHeightOffset + newLineSeqCount * nTextGfxLineHeight + (trec.bottom + vertMsgHeightOffset) / 10);	// As reserve, we are adding 10% and the number of lines equal to the number of newlines in the message

  0050c	68 5e 01 00 00	 push	 350			; 0000015eH
  00511	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00514	0f af 5d 8c	 imul	 ebx, DWORD PTR _nTextGfxLineHeight$1$[ebp]
  00518	2b de		 sub	 ebx, esi
  0051a	e8 00 00 00 00	 call	 _CompensateYDPI
  0051f	8b f8		 mov	 edi, eax
  00521	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  00524	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00529	83 c4 10	 add	 esp, 16			; 00000010H
  0052c	f7 e9		 imul	 ecx
  0052e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _newLineSeqCount$1$[ebp]
  00534	0f af 45 8c	 imul	 eax, DWORD PTR _nTextGfxLineHeight$1$[ebp]
  00538	c1 fa 02	 sar	 edx, 2
  0053b	8b ca		 mov	 ecx, edx
  0053d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00540	03 ca		 add	 ecx, edx
  00542	03 cb		 add	 ecx, ebx
  00544	03 c1		 add	 eax, ecx

; 6676 : 
; 6677 : 			// Reduction in height according to the number of shown buttons
; 6678 : 			vertSubOffset = ((MAX_MULTI_CHOICES - nActiveChoices) * nBaseButtonHeight);

  00546	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0054b	3b f8		 cmp	 edi, eax
  0054d	0f 4c c7	 cmovl	 eax, edi
  00550	2b 8d 68 ff ff
	ff		 sub	 ecx, DWORD PTR _nActiveChoices$1$[ebp]
  00556	0f af 8d 78 ff
	ff ff		 imul	 ecx, DWORD PTR _nBaseButtonHeight$1$[ebp]
  0055d	89 45 8c	 mov	 DWORD PTR _vertMsgHeightOffset$2$[ebp], eax
  00560	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _vertSubOffset$1$[ebp], ecx

; 6679 : 
; 6680 : 			if (horizSubOffset > 0 
; 6681 : 				|| vertMsgHeightOffset > 0 
; 6682 : 				|| vertOffset > 0)

  00566	8b 4d 88	 mov	 ecx, DWORD PTR _horizSubOffset$1$[ebp]
  00569	85 c9		 test	 ecx, ecx
  0056b	7f 0e		 jg	 SHORT $LN23@MultiChoic
  0056d	85 c0		 test	 eax, eax
  0056f	7f 0a		 jg	 SHORT $LN23@MultiChoic
  00571	83 7d 84 00	 cmp	 DWORD PTR _vertOffset$1$[ebp], 0
  00575	0f 8e af 01 00
	00		 jle	 $LN99@MultiChoic
$LN23@MultiChoic:
  0057b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _nBaseButtonWidth$1$[ebp]

; 6683 : 			{
; 6684 : 				// Resize/move each button if necessary
; 6685 : 				for (nStr = 1; nStr < MAX_MULTI_CHOICES+1; nStr++)

  00581	bf 01 00 00 00	 mov	 edi, 1
  00586	8b 9d 74 ff ff
	ff		 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  0058c	03 c1		 add	 eax, ecx
  0058e	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv808[ebp], eax
$LL12@MultiChoic:

; 6686 : 				{
; 6687 : 					GetWindowRect(GetDlgItem(hwndDlg, nChoiceIDs[nStr]), &rec);

  00594	8b 74 bd d0	 mov	 esi, DWORD PTR _nChoiceIDs$[ebp+edi*4]
  00598	8d 45 c0	 lea	 eax, DWORD PTR _rec$[ebp]
  0059b	50		 push	 eax
  0059c	56		 push	 esi
  0059d	53		 push	 ebx
  0059e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  005a4	50		 push	 eax
  005a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 6688 : 
; 6689 : 					MoveWindow (GetDlgItem(hwndDlg, nChoiceIDs[nStr]),

  005ab	8b 45 c4	 mov	 eax, DWORD PTR _rec$[ebp+4]
  005ae	2b 45 b4	 sub	 eax, DWORD PTR _wrec$[ebp+4]
  005b1	2b 45 84	 sub	 eax, DWORD PTR _vertOffset$1$[ebp]
  005b4	03 45 8c	 add	 eax, DWORD PTR _vertMsgHeightOffset$2$[ebp]
  005b7	6a 01		 push	 1
  005b9	ff b5 78 ff ff
	ff		 push	 DWORD PTR _nBaseButtonHeight$1$[ebp]
  005bf	ff b5 60 ff ff
	ff		 push	 DWORD PTR tv808[ebp]
  005c5	50		 push	 eax
  005c6	6a 07		 push	 7
  005c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  005ce	8b 4d c0	 mov	 ecx, DWORD PTR _rec$[ebp]
  005d1	2b 4d b0	 sub	 ecx, DWORD PTR _wrec$[ebp]
  005d4	2b c8		 sub	 ecx, eax
  005d6	51		 push	 ecx
  005d7	56		 push	 esi
  005d8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  005de	53		 push	 ebx
  005df	ff d6		 call	 esi
  005e1	50		 push	 eax
  005e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  005e8	47		 inc	 edi
  005e9	83 ff 0b	 cmp	 edi, 11			; 0000000bH
  005ec	7c a6		 jl	 SHORT $LL12@MultiChoic

; 6690 : 						rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 6691 : 						rec.top - wrec.top - vertOffset + vertMsgHeightOffset,
; 6692 : 						nBaseButtonWidth + horizSubOffset,
; 6693 : 						nBaseButtonHeight,
; 6694 : 						TRUE);
; 6695 : 				}
; 6696 : 
; 6697 : 				// Resize/move the remaining GUI elements
; 6698 : 				GetWindowRect(GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG), &rec);

  005ee	8d 45 c0	 lea	 eax, DWORD PTR _rec$[ebp]
  005f1	50		 push	 eax
  005f2	68 dc 13 00 00	 push	 5084			; 000013dcH
  005f7	53		 push	 ebx
  005f8	ff d6		 call	 esi
  005fa	50		 push	 eax
  005fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 6699 : 				GetClientRect(GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG), &trec);

  00601	8d 45 a0	 lea	 eax, DWORD PTR _trec$[ebp]
  00604	50		 push	 eax
  00605	68 dc 13 00 00	 push	 5084			; 000013dcH
  0060a	53		 push	 ebx
  0060b	ff d6		 call	 esi
  0060d	50		 push	 eax
  0060e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 6700 : 				MoveWindow (GetDlgItem(hwndDlg, IDC_MULTI_CHOICE_MSG),

  00614	8b 4d 8c	 mov	 ecx, DWORD PTR _vertMsgHeightOffset$2$[ebp]
  00617	8b 45 ac	 mov	 eax, DWORD PTR _trec$[ebp+12]
  0061a	83 c1 02	 add	 ecx, 2
  0061d	8b 55 88	 mov	 edx, DWORD PTR _horizSubOffset$1$[ebp]
  00620	03 c1		 add	 eax, ecx
  00622	8b 7d 84	 mov	 edi, DWORD PTR _vertOffset$1$[ebp]
  00625	83 c2 02	 add	 edx, 2
  00628	6a 01		 push	 1
  0062a	50		 push	 eax
  0062b	8b 45 a8	 mov	 eax, DWORD PTR _trec$[ebp+8]
  0062e	03 c2		 add	 eax, edx
  00630	50		 push	 eax
  00631	8b 45 c4	 mov	 eax, DWORD PTR _rec$[ebp+4]
  00634	2b 45 b4	 sub	 eax, DWORD PTR _wrec$[ebp+4]
  00637	2b c7		 sub	 eax, edi
  00639	50		 push	 eax
  0063a	6a 07		 push	 7
  0063c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00642	8b 4d c0	 mov	 ecx, DWORD PTR _rec$[ebp]
  00645	2b 4d b0	 sub	 ecx, DWORD PTR _wrec$[ebp]
  00648	2b c8		 sub	 ecx, eax
  0064a	51		 push	 ecx
  0064b	68 dc 13 00 00	 push	 5084			; 000013dcH
  00650	53		 push	 ebx
  00651	ff d6		 call	 esi
  00653	50		 push	 eax
  00654	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 6701 : 					rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 6702 : 					rec.top - wrec.top - vertOffset,
; 6703 : 					trec.right + 2 + horizSubOffset,
; 6704 : 					trec.bottom + 2 + vertMsgHeightOffset,
; 6705 : 					TRUE);
; 6706 : 
; 6707 : 				GetWindowRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR1), &rec);

  0065a	8d 45 c0	 lea	 eax, DWORD PTR _rec$[ebp]
  0065d	50		 push	 eax
  0065e	68 e7 13 00 00	 push	 5095			; 000013e7H
  00663	53		 push	 ebx
  00664	ff d6		 call	 esi
  00666	50		 push	 eax
  00667	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 6708 : 				GetClientRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR1), &trec);

  0066d	8d 45 a0	 lea	 eax, DWORD PTR _trec$[ebp]
  00670	50		 push	 eax
  00671	68 e7 13 00 00	 push	 5095			; 000013e7H
  00676	53		 push	 ebx
  00677	ff d6		 call	 esi
  00679	50		 push	 eax
  0067a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 6709 : 				MoveWindow (GetDlgItem(hwndDlg, IDC_MC_DLG_HR1),

  00680	8b 45 ac	 mov	 eax, DWORD PTR _trec$[ebp+12]
  00683	8b 4d 88	 mov	 ecx, DWORD PTR _horizSubOffset$1$[ebp]
  00686	83 c0 02	 add	 eax, 2
  00689	6a 01		 push	 1
  0068b	50		 push	 eax
  0068c	8b 45 a8	 mov	 eax, DWORD PTR _trec$[ebp+8]
  0068f	83 c1 02	 add	 ecx, 2
  00692	03 c1		 add	 eax, ecx
  00694	50		 push	 eax
  00695	8b 45 c4	 mov	 eax, DWORD PTR _rec$[ebp+4]
  00698	2b 45 b4	 sub	 eax, DWORD PTR _wrec$[ebp+4]
  0069b	2b c7		 sub	 eax, edi
  0069d	50		 push	 eax
  0069e	6a 07		 push	 7
  006a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  006a6	8b 4d c0	 mov	 ecx, DWORD PTR _rec$[ebp]
  006a9	2b 4d b0	 sub	 ecx, DWORD PTR _wrec$[ebp]
  006ac	2b c8		 sub	 ecx, eax
  006ae	51		 push	 ecx
  006af	68 e7 13 00 00	 push	 5095			; 000013e7H
  006b4	53		 push	 ebx
  006b5	ff d6		 call	 esi
  006b7	50		 push	 eax
  006b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 6710 : 					rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 6711 : 					rec.top - wrec.top - vertOffset,
; 6712 : 					trec.right + 2 + horizSubOffset,
; 6713 : 					trec.bottom + 2,
; 6714 : 					TRUE);
; 6715 : 				
; 6716 : 				GetWindowRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR2), &rec);

  006be	8d 45 c0	 lea	 eax, DWORD PTR _rec$[ebp]
  006c1	50		 push	 eax
  006c2	68 e8 13 00 00	 push	 5096			; 000013e8H
  006c7	53		 push	 ebx
  006c8	ff d6		 call	 esi
  006ca	50		 push	 eax
  006cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 6717 : 				GetClientRect(GetDlgItem(hwndDlg, IDC_MC_DLG_HR2), &trec);

  006d1	8d 45 a0	 lea	 eax, DWORD PTR _trec$[ebp]
  006d4	50		 push	 eax
  006d5	68 e8 13 00 00	 push	 5096			; 000013e8H
  006da	53		 push	 ebx
  006db	ff d6		 call	 esi
  006dd	50		 push	 eax
  006de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 6718 : 				MoveWindow (GetDlgItem(hwndDlg, IDC_MC_DLG_HR2),

  006e4	8b 45 ac	 mov	 eax, DWORD PTR _trec$[ebp+12]
  006e7	8b 4d 88	 mov	 ecx, DWORD PTR _horizSubOffset$1$[ebp]
  006ea	83 c0 02	 add	 eax, 2
  006ed	6a 01		 push	 1
  006ef	50		 push	 eax
  006f0	8b 45 a8	 mov	 eax, DWORD PTR _trec$[ebp+8]
  006f3	83 c1 02	 add	 ecx, 2
  006f6	03 c1		 add	 eax, ecx
  006f8	50		 push	 eax
  006f9	8b 45 c4	 mov	 eax, DWORD PTR _rec$[ebp+4]
  006fc	2b 45 b4	 sub	 eax, DWORD PTR _wrec$[ebp+4]
  006ff	2b c7		 sub	 eax, edi
  00701	03 45 8c	 add	 eax, DWORD PTR _vertMsgHeightOffset$2$[ebp]
  00704	50		 push	 eax
  00705	6a 07		 push	 7
  00707	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  0070d	8b 4d c0	 mov	 ecx, DWORD PTR _rec$[ebp]
  00710	2b 4d b0	 sub	 ecx, DWORD PTR _wrec$[ebp]
  00713	2b c8		 sub	 ecx, eax
  00715	51		 push	 ecx
  00716	68 e8 13 00 00	 push	 5096			; 000013e8H
  0071b	53		 push	 ebx
  0071c	ff d6		 call	 esi
  0071e	50		 push	 eax
  0071f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00725	8b 45 8c	 mov	 eax, DWORD PTR _vertMsgHeightOffset$2$[ebp]
  00728	eb 06		 jmp	 SHORT $LN22@MultiChoic
$LN99@MultiChoic:
  0072a	8b 9d 74 ff ff
	ff		 mov	 ebx, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
$LN22@MultiChoic:

; 6719 : 					rec.left - wrec.left - GetSystemMetrics(SM_CXFIXEDFRAME),
; 6720 : 					rec.top - wrec.top - vertOffset + vertMsgHeightOffset,
; 6721 : 					trec.right + 2 + horizSubOffset,
; 6722 : 					trec.bottom + 2,
; 6723 : 					TRUE);
; 6724 : 			}
; 6725 : 
; 6726 : 			// Resize the window according to number of shown buttons and the longest button caption
; 6727 : 			MoveWindow (hwndDlg,

  00730	8b 4d bc	 mov	 ecx, DWORD PTR _wrec$[ebp+12]
  00733	8b d0		 mov	 edx, eax
  00735	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _vertSubOffset$1$[ebp]
  0073b	41		 inc	 ecx
  0073c	8b 7d b0	 mov	 edi, DWORD PTR _wrec$[ebp]
  0073f	2b d0		 sub	 edx, eax
  00741	2b 55 b4	 sub	 edx, DWORD PTR _wrec$[ebp+4]
  00744	03 ca		 add	 ecx, edx
  00746	99		 cdq
  00747	6a 01		 push	 1
  00749	51		 push	 ecx
  0074a	8b 4d b8	 mov	 ecx, DWORD PTR _wrec$[ebp+8]
  0074d	2b c2		 sub	 eax, edx
  0074f	2b cf		 sub	 ecx, edi
  00751	03 4d 88	 add	 ecx, DWORD PTR _horizSubOffset$1$[ebp]
  00754	51		 push	 ecx
  00755	8b c8		 mov	 ecx, eax
  00757	8b 45 8c	 mov	 eax, DWORD PTR _vertMsgHeightOffset$2$[ebp]
  0075a	99		 cdq
  0075b	2b c2		 sub	 eax, edx
  0075d	d1 f9		 sar	 ecx, 1
  0075f	d1 f8		 sar	 eax, 1
  00761	2b c8		 sub	 ecx, eax
  00763	8b 45 88	 mov	 eax, DWORD PTR _horizSubOffset$1$[ebp]
  00766	03 4d b4	 add	 ecx, DWORD PTR _wrec$[ebp+4]
  00769	99		 cdq
  0076a	2b c2		 sub	 eax, edx
  0076c	d1 f8		 sar	 eax, 1
  0076e	51		 push	 ecx
  0076f	2b f8		 sub	 edi, eax
  00771	57		 push	 edi
  00772	53		 push	 ebx
  00773	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24
  00779	5e		 pop	 esi
  0077a	5f		 pop	 edi

; 6728 : 				wrec.left - horizSubOffset / 2,
; 6729 : 				wrec.top + vertSubOffset / 2 - vertMsgHeightOffset / 2,
; 6730 : 				wrec.right - wrec.left + horizSubOffset,
; 6731 : 				wrec.bottom - wrec.top - vertSubOffset + 1 + vertMsgHeightOffset,
; 6732 : 				TRUE);
; 6733 : 
; 6734 : 			return 1;

  0077b	b8 01 00 00 00	 mov	 eax, 1
  00780	5b		 pop	 ebx

; 6761 : }

  00781	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00784	33 cd		 xor	 ecx, ebp
  00786	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0078b	8b e5		 mov	 esp, ebp
  0078d	5d		 pop	 ebp
  0078e	c2 10 00	 ret	 16			; 00000010H
$LN28@MultiChoic:

; 6751 : 			}
; 6752 : 		}
; 6753 : 		break;
; 6754 : 
; 6755 : 	case WM_CLOSE:
; 6756 : 		EndDialog (hwndDlg, 0);

  00791	6a 00		 push	 0
$LN101@MultiChoic:
  00793	53		 push	 ebx
  00794	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 6761 : }

  0079a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0079d	8b c7		 mov	 eax, edi
  0079f	5f		 pop	 edi
  007a0	33 cd		 xor	 ecx, ebp
  007a2	5b		 pop	 ebx
  007a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007a8	8b e5		 mov	 esp, ebp
  007aa	5d		 pop	 ebp
  007ab	c2 10 00	 ret	 16			; 00000010H
_MultiChoiceDialogProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetLegalNotices
_TEXT	SEGMENT
_GetLegalNotices PROC					; COMDAT

; 3650 : 	static char *resource;
; 3651 : 	static DWORD size;
; 3652 : 	char *buf = NULL;
; 3653 : 
; 3654 : 	if (resource == NULL)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?resource@?1??GetLegalNotices@@9@4PADA, 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	75 40		 jne	 SHORT $LN9@GetLegalNo

; 3655 : 		resource = (char *) MapResource ("Text", IDR_LICENSE, &size);

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_04OJAHODMC@Text?$AA@
  00010	68 03 02 00 00	 push	 515			; 00000203H
  00015	6a 00		 push	 0
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  0001d	8b f0		 mov	 esi, eax
  0001f	56		 push	 esi
  00020	6a 00		 push	 0
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  00028	56		 push	 esi
  00029	6a 00		 push	 0
  0002b	8b f8		 mov	 edi, eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8
  00033	57		 push	 edi
  00034	a3 00 00 00 00	 mov	 DWORD PTR ?size@?1??GetLegalNotices@@9@4KA, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  0003f	a3 00 00 00 00	 mov	 DWORD PTR ?resource@?1??GetLegalNotices@@9@4PADA, eax

; 3656 : 
; 3657 : 	if (resource != NULL)

  00044	85 c0		 test	 eax, eax
  00046	75 03		 jne	 SHORT $LN9@GetLegalNo
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi

; 3668 : }

  0004a	c3		 ret	 0
$LN9@GetLegalNo:

; 3658 : 	{
; 3659 : 		buf = (char *) malloc (size + 1);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?size@?1??GetLegalNotices@@9@4KA
  00050	40		 inc	 eax
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _malloc
  00057	8b f8		 mov	 edi, eax
  00059	83 c4 04	 add	 esp, 4

; 3660 : 		if (buf != NULL)

  0005c	85 ff		 test	 edi, edi
  0005e	74 1a		 je	 SHORT $LN10@GetLegalNo

; 3661 : 		{
; 3662 : 			memcpy (buf, resource, size);

  00060	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?size@?1??GetLegalNotices@@9@4KA
  00066	56		 push	 esi
  00067	ff 35 00 00 00
	00		 push	 DWORD PTR ?resource@?1??GetLegalNotices@@9@4PADA
  0006d	57		 push	 edi
  0006e	e8 00 00 00 00	 call	 _memcpy
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3663 : 			buf[size] = 0;

  00076	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
$LN10@GetLegalNo:

; 3664 : 		}
; 3665 : 	}
; 3666 : 
; 3667 : 	return buf;

  0007a	8b c7		 mov	 eax, edi
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 3668 : }

  0007e	c3		 ret	 0
_GetLegalNotices ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _TextInfoDialogBoxDlgProc@16
_TEXT	SEGMENT
$T1 = -52						; size = 24
$T2 = -52						; size = 24
$T3 = -52						; size = 24
$T4 = -28						; size = 24
$T5 = -28						; size = 24
$T6 = -28						; size = 24
$T7 = -28						; size = 24
$T8 = -28						; size = 24
$T9 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_TextInfoDialogBoxDlgProc@16 PROC			; COMDAT

; 3513 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3514 : 	WORD lw = LOWORD (wParam);
; 3515 : 	static int nID = 0;
; 3516 : 
; 3517 : 	switch (msg)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00017	57		 push	 edi
  00018	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  0001d	0f 87 73 02 00
	00		 ja	 $LN33@TextInfoDi
  00023	0f 84 c8 00 00
	00		 je	 $LN16@TextInfoDi
  00029	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002c	0f 84 ac 00 00
	00		 je	 $LN31@TextInfoDi
  00032	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00037	0f 85 0c 02 00
	00		 jne	 $LN19@TextInfoDi

; 3518 : 	{
; 3519 : 	case WM_INITDIALOG:
; 3520 : 		{
; 3521 : 			nID = (int) lParam;

  0003d	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00040	53		 push	 ebx

; 3522 : 
; 3523 : 			// Left margin for rich edit text field
; 3524 : 			SendMessage (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), EM_SETMARGINS, (WPARAM) EC_LEFTMARGIN, (LPARAM) CompensateXDPI (4));

  00041	6a 04		 push	 4
  00043	a3 00 00 00 00	 mov	 DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA, eax
  00048	e8 00 00 00 00	 call	 _CompensateXDPI
  0004d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	6a 01		 push	 1
  00059	68 d3 00 00 00	 push	 211			; 000000d3H
  0005e	68 91 13 00 00	 push	 5009			; 00001391H
  00063	56		 push	 esi
  00064	ff d7		 call	 edi
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3525 : 
; 3526 : 			ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_HIDE);

  0006d	6a 00		 push	 0
  0006f	68 8d 13 00 00	 push	 5005			; 0000138dH
  00074	56		 push	 esi
  00075	ff d7		 call	 edi
  00077	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__ShowWindow@8
  0007d	50		 push	 eax
  0007e	ff d3		 call	 ebx

; 3527 : 
; 3528 : 			switch (nID)

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
  00085	83 f8 04	 cmp	 eax, 4
  00088	77 2f		 ja	 SHORT $LN4@TextInfoDi
  0008a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN183@TextInfoDi[eax*4]
$LN11@TextInfoDi:

; 3529 : 			{
; 3530 : 			case GST_TBXID_LEGAL_NOTICES:
; 3531 : 				LocalizeDialog (hwndDlg, "LEGAL_NOTICES_DLG_TITLE");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 _LocalizeDialog
  0009c	83 c4 08	 add	 esp, 8

; 3532 : 				break;
; 3533 : 
; 3534 : 			case GST_TBXID_SYS_ENCRYPTION_PRETEST:
; 3535 : 				LocalizeDialog (hwndDlg, NULL);
; 3536 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);
; 3537 : 				break;

  0009f	eb 18		 jmp	 SHORT $LN4@TextInfoDi
$LN15@TextInfoDi:

; 3538 : 
; 3539 : 			case GST_TBXID_SYS_ENC_RESCUE_DISK:
; 3540 : 				LocalizeDialog (hwndDlg, NULL);
; 3541 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);
; 3542 : 				break;
; 3543 : 
; 3544 : 			case GST_TBXID_DECOY_OS_INSTRUCTIONS:
; 3545 : 				LocalizeDialog (hwndDlg, NULL);
; 3546 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);
; 3547 : 				break;
; 3548 : 
; 3549 : 			case GST_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS:
; 3550 : 				LocalizeDialog (hwndDlg, NULL);

  000a1	6a 00		 push	 0
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _LocalizeDialog
  000a9	83 c4 08	 add	 esp, 8

; 3551 : 				ShowWindow(GetDlgItem(hwndDlg, IDC_PRINT), SW_SHOW);

  000ac	6a 05		 push	 5
  000ae	68 8d 13 00 00	 push	 5005			; 0000138dH
  000b3	56		 push	 esi
  000b4	ff d7		 call	 edi
  000b6	50		 push	 eax
  000b7	ff d3		 call	 ebx
$LN4@TextInfoDi:

; 3552 : 				break;
; 3553 : 			}
; 3554 : 
; 3555 : 			SendMessage (hwndDlg, GST_APPMSG_LOAD_TEXT_BOX_CONTENT, 0, 0);

  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	68 67 80 00 00	 push	 32871			; 00008067H
  000c2	56		 push	 esi
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000c9	5b		 pop	 ebx
  000ca	5f		 pop	 edi

; 3556 : 		}
; 3557 : 		return 0;

  000cb	33 c0		 xor	 eax, eax
  000cd	5e		 pop	 esi

; 3635 : 	}
; 3636 : 
; 3637 : 	return 0;
; 3638 : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 10 00	 ret	 16			; 00000010H
$LN31@TextInfoDi:

; 3626 : 				break;
; 3627 : 			}
; 3628 : 		}
; 3629 : 		return 1;
; 3630 : 
; 3631 : 	case WM_CLOSE:
; 3632 : 		NormalCursor ();

  000de	e8 00 00 00 00	 call	 _NormalCursor

; 3633 : 		EndDialog (hwndDlg, 0);

  000e3	6a 00		 push	 0
  000e5	56		 push	 esi
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 3634 : 		return 1;

  000ec	e9 89 02 00 00	 jmp	 $LN8@TextInfoDi
$LN16@TextInfoDi:

; 3558 : 
; 3559 : 	case WM_COMMAND:
; 3560 : 		if (lw == IDOK || lw == IDCANCEL)

  000f1	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  000f4	66 83 f8 01	 cmp	 ax, 1
  000f8	0f 84 5f 01 00
	00		 je	 $LN18@TextInfoDi
  000fe	66 83 f8 02	 cmp	 ax, 2
  00102	0f 84 55 01 00
	00		 je	 $LN18@TextInfoDi

; 3565 : 		}
; 3566 : 
; 3567 : 		if (lw == IDC_PRINT)

  00108	b9 8d 13 00 00	 mov	 ecx, 5005		; 0000138dH
  0010d	66 3b c1	 cmp	 ax, cx
  00110	0f 85 33 01 00
	00		 jne	 $LN19@TextInfoDi

; 3568 : 		{
; 3569 : 			switch (nID)

  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
  0011b	48		 dec	 eax
  0011c	83 f8 03	 cmp	 eax, 3
  0011f	0f 87 55 02 00
	00		 ja	 $LN8@TextInfoDi
  00125	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN184@TextInfoDi[eax*4]
$LN20@TextInfoDi:

; 3570 : 			{
; 3571 : 			case GST_TBXID_SYS_ENCRYPTION_PRETEST:
; 3572 : 				PrintHardCopyTextUTF16 ((wchar_t *) GetSysEncryptionPretestInfo2String ().c_str(), "Pre-Boot Troubleshooting", GetSysEncryptionPretestInfo2String ().length () * 2);

  0012c	8d 45 e4	 lea	 eax, DWORD PTR $T9[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
  00135	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00138	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
  00141	8b c8		 mov	 ecx, eax
  00143	83 c4 08	 add	 esp, 8
  00146	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  0014a	72 02		 jb	 SHORT $LN62@TextInfoDi
  0014c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN62@TextInfoDi:
  0014e	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OAHHFEJL@Pre?9Boot?5Troubleshooting?$AA@
  00157	51		 push	 ecx
  00158	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  00163	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 3610 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetSysEncryptionPretestInfo2String ().c_str());

  00168	8d 4d e4	 lea	 ecx, DWORD PTR $T6[ebp]
  0016b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 3611 : 				break;

  00170	e9 05 02 00 00	 jmp	 $LN8@TextInfoDi
$LN21@TextInfoDi:

; 3573 : 				break;
; 3574 : 
; 3575 : 			case GST_TBXID_SYS_ENC_RESCUE_DISK:
; 3576 : 				PrintHardCopyTextUTF16 ((wchar_t *) GetRescueDiskHelpString ().c_str(), "GostCrypt Rescue Disk Help", GetRescueDiskHelpString ().length () * 2);

  00175	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
  0017e	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00181	8d 45 e4	 lea	 eax, DWORD PTR $T8[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString
  0018a	8b c8		 mov	 ecx, eax
  0018c	83 c4 08	 add	 esp, 8
  0018f	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00193	72 02		 jb	 SHORT $LN91@TextInfoDi
  00195	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN91@TextInfoDi:
  00197	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LGNEPEIP@GostCrypt?5Rescue?5Disk?5Help?$AA@
  001a0	51		 push	 ecx
  001a1	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  001a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a9	8d 4d e4	 lea	 ecx, DWORD PTR $T8[ebp]
  001ac	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001b1	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]

; 3610 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetSysEncryptionPretestInfo2String ().c_str());

  001b4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 3611 : 				break;

  001b9	e9 bc 01 00 00	 jmp	 $LN8@TextInfoDi
$LN22@TextInfoDi:

; 3577 : 				break;
; 3578 : 
; 3579 : 			case GST_TBXID_DECOY_OS_INSTRUCTIONS:
; 3580 : 				PrintHardCopyTextUTF16 ((wchar_t *) GetDecoyOsInstructionsString ().c_str(), "How to Create Decoy OS", GetDecoyOsInstructionsString ().length () * 2);

  001be	8d 45 cc	 lea	 eax, DWORD PTR $T1[ebp]
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
  001c7	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  001ca	8d 45 e4	 lea	 eax, DWORD PTR $T7[ebp]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString
  001d3	8b c8		 mov	 ecx, eax
  001d5	83 c4 08	 add	 esp, 8
  001d8	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  001dc	72 02		 jb	 SHORT $LN120@TextInfoDi
  001de	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN120@TextInfoDi:
  001e0	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]
  001e3	50		 push	 eax
  001e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DOMMMACL@How?5to?5Create?5Decoy?5OS?$AA@
  001e9	51		 push	 ecx
  001ea	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f2	8d 4d e4	 lea	 ecx, DWORD PTR $T7[ebp]
  001f5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001fa	8d 4d cc	 lea	 ecx, DWORD PTR $T1[ebp]

; 3610 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetSysEncryptionPretestInfo2String ().c_str());

  001fd	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 3611 : 				break;

  00202	e9 73 01 00 00	 jmp	 $LN8@TextInfoDi
$LN23@TextInfoDi:

; 3581 : 				break;
; 3582 : 
; 3583 : 			case GST_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS:
; 3584 : 				PrintHardCopyTextUTF16 (GetString ("EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS"), "How to Remove Extra Boot Partition", wcslen (GetString ("EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS")) * 2);

  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
  0020c	e8 00 00 00 00	 call	 _GetString
  00211	83 c4 04	 add	 esp, 4
  00214	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL175@TextInfoDi:
  00217	66 8b 08	 mov	 cx, WORD PTR [eax]
  0021a	83 c0 02	 add	 eax, 2
  0021d	66 85 c9	 test	 cx, cx
  00220	75 f5		 jne	 SHORT $LL175@TextInfoDi
  00222	2b c2		 sub	 eax, edx
  00224	d1 f8		 sar	 eax, 1
  00226	03 c0		 add	 eax, eax
  00228	50		 push	 eax
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IBNJCEOK@How?5to?5Remove?5Extra?5Boot?5Partiti@
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
  00233	e8 00 00 00 00	 call	 _GetString
  00238	83 c4 04	 add	 esp, 4
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 _PrintHardCopyTextUTF16
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3585 : 				break;
; 3586 : 			}
; 3587 : 			return 1;

  00244	e9 31 01 00 00	 jmp	 $LN8@TextInfoDi
$LN19@TextInfoDi:
  00249	5f		 pop	 edi

; 3588 : 		}
; 3589 : 
; 3590 : 		return 0;

  0024a	33 c0		 xor	 eax, eax
  0024c	5e		 pop	 esi

; 3635 : 	}
; 3636 : 
; 3637 : 	return 0;
; 3638 : }

  0024d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00250	33 cd		 xor	 ecx, ebp
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 10 00	 ret	 16			; 00000010H
$LN18@TextInfoDi:

; 3561 : 		{
; 3562 : 			NormalCursor ();

  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  00262	85 c0		 test	 eax, eax
  00264	75 11		 jne	 SHORT $LN35@TextInfoDi
  00266	68 00 7f 00 00	 push	 32512			; 00007f00H
  0026b	50		 push	 eax
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00272	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN35@TextInfoDi:
  00277	50		 push	 eax
  00278	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 3563 : 			EndDialog (hwndDlg, 0);

  0027e	6a 00		 push	 0
  00280	56		 push	 esi
  00281	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor
  0028b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 3564 : 			return 1;

  00291	e9 e4 00 00 00	 jmp	 $LN8@TextInfoDi
$LN33@TextInfoDi:

; 3514 : 	WORD lw = LOWORD (wParam);
; 3515 : 	static int nID = 0;
; 3516 : 
; 3517 : 	switch (msg)

  00296	3d 67 80 00 00	 cmp	 eax, 32871		; 00008067H
  0029b	75 ac		 jne	 SHORT $LN19@TextInfoDi

; 3591 : 
; 3592 : 	case GST_APPMSG_LOAD_TEXT_BOX_CONTENT:
; 3593 : 		{
; 3594 : 			char *r = NULL;
; 3595 : 
; 3596 : 			switch (nID)

  0029d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nID@?1??TextInfoDialogBoxDlgProc@@9@16@4HA
  002a2	83 f8 04	 cmp	 eax, 4
  002a5	0f 87 cf 00 00
	00		 ja	 $LN8@TextInfoDi
  002ab	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN185@TextInfoDi[eax*4]
$LN25@TextInfoDi:

; 3597 : 			{
; 3598 : 			case GST_TBXID_LEGAL_NOTICES:
; 3599 : 				LocalizeDialog (hwndDlg, "LEGAL_NOTICES_DLG_TITLE");

  002b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OOMIJPBL@LEGAL_NOTICES_DLG_TITLE?$AA@
  002b7	56		 push	 esi
  002b8	e8 00 00 00 00	 call	 _LocalizeDialog
  002bd	83 c4 08	 add	 esp, 8

; 3600 : 				r = GetLegalNotices ();

  002c0	e8 00 00 00 00	 call	 _GetLegalNotices
  002c5	8b f8		 mov	 edi, eax

; 3601 : 				if (r != NULL)

  002c7	85 ff		 test	 edi, edi
  002c9	0f 84 ab 00 00
	00		 je	 $LN8@TextInfoDi

; 3602 : 				{
; 3603 : 					SetWindowText (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), r);

  002cf	57		 push	 edi
  002d0	68 91 13 00 00	 push	 5009			; 00001391H
  002d5	56		 push	 esi
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  002dc	50		 push	 eax
  002dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 3604 : 					free (r);

  002e3	57		 push	 edi
  002e4	e8 00 00 00 00	 call	 _free
  002e9	83 c4 04	 add	 esp, 4

; 3605 : 				}
; 3606 : 				break;

  002ec	e9 89 00 00 00	 jmp	 $LN8@TextInfoDi
$LN27@TextInfoDi:

; 3607 : 
; 3608 : 			case GST_TBXID_SYS_ENCRYPTION_PRETEST:
; 3609 : 				LocalizeDialog (hwndDlg, NULL);

  002f1	6a 00		 push	 0
  002f3	56		 push	 esi
  002f4	e8 00 00 00 00	 call	 _LocalizeDialog

; 3610 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetSysEncryptionPretestInfo2String ().c_str());

  002f9	8d 45 e4	 lea	 eax, DWORD PTR $T6[ebp]
  002fc	50		 push	 eax
  002fd	e8 00 00 00 00	 call	 ?GetSysEncryptionPretestInfo2String@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetSysEncryptionPretestInfo2String
$LN181@TextInfoDi:
  00302	83 c4 0c	 add	 esp, 12			; 0000000cH
  00305	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00309	72 02		 jb	 SHORT $LN137@TextInfoDi
  0030b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN137@TextInfoDi:
  0030d	50		 push	 eax
  0030e	68 91 13 00 00	 push	 5009			; 00001391H
  00313	56		 push	 esi
  00314	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0031a	50		 push	 eax
  0031b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
  00321	8d 4d e4	 lea	 ecx, DWORD PTR $T6[ebp]
  00324	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 3611 : 				break;

  00329	eb 4f		 jmp	 SHORT $LN8@TextInfoDi
$LN28@TextInfoDi:

; 3612 : 
; 3613 : 			case GST_TBXID_SYS_ENC_RESCUE_DISK:
; 3614 : 				LocalizeDialog (hwndDlg, NULL);

  0032b	6a 00		 push	 0
  0032d	56		 push	 esi
  0032e	e8 00 00 00 00	 call	 _LocalizeDialog

; 3615 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetRescueDiskHelpString ().c_str());

  00333	8d 45 e4	 lea	 eax, DWORD PTR $T5[ebp]
  00336	50		 push	 eax
  00337	e8 00 00 00 00	 call	 ?GetRescueDiskHelpString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetRescueDiskHelpString

; 3616 : 				break;

  0033c	eb c4		 jmp	 SHORT $LN181@TextInfoDi
$LN29@TextInfoDi:

; 3617 : 
; 3618 : 			case GST_TBXID_DECOY_OS_INSTRUCTIONS:
; 3619 : 				LocalizeDialog (hwndDlg, NULL);

  0033e	6a 00		 push	 0
  00340	56		 push	 esi
  00341	e8 00 00 00 00	 call	 _LocalizeDialog

; 3620 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), (wchar_t *) GetDecoyOsInstructionsString ().c_str());

  00346	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?GetDecoyOsInstructionsString@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; GetDecoyOsInstructionsString

; 3621 : 				break;

  0034f	eb b1		 jmp	 SHORT $LN181@TextInfoDi
$LN30@TextInfoDi:

; 3622 : 
; 3623 : 			case GST_TBXID_EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS:
; 3624 : 				LocalizeDialog (hwndDlg, NULL);

  00351	6a 00		 push	 0
  00353	56		 push	 esi
  00354	e8 00 00 00 00	 call	 _LocalizeDialog

; 3625 : 				SetWindowTextW (GetDlgItem (hwndDlg, IDC_INFO_BOX_TEXT), GetString ("EXTRA_BOOT_PARTITION_REMOVAL_INSTRUCTIONS"));

  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GKLMBFMH@EXTRA_BOOT_PARTITION_REMOVAL_INS@
  0035e	e8 00 00 00 00	 call	 _GetString
  00363	83 c4 0c	 add	 esp, 12			; 0000000cH
  00366	50		 push	 eax
  00367	68 91 13 00 00	 push	 5009			; 00001391H
  0036c	56		 push	 esi
  0036d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00373	50		 push	 eax
  00374	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextW@8
$LN8@TextInfoDi:

; 3635 : 	}
; 3636 : 
; 3637 : 	return 0;
; 3638 : }

  0037a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037d	b8 01 00 00 00	 mov	 eax, 1
  00382	5f		 pop	 edi
  00383	33 cd		 xor	 ecx, ebp
  00385	5e		 pop	 esi
  00386	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038b	8b e5		 mov	 esp, ebp
  0038d	5d		 pop	 ebp
  0038e	c2 10 00	 ret	 16			; 00000010H
  00391	0f 1f 00	 npad	 3
$LN183@TextInfoDi:
  00394	00 00 00 00	 DD	 $LN11@TextInfoDi
  00398	00 00 00 00	 DD	 $LN15@TextInfoDi
  0039c	00 00 00 00	 DD	 $LN15@TextInfoDi
  003a0	00 00 00 00	 DD	 $LN15@TextInfoDi
  003a4	00 00 00 00	 DD	 $LN15@TextInfoDi
$LN184@TextInfoDi:
  003a8	00 00 00 00	 DD	 $LN20@TextInfoDi
  003ac	00 00 00 00	 DD	 $LN21@TextInfoDi
  003b0	00 00 00 00	 DD	 $LN22@TextInfoDi
  003b4	00 00 00 00	 DD	 $LN23@TextInfoDi
$LN185@TextInfoDi:
  003b8	00 00 00 00	 DD	 $LN25@TextInfoDi
  003bc	00 00 00 00	 DD	 $LN27@TextInfoDi
  003c0	00 00 00 00	 DD	 $LN28@TextInfoDi
  003c4	00 00 00 00	 DD	 $LN29@TextInfoDi
  003c8	00 00 00 00	 DD	 $LN30@TextInfoDi
_TextInfoDialogBoxDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _TextInfoDialogBox
_TEXT	SEGMENT
_nID$ = 8						; size = 4
_TextInfoDialogBox PROC					; COMDAT

; 3497 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3498 : 	return DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_TEXT_INFO_DIALOG_BOX_DLG), MainDlg, (DLGPROC) TextInfoDialogBoxDlgProc, (LPARAM) nID);

  00003	ff 75 08	 push	 DWORD PTR _nID$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET _TextInfoDialogBoxDlgProc@16
  0000b	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00011	68 93 13 00 00	 push	 5011			; 00001393H
  00016	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamW@20

; 3499 : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_TextInfoDialogBox ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RawDevicesDlgProc@16
_TEXT	SEGMENT
_li$2 = -2768						; size = 52
_li$3 = -2716						; size = 52
_li$4 = -2664						; size = 52
_li$5 = -2612						; size = 52
_li$6 = -2560						; size = 52
_li$7 = -2508						; size = 52
_li$8 = -2456						; size = 52
_LvItem$9 = -2456					; size = 52
_item$10 = -2404					; size = 52
_$S7$11 = -2352						; size = 28
$T12 = -2324						; size = 12
$T13 = -2320						; size = 8
$T14 = -2320						; size = 8
_LvCol$15 = -2312					; size = 32
_lParam$GSCopy$1$ = -2280				; size = 4
_selectedItem$16 = -2280				; size = 4
_line$1$ = -2276					; size = 4
_hList$1$ = -2272					; size = 4
tv2073 = -2268						; size = 4
tv2072 = -2268						; size = 4
_hwndDlg$GSCopy$1$ = -2268				; size = 4
$T17 = -2268						; size = 4
_s$18 = -2264						; size = 2048
_size$19 = -216						; size = 200
_selectedDevice$20 = -128				; size = 112
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_RawDevicesDlgProc@16 PROC				; COMDAT

; 3683 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_RawDevicesDlgProc@16
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 0a 00
	00		 sub	 esp, 2756		; 00000ac4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]

; 3684 : 	static char *lpszFileName;		// This is actually a pointer to a GLOBAL array
; 3685 : 	static vector <HostDevice> devices;

  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00036	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00039	89 85 18 f7 ff
	ff		 mov	 DWORD PTR _lParam$GSCopy$1$[ebp], eax
  0003f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00045	89 b5 24 f7 ff
	ff		 mov	 DWORD PTR _hwndDlg$GSCopy$1$[ebp], esi
  0004b	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??RawDevicesDlgProc@@9@16@4HA
  00053	3b 87 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edi]
  00059	7e 2d		 jle	 SHORT $LN2@RawDevices
  0005b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??RawDevicesDlgProc@@9@16@4HA
  00060	e8 00 00 00 00	 call	 __Init_thread_header
  00065	83 c4 04	 add	 esp, 4
  00068	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??RawDevicesDlgProc@@9@16@4HA, -1
  0006f	75 17		 jne	 SHORT $LN2@RawDevices
  00071	68 00 00 00 00	 push	 OFFSET ??__Fdevices@?1??RawDevicesDlgProc@@9@16@YAXXZ ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'devices''
  00076	e8 00 00 00 00	 call	 _atexit
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??RawDevicesDlgProc@@9@16@4HA
  00080	e8 00 00 00 00	 call	 __Init_thread_footer
  00085	83 c4 08	 add	 esp, 8
$LN2@RawDevices:

; 3686 : 	static map <int, HostDevice> itemToDeviceMap;

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?1??RawDevicesDlgProc@@9@16@4HA
  0008d	3b 87 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edi]
  00093	7e 3c		 jle	 SHORT $LN3@RawDevices
  00095	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??RawDevicesDlgProc@@9@16@4HA
  0009a	e8 00 00 00 00	 call	 __Init_thread_header
  0009f	83 c4 04	 add	 esp, 4
  000a2	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?1??RawDevicesDlgProc@@9@16@4HA, -1
  000a9	75 26		 jne	 SHORT $LN3@RawDevices
  000ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  000b0	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Buyheadnode
  000b5	68 00 00 00 00	 push	 OFFSET ??__FitemToDeviceMap@?1??RawDevicesDlgProc@@9@16@YAXXZ ; `RawDevicesDlgProc'::`2'::`dynamic atexit destructor for 'itemToDeviceMap''
  000ba	a3 00 00 00 00	 mov	 DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A, eax
  000bf	e8 00 00 00 00	 call	 _atexit
  000c4	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??RawDevicesDlgProc@@9@16@4HA
  000c9	e8 00 00 00 00	 call	 __Init_thread_footer
  000ce	83 c4 08	 add	 esp, 8
$LN3@RawDevices:

; 3687 : 
; 3688 : 	WORD lw = LOWORD (wParam);
; 3689 : 
; 3690 : 	switch (msg)

  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _msg$[ebp]
  000d4	8b c1		 mov	 eax, ecx
  000d6	83 e8 4e	 sub	 eax, 78			; 0000004eH
  000d9	0f 84 df 07 00
	00		 je	 $LN31@RawDevices
  000df	2d c2 00 00 00	 sub	 eax, 194		; 000000c2H
  000e4	74 28		 je	 SHORT $LN12@RawDevices
  000e6	83 e8 01	 sub	 eax, 1
  000e9	0f 84 cf 07 00
	00		 je	 $LN31@RawDevices
$LN40@RawDevices:

; 3989 : 		}
; 3990 : 		return 0;

  000ef	33 c0		 xor	 eax, eax
$LN1@RawDevices:

; 3991 : 	}
; 3992 : 	return 0;
; 3993 : }

  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	33 cd		 xor	 ecx, ebp
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 10 00	 ret	 16			; 00000010H
$LN12@RawDevices:

; 3691 : 	{
; 3692 : 	case WM_INITDIALOG:
; 3693 : 		{
; 3694 : 			LVCOLUMNW LvCol;
; 3695 : 			HWND hList = GetDlgItem (hwndDlg, IDC_DEVICELIST);

  0010e	68 ae 13 00 00	 push	 5038			; 000013aeH
  00113	56		 push	 esi
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0011a	8b f8		 mov	 edi, eax

; 3696 : 
; 3697 : 			LocalizeDialog (hwndDlg, "IDD_RAWDEVICES_DLG");

  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OAMDNKIF@IDD_RAWDEVICES_DLG?$AA@
  00121	56		 push	 esi
  00122	89 bd 20 f7 ff
	ff		 mov	 DWORD PTR _hList$1$[ebp], edi
  00128	e8 00 00 00 00	 call	 _LocalizeDialog

; 3698 : 
; 3699 : 			SendMessage (hList,LVM_SETEXTENDEDLISTVIEWSTYLE,0,

  0012d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SendMessageA@16
  00133	83 c4 08	 add	 esp, 8
  00136	68 b0 40 00 00	 push	 16560			; 000040b0H
  0013b	6a 00		 push	 0
  0013d	68 36 10 00 00	 push	 4150			; 00001036H
  00142	57		 push	 edi
  00143	ff d6		 call	 esi
  00145	0f 57 c0	 xorps	 xmm0, xmm0

; 3700 : 				LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_TWOCLICKACTIVATE|LVS_EX_LABELTIP 
; 3701 : 				); 
; 3702 : 
; 3703 : 			memset (&LvCol,0,sizeof(LvCol));               

  00148	0f 11 85 f8 f6
	ff ff		 movups	 XMMWORD PTR _LvCol$15[ebp], xmm0

; 3704 : 			LvCol.mask = LVCF_TEXT|LVCF_WIDTH|LVCF_SUBITEM|LVCF_FMT;  
; 3705 : 			LvCol.pszText = GetString ("DEVICE");

  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_06CDNPEPDB@DEVICE?$AA@
  00154	0f 11 85 08 f7
	ff ff		 movups	 XMMWORD PTR _LvCol$15[ebp+16], xmm0
  0015b	c7 85 f8 f6 ff
	ff 0f 00 00 00	 mov	 DWORD PTR _LvCol$15[ebp], 15 ; 0000000fH
  00165	e8 00 00 00 00	 call	 _GetString

; 3706 : 			LvCol.cx = CompensateXDPI (186);

  0016a	68 ba 00 00 00	 push	 186			; 000000baH
  0016f	89 85 04 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+12], eax
  00175	e8 00 00 00 00	 call	 _CompensateXDPI
  0017a	83 c4 08	 add	 esp, 8
  0017d	89 85 00 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+8], eax

; 3707 : 			LvCol.fmt = LVCFMT_LEFT;
; 3708 : 			SendMessage (hList,LVM_INSERTCOLUMNW,0,(LPARAM)&LvCol);

  00183	8d 85 f8 f6 ff
	ff		 lea	 eax, DWORD PTR _LvCol$15[ebp]
  00189	c7 85 fc f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _LvCol$15[ebp+4], 0
  00193	50		 push	 eax
  00194	6a 00		 push	 0
  00196	68 61 10 00 00	 push	 4193			; 00001061H
  0019b	57		 push	 edi
  0019c	ff d6		 call	 esi

; 3709 : 
; 3710 : 			LvCol.pszText = GetString ("DRIVE");  

  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_05JLAEHEHI@DRIVE?$AA@
  001a3	e8 00 00 00 00	 call	 _GetString

; 3711 : 			LvCol.cx = CompensateXDPI (38);

  001a8	6a 26		 push	 38			; 00000026H
  001aa	89 85 04 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+12], eax
  001b0	e8 00 00 00 00	 call	 _CompensateXDPI
  001b5	83 c4 08	 add	 esp, 8
  001b8	89 85 00 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+8], eax

; 3712 : 			LvCol.fmt = LVCFMT_LEFT;
; 3713 : 			SendMessage (hList,LVM_INSERTCOLUMNW,1,(LPARAM)&LvCol);

  001be	8d 85 f8 f6 ff
	ff		 lea	 eax, DWORD PTR _LvCol$15[ebp]
  001c4	c7 85 fc f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _LvCol$15[ebp+4], 0
  001ce	50		 push	 eax
  001cf	6a 01		 push	 1
  001d1	68 61 10 00 00	 push	 4193			; 00001061H
  001d6	57		 push	 edi
  001d7	ff d6		 call	 esi

; 3714 : 
; 3715 : 			LvCol.pszText = GetString ("SIZE");

  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_04EMFHLKGI@SIZE?$AA@
  001de	e8 00 00 00 00	 call	 _GetString

; 3716 : 			LvCol.cx = CompensateXDPI (64);

  001e3	6a 40		 push	 64			; 00000040H
  001e5	89 85 04 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+12], eax
  001eb	e8 00 00 00 00	 call	 _CompensateXDPI
  001f0	83 c4 08	 add	 esp, 8
  001f3	89 85 00 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+8], eax

; 3717 : 			LvCol.fmt = LVCFMT_RIGHT;
; 3718 : 			SendMessage (hList,LVM_INSERTCOLUMNW,2,(LPARAM)&LvCol);

  001f9	8d 85 f8 f6 ff
	ff		 lea	 eax, DWORD PTR _LvCol$15[ebp]
  001ff	c7 85 fc f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR _LvCol$15[ebp+4], 1
  00209	50		 push	 eax
  0020a	6a 02		 push	 2
  0020c	68 61 10 00 00	 push	 4193			; 00001061H
  00211	57		 push	 edi
  00212	ff d6		 call	 esi

; 3719 : 
; 3720 : 			LvCol.pszText = GetString ("LABEL");

  00214	68 00 00 00 00	 push	 OFFSET ??_C@_05EILEDKCG@LABEL?$AA@
  00219	e8 00 00 00 00	 call	 _GetString

; 3721 : 			LvCol.cx = CompensateXDPI (128);

  0021e	68 80 00 00 00	 push	 128			; 00000080H
  00223	89 85 04 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+12], eax
  00229	e8 00 00 00 00	 call	 _CompensateXDPI
  0022e	83 c4 08	 add	 esp, 8
  00231	89 85 00 f7 ff
	ff		 mov	 DWORD PTR _LvCol$15[ebp+8], eax

; 3722 : 			LvCol.fmt = LVCFMT_LEFT;
; 3723 : 			SendMessage (hList,LVM_INSERTCOLUMNW,3,(LPARAM)&LvCol);

  00237	8d 85 f8 f6 ff
	ff		 lea	 eax, DWORD PTR _LvCol$15[ebp]
  0023d	c7 85 fc f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _LvCol$15[ebp+4], 0
  00247	50		 push	 eax
  00248	6a 03		 push	 3
  0024a	68 61 10 00 00	 push	 4193			; 00001061H
  0024f	57		 push	 edi
  00250	ff d6		 call	 esi

; 3724 : 
; 3725 : 			devices.clear();

  00252	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+4
  00258	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  0025e	3b f7		 cmp	 esi, edi
  00260	74 14		 je	 SHORT $LN124@RawDevices
$LL125@RawDevices:
  00262	8b ce		 mov	 ecx, esi
  00264	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00269	83 c6 70	 add	 esi, 112		; 00000070H
  0026c	3b f7		 cmp	 esi, edi
  0026e	75 f2		 jne	 SHORT $LL125@RawDevices
  00270	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
$LN124@RawDevices:
  00276	89 35 04 00 00
	00		 mov	 DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+4, esi

; 3726 : 			itemToDeviceMap.clear();

  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  00281	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00288	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0028b	8b f7		 mov	 esi, edi
  0028d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00291	75 2d		 jne	 SHORT $LN180@RawDevices
$LL181@RawDevices:
  00293	ff 76 08	 push	 DWORD PTR [esi+8]
  00296	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  0029b	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHUHostDevice@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::_Erase
  002a0	8b 36		 mov	 esi, DWORD PTR [esi]
  002a2	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  002a5	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  002aa	57		 push	 edi
  002ab	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002b0	83 c4 04	 add	 esp, 4
  002b3	8b fe		 mov	 edi, esi
  002b5	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  002b9	74 d8		 je	 SHORT $LL181@RawDevices
  002bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
$LN180@RawDevices:

; 3727 : 
; 3728 : 			WaitCursor();

  002c0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__LoadCursorA@8
  002c6	89 40 04	 mov	 DWORD PTR [eax+4], eax
  002c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  002ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d5	89 00		 mov	 DWORD PTR [eax], eax
  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  002dc	89 40 08	 mov	 DWORD PTR [eax+8], eax
  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A
  002e4	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A+4, 0
  002ee	85 c0		 test	 eax, eax
  002f0	75 0e		 jne	 SHORT $LN353@RawDevices
  002f2	68 02 7f 00 00	 push	 32514			; 00007f02H
  002f7	6a 00		 push	 0
  002f9	ff d7		 call	 edi
  002fb	a3 00 00 00 00	 mov	 DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A, eax
$LN353@RawDevices:
  00300	50		 push	 eax
  00301	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4
  00307	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A

; 3729 : 			devices = GetAvailableHostDevices (false, true, false);

  0030c	6a 00		 push	 0
  0030e	6a 00		 push	 0
  00310	6a 01		 push	 1
  00312	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor
  00317	8d 85 ec f6 ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0031d	6a 00		 push	 0
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?GetAvailableHostDevices@@YA?AV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@_N000@Z ; GetAvailableHostDevices
  00325	8b f0		 mov	 esi, eax
  00327	83 c4 14	 add	 esp, 20			; 00000014H
  0032a	81 fe 00 00 00
	00		 cmp	 esi, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00330	74 37		 je	 SHORT $LN356@RawDevices
  00332	b9 00 00 00 00	 mov	 ecx, OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00337	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy
  0033c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0033e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A, ecx
  00344	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00347	89 0d 04 00 00
	00		 mov	 DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+4, ecx
  0034d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00350	a3 08 00 00 00	 mov	 DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+8, eax
  00355	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0035b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00362	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN356@RawDevices:
  00369	8d 8d ec f6 ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0036f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 3730 : 			NormalCursor();

  00374	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  00379	85 c0		 test	 eax, eax
  0037b	75 0d		 jne	 SHORT $LN482@RawDevices
  0037d	68 00 7f 00 00	 push	 32512			; 00007f00H
  00382	50		 push	 eax
  00383	ff d7		 call	 edi
  00385	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN482@RawDevices:
  0038a	50		 push	 eax
  0038b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 3731 : 
; 3732 : 			if (devices.empty())

  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  00396	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor
  003a0	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A+4
  003a6	75 36		 jne	 SHORT $LN13@RawDevices

; 3733 : 			{
; 3734 : 				MessageBoxW (hwndDlg, GetString ("RAWDEVICES"), lpszTitle, ICON_HAND);

  003a8	6a 10		 push	 16			; 00000010H
  003aa	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IJFHJLKD@RAWDEVICES?$AA@
  003b5	e8 00 00 00 00	 call	 _GetString
  003ba	8b b5 24 f7 ff
	ff		 mov	 esi, DWORD PTR _hwndDlg$GSCopy$1$[ebp]
  003c0	83 c4 04	 add	 esp, 4
  003c3	50		 push	 eax
  003c4	56		 push	 esi
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3735 : 				EndDialog (hwndDlg, IDCANCEL);

  003cb	6a 02		 push	 2
  003cd	56		 push	 esi
  003ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN37@RawDevices:

; 3736 : 				return 1;

  003d4	b8 01 00 00 00	 mov	 eax, 1
  003d9	e9 13 fd ff ff	 jmp	 $LN1@RawDevices
$LN13@RawDevices:

; 3737 : 			}
; 3738 : 
; 3739 : 			int line = 1;
; 3740 : 			LVITEM item;
; 3741 : 			memset (&item, 0, sizeof (item));

  003de	6a 34		 push	 52			; 00000034H
  003e0	8d 85 9c f6 ff
	ff		 lea	 eax, DWORD PTR _item$10[ebp]
  003e6	c7 85 1c f7 ff
	ff 01 00 00 00	 mov	 DWORD PTR _line$1$[ebp], 1
  003f0	6a 00		 push	 0
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 _memset

; 3742 : 			item.mask = LVIF_TEXT;
; 3743 : 
; 3744 : 			foreach (const HostDevice &device, devices)

  003f8	8d 85 d0 f6 ff
	ff		 lea	 eax, DWORD PTR _$S7$11[ebp]
  003fe	c7 85 9c f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR _item$10[ebp], 1
  00408	68 00 00 00 00	 push	 OFFSET ?devices@?1??RawDevicesDlgProc@@9@16@4V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@A
  0040d	50		 push	 eax
  0040e	e8 00 00 00 00	 call	 ??$GetContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@ForEach@GostCrypt@@SA?AU?$ContainerForward@V?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@01@ABV?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@@Z ; GostCrypt::ForEach::GetContainerForward<std::vector<HostDevice,std::allocator<HostDevice> > >
  00413	8b 85 d0 f6 ff
	ff		 mov	 eax, DWORD PTR _$S7$11[ebp]
  00419	8d 8d d0 f6 ff
	ff		 lea	 ecx, DWORD PTR _$S7$11[ebp]
  0041f	83 c4 14	 add	 esp, 20			; 00000014H
  00422	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00425	ff d0		 call	 eax
  00427	84 c0		 test	 al, al
  00429	0f 84 6f 04 00
	00		 je	 $LN7@RawDevices
  0042f	90		 npad	 1
$LL8@RawDevices:
  00430	8b b5 e8 f6 ff
	ff		 mov	 esi, DWORD PTR _$S7$11[ebp+24]
  00436	33 c0		 xor	 eax, eax
  00438	38 85 d5 f6 ff
	ff		 cmp	 BYTE PTR _$S7$11[ebp+5], al
  0043e	0f 94 c0	 sete	 al
  00441	88 85 d5 f6 ff
	ff		 mov	 BYTE PTR _$S7$11[ebp+5], al
  00447	84 c0		 test	 al, al
  00449	0f 84 27 04 00
	00		 je	 $LN6@RawDevices
  0044f	8b bd a0 f6 ff
	ff		 mov	 edi, DWORD PTR _item$10[ebp+4]
  00455	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL11@RawDevices:

; 3745 : 			{
; 3746 : 				item.iSubItem = 1;

  00460	c7 85 a4 f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR _item$10[ebp+8], 1

; 3747 : 
; 3748 : 				if (device.ContainsSystem)

  0046a	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  0046e	74 3f		 je	 SHORT $LN16@RawDevices

; 3749 : 				{
; 3750 : 					if (device.IsPartition)

  00470	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0

; 3751 : 						strcpy_s (SysPartitionDevicePath, sizeof (SysPartitionDevicePath), device.Path.c_str());

  00474	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  00477	74 15		 je	 SHORT $LN15@RawDevices
  00479	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0047d	72 02		 jb	 SHORT $LN531@RawDevices
  0047f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN531@RawDevices:
  00481	50		 push	 eax
  00482	68 04 01 00 00	 push	 260			; 00000104H
  00487	68 00 00 00 00	 push	 OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath

; 3752 : 					else

  0048c	eb 13		 jmp	 SHORT $LN797@RawDevices
$LN15@RawDevices:

; 3753 : 						strcpy_s (SysDriveDevicePath, sizeof (SysDriveDevicePath), device.Path.c_str());

  0048e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00492	72 02		 jb	 SHORT $LN548@RawDevices
  00494	8b 00		 mov	 eax, DWORD PTR [eax]
$LN548@RawDevices:
  00496	50		 push	 eax
  00497	68 04 01 00 00	 push	 260			; 00000104H
  0049c	68 00 00 00 00	 push	 OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
$LN797@RawDevices:
  004a1	e8 00 00 00 00	 call	 _strcpy_s
  004a6	8b bd a0 f6 ff
	ff		 mov	 edi, DWORD PTR _item$10[ebp+4]
  004ac	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@RawDevices:

; 3754 : 				}
; 3755 : 
; 3756 : 				// Path
; 3757 : 				if (!device.IsPartition || device.DynamicVolume)

  004af	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  004b3	74 5e		 je	 SHORT $LN19@RawDevices
  004b5	80 7e 02 00	 cmp	 BYTE PTR [esi+2], 0
  004b9	75 58		 jne	 SHORT $LN19@RawDevices

; 3784 : 					}
; 3785 : 				}
; 3786 : 				else
; 3787 : 				{
; 3788 : 					ListItemAdd (hList, item.iItem, (char *) device.Path.c_str());

  004bb	83 7e 4c 10	 cmp	 DWORD PTR [esi+76], 16	; 00000010H
  004bf	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  004c2	89 85 24 f7 ff
	ff		 mov	 DWORD PTR tv2072[ebp], eax
  004c8	72 08		 jb	 SHORT $LN609@RawDevices
  004ca	8b 00		 mov	 eax, DWORD PTR [eax]
  004cc	89 85 24 f7 ff
	ff		 mov	 DWORD PTR tv2072[ebp], eax
$LN609@RawDevices:
  004d2	6a 34		 push	 52			; 00000034H
  004d4	8d 85 34 f6 ff
	ff		 lea	 eax, DWORD PTR _li$7[ebp]
  004da	6a 00		 push	 0
  004dc	50		 push	 eax
  004dd	e8 00 00 00 00	 call	 _memset
  004e2	8b 85 24 f7 ff
	ff		 mov	 eax, DWORD PTR tv2072[ebp]
  004e8	89 85 48 f6 ff
	ff		 mov	 DWORD PTR _li$7[ebp+20], eax
  004ee	8d 85 34 f6 ff
	ff		 lea	 eax, DWORD PTR _li$7[ebp]
  004f4	c7 85 34 f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$7[ebp], 1
  004fe	89 bd 38 f6 ff
	ff		 mov	 DWORD PTR _li$7[ebp+4], edi
  00504	c7 85 3c f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _li$7[ebp+8], 0
  0050e	e9 9e 01 00 00	 jmp	 $LN798@RawDevices
$LN19@RawDevices:

; 3758 : 				{
; 3759 : 					if (!device.Floppy && device.Size == 0)

  00513	80 7e 03 00	 cmp	 BYTE PTR [esi+3], 0
  00517	75 0c		 jne	 SHORT $LN20@RawDevices
  00519	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0051c	0b 46 5c	 or	 eax, DWORD PTR [esi+92]
  0051f	0f 84 31 03 00
	00		 je	 $LN9@RawDevices
$LN20@RawDevices:

; 3760 : 						continue;
; 3761 : 
; 3762 : 					if (line > 1)

  00525	83 bd 1c f7 ff
	ff 01		 cmp	 DWORD PTR _line$1$[ebp], 1
  0052c	7e 66		 jle	 SHORT $LN21@RawDevices

; 3763 : 					{
; 3764 : 						ListItemAdd (hList, item.iItem, "");

  0052e	6a 34		 push	 52			; 00000034H
  00530	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _li$6[ebp]
  00536	6a 00		 push	 0
  00538	50		 push	 eax
  00539	e8 00 00 00 00	 call	 _memset
  0053e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00541	c7 85 00 f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$6[ebp], 1
  0054b	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _li$6[ebp]
  00551	c7 85 14 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _li$6[ebp+20], OFFSET ??_C@_00CNPNBAHC@?$AA@
  0055b	89 bd 04 f6 ff
	ff		 mov	 DWORD PTR _li$6[ebp+4], edi
  00561	c7 85 08 f6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _li$6[ebp+8], 0
  0056b	50		 push	 eax
  0056c	6a 00		 push	 0
  0056e	68 07 10 00 00	 push	 4103			; 00001007H
  00573	ff b5 20 f7 ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  00579	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3765 : 						item.iItem = line++;   

  0057f	8b 85 1c f7 ff
	ff		 mov	 eax, DWORD PTR _line$1$[ebp]
  00585	8b f8		 mov	 edi, eax
  00587	40		 inc	 eax
  00588	89 bd a0 f6 ff
	ff		 mov	 DWORD PTR _item$10[ebp+4], edi
  0058e	89 85 1c f7 ff
	ff		 mov	 DWORD PTR _line$1$[ebp], eax
$LN21@RawDevices:

; 3766 : 					}
; 3767 : 
; 3768 : 					if (device.Floppy || device.DynamicVolume)

  00594	80 7e 03 00	 cmp	 BYTE PTR [esi+3], 0
  00598	0f 85 c0 00 00
	00		 jne	 $LN24@RawDevices
  0059e	80 7e 02 00	 cmp	 BYTE PTR [esi+2], 0
  005a2	0f 85 b6 00 00
	00		 jne	 $LN24@RawDevices

; 3771 : 					}
; 3772 : 					else
; 3773 : 					{
; 3774 : 						wchar_t s[1024];
; 3775 : 						if (device.Removable)

  005a8	80 7e 50 00	 cmp	 BYTE PTR [esi+80], 0

; 3776 : 							wsprintfW (s, L"%s %d", GetString ("REMOVABLE_DISK"), device.SystemNumber);

  005ac	ff 76 60	 push	 DWORD PTR [esi+96]
  005af	74 07		 je	 SHORT $LN25@RawDevices
  005b1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MBKJGBEM@REMOVABLE_DISK?$AA@

; 3777 : 						else

  005b6	eb 05		 jmp	 SHORT $LN799@RawDevices
$LN25@RawDevices:

; 3778 : 							wsprintfW (s, L"%s %d", GetString ("HARDDISK"), device.SystemNumber);

  005b8	68 00 00 00 00	 push	 OFFSET ??_C@_08IPBANHMA@HARDDISK?$AA@
$LN799@RawDevices:
  005bd	e8 00 00 00 00	 call	 _GetString
  005c2	83 c4 04	 add	 esp, 4
  005c5	50		 push	 eax
  005c6	8d 85 28 f7 ff
	ff		 lea	 eax, DWORD PTR _s$18[ebp]
  005cc	68 00 00 00 00	 push	 OFFSET ??_C@_1M@DJFDNGE@?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AA@
  005d1	50		 push	 eax
  005d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 3779 : 
; 3780 : 						if (!device.Partitions.empty())

  005d8	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  005db	83 c4 10	 add	 esp, 16			; 00000010H
  005de	3b 46 68	 cmp	 eax, DWORD PTR [esi+104]
  005e1	74 20		 je	 SHORT $LN27@RawDevices

; 3781 : 							wcscat (s, L":");

  005e3	8d bd 28 f7 ff
	ff		 lea	 edi, DWORD PTR _s$18[ebp]
  005e9	83 c7 fe	 add	 edi, -2			; fffffffeH
  005ec	0f 1f 40 00	 npad	 4
$LL795@RawDevices:
  005f0	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]
  005f4	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]
  005f7	66 85 c0	 test	 ax, ax
  005fa	75 f4		 jne	 SHORT $LL795@RawDevices
  005fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_13EBCNDICG@?$AA?3?$AA?$AA@
  00601	89 07		 mov	 DWORD PTR [edi], eax
$LN27@RawDevices:

; 3782 : 
; 3783 : 						ListItemAddW (hList, item.iItem, s);

  00603	6a 34		 push	 52			; 00000034H
  00605	8d 85 cc f5 ff
	ff		 lea	 eax, DWORD PTR _li$5[ebp]
  0060b	6a 00		 push	 0
  0060d	50		 push	 eax
  0060e	e8 00 00 00 00	 call	 _memset
  00613	83 c4 0c	 add	 esp, 12			; 0000000cH
  00616	c7 85 cc f5 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$5[ebp], 1
  00620	8d 85 28 f7 ff
	ff		 lea	 eax, DWORD PTR _s$18[ebp]
  00626	c7 85 d4 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR _li$5[ebp+8], 0
  00630	89 85 e0 f5 ff
	ff		 mov	 DWORD PTR _li$5[ebp+20], eax
  00636	8b 85 a0 f6 ff
	ff		 mov	 eax, DWORD PTR _item$10[ebp+4]
  0063c	89 85 d0 f5 ff
	ff		 mov	 DWORD PTR _li$5[ebp+4], eax
  00642	8d 85 cc f5 ff
	ff		 lea	 eax, DWORD PTR _li$5[ebp]
  00648	50		 push	 eax
  00649	6a 00		 push	 0
  0064b	68 4d 10 00 00	 push	 4173			; 0000104dH
  00650	ff b5 20 f7 ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  00656	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
  0065c	eb 6a		 jmp	 SHORT $LN23@RawDevices
$LN24@RawDevices:

; 3769 : 					{
; 3770 : 						ListItemAdd (hList, item.iItem, (char *) device.Path.c_str());

  0065e	83 7e 4c 10	 cmp	 DWORD PTR [esi+76], 16	; 00000010H
  00662	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  00665	89 85 24 f7 ff
	ff		 mov	 DWORD PTR tv2073[ebp], eax
  0066b	72 08		 jb	 SHORT $LN567@RawDevices
  0066d	8b 00		 mov	 eax, DWORD PTR [eax]
  0066f	89 85 24 f7 ff
	ff		 mov	 DWORD PTR tv2073[ebp], eax
$LN567@RawDevices:
  00675	6a 34		 push	 52			; 00000034H
  00677	8d 85 98 f5 ff
	ff		 lea	 eax, DWORD PTR _li$4[ebp]
  0067d	6a 00		 push	 0
  0067f	50		 push	 eax
  00680	e8 00 00 00 00	 call	 _memset
  00685	8b 85 24 f7 ff
	ff		 mov	 eax, DWORD PTR tv2073[ebp]
  0068b	89 85 ac f5 ff
	ff		 mov	 DWORD PTR _li$4[ebp+20], eax
  00691	8d 85 98 f5 ff
	ff		 lea	 eax, DWORD PTR _li$4[ebp]
  00697	c7 85 98 f5 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$4[ebp], 1
  006a1	89 bd 9c f5 ff
	ff		 mov	 DWORD PTR _li$4[ebp+4], edi
  006a7	c7 85 a0 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR _li$4[ebp+8], 0
$LN798@RawDevices:
  006b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b4	50		 push	 eax
  006b5	6a 00		 push	 0
  006b7	68 07 10 00 00	 push	 4103			; 00001007H
  006bc	ff b5 20 f7 ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  006c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN23@RawDevices:

; 3789 : 				}
; 3790 : 
; 3791 : 				itemToDeviceMap[item.iItem] = device;

  006c8	8d 85 a0 f6 ff
	ff		 lea	 eax, DWORD PTR _item$10[ebp+4]
  006ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  006d3	50		 push	 eax
  006d4	8d 85 f0 f6 ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  006da	50		 push	 eax
  006db	e8 00 00 00 00	 call	 ??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>
  006e0	8b 8d f0 f6 ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  006e6	56		 push	 esi
  006e7	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  006ea	e8 00 00 00 00	 call	 ??4HostDevice@@QAEAAU0@ABU0@@Z

; 3792 : 
; 3793 : 				// Size
; 3794 : 				if (device.Size != 0)

  006ef	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  006f2	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
  006f5	0b c7		 or	 eax, edi
  006f7	0f 84 7c 00 00
	00		 je	 $LN28@RawDevices

; 3795 : 				{
; 3796 : 					wchar_t size[100] = { 0 };
; 3797 : 					GetSizeString (device.Size, size);

  006fd	68 c8 00 00 00	 push	 200			; 000000c8H
  00702	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _size$19[ebp]
  00708	6a 00		 push	 0
  0070a	50		 push	 eax
  0070b	e8 00 00 00 00	 call	 _memset
  00710	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _size$19[ebp]
  00716	50		 push	 eax
  00717	57		 push	 edi
  00718	ff 76 58	 push	 DWORD PTR [esi+88]
  0071b	e8 00 00 00 00	 call	 _GetSizeString

; 3798 : 					ListSubItemSetW (hList, item.iItem, 2, size);

  00720	6a 34		 push	 52			; 00000034H
  00722	8d 85 64 f5 ff
	ff		 lea	 eax, DWORD PTR _li$3[ebp]
  00728	6a 00		 push	 0
  0072a	50		 push	 eax
  0072b	e8 00 00 00 00	 call	 _memset
  00730	83 c4 24	 add	 esp, 36			; 00000024H
  00733	c7 85 64 f5 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$3[ebp], 1
  0073d	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _size$19[ebp]
  00743	c7 85 6c f5 ff
	ff 02 00 00 00	 mov	 DWORD PTR _li$3[ebp+8], 2
  0074d	89 85 78 f5 ff
	ff		 mov	 DWORD PTR _li$3[ebp+20], eax
  00753	8b 85 a0 f6 ff
	ff		 mov	 eax, DWORD PTR _item$10[ebp+4]
  00759	89 85 68 f5 ff
	ff		 mov	 DWORD PTR _li$3[ebp+4], eax
  0075f	8d 85 64 f5 ff
	ff		 lea	 eax, DWORD PTR _li$3[ebp]
  00765	50		 push	 eax
  00766	6a 00		 push	 0
  00768	68 4c 10 00 00	 push	 4172			; 0000104cH
  0076d	ff b5 20 f7 ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  00773	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
$LN28@RawDevices:

; 3799 : 				}
; 3800 : 
; 3801 : 				// Mount point
; 3802 : 				if (!device.MountPoint.empty())

  00779	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0077d	74 5e		 je	 SHORT $LN29@RawDevices

; 3803 : 					ListSubItemSet (hList, item.iItem, 1, (char *) device.MountPoint.c_str());

  0077f	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H
  00783	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00786	72 02		 jb	 SHORT $LN659@RawDevices
  00788	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN659@RawDevices:
  0078a	6a 34		 push	 52			; 00000034H
  0078c	8d 85 30 f5 ff
	ff		 lea	 eax, DWORD PTR _li$2[ebp]
  00792	6a 00		 push	 0
  00794	50		 push	 eax
  00795	e8 00 00 00 00	 call	 _memset
  0079a	8b 85 a0 f6 ff
	ff		 mov	 eax, DWORD PTR _item$10[ebp+4]
  007a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  007a3	89 85 34 f5 ff
	ff		 mov	 DWORD PTR _li$2[ebp+4], eax
  007a9	8d 85 30 f5 ff
	ff		 lea	 eax, DWORD PTR _li$2[ebp]
  007af	c7 85 30 f5 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$2[ebp], 1
  007b9	89 bd 44 f5 ff
	ff		 mov	 DWORD PTR _li$2[ebp+20], edi
  007bf	50		 push	 eax
  007c0	6a 00		 push	 0
  007c2	68 06 10 00 00	 push	 4102			; 00001006H
  007c7	ff b5 20 f7 ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  007cd	c7 85 38 f5 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$2[ebp+8], 1
  007d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$LN29@RawDevices:

; 3804 : 
; 3805 : 				// Label
; 3806 : 				if (!device.Name.empty())

  007dd	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  007e1	74 5e		 je	 SHORT $LN30@RawDevices

; 3807 : 					ListSubItemSetW (hList, item.iItem, 3, (wchar_t *) device.Name.c_str());

  007e3	83 7e 34 08	 cmp	 DWORD PTR [esi+52], 8
  007e7	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]
  007ea	72 02		 jb	 SHORT $LN690@RawDevices
  007ec	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN690@RawDevices:
  007ee	6a 34		 push	 52			; 00000034H
  007f0	8d 85 68 f6 ff
	ff		 lea	 eax, DWORD PTR _li$8[ebp]
  007f6	6a 00		 push	 0
  007f8	50		 push	 eax
  007f9	e8 00 00 00 00	 call	 _memset
  007fe	8b 85 a0 f6 ff
	ff		 mov	 eax, DWORD PTR _item$10[ebp+4]
  00804	83 c4 0c	 add	 esp, 12			; 0000000cH
  00807	89 85 6c f6 ff
	ff		 mov	 DWORD PTR _li$8[ebp+4], eax
  0080d	8d 85 68 f6 ff
	ff		 lea	 eax, DWORD PTR _li$8[ebp]
  00813	c7 85 68 f6 ff
	ff 01 00 00 00	 mov	 DWORD PTR _li$8[ebp], 1
  0081d	89 bd 7c f6 ff
	ff		 mov	 DWORD PTR _li$8[ebp+20], edi
  00823	50		 push	 eax
  00824	6a 00		 push	 0
  00826	68 4c 10 00 00	 push	 4172			; 0000104cH
  0082b	ff b5 20 f7 ff
	ff		 push	 DWORD PTR _hList$1$[ebp]
  00831	c7 85 70 f6 ff
	ff 03 00 00 00	 mov	 DWORD PTR _li$8[ebp+8], 3
  0083b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
$LN30@RawDevices:

; 3808 : #ifdef GSTMOUNT
; 3809 : 				else
; 3810 : 				{
; 3811 : 					wstring favoriteLabel = GetFavoriteVolumeLabel (device.Path);
; 3812 : 					if (!favoriteLabel.empty())
; 3813 : 						ListSubItemSetW (hList, item.iItem, 3, (wchar_t *) favoriteLabel.c_str());
; 3814 : 				}
; 3815 : #endif
; 3816 : 
; 3817 : 				item.iItem = line++;   

  00841	8b 85 1c f7 ff
	ff		 mov	 eax, DWORD PTR _line$1$[ebp]
  00847	8b f8		 mov	 edi, eax
  00849	40		 inc	 eax
  0084a	89 bd a0 f6 ff
	ff		 mov	 DWORD PTR _item$10[ebp+4], edi
  00850	89 85 1c f7 ff
	ff		 mov	 DWORD PTR _line$1$[ebp], eax
$LN9@RawDevices:

; 3742 : 			item.mask = LVIF_TEXT;
; 3743 : 
; 3744 : 			foreach (const HostDevice &device, devices)

  00856	33 c0		 xor	 eax, eax
  00858	c6 85 d4 f6 ff
	ff 01		 mov	 BYTE PTR _$S7$11[ebp+4], 1
  0085f	38 85 d5 f6 ff
	ff		 cmp	 BYTE PTR _$S7$11[ebp+5], al
  00865	0f 94 c0	 sete	 al
  00868	88 85 d5 f6 ff
	ff		 mov	 BYTE PTR _$S7$11[ebp+5], al
  0086e	84 c0		 test	 al, al
  00870	0f 85 ea fb ff
	ff		 jne	 $LL11@RawDevices
$LN6@RawDevices:
  00876	8b 85 d0 f6 ff
	ff		 mov	 eax, DWORD PTR _$S7$11[ebp]
  0087c	8d 8d d0 f6 ff
	ff		 lea	 ecx, DWORD PTR _$S7$11[ebp]
  00882	ff 50 08	 call	 DWORD PTR [eax+8]
  00885	8b 85 d0 f6 ff
	ff		 mov	 eax, DWORD PTR _$S7$11[ebp]
  0088b	8d 8d d0 f6 ff
	ff		 lea	 ecx, DWORD PTR _$S7$11[ebp]
  00891	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00894	ff d0		 call	 eax
  00896	84 c0		 test	 al, al
  00898	0f 85 92 fb ff
	ff		 jne	 $LL8@RawDevices
$LN7@RawDevices:

; 3818 : 			}

  0089e	8d 8d d8 f6 ff
	ff		 lea	 ecx, DWORD PTR _$S7$11[ebp+8]
  008a4	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UHostDevice@@V?$allocator@UHostDevice@@@std@@@std@@IAEXXZ ; std::vector<HostDevice,std::allocator<HostDevice> >::_Tidy

; 3819 : 
; 3820 : 			lpszFileName = (char *) lParam;

  008a9	8b 85 18 f7 ff
	ff		 mov	 eax, DWORD PTR _lParam$GSCopy$1$[ebp]
  008af	a3 00 00 00 00	 mov	 DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA, eax

; 3821 : 
; 3822 : #ifdef VOLFORMAT
; 3823 : 			EnableWindow (GetDlgItem (hwndDlg, IDOK), FALSE);
; 3824 : #endif
; 3825 : 			return 1;

  008b4	b8 01 00 00 00	 mov	 eax, 1
  008b9	e9 33 f8 ff ff	 jmp	 $LN1@RawDevices
$LN31@RawDevices:

; 3826 : 		}
; 3827 : 
; 3828 : 	case WM_COMMAND:
; 3829 : 	case WM_NOTIFY:
; 3830 : 		// catch non-device line selected
; 3831 : 		if (msg == WM_NOTIFY && ((LPNMHDR) lParam)->code == LVN_ITEMCHANGED && (((LPNMLISTVIEW) lParam)->uNewState & LVIS_FOCUSED ))

  008be	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  008c1	83 f9 4e	 cmp	 ecx, 78			; 0000004eH
  008c4	0f 85 ad 00 00
	00		 jne	 $LN32@RawDevices
  008ca	8b bd 18 f7 ff
	ff		 mov	 edi, DWORD PTR _lParam$GSCopy$1$[ebp]
  008d0	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  008d3	83 f9 9b	 cmp	 ecx, -101		; ffffff9bH
  008d6	0f 85 96 00 00
	00		 jne	 $LN793@RawDevices
  008dc	f6 47 14 01	 test	 BYTE PTR [edi+20], 1
  008e0	0f 84 8c 00 00
	00		 je	 $LN793@RawDevices

; 3832 : 		{
; 3833 : 			LVITEM LvItem;
; 3834 : 			memset(&LvItem,0,sizeof(LvItem));

  008e6	6a 34		 push	 52			; 00000034H
  008e8	8d 85 68 f6 ff
	ff		 lea	 eax, DWORD PTR _LvItem$9[ebp]
  008ee	6a 00		 push	 0
  008f0	50		 push	 eax
  008f1	e8 00 00 00 00	 call	 _memset

; 3835 : 			LvItem.mask = LVIF_TEXT | LVIF_PARAM;   
; 3836 : 			LvItem.iItem = ((LPNMLISTVIEW) lParam)->iItem;
; 3837 : 			LvItem.pszText = lpszFileName;

  008f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
  008fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  008fe	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 3838 : 			LvItem.cchTextMax = GST_MAX_PATH;
; 3839 : 
; 3840 : 			SendMessage (GetDlgItem (hwndDlg, IDC_DEVICELIST), LVM_GETITEM, LvItem.iItem, (LPARAM) &LvItem);

  00901	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetDlgItem@8
  00907	89 85 7c f6 ff
	ff		 mov	 DWORD PTR _LvItem$9[ebp+20], eax
  0090d	8d 85 68 f6 ff
	ff		 lea	 eax, DWORD PTR _LvItem$9[ebp]
  00913	50		 push	 eax
  00914	51		 push	 ecx
  00915	68 05 10 00 00	 push	 4101			; 00001005H
  0091a	68 ae 13 00 00	 push	 5038			; 000013aeH
  0091f	56		 push	 esi
  00920	c7 85 68 f6 ff
	ff 05 00 00 00	 mov	 DWORD PTR _LvItem$9[ebp], 5
  0092a	89 8d 6c f6 ff
	ff		 mov	 DWORD PTR _LvItem$9[ebp+4], ecx
  00930	c7 85 80 f6 ff
	ff 04 01 00 00	 mov	 DWORD PTR _LvItem$9[ebp+24], 260 ; 00000104H
  0093a	ff d7		 call	 edi
  0093c	50		 push	 eax
  0093d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 3841 : 			EnableWindow (GetDlgItem ((HWND) hwndDlg, IDOK), lpszFileName[0] != 0 && lpszFileName[0] != ' ');

  00943	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
  00948	8a 00		 mov	 al, BYTE PTR [eax]
  0094a	84 c0		 test	 al, al
  0094c	74 0b		 je	 SHORT $LN44@RawDevices
  0094e	3c 20		 cmp	 al, 32			; 00000020H
  00950	74 07		 je	 SHORT $LN44@RawDevices
  00952	b8 01 00 00 00	 mov	 eax, 1
  00957	eb 02		 jmp	 SHORT $LN45@RawDevices
$LN44@RawDevices:
  00959	33 c0		 xor	 eax, eax
$LN45@RawDevices:
  0095b	50		 push	 eax
  0095c	6a 01		 push	 1
  0095e	56		 push	 esi
  0095f	ff d7		 call	 edi
  00961	50		 push	 eax
  00962	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnableWindow@8

; 3842 : 
; 3843 : 			return 1;

  00968	b8 01 00 00 00	 mov	 eax, 1
  0096d	e9 7f f7 ff ff	 jmp	 $LN1@RawDevices
$LN793@RawDevices:

; 3844 : 		}
; 3845 : 
; 3846 : 		if (msg == WM_COMMAND && lw == IDOK || msg == WM_NOTIFY && ((NMHDR *)lParam)->code == LVN_ITEMACTIVATE)

  00972	83 f9 8e	 cmp	 ecx, -114		; ffffff8eH
  00975	eb 10		 jmp	 SHORT $LN800@RawDevices
$LN32@RawDevices:
  00977	81 f9 11 01 00
	00		 cmp	 ecx, 273		; 00000111H
  0097d	0f 85 11 01 00
	00		 jne	 $LN33@RawDevices
  00983	66 83 f8 01	 cmp	 ax, 1
$LN800@RawDevices:
  00987	0f 85 07 01 00
	00		 jne	 $LN33@RawDevices

; 3847 : 		{
; 3848 : 			int selectedItem = ListView_GetSelectionMark (GetDlgItem (hwndDlg, IDC_DEVICELIST));

  0098d	6a 00		 push	 0
  0098f	6a 00		 push	 0
  00991	68 42 10 00 00	 push	 4162			; 00001042H
  00996	68 ae 13 00 00	 push	 5038			; 000013aeH
  0099b	56		 push	 esi
  0099c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  009a2	50		 push	 eax
  009a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  009a9	89 85 18 f7 ff
	ff		 mov	 DWORD PTR _selectedItem$16[ebp], eax

; 3849 : 
; 3850 : 			if (selectedItem == -1 || itemToDeviceMap.find (selectedItem) == itemToDeviceMap.end())

  009af	83 f8 ff	 cmp	 eax, -1
  009b2	0f 84 1c fa ff
	ff		 je	 $LN37@RawDevices
  009b8	8d 85 18 f7 ff
	ff		 lea	 eax, DWORD PTR _selectedItem$16[ebp]
  009be	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  009c3	50		 push	 eax
  009c4	8d 85 24 f7 ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  009ca	50		 push	 eax
  009cb	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> >,0> >::find
  009d0	8b 00		 mov	 eax, DWORD PTR [eax]
  009d2	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  009d8	0f 84 f6 f9 ff
	ff		 je	 $LN37@RawDevices

; 3851 : 				return 1; // non-device line selected
; 3852 : 
; 3853 : 			const HostDevice selectedDevice = itemToDeviceMap[selectedItem];

  009de	8d 85 18 f7 ff
	ff		 lea	 eax, DWORD PTR _selectedItem$16[ebp]
  009e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?itemToDeviceMap@?1??RawDevicesDlgProc@@9@16@4V?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@A
  009e9	50		 push	 eax
  009ea	8d 85 f0 f6 ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  009f0	50		 push	 eax
  009f1	e8 00 00 00 00	 call	 ??$_Try_emplace@ABH$$V@?$map@HUHostDevice@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHUHostDevice@@@std@@@3@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHUHostDevice@@@std@@@std@@@std@@@std@@_N@1@ABH@Z ; std::map<int,HostDevice,std::less<int>,std::allocator<std::pair<int const ,HostDevice> > >::_Try_emplace<int const &>
  009f6	8b 85 f0 f6 ff
	ff		 mov	 eax, DWORD PTR $T13[ebp]
  009fc	8d 4d 80	 lea	 ecx, DWORD PTR _selectedDevice$20[ebp]
  009ff	83 c0 18	 add	 eax, 24			; 00000018H
  00a02	50		 push	 eax
  00a03	e8 00 00 00 00	 call	 ??0HostDevice@@QAE@ABU0@@Z

; 3854 : 			strcpy_s (lpszFileName, GST_MAX_PATH, selectedDevice.Path.c_str());

  00a08	83 7d cc 10	 cmp	 DWORD PTR _selectedDevice$20[ebp+76], 16 ; 00000010H
  00a0c	8d 45 b8	 lea	 eax, DWORD PTR _selectedDevice$20[ebp+56]
  00a0f	0f 43 45 b8	 cmovae	 eax, DWORD PTR _selectedDevice$20[ebp+56]
  00a13	50		 push	 eax
  00a14	68 04 01 00 00	 push	 260			; 00000104H
  00a19	ff 35 00 00 00
	00		 push	 DWORD PTR ?lpszFileName@?1??RawDevicesDlgProc@@9@16@4PADA
  00a1f	e8 00 00 00 00	 call	 _strcpy_s

; 3855 : 
; 3856 : #ifdef VOLFORMAT
; 3857 : 			if (selectedDevice.ContainsSystem && selectedDevice.IsPartition)
; 3858 : 			{
; 3859 : 				if (WizardMode != WIZARD_MODE_SYS_DEVICE)
; 3860 : 				{
; 3861 : 					if (AskYesNo ("CONFIRM_SYSTEM_ENCRYPTION_MODE") == IDNO)
; 3862 : 					{
; 3863 : 						EndDialog (hwndDlg, IDCANCEL);
; 3864 : 						return 1;
; 3865 : 					}
; 3866 : 
; 3867 : 					bSysPartitionSelected = TRUE;
; 3868 : 					bSysDriveSelected = FALSE;
; 3869 : 					lpszFileName[0] = 0;
; 3870 : 					SwitchWizardToSysEncMode ();
; 3871 : 
; 3872 : 					NormalCursor ();
; 3873 : 					EndDialog (hwndDlg, IDOK);
; 3874 : 					return 1;
; 3875 : 				}
; 3876 : 				else
; 3877 : 				{
; 3878 : 					// This should never be the case because the Select Device dialog is not available in this wizard mode
; 3879 : 					bSysPartitionSelected = TRUE;
; 3880 : 					bSysDriveSelected = FALSE;
; 3881 : 					lpszFileName[0] = 0;
; 3882 : 					SwitchWizardToSysEncMode ();
; 3883 : 					NormalCursor ();
; 3884 : 					EndDialog (hwndDlg, IDCANCEL);
; 3885 : 					return 1;
; 3886 : 				}
; 3887 : 			}
; 3888 : 
; 3889 : 			if (!(selectedDevice.ContainsSystem && !selectedDevice.IsPartition))
; 3890 : 			{
; 3891 : 				if (bWarnDeviceFormatAdvanced
; 3892 : 					&& !bHiddenVolDirect
; 3893 : 					&& AskWarnNoYes("FORMAT_DEVICE_FOR_ADVANCED_ONLY") == IDNO)
; 3894 : 				{
; 3895 : 					if (AskNoYes("CONFIRM_CHANGE_WIZARD_MODE_TO_FILE_CONTAINER") == IDYES)
; 3896 : 					{
; 3897 : 						SwitchWizardToFileContainerMode ();
; 3898 : 					}
; 3899 : 					EndDialog (hwndDlg, IDCANCEL);
; 3900 : 					return 1;
; 3901 : 				}
; 3902 : 
; 3903 : 				if (!bHiddenVolDirect)
; 3904 : 					bWarnDeviceFormatAdvanced = FALSE;
; 3905 : 			}
; 3906 : 
; 3907 : #else	// #ifdef VOLFORMAT
; 3908 : 
; 3909 : 			bSysPartitionSelected = (selectedDevice.ContainsSystem && selectedDevice.IsPartition);

  00a24	8a 4d 81	 mov	 cl, BYTE PTR _selectedDevice$20[ebp+1]
  00a27	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a2a	8a 45 84	 mov	 al, BYTE PTR _selectedDevice$20[ebp+4]
  00a2d	84 c9		 test	 cl, cl
  00a2f	74 0e		 je	 SHORT $LN46@RawDevices
  00a31	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _bSysPartitionSelected, 1
  00a3b	84 c0		 test	 al, al
  00a3d	75 2b		 jne	 SHORT $LN38@RawDevices
$LN46@RawDevices:
  00a3f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSysPartitionSelected, 0

; 3910 : 			bSysDriveSelected = FALSE;
; 3911 : 
; 3912 : #endif	// #ifdef VOLFORMAT
; 3913 : 
; 3914 : 			if (!selectedDevice.IsPartition && !selectedDevice.Floppy)

  00a49	84 c0		 test	 al, al
  00a4b	75 1d		 jne	 SHORT $LN38@RawDevices
  00a4d	38 45 83	 cmp	 BYTE PTR _selectedDevice$20[ebp+3], al
  00a50	75 18		 jne	 SHORT $LN38@RawDevices

; 3915 : 			{
; 3916 : 				// Whole device selected
; 3917 : 
; 3918 : #ifdef VOLFORMAT
; 3919 : 				if (selectedDevice.ContainsSystem && !selectedDevice.IsPartition)
; 3920 : 				{
; 3921 : 					if (WizardMode != WIZARD_MODE_SYS_DEVICE)
; 3922 : 					{
; 3923 : 						if (AskYesNo ("CONFIRM_SYSTEM_ENCRYPTION_MODE") == IDNO)
; 3924 : 						{
; 3925 : 							NormalCursor ();
; 3926 : 							EndDialog (hwndDlg, IDCANCEL);
; 3927 : 							return 1;
; 3928 : 						}
; 3929 : 
; 3930 : 						bSysDriveSelected = TRUE;
; 3931 : 						bSysPartitionSelected = FALSE;
; 3932 : 						lpszFileName[0] = 0;
; 3933 : 						SwitchWizardToSysEncMode ();
; 3934 : 
; 3935 : 						NormalCursor ();
; 3936 : 						EndDialog (hwndDlg, IDOK);
; 3937 : 						return 1;
; 3938 : 					}
; 3939 : 					else
; 3940 : 					{
; 3941 : 						// This should never be the case because the Select Device dialog is not available in this wizard mode
; 3942 : 						bSysDriveSelected = TRUE;
; 3943 : 						bSysPartitionSelected = FALSE;
; 3944 : 						lpszFileName[0] = 0;
; 3945 : 						SwitchWizardToSysEncMode ();
; 3946 : 						NormalCursor ();
; 3947 : 						EndDialog (hwndDlg, IDCANCEL);
; 3948 : 						return 1;
; 3949 : 					}
; 3950 : 				}
; 3951 : 
; 3952 : 				// Disallow format if the device contains partitions, but not if the partition is virtual or system 
; 3953 : 				if (!selectedDevice.IsVirtualPartition
; 3954 : 					&& !bHiddenVolDirect)
; 3955 : 				{
; 3956 : 					if (!selectedDevice.Partitions.empty())
; 3957 : 					{
; 3958 : 						EnableWindow (GetDlgItem (hwndDlg, IDOK), FALSE);
; 3959 : 						Error ("DEVICE_PARTITIONS_ERR_W_INPLACE_ENC_NOTE");
; 3960 : 						return 1;
; 3961 : 					}
; 3962 : 
; 3963 : 					if (AskWarnNoYes ("WHOLE_NONSYS_DEVICE_ENC_CONFIRM") == IDNO)
; 3964 : 						return 1;
; 3965 : 				}
; 3966 : #else	// #ifdef VOLFORMAT
; 3967 : 
; 3968 : 				bSysDriveSelected = (selectedDevice.ContainsSystem && !selectedDevice.IsPartition);

  00a52	33 c0		 xor	 eax, eax

; 3969 : 				bSysPartitionSelected = FALSE;

  00a54	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSysPartitionSelected, 0
  00a5e	84 c9		 test	 cl, cl
  00a60	0f 95 c0	 setne	 al
  00a63	a3 00 00 00 00	 mov	 DWORD PTR _bSysDriveSelected, eax

; 3970 : 
; 3971 : #endif	// #ifdef VOLFORMAT
; 3972 : 			}
; 3973 : 			else 

  00a68	eb 0a		 jmp	 SHORT $LN39@RawDevices
$LN38@RawDevices:

; 3974 : 				bSysDriveSelected = FALSE;

  00a6a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSysDriveSelected, 0
$LN39@RawDevices:

; 3975 : 
; 3976 : #ifdef VOLFORMAT
; 3977 : 			bRemovableHostDevice = selectedDevice.Removable;
; 3978 : #endif
; 3979 : 			NormalCursor ();

  00a74	e8 00 00 00 00	 call	 _NormalCursor

; 3980 : 			EndDialog (hwndDlg, IDOK);

  00a79	6a 01		 push	 1
  00a7b	56		 push	 esi
  00a7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 3981 : 			return 1;

  00a82	8d 4d 80	 lea	 ecx, DWORD PTR _selectedDevice$20[ebp]
  00a85	e8 00 00 00 00	 call	 ??1HostDevice@@QAE@XZ	; HostDevice::~HostDevice
  00a8a	b8 01 00 00 00	 mov	 eax, 1
  00a8f	e9 5d f6 ff ff	 jmp	 $LN1@RawDevices
$LN33@RawDevices:

; 3982 : 		}
; 3983 : 
; 3984 : 		if (lw == IDCANCEL)

  00a94	66 83 f8 02	 cmp	 ax, 2
  00a98	0f 85 51 f6 ff
	ff		 jne	 $LN40@RawDevices

; 3985 : 		{
; 3986 : 			NormalCursor ();

  00a9e	e8 00 00 00 00	 call	 _NormalCursor

; 3987 : 			EndDialog (hwndDlg, IDCANCEL);

  00aa3	6a 02		 push	 2
  00aa5	56		 push	 esi
  00aa6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 3988 : 			return 1;

  00aac	b8 01 00 00 00	 mov	 eax, 1
  00ab1	e9 3b f6 ff ff	 jmp	 $LN1@RawDevices
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_RawDevicesDlgProc@16$23:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$_RawDevicesDlgProc@16:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 8a 30 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2768]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_RawDevicesDlgProc@16
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_RawDevicesDlgProc@16 ENDP
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsSystemDevicePath
_TEXT	SEGMENT
_path$ = 8						; size = 4
_hwndDlg$ = 12						; size = 4
_bReliableRequired$ = 16				; size = 4
_IsSystemDevicePath PROC				; COMDAT

; 3387 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3388 : 	if (!bCachedSysDevicePathsValid
; 3389 : 		&& bReliableRequired)

  00003	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bCachedSysDevicePathsValid@@3DA, 0 ; bCachedSysDevicePathsValid
  0000a	75 1a		 jne	 SHORT $LN3@IsSystemDe
  0000c	83 7d 10 00	 cmp	 DWORD PTR _bReliableRequired$[ebp], 0
  00010	74 14		 je	 SHORT $LN3@IsSystemDe

; 3390 : 	{
; 3391 : 		if (!GetSysDevicePaths (hwndDlg))

  00012	ff 75 0c	 push	 DWORD PTR _hwndDlg$[ebp]
  00015	e8 00 00 00 00	 call	 ?GetSysDevicePaths@@YAHPAUHWND__@@@Z ; GetSysDevicePaths
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 05		 jne	 SHORT $LN3@IsSystemDe

; 3392 : 			return -1;

  00021	83 c8 ff	 or	 eax, -1

; 3403 : 		return 3;
; 3404 : 
; 3405 : 	return 0;
; 3406 : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN3@IsSystemDe:

; 3393 : 	}
; 3394 : 
; 3395 : 	if (strlen (SysPartitionDevicePath) <= 1 || strlen (SysDriveDevicePath) <= 1)

  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  0002b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0002e	66 90		 npad	 2
$LL16@IsSystemDe:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL16@IsSystemDe
  00037	2b ca		 sub	 ecx, edx
  00039	56		 push	 esi
  0003a	83 f9 01	 cmp	 ecx, 1
  0003d	0f 86 d1 00 00
	00		 jbe	 $LN5@IsSystemDe
  00043	ba 00 00 00 00	 mov	 edx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  00048	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0004b	0f 1f 44 00 00	 npad	 5
$LL17@IsSystemDe:
  00050	8a 02		 mov	 al, BYTE PTR [edx]
  00052	42		 inc	 edx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL17@IsSystemDe
  00057	2b d6		 sub	 edx, esi
  00059	83 fa 01	 cmp	 edx, 1
  0005c	0f 86 b2 00 00
	00		 jbe	 $LN5@IsSystemDe

; 3397 : 
; 3398 : 	if (strncmp (path, SysPartitionDevicePath, max (strlen(path), strlen(SysPartitionDevicePath))) == 0)

  00062	8b 75 08	 mov	 esi, DWORD PTR _path$[ebp]
  00065	8b d6		 mov	 edx, esi
  00067	57		 push	 edi
  00068	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0006b	0f 1f 44 00 00	 npad	 5
$LL18@IsSystemDe:
  00070	8a 02		 mov	 al, BYTE PTR [edx]
  00072	42		 inc	 edx
  00073	84 c0		 test	 al, al
  00075	75 f9		 jne	 SHORT $LL18@IsSystemDe
  00077	2b d7		 sub	 edx, edi
  00079	3b d1		 cmp	 edx, ecx
  0007b	76 0e		 jbe	 SHORT $LN12@IsSystemDe
  0007d	8b ce		 mov	 ecx, esi
  0007f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL19@IsSystemDe:
  00082	8a 01		 mov	 al, BYTE PTR [ecx]
  00084	41		 inc	 ecx
  00085	84 c0		 test	 al, al
  00087	75 f9		 jne	 SHORT $LL19@IsSystemDe
  00089	2b ca		 sub	 ecx, edx
$LN12@IsSystemDe:
  0008b	51		 push	 ecx
  0008c	68 00 00 00 00	 push	 OFFSET ?SysPartitionDevicePath@@3PADA ; SysPartitionDevicePath
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 _strncmp
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	85 c0		 test	 eax, eax
  0009c	75 09		 jne	 SHORT $LN6@IsSystemDe

; 3399 : 		return 1;

  0009e	5f		 pop	 edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5e		 pop	 esi

; 3403 : 		return 3;
; 3404 : 
; 3405 : 	return 0;
; 3406 : }

  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN6@IsSystemDe:

; 3400 : 	else if (strncmp (path, SysDriveDevicePath, max (strlen(path), strlen(SysDriveDevicePath))) == 0)

  000a7	8b d6		 mov	 edx, esi
  000a9	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000ac	0f 1f 40 00	 npad	 4
$LL20@IsSystemDe:
  000b0	8a 02		 mov	 al, BYTE PTR [edx]
  000b2	42		 inc	 edx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL20@IsSystemDe
  000b7	2b d1		 sub	 edx, ecx
  000b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  000be	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL21@IsSystemDe:
  000c1	8a 01		 mov	 al, BYTE PTR [ecx]
  000c3	41		 inc	 ecx
  000c4	84 c0		 test	 al, al
  000c6	75 f9		 jne	 SHORT $LL21@IsSystemDe
  000c8	2b cf		 sub	 ecx, edi
  000ca	3b d1		 cmp	 edx, ecx
  000cc	76 0e		 jbe	 SHORT $LN14@IsSystemDe
  000ce	8b ce		 mov	 ecx, esi
  000d0	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL22@IsSystemDe:
  000d3	8a 01		 mov	 al, BYTE PTR [ecx]
  000d5	41		 inc	 ecx
  000d6	84 c0		 test	 al, al
  000d8	75 f9		 jne	 SHORT $LL22@IsSystemDe
  000da	2b ca		 sub	 ecx, edx
$LN14@IsSystemDe:
  000dc	51		 push	 ecx
  000dd	68 00 00 00 00	 push	 OFFSET ?SysDriveDevicePath@@3PADA ; SysDriveDevicePath
  000e2	56		 push	 esi
  000e3	e8 00 00 00 00	 call	 _strncmp
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	85 c0		 test	 eax, eax
  000ed	75 09		 jne	 SHORT $LN8@IsSystemDe

; 3401 : 		return 2;

  000ef	5f		 pop	 edi
  000f0	b8 02 00 00 00	 mov	 eax, 2
  000f5	5e		 pop	 esi

; 3403 : 		return 3;
; 3404 : 
; 3405 : 	return 0;
; 3406 : }

  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
$LN8@IsSystemDe:

; 3402 : 	else if (ExtraBootPartitionDevicePath == path)

  000f8	56		 push	 esi
  000f9	68 00 00 00 00	 push	 OFFSET ?ExtraBootPartitionDevicePath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; ExtraBootPartitionDevicePath
  000fe	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00103	83 c4 08	 add	 esp, 8
  00106	0f b6 c0	 movzx	 eax, al
  00109	f7 d8		 neg	 eax
  0010b	1b c0		 sbb	 eax, eax
  0010d	5f		 pop	 edi
  0010e	83 e0 03	 and	 eax, 3
  00111	5e		 pop	 esi

; 3403 : 		return 3;
; 3404 : 
; 3405 : 	return 0;
; 3406 : }

  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN5@IsSystemDe:

; 3396 : 		return -1;

  00114	83 c8 ff	 or	 eax, -1
  00117	5e		 pop	 esi

; 3403 : 		return 3;
; 3404 : 
; 3405 : 	return 0;
; 3406 : }

  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_IsSystemDevicePath ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _NotifyDriverOfPortableMode
_TEXT	SEGMENT
_dwResult$1 = -4					; size = 4
_NotifyDriverOfPortableMode PROC			; COMDAT

; 3269 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3270 : 	if (hDriver != INVALID_HANDLE_VALUE)

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR _hDriver
  00009	83 f8 ff	 cmp	 eax, -1
  0000c	74 1a		 je	 SHORT $LN2@NotifyDriv

; 3271 : 	{
; 3272 : 		DWORD dwResult;
; 3273 : 
; 3274 : 		DeviceIoControl (hDriver, GST_IOCTL_SET_PORTABLE_MODE_STATUS, NULL, 0, NULL, 0, &dwResult, NULL);

  0000e	6a 00		 push	 0
  00010	8d 4d fc	 lea	 ecx, DWORD PTR _dwResult$1[ebp]
  00013	51		 push	 ecx
  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	68 68 20 22 00	 push	 2236520			; 00222068H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
$LN2@NotifyDriv:

; 3275 : 	}
; 3276 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_NotifyDriverOfPortableMode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _OpenDevice
_TEXT	SEGMENT
_dwResult$ = 8						; size = 4
_lpszPath$ = 8						; size = 4
_driver$ = 12						; size = 4
_detectFilesystem$ = 16					; size = 4
_OpenDevice PROC					; COMDAT

; 3227 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3228 : 	DWORD dwResult;
; 3229 : 	BOOL bResult;
; 3230 : 
; 3231 : 	strcpy ((char *) &driver->wszFileName[0], lpszPath);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpszPath$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _driver$[ebp]
  0000a	8b d6		 mov	 edx, esi
  0000c	2b d1		 sub	 edx, ecx
  0000e	66 90		 npad	 2
$LL7@OpenDevice:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00015	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00019	84 c0		 test	 al, al
  0001b	75 f3		 jne	 SHORT $LL7@OpenDevice

; 3232 : 	ToUNICODE ((char *) &driver->wszFileName[0]);

  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _ToUNICODE

; 3233 : 
; 3234 : 	driver->bDetectGSTBootLoader = FALSE;
; 3235 : 	driver->DetectFilesystem = detectFilesystem;

  00023	8b 45 10	 mov	 eax, DWORD PTR _detectFilesystem$[ebp]
  00026	83 c4 04	 add	 esp, 4
  00029	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax

; 3236 : 
; 3237 : 	bResult = DeviceIoControl (hDriver, GST_IOCTL_OPEN_TEST,

  0002f	8d 45 08	 lea	 eax, DWORD PTR _dwResult$[ebp]
  00032	c7 86 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+520], 0
  0003c	6a 00		 push	 0
  0003e	50		 push	 eax
  0003f	68 18 02 00 00	 push	 536			; 00000218H
  00044	56		 push	 esi
  00045	68 18 02 00 00	 push	 536			; 00000218H
  0004a	56		 push	 esi
  0004b	68 34 20 22 00	 push	 2236468			; 00222034H
  00050	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32

; 3238 : 				   driver, sizeof (OPEN_TEST_STRUCT),
; 3239 : 				   driver, sizeof (OPEN_TEST_STRUCT),
; 3240 : 				   &dwResult, NULL);
; 3241 : 
; 3242 : 	if (bResult == FALSE)

  0005c	85 c0		 test	 eax, eax
  0005e	75 29		 jne	 SHORT $LN4@OpenDevice

; 3243 : 	{
; 3244 : 		dwResult = GetLastError ();

  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 3245 : 
; 3246 : 		if (dwResult == ERROR_SHARING_VIOLATION || dwResult == ERROR_NOT_READY)

  00066	83 f8 20	 cmp	 eax, 32			; 00000020H
  00069	74 0a		 je	 SHORT $LN5@OpenDevice
  0006b	83 f8 15	 cmp	 eax, 21			; 00000015H
  0006e	74 05		 je	 SHORT $LN5@OpenDevice

; 3250 : 			return TRUE;
; 3251 : 		}
; 3252 : 		else
; 3253 : 			return FALSE;

  00070	33 c0		 xor	 eax, eax
  00072	5e		 pop	 esi

; 3257 : }

  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN5@OpenDevice:

; 3247 : 		{
; 3248 : 			driver->GSTBootLoaderDetected = FALSE;

  00075	c7 86 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+524], 0

; 3249 : 			driver->FilesystemDetected = FALSE;

  0007f	c7 86 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+532], 0
$LN4@OpenDevice:

; 3254 : 	}
; 3255 : 		
; 3256 : 	return TRUE;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	5e		 pop	 esi

; 3257 : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_OpenDevice ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InitHelpFileName
_TEXT	SEGMENT
_szTemp$1 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_InitHelpFileName PROC					; COMDAT

; 3185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi

; 3186 : 	char *lpszTmp;
; 3187 : 
; 3188 : 	GetModuleFileName (NULL, szHelpFile, sizeof (szHelpFile));

  00014	68 04 01 00 00	 push	 260			; 00000104H
  00019	68 00 00 00 00	 push	 OFFSET _szHelpFile
  0001e	6a 00		 push	 0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 3189 : 	lpszTmp = strrchr (szHelpFile, '\\');

  00026	6a 5c		 push	 92			; 0000005cH
  00028	68 00 00 00 00	 push	 OFFSET _szHelpFile
  0002d	e8 00 00 00 00	 call	 _strrchr
  00032	8b f8		 mov	 edi, eax
  00034	83 c4 08	 add	 esp, 8

; 3190 : 	if (lpszTmp)

  00037	85 ff		 test	 edi, edi
  00039	0f 84 e7 00 00
	00		 je	 $LN6@InitHelpFi

; 3191 : 	{
; 3192 : 		char szTemp[GST_MAX_PATH];
; 3193 : 
; 3194 : 		// Primary file name
; 3195 : 		if (strcmp (GetPreferredLangId(), "en") == 0
; 3196 : 			|| GetPreferredLangId() == NULL)

  0003f	56		 push	 esi
  00040	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_02LFNMGJAP@en?$AA@
  00045	e8 00 00 00 00	 call	 _GetPreferredLangId
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL16@InitHelpFi:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00054	75 1a		 jne	 SHORT $LN17@InitHelpFi
  00056	84 c9		 test	 cl, cl
  00058	74 12		 je	 SHORT $LN18@InitHelpFi
  0005a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0005d	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00060	75 0e		 jne	 SHORT $LN17@InitHelpFi
  00062	83 c0 02	 add	 eax, 2
  00065	83 c6 02	 add	 esi, 2
  00068	84 c9		 test	 cl, cl
  0006a	75 e4		 jne	 SHORT $LL16@InitHelpFi
$LN18@InitHelpFi:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN19@InitHelpFi
$LN17@InitHelpFi:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN19@InitHelpFi:
  00075	5e		 pop	 esi
  00076	85 c0		 test	 eax, eax
  00078	74 45		 je	 SHORT $LN5@InitHelpFi
  0007a	e8 00 00 00 00	 call	 _GetPreferredLangId
  0007f	85 c0		 test	 eax, eax
  00081	74 3c		 je	 SHORT $LN5@InitHelpFi

; 3199 : 		}
; 3200 : 		else
; 3201 : 		{
; 3202 : 			sprintf (szTemp, "GostCrypt User Guide.%s.pdf", GetPreferredLangId());

  00083	e8 00 00 00 00	 call	 _GetPreferredLangId
  00088	50		 push	 eax
  00089	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$1[ebp]
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JHDHCLPC@GostCrypt?5User?5Guide?4?$CFs?4pdf?$AA@
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _sprintf

; 3203 : 			strcpy (++lpszTmp, szTemp);

  0009a	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$1[ebp]
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  000a6	8b c1		 mov	 eax, ecx
  000a8	2b d0		 sub	 edx, eax
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL8@InitHelpFi:
  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000b5	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  000b9	84 c0		 test	 al, al
  000bb	75 f3		 jne	 SHORT $LL8@InitHelpFi
  000bd	eb 20		 jmp	 SHORT $LN4@InitHelpFi
$LN5@InitHelpFi:

; 3197 : 		{
; 3198 : 			strcpy (++lpszTmp, "GostCrypt User Guide.pdf");

  000bf	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@
  000c6	0f 11 47 01	 movups	 XMMWORD PTR [edi+1], xmm0
  000ca	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@+16
  000d2	66 0f d6 47 11	 movq	 QWORD PTR [edi+17], xmm0
  000d7	a0 18 00 00 00	 mov	 al, BYTE PTR ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@+24
  000dc	88 47 19	 mov	 BYTE PTR [edi+25], al
$LN4@InitHelpFi:

; 3204 : 		}
; 3205 : 
; 3206 : 		// Secondary file name (used when localized documentation is not found).
; 3207 : 		GetModuleFileName (NULL, szHelpFile2, sizeof (szHelpFile2));

  000df	68 04 01 00 00	 push	 260			; 00000104H
  000e4	68 00 00 00 00	 push	 OFFSET _szHelpFile2
  000e9	6a 00		 push	 0
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 3208 : 		lpszTmp = strrchr (szHelpFile2, '\\');

  000f1	6a 5c		 push	 92			; 0000005cH
  000f3	68 00 00 00 00	 push	 OFFSET _szHelpFile2
  000f8	e8 00 00 00 00	 call	 _strrchr
  000fd	8b c8		 mov	 ecx, eax
  000ff	83 c4 08	 add	 esp, 8

; 3209 : 		if (lpszTmp)

  00102	85 c9		 test	 ecx, ecx
  00104	74 20		 je	 SHORT $LN6@InitHelpFi

; 3210 : 		{
; 3211 : 			strcpy (++lpszTmp, "GostCrypt User Guide.pdf");

  00106	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@
  0010d	0f 11 41 01	 movups	 XMMWORD PTR [ecx+1], xmm0
  00111	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@+16
  00119	66 0f d6 41 11	 movq	 QWORD PTR [ecx+17], xmm0
  0011e	a0 18 00 00 00	 mov	 al, BYTE PTR ??_C@_0BJ@ELFIPPEB@GostCrypt?5User?5Guide?4pdf?$AA@+24
  00123	88 41 19	 mov	 BYTE PTR [ecx+25], al
$LN6@InitHelpFi:

; 3212 : 		}
; 3213 : 	}
; 3214 : }

  00126	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	33 cd		 xor	 ecx, ebp
  0012b	5f		 pop	 edi
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
_InitHelpFileName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InitApp
_TEXT	SEGMENT
_wc$ = -220						; size = 40
_size$1 = -180						; size = 4
_size$2 = -180						; size = 4
_val$3 = -176						; size = 4
_k$4 = -172						; size = 4
_hkey$5 = -172						; size = 4
_osEx$6 = -168						; size = 156
_langId$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_lpszCommandLine$ = 12					; size = 4
_InitApp PROC						; COMDAT

; 2985 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _hInstance$[ebp]

; 2986 : 	WNDCLASS wc;
; 2987 : 	char langId[6];
; 2988 : 
; 2989 : 	/* Save the instance handle for later */
; 2990 : 	hInst = hInstance;

  00018	89 3d 00 00 00
	00		 mov	 DWORD PTR _hInst, edi

; 2991 : 
; 2992 : 	InitOSVersionInfo();

  0001e	e8 00 00 00 00	 call	 _InitOSVersionInfo

; 2993 : 
; 2994 : 	SetErrorMode (SetErrorMode (0) | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX);

  00023	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetErrorMode@4
  00029	6a 00		 push	 0
  0002b	ff d6		 call	 esi
  0002d	0d 01 80 00 00	 or	 eax, 32769		; 00008001H
  00032	50		 push	 eax
  00033	ff d6		 call	 esi

; 2995 : 	CoInitialize (NULL);

  00035	6a 00		 push	 0
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 2996 : 
; 2997 : #ifndef SETUP
; 2998 : 	// Application ID
; 2999 : 	typedef HRESULT (WINAPI *SetAppId_t) (PCWSTR appID);
; 3000 : 	SetAppId_t setAppId = (SetAppId_t) GetProcAddress (GetModuleHandle ("shell32.dll"), "SetCurrentProcessExplicitAppUserModelID");
; 3001 : 
; 3002 : 	if (setAppId)
; 3003 : 		setAppId (GST_APPLICATION_ID);
; 3004 : #endif
; 3005 : 
; 3006 : 	// Language
; 3007 : 	langId[0] = 0;
; 3008 : 	SetPreferredLangId (ConfigReadString ("Language", "", langId, sizeof (langId)));

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  00042	c6 45 f4 00	 mov	 BYTE PTR _langId$[ebp], 0
  00046	85 c0		 test	 eax, eax
  00048	75 26		 jne	 SHORT $LN35@InitApp
  0004a	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _size$1[ebp]
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNANDAA@Configuration?4xml?$AA@
  00056	e8 00 00 00 00	 call	 _GetConfigPath
  0005b	83 c4 04	 add	 esp, 4
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _LoadFile
  00064	83 c4 08	 add	 esp, 8
  00067	a3 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, eax
  0006c	85 c0		 test	 eax, eax
  0006e	74 32		 je	 SHORT $LN31@InitApp
$LN35@InitApp:
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_08BENDAOKD@Language?$AA@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _XmlFindElementByAttributeValue
  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	85 c0		 test	 eax, eax
  0008a	74 16		 je	 SHORT $LN31@InitApp
  0008c	6a 06		 push	 6
  0008e	8d 4d f4	 lea	 ecx, DWORD PTR _langId$[ebp]
  00091	51		 push	 ecx
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _XmlGetNodeText
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	b9 01 00 00 00	 mov	 ecx, 1
  000a0	eb 02		 jmp	 SHORT $LN28@InitApp
$LN31@InitApp:
  000a2	33 c9		 xor	 ecx, ecx
$LN28@InitApp:
  000a4	85 c9		 test	 ecx, ecx
  000a6	8d 55 f4	 lea	 edx, DWORD PTR _langId$[ebp]
  000a9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000ae	0f 45 c2	 cmovne	 eax, edx
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _SetPreferredLangId

; 3009 : 	
; 3010 : 	if (langId[0] == 0)

  000b7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DialogBoxParamW@20
  000bd	83 c4 04	 add	 esp, 4
  000c0	80 7d f4 00	 cmp	 BYTE PTR _langId$[ebp], 0
  000c4	75 16		 jne	 SHORT $LN4@InitApp

; 3011 : 		DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_LANGUAGE), NULL,

  000c6	6a 01		 push	 1
  000c8	68 00 00 00 00	 push	 OFFSET _LanguageDlgProc@16
  000cd	6a 00		 push	 0
  000cf	68 01 02 00 00	 push	 513			; 00000201H
  000d4	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  000da	ff d6		 call	 esi
$LN4@InitApp:

; 3012 : 			(DLGPROC) LanguageDlgProc, (LPARAM) 1);
; 3013 : 
; 3014 : 	LoadLanguageFile ();

  000dc	e8 00 00 00 00	 call	 _LoadLanguageFile

; 3015 : 
; 3016 : #ifndef SETUP
; 3017 : 	// UAC elevation moniker cannot be used in portable mode.
; 3018 : 	// A new instance of the application must be created with elevated privileges.
; 3019 : 	if (IsNonInstallMode () && !IsAdmin () && IsUacSupported ())
; 3020 : 	{
; 3021 : 		char modPath[MAX_PATH], newCmdLine[4096];
; 3022 : 		WNDCLASSEX wcex;
; 3023 : 		HWND hWnd;
; 3024 : 
; 3025 : 		if (strstr (lpszCommandLine, "/q UAC ") == lpszCommandLine)
; 3026 : 		{
; 3027 : 			Error ("UAC_INIT_ERROR");
; 3028 : 			exit (1);
; 3029 : 		}
; 3030 : 
; 3031 : 		memset (&wcex, 0, sizeof (wcex));
; 3032 : 		wcex.cbSize = sizeof(WNDCLASSEX); 
; 3033 : 		wcex.lpfnWndProc = (WNDPROC) NonInstallUacWndProc;
; 3034 : 		wcex.hInstance = hInstance;
; 3035 : 		wcex.lpszClassName = "GostCrypt";
; 3036 : 		RegisterClassEx (&wcex);
; 3037 : 
; 3038 : 		// A small transparent window is necessary to bring the new instance to foreground
; 3039 : 		hWnd = CreateWindowEx (WS_EX_TOOLWINDOW | WS_EX_LAYERED,
; 3040 : 			"GostCrypt", "GostCrypt", 0,
; 3041 : 			GetSystemMetrics (SM_CXSCREEN)/2,
; 3042 : 			GetSystemMetrics (SM_CYSCREEN)/2,
; 3043 : 			1, 1, NULL, NULL, hInstance, NULL);
; 3044 : 
; 3045 : 		SetLayeredWindowAttributes (hWnd, 0, 0, LWA_ALPHA);
; 3046 : 		ShowWindow (hWnd, SW_SHOWNORMAL);
; 3047 : 
; 3048 : 		GetModuleFileName (NULL, modPath, sizeof (modPath));
; 3049 : 
; 3050 : 		strcpy (newCmdLine, "/q UAC ");
; 3051 : 		strcat_s (newCmdLine, sizeof (newCmdLine), lpszCommandLine);
; 3052 : 
; 3053 : 		if ((int)ShellExecute (hWnd, "runas", modPath, newCmdLine, NULL, SW_SHOWNORMAL) <= 32)
; 3054 : 			exit (1);
; 3055 : 
; 3056 : 		Sleep (2000);
; 3057 : 		exit (0);
; 3058 : 	}
; 3059 : #endif
; 3060 : 
; 3061 : 	SetUnhandledExceptionFilter (ExceptionHandler);

  000e1	68 00 00 00 00	 push	 OFFSET ?ExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; ExceptionHandler
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 3062 : 	_set_invalid_parameter_handler (InvalidParameterHandler);

  000ec	68 00 00 00 00	 push	 OFFSET ?InvalidParameterHandler@@YAXPB_W00II@Z ; InvalidParameterHandler
  000f1	e8 00 00 00 00	 call	 __set_invalid_parameter_handler
  000f6	83 c4 04	 add	 esp, 4

; 3063 : 
; 3064 : 	RemoteSession = GetSystemMetrics (SM_REMOTESESSION) != 0;

  000f9	68 00 10 00 00	 push	 4096			; 00001000H
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00104	f7 d8		 neg	 eax
  00106	1b c0		 sbb	 eax, eax
  00108	f7 d8		 neg	 eax

; 3065 : 
; 3066 : 	// OS version check
; 3067 : 	if (CurrentOSMajor < 5)

  0010a	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _CurrentOSMajor, 5
  00111	a3 00 00 00 00	 mov	 DWORD PTR _RemoteSession, eax
  00116	0f 8c 20 02 00
	00		 jl	 $LN36@InitApp

; 3071 : 	}
; 3072 : 	else
; 3073 : 	{
; 3074 : 		OSVERSIONINFOEX osEx;
; 3075 : 
; 3076 : 		// Service pack check & warnings about critical MS issues
; 3077 : 		osEx.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
; 3078 : 		if (GetVersionEx ((LPOSVERSIONINFOA) &osEx) != 0)

  0011c	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _osEx$6[ebp]
  00122	c7 85 58 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR _osEx$6[ebp], 156 ; 0000009cH
  0012c	50		 push	 eax
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4
  00133	85 c0		 test	 eax, eax
  00135	0f 84 f5 00 00
	00		 je	 $LN10@InitApp

; 3079 : 		{
; 3080 : 			CurrentOSServicePack = osEx.wServicePackMajor;

  0013b	66 8b 4d ec	 mov	 cx, WORD PTR _osEx$6[ebp+148]
  0013f	0f b7 c1	 movzx	 eax, cx
  00142	a3 00 00 00 00	 mov	 DWORD PTR _CurrentOSServicePack, eax

; 3081 : 			switch (nCurrentOS)

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR _nCurrentOS
  0014c	83 e8 07	 sub	 eax, 7
  0014f	74 4b		 je	 SHORT $LN8@InitApp
  00151	83 e8 01	 sub	 eax, 1
  00154	0f 85 d6 00 00
	00		 jne	 $LN10@InitApp

; 3099 : 				}
; 3100 : 				break;
; 3101 : 
; 3102 : 			case WIN_XP:
; 3103 : 				if (osEx.wServicePackMajor < 1)

  0015a	66 83 f9 01	 cmp	 cx, 1
  0015e	0f 83 cc 00 00
	00		 jae	 $LN10@InitApp

; 3104 : 				{
; 3105 : 					HKEY k;
; 3106 : 					// PE environment does not report version of SP
; 3107 : 					if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Control\\minint", 0, KEY_READ, &k) != ERROR_SUCCESS)

  00164	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _k$4[ebp]
  0016a	50		 push	 eax
  0016b	68 19 00 02 00	 push	 131097			; 00020019H
  00170	6a 00		 push	 0
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KAEBDPBB@System?2CurrentControlSet?2Control@
  00177	68 02 00 00 80	 push	 -2147483646		; 80000002H
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00182	85 c0		 test	 eax, eax
  00184	0f 84 9a 00 00
	00		 je	 $LN11@InitApp

; 3108 : 						Warning ("LARGE_IDE_WARNING_XP");

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LMHPGAIF@LARGE_IDE_WARNING_XP?$AA@
  0018f	e8 00 00 00 00	 call	 _Warning
  00194	83 c4 04	 add	 esp, 4

; 3109 : 					else

  00197	e9 94 00 00 00	 jmp	 $LN10@InitApp
$LN8@InitApp:

; 3082 : 			{
; 3083 : 			case WIN_2000:
; 3084 : 				if (osEx.wServicePackMajor < 3)

  0019c	66 83 f9 03	 cmp	 cx, 3
  001a0	73 0f		 jae	 SHORT $LN9@InitApp

; 3085 : 					Warning ("LARGE_IDE_WARNING_2K");

  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FAAJOFOJ@LARGE_IDE_WARNING_2K?$AA@
  001a7	e8 00 00 00 00	 call	 _Warning
  001ac	83 c4 04	 add	 esp, 4

; 3086 : 				else

  001af	eb 7f		 jmp	 SHORT $LN10@InitApp
$LN9@InitApp:

; 3087 : 				{
; 3088 : 					DWORD val = 0, size = sizeof(val);
; 3089 : 					HKEY hkey;
; 3090 : 
; 3091 : 					if (RegOpenKeyEx (HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Services\\Atapi\\Parameters", 0, KEY_READ, &hkey) == ERROR_SUCCESS
; 3092 : 						&& (RegQueryValueEx (hkey, "EnableBigLba", 0, 0, (LPBYTE) &val, &size) != ERROR_SUCCESS

  001b1	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _hkey$5[ebp]
  001b7	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _val$3[ebp], 0
  001c1	50		 push	 eax
  001c2	68 19 00 02 00	 push	 131097			; 00020019H
  001c7	6a 00		 push	 0
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@HENCBNAN@SYSTEM?2CurrentControlSet?2Service@
  001ce	68 02 00 00 80	 push	 -2147483646		; 80000002H
  001d3	c7 85 4c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR _size$2[ebp], 4
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  001e3	85 c0		 test	 eax, eax
  001e5	75 3d		 jne	 SHORT $LN11@InitApp
  001e7	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _size$2[ebp]
  001ed	50		 push	 eax
  001ee	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _val$3[ebp]
  001f4	50		 push	 eax
  001f5	6a 00		 push	 0
  001f7	6a 00		 push	 0
  001f9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MGFEFGLL@EnableBigLba?$AA@
  001fe	ff b5 54 ff ff
	ff		 push	 DWORD PTR _hkey$5[ebp]
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0020a	85 c0		 test	 eax, eax
  0020c	75 09		 jne	 SHORT $LN12@InitApp
  0020e	83 bd 50 ff ff
	ff 01		 cmp	 DWORD PTR _val$3[ebp], 1
  00215	74 0d		 je	 SHORT $LN11@InitApp
$LN12@InitApp:

; 3093 : 						|| val != 1))
; 3094 : 
; 3095 : 					{
; 3096 : 						Warning ("LARGE_IDE_WARNING_2K_REGISTRY");

  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CHBDAIFD@LARGE_IDE_WARNING_2K_REGISTRY?$AA@
  0021c	e8 00 00 00 00	 call	 _Warning
  00221	83 c4 04	 add	 esp, 4
$LN11@InitApp:

; 3097 : 					}
; 3098 : 					RegCloseKey (hkey);

  00224	ff b5 54 ff ff
	ff		 push	 DWORD PTR _hkey$5[ebp]
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN10@InitApp:

; 3110 : 						RegCloseKey (k);
; 3111 : 				}
; 3112 : 				break;
; 3113 : 			}
; 3114 : 		}
; 3115 : 	}
; 3116 : 
; 3117 : 	/* Get the attributes for the standard dialog class */
; 3118 : 	if ((GetClassInfo (hInst, WINDOWS_DIALOG_CLASS, &wc)) == 0)

  00230	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _wc$[ebp]
  00236	50		 push	 eax
  00237	68 00 00 00 00	 push	 OFFSET ??_C@_06FGFHJIJL@?$CD32770?$AA@
  0023c	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassInfoA@12
  00248	85 c0		 test	 eax, eax
  0024a	0f 84 11 01 00
	00		 je	 $LN38@InitApp

; 3122 : 	}
; 3123 : 
; 3124 : #ifndef SETUP
; 3125 : 	wc.hIcon = LoadIcon (hInstance, MAKEINTRESOURCE (IDI_GOSTCRYPT_ICON));
; 3126 : #else
; 3127 : #include "../setup/resource.h"
; 3128 : 	wc.hIcon = LoadIcon (hInstance, MAKEINTRESOURCE (IDI_SETUP));

  00250	6a 68		 push	 104			; 00000068H
  00252	57		 push	 edi
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 3129 : #endif
; 3130 : 	wc.lpszClassName = GST_DLG_CLASS;
; 3131 : 	wc.lpfnWndProc = &CustomDlgProc;
; 3132 : 	wc.hCursor = LoadCursor (NULL, IDC_ARROW);

  00259	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__LoadCursorA@8
  0025f	68 00 7f 00 00	 push	 32512			; 00007f00H
  00264	6a 00		 push	 0
  00266	89 85 38 ff ff
	ff		 mov	 DWORD PTR _wc$[ebp+20], eax
  0026c	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+36], OFFSET ??_C@_09ODDMBMG@CustomDlg?$AA@
  00276	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+4], OFFSET _CustomDlgProc@16
  00280	ff d7		 call	 edi
  00282	89 85 3c ff ff
	ff		 mov	 DWORD PTR _wc$[ebp+24], eax

; 3133 : 	wc.cbWndExtra = DLGWINDOWEXTRA;
; 3134 : 
; 3135 : 	hDlgClass = RegisterClass (&wc);

  00288	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _wc$[ebp]
  0028e	50		 push	 eax
  0028f	c7 85 30 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _wc$[ebp+12], 30 ; 0000001eH
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  0029f	66 a3 00 00 00
	00		 mov	 WORD PTR ?hDlgClass@@3GA, ax ; hDlgClass

; 3136 : 	if (hDlgClass == 0)

  002a5	66 85 c0	 test	 ax, ax
  002a8	0f 84 c7 00 00
	00		 je	 $LN39@InitApp

; 3140 : 	}
; 3141 : 
; 3142 : 	wc.lpszClassName = GST_SPLASH_CLASS;
; 3143 : 	wc.lpfnWndProc = &SplashDlgProc;
; 3144 : 	wc.hCursor = LoadCursor (NULL, IDC_ARROW);

  002ae	68 00 7f 00 00	 push	 32512			; 00007f00H
  002b3	6a 00		 push	 0
  002b5	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+36], OFFSET ??_C@_09EPIDNIBP@SplashDlg?$AA@
  002bf	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _wc$[ebp+4], OFFSET _SplashDlgProc@16
  002c9	ff d7		 call	 edi
  002cb	89 85 3c ff ff
	ff		 mov	 DWORD PTR _wc$[ebp+24], eax

; 3145 : 	wc.cbWndExtra = DLGWINDOWEXTRA;
; 3146 : 
; 3147 : 	hSplashClass = RegisterClass (&wc);

  002d1	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _wc$[ebp]
  002d7	50		 push	 eax
  002d8	c7 85 30 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _wc$[ebp+12], 30 ; 0000001eH
  002e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  002e8	66 a3 00 00 00
	00		 mov	 WORD PTR ?hSplashClass@@3GA, ax ; hSplashClass

; 3148 : 	if (hSplashClass == 0)

  002ee	66 85 c0	 test	 ax, ax
  002f1	0f 84 92 00 00
	00		 je	 $LN40@InitApp

; 3152 : 	}
; 3153 : 
; 3154 : 	// Required for RichEdit text fields to work
; 3155 : 	if (LoadLibraryEx("riched20.dll", NULL, LOAD_LIBRARY_SEARCH_SYSTEM32) == NULL)

  002f7	68 00 08 00 00	 push	 2048			; 00000800H
  002fc	6a 00		 push	 0
  002fe	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KPDNKMDE@riched20?4dll?$AA@
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryExA@12
  00309	85 c0		 test	 eax, eax
  0030b	0f 84 8c 00 00
	00		 je	 $LN41@InitApp

; 3160 : 	}
; 3161 : 
; 3162 : 	// DPI and GUI aspect ratio
; 3163 : 	DialogBoxParamW (hInst, MAKEINTRESOURCEW (IDD_AUXILIARY_DLG), NULL,

  00311	6a 01		 push	 1
  00313	68 00 00 00 00	 push	 OFFSET ?AuxiliaryDlgProc@@YGHPAUHWND__@@IIJ@Z ; AuxiliaryDlgProc
  00318	6a 00		 push	 0
  0031a	68 04 02 00 00	 push	 516			; 00000204H
  0031f	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00325	ff d6		 call	 esi

; 3164 : 		(DLGPROC) AuxiliaryDlgProc, (LPARAM) 1);
; 3165 : 
; 3166 : 	InitHelpFileName ();

  00327	e8 00 00 00 00	 call	 _InitHelpFileName

; 3167 : 
; 3168 : #ifndef SETUP
; 3169 : 	if (!EncryptionThreadPoolStart (ReadEncryptionThreadPoolFreeCpuCountLimit()))
; 3170 : 	{
; 3171 : 		handleWin32Error (NULL);
; 3172 : 		exit (1);
; 3173 : 	}
; 3174 : #endif
; 3175 : }

  0032c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032f	5f		 pop	 edi
  00330	33 cd		 xor	 ecx, ebp
  00332	5e		 pop	 esi
  00333	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00338	8b e5		 mov	 esp, ebp
  0033a	5d		 pop	 ebp
  0033b	c3		 ret	 0
$LN36@InitApp:

; 3068 : 	{
; 3069 : 		MessageBoxW (NULL, GetString ("UNSUPPORTED_OS"), lpszTitle, MB_ICONSTOP);

  0033c	6a 10		 push	 16			; 00000010H
  0033e	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IEEIGCBO@UNSUPPORTED_OS?$AA@
  00349	e8 00 00 00 00	 call	 _GetString
  0034e	83 c4 04	 add	 esp, 4
  00351	50		 push	 eax
  00352	6a 00		 push	 0
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 3070 : 		exit (1);

  0035a	6a 01		 push	 1
  0035c	e8 00 00 00 00	 call	 _exit
$LN42@InitApp:
$LN38@InitApp:

; 3119 : 	{
; 3120 : 		handleWin32Error (NULL);

  00361	6a 00		 push	 0
  00363	e8 00 00 00 00	 call	 _handleWin32Error
  00368	83 c4 04	 add	 esp, 4

; 3121 : 		AbortProcess ("INIT_REGISTER");

  0036b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
  00370	e8 00 00 00 00	 call	 _AbortProcess
$LN43@InitApp:
$LN39@InitApp:

; 3137 : 	{
; 3138 : 		handleWin32Error (NULL);

  00375	6a 00		 push	 0
  00377	e8 00 00 00 00	 call	 _handleWin32Error
  0037c	83 c4 04	 add	 esp, 4

; 3139 : 		AbortProcess ("INIT_REGISTER");

  0037f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
  00384	e8 00 00 00 00	 call	 _AbortProcess
$LN44@InitApp:
$LN40@InitApp:

; 3149 : 	{
; 3150 : 		handleWin32Error (NULL);

  00389	6a 00		 push	 0
  0038b	e8 00 00 00 00	 call	 _handleWin32Error
  00390	83 c4 04	 add	 esp, 4

; 3151 : 		AbortProcess ("INIT_REGISTER");

  00393	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PKFAAFKJ@INIT_REGISTER?$AA@
  00398	e8 00 00 00 00	 call	 _AbortProcess
$LN45@InitApp:
$LN41@InitApp:

; 3156 : 	{
; 3157 : 		// This error is fatal e.g. because legal notices could not be displayed
; 3158 : 		handleWin32Error (NULL);

  0039d	6a 00		 push	 0
  0039f	e8 00 00 00 00	 call	 _handleWin32Error
  003a4	83 c4 04	 add	 esp, 4

; 3159 : 		AbortProcess ("INIT_RICHEDIT");	

  003a7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HCBFIMAP@INIT_RICHEDIT?$AA@
  003ac	e8 00 00 00 00	 call	 _AbortProcess
$LN46@InitApp:
$LN33@InitApp:
  003b1	cc		 int	 3
_InitApp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InitOSVersionInfo
_TEXT	SEGMENT
_os$ = -308						; size = 148
_osEx$1 = -160						; size = 156
_osEx$2 = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_InitOSVersionInfo PROC					; COMDAT

; 2915 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi

; 2916 : 	OSVERSIONINFO os;
; 2917 : 	os.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
; 2918 : 
; 2919 : 	if (GetVersionEx (&os) == FALSE)

  00014	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetVersionExA@4
  0001a	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _os$[ebp]
  00020	50		 push	 eax
  00021	c7 85 cc fe ff
	ff 94 00 00 00	 mov	 DWORD PTR _os$[ebp], 148 ; 00000094H
  0002b	ff d6		 call	 esi
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 f3 01 00
	00		 je	 $LN43@InitOSVers

; 2921 : 
; 2922 : 	CurrentOSMajor = os.dwMajorVersion; //get the major value of OS example : Windows 10 : 10
; 2923 : 	CurrentOSMinor = os.dwMinorVersion; // get minor value of OS example : Windows 10.3 : 3
; 2924 : 
; 2925 : 	/* détermination de la version de  l'OS utilisé  (windows) */
; 2926 : 	if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 5 && CurrentOSMinor == 0)

  00035	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _os$[ebp+16]
  0003b	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _os$[ebp+4]
  00041	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _os$[ebp+8]
  00047	89 0d 00 00 00
	00		 mov	 DWORD PTR _CurrentOSMajor, ecx
  0004d	a3 00 00 00 00	 mov	 DWORD PTR _CurrentOSMinor, eax
  00052	83 fa 02	 cmp	 edx, 2
  00055	0f 85 43 01 00
	00		 jne	 $LN19@InitOSVers
  0005b	83 f9 05	 cmp	 ecx, 5
  0005e	0f 85 94 00 00
	00		 jne	 $LN32@InitOSVers
  00064	85 c0		 test	 eax, eax
  00066	75 19		 jne	 SHORT $LN33@InitOSVers

; 2927 : 		nCurrentOS = WIN_2000;

  00068	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR _nCurrentOS, 7
  00072	5e		 pop	 esi

; 2970 : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN33@InitOSVers:

; 2928 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 5 && CurrentOSMinor == 1)

  00081	83 f8 01	 cmp	 eax, 1
  00084	75 19		 jne	 SHORT $LN34@InitOSVers

; 2929 : 		nCurrentOS = WIN_XP;

  00086	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR _nCurrentOS, 8
  00090	5e		 pop	 esi

; 2970 : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN34@InitOSVers:

; 2930 : 
; 2931 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 5 && CurrentOSMinor == 2)

  0009f	83 f8 02	 cmp	 eax, 2
  000a2	0f 85 67 01 00
	00		 jne	 $LN27@InitOSVers

; 2932 : 	{
; 2933 : 		OSVERSIONINFOEX osEx;
; 2934 : 
; 2935 : 		osEx.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
; 2936 : 		GetVersionEx ((LPOSVERSIONINFOA) &osEx);

  000a8	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _osEx$2[ebp]
  000ae	c7 85 60 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR _osEx$2[ebp], 156 ; 0000009cH
  000b8	50		 push	 eax
  000b9	ff d6		 call	 esi

; 2937 : 
; 2938 : 		if (osEx.wProductType == VER_NT_SERVER || osEx.wProductType == VER_NT_DOMAIN_CONTROLLER)

  000bb	8a 45 fa	 mov	 al, BYTE PTR _osEx$2[ebp+154]
  000be	3c 03		 cmp	 al, 3
  000c0	74 1d		 je	 SHORT $LN11@InitOSVers
  000c2	3c 02		 cmp	 al, 2
  000c4	74 19		 je	 SHORT $LN11@InitOSVers

; 2940 : 		else
; 2941 : 			nCurrentOS = WIN_XP64;

  000c6	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR _nCurrentOS, 9
  000d0	5e		 pop	 esi

; 2970 : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	33 cd		 xor	 ecx, ebp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
$LN11@InitOSVers:

; 2939 : 			nCurrentOS = WIN_SERVER_2003;

  000df	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _nCurrentOS, 10 ; 0000000aH
  000e9	5e		 pop	 esi

; 2970 : }

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
$LN32@InitOSVers:

; 2942 : 	}
; 2943 : 
; 2944 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 0)

  000f8	83 f9 06	 cmp	 ecx, 6
  000fb	75 7f		 jne	 SHORT $LN36@InitOSVers
  000fd	85 c0		 test	 eax, eax
  000ff	75 50		 jne	 SHORT $LN37@InitOSVers

; 2945 : 	{
; 2946 : 		OSVERSIONINFOEX osEx;
; 2947 : 
; 2948 : 		osEx.dwOSVersionInfoSize = sizeof (OSVERSIONINFOEX);
; 2949 : 		GetVersionEx ((LPOSVERSIONINFOA) &osEx);

  00101	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _osEx$1[ebp]
  00107	c7 85 60 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR _osEx$1[ebp], 156 ; 0000009cH
  00111	50		 push	 eax
  00112	ff d6		 call	 esi

; 2950 : 
; 2951 : 		if (osEx.wProductType == VER_NT_SERVER || osEx.wProductType == VER_NT_DOMAIN_CONTROLLER)

  00114	8a 45 fa	 mov	 al, BYTE PTR _osEx$1[ebp+154]
  00117	3c 03		 cmp	 al, 3
  00119	74 1d		 je	 SHORT $LN16@InitOSVers
  0011b	3c 02		 cmp	 al, 2
  0011d	74 19		 je	 SHORT $LN16@InitOSVers

; 2953 : 		else
; 2954 : 			nCurrentOS = WIN_VISTA;

  0011f	c7 05 00 00 00
	00 0b 00 00 00	 mov	 DWORD PTR _nCurrentOS, 11 ; 0000000bH
  00129	5e		 pop	 esi

; 2970 : }

  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
$LN16@InitOSVers:

; 2952 : 			nCurrentOS = WIN_SERVER_2008;

  00138	c7 05 00 00 00
	00 0c 00 00 00	 mov	 DWORD PTR _nCurrentOS, 12 ; 0000000cH
  00142	5e		 pop	 esi

; 2970 : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c3		 ret	 0
$LN37@InitOSVers:

; 2955 : 	}
; 2956 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 6 && CurrentOSMinor == 1)

  00151	83 f8 01	 cmp	 eax, 1
  00154	0f 85 b5 00 00
	00		 jne	 $LN27@InitOSVers

; 2957 : 		nCurrentOS = (IsServerOS() ? WIN_SERVER_2008_R2 : WIN_7);

  0015a	e8 00 00 00 00	 call	 _IsServerOS
  0015f	f7 d8		 neg	 eax
  00161	5e		 pop	 esi
  00162	1b c0		 sbb	 eax, eax
  00164	f7 d8		 neg	 eax
  00166	83 c0 0d	 add	 eax, 13			; 0000000dH
  00169	a3 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, eax

; 2970 : }

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
$LN36@InitOSVers:

; 2958 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_NT && CurrentOSMajor == 4)

  0017c	83 f9 04	 cmp	 ecx, 4
  0017f	0f 85 8a 00 00
	00		 jne	 $LN27@InitOSVers

; 2959 : 		nCurrentOS = WIN_NT4;

  00185	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR _nCurrentOS, 6
  0018f	5e		 pop	 esi

; 2970 : }

  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	33 cd		 xor	 ecx, ebp
  00195	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
$LN19@InitOSVers:

; 2960 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && os.dwMajorVersion == 4 && os.dwMinorVersion == 0)

  0019e	83 fa 01	 cmp	 edx, 1
  001a1	75 5e		 jne	 SHORT $LN25@InitOSVers
  001a3	83 f9 04	 cmp	 ecx, 4
  001a6	75 67		 jne	 SHORT $LN27@InitOSVers
  001a8	85 c0		 test	 eax, eax
  001aa	75 19		 jne	 SHORT $LN40@InitOSVers

; 2961 : 		nCurrentOS = WIN_95;

  001ac	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR _nCurrentOS, 2
  001b6	5e		 pop	 esi

; 2970 : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	33 cd		 xor	 ecx, ebp
  001bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c3		 ret	 0
$LN40@InitOSVers:

; 2962 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && os.dwMajorVersion == 4 && os.dwMinorVersion == 10)

  001c5	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001c8	75 19		 jne	 SHORT $LN41@InitOSVers

; 2963 : 		nCurrentOS = WIN_98;

  001ca	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR _nCurrentOS, 3
  001d4	5e		 pop	 esi

; 2970 : }

  001d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d8	33 cd		 xor	 ecx, ebp
  001da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
$LN41@InitOSVers:

; 2964 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS && os.dwMajorVersion == 4 && os.dwMinorVersion == 90)

  001e3	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  001e6	75 27		 jne	 SHORT $LN27@InitOSVers

; 2965 : 		nCurrentOS = WIN_ME;

  001e8	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _nCurrentOS, 4
  001f2	5e		 pop	 esi

; 2970 : }

  001f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f6	33 cd		 xor	 ecx, ebp
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c3		 ret	 0
$LN25@InitOSVers:

; 2966 : 	else if (os.dwPlatformId == VER_PLATFORM_WIN32s)
; 2967 : 		nCurrentOS = WIN_31;

  00201	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _nCurrentOS, 1
  0020b	85 d2		 test	 edx, edx
  0020d	74 0a		 je	 SHORT $LN28@InitOSVers
$LN27@InitOSVers:

; 2968 : 	else
; 2969 : 		nCurrentOS = WIN_UNKNOWN;

  0020f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nCurrentOS, 0
$LN28@InitOSVers:

; 2970 : }

  00219	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021c	33 cd		 xor	 ecx, ebp
  0021e	5e		 pop	 esi
  0021f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
$LN43@InitOSVers:

; 2920 : 		AbortProcess ("NO_OS_VER");

  00228	68 00 00 00 00	 push	 OFFSET ??_C@_09IDILIKHG@NO_OS_VER?$AA@
  0022d	e8 00 00 00 00	 call	 _AbortProcess
$LN45@InitOSVers:
$LN42@InitOSVers:
  00232	cc		 int	 3
_InitOSVersionInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DoPostInstallTasks
_TEXT	SEGMENT
_DoPostInstallTasks PROC				; COMDAT

; 2881 : {

  00000	56		 push	 esi

; 2882 : 	BOOL bDone = FALSE;
; 2883 : 
; 2884 : 	if (FileExists (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_TUTORIAL)))

  00001	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
  00006	33 f6		 xor	 esi, esi
  00008	e8 00 00 00 00	 call	 _GetConfigPath
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _FileExists
  00013	83 c4 08	 add	 esp, 8
  00016	85 c0		 test	 eax, eax
  00018	74 41		 je	 SHORT $LN2@DoPostInst

; 2885 : 	{
; 2886 : 		if (AskYesNo ("AFTER_INSTALL_TUTORIAL") == IDYES)

  0001a	39 35 00 00 00
	00		 cmp	 DWORD PTR _Silent, esi
  00020	75 34		 jne	 SHORT $LN3@DoPostInst
  00022	6a 24		 push	 36			; 00000024H
  00024	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JALPBIFE@AFTER_INSTALL_TUTORIAL?$AA@
  0002f	e8 00 00 00 00	 call	 _GetString
  00034	83 c4 04	 add	 esp, 4
  00037	50		 push	 eax
  00038	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  00044	83 f8 06	 cmp	 eax, 6
  00047	75 0d		 jne	 SHORT $LN3@DoPostInst

; 2887 : 			//Applink ("beginnerstutorial", TRUE, "");
; 2888 : 			Extlink("http://www.gostcrypt.org/redirect.php?a=2");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NCJGAECA@http?3?1?1www?4gostcrypt?4org?1redirec@
  0004e	e8 00 00 00 00	 call	 _Extlink
  00053	83 c4 04	 add	 esp, 4
$LN3@DoPostInst:

; 2889 : 
; 2890 : 		bDone = TRUE;

  00056	be 01 00 00 00	 mov	 esi, 1
$LN2@DoPostInst:

; 2891 : 	}
; 2892 : 
; 2893 : 	if (FileExists (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES)))

  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
  00060	e8 00 00 00 00	 call	 _GetConfigPath
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _FileExists
  0006b	83 c4 08	 add	 esp, 8
  0006e	85 c0		 test	 eax, eax
  00070	74 3f		 je	 SHORT $LN4@DoPostInst

; 2894 : 	{
; 2895 : 		if (AskYesNo ("AFTER_UPGRADE_RELEASE_NOTES") == IDYES)

  00072	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00079	75 3a		 jne	 SHORT $LN25@DoPostInst
  0007b	6a 24		 push	 36			; 00000024H
  0007d	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PEPDOHPE@AFTER_UPGRADE_RELEASE_NOTES?$AA@
  00088	e8 00 00 00 00	 call	 _GetString
  0008d	83 c4 04	 add	 esp, 4
  00090	50		 push	 eax
  00091	ff 35 00 00 00
	00		 push	 DWORD PTR _MainDlg
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
  0009d	83 f8 06	 cmp	 eax, 6
  000a0	75 13		 jne	 SHORT $LN25@DoPostInst

; 2896 : 			//Applink ("releasenotes", TRUE, "");
; 2897 : 			Extlink("http://www.gostcrypt.org/");

  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EMBCECD@http?3?1?1www?4gostcrypt?4org?1?$AA@
  000a7	e8 00 00 00 00	 call	 _Extlink
  000ac	83 c4 04	 add	 esp, 4
  000af	eb 04		 jmp	 SHORT $LN25@DoPostInst
$LN4@DoPostInst:
  000b1	85 f6		 test	 esi, esi

; 2898 : 
; 2899 : 		bDone = TRUE;
; 2900 : 	}
; 2901 : 
; 2902 : 	if (bDone)

  000b3	74 28		 je	 SHORT $LN14@DoPostInst
$LN25@DoPostInst:

; 2903 : 		SavePostInstallTasksSettings (GST_POST_INSTALL_CFG_REMOVE_ALL);

  000b5	e8 00 00 00 00	 call	 _IsNonInstallMode
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
  000bf	e8 00 00 00 00	 call	 _GetConfigPath
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _remove
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
  000cf	e8 00 00 00 00	 call	 _GetConfigPath
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _remove
  000da	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@DoPostInst:
  000dd	5e		 pop	 esi

; 2904 : }

  000de	c3		 ret	 0
_DoPostInstallTasks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SavePostInstallTasksSettings
_TEXT	SEGMENT
_command$ = 8						; size = 4
_SavePostInstallTasksSettings PROC			; COMDAT

; 2832 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2833 : 	FILE *f = NULL;
; 2834 : 
; 2835 : 	if (IsNonInstallMode() && command != GST_POST_INSTALL_CFG_REMOVE_ALL)

  00003	e8 00 00 00 00	 call	 _IsNonInstallMode
  00008	85 c0		 test	 eax, eax
  0000a	8b 45 08	 mov	 eax, DWORD PTR _command$[ebp]
  0000d	74 04		 je	 SHORT $LN4@SavePostIn
  0000f	85 c0		 test	 eax, eax
  00011	75 59		 jne	 SHORT $LN1@SavePostIn
$LN4@SavePostIn:

; 2836 : 		return;
; 2837 : 
; 2838 : 	switch (command)

  00013	83 e8 00	 sub	 eax, 0
  00016	74 67		 je	 SHORT $LN5@SavePostIn
  00018	56		 push	 esi
  00019	83 e8 01	 sub	 eax, 1
  0001c	74 11		 je	 SHORT $LN6@SavePostIn
  0001e	83 e8 01	 sub	 eax, 1
  00021	75 48		 jne	 SHORT $LN12@SavePostIn

; 2847 : 		break;
; 2848 : 
; 2849 : 	case GST_POST_INSTALL_CFG_RELEASE_NOTES:
; 2850 : 		f = fopen (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES), "w");

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@

; 2851 : 		break;

  0002d	eb 0a		 jmp	 SHORT $LN15@SavePostIn
$LN6@SavePostIn:

; 2843 : 		break;
; 2844 : 
; 2845 : 	case GST_POST_INSTALL_CFG_TUTORIAL:
; 2846 : 		f = fopen (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_TUTORIAL), "w");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
$LN15@SavePostIn:
  00039	e8 00 00 00 00	 call	 _GetConfigPath
  0003e	83 c4 04	 add	 esp, 4
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _fopen
  00047	8b f0		 mov	 esi, eax
  00049	83 c4 08	 add	 esp, 8

; 2852 : 
; 2853 : 	default:
; 2854 : 		return;
; 2855 : 	}
; 2856 : 
; 2857 : 	if (f == NULL)

  0004c	85 f6		 test	 esi, esi
  0004e	74 1b		 je	 SHORT $LN12@SavePostIn

; 2858 : 		return;
; 2859 : 
; 2860 : 	if (fputs ("1", f) < 0)

  00050	56		 push	 esi
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1?$AA@
  00056	e8 00 00 00 00	 call	 _fputs
  0005b	83 c4 08	 add	 esp, 8

; 2861 : 	{
; 2862 : 		// Error
; 2863 : 		fclose (f);

  0005e	56		 push	 esi
  0005f	85 c0		 test	 eax, eax
  00061	79 0b		 jns	 SHORT $LN10@SavePostIn
  00063	e8 00 00 00 00	 call	 _fclose
  00068	83 c4 04	 add	 esp, 4
$LN12@SavePostIn:
  0006b	5e		 pop	 esi
$LN1@SavePostIn:

; 2870 : }

  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN10@SavePostIn:

; 2864 : 		return;
; 2865 : 	}
; 2866 : 
; 2867 : 	GSTFlushFile (f);

  0006e	e8 00 00 00 00	 call	 _GSTFlushFile

; 2868 : 
; 2869 : 	fclose (f);

  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 _fclose
  00079	83 c4 08	 add	 esp, 8
  0007c	5e		 pop	 esi

; 2870 : }

  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN5@SavePostIn:

; 2839 : 	{
; 2840 : 	case GST_POST_INSTALL_CFG_REMOVE_ALL:
; 2841 : 		remove (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_TUTORIAL));

  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CCKGMGAA@Post?9Install?5Task?5?9?5Tutorial?$AA@
  00084	e8 00 00 00 00	 call	 _GetConfigPath
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _remove

; 2842 : 		remove (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES));

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PPOKIEIE@Post?9Install?5Task?5?9?5Release?5Note@
  00094	e8 00 00 00 00	 call	 _GetConfigPath
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	89 45 08	 mov	 DWORD PTR _command$[ebp], eax

; 2870 : }

  0009f	5d		 pop	 ebp

; 2842 : 		remove (GetConfigPath (GST_APPD_FILENAME_POST_INSTALL_TASK_RELEASE_NOTES));

  000a0	e9 00 00 00 00	 jmp	 _remove
_SavePostInstallTasksSettings ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RemoveNonSysInPlaceEncNotifications
_TEXT	SEGMENT
_regk$1 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_RemoveNonSysInPlaceEncNotifications PROC		; COMDAT

; 2811 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2812 : 	if (FileExists (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC)))

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  00015	e8 00 00 00 00	 call	 _GetConfigPath
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _FileExists
  00020	83 c4 08	 add	 esp, 8
  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN2@RemoveNonS

; 2813 : 		remove (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC));

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  0002c	e8 00 00 00 00	 call	 _GetConfigPath
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _remove
  00037	83 c4 08	 add	 esp, 8
$LN2@RemoveNonS:

; 2814 : 
; 2815 : 	if (FileExists (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE)))

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  0003f	e8 00 00 00 00	 call	 _GetConfigPath
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _FileExists
  0004a	83 c4 08	 add	 esp, 8
  0004d	85 c0		 test	 eax, eax
  0004f	74 13		 je	 SHORT $LN3@RemoveNonS

; 2816 : 		remove (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE));

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  00056	e8 00 00 00 00	 call	 _GetConfigPath
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _remove
  00061	83 c4 08	 add	 esp, 8
$LN3@RemoveNonS:

; 2817 : 
; 2818 : 	if (!IsNonInstallMode () && SystemEncryptionStatus == SYSENC_STATUS_NONE)

  00064	e8 00 00 00 00	 call	 _IsNonInstallMode
  00069	85 c0		 test	 eax, eax
  0006b	75 22		 jne	 SHORT $LN8@RemoveNonS
  0006d	39 05 00 00 00
	00		 cmp	 DWORD PTR _SystemEncryptionStatus, eax
  00073	75 1a		 jne	 SHORT $LN8@RemoveNonS

; 2819 : 		ManageStartupSeqWiz (TRUE, "");

  00075	8d 45 bc	 lea	 eax, DWORD PTR _regk$1[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _GetStartupRegKeyName
  0007e	8d 45 bc	 lea	 eax, DWORD PTR _regk$1[ebp]
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GBMFPGPM@GostCrypt?5Format?$AA@
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _DeleteRegistryValue
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@RemoveNonS:

; 2820 : }

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	33 cd		 xor	 ecx, ebp
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_RemoveNonSysInPlaceEncNotifications ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LoadNonSysInPlaceEncSettings
_TEXT	SEGMENT
_size2$ = -4						; size = 4
_size$ = 8						; size = 4
_wipeAlgorithm$ = 8					; size = 4
_LoadNonSysInPlaceEncSettings PROC			; COMDAT

; 2771 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 2772 : 	char *fileBuf = NULL;
; 2773 : 	char *fileBuf2 = NULL;
; 2774 : 	DWORD size, size2;
; 2775 : 	int count;
; 2776 : 
; 2777 : 	*wipeAlgorithm = GST_WIPE_NONE;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _wipeAlgorithm$[ebp]
  00008	56		 push	 esi
  00009	33 f6		 xor	 esi, esi

; 2778 : 
; 2779 : 	if (!FileExists (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC)))

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  00010	89 33		 mov	 DWORD PTR [ebx], esi
  00012	e8 00 00 00 00	 call	 _GetConfigPath
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _FileExists
  0001d	83 c4 08	 add	 esp, 8
  00020	85 c0		 test	 eax, eax
  00022	75 06		 jne	 SHORT $LN2@LoadNonSys
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx

; 2800 : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN2@LoadNonSys:
  0002a	57		 push	 edi

; 2780 : 		return 0;
; 2781 : 
; 2782 : 	if ((fileBuf = LoadFile (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC), &size)) == NULL)

  0002b	8d 45 08	 lea	 eax, DWORD PTR _size$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NLGDPAAC@In?9Place?5Encryption?$AA@
  00034	e8 00 00 00 00	 call	 _GetConfigPath
  00039	83 c4 04	 add	 esp, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _LoadFile
  00042	8b f8		 mov	 edi, eax
  00044	83 c4 08	 add	 esp, 8
  00047	85 ff		 test	 edi, edi
  00049	75 07		 jne	 SHORT $LN3@LoadNonSys
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 2800 : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN3@LoadNonSys:

; 2783 : 		return 0;
; 2784 : 
; 2785 : 	if (FileExists (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE)))

  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  00057	e8 00 00 00 00	 call	 _GetConfigPath
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _FileExists
  00062	83 c4 08	 add	 esp, 8
  00065	85 c0		 test	 eax, eax
  00067	74 2b		 je	 SHORT $LN5@LoadNonSys

; 2786 : 	{
; 2787 : 		if ((fileBuf2 = LoadFile (GetConfigPath (GST_APPD_FILENAME_NONSYS_INPLACE_ENC_WIPE), &size2)) != NULL)

  00069	8d 45 fc	 lea	 eax, DWORD PTR _size2$[ebp]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IBNLKCDC@In?9Place?5Encryption?5Wipe?5Algo?$AA@
  00072	e8 00 00 00 00	 call	 _GetConfigPath
  00077	83 c4 04	 add	 esp, 4
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _LoadFile
  00080	8b f0		 mov	 esi, eax
  00082	83 c4 08	 add	 esp, 8
  00085	85 f6		 test	 esi, esi
  00087	74 0b		 je	 SHORT $LN5@LoadNonSys

; 2788 : 			*wipeAlgorithm = (WipeAlgorithmId) atoi (fileBuf2);

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 _atoi
  0008f	83 c4 04	 add	 esp, 4
  00092	89 03		 mov	 DWORD PTR [ebx], eax
$LN5@LoadNonSys:

; 2789 : 	}
; 2790 : 
; 2791 : 	count = atoi (fileBuf);

  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 _atoi

; 2792 : 
; 2793 : 	if (fileBuf != NULL)
; 2794 : 		GSTfree (fileBuf);

  0009a	57		 push	 edi
  0009b	8b d8		 mov	 ebx, eax
  0009d	e8 00 00 00 00	 call	 _free
  000a2	83 c4 08	 add	 esp, 8

; 2795 : 
; 2796 : 	if (fileBuf2 != NULL)

  000a5	85 f6		 test	 esi, esi
  000a7	74 09		 je	 SHORT $LN7@LoadNonSys

; 2797 : 		GSTfree (fileBuf2);

  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 _free
  000af	83 c4 04	 add	 esp, 4
$LN7@LoadNonSys:

; 2798 : 
; 2799 : 	return (count);

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	8b c3		 mov	 eax, ebx
  000b6	5b		 pop	 ebx

; 2800 : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_LoadNonSysInPlaceEncSettings ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LoadSysEncSettings
_TEXT	SEGMENT
_sysEncCfgFileBuf$1$ = -372				; size = 4
_size$ = -368						; size = 4
_paramVal$ = -364					; size = 260
_paramName$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_LoadSysEncSettings PROC				; COMDAT

; 2713 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 2714 : 	BOOL status = TRUE;
; 2715 : 	DWORD size = 0;
; 2716 : 	char *sysEncCfgFileBuf = LoadFile (GetConfigPath (GST_APPD_FILENAME_SYSTEM_ENCRYPTION), &size);

  00016	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _size$[ebp]
  0001c	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _size$[ebp], 0
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  0002c	e8 00 00 00 00	 call	 _GetConfigPath
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _LoadFile
  0003a	8b f0		 mov	 esi, eax

; 2717 : 	char *xml = sysEncCfgFileBuf;
; 2718 : 	char paramName[100], paramVal[MAX_PATH];
; 2719 : 
; 2720 : 	// Defaults
; 2721 : 	int newSystemEncryptionStatus = SYSENC_STATUS_NONE;

  0003c	33 ff		 xor	 edi, edi

; 2722 : 	WipeAlgorithmId newnWipeMode = GST_WIPE_NONE;
; 2723 : 
; 2724 : 	if (!FileExists (GetConfigPath (GST_APPD_FILENAME_SYSTEM_ENCRYPTION)))

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NJOIKHOP@System?5Encryption?4xml?$AA@
  00043	89 b5 8c fe ff
	ff		 mov	 DWORD PTR _sysEncCfgFileBuf$1$[ebp], esi
  00049	33 db		 xor	 ebx, ebx
  0004b	e8 00 00 00 00	 call	 _GetConfigPath
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _FileExists
  00056	83 c4 10	 add	 esp, 16			; 00000010H
  00059	85 c0		 test	 eax, eax
  0005b	75 0c		 jne	 SHORT $LN4@LoadSysEnc

; 2725 : 	{
; 2726 : 		SystemEncryptionStatus = newSystemEncryptionStatus;

  0005d	89 1d 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, ebx

; 2727 : 		nWipeMode = newnWipeMode;

  00063	89 1d 00 00 00
	00		 mov	 DWORD PTR _nWipeMode, ebx
$LN4@LoadSysEnc:

; 2728 : 	}
; 2729 : 
; 2730 : 	if (xml == NULL)

  00069	85 f6		 test	 esi, esi
  0006b	75 13		 jne	 SHORT $LN10@LoadSysEnc

; 2731 : 	{
; 2732 : 		return FALSE;

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	33 c0		 xor	 eax, eax
  00071	5b		 pop	 ebx

; 2756 : 	return status;
; 2757 : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN10@LoadSysEnc:

; 2733 : 	}
; 2734 : 
; 2735 : 	while (xml = XmlFindElement (xml, "config"))

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _XmlFindElement
  0008b	8b f0		 mov	 esi, eax
  0008d	83 c4 08	 add	 esp, 8
  00090	85 f6		 test	 esi, esi
  00092	0f 84 c4 00 00
	00		 je	 $LN3@LoadSysEnc
$LL2@LoadSysEnc:

; 2736 : 	{
; 2737 : 		XmlGetAttributeText (xml, "key", paramName, sizeof (paramName));

  00098	6a 64		 push	 100			; 00000064H
  0009a	8d 45 98	 lea	 eax, DWORD PTR _paramName$[ebp]
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_03ICHNJLJF@key?$AA@
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 _XmlGetAttributeText

; 2738 : 		XmlGetNodeText (xml, paramVal, sizeof (paramVal));

  000a9	68 04 01 00 00	 push	 260			; 00000104H
  000ae	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _paramVal$[ebp]
  000b4	50		 push	 eax
  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 _XmlGetNodeText
  000bb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2739 : 
; 2740 : 		if (strcmp (paramName, "SystemEncryptionStatus") == 0)

  000be	8d 45 98	 lea	 eax, DWORD PTR _paramName$[ebp]
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BH@GJIMGGMJ@SystemEncryptionStatus?$AA@
$LL14@LoadSysEnc:
  000c6	8a 10		 mov	 dl, BYTE PTR [eax]
  000c8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ca	75 1a		 jne	 SHORT $LN15@LoadSysEnc
  000cc	84 d2		 test	 dl, dl
  000ce	74 12		 je	 SHORT $LN16@LoadSysEnc
  000d0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000d3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d6	75 0e		 jne	 SHORT $LN15@LoadSysEnc
  000d8	83 c0 02	 add	 eax, 2
  000db	83 c1 02	 add	 ecx, 2
  000de	84 d2		 test	 dl, dl
  000e0	75 e4		 jne	 SHORT $LL14@LoadSysEnc
$LN16@LoadSysEnc:
  000e2	33 c0		 xor	 eax, eax
  000e4	eb 05		 jmp	 SHORT $LN17@LoadSysEnc
$LN15@LoadSysEnc:
  000e6	1b c0		 sbb	 eax, eax
  000e8	83 c8 01	 or	 eax, 1
$LN17@LoadSysEnc:
  000eb	85 c0		 test	 eax, eax
  000ed	75 10		 jne	 SHORT $LN6@LoadSysEnc

; 2741 : 		{
; 2742 : 			newSystemEncryptionStatus = atoi (paramVal);

  000ef	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _paramVal$[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _atoi
  000fb	8b f8		 mov	 edi, eax
  000fd	eb 3f		 jmp	 SHORT $LN22@LoadSysEnc
$LN6@LoadSysEnc:

; 2743 : 		}
; 2744 : 		else if (strcmp (paramName, "WipeMode") == 0)

  000ff	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_08OAECLFAP@WipeMode?$AA@
  00104	8d 45 98	 lea	 eax, DWORD PTR _paramName$[ebp]
$LL18@LoadSysEnc:
  00107	8a 10		 mov	 dl, BYTE PTR [eax]
  00109	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0010b	75 1a		 jne	 SHORT $LN19@LoadSysEnc
  0010d	84 d2		 test	 dl, dl
  0010f	74 12		 je	 SHORT $LN20@LoadSysEnc
  00111	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00114	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00117	75 0e		 jne	 SHORT $LN19@LoadSysEnc
  00119	83 c0 02	 add	 eax, 2
  0011c	83 c1 02	 add	 ecx, 2
  0011f	84 d2		 test	 dl, dl
  00121	75 e4		 jne	 SHORT $LL18@LoadSysEnc
$LN20@LoadSysEnc:
  00123	33 c0		 xor	 eax, eax
  00125	eb 05		 jmp	 SHORT $LN21@LoadSysEnc
$LN19@LoadSysEnc:
  00127	1b c0		 sbb	 eax, eax
  00129	83 c8 01	 or	 eax, 1
$LN21@LoadSysEnc:
  0012c	85 c0		 test	 eax, eax
  0012e	75 11		 jne	 SHORT $LN8@LoadSysEnc

; 2745 : 		{
; 2746 : 			newnWipeMode = (WipeAlgorithmId) atoi (paramVal);

  00130	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _paramVal$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _atoi
  0013c	8b d8		 mov	 ebx, eax
$LN22@LoadSysEnc:
  0013e	83 c4 04	 add	 esp, 4
$LN8@LoadSysEnc:

; 2747 : 		}
; 2748 : 
; 2749 : 		xml++;

  00141	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_06HEJKKHEK@config?$AA@
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 _XmlFindElement
  0014f	8b f0		 mov	 esi, eax
  00151	83 c4 08	 add	 esp, 8
  00154	85 f6		 test	 esi, esi
  00156	0f 85 3c ff ff
	ff		 jne	 $LL2@LoadSysEnc
$LN3@LoadSysEnc:

; 2750 : 	}
; 2751 : 
; 2752 : 	SystemEncryptionStatus = newSystemEncryptionStatus;
; 2753 : 	nWipeMode = newnWipeMode;
; 2754 : 
; 2755 : 	free (sysEncCfgFileBuf);

  0015c	ff b5 8c fe ff
	ff		 push	 DWORD PTR _sysEncCfgFileBuf$1$[ebp]
  00162	89 3d 00 00 00
	00		 mov	 DWORD PTR _SystemEncryptionStatus, edi
  00168	89 1d 00 00 00
	00		 mov	 DWORD PTR _nWipeMode, ebx
  0016e	e8 00 00 00 00	 call	 _free

; 2756 : 	return status;
; 2757 : }

  00173	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00176	83 c4 04	 add	 esp, 4
  00179	33 cd		 xor	 ecx, ebp
  0017b	b8 01 00 00 00	 mov	 eax, 1
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
_LoadSysEncSettings ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ReadEncryptionThreadPoolFreeCpuCountLimit
_TEXT	SEGMENT
_count$ = -4						; size = 4
_ReadEncryptionThreadPoolFreeCpuCountLimit PROC		; COMDAT

; 2694 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2695 : 	DWORD count;
; 2696 : 
; 2697 : 	if (!ReadLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\gostcrypt", GST_ENCRYPTION_FREE_CPU_COUNT_REG_VALUE_NAME, &count))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _count$[ebp]
  00007	50		 push	 eax
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MKBHDAPB@GostCryptEncryptionFreeCpuCount?$AA@
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LCJDGIOL@SYSTEM?2CurrentControlSet?2Service@
  00012	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	23 45 fc	 and	 eax, DWORD PTR _count$[ebp]

; 2698 : 		count = 0;
; 2699 : 
; 2700 : 	return count;
; 2701 : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_ReadEncryptionThreadPoolFreeCpuCountLimit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ReadDriverConfigurationFlags
_TEXT	SEGMENT
_configMap$ = -4					; size = 4
_ReadDriverConfigurationFlags PROC			; COMDAT

; 2676 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2677 : 	DWORD configMap;
; 2678 : 
; 2679 : 	if (!ReadLocalMachineRegistryDword ("SYSTEM\\CurrentControlSet\\Services\\gostcrypt", GST_DRIVER_CONFIG_REG_VALUE_NAME, &configMap))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _configMap$[ebp]
  00007	50		 push	 eax
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NANEHOFP@GostCryptConfig?$AA@
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LCJDGIOL@SYSTEM?2CurrentControlSet?2Service@
  00012	e8 00 00 00 00	 call	 _ReadLocalMachineRegistryDword
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	23 45 fc	 and	 eax, DWORD PTR _configMap$[ebp]

; 2680 : 		configMap = 0;
; 2681 : 
; 2682 : 	return configMap;
; 2683 : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_ReadDriverConfigurationFlags ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsGostCryptInstallerRunning
_TEXT	SEGMENT
_IsGostCryptInstallerRunning PROC			; COMDAT

; 2574 : 	return (MutexExistsOnSystem (GST_MUTEX_NAME_APP_SETUP));

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JMLDCLIN@Global?2GostCrypt?5Setup?$AA@
  00005	6a 00		 push	 0
  00007	68 01 00 1f 00	 push	 2031617			; 001f0001H
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenMutexA@12
  00012	85 c0		 test	 eax, eax
  00014	75 1f		 jne	 SHORT $LN5@IsGostCryp
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0001c	83 f8 02	 cmp	 eax, 2
  0001f	75 03		 jne	 SHORT $LN6@IsGostCryp
  00021	33 c0		 xor	 eax, eax

; 2575 : }

  00023	c3		 ret	 0

; 2574 : 	return (MutexExistsOnSystem (GST_MUTEX_NAME_APP_SETUP));

$LN6@IsGostCryp:
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002a	33 c9		 xor	 ecx, ecx
  0002c	83 f8 05	 cmp	 eax, 5
  0002f	0f 94 c1	 sete	 cl
  00032	8b c1		 mov	 eax, ecx

; 2575 : }

  00034	c3		 ret	 0

; 2574 : 	return (MutexExistsOnSystem (GST_MUTEX_NAME_APP_SETUP));

$LN5@IsGostCryp:
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0003c	b8 01 00 00 00	 mov	 eax, 1

; 2575 : }

  00041	c3		 ret	 0
_IsGostCryptInstallerRunning ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseAppSetupMutex
_TEXT	SEGMENT
_CloseAppSetupMutex PROC				; COMDAT

; 2561 : 	GSTCloseMutex (&hAppSetupMutex);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
  00007	74 2a		 je	 SHORT $LN5@CloseAppSe
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00015	85 c0		 test	 eax, eax
  00017	74 1a		 je	 SHORT $LN5@CloseAppSe
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN5@CloseAppSe
  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
$LN5@CloseAppSe:

; 2562 : }

  00033	c3		 ret	 0
_CloseAppSetupMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CreateAppSetupMutex
_TEXT	SEGMENT
_CreateAppSetupMutex PROC				; COMDAT

; 2548 : 	return GSTCreateMutex (&hAppSetupMutex, GST_MUTEX_NAME_APP_SETUP);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
  00007	75 4f		 jne	 SHORT $LN6@CreateAppS
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JMLDCLIN@Global?2GostCrypt?5Setup?$AA@
  0000e	6a 01		 push	 1
  00010	6a 00		 push	 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?hAppSetupMutex@@3RAXA, eax ; hAppSetupMutex
  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
  00024	74 2f		 je	 SHORT $LN8@CreateAppS
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 25		 jne	 SHORT $LN6@CreateAppS
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hAppSetupMutex@@3RAXA ; hAppSetupMutex
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hAppSetupMutex@@3RAXA, 0 ; hAppSetupMutex
$LN8@CreateAppS:
  00055	33 c0		 xor	 eax, eax

; 2549 : }

  00057	c3		 ret	 0

; 2548 : 	return GSTCreateMutex (&hAppSetupMutex, GST_MUTEX_NAME_APP_SETUP);

$LN6@CreateAppS:
  00058	b8 01 00 00 00	 mov	 eax, 1

; 2549 : }

  0005d	c3		 ret	 0
_CreateAppSetupMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseDriverSetupMutex
_TEXT	SEGMENT
_CloseDriverSetupMutex PROC				; COMDAT

; 2535 : 	GSTCloseMutex (&hDriverSetupMutex);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
  00007	74 2a		 je	 SHORT $LN5@CloseDrive
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00015	85 c0		 test	 eax, eax
  00017	74 1a		 je	 SHORT $LN5@CloseDrive
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN5@CloseDrive
  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
$LN5@CloseDrive:

; 2536 : }

  00033	c3		 ret	 0
_CloseDriverSetupMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CreateDriverSetupMutex
_TEXT	SEGMENT
_CreateDriverSetupMutex PROC				; COMDAT

; 2522 : 	return GSTCreateMutex (&hDriverSetupMutex, GST_MUTEX_NAME_DRIVER_SETUP);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
  00007	75 4f		 jne	 SHORT $LN6@CreateDriv
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JOPFAKIM@Global?2GostCrypt?5Driver?5Setup?$AA@
  0000e	6a 01		 push	 1
  00010	6a 00		 push	 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, eax ; hDriverSetupMutex
  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
  00024	74 2f		 je	 SHORT $LN8@CreateDriv
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 25		 jne	 SHORT $LN6@CreateDriv
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hDriverSetupMutex@@3RAXA ; hDriverSetupMutex
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hDriverSetupMutex@@3RAXA, 0 ; hDriverSetupMutex
$LN8@CreateDriv:
  00055	33 c0		 xor	 eax, eax

; 2523 : }

  00057	c3		 ret	 0

; 2522 : 	return GSTCreateMutex (&hDriverSetupMutex, GST_MUTEX_NAME_DRIVER_SETUP);

$LN6@CreateDriv:
  00058	b8 01 00 00 00	 mov	 eax, 1

; 2523 : }

  0005d	c3		 ret	 0
_CreateDriverSetupMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _NonSysInplaceEncInProgressElsewhere
_TEXT	SEGMENT
_NonSysInplaceEncInProgressElsewhere PROC		; COMDAT

; 2505 : 	return (!InstanceHasNonSysInplaceEncMutex () 

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
  00007	75 2c		 jne	 SHORT $LN3@NonSysInpl
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BEIDGOGA@Global?2GostCrypt?5In?9Place?5Encryp@
  0000e	6a 00		 push	 0
  00010	68 01 00 1f 00	 push	 2031617			; 001f0001H
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenMutexA@12
  0001b	85 c0		 test	 eax, eax
  0001d	75 19		 jne	 SHORT $LN9@NonSysInpl
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00025	83 f8 02	 cmp	 eax, 2
  00028	74 0b		 je	 SHORT $LN3@NonSysInpl
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00030	83 f8 05	 cmp	 eax, 5
  00033	74 0a		 je	 SHORT $LN13@NonSysInpl
$LN3@NonSysInpl:
  00035	33 c0		 xor	 eax, eax

; 2506 : 		&& MutexExistsOnSystem (GST_MUTEX_NAME_NONSYS_INPLACE_ENC));
; 2507 : }

  00037	c3		 ret	 0

; 2505 : 	return (!InstanceHasNonSysInplaceEncMutex () 

$LN9@NonSysInpl:
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN13@NonSysInpl:
  0003f	b8 01 00 00 00	 mov	 eax, 1

; 2506 : 		&& MutexExistsOnSystem (GST_MUTEX_NAME_NONSYS_INPLACE_ENC));
; 2507 : }

  00044	c3		 ret	 0
_NonSysInplaceEncInProgressElsewhere ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseNonSysInplaceEncMutex
_TEXT	SEGMENT
_CloseNonSysInplaceEncMutex PROC			; COMDAT

; 2491 : 	GSTCloseMutex (&hNonSysInplaceEncMutex);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
  00007	74 2a		 je	 SHORT $LN5@CloseNonSy
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00015	85 c0		 test	 eax, eax
  00017	74 1a		 je	 SHORT $LN5@CloseNonSy
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN5@CloseNonSy
  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
$LN5@CloseNonSy:

; 2492 : }

  00033	c3		 ret	 0
_CloseNonSysInplaceEncMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InstanceHasNonSysInplaceEncMutex
_TEXT	SEGMENT
_InstanceHasNonSysInplaceEncMutex PROC			; COMDAT

; 2478 : 	return (hNonSysInplaceEncMutex != NULL);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax

; 2479 : }

  0000b	c3		 ret	 0
_InstanceHasNonSysInplaceEncMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CreateNonSysInplaceEncMutex
_TEXT	SEGMENT
_CreateNonSysInplaceEncMutex PROC			; COMDAT

; 2465 : 	return GSTCreateMutex (&hNonSysInplaceEncMutex, GST_MUTEX_NAME_NONSYS_INPLACE_ENC);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
  00007	75 4f		 jne	 SHORT $LN6@CreateNonS
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BEIDGOGA@Global?2GostCrypt?5In?9Place?5Encryp@
  0000e	6a 01		 push	 1
  00010	6a 00		 push	 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, eax ; hNonSysInplaceEncMutex
  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
  00024	74 2f		 je	 SHORT $LN8@CreateNonS
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 25		 jne	 SHORT $LN6@CreateNonS
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA ; hNonSysInplaceEncMutex
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hNonSysInplaceEncMutex@@3RAXA, 0 ; hNonSysInplaceEncMutex
$LN8@CreateNonS:
  00055	33 c0		 xor	 eax, eax

; 2466 : }

  00057	c3		 ret	 0

; 2465 : 	return GSTCreateMutex (&hNonSysInplaceEncMutex, GST_MUTEX_NAME_NONSYS_INPLACE_ENC);

$LN6@CreateNonS:
  00058	b8 01 00 00 00	 mov	 eax, 1

; 2466 : }

  0005d	c3		 ret	 0
_CreateNonSysInplaceEncMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseSysEncMutex
_TEXT	SEGMENT
_CloseSysEncMutex PROC					; COMDAT

; 2451 : 	GSTCloseMutex (&hSysEncMutex);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
  00007	74 2a		 je	 SHORT $LN5@CloseSysEn
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00015	85 c0		 test	 eax, eax
  00017	74 1a		 je	 SHORT $LN5@CloseSysEn
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN5@CloseSysEn
  00029	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
$LN5@CloseSysEn:

; 2452 : }

  00033	c3		 ret	 0
_CloseSysEncMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InstanceHasSysEncMutex
_TEXT	SEGMENT
_InstanceHasSysEncMutex PROC				; COMDAT

; 2437 : 	return (hSysEncMutex != NULL);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax

; 2438 : }

  0000b	c3		 ret	 0
_InstanceHasSysEncMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CreateSysEncMutex
_TEXT	SEGMENT
_CreateSysEncMutex PROC					; COMDAT

; 2424 : 	return GSTCreateMutex (&hSysEncMutex, GST_MUTEX_NAME_SYSENC);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
  00007	75 4f		 jne	 SHORT $LN6@CreateSysE
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NOADNGOE@Global?2GostCrypt?5System?5Encrypti@
  0000e	6a 01		 push	 1
  00010	6a 00		 push	 0
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, eax ; hSysEncMutex
  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
  00024	74 2f		 je	 SHORT $LN8@CreateSysE
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00031	75 25		 jne	 SHORT $LN6@CreateSysE
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0004b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
$LN8@CreateSysE:
  00055	33 c0		 xor	 eax, eax

; 2425 : }

  00057	c3		 ret	 0

; 2424 : 	return GSTCreateMutex (&hSysEncMutex, GST_MUTEX_NAME_SYSENC);

$LN6@CreateSysE:
  00058	b8 01 00 00 00	 mov	 eax, 1

; 2425 : }

  0005d	c3		 ret	 0
_CreateSysEncMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _MutexExistsOnSystem
_TEXT	SEGMENT
_name$ = 8						; size = 4
_MutexExistsOnSystem PROC				; COMDAT

; 2645 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2646 : 	if (name[0] == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00006	80 38 00	 cmp	 BYTE PTR [eax], 0
  00009	75 04		 jne	 SHORT $LN2@MutexExist
$LN7@MutexExist:

; 2647 : 		return FALSE;

  0000b	33 c0		 xor	 eax, eax

; 2665 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN2@MutexExist:

; 2648 : 
; 2649 : 	HANDLE hMutex = OpenMutex (MUTEX_ALL_ACCESS, FALSE, name);

  0000f	50		 push	 eax
  00010	6a 00		 push	 0
  00012	68 01 00 1f 00	 push	 2031617			; 001f0001H
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenMutexA@12

; 2650 : 
; 2651 : 	if (hMutex == NULL)

  0001d	85 c0		 test	 eax, eax
  0001f	75 1d		 jne	 SHORT $LN3@MutexExist

; 2652 : 	{
; 2653 : 		if (GetLastError () == ERROR_FILE_NOT_FOUND)

  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00027	83 f8 02	 cmp	 eax, 2
  0002a	74 df		 je	 SHORT $LN7@MutexExist

; 2654 : 			return FALSE;
; 2655 : 
; 2656 : 		if (GetLastError () == ERROR_ACCESS_DENIED) // On Vista, this is returned if the owner of the mutex is elevated while we are not

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00032	33 c9		 xor	 ecx, ecx
  00034	83 f8 05	 cmp	 eax, 5
  00037	0f 94 c1	 sete	 cl
  0003a	8b c1		 mov	 eax, ecx

; 2665 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN3@MutexExist:

; 2657 : 			return TRUE;		
; 2658 : 
; 2659 : 		// The call failed and it is not certain whether the mutex exists or not
; 2660 : 		return FALSE;
; 2661 : 	}
; 2662 : 
; 2663 : 	CloseHandle (hMutex);

  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 2664 : 	return TRUE;

  00045	b8 01 00 00 00	 mov	 eax, 1

; 2665 : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_MutexExistsOnSystem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GSTCloseMutex
_TEXT	SEGMENT
_hMutex$ = 8						; size = 4
_GSTCloseMutex PROC					; COMDAT

; 2625 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2626 : 	if (*hMutex != NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _hMutex$[ebp]
  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	74 20		 je	 SHORT $LN3@GSTCloseMu

; 2627 : 	{
; 2628 : 		if (ReleaseMutex (*hMutex)
; 2629 : 			&& CloseHandle (*hMutex))

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  00015	85 c0		 test	 eax, eax
  00017	74 13		 je	 SHORT $LN3@GSTCloseMu
  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00022	85 c0		 test	 eax, eax
  00024	74 06		 je	 SHORT $LN3@GSTCloseMu

; 2630 : 			*hMutex = NULL;

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@GSTCloseMu:
  0002c	5e		 pop	 esi

; 2631 : 	}
; 2632 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_GSTCloseMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GSTCreateMutex
_TEXT	SEGMENT
_hMutex$ = 8						; size = 4
_name$ = 12						; size = 4
_GSTCreateMutex PROC					; COMDAT

; 2589 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2590 : 	if (*hMutex != NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _hMutex$[ebp]
  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 3e		 jne	 SHORT $LN4@GSTCreateM

; 2591 : 		return TRUE;	// This instance already has the mutex
; 2592 : 
; 2593 : 	*hMutex = CreateMutex (NULL, TRUE, name);

  0000c	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  0000f	6a 01		 push	 1
  00011	6a 00		 push	 0
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMutexA@12
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 2594 : 	if (*hMutex == NULL)

  0001b	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0001e	74 25		 je	 SHORT $LN6@GSTCreateM

; 2595 : 	{
; 2596 : 		// In multi-user configurations, the OS returns "Access is denied" here when a user attempts
; 2597 : 		// to acquire the mutex if another user already has. However, on Vista, "Access is denied" is
; 2598 : 		// returned also if the mutex is owned by a process with admin rights while we have none.
; 2599 : 
; 2600 : 		return FALSE;
; 2601 : 	}
; 2602 : 
; 2603 : 	if (GetLastError () == ERROR_ALREADY_EXISTS)

  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00026	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  0002b	75 1d		 jne	 SHORT $LN4@GSTCreateM

; 2604 : 	{
; 2605 : 		ReleaseMutex (*hMutex);

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4

; 2606 : 		CloseHandle (*hMutex);

  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 2607 : 
; 2608 : 		*hMutex = NULL;

  0003f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN6@GSTCreateM:

; 2609 : 		return FALSE;

  00045	33 c0		 xor	 eax, eax
  00047	5e		 pop	 esi

; 2613 : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN4@GSTCreateM:

; 2610 : 	}
; 2611 : 
; 2612 : 	return TRUE;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	5e		 pop	 esi

; 2613 : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_GSTCreateMutex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CustomDlgProc@16
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_CustomDlgProc@16 PROC					; COMDAT

; 2091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2092 : 	if (uMsg == WM_SETCURSOR && hCursor != NULL)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _uMsg$[ebp]
  00006	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00009	75 19		 jne	 SHORT $LN2@CustomDlgP
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hCursor@@3PAUHICON__@@A ; hCursor
  00010	85 c0		 test	 eax, eax
  00012	74 10		 je	 SHORT $LN2@CustomDlgP

; 2093 : 	{
; 2094 : 		SetCursor (hCursor);

  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 2095 : 		return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 2099 : }

  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
$LN2@CustomDlgP:

; 2096 : 	}
; 2097 : 
; 2098 : 	return DefDlgProc (hwnd, uMsg, wParam, lParam);

  00024	89 4d 0c	 mov	 DWORD PTR _uMsg$[ebp], ecx

; 2099 : }

  00027	5d		 pop	 ebp

; 2096 : 	}
; 2097 : 
; 2098 : 	return DefDlgProc (hwnd, uMsg, wParam, lParam);

  00028	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__DefDlgProcA@16
_CustomDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetPathType
_TEXT	SEGMENT
_path$ = 8						; size = 4
_bUpperCase$ = 12					; size = 4
_bIsPartition$ = 16					; size = 4
_GetPathType PROC					; COMDAT

; 2062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2063 : 	if (strstr (path, "Partition")
; 2064 : 		&& strstr (path, "Partition0") == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _path$[ebp]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_09MFFJIMND@Partition?$AA@
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 _strstr
  00012	83 c4 08	 add	 esp, 8
  00015	85 c0		 test	 eax, eax
  00017	74 38		 je	 SHORT $LN2@GetPathTyp
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MAFJOMBB@Partition0?$AA@
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _strstr
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	75 26		 jne	 SHORT $LN2@GetPathTyp

; 2065 : 	{
; 2066 : 		*bIsPartition = TRUE;

  0002b	8b 45 10	 mov	 eax, DWORD PTR _bIsPartition$[ebp]

; 2067 : 		return GetString (bUpperCase ? "PARTITION_UPPER_CASE" : "PARTITION_LOWER_CASE");

  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BF@DEJBIFMK@PARTITION_LOWER_CASE?$AA@

; 2072 : 		return GetString (bUpperCase ? "VOLUME_UPPER_CASE" : "VOLUME_LOWER_CASE");
; 2073 : 	}
; 2074 : 
; 2075 : 	*bIsPartition = FALSE;
; 2076 : 	return GetString (bUpperCase ? "DEVICE_UPPER_CASE" : "DEVICE_LOWER_CASE");

  00033	83 7d 0c 00	 cmp	 DWORD PTR _bUpperCase$[ebp], 0
  00037	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@FDOOMICI@PARTITION_UPPER_CASE?$AA@
  00042	0f 44 c1	 cmove	 eax, ecx
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _GetString
  0004b	83 c4 04	 add	 esp, 4
  0004e	5e		 pop	 esi

; 2077 : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN2@GetPathTyp:

; 2068 : 	}
; 2069 : 	else if (strstr (path, "HarddiskVolume"))

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KFCBFOIJ@HarddiskVolume?$AA@
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 _strstr
  0005c	83 c4 08	 add	 esp, 8
  0005f	85 c0		 test	 eax, eax

; 2070 : 	{
; 2071 : 		*bIsPartition = TRUE;

  00061	8b 45 10	 mov	 eax, DWORD PTR _bIsPartition$[ebp]
  00064	74 23		 je	 SHORT $LN4@GetPathTyp

; 2072 : 		return GetString (bUpperCase ? "VOLUME_UPPER_CASE" : "VOLUME_LOWER_CASE");
; 2073 : 	}
; 2074 : 
; 2075 : 	*bIsPartition = FALSE;
; 2076 : 	return GetString (bUpperCase ? "DEVICE_UPPER_CASE" : "DEVICE_LOWER_CASE");

  00066	83 7d 0c 00	 cmp	 DWORD PTR _bUpperCase$[ebp], 0
  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@OHAOKKGN@VOLUME_LOWER_CASE?$AA@
  0006f	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00075	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@IAHBOHIP@VOLUME_UPPER_CASE?$AA@
  0007a	0f 44 c1	 cmove	 eax, ecx
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _GetString
  00083	83 c4 04	 add	 esp, 4
  00086	5e		 pop	 esi

; 2077 : }

  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
$LN4@GetPathTyp:

; 2072 : 		return GetString (bUpperCase ? "VOLUME_UPPER_CASE" : "VOLUME_LOWER_CASE");
; 2073 : 	}
; 2074 : 
; 2075 : 	*bIsPartition = FALSE;
; 2076 : 	return GetString (bUpperCase ? "DEVICE_UPPER_CASE" : "DEVICE_LOWER_CASE");

  00089	83 7d 0c 00	 cmp	 DWORD PTR _bUpperCase$[ebp], 0
  0008d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@CGMNKFDG@DEVICE_LOWER_CASE?$AA@
  00092	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00098	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EBLCOINE@DEVICE_UPPER_CASE?$AA@
  0009d	0f 44 c1	 cmove	 eax, ecx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _GetString
  000a6	83 c4 04	 add	 esp, 4
  000a9	5e		 pop	 esi

; 2077 : }

  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_GetPathType ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _GetWipeModeName
_TEXT	SEGMENT
_modeId$ = 8						; size = 4
_GetWipeModeName PROC					; COMDAT

; 2028 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2029 : 	switch (modeId)

  00003	8b 45 08	 mov	 eax, DWORD PTR _modeId$[ebp]
  00006	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  0000b	7f 32		 jg	 SHORT $LN11@GetWipeMod
  0000d	74 23		 je	 SHORT $LN6@GetWipeMod
  0000f	85 c0		 test	 eax, eax
  00011	74 12		 je	 SHORT $LN4@GetWipeMod
  00013	83 f8 64	 cmp	 eax, 100		; 00000064H
  00016	75 35		 jne	 SHORT $LN9@GetWipeMod

; 2033 : 
; 2034 : 	case GST_WIPE_1_RAND:
; 2035 : 		return GetString ("WIPE_MODE_1_RAND");

  00018	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _modeId$[ebp], OFFSET ??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@

; 2048 : 	}
; 2049 : }

  0001f	5d		 pop	 ebp

; 2033 : 
; 2034 : 	case GST_WIPE_1_RAND:
; 2035 : 		return GetString ("WIPE_MODE_1_RAND");

  00020	e9 00 00 00 00	 jmp	 _GetString
$LN4@GetWipeMod:

; 2030 : 	{
; 2031 : 	case GST_WIPE_NONE:
; 2032 : 		return GetString ("WIPE_MODE_NONE");

  00025	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _modeId$[ebp], OFFSET ??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@

; 2048 : 	}
; 2049 : }

  0002c	5d		 pop	 ebp

; 2030 : 	{
; 2031 : 	case GST_WIPE_NONE:
; 2032 : 		return GetString ("WIPE_MODE_NONE");

  0002d	e9 00 00 00 00	 jmp	 _GetString
$LN6@GetWipeMod:

; 2036 : 
; 2037 : 	case GST_WIPE_3_DOD_5220:
; 2038 : 		return GetString ("WIPE_MODE_3_DOD_5220");

  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _modeId$[ebp], OFFSET ??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@

; 2048 : 	}
; 2049 : }

  00039	5d		 pop	 ebp

; 2036 : 
; 2037 : 	case GST_WIPE_3_DOD_5220:
; 2038 : 		return GetString ("WIPE_MODE_3_DOD_5220");

  0003a	e9 00 00 00 00	 jmp	 _GetString
$LN11@GetWipeMod:

; 2029 : 	switch (modeId)

  0003f	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  00044	74 21		 je	 SHORT $LN7@GetWipeMod
  00046	3d ac 0d 00 00	 cmp	 eax, 3500		; 00000dacH
  0004b	74 0d		 je	 SHORT $LN8@GetWipeMod
$LN9@GetWipeMod:

; 2045 : 
; 2046 : 	default:
; 2047 : 		return GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE");

  0004d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _modeId$[ebp], OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@

; 2048 : 	}
; 2049 : }

  00054	5d		 pop	 ebp

; 2045 : 
; 2046 : 	default:
; 2047 : 		return GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE");

  00055	e9 00 00 00 00	 jmp	 _GetString
$LN8@GetWipeMod:

; 2042 : 
; 2043 : 	case GST_WIPE_35_GUTMANN:
; 2044 : 		return GetString ("WIPE_MODE_35_GUTMANN");

  0005a	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _modeId$[ebp], OFFSET ??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@

; 2048 : 	}
; 2049 : }

  00061	5d		 pop	 ebp

; 2042 : 
; 2043 : 	case GST_WIPE_35_GUTMANN:
; 2044 : 		return GetString ("WIPE_MODE_35_GUTMANN");

  00062	e9 00 00 00 00	 jmp	 _GetString
$LN7@GetWipeMod:

; 2039 : 
; 2040 : 	case GST_WIPE_7_DOD_5220:
; 2041 : 		return GetString ("WIPE_MODE_7_DOD_5220");

  00067	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _modeId$[ebp], OFFSET ??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@

; 2048 : 	}
; 2049 : }

  0006e	5d		 pop	 ebp

; 2039 : 
; 2040 : 	case GST_WIPE_7_DOD_5220:
; 2041 : 		return GetString ("WIPE_MODE_7_DOD_5220");

  0006f	e9 00 00 00 00	 jmp	 _GetString
_GetWipeModeName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _PopulateWipeModeCombo
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_bNA$ = 12						; size = 4
_bInPlaceEncryption$ = 16				; size = 4
_PopulateWipeModeCombo PROC				; COMDAT

; 2001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2002 : 	if (bNA)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _bNA$[ebp], 0
  00007	56		 push	 esi
  00008	74 31		 je	 SHORT $LN2@PopulateWi

; 2003 : 	{
; 2004 : 		AddComboPairW (hComboBox, GetString ("NOT_APPLICABLE_OR_NOT_AVAILABLE"), GST_WIPE_NONE);

  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KEHLKHJA@NOT_APPLICABLE_OR_NOT_AVAILABLE?$AA@
  0000f	e8 00 00 00 00	 call	 _GetString
  00014	8b 75 08	 mov	 esi, DWORD PTR _hComboBox$[ebp]
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	6a 00		 push	 0
  0001d	68 43 01 00 00	 push	 323			; 00000143H
  00022	56		 push	 esi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16
  00029	6a 00		 push	 0
  0002b	50		 push	 eax
  0002c	68 51 01 00 00	 push	 337			; 00000151H
  00031	56		 push	 esi
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00038	5e		 pop	 esi

; 2016 : 	}
; 2017 : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN2@PopulateWi:

; 2005 : 	}
; 2006 : 	else
; 2007 : 	{
; 2008 : 		if (bInPlaceEncryption)

  0003b	83 7d 10 00	 cmp	 DWORD PTR _bInPlaceEncryption$[ebp], 0
  0003f	53		 push	 ebx
  00040	57		 push	 edi
  00041	74 25		 je	 SHORT $LN4@PopulateWi

; 2009 : 			AddComboPairW (hComboBox, GetString ("WIPE_MODE_NONE"), GST_WIPE_NONE);

  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GHLKBIBG@WIPE_MODE_NONE?$AA@
  00048	e8 00 00 00 00	 call	 _GetString
  0004d	8b 75 08	 mov	 esi, DWORD PTR _hComboBox$[ebp]
  00050	83 c4 04	 add	 esp, 4
  00053	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  00059	50		 push	 eax
  0005a	6a 00		 push	 0
  0005c	68 43 01 00 00	 push	 323			; 00000143H
  00061	56		 push	 esi
  00062	ff d7		 call	 edi
  00064	6a 00		 push	 0

; 2010 : 		else

  00066	eb 23		 jmp	 SHORT $LN19@PopulateWi
$LN4@PopulateWi:

; 2011 : 			AddComboPairW (hComboBox, GetString ("WIPE_MODE_1_RAND"), GST_WIPE_1_RAND);

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NCGBCPHN@WIPE_MODE_1_RAND?$AA@
  0006d	e8 00 00 00 00	 call	 _GetString
  00072	8b 75 08	 mov	 esi, DWORD PTR _hComboBox$[ebp]
  00075	83 c4 04	 add	 esp, 4
  00078	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageW@16
  0007e	50		 push	 eax
  0007f	6a 00		 push	 0
  00081	68 43 01 00 00	 push	 323			; 00000143H
  00086	56		 push	 esi
  00087	ff d7		 call	 edi
  00089	6a 64		 push	 100			; 00000064H
$LN19@PopulateWi:
  0008b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  00091	50		 push	 eax
  00092	68 51 01 00 00	 push	 337			; 00000151H
  00097	56		 push	 esi
  00098	ff d3		 call	 ebx

; 2012 : 
; 2013 : 		AddComboPairW (hComboBox, GetString ("WIPE_MODE_3_DOD_5220"), GST_WIPE_3_DOD_5220);

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CKGIKNEN@WIPE_MODE_3_DOD_5220?$AA@
  0009f	e8 00 00 00 00	 call	 _GetString
  000a4	83 c4 04	 add	 esp, 4
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	68 43 01 00 00	 push	 323			; 00000143H
  000af	56		 push	 esi
  000b0	ff d7		 call	 edi
  000b2	68 2c 01 00 00	 push	 300			; 0000012cH
  000b7	50		 push	 eax
  000b8	68 51 01 00 00	 push	 337			; 00000151H
  000bd	56		 push	 esi
  000be	ff d3		 call	 ebx

; 2014 : 		AddComboPairW (hComboBox, GetString ("WIPE_MODE_7_DOD_5220"), GST_WIPE_7_DOD_5220);

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JKLBNOMP@WIPE_MODE_7_DOD_5220?$AA@
  000c5	e8 00 00 00 00	 call	 _GetString
  000ca	83 c4 04	 add	 esp, 4
  000cd	50		 push	 eax
  000ce	6a 00		 push	 0
  000d0	68 43 01 00 00	 push	 323			; 00000143H
  000d5	56		 push	 esi
  000d6	ff d7		 call	 edi
  000d8	68 bc 02 00 00	 push	 700			; 000002bcH
  000dd	50		 push	 eax
  000de	68 51 01 00 00	 push	 337			; 00000151H
  000e3	56		 push	 esi
  000e4	ff d3		 call	 ebx

; 2015 : 		AddComboPairW (hComboBox, GetString ("WIPE_MODE_35_GUTMANN"), GST_WIPE_35_GUTMANN);

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OGMMPIGE@WIPE_MODE_35_GUTMANN?$AA@
  000eb	e8 00 00 00 00	 call	 _GetString
  000f0	83 c4 04	 add	 esp, 4
  000f3	50		 push	 eax
  000f4	6a 00		 push	 0
  000f6	68 43 01 00 00	 push	 323			; 00000143H
  000fb	56		 push	 esi
  000fc	ff d7		 call	 edi
  000fe	68 ac 0d 00 00	 push	 3500			; 00000dacH
  00103	50		 push	 eax
  00104	68 51 01 00 00	 push	 337			; 00000151H
  00109	56		 push	 esi
  0010a	ff d3		 call	 ebx
  0010c	5f		 pop	 edi
  0010d	5b		 pop	 ebx
  0010e	5e		 pop	 esi

; 2016 : 	}
; 2017 : }

  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
_PopulateWipeModeCombo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SelectAlgo
_TEXT	SEGMENT
_nCount$1$ = -4						; size = 4
_hComboBox$ = 8						; size = 4
_algo_id$ = 12						; size = 4
_SelectAlgo PROC					; COMDAT

; 1967 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1968 : 	LPARAM nCount = SendMessage (hComboBox, CB_GETCOUNT, 0, 0);

  00005	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SendMessageA@16
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b 7d 08	 mov	 edi, DWORD PTR _hComboBox$[ebp]
  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	68 46 01 00 00	 push	 326			; 00000146H
  00019	57		 push	 edi
  0001a	ff d3		 call	 ebx

; 1969 : 	LPARAM x, i;
; 1970 : 
; 1971 : 	for (i = 0; i < nCount; i++)

  0001c	33 f6		 xor	 esi, esi
  0001e	89 45 fc	 mov	 DWORD PTR _nCount$1$[ebp], eax
  00021	85 c0		 test	 eax, eax
  00023	7e 18		 jle	 SHORT $LN3@SelectAlgo
$LL4@SelectAlgo:

; 1972 : 	{
; 1973 : 		x = SendMessage (hComboBox, CB_GETITEMDATA, i, 0);

  00025	6a 00		 push	 0
  00027	56		 push	 esi
  00028	68 50 01 00 00	 push	 336			; 00000150H
  0002d	57		 push	 edi
  0002e	ff d3		 call	 ebx

; 1974 : 		if (x == (LPARAM) *algo_id)

  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _algo_id$[ebp]
  00033	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00035	74 2a		 je	 SHORT $LN8@SelectAlgo

; 1969 : 	LPARAM x, i;
; 1970 : 
; 1971 : 	for (i = 0; i < nCount; i++)

  00037	46		 inc	 esi
  00038	3b 75 fc	 cmp	 esi, DWORD PTR _nCount$1$[ebp]
  0003b	7c e8		 jl	 SHORT $LL4@SelectAlgo
$LN3@SelectAlgo:

; 1977 : 			return;
; 1978 : 		}
; 1979 : 	}
; 1980 : 
; 1981 : 	/* Something went wrong ; couldn't find the requested algo id so we drop
; 1982 : 	   back to a default */
; 1983 : 
; 1984 : 	*algo_id = SendMessage (hComboBox, CB_GETITEMDATA, 0, 0);

  0003d	6a 00		 push	 0
  0003f	6a 00		 push	 0
  00041	68 50 01 00 00	 push	 336			; 00000150H
  00046	57		 push	 edi
  00047	ff d3		 call	 ebx
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _algo_id$[ebp]

; 1985 : 
; 1986 : 	SendMessage (hComboBox, CB_SETCURSEL, 0, 0);

  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	68 4e 01 00 00	 push	 334			; 0000014eH
  00055	57		 push	 edi
  00056	89 01		 mov	 DWORD PTR [ecx], eax
  00058	ff d3		 call	 ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 1987 : 
; 1988 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN8@SelectAlgo:

; 1975 : 		{
; 1976 : 			SendMessage (hComboBox, CB_SETCURSEL, i, 0);

  00061	6a 00		 push	 0
  00063	56		 push	 esi

; 1985 : 
; 1986 : 	SendMessage (hComboBox, CB_SETCURSEL, 0, 0);

  00064	68 4e 01 00 00	 push	 334			; 0000014eH
  00069	57		 push	 edi
  0006a	ff d3		 call	 ebx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 1987 : 
; 1988 : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_SelectAlgo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AddComboPairW
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_lpszItem$ = 12						; size = 4
_value$ = 16						; size = 4
_AddComboPairW PROC					; COMDAT

; 1958 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1959 : 	LPARAM nIndex;
; 1960 : 
; 1961 : 	nIndex = SendMessageW (hComboBox, CB_ADDSTRING, 0, (LPARAM) lpszItem);

  00003	ff 75 0c	 push	 DWORD PTR _lpszItem$[ebp]
  00006	6a 00		 push	 0
  00008	68 43 01 00 00	 push	 323			; 00000143H
  0000d	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageW@16

; 1962 : 	nIndex = SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) value);

  00016	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00019	50		 push	 eax
  0001a	68 51 01 00 00	 push	 337			; 00000151H
  0001f	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1963 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_AddComboPairW ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AddComboPair
_TEXT	SEGMENT
_hComboBox$ = 8						; size = 4
_lpszItem$ = 12						; size = 4
_value$ = 16						; size = 4
_AddComboPair PROC					; COMDAT

; 1949 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1950 : 	LPARAM nIndex;
; 1951 : 
; 1952 : 	nIndex = SendMessage (hComboBox, CB_ADDSTRING, 0, (LPARAM) lpszItem);

  00003	ff 75 0c	 push	 DWORD PTR _lpszItem$[ebp]
  00006	6a 00		 push	 0
  00008	68 43 01 00 00	 push	 323			; 00000143H
  0000d	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1953 : 	nIndex = SendMessage (hComboBox, CB_SETITEMDATA, nIndex, (LPARAM) value);

  00016	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00019	50		 push	 eax
  0001a	68 51 01 00 00	 push	 337			; 00000151H
  0001f	ff 75 08	 push	 DWORD PTR _hComboBox$[ebp]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1954 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_AddComboPair ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _HandCursor
_TEXT	SEGMENT
_HandCursor PROC					; COMDAT

; 1940 : 	static HCURSOR hcHand;
; 1941 : 	if (hcHand == NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A
  00005	85 c0		 test	 eax, eax
  00007	75 11		 jne	 SHORT $LN2@HandCursor

; 1942 : 		hcHand = LoadCursor (NULL, IDC_HAND);

  00009	68 89 7f 00 00	 push	 32649			; 00007f89H
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A, eax
$LN2@HandCursor:

; 1943 : 	SetCursor (hcHand);

  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 1944 : 	hCursor = hcHand;

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcHand@?1??HandCursor@@9@4PAUHICON__@@A
  00026	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor

; 1945 : }

  0002b	c3		 ret	 0
_HandCursor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ArrowWaitCursor
_TEXT	SEGMENT
_ArrowWaitCursor PROC					; COMDAT

; 1924 : 	static HCURSOR hcArrowWait;
; 1925 : 	if (hcArrowWait == NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A
  00005	85 c0		 test	 eax, eax
  00007	75 11		 jne	 SHORT $LN2@ArrowWaitC

; 1926 : 		hcArrowWait = LoadCursor (NULL, IDC_APPSTARTING);

  00009	68 8a 7f 00 00	 push	 32650			; 00007f8aH
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A, eax
$LN2@ArrowWaitC:

; 1927 : 	SetCursor (hcArrowWait);

  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 1928 : 	hCursor = hcArrowWait;

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrowWait@?1??ArrowWaitCursor@@9@4PAUHICON__@@A
  00026	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor

; 1929 : }

  0002b	c3		 ret	 0
_ArrowWaitCursor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _NormalCursor
_TEXT	SEGMENT
_NormalCursor PROC					; COMDAT

; 1914 : 	static HCURSOR hcArrow;
; 1915 : 	if (hcArrow == NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A
  00005	85 c0		 test	 eax, eax
  00007	75 11		 jne	 SHORT $LN2@NormalCurs

; 1916 : 		hcArrow = LoadCursor (NULL, IDC_ARROW);

  00009	68 00 7f 00 00	 push	 32512			; 00007f00H
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?hcArrow@?1??NormalCursor@@9@4PAUHICON__@@A, eax
$LN2@NormalCurs:

; 1917 : 	SetCursor (hcArrow);

  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 1918 : 	hCursor = NULL;

  00021	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, 0 ; hCursor

; 1919 : }

  0002b	c3		 ret	 0
_NormalCursor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _WaitCursor
_TEXT	SEGMENT
_WaitCursor PROC					; COMDAT

; 1904 : 	static HCURSOR hcWait;
; 1905 : 	if (hcWait == NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A
  00005	85 c0		 test	 eax, eax
  00007	75 11		 jne	 SHORT $LN2@WaitCursor

; 1906 : 		hcWait = LoadCursor (NULL, IDC_WAIT);

  00009	68 02 7f 00 00	 push	 32514			; 00007f02H
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A, eax
$LN2@WaitCursor:

; 1907 : 	SetCursor (hcWait);

  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursor@4

; 1908 : 	hCursor = hcWait;

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hcWait@?1??WaitCursor@@9@4PAUHICON__@@A
  00026	a3 00 00 00 00	 mov	 DWORD PTR ?hCursor@@3PAUHICON__@@A, eax ; hCursor

; 1909 : }

  0002b	c3		 ret	 0
_WaitCursor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _SplashDlgProc@16
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_SplashDlgProc@16 PROC					; COMDAT

; 1897 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1899 : }

  00003	5d		 pop	 ebp

; 1898 : 	return DefDlgProc (hwnd, uMsg, wParam, lParam);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__DefDlgProcA@16
_SplashDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _UnregisterRedTick
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_UnregisterRedTick PROC					; COMDAT

; 1891 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1892 :   return UnregisterClass ("REDTICK", hInstance);

  00003	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_07EFPKBNGC@REDTICK?$AA@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnregisterClassA@8

; 1893 : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_UnregisterRedTick ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RegisterRedTick
_TEXT	SEGMENT
_wc$ = -40						; size = 40
_hInstance$ = 8						; size = 4
_RegisterRedTick PROC					; COMDAT

; 1868 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 1869 :   WNDCLASS wc;
; 1870 :   ULONG rc;
; 1871 : 
; 1872 :   memset(&wc, 0 , sizeof wc);
; 1873 : 
; 1874 :   wc.style = CS_HREDRAW | CS_VREDRAW;
; 1875 :   wc.cbClsExtra = 0;
; 1876 :   wc.cbWndExtra = 4;
; 1877 :   wc.hInstance = hInstance;

  00006	8b 45 08	 mov	 eax, DWORD PTR _hInstance$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	0f 11 45 d8	 movups	 XMMWORD PTR _wc$[ebp], xmm0

; 1878 :   wc.hIcon = LoadIcon (NULL, IDI_APPLICATION);

  00010	68 00 7f 00 00	 push	 32512			; 00007f00H
  00015	0f 11 45 e8	 movups	 XMMWORD PTR _wc$[ebp+16], xmm0
  00019	6a 00		 push	 0
  0001b	66 0f d6 45 f8	 movq	 QWORD PTR _wc$[ebp+32], xmm0
  00020	c7 45 d8 03 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 3
  00027	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+8], 0
  0002e	c7 45 e4 04 00
	00 00		 mov	 DWORD PTR _wc$[ebp+12], 4
  00035	89 45 e8	 mov	 DWORD PTR _wc$[ebp+16], eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8

; 1879 :   wc.hCursor = NULL;
; 1880 :   wc.hbrBackground = (HBRUSH) GetStockObject (LTGRAY_BRUSH);

  0003e	6a 01		 push	 1
  00040	89 45 ec	 mov	 DWORD PTR _wc$[ebp+20], eax
  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+24], 0
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStockObject@4
  00050	89 45 f4	 mov	 DWORD PTR _wc$[ebp+28], eax

; 1881 :   wc.lpszClassName = "REDTICK";
; 1882 :   wc.lpfnWndProc = &RedTick; 
; 1883 :   
; 1884 :   rc = (ULONG) RegisterClass (&wc);

  00053	8d 45 d8	 lea	 eax, DWORD PTR _wc$[ebp]
  00056	50		 push	 eax
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+36], OFFSET ??_C@_07EFPKBNGC@REDTICK?$AA@
  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+4], OFFSET _RedTick@16
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4

; 1885 : 
; 1886 :   return rc == 0 ? FALSE : TRUE;

  0006b	33 c9		 xor	 ecx, ecx
  0006d	66 85 c0	 test	 ax, ax
  00070	0f 95 c1	 setne	 cl
  00073	8b c1		 mov	 eax, ecx

; 1887 : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_RegisterRedTick ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RedTick@16
_TEXT	SEGMENT
_hwnd$GSCopy$1$ = -108					; size = 4
_hPen$1$ = -104						; size = 4
_hObj$1$ = -100						; size = 4
_bx$1$ = -96						; size = 4
_bEndPaint$1$ = -92					; size = 4
_hDC$1$ = -88						; size = 4
_tmp$1 = -84						; size = 64
_Rect$2 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_RedTick@16 PROC					; COMDAT

; 1781 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1782 : 	if (uMsg == WM_CREATE)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _hwnd$[ebp]
  00017	89 5d 94	 mov	 DWORD PTR _hwnd$GSCopy$1$[ebp], ebx
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	0f 84 88 01 00
	00		 je	 $LN8@RedTick

; 1783 : 	{
; 1784 : 	}
; 1785 : /**
; 1786 :  *
; 1787 :  *	\fn else if (uMsg == WM_DESTROY)
; 1788 :  *	\brief
; 1789 :  *	\param[in] uMsg ==
; 1790 :  *	\return
; 1791 :  *
; 1792 :  */
; 1793 : 	else if (uMsg == WM_DESTROY)

  00023	83 f8 02	 cmp	 eax, 2
  00026	0f 84 7f 01 00
	00		 je	 $LN8@RedTick

; 1794 : 	{
; 1795 : 	}
; 1796 : /**
; 1797 :  *
; 1798 :  *	\fn else if (uMsg == WM_TIMER)
; 1799 :  *	\brief
; 1800 :  *	\param[in] uMsg ==
; 1801 :  *	\return
; 1802 :  *
; 1803 :  */
; 1804 : 	else if (uMsg == WM_TIMER)

  0002c	3d 13 01 00 00	 cmp	 eax, 275		; 00000113H
  00031	0f 84 74 01 00
	00		 je	 $LN8@RedTick

; 1805 : 	{
; 1806 : 	}
; 1807 : /**
; 1808 :  *
; 1809 :  *	\fn else if (uMsg == WM_PAINT)
; 1810 :  *	\brief
; 1811 :  *	\param[in] uMsg ==
; 1812 :  *	\return
; 1813 :  *
; 1814 :  */
; 1815 : 	else if (uMsg == WM_PAINT)

  00037	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0003a	0f 85 6b 01 00
	00		 jne	 $LN8@RedTick

; 1816 : 	{
; 1817 : 		PAINTSTRUCT tmp;
; 1818 : 		HPEN hPen;
; 1819 : 		HDC hDC;
; 1820 : 		BOOL bEndPaint;
; 1821 : 		RECT Rect;
; 1822 : 
; 1823 : 		if (GetUpdateRect (hwnd, NULL, FALSE))

  00040	57		 push	 edi
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	53		 push	 ebx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetUpdateRect@12
  0004c	85 c0		 test	 eax, eax
  0004e	74 3c		 je	 SHORT $LN9@RedTick

; 1824 : 		{
; 1825 : 			hDC = BeginPaint (hwnd, &tmp);

  00050	8d 45 ac	 lea	 eax, DWORD PTR _tmp$1[ebp]
  00053	50		 push	 eax
  00054	53		 push	 ebx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  0005b	8b f8		 mov	 edi, eax

; 1826 : 			bEndPaint = TRUE;

  0005d	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _bEndPaint$1$[ebp], 1
  00064	89 7d a8	 mov	 DWORD PTR _hDC$1$[ebp], edi

; 1827 : 			if (hDC == NULL)

  00067	85 ff		 test	 edi, edi
  00069	75 34		 jne	 SHORT $LN10@RedTick

; 1828 : 				return DefWindowProc (hwnd, uMsg, wParam, lParam);

  0006b	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0006e	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00071	6a 0f		 push	 15			; 0000000fH
  00073	53		 push	 ebx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0007a	5f		 pop	 edi
  0007b	5b		 pop	 ebx

; 1864 : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 10 00	 ret	 16			; 00000010H
$LN9@RedTick:

; 1829 : 		}
; 1830 : 		else
; 1831 : 		{
; 1832 : 			hDC = GetDC (hwnd);

  0008c	53		 push	 ebx
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00093	8b f8		 mov	 edi, eax
  00095	89 45 a8	 mov	 DWORD PTR _hDC$1$[ebp], eax

; 1833 : 			bEndPaint = FALSE;

  00098	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _bEndPaint$1$[ebp], 0
$LN10@RedTick:

; 1834 : 		}
; 1835 : 
; 1836 : 		GetClientRect (hwnd, &Rect);

  0009f	8d 45 ec	 lea	 eax, DWORD PTR _Rect$2[ebp]
  000a2	50		 push	 eax
  000a3	53		 push	 ebx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1837 : 
; 1838 : 		hPen = CreatePen (PS_SOLID, 2, RGB (0, 255, 0));

  000aa	68 00 ff 00 00	 push	 65280			; 0000ff00H
  000af	6a 02		 push	 2
  000b1	6a 00		 push	 0
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePen@12
  000b9	89 45 98	 mov	 DWORD PTR _hPen$1$[ebp], eax

; 1839 : 		if (hPen != NULL)

  000bc	85 c0		 test	 eax, eax
  000be	0f 84 a0 00 00
	00		 je	 $LN12@RedTick

; 1840 : 		{
; 1841 : 			HGDIOBJ hObj = SelectObject (hDC, hPen);

  000c4	56		 push	 esi
  000c5	50		 push	 eax
  000c6	57		 push	 edi
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1842 : 			WORD bx = LOWORD (GetDialogBaseUnits ());

  000cd	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDialogBaseUnits@0
  000d3	89 45 9c	 mov	 DWORD PTR _hObj$1$[ebp], eax
  000d6	ff d6		 call	 esi
  000d8	0f b7 c0	 movzx	 eax, ax
  000db	89 45 a0	 mov	 DWORD PTR _bx$1$[ebp], eax

; 1843 : 			WORD by = HIWORD (GetDialogBaseUnits ());

  000de	ff d6		 call	 esi

; 1844 : 
; 1845 : 			MoveToEx (hDC, (Rect.right - Rect.left) / 2, Rect.bottom, NULL);

  000e0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__MoveToEx@16
  000e6	8b d8		 mov	 ebx, eax
  000e8	8b 45 f4	 mov	 eax, DWORD PTR _Rect$2[ebp+8]
  000eb	2b 45 ec	 sub	 eax, DWORD PTR _Rect$2[ebp]
  000ee	6a 00		 push	 0
  000f0	ff 75 f8	 push	 DWORD PTR _Rect$2[ebp+12]
  000f3	99		 cdq
  000f4	2b c2		 sub	 eax, edx
  000f6	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000f9	d1 f8		 sar	 eax, 1
  000fb	50		 push	 eax
  000fc	57		 push	 edi
  000fd	ff d6		 call	 esi

; 1846 : 			LineTo (hDC, Rect.right, Rect.top);

  000ff	ff 75 f0	 push	 DWORD PTR _Rect$2[ebp+4]
  00102	ff 75 f4	 push	 DWORD PTR _Rect$2[ebp+8]
  00105	57		 push	 edi
  00106	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__LineTo@12
  0010c	ff d7		 call	 edi

; 1847 : 			MoveToEx (hDC, (Rect.right - Rect.left) / 2, Rect.bottom, NULL);

  0010e	8b 45 f4	 mov	 eax, DWORD PTR _Rect$2[ebp+8]
  00111	2b 45 ec	 sub	 eax, DWORD PTR _Rect$2[ebp]
  00114	6a 00		 push	 0
  00116	ff 75 f8	 push	 DWORD PTR _Rect$2[ebp+12]
  00119	99		 cdq
  0011a	2b c2		 sub	 eax, edx
  0011c	d1 f8		 sar	 eax, 1
  0011e	50		 push	 eax
  0011f	ff 75 a8	 push	 DWORD PTR _hDC$1$[ebp]
  00122	ff d6		 call	 esi

; 1848 : 
; 1849 : 			LineTo (hDC, (3 * bx) / 4, (2 * by) / 8);

  00124	8b c3		 mov	 eax, ebx
  00126	03 c0		 add	 eax, eax
  00128	99		 cdq
  00129	83 e2 07	 and	 edx, 7
  0012c	03 c2		 add	 eax, edx
  0012e	c1 f8 03	 sar	 eax, 3
  00131	50		 push	 eax
  00132	8b 45 a0	 mov	 eax, DWORD PTR _bx$1$[ebp]
  00135	0f b7 c0	 movzx	 eax, ax
  00138	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0013b	99		 cdq
  0013c	83 e2 03	 and	 edx, 3
  0013f	03 c2		 add	 eax, edx
  00141	c1 f8 02	 sar	 eax, 2
  00144	50		 push	 eax
  00145	ff 75 a8	 push	 DWORD PTR _hDC$1$[ebp]
  00148	ff d7		 call	 edi

; 1850 : 
; 1851 : 			SelectObject (hDC, hObj);

  0014a	ff 75 9c	 push	 DWORD PTR _hObj$1$[ebp]
  0014d	8b 7d a8	 mov	 edi, DWORD PTR _hDC$1$[ebp]
  00150	57		 push	 edi
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1852 : 			DeleteObject (hPen);

  00157	ff 75 98	 push	 DWORD PTR _hPen$1$[ebp]
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  00160	8b 5d 94	 mov	 ebx, DWORD PTR _hwnd$GSCopy$1$[ebp]
  00163	5e		 pop	 esi
$LN12@RedTick:
  00164	83 7d a4 00	 cmp	 DWORD PTR _bEndPaint$1$[ebp], 0

; 1853 : 		}
; 1854 : 
; 1855 : 		if (bEndPaint)

  00168	74 22		 je	 SHORT $LN13@RedTick

; 1856 : 			EndPaint (hwnd, &tmp);

  0016a	8d 45 ac	 lea	 eax, DWORD PTR _tmp$1[ebp]
  0016d	50		 push	 eax
  0016e	53		 push	 ebx
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
  00175	5f		 pop	 edi

; 1859 : 
; 1860 : 		return TRUE;

  00176	b8 01 00 00 00	 mov	 eax, 1
  0017b	5b		 pop	 ebx

; 1864 : }

  0017c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017f	33 cd		 xor	 ecx, ebp
  00181	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c2 10 00	 ret	 16			; 00000010H
$LN13@RedTick:

; 1857 : 		else
; 1858 : 			ReleaseDC (hwnd, hDC);

  0018c	57		 push	 edi
  0018d	53		 push	 ebx
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  00194	5f		 pop	 edi

; 1859 : 
; 1860 : 		return TRUE;

  00195	b8 01 00 00 00	 mov	 eax, 1
  0019a	5b		 pop	 ebx

; 1864 : }

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019e	33 cd		 xor	 ecx, ebp
  001a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 10 00	 ret	 16			; 00000010H
$LN8@RedTick:

; 1861 : 	}
; 1862 : 
; 1863 : 	return DefWindowProc (hwnd, uMsg, wParam, lParam);

  001ab	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  001ae	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  001b1	50		 push	 eax
  001b2	53		 push	 ebx
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 1864 : }

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	5b		 pop	 ebx
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 10 00	 ret	 16			; 00000010H
_RedTick@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RenderBitmap
_TEXT	SEGMENT
_bitmap$ = -60						; size = 24
_hbmpRescaled$1$ = -36					; size = 4
_picture$1$ = -36					; size = 4
_hwndDest$GSCopy$1$ = -32				; size = 4
_dcMem$1$ = -28						; size = 4
_nHeight$GSCopy$1$ = -24				; size = 4
_hdcRescaled$1$ = -24					; size = 4
_rec$1 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_resource$ = 8						; size = 4
_hwndDest$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_nWidth$ = 24						; size = 4
_nHeight$ = 28						; size = 4
_bDirectRender$ = 32					; size = 4
_bKeepAspectRatio$ = 36					; size = 4
_RenderBitmap PROC					; COMDAT

; 1690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _resource$[ebp]
  00013	8b 4d 1c	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 18	 mov	 ebx, DWORD PTR _nWidth$[ebp]
  0001a	56		 push	 esi
  0001b	8b 75 0c	 mov	 esi, DWORD PTR _hwndDest$[ebp]
  0001e	57		 push	 edi

; 1691 : 	LRESULT lResult = 0;
; 1692 : 
; 1693 : 	HDC hdcSrc = CreateMemBitmap (hInst, hwndDest, resource);

  0001f	50		 push	 eax
  00020	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00026	89 75 e0	 mov	 DWORD PTR _hwndDest$GSCopy$1$[ebp], esi
  00029	89 4d e8	 mov	 DWORD PTR _nHeight$GSCopy$1$[ebp], ecx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00032	56		 push	 esi
  00033	8b f8		 mov	 edi, eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0003b	8b f0		 mov	 esi, eax
  0003d	56		 push	 esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00044	6a 01		 push	 1
  00046	50		 push	 eax
  00047	89 45 e4	 mov	 DWORD PTR _dcMem$1$[ebp], eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMapMode@8
  00050	57		 push	 edi
  00051	ff 75 e4	 push	 DWORD PTR _dcMem$1$[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  0005a	57		 push	 edi
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
  00061	56		 push	 esi
  00062	8b 75 e0	 mov	 esi, DWORD PTR _hwndDest$GSCopy$1$[ebp]
  00065	56		 push	 esi
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 1694 : 
; 1695 : 	HGDIOBJ picture = GetCurrentObject (hdcSrc, OBJ_BITMAP);

  0006c	6a 07		 push	 7
  0006e	ff 75 e4	 push	 DWORD PTR _dcMem$1$[ebp]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentObject@8

; 1696 : 
; 1697 : 	HBITMAP hbmpRescaled;
; 1698 : 	BITMAP bitmap;
; 1699 : 
; 1700 : 	HDC hdcRescaled;
; 1701 : 
; 1702 : 	if (!bDirectRender && nWidth == 0 && nHeight == 0)

  00077	83 7d 20 00	 cmp	 DWORD PTR _bDirectRender$[ebp], 0
  0007b	8b 7d e8	 mov	 edi, DWORD PTR _nHeight$GSCopy$1$[ebp]
  0007e	89 45 dc	 mov	 DWORD PTR _picture$1$[ebp], eax
  00081	75 59		 jne	 SHORT $LN4@RenderBitm
  00083	85 db		 test	 ebx, ebx
  00085	75 55		 jne	 SHORT $LN4@RenderBitm
  00087	85 ff		 test	 edi, edi
  00089	75 51		 jne	 SHORT $LN4@RenderBitm

; 1703 : 	{
; 1704 : 		RECT rec;
; 1705 : 
; 1706 : 		GetClientRect (hwndDest, &rec);

  0008b	8d 45 ec	 lea	 eax, DWORD PTR _rec$1[ebp]
  0008e	50		 push	 eax
  0008f	56		 push	 esi
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1711 : 			{
; 1712 : 				// Do not fix this, it's correct. We use the Y scale factor intentionally for both
; 1713 : 				// directions to maintain aspect ratio (see above for more info).
; 1714 : 				nWidth = CompensateYDPI (rec.right);

  00096	ff 75 f4	 push	 DWORD PTR _rec$1[ebp+8]
  00099	39 7d 24	 cmp	 DWORD PTR _bKeepAspectRatio$[ebp], edi
  0009c	74 2a		 je	 SHORT $LN3@RenderBitm

; 1707 : 
; 1708 : 		if (bKeepAspectRatio)
; 1709 : 		{
; 1710 : 			if (DlgAspectRatio > 1)

  0009e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR _DlgAspectRatio
  000a6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  000ae	76 07		 jbe	 SHORT $LN5@RenderBitm

; 1711 : 			{
; 1712 : 				// Do not fix this, it's correct. We use the Y scale factor intentionally for both
; 1713 : 				// directions to maintain aspect ratio (see above for more info).
; 1714 : 				nWidth = CompensateYDPI (rec.right);

  000b0	e8 00 00 00 00	 call	 _CompensateYDPI

; 1715 : 				nHeight = CompensateYDPI (rec.bottom);
; 1716 : 			}
; 1717 : 			else

  000b5	eb 16		 jmp	 SHORT $LN17@RenderBitm
$LN5@RenderBitm:

; 1718 : 			{
; 1719 : 				// Do not fix this, it's correct. We use the X scale factor intentionally for both
; 1720 : 				// directions to maintain aspect ratio (see above for more info).
; 1721 : 				nWidth = CompensateXDPI (rec.right);

  000b7	e8 00 00 00 00	 call	 _CompensateXDPI

; 1722 : 				nHeight = CompensateXDPI (rec.bottom);

  000bc	ff 75 f8	 push	 DWORD PTR _rec$1[ebp+12]
  000bf	8b d8		 mov	 ebx, eax
  000c1	e8 00 00 00 00	 call	 _CompensateXDPI

; 1723 : 			}
; 1724 : 		}
; 1725 : 		else

  000c6	eb 0f		 jmp	 SHORT $LN18@RenderBitm
$LN3@RenderBitm:

; 1726 : 		{
; 1727 : 			nWidth = CompensateXDPI (rec.right);

  000c8	e8 00 00 00 00	 call	 _CompensateXDPI
$LN17@RenderBitm:

; 1728 : 			nHeight = CompensateYDPI (rec.bottom);

  000cd	ff 75 f8	 push	 DWORD PTR _rec$1[ebp+12]
  000d0	8b d8		 mov	 ebx, eax
  000d2	e8 00 00 00 00	 call	 _CompensateYDPI
$LN18@RenderBitm:
  000d7	83 c4 08	 add	 esp, 8
  000da	8b f8		 mov	 edi, eax
$LN4@RenderBitm:

; 1729 : 		}
; 1730 : 	}
; 1731 : 
; 1732 : 	GetObject (picture, sizeof (BITMAP), &bitmap);

  000dc	8d 45 c4	 lea	 eax, DWORD PTR _bitmap$[ebp]
  000df	50		 push	 eax
  000e0	6a 18		 push	 24			; 00000018H
  000e2	ff 75 dc	 push	 DWORD PTR _picture$1$[ebp]
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12

; 1733 : 
; 1734 :     hdcRescaled = CreateCompatibleDC (hdcSrc); 

  000eb	8b 75 e4	 mov	 esi, DWORD PTR _dcMem$1$[ebp]
  000ee	56		 push	 esi
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4

; 1735 :  
; 1736 :     hbmpRescaled = CreateCompatibleBitmap (hdcSrc, nWidth, nHeight); 

  000f5	57		 push	 edi
  000f6	53		 push	 ebx
  000f7	56		 push	 esi
  000f8	89 45 e8	 mov	 DWORD PTR _hdcRescaled$1$[ebp], eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  00101	8b f0		 mov	 esi, eax

; 1737 :  
; 1738 :     SelectObject (hdcRescaled, hbmpRescaled);

  00103	56		 push	 esi
  00104	ff 75 e8	 push	 DWORD PTR _hdcRescaled$1$[ebp]
  00107	89 75 dc	 mov	 DWORD PTR _hbmpRescaled$1$[ebp], esi
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1739 : 
; 1740 : 	/* Anti-aliasing mode (HALFTONE is the only anti-aliasing algorithm natively supported by Windows 2000.
; 1741 : 	   TODO: GDI+ offers higher quality -- InterpolationModeHighQualityBicubic) */
; 1742 : 	SetStretchBltMode (hdcRescaled, HALFTONE);

  00110	6a 04		 push	 4
  00112	ff 75 e8	 push	 DWORD PTR _hdcRescaled$1$[ebp]
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetStretchBltMode@8

; 1743 : 
; 1744 : 	StretchBlt (hdcRescaled,

  0011b	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00120	ff 75 cc	 push	 DWORD PTR _bitmap$[ebp+8]
  00123	ff 75 c8	 push	 DWORD PTR _bitmap$[ebp+4]
  00126	6a 00		 push	 0
  00128	6a 00		 push	 0
  0012a	ff 75 e4	 push	 DWORD PTR _dcMem$1$[ebp]
  0012d	57		 push	 edi
  0012e	53		 push	 ebx
  0012f	6a 00		 push	 0
  00131	6a 00		 push	 0
  00133	ff 75 e8	 push	 DWORD PTR _hdcRescaled$1$[ebp]
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StretchBlt@44

; 1745 : 		0,
; 1746 : 		0,
; 1747 : 		nWidth,
; 1748 : 		nHeight,
; 1749 : 		hdcSrc,
; 1750 : 		0,
; 1751 : 		0,
; 1752 : 		bitmap.bmWidth, 
; 1753 : 		bitmap.bmHeight,
; 1754 : 		SRCCOPY);
; 1755 : 
; 1756 : 	DeleteDC (hdcSrc);

  0013c	ff 75 e4	 push	 DWORD PTR _dcMem$1$[ebp]
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4

; 1757 : 
; 1758 : 	if (bDirectRender)

  00145	83 7d 20 00	 cmp	 DWORD PTR _bDirectRender$[ebp], 0
  00149	74 34		 je	 SHORT $LN7@RenderBitm

; 1759 : 	{
; 1760 : 		HDC hdcDest = GetDC (hwndDest);

  0014b	ff 75 e0	 push	 DWORD PTR _hwndDest$GSCopy$1$[ebp]
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 1761 : 
; 1762 : 		BitBlt (hdcDest, x, y, nWidth, nHeight, hdcRescaled, 0, 0, SRCCOPY);

  00154	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00159	6a 00		 push	 0
  0015b	6a 00		 push	 0
  0015d	ff 75 e8	 push	 DWORD PTR _hdcRescaled$1$[ebp]
  00160	8b f0		 mov	 esi, eax
  00162	57		 push	 edi
  00163	53		 push	 ebx
  00164	ff 75 14	 push	 DWORD PTR _y$[ebp]
  00167	ff 75 10	 push	 DWORD PTR _x$[ebp]
  0016a	56		 push	 esi
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 1763 : 		DeleteDC (hdcDest);

  00171	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteDC@4
  00177	56		 push	 esi
  00178	ff d7		 call	 edi

; 1764 : 	}
; 1765 : 	else

  0017a	8b 75 dc	 mov	 esi, DWORD PTR _hbmpRescaled$1$[ebp]
  0017d	eb 26		 jmp	 SHORT $LN9@RenderBitm
$LN7@RenderBitm:

; 1766 : 	{
; 1767 : 		lResult = SendMessage (hwndDest, (UINT) STM_SETIMAGE, (WPARAM) IMAGE_BITMAP, (LPARAM) (HANDLE) hbmpRescaled);

  0017f	56		 push	 esi
  00180	6a 00		 push	 0
  00182	68 72 01 00 00	 push	 370			; 00000172H
  00187	ff 75 e0	 push	 DWORD PTR _hwndDest$GSCopy$1$[ebp]
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1768 : 	}
; 1769 : 
; 1770 : 	if ((HGDIOBJ) lResult != NULL && (HGDIOBJ) lResult != (HGDIOBJ) hbmpRescaled)

  00190	85 c0		 test	 eax, eax
  00192	74 0b		 je	 SHORT $LN16@RenderBitm
  00194	3b c6		 cmp	 eax, esi
  00196	74 07		 je	 SHORT $LN16@RenderBitm

; 1771 : 		DeleteObject ((HGDIOBJ) lResult);

  00198	50		 push	 eax
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$LN16@RenderBitm:
  0019f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteDC@4
$LN9@RenderBitm:

; 1772 : 
; 1773 : 	DeleteDC (hdcRescaled);

  001a5	ff 75 e8	 push	 DWORD PTR _hdcRescaled$1$[ebp]
  001a8	ff d7		 call	 edi

; 1774 : 
; 1775 : 	return hbmpRescaled;
; 1776 : }

  001aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ad	8b c6		 mov	 eax, esi
  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	33 cd		 xor	 ecx, ebp
  001b3	5b		 pop	 ebx
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c3		 ret	 0
_RenderBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CreateMemBitmap
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_resource$ = 16						; size = 4
_CreateMemBitmap PROC					; COMDAT

; 1645 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1646 : 	HBITMAP picture = LoadBitmap (hInstance, resource);

  00006	ff 75 10	 push	 DWORD PTR _resource$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8

; 1647 : 	HDC viewDC = GetDC (hwnd), dcMem;

  00012	ff 75 0c	 push	 DWORD PTR _hwnd$[ebp]
  00015	8b d8		 mov	 ebx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0001d	8b f0		 mov	 esi, eax

; 1648 : 
; 1649 : 	dcMem = CreateCompatibleDC (viewDC);

  0001f	56		 push	 esi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00026	8b f8		 mov	 edi, eax

; 1650 : 
; 1651 : 	SetMapMode (dcMem, MM_TEXT);

  00028	6a 01		 push	 1
  0002a	57		 push	 edi
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMapMode@8

; 1652 : 
; 1653 : 	SelectObject (dcMem, picture);

  00031	53		 push	 ebx
  00032	57		 push	 edi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 1654 : 
; 1655 : 	DeleteObject (picture);

  00039	53		 push	 ebx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 1656 : 
; 1657 : 	ReleaseDC (hwnd, viewDC);

  00040	56		 push	 esi
  00041	ff 75 0c	 push	 DWORD PTR _hwnd$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 1658 : 
; 1659 : 	return dcMem;

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx

; 1660 : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_CreateMemBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ProcessPaintMessages
_TEXT	SEGMENT
_paintMsg$ = -28					; size = 28
_hwnd$ = 8						; size = 4
_maxMessagesToProcess$ = 12				; size = 4
_ProcessPaintMessages PROC				; COMDAT

; 1623 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1624 : 	MSG paintMsg;
; 1625 : 	int msgCounter = maxMessagesToProcess;	
; 1626 : 
; 1627 : 	while (PeekMessage (&paintMsg, hwnd, 0, 0, PM_REMOVE | PM_QS_PAINT) != 0 && msgCounter-- > 0)

  00006	8d 45 e4	 lea	 eax, DWORD PTR _paintMsg$[ebp]
  00009	53		 push	 ebx
  0000a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__PeekMessageA@20
  00010	56		 push	 esi
  00011	8b 75 0c	 mov	 esi, DWORD PTR _maxMessagesToProcess$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _hwnd$[ebp]
  00018	68 01 00 20 00	 push	 2097153			; 00200001H
  0001d	6a 00		 push	 0
  0001f	6a 00		 push	 0
  00021	57		 push	 edi
  00022	50		 push	 eax
  00023	ff d3		 call	 ebx
  00025	85 c0		 test	 eax, eax
  00027	74 2c		 je	 SHORT $LN9@ProcessPai
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ProcessPai:
  00030	8b c6		 mov	 eax, esi
  00032	4e		 dec	 esi
  00033	85 c0		 test	 eax, eax
  00035	7e 1e		 jle	 SHORT $LN9@ProcessPai

; 1628 : 	{
; 1629 : 		DispatchMessage (&paintMsg);

  00037	8d 45 e4	 lea	 eax, DWORD PTR _paintMsg$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4
  00041	68 01 00 20 00	 push	 2097153			; 00200001H
  00046	6a 00		 push	 0
  00048	6a 00		 push	 0
  0004a	57		 push	 edi
  0004b	8d 45 e4	 lea	 eax, DWORD PTR _paintMsg$[ebp]
  0004e	50		 push	 eax
  0004f	ff d3		 call	 ebx
  00051	85 c0		 test	 eax, eax
  00053	75 db		 jne	 SHORT $LL2@ProcessPai
$LN9@ProcessPai:
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 1630 : 	}
; 1631 : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_ProcessPaintMessages ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _InitDialog
_TEXT	SEGMENT
tv394 = -604						; size = 8
tv388 = -604						; size = 8
_tmpVal$1 = -604					; size = 8
_metric$ = -596						; size = 500
_lf$ = -96						; size = 92
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_InitDialog PROC					; COMDAT

; 1477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _hwndDlg$[ebp]

; 1478 : 	NONCLIENTMETRICSW metric;
; 1479 : 	static BOOL aboutMenuAppended = FALSE;
; 1480 : 
; 1481 : 	int nHeight;
; 1482 : 	LOGFONTW lf;
; 1483 : 	HMENU hMenu;
; 1484 : 	Font *font;
; 1485 : 
; 1486 : 	/* Fonts */
; 1487 : 
; 1488 : 	memset (&lf, 0, sizeof(lf));

  00019	8d 45 a0	 lea	 eax, DWORD PTR _lf$[ebp]
  0001c	6a 5c		 push	 92			; 0000005cH
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset

; 1489 : 
; 1490 : 	// Normal
; 1491 : 	font = GetFont ("font_normal");

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IGCGEGAM@font_normal?$AA@
  0002b	e8 00 00 00 00	 call	 _GetFont
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 1492 : 
; 1493 : 	metric.cbSize = sizeof (metric);

  00033	c7 85 ac fd ff
	ff f4 01 00 00	 mov	 DWORD PTR _metric$[ebp], 500 ; 000001f4H
  0003d	8b f0		 mov	 esi, eax

; 1494 : 	SystemParametersInfoW (SPI_GETNONCLIENTMETRICS, sizeof(metric), &metric, 0);

  0003f	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp]
  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	68 f4 01 00 00	 push	 500			; 000001f4H
  0004d	6a 29		 push	 41			; 00000029H
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemParametersInfoW@16

; 1495 : 
; 1496 : 	WindowTitleBarFont = CreateFontIndirectW (&metric.lfCaptionFont);

  00055	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__CreateFontIndirectW@4
  0005b	8d 85 c4 fd ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp+24]
  00061	50		 push	 eax
  00062	ff d3		 call	 ebx
  00064	a3 00 00 00 00	 mov	 DWORD PTR _WindowTitleBarFont, eax

; 1497 : 
; 1498 : 	metric.lfMessageFont.lfHeight = CompensateDPIFont (!font ? -11 : -font->Size);

  00069	85 f6		 test	 esi, esi
  0006b	75 05		 jne	 SHORT $LN11@InitDialog
  0006d	8d 46 f5	 lea	 eax, DWORD PTR [esi-11]
  00070	eb 05		 jmp	 SHORT $LN12@InitDialog
$LN11@InitDialog:
  00072	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00075	f7 d8		 neg	 eax
$LN12@InitDialog:
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _CompensateDPIFont
  0007d	83 c4 04	 add	 esp, 4
  00080	89 85 44 ff ff
	ff		 mov	 DWORD PTR _metric$[ebp+408], eax

; 1499 : 	metric.lfMessageFont.lfWidth = 0;

  00086	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _metric$[ebp+412], 0

; 1500 : 
; 1501 : 	if (font && wcscmp (font->FaceName, L"default") != 0)

  00090	85 f6		 test	 esi, esi
  00092	74 40		 je	 SHORT $LN2@InitDialog
  00094	8b 36		 mov	 esi, DWORD PTR [esi]
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_1BA@HANLFFFG@?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
  0009b	8b c6		 mov	 eax, esi
  0009d	0f 1f 00	 npad	 3
$LL44@InitDialog:
  000a0	66 8b 10	 mov	 dx, WORD PTR [eax]
  000a3	66 3b 11	 cmp	 dx, WORD PTR [ecx]
  000a6	75 1e		 jne	 SHORT $LN45@InitDialog
  000a8	66 85 d2	 test	 dx, dx
  000ab	74 15		 je	 SHORT $LN46@InitDialog
  000ad	66 8b 50 02	 mov	 dx, WORD PTR [eax+2]
  000b1	66 3b 51 02	 cmp	 dx, WORD PTR [ecx+2]
  000b5	75 0f		 jne	 SHORT $LN45@InitDialog
  000b7	83 c0 04	 add	 eax, 4
  000ba	83 c1 04	 add	 ecx, 4
  000bd	66 85 d2	 test	 dx, dx
  000c0	75 de		 jne	 SHORT $LL44@InitDialog
$LN46@InitDialog:
  000c2	33 c0		 xor	 eax, eax
  000c4	eb 05		 jmp	 SHORT $LN47@InitDialog
$LN45@InitDialog:
  000c6	1b c0		 sbb	 eax, eax
  000c8	83 c8 01	 or	 eax, 1
$LN47@InitDialog:
  000cb	85 c0		 test	 eax, eax
  000cd	74 05		 je	 SHORT $LN2@InitDialog

; 1502 : 	{
; 1503 : 		wcsncpy ((WCHAR *)metric.lfMessageFont.lfFaceName, font->FaceName, sizeof (metric.lfMessageFont.lfFaceName)/2);

  000cf	6a 20		 push	 32			; 00000020H
  000d1	56		 push	 esi
  000d2	eb 35		 jmp	 SHORT $LN49@InitDialog
$LN2@InitDialog:

; 1504 : 	}
; 1505 : 	else if (IsOSAtLeast (WIN_VISTA))

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
  000d9	85 c0		 test	 eax, eax
  000db	7f 0c		 jg	 SHORT $LN30@InitDialog
  000dd	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR _CurrentOSMajor
$LN30@InitDialog:
  000e9	c1 e0 08	 shl	 eax, 8
  000ec	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSMinor
  000f2	c1 e0 08	 shl	 eax, 8
  000f5	0b 05 00 00 00
	00		 or	 eax, DWORD PTR _CurrentOSServicePack
  000fb	3d 00 00 06 00	 cmp	 eax, 393216		; 00060000H
  00100	7c 16		 jl	 SHORT $LN4@InitDialog

; 1506 : 	{
; 1507 : 		// Vista's new default font (size and spacing) breaks compatibility with Windows 2k/XP applications.
; 1508 : 		// Force use of Tahoma (as Microsoft does in many dialogs) until a native Vista look is implemented.
; 1509 : 		wcsncpy ((WCHAR *)metric.lfMessageFont.lfFaceName, L"Tahoma", sizeof (metric.lfMessageFont.lfFaceName)/2);

  00102	6a 20		 push	 32			; 00000020H
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_1O@FPBPJIKI@?$AAT?$AAa?$AAh?$AAo?$AAm?$AAa?$AA?$AA@
$LN49@InitDialog:
  00109	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp+436]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _wcsncpy
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@InitDialog:

; 1510 : 	}
; 1511 : 
; 1512 : 	hUserFont = CreateFontIndirectW (&metric.lfMessageFont);

  00118	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp+408]
  0011e	50		 push	 eax
  0011f	ff d3		 call	 ebx
  00121	a3 00 00 00 00	 mov	 DWORD PTR _hUserFont, eax

; 1513 : 
; 1514 : 	metric.lfMessageFont.lfUnderline = TRUE;
; 1515 : 	hUserUnderlineFont = CreateFontIndirectW (&metric.lfMessageFont);

  00126	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp+408]
  0012c	50		 push	 eax
  0012d	c6 85 59 ff ff
	ff 01		 mov	 BYTE PTR _metric$[ebp+429], 1
  00134	ff d3		 call	 ebx
  00136	a3 00 00 00 00	 mov	 DWORD PTR _hUserUnderlineFont, eax

; 1516 : 
; 1517 : 	metric.lfMessageFont.lfUnderline = FALSE;
; 1518 : 	metric.lfMessageFont.lfWeight = FW_BOLD;
; 1519 : 	hUserBoldFont = CreateFontIndirectW (&metric.lfMessageFont);

  0013b	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp+408]
  00141	50		 push	 eax
  00142	c6 85 59 ff ff
	ff 00		 mov	 BYTE PTR _metric$[ebp+429], 0
  00149	c7 85 54 ff ff
	ff bc 02 00 00	 mov	 DWORD PTR _metric$[ebp+424], 700 ; 000002bcH
  00153	ff d3		 call	 ebx
  00155	a3 00 00 00 00	 mov	 DWORD PTR _hUserBoldFont, eax

; 1520 : 
; 1521 : 	metric.lfMessageFont.lfUnderline = TRUE;
; 1522 : 	metric.lfMessageFont.lfWeight = FW_BOLD;
; 1523 : 	hUserUnderlineBoldFont = CreateFontIndirectW (&metric.lfMessageFont);

  0015a	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _metric$[ebp+408]
  00160	50		 push	 eax
  00161	c6 85 59 ff ff
	ff 01		 mov	 BYTE PTR _metric$[ebp+429], 1
  00168	c7 85 54 ff ff
	ff bc 02 00 00	 mov	 DWORD PTR _metric$[ebp+424], 700 ; 000002bcH
  00172	ff d3		 call	 ebx

; 1524 : 
; 1525 : 	// Fixed-size (hexadecimal digits)
; 1526 : 	nHeight = CompensateDPIFont (-12);

  00174	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  0017b	a3 00 00 00 00	 mov	 DWORD PTR ?hUserUnderlineBoldFont@@3PAUHFONT__@@A, eax ; hUserUnderlineBoldFont
  00180	75 07		 jne	 SHORT $LN39@InitDialog
  00182	b8 f4 ff ff ff	 mov	 eax, -12		; fffffff4H
  00187	eb 69		 jmp	 SHORT $LN42@InitDialog
$LN39@InitDialog:
  00189	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?DPIScaleFactorY@@3NA
  00191	83 ec 08	 sub	 esp, 8
  00194	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c028000000000000
  0019c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR _DlgAspectRatio
  001a4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001ac	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  001b4	f2 0f 11 85 a4
	fd ff ff	 movsd	 QWORD PTR _tmpVal$1[ebp], xmm0
  001bc	dd 85 a4 fd ff
	ff		 fld	 QWORD PTR _tmpVal$1[ebp]
  001c2	dd 1c 24	 fstp	 QWORD PTR [esp]
  001c5	76 15		 jbe	 SHORT $LN41@InitDialog
  001c7	e8 00 00 00 00	 call	 _floor
  001cc	dd 9d a4 fd ff
	ff		 fstp	 QWORD PTR tv394[ebp]
  001d2	f2 0f 2c 85 a4
	fd ff ff	 cvttsd2si eax, QWORD PTR tv394[ebp]
  001da	eb 13		 jmp	 SHORT $LN50@InitDialog
$LN41@InitDialog:
  001dc	e8 00 00 00 00	 call	 _ceil
  001e1	dd 9d a4 fd ff
	ff		 fstp	 QWORD PTR tv388[ebp]
  001e7	f2 0f 2c 85 a4
	fd ff ff	 cvttsd2si eax, QWORD PTR tv388[ebp]
$LN50@InitDialog:
  001ef	83 c4 08	 add	 esp, 8
$LN42@InitDialog:

; 1527 : 	lf.lfHeight = nHeight;

  001f2	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000190000000000000000000000000
  001f9	0f 11 45 a4	 movups	 XMMWORD PTR _lf$[ebp+4], xmm0
  001fd	89 45 a0	 mov	 DWORD PTR _lf$[ebp], eax

; 1528 : 	lf.lfWidth = 0;
; 1529 : 	lf.lfEscapement = 0;
; 1530 : 	lf.lfOrientation = 0;
; 1531 : 	lf.lfWeight = FW_NORMAL;
; 1532 : 	lf.lfItalic = FALSE;
; 1533 : 	lf.lfUnderline = FALSE;
; 1534 : 	lf.lfStrikeOut = FALSE;
; 1535 : 	lf.lfCharSet = DEFAULT_CHARSET;
; 1536 : 	lf.lfOutPrecision = OUT_DEFAULT_PRECIS;
; 1537 : 	lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;
; 1538 : 	lf.lfQuality = PROOF_QUALITY;
; 1539 : 	lf.lfPitchAndFamily = FF_DONTCARE;
; 1540 : 	wcscpy (lf.lfFaceName, L"Courier New");
; 1541 : 	hFixedDigitFont = CreateFontIndirectW (&lf);

  00200	8d 45 a0	 lea	 eax, DWORD PTR _lf$[ebp]
  00203	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@
  0020a	50		 push	 eax
  0020b	c7 45 b4 00 00
	00 01		 mov	 DWORD PTR _lf$[ebp+20], 16777216 ; 01000000H
  00212	0f 11 45 bc	 movups	 XMMWORD PTR _lf$[ebp+28], xmm0
  00216	c7 45 b8 00 00
	02 00		 mov	 DWORD PTR _lf$[ebp+24], 131072 ; 00020000H
  0021d	f3 0f 7e 05 10
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw?$AA?$AA@+16
  00225	66 0f d6 45 cc	 movq	 QWORD PTR _lf$[ebp+44], xmm0
  0022a	ff d3		 call	 ebx
  0022c	a3 00 00 00 00	 mov	 DWORD PTR _hFixedDigitFont, eax

; 1542 : 	if (hFixedDigitFont == NULL)

  00231	85 c0		 test	 eax, eax
  00233	0f 84 84 01 00
	00		 je	 $LN51@InitDialog

; 1546 : 	}
; 1547 : 
; 1548 : 	// Bold
; 1549 : 	font = GetFont ("font_bold");

  00239	68 00 00 00 00	 push	 OFFSET ??_C@_09KDCDAOMH@font_bold?$AA@
  0023e	e8 00 00 00 00	 call	 _GetFont
  00243	8b f0		 mov	 esi, eax
  00245	83 c4 04	 add	 esp, 4

; 1550 : 
; 1551 : 	nHeight = CompensateDPIFont (!font ? -13 : -font->Size);

  00248	85 f6		 test	 esi, esi
  0024a	75 05		 jne	 SHORT $LN13@InitDialog
  0024c	8d 46 f3	 lea	 eax, DWORD PTR [esi-13]
  0024f	eb 05		 jmp	 SHORT $LN14@InitDialog
$LN13@InitDialog:
  00251	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00254	f7 d8		 neg	 eax
$LN14@InitDialog:
  00256	50		 push	 eax
  00257	e8 00 00 00 00	 call	 _CompensateDPIFont
  0025c	83 c4 04	 add	 esp, 4

; 1552 : 	lf.lfHeight = nHeight;

  0025f	89 45 a0	 mov	 DWORD PTR _lf$[ebp], eax

; 1553 : 	lf.lfWeight = FW_BLACK;

  00262	c7 45 b0 84 03
	00 00		 mov	 DWORD PTR _lf$[ebp+16], 900 ; 00000384H

; 1554 : 	wcsncpy (lf.lfFaceName, !font ? L"Arial" : font->FaceName, sizeof (lf.lfFaceName)/2);

  00269	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
  0026e	85 f6		 test	 esi, esi
  00270	74 02		 je	 SHORT $LN16@InitDialog
  00272	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@InitDialog:
  00274	6a 20		 push	 32			; 00000020H
  00276	50		 push	 eax
  00277	8d 45 bc	 lea	 eax, DWORD PTR _lf$[ebp+28]
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 _wcsncpy
  00280	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1555 : 	hBoldFont = CreateFontIndirectW (&lf);

  00283	8d 45 a0	 lea	 eax, DWORD PTR _lf$[ebp]
  00286	50		 push	 eax
  00287	ff d3		 call	 ebx
  00289	a3 00 00 00 00	 mov	 DWORD PTR _hBoldFont, eax

; 1556 : 	if (hBoldFont == NULL)

  0028e	85 c0		 test	 eax, eax
  00290	0f 84 3a 01 00
	00		 je	 $LN53@InitDialog

; 1560 : 	}
; 1561 : 
; 1562 : 	// Title
; 1563 : 	font = GetFont ("font_title");

  00296	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NMFINBBB@font_title?$AA@
  0029b	e8 00 00 00 00	 call	 _GetFont
  002a0	8b f0		 mov	 esi, eax
  002a2	83 c4 04	 add	 esp, 4

; 1564 : 
; 1565 : 	nHeight = CompensateDPIFont (!font ? -21 : -font->Size);

  002a5	85 f6		 test	 esi, esi
  002a7	75 05		 jne	 SHORT $LN17@InitDialog
  002a9	8d 46 eb	 lea	 eax, DWORD PTR [esi-21]
  002ac	eb 05		 jmp	 SHORT $LN18@InitDialog
$LN17@InitDialog:
  002ae	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  002b1	f7 d8		 neg	 eax
$LN18@InitDialog:
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 _CompensateDPIFont
  002b9	83 c4 04	 add	 esp, 4

; 1566 : 	lf.lfHeight = nHeight;

  002bc	89 45 a0	 mov	 DWORD PTR _lf$[ebp], eax

; 1567 : 	lf.lfWeight = FW_REGULAR;

  002bf	c7 45 b0 90 01
	00 00		 mov	 DWORD PTR _lf$[ebp+16], 400 ; 00000190H

; 1568 : 	wcsncpy (lf.lfFaceName, !font ? L"Times New Roman" : font->FaceName, sizeof (lf.lfFaceName)/2);

  002c6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1CA@MBPOLHGL@?$AAT?$AAi?$AAm?$AAe?$AAs?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAR?$AAo?$AAm?$AAa?$AAn?$AA?$AA@
  002cb	85 f6		 test	 esi, esi
  002cd	74 02		 je	 SHORT $LN20@InitDialog
  002cf	8b 06		 mov	 eax, DWORD PTR [esi]
$LN20@InitDialog:
  002d1	6a 20		 push	 32			; 00000020H
  002d3	50		 push	 eax
  002d4	8d 45 bc	 lea	 eax, DWORD PTR _lf$[ebp+28]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 _wcsncpy
  002dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 : 	hTitleFont = CreateFontIndirectW (&lf);

  002e0	8d 45 a0	 lea	 eax, DWORD PTR _lf$[ebp]
  002e3	50		 push	 eax
  002e4	ff d3		 call	 ebx
  002e6	a3 00 00 00 00	 mov	 DWORD PTR _hTitleFont, eax

; 1570 : 	if (hTitleFont == NULL)

  002eb	85 c0		 test	 eax, eax
  002ed	0f 84 f0 00 00
	00		 je	 $LN54@InitDialog

; 1574 : 	}
; 1575 : 
; 1576 : 	// Fixed-size
; 1577 : 	font = GetFont ("font_fixed");

  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MOFKMHPH@font_fixed?$AA@
  002f8	e8 00 00 00 00	 call	 _GetFont
  002fd	8b f0		 mov	 esi, eax
  002ff	83 c4 04	 add	 esp, 4

; 1578 : 
; 1579 : 	nHeight = CompensateDPIFont (!font ? -12 : -font->Size);

  00302	85 f6		 test	 esi, esi
  00304	75 05		 jne	 SHORT $LN21@InitDialog
  00306	8d 46 f4	 lea	 eax, DWORD PTR [esi-12]
  00309	eb 05		 jmp	 SHORT $LN22@InitDialog
$LN21@InitDialog:
  0030b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0030e	f7 d8		 neg	 eax
$LN22@InitDialog:
  00310	50		 push	 eax
  00311	e8 00 00 00 00	 call	 _CompensateDPIFont
  00316	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000190000000000000000000000000
  0031d	83 c4 04	 add	 esp, 4

; 1580 : 	lf.lfHeight = nHeight;

  00320	89 45 a0	 mov	 DWORD PTR _lf$[ebp], eax

; 1581 : 	lf.lfWidth = 0;
; 1582 : 	lf.lfEscapement = 0;
; 1583 : 	lf.lfOrientation = 0;
; 1584 : 	lf.lfWeight = FW_NORMAL;
; 1585 : 	lf.lfItalic = FALSE;
; 1586 : 	lf.lfUnderline = FALSE;
; 1587 : 	lf.lfStrikeOut = FALSE;
; 1588 : 	lf.lfCharSet = DEFAULT_CHARSET;
; 1589 : 	lf.lfOutPrecision = OUT_DEFAULT_PRECIS;
; 1590 : 	lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;
; 1591 : 	lf.lfQuality = PROOF_QUALITY;
; 1592 : 	lf.lfPitchAndFamily = FF_DONTCARE;
; 1593 : 	wcsncpy (lf.lfFaceName, !font ? L"Lucida Console" : font->FaceName, sizeof (lf.lfFaceName)/2);

  00323	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1BO@CJPKCNHF@?$AAL?$AAu?$AAc?$AAi?$AAd?$AAa?$AA?5?$AAC?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AA?$AA@
  00328	c7 45 b4 00 00
	00 01		 mov	 DWORD PTR _lf$[ebp+20], 16777216 ; 01000000H
  0032f	c7 45 b8 00 00
	02 00		 mov	 DWORD PTR _lf$[ebp+24], 131072 ; 00020000H
  00336	0f 11 45 a4	 movups	 XMMWORD PTR _lf$[ebp+4], xmm0
  0033a	85 f6		 test	 esi, esi
  0033c	74 02		 je	 SHORT $LN24@InitDialog
  0033e	8b 06		 mov	 eax, DWORD PTR [esi]
$LN24@InitDialog:
  00340	6a 20		 push	 32			; 00000020H
  00342	50		 push	 eax
  00343	8d 45 bc	 lea	 eax, DWORD PTR _lf$[ebp+28]
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 _wcsncpy
  0034c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1594 : 	hFixedFont = CreateFontIndirectW (&lf);

  0034f	8d 45 a0	 lea	 eax, DWORD PTR _lf$[ebp]
  00352	50		 push	 eax
  00353	ff d3		 call	 ebx
  00355	a3 00 00 00 00	 mov	 DWORD PTR _hFixedFont, eax

; 1595 : 	if (hFixedFont == NULL)

  0035a	85 c0		 test	 eax, eax
  0035c	0f 84 94 00 00
	00		 je	 $LN55@InitDialog

; 1599 : 	}
; 1600 : 
; 1601 : 	if (!aboutMenuAppended)

  00362	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?aboutMenuAppended@?1??InitDialog@@9@4HA, 0
  00369	75 41		 jne	 SHORT $LN9@InitDialog

; 1602 : 	{
; 1603 : 		hMenu = GetSystemMenu (hwndDlg, FALSE);

  0036b	6a 00		 push	 0
  0036d	57		 push	 edi
  0036e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMenu@8

; 1604 : 		AppendMenu (hMenu, MF_SEPARATOR, 0, NULL);

  00374	6a 00		 push	 0
  00376	6a 00		 push	 0
  00378	8b f0		 mov	 esi, eax
  0037a	68 00 08 00 00	 push	 2048			; 00000800H
  0037f	56		 push	 esi
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16

; 1605 : 		AppendMenuW (hMenu, MF_ENABLED | MF_STRING, IDC_ABOUT, GetString ("ABOUTBOX"));

  00386	68 00 00 00 00	 push	 OFFSET ??_C@_08KAINEBEN@ABOUTBOX?$AA@
  0038b	e8 00 00 00 00	 call	 _GetString
  00390	83 c4 04	 add	 esp, 4
  00393	50		 push	 eax
  00394	68 ff 7f 00 00	 push	 32767			; 00007fffH
  00399	6a 00		 push	 0
  0039b	56		 push	 esi
  0039c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuW@16

; 1606 : 
; 1607 : 		aboutMenuAppended = TRUE;

  003a2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?aboutMenuAppended@?1??InitDialog@@9@4HA, 1
$LN9@InitDialog:

; 1608 : 	}
; 1609 : }

  003ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003af	5f		 pop	 edi
  003b0	5e		 pop	 esi
  003b1	33 cd		 xor	 ecx, ebp
  003b3	5b		 pop	 ebx
  003b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b9	8b e5		 mov	 esp, ebp
  003bb	5d		 pop	 ebp
  003bc	c3		 ret	 0
$LN51@InitDialog:

; 1543 : 	{
; 1544 : 		handleWin32Error (hwndDlg);

  003bd	57		 push	 edi
  003be	e8 00 00 00 00	 call	 _handleWin32Error
  003c3	83 c4 04	 add	 esp, 4

; 1545 : 		AbortProcess ("NOFONT");

  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  003cb	e8 00 00 00 00	 call	 _AbortProcess
$LN56@InitDialog:
$LN53@InitDialog:

; 1557 : 	{
; 1558 : 		handleWin32Error (hwndDlg);

  003d0	57		 push	 edi
  003d1	e8 00 00 00 00	 call	 _handleWin32Error
  003d6	83 c4 04	 add	 esp, 4

; 1559 : 		AbortProcess ("NOFONT");

  003d9	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  003de	e8 00 00 00 00	 call	 _AbortProcess
$LN57@InitDialog:
$LN54@InitDialog:

; 1571 : 	{
; 1572 : 		handleWin32Error (hwndDlg);

  003e3	57		 push	 edi
  003e4	e8 00 00 00 00	 call	 _handleWin32Error
  003e9	83 c4 04	 add	 esp, 4

; 1573 : 		AbortProcess ("NOFONT");

  003ec	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  003f1	e8 00 00 00 00	 call	 _AbortProcess
$LN58@InitDialog:
$LN55@InitDialog:

; 1596 : 	{
; 1597 : 		handleWin32Error (hwndDlg);

  003f6	57		 push	 edi
  003f7	e8 00 00 00 00	 call	 _handleWin32Error
  003fc	83 c4 04	 add	 esp, 4

; 1598 : 		AbortProcess ("NOFONT");

  003ff	68 00 00 00 00	 push	 OFFSET ??_C@_06DILOELAE@NOFONT?$AA@
  00404	e8 00 00 00 00	 call	 _AbortProcess
$LN59@InitDialog:
$LN48@InitDialog:
  00409	cc		 int	 3
_InitDialog ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ToUNICODE
_TEXT	SEGMENT
_lpszText$ = 8						; size = 4
_ToUNICODE PROC						; COMDAT

; 1447 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1448 : 	int j = strlen (lpszText);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpszText$[ebp]
  00008	8b f7		 mov	 esi, edi
  0000a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000d	0f 1f 00	 npad	 3
$LL15@ToUNICODE:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL15@ToUNICODE
  00017	2b f1		 sub	 esi, ecx

; 1449 : 	if (j == 0)

  00019	75 09		 jne	 SHORT $LN2@ToUNICODE

; 1450 : 	{
; 1451 : 		wcscpy ((LPWSTR) lpszText, (LPWSTR) WIDE (""));

  0001b	33 c0		 xor	 eax, eax
  0001d	66 89 07	 mov	 WORD PTR [edi], ax
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 1463 : 	}
; 1464 : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN2@ToUNICODE:

; 1452 : 		return;
; 1453 : 	}
; 1454 : 	else
; 1455 : 	{
; 1456 : 		LPWSTR lpszNewText = (LPWSTR) err_malloc ((j + 1) * 2);

  00024	8d 04 75 02 00
	00 00		 lea	 eax, DWORD PTR [esi*2+2]
  0002b	53		 push	 ebx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _malloc
  00032	8b d8		 mov	 ebx, eax
  00034	83 c4 04	 add	 esp, 4
  00037	85 db		 test	 ebx, ebx
  00039	74 4b		 je	 SHORT $LN17@ToUNICODE

; 1457 : 		j = MultiByteToWideChar (CP_ACP, 0L, lpszText, -1, lpszNewText, j + 1);

  0003b	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0003e	51		 push	 ecx
  0003f	53		 push	 ebx
  00040	6a ff		 push	 -1
  00042	57		 push	 edi
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24

; 1458 : 		if (j > 0)

  0004d	85 c0		 test	 eax, eax
  0004f	7e 22		 jle	 SHORT $LN4@ToUNICODE

; 1459 : 			wcscpy ((LPWSTR) lpszText, lpszNewText);

  00051	8b cb		 mov	 ecx, ebx
  00053	2b fb		 sub	 edi, ebx
$LL7@ToUNICODE:
  00055	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00058	8d 49 02	 lea	 ecx, DWORD PTR [ecx+2]
  0005b	66 89 44 0f fe	 mov	 WORD PTR [edi+ecx-2], ax
  00060	66 85 c0	 test	 ax, ax
  00063	75 f0		 jne	 SHORT $LL7@ToUNICODE

; 1462 : 		free (lpszNewText);

  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 _free
  0006b	83 c4 04	 add	 esp, 4
  0006e	5b		 pop	 ebx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi

; 1463 : 	}
; 1464 : }

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN4@ToUNICODE:

; 1460 : 		else
; 1461 : 			wcscpy ((LPWSTR) lpszText, (LPWSTR) WIDE (""));

  00073	33 c0		 xor	 eax, eax

; 1462 : 		free (lpszNewText);

  00075	53		 push	 ebx
  00076	66 89 07	 mov	 WORD PTR [edi], ax
  00079	e8 00 00 00 00	 call	 _free
  0007e	83 c4 04	 add	 esp, 4
  00081	5b		 pop	 ebx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi

; 1463 : 	}
; 1464 : }

  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN17@ToUNICODE:

; 1452 : 		return;
; 1453 : 	}
; 1454 : 	else
; 1455 : 	{
; 1456 : 		LPWSTR lpszNewText = (LPWSTR) err_malloc ((j + 1) * 2);

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  0008b	e8 00 00 00 00	 call	 _AbortProcess
$LN18@ToUNICODE:
$LN16@ToUNICODE:
  00090	cc		 int	 3
_ToUNICODE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _ToSBCS
_TEXT	SEGMENT
_lpszText$ = 8						; size = 4
_ToSBCS	PROC						; COMDAT

; 1415 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1416 : 	int j = wcslen (lpszText);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpszText$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  0000c	0f 1f 40 00	 npad	 4
$LL15@ToSBCS:
  00010	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00013	83 c1 02	 add	 ecx, 2
  00016	66 85 c0	 test	 ax, ax
  00019	75 f5		 jne	 SHORT $LL15@ToSBCS
  0001b	2b ca		 sub	 ecx, edx
  0001d	d1 f9		 sar	 ecx, 1

; 1417 : 	if (j == 0)

  0001f	75 05		 jne	 SHORT $LN2@ToSBCS

; 1418 : 	{
; 1419 : 		strcpy ((char *) lpszText, "");

  00021	88 06		 mov	 BYTE PTR [esi], al
  00023	5e		 pop	 esi

; 1431 : 	}
; 1432 : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@ToSBCS:
  00026	53		 push	 ebx

; 1420 : 		return;
; 1421 : 	}
; 1422 : 	else
; 1423 : 	{
; 1424 : 		char *lpszNewText = (char *) err_malloc (j + 1);

  00027	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
  0002a	57		 push	 edi
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 _malloc
  00031	8b f8		 mov	 edi, eax
  00033	83 c4 04	 add	 esp, 4
  00036	85 ff		 test	 edi, edi
  00038	74 47		 je	 SHORT $LN17@ToSBCS

; 1425 : 		j = WideCharToMultiByte (CP_ACP, 0L, lpszText, -1, lpszNewText, j + 1, NULL, NULL);

  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	53		 push	 ebx
  0003f	57		 push	 edi
  00040	6a ff		 push	 -1
  00042	56		 push	 esi
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 1426 : 		if (j > 0)

  0004d	85 c0		 test	 eax, eax
  0004f	7e 1f		 jle	 SHORT $LN4@ToSBCS

; 1427 : 			strcpy ((char *) lpszText, lpszNewText);

  00051	8b cf		 mov	 ecx, edi
  00053	2b f7		 sub	 esi, edi
$LL7@ToSBCS:
  00055	8a 01		 mov	 al, BYTE PTR [ecx]
  00057	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0005a	88 44 0e ff	 mov	 BYTE PTR [esi+ecx-1], al
  0005e	84 c0		 test	 al, al
  00060	75 f3		 jne	 SHORT $LL7@ToSBCS

; 1428 : 		else
; 1429 : 			strcpy ((char *) lpszText, "");
; 1430 : 		free (lpszNewText);

  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 _free
  00068	83 c4 04	 add	 esp, 4
  0006b	5f		 pop	 edi
  0006c	5b		 pop	 ebx
  0006d	5e		 pop	 esi

; 1431 : 	}
; 1432 : }

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN4@ToSBCS:

; 1428 : 		else
; 1429 : 			strcpy ((char *) lpszText, "");
; 1430 : 		free (lpszNewText);

  00070	57		 push	 edi
  00071	c6 06 00	 mov	 BYTE PTR [esi], 0
  00074	e8 00 00 00 00	 call	 _free
  00079	83 c4 04	 add	 esp, 4
  0007c	5f		 pop	 edi
  0007d	5b		 pop	 ebx
  0007e	5e		 pop	 esi

; 1431 : 	}
; 1432 : }

  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
$LN17@ToSBCS:

; 1420 : 		return;
; 1421 : 	}
; 1422 : 	else
; 1423 : 	{
; 1424 : 		char *lpszNewText = (char *) err_malloc (j + 1);

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  00086	e8 00 00 00 00	 call	 _AbortProcess
$LN18@ToSBCS:
$LN16@ToSBCS:
  0008b	cc		 int	 3
_ToSBCS	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LeftPadString
_TEXT	SEGMENT
_szTmp$ = 8						; size = 4
_len$ = 12						; size = 4
_targetLen$ = 16					; size = 4
_filler$ = 20						; size = 1
_LeftPadString PROC					; COMDAT

; 1388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1389 : 	int i;
; 1390 : 
; 1391 : 	if (targetLen <= len)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR _targetLen$[ebp]
  0000b	3b fe		 cmp	 edi, esi
  0000d	7e 3b		 jle	 SHORT $LN1@LeftPadStr

; 1392 : 		return;
; 1393 : 
; 1394 : 	for (i = targetLen-1; i >= (targetLen-len); i--)

  0000f	53		 push	 ebx
  00010	8b df		 mov	 ebx, edi
  00012	8d 57 ff	 lea	 edx, DWORD PTR [edi-1]
  00015	2b de		 sub	 ebx, esi
  00017	3b d3		 cmp	 edx, ebx
  00019	7c 18		 jl	 SHORT $LN3@LeftPadStr
  0001b	8b 45 08	 mov	 eax, DWORD PTR _szTmp$[ebp]
  0001e	2b f7		 sub	 esi, edi
  00020	03 c2		 add	 eax, edx
  00022	2b d3		 sub	 edx, ebx
  00024	42		 inc	 edx
$LL4@LeftPadStr:

; 1395 : 		szTmp [i] = szTmp [i-(targetLen-len)];

  00025	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  00028	8d 40 ff	 lea	 eax, DWORD PTR [eax-1]
  0002b	88 48 01	 mov	 BYTE PTR [eax+1], cl
  0002e	83 ea 01	 sub	 edx, 1
  00031	75 f2		 jne	 SHORT $LL4@LeftPadStr
$LN3@LeftPadStr:

; 1396 : 
; 1397 : 	memset (szTmp, filler, targetLen-len);

  00033	0f be 45 14	 movsx	 eax, BYTE PTR _filler$[ebp]
  00037	53		 push	 ebx
  00038	8b 5d 08	 mov	 ebx, DWORD PTR _szTmp$[ebp]
  0003b	50		 push	 eax
  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1398 : 	szTmp [targetLen] = 0;

  00045	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
  00049	5b		 pop	 ebx
$LN1@LeftPadStr:
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 1399 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_LeftPadString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CheckButton
_TEXT	SEGMENT
_hButton$ = 8						; size = 4
_CheckButton PROC					; COMDAT

; 1371 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1372 : 	SendMessage (hButton, BM_SETCHECK, BST_CHECKED, 0);

  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	68 f1 00 00 00	 push	 241			; 000000f1H
  0000c	ff 75 08	 push	 DWORD PTR _hButton$[ebp]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1373 : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_CheckButton ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsButtonChecked
_TEXT	SEGMENT
_hButton$ = 8						; size = 4
_IsButtonChecked PROC					; COMDAT

; 1354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1355 : 	if (SendMessage (hButton, BM_GETCHECK, 0, 0) == BST_CHECKED)

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	68 f0 00 00 00	 push	 240			; 000000f0H
  0000c	ff 75 08	 push	 DWORD PTR _hButton$[ebp]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00015	48		 dec	 eax
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 1356 : 		return TRUE;
; 1357 : 	else
; 1358 : 		return FALSE;
; 1359 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_IsButtonChecked ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CloseStaticModelessWaitDlg
_TEXT	SEGMENT
_CloseStaticModelessWaitDlg PROC			; COMDAT

; 1338 : 	if (StaticModelessWaitDlgHandle == NULL)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?StaticModelessWaitDlgHandle@@3PAUHWND__@@A
  00005	85 c0		 test	 eax, eax
  00007	74 07		 je	 SHORT $LN1@CloseStati

; 1339 : 		return;	// Not shown
; 1340 : 
; 1341 : 	DestroyWindow (StaticModelessWaitDlgHandle);

  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$LN1@CloseStati:

; 1342 : }

  00010	c3		 ret	 0
_CloseStaticModelessWaitDlg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _DisplayStaticModelessWaitDlg
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_DisplayStaticModelessWaitDlg PROC			; COMDAT

; 1316 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1317 : 	if (StaticModelessWaitDlgHandle != NULL)

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?StaticModelessWaitDlgHandle@@3PAUHWND__@@A, 0
  0000a	75 3c		 jne	 SHORT $LN1@DisplaySta

; 1318 : 		return;	// Already shown
; 1319 : 
; 1320 : 	StaticModelessWaitDlgHandle = CreateDialogParamW (hInst, MAKEINTRESOURCEW (IDD_STATIC_MODELESS_WAIT_DLG), parent, (DLGPROC) StaticModelessWaitDlgProc, (LPARAM) 0);

  0000c	6a 00		 push	 0
  0000e	68 00 00 00 00	 push	 OFFSET _StaticModelessWaitDlgProc@16
  00013	ff 75 08	 push	 DWORD PTR _parent$[ebp]
  00016	68 99 13 00 00	 push	 5017			; 00001399H
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDialogParamW@20

; 1321 : 
; 1322 : 	ShowWindow (StaticModelessWaitDlgHandle, SW_SHOWNORMAL);

  00027	6a 01		 push	 1
  00029	50		 push	 eax
  0002a	a3 00 00 00 00	 mov	 DWORD PTR ?StaticModelessWaitDlgHandle@@3PAUHWND__@@A, eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 1323 : 
; 1324 : 	// Allow synchronous use with the GUI being instantly and fully rendered
; 1325 : 	ProcessPaintMessages (StaticModelessWaitDlgHandle, 500);

  00035	68 f4 01 00 00	 push	 500			; 000001f4H
  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?StaticModelessWaitDlgHandle@@3PAUHWND__@@A
  00040	e8 00 00 00 00	 call	 _ProcessPaintMessages
  00045	83 c4 08	 add	 esp, 8
$LN1@DisplaySta:

; 1326 : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_DisplayStaticModelessWaitDlg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _StaticModelessWaitDlgProc@16
_TEXT	SEGMENT
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_StaticModelessWaitDlgProc@16 PROC			; COMDAT

; 1276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1277 : 	WORD lw = LOWORD (wParam);
; 1278 : 
; 1279 : 	switch (msg)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00006	83 e8 10	 sub	 eax, 16			; 00000010H
  00009	74 77		 je	 SHORT $LN8@StaticMode
  0000b	2d 00 01 00 00	 sub	 eax, 256		; 00000100H
  00010	74 1a		 je	 SHORT $LN4@StaticMode
  00012	83 e8 01	 sub	 eax, 1
  00015	75 0f		 jne	 SHORT $LN15@StaticMode

; 1286 : 		}
; 1287 : 
; 1288 : 	case WM_COMMAND:
; 1289 : 
; 1290 : 		if (lw == IDOK || lw == IDCANCEL)

  00017	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  0001a	66 83 f8 01	 cmp	 ax, 1
  0001e	74 77		 je	 SHORT $LN7@StaticMode
  00020	66 83 f8 02	 cmp	 ax, 2
  00024	74 71		 je	 SHORT $LN7@StaticMode
$LN15@StaticMode:

; 1291 : 			return 1;
; 1292 : 
; 1293 : 		return 0;

  00026	33 c0		 xor	 eax, eax

; 1300 : 	}
; 1301 : 
; 1302 : 	return 0;
; 1303 : }

  00028	5d		 pop	 ebp
  00029	c2 10 00	 ret	 16			; 00000010H
$LN4@StaticMode:
  0002c	56		 push	 esi

; 1280 : 	{
; 1281 : 	case WM_INITDIALOG:
; 1282 : 		{
; 1283 : 			LocalizeDialog (hwndDlg, NULL);

  0002d	8b 75 08	 mov	 esi, DWORD PTR _hwndDlg$[ebp]
  00030	68 45 55 52 54	 push	 1414681925		; 54525545H
  00035	6a eb		 push	 -21			; ffffffebH
  00037	56		 push	 esi
  00038	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _LastDialogId, 0
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
  00048	6a 00		 push	 0
  0004a	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  00050	6a 30		 push	 48			; 00000030H
  00052	56		 push	 esi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_09NKHKFHLH@GostCrypt?$AA@
  0005e	56		 push	 esi
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  0006a	85 c0		 test	 eax, eax
  0006c	74 0d		 je	 SHORT $LN13@StaticMode
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ?LocalizeDialogEnum@@YGHPAUHWND__@@J@Z ; LocalizeDialogEnum
  00074	56		 push	 esi
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnumChildWindows@12
$LN13@StaticMode:

; 1284 : 
; 1285 : 			return 0;

  0007b	33 c0		 xor	 eax, eax
  0007d	5e		 pop	 esi

; 1300 : 	}
; 1301 : 
; 1302 : 	return 0;
; 1303 : }

  0007e	5d		 pop	 ebp
  0007f	c2 10 00	 ret	 16			; 00000010H
$LN8@StaticMode:

; 1294 : 
; 1295 : 
; 1296 : 	case WM_CLOSE:
; 1297 : 		StaticModelessWaitDlgHandle = NULL;
; 1298 : 		EndDialog (hwndDlg, 0);

  00082	6a 00		 push	 0
  00084	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?StaticModelessWaitDlgHandle@@3PAUHWND__@@A, 0
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
$LN7@StaticMode:

; 1299 : 		return 1;

  00097	b8 01 00 00 00	 mov	 eax, 1

; 1300 : 	}
; 1301 : 
; 1302 : 	return 0;
; 1303 : }

  0009c	5d		 pop	 ebp
  0009d	c2 10 00	 ret	 16			; 00000010H
_StaticModelessWaitDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AboutDlgProc@16
_TEXT	SEGMENT
_rec$1 = -120						; size = 16
_szTmp$2 = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_hwndDlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_AboutDlgProc@16 PROC					; COMDAT

; 1149 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1150 : 	WORD lw = LOWORD (wParam);
; 1151 : 	static HBITMAP hbmTextualLogoBitmapRescaled = NULL;
; 1152 : 
; 1153 : 	switch (msg)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _hwndDlg$[ebp]
  00017	3d 11 01 00 00	 cmp	 eax, 273		; 00000111H
  0001c	0f 87 d5 01 00
	00		 ja	 $LN15@AboutDlgPr
  00022	0f 84 69 01 00
	00		 je	 $LN7@AboutDlgPr
  00028	83 f8 10	 cmp	 eax, 16			; 00000010H
  0002b	0f 84 38 01 00
	00		 je	 $LN12@AboutDlgPr
  00031	3d 10 01 00 00	 cmp	 eax, 272		; 00000110H
  00036	0f 85 99 01 00
	00		 jne	 $LN11@AboutDlgPr

; 1154 : 	{
; 1155 : 	case WM_INITDIALOG:
; 1156 : 		{
; 1157 : 			char szTmp[100];
; 1158 : 			RECT rec;
; 1159 : 
; 1160 : 			LocalizeDialog (hwndDlg, "IDD_ABOUT_DLG");

  0003c	56		 push	 esi
  0003d	57		 push	 edi
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JLGCPBGA@IDD_ABOUT_DLG?$AA@
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 _LocalizeDialog

; 1161 : 
; 1162 : 			// Hyperlink
; 1163 : 			SetWindowText (GetDlgItem (hwndDlg, IDC_HOMEPAGE), "www.gostcrypt.org");

  00049	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetDlgItem@8
  0004f	83 c4 08	 add	 esp, 8
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CFCNFPNP@www?4gostcrypt?4org?$AA@
  00057	68 ff 01 00 00	 push	 511			; 000001ffH
  0005c	53		 push	 ebx
  0005d	ff d6		 call	 esi
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 1164 : 			ToHyperlink (hwndDlg, IDC_HOMEPAGE);

  00066	68 ff 01 00 00	 push	 511			; 000001ffH
  0006b	53		 push	 ebx
  0006c	e8 00 00 00 00	 call	 _ToHyperlink
  00071	83 c4 08	 add	 esp, 8

; 1165 : 
; 1166 : 			// Logo area background (must not keep aspect ratio; must retain Windows-imposed distortion)
; 1167 : 			GetClientRect (GetDlgItem (hwndDlg, IDC_ABOUT_LOGO_AREA), &rec);

  00074	8d 45 88	 lea	 eax, DWORD PTR _rec$1[ebp]
  00077	50		 push	 eax
  00078	68 ed 13 00 00	 push	 5101			; 000013edH
  0007d	53		 push	 ebx
  0007e	ff d6		 call	 esi
  00080	50		 push	 eax
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 1168 : 			SetWindowPos (GetDlgItem (hwndDlg, IDC_ABOUT_BKG), HWND_TOP, 0, 0, rec.right, rec.bottom, SWP_NOMOVE);

  00087	6a 02		 push	 2
  00089	ff 75 94	 push	 DWORD PTR _rec$1[ebp+12]
  0008c	ff 75 90	 push	 DWORD PTR _rec$1[ebp+8]
  0008f	6a 00		 push	 0
  00091	6a 00		 push	 0
  00093	6a 00		 push	 0
  00095	68 b5 13 00 00	 push	 5045			; 000013b5H
  0009a	53		 push	 ebx
  0009b	ff d6		 call	 esi
  0009d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetWindowPos@28
  000a3	50		 push	 eax
  000a4	ff d7		 call	 edi

; 1169 : 
; 1170 : 			// Resize the logo bitmap if the user has a non-default DPI 
; 1171 : 			if (ScreenDPI != USER_DEFAULT_SCREEN_DPI)

  000a6	83 3d 00 00 00
	00 60		 cmp	 DWORD PTR _ScreenDPI, 96 ; 00000060H
  000ad	74 3e		 je	 SHORT $LN5@AboutDlgPr

; 1172 : 			{
; 1173 : 				// Logo (must recreate and keep the original aspect ratio as Windows distorts it)
; 1174 : 				hbmTextualLogoBitmapRescaled = RenderBitmap (MAKEINTRESOURCE (IDB_TEXTUAL_LOGO_288DPI),

  000af	6a 01		 push	 1
  000b1	6a 00		 push	 0
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	68 eb 13 00 00	 push	 5099			; 000013ebH
  000c0	53		 push	 ebx
  000c1	ff d6		 call	 esi
  000c3	50		 push	 eax
  000c4	68 07 02 00 00	 push	 519			; 00000207H
  000c9	e8 00 00 00 00	 call	 _RenderBitmap
  000ce	83 c4 20	 add	 esp, 32			; 00000020H
  000d1	a3 00 00 00 00	 mov	 DWORD PTR ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A, eax

; 1175 : 					GetDlgItem (hwndDlg, IDC_TEXTUAL_LOGO_IMG),
; 1176 : 					0, 0, 0, 0, FALSE, TRUE);
; 1177 : 
; 1178 : 				SetWindowPos (GetDlgItem (hwndDlg, IDC_ABOUT_BKG), HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);

  000d6	6a 03		 push	 3
  000d8	6a 00		 push	 0
  000da	6a 00		 push	 0
  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	6a 00		 push	 0
  000e2	68 b5 13 00 00	 push	 5045			; 000013b5H
  000e7	53		 push	 ebx
  000e8	ff d6		 call	 esi
  000ea	50		 push	 eax
  000eb	ff d7		 call	 edi
$LN5@AboutDlgPr:

; 1179 : 			}
; 1180 : 
; 1181 : 			// Version
; 1182 : 			SendMessage (GetDlgItem (hwndDlg, IDT_ABOUT_VERSION), WM_SETFONT, (WPARAM) hUserBoldFont, 0);

  000ed	6a 00		 push	 0
  000ef	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserBoldFont
  000f5	6a 30		 push	 48			; 00000030H
  000f7	68 b6 13 00 00	 push	 5046			; 000013b6H
  000fc	53		 push	 ebx
  000fd	ff d6		 call	 esi
  000ff	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SendMessageA@16
  00105	50		 push	 eax
  00106	ff d7		 call	 edi

; 1183 : 			sprintf (szTmp, "GostCrypt %s", VERSION_STRING);

  00108	68 00 00 00 00	 push	 OFFSET ??_C@_05OJPKCACG@1?43?41?$AA@
  0010d	8d 45 98	 lea	 eax, DWORD PTR _szTmp$2[ebp]
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BPJNLKPO@GostCrypt?5?$CFs?$AA@
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _sprintf

; 1184 : /*
; 1185 : #if (defined(_DEBUG) || defined(DEBUG))
; 1186 : 			strcat (szTmp, "  (debug)");
; 1187 : #endif
; 1188 : */
; 1189 : 			SetDlgItemText (hwndDlg, IDT_ABOUT_VERSION, szTmp);

  0011b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__SetDlgItemTextA@12
  00121	8d 45 98	 lea	 eax, DWORD PTR _szTmp$2[ebp]
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH
  00127	50		 push	 eax
  00128	68 b6 13 00 00	 push	 5046			; 000013b6H
  0012d	53		 push	 ebx
  0012e	ff d6		 call	 esi

; 1190 : 			SetDlgItemText (hwndDlg, IDT_ABOUT_RELEASE, GST_STR_RELEASED_BY);

  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NEDIGDMJ@Released?5by?5the?5GostCrypt?5develo@
  00135	68 fb 13 00 00	 push	 5115			; 000013fbH
  0013a	53		 push	 ebx
  0013b	ff d6		 call	 esi

; 1191 : 
; 1192 : 			// Credits
; 1193 : 			SendMessage (GetDlgItem (hwndDlg, IDC_ABOUT_CREDITS), WM_SETFONT, (WPARAM) hUserFont, (LPARAM) 0);

  0013d	6a 00		 push	 0
  0013f	ff 35 00 00 00
	00		 push	 DWORD PTR _hUserFont
  00145	6a 30		 push	 48			; 00000030H
  00147	68 b8 13 00 00	 push	 5048			; 000013b8H
  0014c	53		 push	 ebx
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  00153	50		 push	 eax
  00154	ff d7		 call	 edi

; 1194 : 			SendMessage (hwndDlg, WM_APP, 0, 0);

  00156	6a 00		 push	 0
  00158	6a 00		 push	 0
  0015a	68 00 80 00 00	 push	 32768			; 00008000H
  0015f	53		 push	 ebx
  00160	ff d7		 call	 edi
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi

; 1195 : 			return 1;

  00164	e9 ad 00 00 00	 jmp	 $LN16@AboutDlgPr
$LN12@AboutDlgPr:

; 1244 : 
; 1245 : 	case WM_CLOSE:
; 1246 : 		/* Delete buffered bitmaps (if any) */
; 1247 : 		if (hbmTextualLogoBitmapRescaled != NULL)

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A
  0016e	85 c0		 test	 eax, eax
  00170	74 11		 je	 SHORT $LN13@AboutDlgPr

; 1248 : 		{
; 1249 : 			DeleteObject ((HGDIOBJ) hbmTextualLogoBitmapRescaled);

  00172	50		 push	 eax
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 1250 : 			hbmTextualLogoBitmapRescaled = NULL;

  00179	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hbmTextualLogoBitmapRescaled@?1??AboutDlgProc@@9@16@4PAUHBITMAP__@@A, 0
$LN13@AboutDlgPr:

; 1251 : 		}
; 1252 : 
; 1253 : 		EndDialog (hwndDlg, 0);

  00183	6a 00		 push	 0
  00185	53		 push	 ebx
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8

; 1254 : 		return 1;

  0018c	e9 85 00 00 00	 jmp	 $LN16@AboutDlgPr
$LN7@AboutDlgPr:

; 1200 : 			"Portions of this software are based in part on the works of the following people: "
; 1201 : 			"Paul Le Roux, "
; 1202 : 			"Bruce Schneier, John Kelsey, Doug Whiting, David Wagner, Chris Hall, Niels Ferguson, "
; 1203 : 			"Lars Knudsen, Ross Anderson, Eli Biham, "
; 1204 : 			"Joan Daemen, Vincent Rijmen, "
; 1205 : 			"Phillip Rogaway, "
; 1206 : 			"Hans Dobbertin, Antoon Bosselaers, Bart Preneel, "
; 1207 : 			"Paulo Barreto, Brian Gladman, Wei Dai, Peter Gutmann, and many others.\r\n\r\n"
; 1208 : 
; 1209 : 			"Portions of this software:\r\n"
; 1210 : 			"Copyright \xA9 2003-2012 TrueCrypt Developers Association. All Rights Reserved.\r\n"
; 1211 : 			"Copyright \xA9 1998-2000 Paul Le Roux. All Rights Reserved.\r\n"
; 1212 : 			"Copyright \xA9 1998-2008 Brian Gladman. All Rights Reserved.\r\n"
; 1213 : 			"Copyright \xA9 2002-2004 Mark Adler. All Rights Reserved.\r\n\r\n"
; 1214 : 
; 1215 : 			"This software as a whole:\r\n"
; 1216 : 			"Copyright \xA9 2012 TrueCrypt Developers Association. All rights reserved.\r\n\r\n"
; 1217 : 
; 1218 : 			"A TrueCrypt Foundation Release");
; 1219 : 
; 1220 : 		return 1;
; 1221 : 
; 1222 : 	case WM_COMMAND:
; 1223 : 		if (lw == IDOK || lw == IDCANCEL)

  00191	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  00194	66 83 f8 01	 cmp	 ax, 1
  00198	74 4e		 je	 SHORT $LN9@AboutDlgPr
  0019a	66 83 f8 02	 cmp	 ax, 2
  0019e	74 48		 je	 SHORT $LN9@AboutDlgPr

; 1227 : 		}
; 1228 : 
; 1229 : 		if (lw == IDC_HOMEPAGE)

  001a0	b9 ff 01 00 00	 mov	 ecx, 511		; 000001ffH
  001a5	66 3b c1	 cmp	 ax, cx
  001a8	75 0f		 jne	 SHORT $LN10@AboutDlgPr

; 1230 : 		{
; 1231 : 			//Applink ("main", TRUE, "");
; 1232 : 			Extlink("http://www.gostcrypt.org/");

  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EMBCECD@http?3?1?1www?4gostcrypt?4org?1?$AA@
  001af	e8 00 00 00 00	 call	 _Extlink
  001b4	83 c4 04	 add	 esp, 4

; 1233 : 			return 1;

  001b7	eb 5d		 jmp	 SHORT $LN16@AboutDlgPr
$LN10@AboutDlgPr:

; 1234 : 		}
; 1235 : 
; 1236 : 		// Disallow modification of credits
; 1237 : 		if (HIWORD (wParam) == EN_UPDATE)

  001b9	c1 e8 10	 shr	 eax, 16			; 00000010H
  001bc	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  001c1	75 12		 jne	 SHORT $LN11@AboutDlgPr

; 1238 : 		{
; 1239 : 			SendMessage (hwndDlg, WM_APP, 0, 0);

  001c3	6a 00		 push	 0
  001c5	6a 00		 push	 0
  001c7	68 00 80 00 00	 push	 32768			; 00008000H
  001cc	53		 push	 ebx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1240 : 			return 1;

  001d3	eb 41		 jmp	 SHORT $LN16@AboutDlgPr
$LN11@AboutDlgPr:

; 1241 : 		}
; 1242 : 
; 1243 : 		return 0;

  001d5	33 c0		 xor	 eax, eax
  001d7	5b		 pop	 ebx

; 1255 : 	}
; 1256 : 
; 1257 : 	return 0;
; 1258 : }

  001d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c2 10 00	 ret	 16			; 00000010H
$LN9@AboutDlgPr:

; 1224 : 		{
; 1225 : 			PostMessage (hwndDlg, WM_CLOSE, 0, 0);

  001e8	6a 00		 push	 0
  001ea	6a 00		 push	 0
  001ec	6a 10		 push	 16			; 00000010H
  001ee	53		 push	 ebx
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 1226 : 			return 1;

  001f5	eb 1f		 jmp	 SHORT $LN16@AboutDlgPr
$LN15@AboutDlgPr:

; 1150 : 	WORD lw = LOWORD (wParam);
; 1151 : 	static HBITMAP hbmTextualLogoBitmapRescaled = NULL;
; 1152 : 
; 1153 : 	switch (msg)

  001f7	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  001fc	75 d7		 jne	 SHORT $LN11@AboutDlgPr

; 1196 : 		}
; 1197 : 
; 1198 : 	case WM_APP:
; 1199 : 		SetWindowText (GetDlgItem (hwndDlg, IDC_ABOUT_CREDITS),

  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_0DCE@DDNKAONB@Portions?5of?5this?5software?5are?5ba@
  00203	68 b8 13 00 00	 push	 5048			; 000013b8H
  00208	53		 push	 ebx
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  0020f	50		 push	 eax
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8
$LN16@AboutDlgPr:

; 1255 : 	}
; 1256 : 
; 1257 : 	return 0;
; 1258 : }

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	b8 01 00 00 00	 mov	 eax, 1
  0021e	33 cd		 xor	 ecx, ebp
  00220	5b		 pop	 ebx
  00221	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 10 00	 ret	 16			; 00000010H
_AboutDlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _translateWin32Error
_TEXT	SEGMENT
_lpszMsgBuf$ = 8					; size = 4
_nWSizeOfBuf$ = 12					; size = 4
_translateWin32Error PROC				; COMDAT

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 668  : 	DWORD dwError = GetLastError ();

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 669  : 
; 670  : 	if (FormatMessageW (FORMAT_MESSAGE_FROM_SYSTEM, NULL, dwError,

  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _nWSizeOfBuf$[ebp]
  0000f	8b f0		 mov	 esi, eax
  00011	ff 75 08	 push	 DWORD PTR _lpszMsgBuf$[ebp]
  00014	68 00 04 00 00	 push	 1024			; 00000400H
  00019	56		 push	 esi
  0001a	6a 00		 push	 0
  0001c	68 00 10 00 00	 push	 4096			; 00001000H
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FormatMessageW@28

; 671  : 			   MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),	/* Default language */
; 672  : 			   lpszMsgBuf, nWSizeOfBuf, NULL))
; 673  : 	{
; 674  : 		SetLastError (dwError);		// Preserve the original error code

  00027	56		 push	 esi
  00028	85 c0		 test	 eax, eax
  0002a	74 0e		 je	 SHORT $LN2@translateW
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 675  : 		return TRUE;

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	5e		 pop	 esi

; 680  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN2@translateW:

; 676  : 	}
; 677  : 
; 678  : 	SetLastError (dwError);			// Preserve the original error code

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 679  : 	return FALSE;

  00040	33 c0		 xor	 eax, eax
  00042	5e		 pop	 esi

; 680  : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_translateWin32Error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsDiskError
_TEXT	SEGMENT
_error$ = 8						; size = 4
_IsDiskError PROC					; COMDAT

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  : 	return IsDiskReadError (error) || IsDiskWriteError (error);

  00003	8b 45 08	 mov	 eax, DWORD PTR _error$[ebp]
  00006	83 f8 17	 cmp	 eax, 23			; 00000017H
  00009	74 2b		 je	 SHORT $LN3@IsDiskErro
  0000b	3d 5d 04 00 00	 cmp	 eax, 1117		; 0000045dH
  00010	74 24		 je	 SHORT $LN3@IsDiskErro
  00012	3d c1 1a 00 00	 cmp	 eax, 6849		; 00001ac1H
  00017	74 1d		 je	 SHORT $LN3@IsDiskErro
  00019	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  0001c	74 18		 je	 SHORT $LN3@IsDiskErro
  0001e	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00021	74 13		 je	 SHORT $LN3@IsDiskErro
  00023	83 f8 01	 cmp	 eax, 1
  00026	74 0e		 je	 SHORT $LN3@IsDiskErro
  00028	83 f8 79	 cmp	 eax, 121		; 00000079H
  0002b	74 09		 je	 SHORT $LN3@IsDiskErro
  0002d	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  00030	74 04		 je	 SHORT $LN3@IsDiskErro
  00032	33 c0		 xor	 eax, eax

; 604  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN3@IsDiskErro:

; 603  : 	return IsDiskReadError (error) || IsDiskWriteError (error);

  00036	b8 01 00 00 00	 mov	 eax, 1

; 604  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_IsDiskError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsDiskWriteError
_TEXT	SEGMENT
_error$ = 8						; size = 4
_IsDiskWriteError PROC					; COMDAT

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : 	return (error == ERROR_IO_DEVICE

  00003	8b 45 08	 mov	 eax, DWORD PTR _error$[ebp]
  00006	3d 5d 04 00 00	 cmp	 eax, 1117		; 0000045dH
  0000b	74 1f		 je	 SHORT $LN3@IsDiskWrit
  0000d	3d c1 1a 00 00	 cmp	 eax, 6849		; 00001ac1H
  00012	74 18		 je	 SHORT $LN3@IsDiskWrit
  00014	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00017	74 13		 je	 SHORT $LN3@IsDiskWrit
  00019	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  0001c	74 0e		 je	 SHORT $LN3@IsDiskWrit
  0001e	83 f8 01	 cmp	 eax, 1
  00021	74 09		 je	 SHORT $LN3@IsDiskWrit
  00023	83 f8 79	 cmp	 eax, 121		; 00000079H
  00026	74 04		 je	 SHORT $LN3@IsDiskWrit
  00028	33 c0		 xor	 eax, eax

; 585  : 		|| error == ERROR_BAD_CLUSTERS
; 586  : 		|| error == ERROR_SECTOR_NOT_FOUND
; 587  : 		|| error == ERROR_WRITE_FAULT
; 588  : 		|| error == ERROR_INVALID_FUNCTION // I/O error may be reported as ERROR_INVALID_FUNCTION by buggy chipset drivers
; 589  : 		|| error == ERROR_SEM_TIMEOUT);	// I/O operation timeout may be reported as ERROR_SEM_TIMEOUT
; 590  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN3@IsDiskWrit:

; 584  : 	return (error == ERROR_IO_DEVICE

  0002c	b8 01 00 00 00	 mov	 eax, 1

; 585  : 		|| error == ERROR_BAD_CLUSTERS
; 586  : 		|| error == ERROR_SECTOR_NOT_FOUND
; 587  : 		|| error == ERROR_WRITE_FAULT
; 588  : 		|| error == ERROR_INVALID_FUNCTION // I/O error may be reported as ERROR_INVALID_FUNCTION by buggy chipset drivers
; 589  : 		|| error == ERROR_SEM_TIMEOUT);	// I/O operation timeout may be reported as ERROR_SEM_TIMEOUT
; 590  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_IsDiskWriteError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _IsDiskReadError
_TEXT	SEGMENT
_error$ = 8						; size = 4
_IsDiskReadError PROC					; COMDAT

; 563  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 564  : 	return (error == ERROR_CRC

  00003	8b 45 08	 mov	 eax, DWORD PTR _error$[ebp]
  00006	83 f8 17	 cmp	 eax, 23			; 00000017H
  00009	74 26		 je	 SHORT $LN3@IsDiskRead
  0000b	3d 5d 04 00 00	 cmp	 eax, 1117		; 0000045dH
  00010	74 1f		 je	 SHORT $LN3@IsDiskRead
  00012	3d c1 1a 00 00	 cmp	 eax, 6849		; 00001ac1H
  00017	74 18		 je	 SHORT $LN3@IsDiskRead
  00019	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  0001c	74 13		 je	 SHORT $LN3@IsDiskRead
  0001e	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00021	74 0e		 je	 SHORT $LN3@IsDiskRead
  00023	83 f8 01	 cmp	 eax, 1
  00026	74 09		 je	 SHORT $LN3@IsDiskRead
  00028	83 f8 79	 cmp	 eax, 121		; 00000079H
  0002b	74 04		 je	 SHORT $LN3@IsDiskRead
  0002d	33 c0		 xor	 eax, eax

; 565  : 		|| error == ERROR_IO_DEVICE
; 566  : 		|| error == ERROR_BAD_CLUSTERS
; 567  : 		|| error == ERROR_SECTOR_NOT_FOUND
; 568  : 		|| error == ERROR_READ_FAULT
; 569  : 		|| error == ERROR_INVALID_FUNCTION // I/O error may be reported as ERROR_INVALID_FUNCTION by buggy chipset drivers
; 570  : 		|| error == ERROR_SEM_TIMEOUT);	// I/O operation timeout may be reported as ERROR_SEM_TIMEOUT
; 571  : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN3@IsDiskRead:

; 564  : 	return (error == ERROR_CRC

  00031	b8 01 00 00 00	 mov	 eax, 1

; 565  : 		|| error == ERROR_IO_DEVICE
; 566  : 		|| error == ERROR_BAD_CLUSTERS
; 567  : 		|| error == ERROR_SECTOR_NOT_FOUND
; 568  : 		|| error == ERROR_READ_FAULT
; 569  : 		|| error == ERROR_INVALID_FUNCTION // I/O error may be reported as ERROR_INVALID_FUNCTION by buggy chipset drivers
; 570  : 		|| error == ERROR_SEM_TIMEOUT);	// I/O operation timeout may be reported as ERROR_SEM_TIMEOUT
; 571  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_IsDiskReadError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _handleWin32Error
_TEXT	SEGMENT
_lpMsgBuf$ = -4						; size = 4
_hwndDlg$ = 8						; size = 4
_handleWin32Error PROC					; COMDAT

; 616  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 617  : 	PWSTR lpMsgBuf;
; 618  : 	DWORD dwError = GetLastError ();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 619  : 
; 620  : 	if (Silent || dwError == 0 || dwError == ERROR_INVALID_WINDOW_HANDLE)

  0000b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Silent, 0
  00012	8b f0		 mov	 esi, eax
  00014	0f 85 a3 00 00
	00		 jne	 $LN1@handleWin3
  0001a	85 f6		 test	 esi, esi
  0001c	0f 84 9b 00 00
	00		 je	 $LN1@handleWin3
  00022	81 fe 78 05 00
	00		 cmp	 esi, 1400		; 00000578H
  00028	0f 84 8f 00 00
	00		 je	 $LN1@handleWin3

; 621  : 		return dwError;
; 622  : 
; 623  : 	// Access denied
; 624  : 	if (dwError == ERROR_ACCESS_DENIED && !IsAdmin ())

  0002e	83 fe 05	 cmp	 esi, 5
  00031	75 25		 jne	 SHORT $LN4@handleWin3
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsUserAnAdmin@0
  00039	85 c0		 test	 eax, eax
  0003b	75 1b		 jne	 SHORT $LN4@handleWin3

; 625  : 	{
; 626  : 		Error ("ERR_ACCESS_DENIED");

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GIPDODAO@ERR_ACCESS_DENIED?$AA@
  00042	e8 00 00 00 00	 call	 _Error
  00047	83 c4 04	 add	 esp, 4

; 627  : 		SetLastError (dwError);		// Preserve the original error code

  0004a	56		 push	 esi
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 628  : 		return dwError;

  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi

; 655  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN4@handleWin3:

; 629  : 	}
; 630  : 
; 631  : 	FormatMessageW (

  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	8d 45 fc	 lea	 eax, DWORD PTR _lpMsgBuf$[ebp]
  0005f	50		 push	 eax
  00060	68 00 04 00 00	 push	 1024			; 00000400H
  00065	56		 push	 esi
  00066	6a 00		 push	 0
  00068	68 00 11 00 00	 push	 4352			; 00001100H
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FormatMessageW@28

; 632  : 		FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
; 633  : 			      NULL,
; 634  : 			      dwError,
; 635  : 			      MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),	/* Default language */
; 636  : 			      (PWSTR) &lpMsgBuf,
; 637  : 			      0,
; 638  : 			      NULL
; 639  : 	    );
; 640  : 
; 641  : 	MessageBoxW (hwndDlg, lpMsgBuf, lpszTitle, ICON_HAND);

  00073	6a 10		 push	 16			; 00000010H
  00075	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  0007b	ff 75 fc	 push	 DWORD PTR _lpMsgBuf$[ebp]
  0007e	ff 75 08	 push	 DWORD PTR _hwndDlg$[ebp]
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 642  : 	LocalFree (lpMsgBuf);

  00087	ff 75 fc	 push	 DWORD PTR _lpMsgBuf$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LocalFree@4

; 643  : 
; 644  : 	// User-friendly hardware error explanation
; 645  : 	if (IsDiskError (dwError))

  00090	56		 push	 esi
  00091	e8 00 00 00 00	 call	 _IsDiskError
  00096	83 c4 04	 add	 esp, 4
  00099	85 c0		 test	 eax, eax
  0009b	74 0d		 je	 SHORT $LN5@handleWin3

; 646  : 		Error ("ERR_HARDWARE_ERROR");

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NLNANBEJ@ERR_HARDWARE_ERROR?$AA@
  000a2	e8 00 00 00 00	 call	 _Error
  000a7	83 c4 04	 add	 esp, 4
$LN5@handleWin3:

; 647  : 
; 648  : 	// Device not ready
; 649  : 	if (dwError == ERROR_NOT_READY)

  000aa	83 fe 15	 cmp	 esi, 21			; 00000015H
  000ad	75 05		 jne	 SHORT $LN6@handleWin3

; 650  : 		HandleDriveNotReadyError();

  000af	e8 00 00 00 00	 call	 _HandleDriveNotReadyError
$LN6@handleWin3:

; 651  : 
; 652  : 	SetLastError (dwError);		// Preserve the original error code

  000b4	56		 push	 esi
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 653  : 
; 654  : 	return dwError;

  000bb	8b c6		 mov	 eax, esi
$LN1@handleWin3:
  000bd	5e		 pop	 esi

; 655  : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_handleWin32Error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _err_strdup
_TEXT	SEGMENT
_lpszText$ = 8						; size = 4
_err_strdup PROC					; COMDAT

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 	int j = (strlen (lpszText) + 1) * sizeof (char);

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpszText$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@err_strdup:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@err_strdup
  00017	2b c2		 sub	 eax, edx
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 548  : 	char *z = (char *) err_malloc (j);

  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _malloc
  00024	8b f0		 mov	 esi, eax
  00026	83 c4 04	 add	 esp, 4
  00029	85 f6		 test	 esi, esi
  0002b	74 13		 je	 SHORT $LN9@err_strdup

; 549  : 	memmove (z, lpszText, j);

  0002d	53		 push	 ebx
  0002e	ff 75 08	 push	 DWORD PTR _lpszText$[ebp]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _memmove
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 550  : 	return z;

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx

; 551  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN9@err_strdup:

; 548  : 	char *z = (char *) err_malloc (j);

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  00045	e8 00 00 00 00	 call	 _AbortProcess
$LN10@err_strdup:
$LN8@err_strdup:
  0004a	cc		 int	 3
_err_strdup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _err_malloc
_TEXT	SEGMENT
_size$ = 8						; size = 4
_err_malloc PROC					; COMDAT

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 	void *z = (void *) GSTalloc (size);

  00003	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00006	e8 00 00 00 00	 call	 _malloc
  0000b	83 c4 04	 add	 esp, 4

; 528  : 	if (z)

  0000e	85 c0		 test	 eax, eax
  00010	74 02		 je	 SHORT $LN5@err_malloc

; 531  : 	return 0;
; 532  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN5@err_malloc:

; 529  : 		return z;
; 530  : 	AbortProcess ("OUTOFMEMORY");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IMAOAGMP@OUTOFMEMORY?$AA@
  00019	e8 00 00 00 00	 call	 _AbortProcess
$LN7@err_malloc:
$LN4@err_malloc:
  0001e	cc		 int	 3
_err_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AbortProcessSilent
_TEXT	SEGMENT
_AbortProcessSilent PROC				; COMDAT

; 509  : 	// Note that this function also causes localcleanup() to be called (see atexit())
; 510  : 	exit (1);

  00000	6a 01		 push	 1
  00002	e8 00 00 00 00	 call	 _exit
$LN4@AbortProce:
$LN3@AbortProce:
  00007	cc		 int	 3
_AbortProcessSilent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _AbortProcess
_TEXT	SEGMENT
_stringId$ = 8						; size = 4
_AbortProcess PROC					; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 494  : 	// Note that this function also causes localcleanup() to be called (see atexit())
; 495  : 	MessageBeep (MB_ICONEXCLAMATION);

  00003	6a 30		 push	 48			; 00000030H
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBeep@4

; 496  : 	MessageBoxW (NULL, GetString (stringId), lpszTitle, ICON_HAND);

  0000b	6a 10		 push	 16			; 00000010H
  0000d	ff 35 00 00 00
	00		 push	 DWORD PTR _lpszTitle
  00013	ff 75 08	 push	 DWORD PTR _stringId$[ebp]
  00016	e8 00 00 00 00	 call	 _GetString
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16

; 497  : 	exit (1);

  00027	6a 01		 push	 1
  00029	e8 00 00 00 00	 call	 _exit
$LN4@AbortProce:
$LN3@AbortProce:
  0002e	cc		 int	 3
_AbortProcess ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _RemoveFakeDosName
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_lpszDosDevice$ = 12					; size = 4
_RemoveFakeDosName PROC					; COMDAT

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 473  : 	BOOL bDosLinkRemoved = DefineDosDevice (DDD_RAW_TARGET_PATH | DDD_EXACT_MATCH_ON_REMOVE |

  00003	ff 75 08	 push	 DWORD PTR _lpszDiskFile$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _lpszDosDevice$[ebp]
  00009	6a 07		 push	 7
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefineDosDeviceA@12

; 474  : 			DDD_REMOVE_DEFINITION, lpszDosDevice, lpszDiskFile);
; 475  : 	if (bDosLinkRemoved == FALSE)

  00011	f7 d8		 neg	 eax
  00013	1b c0		 sbb	 eax, eax
  00015	40		 inc	 eax

; 476  : 	{
; 477  : 		return ERR_OS_ERROR;
; 478  : 	}
; 479  : 
; 480  : 	return 0;
; 481  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_RemoveFakeDosName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _FakeDosNameForDevice
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_lpszDosDevice$ = 12					; size = 4
_lpszCFDevice$ = 16					; size = 4
_bNameOnly$ = 20					; size = 4
_FakeDosNameForDevice PROC				; COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 448  : 	BOOL bDosLinkCreated = TRUE;
; 449  : 	sprintf (lpszDosDevice, "gostcrypt%lu", GetCurrentProcessId ());

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _lpszDosDevice$[ebp]
  0000d	50		 push	 eax
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DANNJCFD@gostcrypt?$CFlu?$AA@
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _sprintf
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 450  : 
; 451  : 	if (bNameOnly == FALSE)

  0001c	83 7d 14 00	 cmp	 DWORD PTR _bNameOnly$[ebp], 0
  00020	75 18		 jne	 SHORT $LN3@FakeDosNam

; 452  : 		bDosLinkCreated = DefineDosDevice (DDD_RAW_TARGET_PATH, lpszDosDevice, lpszDiskFile);

  00022	ff 75 08	 push	 DWORD PTR _lpszDiskFile$[ebp]
  00025	56		 push	 esi
  00026	6a 01		 push	 1
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefineDosDeviceA@12

; 453  : 
; 454  : 	if (bDosLinkCreated == FALSE)

  0002e	85 c0		 test	 eax, eax
  00030	75 08		 jne	 SHORT $LN3@FakeDosNam

; 455  : 		return ERR_OS_ERROR;

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	5e		 pop	 esi

; 460  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN3@FakeDosNam:

; 456  : 	else
; 457  : 		sprintf (lpszCFDevice, "\\\\.\\%s", lpszDosDevice);

  0003a	56		 push	 esi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06DIBEOEIP@?2?2?4?2?$CFs?$AA@
  00040	ff 75 10	 push	 DWORD PTR _lpszCFDevice$[ebp]
  00043	e8 00 00 00 00	 call	 _sprintf
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  : 
; 459  : 	return 0;

  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 460  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_FakeDosNameForDevice ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _CreateFullVolumePath
_TEXT	SEGMENT
_lpszDiskFile$ = 8					; size = 4
_lpszFileName$ = 12					; size = 4
_bDevice$ = 16						; size = 4
_CreateFullVolumePath PROC				; COMDAT

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 416  : 	UpperCaseCopy (lpszDiskFile, lpszFileName);

  00004	8b 75 0c	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _lpszDiskFile$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _UpperCaseCopy

; 417  : 
; 418  : 	*bDevice = FALSE;

  00012	8b 4d 10	 mov	 ecx, DWORD PTR _bDevice$[ebp]
  00015	83 c4 08	 add	 esp, 8
  00018	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 419  : 
; 420  : 	if (memcmp (lpszDiskFile, "\\DEVICE", sizeof (char) * 7) == 0)

  0001e	81 3f 5c 44 45
	56		 cmp	 DWORD PTR [edi], 1447380060 ; 5645445cH
  00024	75 14		 jne	 SHORT $LN2@CreateFull
  00026	66 81 7f 04 49
	43		 cmp	 WORD PTR [edi+4], 17225	; 00004349H
  0002c	75 0c		 jne	 SHORT $LN2@CreateFull
  0002e	80 7f 06 45	 cmp	 BYTE PTR [edi+6], 69	; 00000045H
  00032	75 06		 jne	 SHORT $LN2@CreateFull

; 421  : 	{
; 422  : 		*bDevice = TRUE;

  00034	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
$LN2@CreateFull:

; 423  : 	}
; 424  : 
; 425  : 	strcpy (lpszDiskFile, lpszFileName);

  0003a	2b fe		 sub	 edi, esi
  0003c	0f 1f 40 00	 npad	 4
$LL4@CreateFull:
  00040	8a 06		 mov	 al, BYTE PTR [esi]
  00042	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00045	88 44 37 ff	 mov	 BYTE PTR [edi+esi-1], al
  00049	84 c0		 test	 al, al
  0004b	75 f3		 jne	 SHORT $LL4@CreateFull
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 426  : 
; 427  : #if _DEBUG
; 428  : 	OutputDebugString ("CreateFullVolumePath: ");
; 429  : 	OutputDebugString (lpszDiskFile);
; 430  : 	OutputDebugString ("\n");
; 431  : #endif
; 432  : 
; 433  : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_CreateFullVolumePath ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _UpperCaseCopy
_TEXT	SEGMENT
_lpszDest$ = 8						; size = 4
_lpszSource$ = 12					; size = 4
_UpperCaseCopy PROC					; COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 359  : 	int i = strlen (lpszSource);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _lpszSource$[ebp]
  00007	56		 push	 esi
  00008	8b f3		 mov	 esi, ebx
  0000a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000d	0f 1f 00	 npad	 3
$LL9@UpperCaseC:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL9@UpperCaseC

; 360  : 
; 361  : 	lpszDest[i] = 0;

  00017	8b 45 08	 mov	 eax, DWORD PTR _lpszDest$[ebp]
  0001a	2b f1		 sub	 esi, ecx
  0001c	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 362  : 	while (--i >= 0)

  00020	83 ee 01	 sub	 esi, 1
  00023	78 23		 js	 SHORT $LN3@UpperCaseC

; 359  : 	int i = strlen (lpszSource);

  00025	57		 push	 edi
  00026	8d 3c 06	 lea	 edi, DWORD PTR [esi+eax]

; 362  : 	while (--i >= 0)

  00029	2b d8		 sub	 ebx, eax
  0002b	0f 1f 44 00 00	 npad	 5
$LL2@UpperCaseC:

; 363  : 	{
; 364  : 		lpszDest[i] = (char) toupper (lpszSource[i]);

  00030	0f be 04 3b	 movsx	 eax, BYTE PTR [ebx+edi]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _toupper
  0003a	83 c4 04	 add	 esp, 4
  0003d	88 07		 mov	 BYTE PTR [edi], al
  0003f	83 ee 01	 sub	 esi, 1
  00042	8d 7f ff	 lea	 edi, DWORD PTR [edi-1]
  00045	79 e9		 jns	 SHORT $LL2@UpperCaseC
  00047	5f		 pop	 edi
$LN3@UpperCaseC:
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 365  : 	}
; 366  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_UpperCaseCopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _LowerCaseCopy
_TEXT	SEGMENT
_lpszDest$ = 8						; size = 4
_lpszSource$ = 12					; size = 4
_LowerCaseCopy PROC					; COMDAT

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 338  : 	int i = strlen (lpszSource);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _lpszSource$[ebp]
  00007	56		 push	 esi
  00008	8b f3		 mov	 esi, ebx
  0000a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000d	0f 1f 00	 npad	 3
$LL9@LowerCaseC:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL9@LowerCaseC

; 339  : 
; 340  : 	lpszDest[i] = 0;

  00017	8b 45 08	 mov	 eax, DWORD PTR _lpszDest$[ebp]
  0001a	2b f1		 sub	 esi, ecx
  0001c	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 341  : 	while (--i >= 0)

  00020	83 ee 01	 sub	 esi, 1
  00023	78 23		 js	 SHORT $LN3@LowerCaseC

; 338  : 	int i = strlen (lpszSource);

  00025	57		 push	 edi
  00026	8d 3c 06	 lea	 edi, DWORD PTR [esi+eax]

; 341  : 	while (--i >= 0)

  00029	2b d8		 sub	 ebx, eax
  0002b	0f 1f 44 00 00	 npad	 5
$LL2@LowerCaseC:

; 342  : 	{
; 343  : 		lpszDest[i] = (char) tolower (lpszSource[i]);

  00030	0f be 04 3b	 movsx	 eax, BYTE PTR [ebx+edi]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _tolower
  0003a	83 c4 04	 add	 esp, 4
  0003d	88 07		 mov	 BYTE PTR [edi], al
  0003f	83 ee 01	 sub	 esi, 1
  00042	8d 7f ff	 lea	 edi, DWORD PTR [edi-1]
  00045	79 e9		 jns	 SHORT $LL2@LowerCaseC
  00047	5f		 pop	 edi
$LN3@LowerCaseC:
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 344  : 	}
; 345  : 
; 346  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_LowerCaseCopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\dlgcode.c
;	COMDAT _cleanup
_TEXT	SEGMENT
_dwResult$1 = -8					; size = 4
_driverUnloadDisabled$2 = -4				; size = 4
_cleanup PROC						; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  : 	/* Cleanup the GDI fonts */
; 252  : 	if (hFixedFont != NULL)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedFont
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteObject@4
  00012	85 c0		 test	 eax, eax
  00014	74 03		 je	 SHORT $LN2@cleanup

; 253  : 		DeleteObject (hFixedFont);

  00016	50		 push	 eax
  00017	ff d6		 call	 esi
$LN2@cleanup:

; 254  : 	if (hFixedDigitFont != NULL)

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR _hFixedDigitFont
  0001e	85 c0		 test	 eax, eax
  00020	74 03		 je	 SHORT $LN3@cleanup

; 255  : 		DeleteObject (hFixedDigitFont);

  00022	50		 push	 eax
  00023	ff d6		 call	 esi
$LN3@cleanup:

; 256  : 	if (hBoldFont != NULL)

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR _hBoldFont
  0002a	85 c0		 test	 eax, eax
  0002c	74 03		 je	 SHORT $LN4@cleanup

; 257  : 		DeleteObject (hBoldFont);

  0002e	50		 push	 eax
  0002f	ff d6		 call	 esi
$LN4@cleanup:

; 258  : 	if (hTitleFont != NULL)

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR _hTitleFont
  00036	85 c0		 test	 eax, eax
  00038	74 03		 je	 SHORT $LN5@cleanup

; 259  : 		DeleteObject (hTitleFont);

  0003a	50		 push	 eax
  0003b	ff d6		 call	 esi
$LN5@cleanup:

; 260  : 	if (hUserFont != NULL)

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserFont
  00042	85 c0		 test	 eax, eax
  00044	74 03		 je	 SHORT $LN6@cleanup

; 261  : 		DeleteObject (hUserFont);

  00046	50		 push	 eax
  00047	ff d6		 call	 esi
$LN6@cleanup:

; 262  : 	if (hUserUnderlineFont != NULL)

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserUnderlineFont
  0004e	85 c0		 test	 eax, eax
  00050	74 03		 je	 SHORT $LN7@cleanup

; 263  : 		DeleteObject (hUserUnderlineFont);

  00052	50		 push	 eax
  00053	ff d6		 call	 esi
$LN7@cleanup:

; 264  : 	if (hUserBoldFont != NULL)

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR _hUserBoldFont
  0005a	85 c0		 test	 eax, eax
  0005c	74 03		 je	 SHORT $LN8@cleanup

; 265  : 		DeleteObject (hUserBoldFont);

  0005e	50		 push	 eax
  0005f	ff d6		 call	 esi
$LN8@cleanup:

; 266  : 	if (hUserUnderlineBoldFont != NULL)

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hUserUnderlineBoldFont@@3PAUHFONT__@@A ; hUserUnderlineBoldFont
  00066	85 c0		 test	 eax, eax
  00068	74 03		 je	 SHORT $LN9@cleanup

; 267  : 		DeleteObject (hUserUnderlineBoldFont);

  0006a	50		 push	 eax
  0006b	ff d6		 call	 esi
$LN9@cleanup:

; 268  : 
; 269  : 	/* Cleanup our dialog class */
; 270  : 	if (hDlgClass)

  0006d	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?hDlgClass@@3GA, 0 ; hDlgClass
  00075	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__UnregisterClassA@8
  0007b	74 0d		 je	 SHORT $LN10@cleanup

; 271  : 		UnregisterClass (GST_DLG_CLASS, hInst);

  0007d	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_09ODDMBMG@CustomDlg?$AA@
  00088	ff d6		 call	 esi
$LN10@cleanup:

; 272  : 	if (hSplashClass)

  0008a	66 83 3d 00 00
	00 00 00	 cmp	 WORD PTR ?hSplashClass@@3GA, 0 ; hSplashClass
  00092	74 0d		 je	 SHORT $LN11@cleanup

; 273  : 		UnregisterClass (GST_SPLASH_CLASS, hInst);

  00094	ff 35 00 00 00
	00		 push	 DWORD PTR _hInst
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_09EPIDNIBP@SplashDlg?$AA@
  0009f	ff d6		 call	 esi
$LN11@cleanup:

; 274  : 
; 275  : 	/* Close the device driver handle */
; 276  : 	if (hDriver != INVALID_HANDLE_VALUE)

  000a1	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _hDriver, -1
  000a8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseHandle@4
  000ae	74 57		 je	 SHORT $LN14@cleanup

; 277  : 	{
; 278  : 		// Unload driver mode if possible (non-install mode) 
; 279  : 		if (IsNonInstallMode ())

  000b0	e8 00 00 00 00	 call	 _IsNonInstallMode
  000b5	85 c0		 test	 eax, eax
  000b7	74 3c		 je	 SHORT $LN13@cleanup

; 280  : 		{
; 281  : 			// If a dismount was forced in the lifetime of the driver, Windows may later prevent it to be loaded again from
; 282  : 			// the same path. Therefore, the driver will not be unloaded even though it was loaded in non-install mode.
; 283  : 			int driverUnloadDisabled;
; 284  : 			DWORD dwResult;
; 285  : 
; 286  : 			if (!DeviceIoControl (hDriver, GST_IOCTL_IS_DRIVER_UNLOAD_DISABLED, NULL, 0, &driverUnloadDisabled, sizeof (driverUnloadDisabled), &dwResult, NULL))

  000b9	6a 00		 push	 0
  000bb	8d 45 f8	 lea	 eax, DWORD PTR _dwResult$1[ebp]
  000be	50		 push	 eax
  000bf	6a 04		 push	 4
  000c1	8d 45 fc	 lea	 eax, DWORD PTR _driverUnloadDisabled$2[ebp]
  000c4	50		 push	 eax
  000c5	6a 00		 push	 0
  000c7	6a 00		 push	 0
  000c9	68 24 20 22 00	 push	 2236452			; 00222024H
  000ce	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeviceIoControl@32
  000da	85 c0		 test	 eax, eax
  000dc	75 0a		 jne	 SHORT $LN15@cleanup

; 287  : 				driverUnloadDisabled = 0;

  000de	89 45 fc	 mov	 DWORD PTR _driverUnloadDisabled$2[ebp], eax

; 290  : 				DriverUnload ();

  000e1	e8 00 00 00 00	 call	 _DriverUnload

; 291  : 			else

  000e6	eb 1f		 jmp	 SHORT $LN14@cleanup
$LN15@cleanup:

; 288  : 
; 289  : 			if (!driverUnloadDisabled)

  000e8	83 7d fc 00	 cmp	 DWORD PTR _driverUnloadDisabled$2[ebp], 0
  000ec	75 07		 jne	 SHORT $LN13@cleanup

; 290  : 				DriverUnload ();

  000ee	e8 00 00 00 00	 call	 _DriverUnload

; 291  : 			else

  000f3	eb 12		 jmp	 SHORT $LN14@cleanup
$LN13@cleanup:

; 292  : 			{
; 293  : 				CloseHandle (hDriver);
; 294  : 				hDriver = INVALID_HANDLE_VALUE;
; 295  : 			}
; 296  : 		}
; 297  : 		else
; 298  : 		{
; 299  : 			CloseHandle (hDriver);

  000f5	ff 35 00 00 00
	00		 push	 DWORD PTR _hDriver
  000fb	ff d6		 call	 esi

; 300  : 			hDriver = INVALID_HANDLE_VALUE;

  000fd	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _hDriver, -1
$LN14@cleanup:

; 301  : 		}
; 302  : 	}
; 303  : 
; 304  : 	if (ConfigBuffer != NULL)

  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR _ConfigBuffer
  0010c	85 c0		 test	 eax, eax
  0010e	74 13		 je	 SHORT $LN18@cleanup

; 305  : 	{
; 306  : 		free (ConfigBuffer);

  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 _free
  00116	83 c4 04	 add	 esp, 4

; 307  : 		ConfigBuffer = NULL;

  00119	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _ConfigBuffer, 0
$LN18@cleanup:

; 308  : 	}
; 309  : 
; 310  : 	CoUninitialize ();

  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 311  : 
; 312  : 	CloseSysEncMutex ();

  00129	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
  00130	74 26		 je	 SHORT $LN24@cleanup
  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseMutex@4
  0013e	85 c0		 test	 eax, eax
  00140	74 16		 je	 SHORT $LN24@cleanup
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hSysEncMutex@@3RAXA ; hSysEncMutex
  00147	50		 push	 eax
  00148	ff d6		 call	 esi
  0014a	85 c0		 test	 eax, eax
  0014c	74 0a		 je	 SHORT $LN24@cleanup
  0014e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?hSysEncMutex@@3RAXA, 0 ; hSysEncMutex
$LN24@cleanup:
  00158	5e		 pop	 esi

; 313  : 
; 314  : #ifndef SETUP
; 315  : 	try
; 316  : 	{
; 317  : 		if (SecurityToken::IsInitialized())
; 318  : 			SecurityToken::CloseLibrary();
; 319  : 	}
; 320  : 	catch (...) { }
; 321  : 
; 322  : 	EncryptionThreadPoolStop();
; 323  : #endif
; 324  : }

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z PROC		; GostCrypt::ForEach::Container::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GContainer@ForEach@GostCrypt@@UAEPAXI@Z ENDP		; GostCrypt::ForEach::Container::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?InnerIsNotEnd@Container@ForEach@GostCrypt@@QBE_NXZ
_TEXT	SEGMENT
?InnerIsNotEnd@Container@ForEach@GostCrypt@@QBE_NXZ PROC ; GostCrypt::ForEach::Container::InnerIsNotEnd, COMDAT
; _this$ = ecx

; 23   : 			bool InnerIsNotEnd () const { return InnerEndCondition = !InnerEndCondition; }

  00000	33 c0		 xor	 eax, eax
  00002	38 41 05	 cmp	 BYTE PTR [ecx+5], al
  00005	0f 94 c0	 sete	 al
  00008	88 41 05	 mov	 BYTE PTR [ecx+5], al
  0000b	c3		 ret	 0
?InnerIsNotEnd@Container@ForEach@GostCrypt@@QBE_NXZ ENDP ; GostCrypt::ForEach::Container::InnerIsNotEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ?Continue@Container@ForEach@GostCrypt@@QBEXXZ
_TEXT	SEGMENT
?Continue@Container@ForEach@GostCrypt@@QBEXXZ PROC	; GostCrypt::ForEach::Container::Continue, COMDAT
; _this$ = ecx

; 22   : 			void Continue () const { InnerContinue = true; }

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
  00004	c3		 ret	 0
?Continue@Container@ForEach@GostCrypt@@QBEXXZ ENDP	; GostCrypt::ForEach::Container::Continue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??1Container@ForEach@GostCrypt@@UAE@XZ
_TEXT	SEGMENT
??1Container@ForEach@GostCrypt@@UAE@XZ PROC		; GostCrypt::ForEach::Container::~Container, COMDAT
; _this$ = ecx

; 20   : 			virtual ~Container () { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00006	c3		 ret	 0
??1Container@ForEach@GostCrypt@@UAE@XZ ENDP		; GostCrypt::ForEach::Container::~Container
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\platform\foreach.h
;	COMDAT ??0Container@ForEach@GostCrypt@@QAE@XZ
_TEXT	SEGMENT
??0Container@ForEach@GostCrypt@@QAE@XZ PROC		; GostCrypt::ForEach::Container::Container, COMDAT
; _this$ = ecx

; 19   : 			Container () : InnerContinue (true), InnerEndCondition (false) { }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Container@ForEach@GostCrypt@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	66 c7 41 04 01
	00		 mov	 WORD PTR [ecx+4], 1
  0000e	c3		 ret	 0
??0Container@ForEach@GostCrypt@@QAE@XZ ENDP		; GostCrypt::ForEach::Container::Container
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT
; _this$ = ecx

; 2283 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset, COMDAT
; _this$ = ecx

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2271 : 		if (this->_Mysize() < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00009	72 04		 jb	 SHORT $LN17@Check_offs

; 2273 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN17@Check_offs:

; 2272 : 			_Xran();

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN19@Check_offs:
$LN16@Check_offs:
  00019	cc		 int	 3
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT
; _this$ = ecx

; 2266 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 2248 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2249 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 29		 je	 SHORT $LN4@Tidy

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00010	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00014	72 23		 jb	 SHORT $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0e		 je	 SHORT $LN57@Tidy

; 2256 : 				_Traits::copy(this->_Bx()._Buf,

  0001d	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  00020	50		 push	 eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _memcpy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@Tidy:

; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0002b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002e	8b ce		 mov	 ecx, esi
  00030	40		 inc	 eax
  00031	50		 push	 eax
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
  00038	5b		 pop	 ebx
$LN4@Tidy:

; 2259 : 			}
; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00039	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 2261 : 		_Eos(_Newsize);

  00040	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00044	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00047	72 0e		 jb	 SHORT $LN94@Tidy
  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	33 c9		 xor	 ecx, ecx
  0004d	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 2262 : 		}

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8

; 2261 : 		_Eos(_Newsize);

$LN94@Tidy:
  00057	33 c0		 xor	 eax, eax
  00059	66 89 04 7e	 mov	 WORD PTR [esi+edi*2], ax
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi

; 2262 : 		}

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 2238 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 2e		 je	 SHORT $LN4@Inside
  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	83 f8 08	 cmp	 eax, 8
  00011	72 04		 jb	 SHORT $LN16@Inside
  00013	8b 31		 mov	 esi, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN17@Inside
$LN16@Inside:
  00017	8b f1		 mov	 esi, ecx
$LN17@Inside:
  00019	3b d6		 cmp	 edx, esi
  0001b	72 1c		 jb	 SHORT $LN4@Inside
  0001d	83 f8 08	 cmp	 eax, 8
  00020	72 04		 jb	 SHORT $LN30@Inside
  00022	8b 31		 mov	 esi, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN31@Inside
$LN30@Inside:
  00026	8b f1		 mov	 esi, ecx
$LN31@Inside:
  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  0002e	3b c2		 cmp	 eax, edx
  00030	76 07		 jbe	 SHORT $LN4@Inside

; 2242 : 		else
; 2243 : 			return (true);

  00032	b0 01		 mov	 al, 1
  00034	5e		 pop	 esi

; 2244 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  00039	32 c0		 xor	 al, al
  0003b	5e		 pop	 esi

; 2244 : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2225 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0000d	77 5b		 ja	 SHORT $LN89@Grow

; 2227 : 		if (this->_Myres() < _Newsize)

  0000f	39 71 14	 cmp	 DWORD PTR [ecx+20], esi
  00012	73 13		 jae	 SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00014	ff 71 10	 push	 DWORD PTR [ecx+16]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0001d	85 f6		 test	 esi, esi
  0001f	5e		 pop	 esi
  00020	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00027	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  0002b	74 1f		 je	 SHORT $LN5@Grow
  0002d	83 fe 08	 cmp	 esi, 8
  00030	73 1a		 jae	 SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  00032	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00035	3b f0		 cmp	 esi, eax
  00037	0f 42 c6	 cmovb	 eax, esi
  0003a	50		 push	 eax
  0003b	6a 01		 push	 1
  0003d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  00042	85 f6		 test	 esi, esi
  00044	5e		 pop	 esi
  00045	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  0004c	85 f6		 test	 esi, esi
  0004e	75 12		 jne	 SHORT $LN88@Grow

; 2233 : 			_Eos(0);	// new size is zero, just null terminate

  00050	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00054	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00057	72 02		 jb	 SHORT $LN80@Grow
  00059	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN80@Grow:
  0005b	33 c0		 xor	 eax, eax
  0005d	85 f6		 test	 esi, esi
  0005f	66 89 01	 mov	 WORD PTR [ecx], ax
$LN88@Grow:
  00062	0f 95 c0	 setne	 al
  00065	5e		 pop	 esi

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN89@Grow:

; 2226 : 			_Xlen();	// result too long

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0006f	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN91@Grow:
$LN87@Grow:
  00074	cc		 int	 3
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00003	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00007	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0000a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000d	72 0c		 jb	 SHORT $LN11@Eos
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	33 c9		 xor	 ecx, ecx
  00013	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx

; 2220 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

$LN11@Eos:
  0001b	33 c0		 xor	 eax, eax
  0001d	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 2220 : 		}

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$1$ = -24						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f8		 mov	 edi, eax
  00035	83 cf 07	 or	 edi, 7

; 2184 : 		if (max_size() < _Newres)

  00038	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  0003e	76 04		 jbe	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  00040	8b f8		 mov	 edi, eax
  00042	eb 27		 jmp	 SHORT $LN108@Copy
$LN2@Copy:

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00044	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00047	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0004c	f7 e7		 mul	 edi
  0004e	8b cb		 mov	 ecx, ebx
  00050	d1 e9		 shr	 ecx, 1
  00052	d1 ea		 shr	 edx, 1
  00054	3b ca		 cmp	 ecx, edx
  00056	76 13		 jbe	 SHORT $LN108@Copy

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 2189 : 			_Newres = this->_Myres()

  0005d	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  00060	2b c1		 sub	 eax, ecx
  00062	3b d8		 cmp	 ebx, eax
  00064	76 05		 jbe	 SHORT $LN108@Copy

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()

  00066	bf fe ff ff 7f	 mov	 edi, 2147483646		; 7ffffffeH
$LN108@Copy:

; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  0006b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00075	50		 push	 eax
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  0007d	8b d0		 mov	 edx, eax
  0007f	eb 29		 jmp	 SHORT $LN429@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00081	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax
  0008a	40		 inc	 eax
  0008b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0008e	50		 push	 eax
  0008f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00093	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00098	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  0009b	b8 00 00 00 00	 mov	 eax, $LN426@Copy
  000a0	c3		 ret	 0
$LN426@Copy:
  000a1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000a4	8b 7d 08	 mov	 edi, DWORD PTR __Newres$[ebp]
  000a7	8b 55 e8	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN429@Copy:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

  000aa	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000ad	89 55 e8	 mov	 DWORD PTR __Ptr$1$[ebp], edx
  000b0	85 db		 test	 ebx, ebx
  000b2	74 1e		 je	 SHORT $LN260@Copy

; 2208 : 			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),

  000b4	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000b8	72 04		 jb	 SHORT $LN251@Copy
  000ba	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bc	eb 02		 jmp	 SHORT $LN252@Copy
$LN251@Copy:
  000be	8b ce		 mov	 ecx, esi
$LN252@Copy:
  000c0	85 db		 test	 ebx, ebx
  000c2	74 0e		 je	 SHORT $LN260@Copy
  000c4	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000c7	50		 push	 eax
  000c8	51		 push	 ecx
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 _memcpy
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN260@Copy:

; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);

  000d2	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d5	83 f8 08	 cmp	 eax, 8
  000d8	72 0b		 jb	 SHORT $LN266@Copy
  000da	40		 inc	 eax
  000db	8b ce		 mov	 ecx, esi
  000dd	50		 push	 eax
  000de	ff 36		 push	 DWORD PTR [esi]
  000e0	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN266@Copy:
  000e5	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  000ec	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000f0	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000f7	72 04		 jb	 SHORT $LN356@Copy
  000f9	8b 06		 mov	 eax, DWORD PTR [esi]
  000fb	eb 02		 jmp	 SHORT $LN357@Copy
$LN356@Copy:
  000fd	8b c6		 mov	 eax, esi
$LN357@Copy:
  000ff	33 c9		 xor	 ecx, ecx
  00101	66 89 08	 mov	 WORD PTR [eax], cx

; 2211 : 		this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);

  00104	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  00107	89 06		 mov	 DWORD PTR [esi], eax

; 2212 : 		this->_Myres() = _Newres;

  00109	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 2213 : 		_Eos(_Oldlen);

  0010c	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00110	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00113	72 02		 jb	 SHORT $LN420@Copy
  00115	8b f0		 mov	 esi, eax
$LN420@Copy:
  00117	33 c0		 xor	 eax, eax
  00119	66 89 04 5e	 mov	 WORD PTR [esi+ebx*2], ax

; 2214 : 		}

  0011d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00120	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00127	59		 pop	 ecx
  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00131	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00134	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00137	83 f8 08	 cmp	 eax, 8
  0013a	72 0b		 jb	 SHORT $LN144@Copy
  0013c	40		 inc	 eax
  0013d	8b ce		 mov	 ecx, esi
  0013f	50		 push	 eax
  00140	ff 36		 push	 DWORD PTR [esi]
  00142	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN144@Copy:
  00147	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0014e	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00152	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00159	72 02		 jb	 SHORT $LN235@Copy
  0015b	8b 36		 mov	 esi, DWORD PTR [esi]
$LN235@Copy:
  0015d	33 c0		 xor	 eax, eax

; 2203 : 			_RERAISE;

  0015f	50		 push	 eax
  00160	50		 push	 eax
  00161	66 89 06	 mov	 WORD PTR [esi], ax
  00164	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN430@Copy:
$LN428@Copy:
  00169	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare, COMDAT
; _this$ = ecx

; 2144 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (_Traits_compare(this->_Myptr(), this->_Mysize(),

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	66 83 3e 00	 cmp	 WORD PTR [esi], 0
  0000b	75 04		 jne	 SHORT $LN5@compare
  0000d	33 d2		 xor	 edx, edx
  0000f	eb 16		 jmp	 SHORT $LN6@compare
$LN5@compare:
  00011	8b d6		 mov	 edx, esi
  00013	57		 push	 edi
  00014	8d 7a 02	 lea	 edi, DWORD PTR [edx+2]
$LL30@compare:
  00017	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001a	83 c2 02	 add	 edx, 2
  0001d	66 85 c0	 test	 ax, ax
  00020	75 f5		 jne	 SHORT $LL30@compare
  00022	2b d7		 sub	 edx, edi
  00024	d1 fa		 sar	 edx, 1
  00026	5f		 pop	 edi
$LN6@compare:
  00027	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  0002b	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  0002e	72 02		 jb	 SHORT $LN26@compare
  00030	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@compare:
  00032	52		 push	 edx
  00033	56		 push	 esi
  00034	ff 30		 push	 DWORD PTR [eax]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?_Traits_compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAHQB_WI0I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Traits_compare
  0003c	83 c4 10	 add	 esp, 16			; 00000010H
  0003f	5e		 pop	 esi

; 2147 : 			_Ptr, _Traits::length(_Ptr)));
; 2148 : 		}

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]

; 2113 : 		if (_Size <= _Max_effective_size)

  00009	39 45 0c	 cmp	 DWORD PTR __Size$[ebp], eax
  0000c	0f 46 45 0c	 cmovbe	 eax, DWORD PTR __Size$[ebp]

; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Traits_compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAHQB_WI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
?_Traits_compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAHQB_WI0I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Traits_compare, COMDAT

; 2094 : 		{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2095 : 		const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Left_size$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 14	 mov	 edi, DWORD PTR __Right_size$[ebp]
  0000b	3b df		 cmp	 ebx, edi
  0000d	8b cf		 mov	 ecx, edi
  0000f	0f 42 cb	 cmovb	 ecx, ebx

; 2096 : 		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  00012	85 c9		 test	 ecx, ecx
  00014	75 04		 jne	 SHORT $LN8@Traits_com
  00016	33 c0		 xor	 eax, eax
  00018	eb 21		 jmp	 SHORT $LN10@Traits_com
$LN8@Traits_com:
  0001a	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0001d	56		 push	 esi
  0001e	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]
  00021	85 c9		 test	 ecx, ecx
  00023	74 13		 je	 SHORT $LN12@Traits_com
$LL13@Traits_com:
  00025	66 8b 06	 mov	 ax, WORD PTR [esi]
  00028	66 3b 02	 cmp	 ax, WORD PTR [edx]
  0002b	75 1d		 jne	 SHORT $LN17@Traits_com
  0002d	83 c6 02	 add	 esi, 2
  00030	83 c2 02	 add	 edx, 2
  00033	83 e9 01	 sub	 ecx, 1
  00036	75 ed		 jne	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00038	33 c0		 xor	 eax, eax
$LN21@Traits_com:
  0003a	5e		 pop	 esi
$LN10@Traits_com:

; 2097 : 
; 2098 : 		if (_Ans != 0)

  0003b	85 c0		 test	 eax, eax
  0003d	75 1d		 jne	 SHORT $LN4@Traits_com

; 2099 : 			return (_Ans);
; 2100 : 
; 2101 : 		if (_Left_size < _Right_size)

  0003f	3b fb		 cmp	 edi, ebx
  00041	76 15		 jbe	 SHORT $LN22@Traits_com

; 2102 : 			return (-1);

  00043	5f		 pop	 edi
  00044	83 c8 ff	 or	 eax, -1
  00047	5b		 pop	 ebx

; 2105 : 			return (1);
; 2106 : 
; 2107 : 		return (0);
; 2108 : 		}

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN17@Traits_com:

; 2096 : 		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  0004a	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0004d	66 3b 02	 cmp	 ax, WORD PTR [edx]
  00050	1b c0		 sbb	 eax, eax
  00052	83 e0 fe	 and	 eax, -2			; fffffffeH
  00055	40		 inc	 eax
  00056	eb e2		 jmp	 SHORT $LN21@Traits_com
$LN22@Traits_com:

; 2103 : 
; 2104 : 		if (_Left_size > _Right_size)

  00058	1b c0		 sbb	 eax, eax
  0005a	f7 d8		 neg	 eax
$LN4@Traits_com:
  0005c	5f		 pop	 edi
  0005d	5b		 pop	 ebx

; 2105 : 			return (1);
; 2106 : 
; 2107 : 		return (0);
; 2108 : 		}

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?_Traits_compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAHQB_WI0I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Traits_compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty, COMDAT
; _this$ = ecx

; 1803 : 		{	// test if sequence is empty

  00000	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00004	0f 94 c0	 sete	 al

; 1804 : 		return (this->_Mysize() == 0);
; 1805 : 		}

  00007	c3		 ret	 0
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 1772 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 1760 : 		return (this->_Mysize());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1761 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1743 : 		return (this->_Myptr());

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN13@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1744 : 		}

  00008	c3		 ret	 0

; 1743 : 		return (this->_Myptr());

$LN13@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1744 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1348 : 		_Check_offset(_Off);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	0f 82 88 00 00
	00		 jb	 $LN95@erase

; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  00015	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00018	8b c7		 mov	 eax, edi
  0001a	2b c1		 sub	 eax, ecx
  0001c	3b c2		 cmp	 eax, edx
  0001e	77 27		 ja	 SHORT $LN2@erase

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

  00020	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00023	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00027	72 10		 jb	 SHORT $LN41@erase
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	33 d2		 xor	 edx, edx
  0002d	5f		 pop	 edi
  0002e	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1357 : 			}
; 1358 : 		return (*this);

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi

; 1359 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

$LN41@erase:
  00039	8b c6		 mov	 eax, esi
  0003b	33 d2		 xor	 edx, edx
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1359 : 		}

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@erase:

; 1351 : 		else if (0 < _Count)

  00047	85 d2		 test	 edx, edx
  00049	74 4a		 je	 SHORT $LN92@erase

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;

  0004b	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0004f	72 04		 jb	 SHORT $LN58@erase
  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	eb 02		 jmp	 SHORT $LN59@erase
$LN58@erase:
  00055	8b c6		 mov	 eax, esi
$LN59@erase:

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  00057	2b fa		 sub	 edi, edx
  00059	53		 push	 ebx
  0005a	8d 1c 48	 lea	 ebx, DWORD PTR [eax+ecx*2]

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  0005d	8b c7		 mov	 eax, edi
  0005f	2b c1		 sub	 eax, ecx
  00061	74 10		 je	 SHORT $LN74@erase
  00063	03 c0		 add	 eax, eax
  00065	50		 push	 eax
  00066	8d 04 53	 lea	 eax, DWORD PTR [ebx+edx*2]
  00069	50		 push	 eax
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _memmove
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN74@erase:

; 1356 : 			_Eos(_Newsize);

  00073	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00077	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0007a	5b		 pop	 ebx
  0007b	72 10		 jb	 SHORT $LN87@erase
  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	33 c9		 xor	 ecx, ecx
  00081	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1357 : 			}
; 1358 : 		return (*this);

  00085	8b c6		 mov	 eax, esi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi

; 1359 : 		}

  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8

; 1356 : 			_Eos(_Newsize);

$LN87@erase:
  0008d	8b c6		 mov	 eax, esi
  0008f	33 c9		 xor	 ecx, ecx
  00091	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN92@erase:

; 1357 : 			}
; 1358 : 		return (*this);

  00095	5f		 pop	 edi
  00096	8b c6		 mov	 eax, esi
  00098	5e		 pop	 esi

; 1359 : 		}

  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN95@erase:

; 1348 : 		_Check_offset(_Off);

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  000a2	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN97@erase:
$LN94@erase:
  000a7	cc		 int	 3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 1340 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 : 		_Check_offset(_Off);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	72 29		 jb	 SHORT $LN37@erase

; 1342 : 		_Eos(_Off);

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000e	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00012	72 10		 jb	 SHORT $LN29@erase
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	56		 push	 esi
  00017	33 f6		 xor	 esi, esi
  00019	66 89 34 42	 mov	 WORD PTR [edx+eax*2], si

; 1343 : 		return (*this);

  0001d	8b c1		 mov	 eax, ecx
  0001f	5e		 pop	 esi

; 1344 : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4

; 1342 : 		_Eos(_Off);

$LN29@erase:
  00024	8b d1		 mov	 edx, ecx
  00026	56		 push	 esi
  00027	33 f6		 xor	 esi, esi
  00029	66 89 34 42	 mov	 WORD PTR [edx+eax*2], si

; 1343 : 		return (*this);

  0002d	8b c1		 mov	 eax, ecx
  0002f	5e		 pop	 esi

; 1344 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN37@erase:

; 1341 : 		_Check_offset(_Off);

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00039	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN39@erase:
$LN36@erase:
  0003e	cc		 int	 3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1180 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  0000d	75 0e		 jne	 SHORT $LN5@assign
  0000f	33 c0		 xor	 eax, eax
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00018	5e		 pop	 esi

; 1183 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

$LN5@assign:
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL7@assign:
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	83 c0 02	 add	 eax, 2
  00029	66 85 c9	 test	 cx, cx
  0002c	75 f5		 jne	 SHORT $LL7@assign
  0002e	2b c7		 sub	 eax, edi
  00030	8b ce		 mov	 ecx, esi
  00032	5f		 pop	 edi
  00033	d1 f8		 sar	 eax, 1
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0003c	5e		 pop	 esi

; 1183 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 48		 je	 SHORT $LN2@assign
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 08	 cmp	 ecx, 8
  00014	72 04		 jb	 SHORT $LN20@assign
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN21@assign
$LN20@assign:
  0001a	8b c6		 mov	 eax, esi
$LN21@assign:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 36		 jb	 SHORT $LN2@assign
  00020	83 f9 08	 cmp	 ecx, 8
  00023	72 04		 jb	 SHORT $LN34@assign
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN35@assign
$LN34@assign:
  00029	8b d6		 mov	 edx, esi
$LN35@assign:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00031	3b c3		 cmp	 eax, ebx
  00033	76 21		 jbe	 SHORT $LN2@assign

; 1168 : 			return (assign(*this,

  00035	83 f9 08	 cmp	 ecx, 8
  00038	72 04		 jb	 SHORT $LN57@assign
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	eb 02		 jmp	 SHORT $LN58@assign
$LN57@assign:
  0003e	8b c6		 mov	 eax, esi
$LN58@assign:
  00040	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00043	2b d8		 sub	 ebx, eax
  00045	8b ce		 mov	 ecx, esi
  00047	d1 fb		 sar	 ebx, 1
  00049	53		 push	 ebx
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx

; 1177 : 		}

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN2@assign:
  00056	57		 push	 edi

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  00057	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	0f 87 88 00 00
	00		 ja	 $LN189@assign
  00066	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00069	73 19		 jae	 SHORT $LN63@assign
  0006b	ff 76 10	 push	 DWORD PTR [esi+16]
  0006e	8b ce		 mov	 ecx, esi
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  00076	85 ff		 test	 edi, edi
  00078	74 6b		 je	 SHORT $LN183@assign
$LN188@assign:

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

  0007a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0007e	72 2f		 jb	 SHORT $LN158@assign
  00080	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00082	eb 2d		 jmp	 SHORT $LN159@assign

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN63@assign:
  00084	85 ff		 test	 edi, edi
  00086	75 f2		 jne	 SHORT $LN188@assign
  00088	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0008c	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0008f	72 10		 jb	 SHORT $LN140@assign
  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	33 c9		 xor	 ecx, ecx
  00095	5f		 pop	 edi
  00096	66 89 08	 mov	 WORD PTR [eax], cx

; 1175 : 			}
; 1176 : 		return (*this);

  00099	8b c6		 mov	 eax, esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 1177 : 		}

  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN140@assign:
  000a1	8b c6		 mov	 eax, esi
  000a3	33 c9		 xor	 ecx, ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	66 89 08	 mov	 WORD PTR [eax], cx

; 1177 : 		}

  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

$LN158@assign:
  000af	8b ce		 mov	 ecx, esi
$LN159@assign:
  000b1	85 ff		 test	 edi, edi
  000b3	74 0e		 je	 SHORT $LN165@assign
  000b5	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  000b8	50		 push	 eax
  000b9	53		 push	 ebx
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _memcpy
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN165@assign:

; 1174 : 			_Eos(_Count);

  000c3	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000c7	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000ca	72 11		 jb	 SHORT $LN178@assign
  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	33 c9		 xor	 ecx, ecx
  000d0	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1175 : 			}
; 1176 : 		return (*this);

  000d4	8b c6		 mov	 eax, esi
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 1177 : 		}

  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8

; 1174 : 			_Eos(_Count);

$LN178@assign:
  000dd	8b c6		 mov	 eax, esi
  000df	33 c9		 xor	 ecx, ecx
  000e1	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN183@assign:

; 1175 : 			}
; 1176 : 		return (*this);

  000e5	5f		 pop	 edi
  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 1177 : 		}

  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
$LN189@assign:

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f3	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN191@assign:
$LN186@assign:
  000f8	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1150 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 e3 00 00
	00		 jb	 $LN210@assign

; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00019	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
  0001c	2b c1		 sub	 eax, ecx
  0001e	3b f8		 cmp	 edi, eax
  00020	0f 47 f8	 cmova	 edi, eax

; 1152 : 
; 1153 : 		if (this == &_Right)

  00023	3b f3		 cmp	 esi, ebx
  00025	75 33		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  00027	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  0002a	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0002d	0f 82 d3 00 00
	00		 jb	 $LN212@assign
  00033	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00036	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0003a	72 04		 jb	 SHORT $LN63@assign
  0003c	8b 16		 mov	 edx, DWORD PTR [esi]
  0003e	eb 02		 jmp	 SHORT $LN64@assign
$LN63@assign:
  00040	8b d6		 mov	 edx, esi
$LN64@assign:
  00042	33 ff		 xor	 edi, edi
  00044	51		 push	 ecx
  00045	57		 push	 edi
  00046	8b ce		 mov	 ecx, esi
  00048	66 89 3c 42	 mov	 WORD PTR [edx+eax*2], di
  0004c	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  00051	5f		 pop	 edi

; 1160 : 			}
; 1161 : 		return (*this);

  00052	8b c6		 mov	 eax, esi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 1162 : 		}

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
$LN2@assign:

; 1155 : 		else if (_Grow(_Count))

  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	0f 87 aa 00 00
	00		 ja	 $LN213@assign
  00066	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00069	73 24		 jae	 SHORT $LN72@assign
  0006b	ff 76 10	 push	 DWORD PTR [esi+16]
  0006e	8b ce		 mov	 ecx, esi
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00079	85 ff		 test	 edi, edi
  0007b	74 76		 je	 SHORT $LN205@assign
$LN209@assign:

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

  0007d	83 7b 14 08	 cmp	 DWORD PTR [ebx+20], 8
  00081	72 02		 jb	 SHORT $LN166@assign
  00083	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN166@assign:
  00085	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00089	72 2f		 jb	 SHORT $LN180@assign
  0008b	8b 16		 mov	 edx, DWORD PTR [esi]
  0008d	eb 2d		 jmp	 SHORT $LN181@assign

; 1155 : 		else if (_Grow(_Count))

$LN72@assign:
  0008f	85 ff		 test	 edi, edi
  00091	75 ea		 jne	 SHORT $LN209@assign
  00093	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00097	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0009a	72 10		 jb	 SHORT $LN149@assign
  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	33 c9		 xor	 ecx, ecx
  000a0	5f		 pop	 edi
  000a1	66 89 08	 mov	 WORD PTR [eax], cx

; 1160 : 			}
; 1161 : 		return (*this);

  000a4	8b c6		 mov	 eax, esi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 1162 : 		}

  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH

; 1155 : 		else if (_Grow(_Count))

$LN149@assign:
  000ac	8b c6		 mov	 eax, esi
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	66 89 08	 mov	 WORD PTR [eax], cx

; 1162 : 		}

  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

$LN180@assign:
  000ba	8b d6		 mov	 edx, esi
$LN181@assign:
  000bc	85 ff		 test	 edi, edi
  000be	74 11		 je	 SHORT $LN187@assign
  000c0	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  000c3	50		 push	 eax
  000c4	8d 04 4b	 lea	 eax, DWORD PTR [ebx+ecx*2]
  000c7	50		 push	 eax
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 _memcpy
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN187@assign:

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

  000d1	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000d5	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000d8	72 11		 jb	 SHORT $LN200@assign
  000da	8b 06		 mov	 eax, DWORD PTR [esi]
  000dc	33 c9		 xor	 ecx, ecx
  000de	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1160 : 			}
; 1161 : 		return (*this);

  000e2	8b c6		 mov	 eax, esi
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 1162 : 		}

  000e7	5d		 pop	 ebp
  000e8	c2 0c 00	 ret	 12			; 0000000cH

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

$LN200@assign:
  000eb	8b c6		 mov	 eax, esi
  000ed	33 c9		 xor	 ecx, ecx
  000ef	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN205@assign:

; 1160 : 			}
; 1161 : 		return (*this);

  000f3	5f		 pop	 edi
  000f4	8b c6		 mov	 eax, esi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 1162 : 		}

  000f8	5d		 pop	 ebp
  000f9	c2 0c 00	 ret	 12			; 0000000cH
$LN210@assign:

; 1150 : 		_Right._Check_offset(_Roff);

  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00101	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN214@assign:
$LN212@assign:

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0010b	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN215@assign:
$LN213@assign:

; 1155 : 		else if (_Grow(_Count))

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00115	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN216@assign:
$LN207@assign:
  0011a	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1143 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1144 : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1145 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1105 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  0000d	75 0e		 jne	 SHORT $LN5@append
  0000f	33 c0		 xor	 eax, eax
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00018	5e		 pop	 esi

; 1108 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

$LN5@append:
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL7@append:
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	83 c0 02	 add	 eax, 2
  00029	66 85 c9	 test	 cx, cx
  0002c	75 f5		 jne	 SHORT $LL7@append
  0002e	2b c7		 sub	 eax, edi
  00030	8b ce		 mov	 ecx, esi
  00032	5f		 pop	 edi
  00033	d1 f8		 sar	 eax, 1
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  0003c	5e		 pop	 esi

; 1108 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1087 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1088 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1089 : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 48		 je	 SHORT $LN2@append
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 08	 cmp	 ecx, 8
  00014	72 04		 jb	 SHORT $LN21@append
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN22@append
$LN21@append:
  0001a	8b c6		 mov	 eax, esi
$LN22@append:
  0001c	3b f8		 cmp	 edi, eax
  0001e	72 36		 jb	 SHORT $LN2@append
  00020	83 f9 08	 cmp	 ecx, 8
  00023	72 04		 jb	 SHORT $LN35@append
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN36@append
$LN35@append:
  00029	8b d6		 mov	 edx, esi
$LN36@append:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00031	3b c7		 cmp	 eax, edi
  00033	76 21		 jbe	 SHORT $LN2@append

; 1090 : 			return (append(*this,

  00035	83 f9 08	 cmp	 ecx, 8
  00038	72 04		 jb	 SHORT $LN58@append
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	eb 02		 jmp	 SHORT $LN59@append
$LN58@append:
  0003e	8b c6		 mov	 eax, esi
$LN59@append:
  00040	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00043	2b f8		 sub	 edi, eax
  00045	8b ce		 mov	 ecx, esi
  00047	d1 ff		 sar	 edi, 1
  00049	57		 push	 edi
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 1102 : 		}

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN2@append:

; 1091 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1092 : 		if (npos - this->_Mysize() <= _Count)

  00056	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00059	8b c2		 mov	 eax, edx
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005e	f7 d0		 not	 eax
  00060	3b c1		 cmp	 eax, ecx
  00062	0f 86 a7 00 00
	00		 jbe	 $LN219@append

; 1094 : 
; 1095 : 		const size_type _Num = this->_Mysize() + _Count;

  00068	53		 push	 ebx
  00069	8d 1c 0a	 lea	 ebx, DWORD PTR [edx+ecx]

; 1096 : 		if (0 < _Count && _Grow(_Num))

  0006c	85 c9		 test	 ecx, ecx
  0006e	0f 84 92 00 00
	00		 je	 $LN213@append
  00074	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  0007a	0f 87 99 00 00
	00		 ja	 $LN221@append
  00080	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00083	73 1a		 jae	 SHORT $LN85@append
  00085	52		 push	 edx
  00086	53		 push	 ebx
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0008e	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00091	85 db		 test	 ebx, ebx
  00093	74 71		 je	 SHORT $LN213@append
$LN218@append:

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

  00095	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00099	72 2f		 jb	 SHORT $LN179@append
  0009b	8b 16		 mov	 edx, DWORD PTR [esi]
  0009d	eb 2d		 jmp	 SHORT $LN180@append

; 1096 : 		if (0 < _Count && _Grow(_Num))

$LN85@append:
  0009f	85 db		 test	 ebx, ebx
  000a1	75 f2		 jne	 SHORT $LN218@append
  000a3	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000a6	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000aa	72 10		 jb	 SHORT $LN162@append
  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	33 c9		 xor	 ecx, ecx
  000b0	5b		 pop	 ebx
  000b1	5f		 pop	 edi
  000b2	66 89 08	 mov	 WORD PTR [eax], cx

; 1100 : 			}
; 1101 : 		return (*this);

  000b5	8b c6		 mov	 eax, esi
  000b7	5e		 pop	 esi

; 1102 : 		}

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8

; 1096 : 		if (0 < _Count && _Grow(_Num))

$LN162@append:
  000bc	8b c6		 mov	 eax, esi
  000be	33 c9		 xor	 ecx, ecx
  000c0	5b		 pop	 ebx
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	66 89 08	 mov	 WORD PTR [eax], cx

; 1102 : 		}

  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

$LN179@append:
  000ca	8b d6		 mov	 edx, esi
$LN180@append:
  000cc	85 c9		 test	 ecx, ecx
  000ce	74 14		 je	 SHORT $LN195@append
  000d0	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  000d3	50		 push	 eax
  000d4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d7	57		 push	 edi
  000d8	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _memcpy
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN195@append:

; 1099 : 			_Eos(_Num);

  000e4	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000e8	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000eb	72 11		 jb	 SHORT $LN208@append
  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	33 c9		 xor	 ecx, ecx
  000f1	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx

; 1100 : 			}
; 1101 : 		return (*this);

  000f5	8b c6		 mov	 eax, esi
  000f7	5b		 pop	 ebx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi

; 1102 : 		}

  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8

; 1099 : 			_Eos(_Num);

$LN208@append:
  000fe	8b c6		 mov	 eax, esi
  00100	33 c9		 xor	 ecx, ecx
  00102	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx
$LN213@append:

; 1100 : 			}
; 1101 : 		return (*this);

  00106	5b		 pop	 ebx
  00107	5f		 pop	 edi
  00108	8b c6		 mov	 eax, esi
  0010a	5e		 pop	 esi

; 1102 : 		}

  0010b	5d		 pop	 ebp
  0010c	c2 08 00	 ret	 8
$LN219@append:

; 1093 : 			_Xlen();	// result too long

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00114	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN222@append:
$LN221@append:

; 1096 : 		if (0 < _Count && _Grow(_Num))

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN223@append:
$LN216@append:
  00123	cc		 int	 3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1070 : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1071 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 d0 00 00
	00		 jb	 $LN203@append

; 1072 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1073 : 		if (npos - this->_Mysize() <= _Count)

  00019	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001c	2b c1		 sub	 eax, ecx
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00021	3b c8		 cmp	 ecx, eax
  00023	0f 47 c8	 cmova	 ecx, eax
  00026	8b c2		 mov	 eax, edx
  00028	f7 d0		 not	 eax
  0002a	89 4d 10	 mov	 DWORD PTR __Count$[ebp], ecx
  0002d	3b c1		 cmp	 eax, ecx
  0002f	0f 86 be 00 00
	00		 jbe	 $LN205@append

; 1075 : 
; 1076 : 		const size_type _Num = this->_Mysize() + _Count;

  00035	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1077 : 		if (0 < _Count && _Grow(_Num))

  00038	85 c9		 test	 ecx, ecx
  0003a	0f 84 a0 00 00
	00		 je	 $LN198@append
  00040	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00046	0f 87 b1 00 00
	00		 ja	 $LN206@append
  0004c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0004f	73 22		 jae	 SHORT $LN56@append
  00051	52		 push	 edx
  00052	57		 push	 edi
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005d	85 ff		 test	 edi, edi
  0005f	74 7f		 je	 SHORT $LN198@append
$LN202@append:

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

  00061	83 7b 14 08	 cmp	 DWORD PTR [ebx+20], 8
  00065	72 02		 jb	 SHORT $LN150@append
  00067	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN150@append:
  00069	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0006d	72 2f		 jb	 SHORT $LN164@append
  0006f	8b 16		 mov	 edx, DWORD PTR [esi]
  00071	eb 2d		 jmp	 SHORT $LN165@append

; 1077 : 		if (0 < _Count && _Grow(_Num))

$LN56@append:
  00073	85 ff		 test	 edi, edi
  00075	75 ea		 jne	 SHORT $LN202@append
  00077	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0007a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0007e	72 10		 jb	 SHORT $LN133@append
  00080	8b 06		 mov	 eax, DWORD PTR [esi]
  00082	33 c9		 xor	 ecx, ecx
  00084	5f		 pop	 edi
  00085	66 89 08	 mov	 WORD PTR [eax], cx

; 1082 : 			}
; 1083 : 		return (*this);

  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1084 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 0c 00	 ret	 12			; 0000000cH

; 1077 : 		if (0 < _Count && _Grow(_Num))

$LN133@append:
  00090	8b c6		 mov	 eax, esi
  00092	33 c9		 xor	 ecx, ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	66 89 08	 mov	 WORD PTR [eax], cx

; 1084 : 		}

  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

$LN164@append:
  0009e	8b d6		 mov	 edx, esi
$LN165@append:
  000a0	85 c9		 test	 ecx, ecx
  000a2	74 1a		 je	 SHORT $LN180@append
  000a4	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  000a7	50		 push	 eax
  000a8	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  000ab	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  000ae	50		 push	 eax
  000af	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000b2	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN180@append:

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

  000be	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  000c2	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c5	72 11		 jb	 SHORT $LN193@append
  000c7	8b 06		 mov	 eax, DWORD PTR [esi]
  000c9	33 c9		 xor	 ecx, ecx
  000cb	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx

; 1082 : 			}
; 1083 : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 1084 : 		}

  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

$LN193@append:
  000d8	8b c6		 mov	 eax, esi
  000da	33 c9		 xor	 ecx, ecx
  000dc	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN198@append:

; 1082 : 			}
; 1083 : 		return (*this);

  000e0	5f		 pop	 edi
  000e1	8b c6		 mov	 eax, esi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx

; 1084 : 		}

  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
$LN203@append:

; 1071 : 		_Right._Check_offset(_Roff);

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  000ee	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN207@append:
$LN205@append:

; 1074 : 			_Xlen();	// result too long

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f8	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN208@append:
$LN206@append:

; 1077 : 		if (0 < _Count && _Grow(_Num))

  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00102	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN209@append:
$LN200@append:
  00107	cc		 int	 3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 1039 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1040 : 		return (assign(_Ptr));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  0000d	75 0e		 jne	 SHORT $LN7@operator
  0000f	33 c0		 xor	 eax, eax
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00018	5e		 pop	 esi

; 1041 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4

; 1040 : 		return (assign(_Ptr));

$LN7@operator:
  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL9@operator:
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	83 c0 02	 add	 eax, 2
  00029	66 85 c9	 test	 cx, cx
  0002c	75 f5		 jne	 SHORT $LL9@operator
  0002e	2b c7		 sub	 eax, edi
  00030	8b ce		 mov	 ecx, esi
  00032	5f		 pop	 edi
  00033	d1 f8		 sar	 eax, 1
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0003c	5e		 pop	 esi

; 1041 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 1023 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1024 : 		if (this != &_Right)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b f0		 cmp	 esi, eax
  0000b	74 0a		 je	 SHORT $LN134@operator

; 1025 : 			{	// different, assign it
; 1026 : 			if (this->_Getal() != _Right._Getal()
; 1027 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1028 : 				{	// change allocator before copying
; 1029 : 				_Tidy(true);
; 1030 : 				this->_Copy_alloc(_Right._Getal());
; 1031 : 				}
; 1032 : 
; 1033 : 			assign(_Right);

  0000d	6a ff		 push	 -1
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
$LN134@operator:

; 1034 : 			}
; 1035 : 		return (*this);

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1036 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1016 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1017 : 		_Tidy(true);

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 08	 cmp	 eax, 8
  00009	72 09		 jb	 SHORT $LN6@basic_stri
  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN6@basic_stri:
  00014	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  0001b	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	72 09		 jb	 SHORT $LN96@basic_stri
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	33 c9		 xor	 ecx, ecx
  0002c	5e		 pop	 esi
  0002d	66 89 08	 mov	 WORD PTR [eax], cx

; 1018 : 		}

  00030	c3		 ret	 0

; 1017 : 		_Tidy(true);

$LN96@basic_stri:
  00031	33 c0		 xor	 eax, eax
  00033	66 89 06	 mov	 WORD PTR [esi], ax
  00036	5e		 pop	 esi

; 1018 : 		}

  00037	c3		 ret	 0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv, COMDAT
; _this$ = ecx

; 961  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0000e	73 17		 jae	 SHORT $LN2@Assign_rv

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	83 c0 01	 add	 eax, 1
  00016	74 1d		 je	 SHORT $LN3@Assign_rv
  00018	03 c0		 add	 eax, eax
  0001a	50		 push	 eax
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 964  : 				_Right._Mysize() + 1);
; 965  : 		else

  00025	eb 0e		 jmp	 SHORT $LN3@Assign_rv
$LN2@Assign_rv:

; 966  : 			{	// copy pointer
; 967  : 			this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);

  00027	85 ff		 test	 edi, edi
  00029	74 04		 je	 SHORT $LN86@Assign_rv
  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
  0002d	89 07		 mov	 DWORD PTR [edi], eax
$LN86@Assign_rv:

; 968  : 			_Right._Bx()._Ptr = pointer();

  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@Assign_rv:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

  00035	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00038	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

  0003b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003e	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 972  : 		_Right._Tidy();

  00041	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00048	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0004c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00053	72 0d		 jb	 SHORT $LN231@Assign_rv
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	33 c9		 xor	 ecx, ecx
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	66 89 08	 mov	 WORD PTR [eax], cx

; 973  : 		}

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4

; 972  : 		_Right._Tidy();

$LN231@Assign_rv:
  00062	33 c0		 xor	 eax, eax
  00064	5f		 pop	 edi
  00065	66 89 06	 mov	 WORD PTR [esi], ax
  00068	5e		 pop	 esi

; 973  : 		}

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 911  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 912  : 		_Tidy();
; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	33 c0		 xor	 eax, eax
  0000b	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00019	66 89 06	 mov	 WORD PTR [esi], ax
  0001c	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv

; 914  : 		}

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 836  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00019	66 89 06	 mov	 WORD PTR [esi], ax
  0001c	66 39 02	 cmp	 WORD PTR [edx], ax
  0001f	75 12		 jne	 SHORT $LN113@basic_stri
  00021	33 c9		 xor	 ecx, ecx
  00023	51		 push	 ecx
  00024	52		 push	 edx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 839  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

$LN113@basic_stri:
  00033	8b ca		 mov	 ecx, edx
  00035	57		 push	 edi
  00036	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL115@basic_stri:
  00040	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00043	83 c1 02	 add	 ecx, 2
  00046	66 85 c0	 test	 ax, ax
  00049	75 f5		 jne	 SHORT $LL115@basic_stri
  0004b	2b cf		 sub	 ecx, edi
  0004d	d1 f9		 sar	 ecx, 1
  0004f	5f		 pop	 edi
  00050	51		 push	 ecx
  00051	52		 push	 edx
  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 839  : 		}

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 822  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 823  : 		_Tidy();
; 824  : 		assign(_Ptr, _Count);

  00004	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	33 c0		 xor	 eax, eax
  0000b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000e	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00015	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 825  : 		}

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 795  : 		_Tidy();

  00000	33 c0		 xor	 eax, eax
  00002	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
  00009	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00010	66 89 01	 mov	 WORD PTR [ecx], ax

; 796  : 		}

  00013	8b c1		 mov	 eax, ecx
  00015	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  : 		_Tidy();

  00006	33 c0		 xor	 eax, eax

; 782  : 		assign(_Right, 0, npos);

  00008	6a ff		 push	 -1
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000e	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00015	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001c	66 89 06	 mov	 WORD PTR [esi], ax
  0001f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 783  : 		}

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres, COMDAT
; _this$ = ecx

; 734  : 		return (_Get_data()._Myres);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 735  : 		}

  00003	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 729  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 730  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 724  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 725  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx, COMDAT
; _this$ = ecx

; 714  : 		return (_Get_data()._Bx);

  00000	8b c1		 mov	 eax, ecx

; 715  : 		}

  00002	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 707  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 708  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 702  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 703  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 697  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 698  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 692  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 693  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Copy_alloc, COMDAT
; _this$ = ecx

; 602  : 		_Pocca(_Getal(), _Al);
; 603  : 		}

  00000	c2 04 00	 ret	 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 588  : 		: _Mypair(_Zero_then_variadic_args_t())

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 590  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 583  : 		return (_Get_data()._Myptr());

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 584  : 		}

  00008	c3		 ret	 0

; 583  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 584  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 578  : 		return (_Get_data()._Myptr());

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 579  : 		}

  00008	c3		 ret	 0

; 578  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 579  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 534  : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 499  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 1009 : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0000e	77 30		 ja	 SHORT $LN16@deallocate
  00010	03 c0		 add	 eax, eax
  00012	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00017	72 1a		 jb	 SHORT $LN7@deallocate
  00019	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001c	75 27		 jne	 SHORT $LN18@deallocate
  0001e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00021	3b c1		 cmp	 eax, ecx
  00023	73 25		 jae	 SHORT $LN19@deallocate
  00025	2b c8		 sub	 ecx, eax
  00027	83 f9 04	 cmp	 ecx, 4
  0002a	72 23		 jb	 SHORT $LN20@deallocate
  0002c	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0002f	77 23		 ja	 SHORT $LN21@deallocate
  00031	8b c8		 mov	 ecx, eax
$LN7@deallocate:
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4

; 988  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN16@deallocate:

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:
  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:
  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  00059	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		}

  00003	5d		 pop	 ebp

; 976  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 947  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 870  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 750  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00013	77 3b		 ja	 SHORT $LN14@allocate
  00015	03 c0		 add	 eax, eax
  00017	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001c	72 23		 jb	 SHORT $LN6@allocate
  0001e	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00021	3b c8		 cmp	 ecx, eax
  00023	76 30		 jbe	 SHORT $LN16@allocate
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002b	8b c8		 mov	 ecx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	85 c9		 test	 ecx, ecx
  00032	74 26		 je	 SHORT $LN17@allocate
  00034	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00037	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0003a	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	85 c0		 test	 eax, eax
  0004c	75 bc		 jne	 SHORT $LN12@allocate
  0004e	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:
  00050	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:
  00055	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:
  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:
  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00064	cc		 int	 3
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0000e	77 30		 ja	 SHORT $LN13@deallocate
  00010	03 c0		 add	 eax, eax
  00012	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00017	72 1a		 jb	 SHORT $LN5@deallocate
  00019	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001c	75 27		 jne	 SHORT $LN15@deallocate
  0001e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00021	3b c1		 cmp	 eax, ecx
  00023	73 25		 jae	 SHORT $LN16@deallocate
  00025	2b c8		 sub	 ecx, eax
  00027	83 f9 04	 cmp	 ecx, 4
  0002a	72 23		 jb	 SHORT $LN17@deallocate
  0002c	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0002f	77 23		 ja	 SHORT $LN18@deallocate
  00031	8b c8		 mov	 ecx, eax
$LN5@deallocate:
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4

; 721  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00040	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:
  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:
  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:
  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  00059	cc		 int	 3
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?hex@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?hex@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::hex, COMDAT

; 238  : 	{	// set basefield to hex

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 239  : 	_Iosbase.setf(ios_base::hex, ios_base::basefield);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00006	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00009	81 e1 ff f9 ff
	ff		 and	 ecx, -1537		; fffff9ffH
  0000f	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 240  : 	return (_Iosbase);
; 241  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?hex@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::hex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?dec@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?dec@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::dec, COMDAT

; 220  : 	{	// set basefield to dec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 221  : 	_Iosbase.setf(ios_base::dec, ios_base::basefield);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00006	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00009	81 e1 ff f3 ff
	ff		 and	 ecx, -3073		; fffff3ffH
  0000f	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  00015	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 222  : 	return (_Iosbase);
; 223  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?dec@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::dec
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gios_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN7@scalar
  00041	6a 38		 push	 56			; 00000038H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Gios_base@std@@UAEPAXI@Z$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_Gios_base@std@@UAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 538  : 		{	// initialize a new ios_base

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@ios_base@std@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 539  : 		_Ploc = 0;
; 540  : 		_Stdstr = 0;
; 541  : 		_Except = goodbit;
; 542  : 		_Fmtfl = (fmtflags)(skipws | dec);
; 543  : 		_Prec = 6;
; 544  : 		_Wide = 0;
; 545  : 		_Arr = 0;
; 546  : 		_Calls = 0;
; 547  : 		clear(goodbit);

  00026	6a 00		 push	 0
  00028	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0002f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00036	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003d	c7 46 14 01 02
	00 00		 mov	 DWORD PTR [esi+20], 513	; 00000201H
  00044	c7 46 18 06 00
	00 00		 mov	 DWORD PTR [esi+24], 6
  0004b	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00052	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00059	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00060	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00067	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0006e	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH@Z ; std::ios_base::clear

; 548  : 		_Ploc = new locale;

  00073	6a 08		 push	 8
  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	8b f8		 mov	 edi, eax
  0007c	83 c4 04	 add	 esp, 4
  0007f	85 ff		 test	 edi, edi
  00081	74 28		 je	 SHORT $LN3@Init
  00083	6a 01		 push	 1
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00091	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00094	83 c4 04	 add	 esp, 4
  00097	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 549  : 		}

  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN3@Init:

; 548  : 		_Ploc = new locale;

  000ab	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 549  : 		}

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Init@ios_base@std@@IAEXXZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?_Init@ios_base@std@@IAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@ios_base@std@@IAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 534  : 		{	// default constructor

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@

; 535  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 523  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 524  : 		_Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00029	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0002e	83 c4 04	 add	 esp, 4

; 525  : 		}

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 434  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 435  : 		return (*_Ploc);

  00024	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	ff 52 04	 call	 DWORD PTR [edx+4]
  00043	8b c6		 mov	 eax, esi

; 436  : 		}

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 427  : 		{	// set width to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 		streamsize _Oldwidth = _Wide;

  00003	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00006	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00009	56		 push	 esi

; 429  : 		_Wide = _Newwidth;

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newwidth$[ebp]
  0000d	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR __Newwidth$[ebp+4]
  00013	89 71 24	 mov	 DWORD PTR [ecx+36], esi
  00016	5e		 pop	 esi

; 430  : 		return (_Oldwidth);
; 431  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 423  : 		return (_Wide);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 424  : 		}

  00006	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 411  : 		return (_Prec);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]

; 412  : 		}

  00006	c3		 ret	 0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT
__Newfmtflags$ = 8					; size = 4
__Mask$ = 12						; size = 4
?setf@ios_base@std@@QAEHHH@Z PROC			; std::ios_base::setf, COMDAT
; _this$ = ecx

; 397  : 		{	// merge in format flags argument under mask argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 398  : 		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
; 399  : 		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Newfmtflags$[ebp]
  00006	23 55 0c	 and	 edx, DWORD PTR __Mask$[ebp]
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Mask$[ebp]
  0000e	8b d9		 mov	 ebx, ecx
  00010	f7 d7		 not	 edi
  00012	0f b7 ca	 movzx	 ecx, dx
  00015	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00018	23 f8		 and	 edi, eax
  0001a	0b f9		 or	 edi, ecx
  0001c	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx

; 400  : 			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
; 401  : 		return (_Oldfmtflags);
; 402  : 		}

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?setf@ios_base@std@@QAEHHH@Z ENDP			; std::ios_base::setf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 378  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 379  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 338  : 		{	// test if no state bits are set

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	0f 94 c0	 sete	 al

; 339  : 		return (rdstate() == goodbit);
; 340  : 		}

  00007	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 315  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 316  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 20
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 302  : 		{	// set state to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 303  : 		clear(_State, false);

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	83 e0 17	 and	 eax, 23			; 00000017H
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	23 c8		 and	 ecx, eax
  00014	74 22		 je	 SHORT $LN11@clear
  00016	f6 c1 04	 test	 cl, 4
  00019	75 23		 jne	 SHORT $LN52@clear
  0001b	f6 c1 02	 test	 cl, 2
  0001e	74 0c		 je	 SHORT $LN10@clear
  00020	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  0002a	eb 1c		 jmp	 SHORT $LN51@clear
$LN10@clear:
  0002c	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  00036	eb 10		 jmp	 SHORT $LN51@clear
$LN11@clear:

; 304  : 		}

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN52@clear:

; 303  : 		clear(_State, false);

  0003e	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN51@clear:
  00048	50		 push	 eax
  00049	6a 01		 push	 1
  0004b	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  0004e	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00053	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00058	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  0005b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN54@clear:
$LN50@clear:
  00068	cc		 int	 3
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -20						; size = 20
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 287  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 		_Mystate = (iostate)(_State & _Statmask);

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	83 e0 17	 and	 eax, 23			; 00000017H
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 289  : 		if ((_Mystate & _Except) == 0)

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	23 c8		 and	 ecx, eax
  00014	74 28		 je	 SHORT $LN9@clear

; 290  : 			;
; 291  : 		else if (_Reraise)

  00016	80 7d 0c 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0001a	75 28		 jne	 SHORT $LN49@clear

; 293  : 		else if (_Mystate & _Except & badbit)

  0001c	f6 c1 04	 test	 cl, 4
  0001f	75 2c		 jne	 SHORT $LN51@clear

; 295  : 		else if (_Mystate & _Except & failbit)

  00021	f6 c1 02	 test	 cl, 2
  00024	74 0c		 je	 SHORT $LN8@clear

; 296  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  00026	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  00030	eb 25		 jmp	 SHORT $LN48@clear
$LN8@clear:

; 297  : 		else
; 298  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

  00032	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  0003c	eb 19		 jmp	 SHORT $LN48@clear
$LN9@clear:

; 299  : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN49@clear:

; 292  : 			_RERAISE;

  00044	6a 00		 push	 0
  00046	6a 00		 push	 0
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN52@clear:
$LN51@clear:

; 294  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  0004d	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
$LN48@clear:
  00057	50		 push	 eax
  00058	6a 01		 push	 1
  0005a	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  0005d	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  00062	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00067	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  0006a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ??_7failure@ios_base@std@@6B@
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@clear:
$LN47@clear:
  00077	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00039	8b c7		 mov	 eax, edi
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 237  : 			: system_error(_Errcode, _Message)

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00007	56		 push	 esi
  00008	ff 75 08	 push	 DWORD PTR __Message$[ebp]

; 238  : 			{	// construct with message

  0000b	8b f1		 mov	 esi, ecx
  0000d	ff 70 04	 push	 DWORD PTR [eax+4]
  00010	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00013	ff 30		 push	 DWORD PTR [eax]
  00015	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ
_TEXT	SEGMENT
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ PROC ; std::_Immortalize<std::_Iostream_error_category>, COMDAT

; 698  : 	/* MAGIC */ static _Immortalizer<_Ty> _Static;

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0000c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00014	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0001a	7f 06		 jg	 SHORT $LN22@Immortaliz
$LN20@Immortaliz:

; 699  : 	return (*reinterpret_cast<_Ty *>(&_Static._Storage));

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static

; 700  : 	}

  00021	c3		 ret	 0
$LN22@Immortaliz:

; 698  : 	/* MAGIC */ static _Immortalizer<_Ty> _Static;

  00022	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00027	e8 00 00 00 00	 call	 __Init_thread_header
  0002c	83 c4 04	 add	 esp, 4
  0002f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA, -1 ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00036	75 e4		 jne	 SHORT $LN20@Immortaliz
  00038	68 00 00 00 00	 push	 OFFSET ??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ@YAXXZ ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A, OFFSET ??_7_Iostream_error_category@std@@6B@
  00047	c7 05 04 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A+4, 5
  00051	e8 00 00 00 00	 call	 _atexit
  00056	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  0005b	e8 00 00 00 00	 call	 __Init_thread_footer
  00060	83 c4 08	 add	 esp, 8
  00063	eb b7		 jmp	 SHORT $LN20@Immortaliz
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ENDP ; std::_Immortalize<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7error_category@std@@6B@
  00010	74 0b		 je	 SHORT $LN13@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN13@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7error_category@std@@6B@
  00006	c3		 ret	 0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 626  : 		{	// convert to name of error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 627  : 		if (_Errcode == (int)io_errc::stream)

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00007	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0000e	56		 push	 esi

; 628  : 			return ("iostream stream error");

  0000f	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00012	83 f8 01	 cmp	 eax, 1
  00015	75 28		 jne	 SHORT $LN2@message
  00017	6a 15		 push	 21			; 00000015H
  00019	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00020	8b ce		 mov	 ecx, esi
  00022	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
  0002e	c6 06 00	 mov	 BYTE PTR [esi], 0
  00031	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 629  : 		else
; 630  : 			return (_Generic_error_category::message(_Errcode));

  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi

; 631  : 		}

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@message:

; 629  : 		else
; 630  : 			return (_Generic_error_category::message(_Errcode));

  0003f	50		 push	 eax
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 631  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 622  : 		return ("iostream");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 623  : 		}

  00005	c3		 ret	 0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 616  : 		{	// default constructor

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Iostream_error_category@std@@6B@

; 617  : 		_Addr = _Iostream_addr;
; 618  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 05 00
	00 00		 mov	 DWORD PTR [ecx+4], 5
  0000f	c3		 ret	 0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7error_category@std@@6B@
  00010	74 0b		 je	 SHORT $LN10@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7error_category@std@@6B@
  00006	c3		 ret	 0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 605  : 		{	// convert to name of error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 606  : 		return (_Syserror_map(_Errcode));

  00005	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp]
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0000f	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
  00014	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00017	8b d0		 mov	 edx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00023	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0002d	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00030	75 14		 jne	 SHORT $LN115@message
  00032	33 c9		 xor	 ecx, ecx
  00034	51		 push	 ecx
  00035	52		 push	 edx
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi

; 607  : 		}

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 606  : 		return (_Syserror_map(_Errcode));

$LN115@message:
  00046	8b ca		 mov	 ecx, edx
  00048	57		 push	 edi
  00049	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0004c	0f 1f 40 00	 npad	 4
$LL117@message:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL117@message
  00057	2b cf		 sub	 ecx, edi
  00059	5f		 pop	 edi
  0005a	51		 push	 ecx
  0005b	52		 push	 edx
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00063	8b c6		 mov	 eax, esi
  00065	5e		 pop	 esi

; 607  : 		}

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 601  : 		return ("generic");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 602  : 		}

  00005	c3		 ret	 0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 595  : 		{	// default constructor

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Generic_error_category@std@@6B@

; 596  : 		_Addr = _Generic_addr;
; 597  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 03 00
	00 00		 mov	 DWORD PTR [ecx+4], 3
  0000f	c3		 ret	 0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN15@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00039	8b c7		 mov	 eax, edi
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 548  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 55 10	 mov	 edx, DWORD PTR __Message$[ebp]

; 547  : 		: _Mybase(_Errcode, _Message)

  00032	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
  00039	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
  00040	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
  00044	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00047	75 04		 jne	 SHORT $LN115@system_err
  00049	33 c9		 xor	 ecx, ecx
  0004b	eb 0e		 jmp	 SHORT $LN116@system_err
$LN115@system_err:
  0004d	8b ca		 mov	 ecx, edx
  0004f	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL218@system_err:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL218@system_err
  00059	2b cf		 sub	 ecx, edi
$LN116@system_err:
  0005b	51		 push	 ecx
  0005c	52		 push	 edx
  0005d	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00060	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00065	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	50		 push	 eax
  00070	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp+4]
  00073	8b ce		 mov	 ecx, esi
  00075	ff 75 08	 push	 DWORD PTR __Errcode$[ebp]
  00078	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
  00080	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00083	72 0d		 jb	 SHORT $LN219@system_err
  00085	41		 inc	 ecx
  00086	51		 push	 ecx
  00087	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  0008a	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0008d	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN219@system_err:

; 549  : 		}

  00092	8b c6		 mov	 eax, esi

; 548  : 		{	// construct from error code and message string

  00094	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 549  : 		}

  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000aa	33 cd		 xor	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Ogtp
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_System_error@std@@UAE@XZ
_TEXT	SEGMENT
??1_System_error@std@@UAE@XZ PROC			; std::_System_error::~_System_error, COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1_System_error@std@@UAE@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__InitData$1 = -36					; size = 8
_this$ = -32						; size = 4
$T2 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 523  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00013	56		 push	 esi
  00014	83 ec 18	 sub	 esp, 24			; 00000018H
  00017	8b f1		 mov	 esi, ecx
  00019	8b cc		 mov	 ecx, esp
  0001b	89 75 e0	 mov	 DWORD PTR _this$[ebp], esi
  0001e	6a ff		 push	 -1
  00020	6a 00		 push	 0
  00022	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
  00029	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00030	50		 push	 eax
  00031	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00039	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp+4]
  0003c	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  0003f	ff 75 08	 push	 DWORD PTR __Errcode$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
  00048	8b c8		 mov	 ecx, eax
  0004a	83 c4 24	 add	 esp, 36			; 00000024H
  0004d	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00051	72 02		 jb	 SHORT $LN147@System_err

; 522  : 		: runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)

  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN147@System_err:
  00055	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0005e	0f 57 c0	 xorps	 xmm0, xmm0
  00061	89 4d dc	 mov	 DWORD PTR __InitData$1[ebp], ecx
  00064	50		 push	 eax
  00065	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00069	8d 45 dc	 lea	 eax, DWORD PTR __InitData$1[ebp]
  0006c	50		 push	 eax
  0006d	c6 45 e0 01	 mov	 BYTE PTR __InitData$1[ebp+4], 1
  00071	e8 00 00 00 00	 call	 ___std_exception_copy
  00076	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp+20]
  00079	83 c4 08	 add	 esp, 8
  0007c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	72 0d		 jb	 SHORT $LN158@System_err
  00087	40		 inc	 eax
  00088	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0008b	50		 push	 eax
  0008c	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN158@System_err:
  00094	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]

; 524  : 		}

  00097	8b c6		 mov	 eax, esi
  00099	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  0009f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_System_error@std@@6B@
  000ab	33 cd		 xor	 ecx, ebp
  000ad	5e		 pop	 esi
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 0c 00	 ret	 12			; 0000000cH
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 8
__Message$ = 20						; size = 24
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 513  : 		{	// compose error message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00033	83 7d 24 00	 cmp	 DWORD PTR __Message$[ebp+16], 0
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 514  : 		if (!_Message.empty())

  0003e	74 0f		 je	 SHORT $LN2@Makestr

; 515  : 			_Message.append(": ");

  00040	6a 02		 push	 2
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
  00047	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  0004a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:

; 516  : 		_Message.append(_Errcode.message());

  0004f	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00052	50		 push	 eax
  00053	8d 4d 0c	 lea	 ecx, DWORD PTR __Errcode$[ebp]
  00056	e8 00 00 00 00	 call	 ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
  0005b	6a ff		 push	 -1
  0005d	6a 00		 push	 0
  0005f	50		 push	 eax
  00060	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00063	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00067	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0006c	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp+20]
  0006f	83 f8 10	 cmp	 eax, 16			; 00000010H
  00072	72 0d		 jb	 SHORT $LN34@Makestr
  00074	40		 inc	 eax
  00075	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	50		 push	 eax
  00079	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  0007c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN34@Makestr:

; 517  : 		return (_Message);

  00081	8d 45 14	 lea	 eax, DWORD PTR __Message$[ebp]
  00084	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0008b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00092	8b ce		 mov	 ecx, esi
  00094	50		 push	 eax
  00095	c6 06 00	 mov	 BYTE PTR [esi], 0
  00098	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  0009d	8b 4d 28	 mov	 ecx, DWORD PTR __Message$[ebp+20]
  000a0	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000a3	72 0d		 jb	 SHORT $LN355@Makestr
  000a5	41		 inc	 ecx
  000a6	51		 push	 ecx
  000a7	ff 75 14	 push	 DWORD PTR __Message$[ebp]
  000aa	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  000ad	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN355@Makestr:
  000b2	8b c6		 mov	 eax, esi

; 518  : 		}

  000b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000be	59		 pop	 ecx
  000bf	5e		 pop	 esi
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??8std@@YA_NABVerror_condition@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??8std@@YA_NABVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 392  : 	{	// test errors for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  : 	return (_Left.category() == _Right.category()

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00016	75 0b		 jne	 SHORT $LN3@operator
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	3b 06		 cmp	 eax, DWORD PTR [esi]
  0001c	75 05		 jne	 SHORT $LN3@operator
  0001e	b0 01		 mov	 al, 1
  00020	5e		 pop	 esi

; 394  : 		&& _Left.value() == _Right.value());
; 395  : 	}

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN3@operator:

; 393  : 	return (_Left.category() == _Right.category()

  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 394  : 		&& _Left.value() == _Right.value());
; 395  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??8std@@YA_NABVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 346  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 347  : 		}

  00003	c3		 ret	 0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 341  : 		return (_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 342  : 		}

  00002	c3		 ret	 0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 307  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 306  : 		: _Myval(_Val), _Mycat(&_Cat)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 308  : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT
; _this$ = ecx

; 279  : 		{	// get name of error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 280  : 		return (category().message(value()));

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	ff 31		 push	 DWORD PTR [ecx]
  00009	8b c8		 mov	 ecx, eax
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	ff 52 08	 call	 DWORD PTR [edx+8]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 281  : 		}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 273  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 274  : 		}

  00003	c3		 ret	 0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 268  : 		return (_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 269  : 		}

  00002	c3		 ret	 0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 234  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 		: _Myval(_Val), _Mycat(&_Cat)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 235  : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7error_category@std@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 191  : 		{	// compare categories for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000c	0f 94 c0	 sete	 al

; 192  : 		return (_Addr == _Right._Addr);
; 193  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 462  : 	{	// test if conditions same for this category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 463  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __Code$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00010	75 0e		 jne	 SHORT $LN3@equivalent
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  00017	75 07		 jne	 SHORT $LN3@equivalent
  00019	b0 01		 mov	 al, 1
  0001b	5e		 pop	 esi

; 464  : 	}

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN3@equivalent:

; 463  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 464  : 	}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 455  : 	{	// test if error code same condition

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 456  : 	return (default_error_condition(_Errval) == _Cond);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	ff 75 08	 push	 DWORD PTR __Errval$[ebp]
  0000f	52		 push	 edx
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]
  00013	8b 75 0c	 mov	 esi, DWORD PTR __Cond$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00022	75 0f		 jne	 SHORT $LN5@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN5@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 457  : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8

; 456  : 	return (default_error_condition(_Errval) == _Cond);

$LN5@equivalent:
  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 457  : 	}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 448  : 	{	// make error_condition for error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 449  : 	return (error_condition(_Errval, *this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Errval$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 450  : 	}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 174  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7error_category@std@@6B@

; 175  : 		}

  00006	c3		 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 169  : 		{	// default constructor

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7error_category@std@@6B@

; 170  : 		_Addr = reinterpret_cast<uintptr_t>(this);
; 171  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	89 49 04	 mov	 DWORD PTR [ecx+4], ecx
  0000b	c3		 ret	 0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 709  : 	return (_Immortalize<_Iostream_error_category>());

  00000	e9 00 00 00 00	 jmp	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 479  : 	{	// make an error_code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 480  : 	return (error_code((int)_Errno, iostream_category()));

  00003	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00008	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Errno$[ebp]
  0000e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00011	8b c2		 mov	 eax, edx
  00013	89 0a		 mov	 DWORD PTR [edx], ecx

; 481  : 	}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	ff 76 0c	 push	 DWORD PTR [esi+12]
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 04	 add	 esp, 4
$LN5@scalar:
  0001d	ff 76 14	 push	 DWORD PTR [esi+20]
  00020	e8 00 00 00 00	 call	 _free
  00025	83 c4 04	 add	 esp, 4
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00032	74 0b		 je	 SHORT $LN17@scalar
  00034	6a 44		 push	 68			; 00000044H
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN17@scalar:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__Mbst$1 = -28						; size = 8
tv164 = -20						; size = 4
tv168 = -16						; size = 4
__Buf$2 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2779 : 		{	// narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 14	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00014	33 d2		 xor	 edx, edx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0001e	2b fe		 sub	 edi, esi
  00020	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
  00027	47		 inc	 edi
  00028	d1 ef		 shr	 edi, 1
  0002a	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0002d	0f 47 fa	 cmova	 edi, edx

; 2780 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2781 : 		for (; _First != _Last; ++_First, ++_Dest)

  00030	85 ff		 test	 edi, edi
  00032	74 4e		 je	 SHORT $LN14@do_narrow
  00034	83 c1 18	 add	 ecx, 24			; 00000018H
  00037	89 4d ec	 mov	 DWORD PTR tv164[ebp], ecx
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@do_narrow:

; 2782 : 			*_Dest = _Donarrow(*_First, _Dflt);

  00040	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	51		 push	 ecx
  00047	8d 4d e4	 lea	 ecx, DWORD PTR __Mbst$1[ebp]
  0004a	66 0f d6 45 e4	 movq	 QWORD PTR __Mbst$1[ebp], xmm0
  0004f	51		 push	 ecx
  00050	50		 push	 eax
  00051	8d 45 f4	 lea	 eax, DWORD PTR __Buf$2[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 __Wcrtomb
  0005a	0f b6 4d 10	 movzx	 ecx, BYTE PTR __Dflt$[ebp]
  0005e	8d 5b 01	 lea	 ebx, DWORD PTR [ebx+1]
  00061	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$2[ebp]
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	83 f8 01	 cmp	 eax, 1
  0006b	8b 45 f0	 mov	 eax, DWORD PTR tv168[ebp]
  0006e	0f 45 d1	 cmovne	 edx, ecx
  00071	8b 4d ec	 mov	 ecx, DWORD PTR tv164[ebp]
  00074	40		 inc	 eax
  00075	88 53 ff	 mov	 BYTE PTR [ebx-1], dl
  00078	83 c6 02	 add	 esi, 2
  0007b	89 45 f0	 mov	 DWORD PTR tv168[ebp], eax
  0007e	3b c7		 cmp	 eax, edi
  00080	75 be		 jne	 SHORT $LL4@do_narrow
$LN14@do_narrow:

; 2783 : 		return (_First);
; 2784 : 		}

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	8b c6		 mov	 eax, esi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	33 cd		 xor	 ecx, ebp
  0008b	5b		 pop	 ebx
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$1 = -20						; size = 8
__Buf$2 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 2773 : 		{	// narrow element to char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2774 : 		return (_Donarrow(_Ch, _Dflt));

  00010	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	50		 push	 eax
  00017	8d 45 ec	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  0001a	66 0f d6 45 ec	 movq	 QWORD PTR __Mbst$1[ebp], xmm0
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00023	8d 45 f4	 lea	 eax, DWORD PTR __Buf$2[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Wcrtomb
  0002c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Dflt$[ebp]
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$2[ebp]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	0f 45 d1	 cmovne	 edx, ecx

; 2775 : 		}

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	8a c2		 mov	 al, dl
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
_TEXT	SEGMENT
__Mbst$ = -20						; size = 8
__Buf$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z PROC		; std::ctype<wchar_t>::_Donarrow, COMDAT
; _this$ = ecx

; 2765 : 		{	// narrow element to char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2766 : 		char _Buf[MB_LEN_MAX];
; 2767 : 		_Mbstinit(_Mbst);
; 2768 : 		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1

  00010	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	50		 push	 eax
  00017	8d 45 ec	 lea	 eax, DWORD PTR __Mbst$[ebp]
  0001a	66 0f d6 45 ec	 movq	 QWORD PTR __Mbst$[ebp], xmm0
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00023	8d 45 f4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Wcrtomb
  0002c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Dflt$[ebp]
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$[ebp]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	0f 45 d1	 cmovne	 edx, ecx

; 2769 : 			? _Dflt : _Buf[0]);
; 2770 : 		}

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	8a c2		 mov	 al, dl
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ENDP		; std::ctype<wchar_t>::_Donarrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__Mbst$1 = -16						; size = 8
tv129 = -8						; size = 4
tv160 = -4						; size = 4
__Wc$2 = 8						; size = 2
__First$ = 8						; size = 4
__Byte$ = 12						; size = 1
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2757 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000a	33 d2		 xor	 edx, edx
  0000c	57		 push	 edi
  0000d	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00010	2b fe		 sub	 edi, esi
  00012	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	0f 47 fa	 cmova	 edi, edx

; 2758 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2759 : 		for (; _First != _Last; ++_First, ++_Dest)

  0001f	85 ff		 test	 edi, edi
  00021	74 56		 je	 SHORT $LN12@do_widen
  00023	83 c1 18	 add	 ecx, 24			; 00000018H
  00026	53		 push	 ebx
  00027	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR tv129[ebp], ecx
  0002d	0f 1f 00	 npad	 3
$LL4@do_widen:

; 2760 : 			*_Dest = _Dowiden(*_First);

  00030	8a 06		 mov	 al, BYTE PTR [esi]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	88 45 0c	 mov	 BYTE PTR __Byte$[ebp], al
  00038	8d 45 f0	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  0003b	51		 push	 ecx
  0003c	50		 push	 eax
  0003d	6a 01		 push	 1
  0003f	8d 45 0c	 lea	 eax, DWORD PTR __Byte$[ebp]
  00042	66 0f d6 45 f0	 movq	 QWORD PTR __Mbst$1[ebp], xmm0
  00047	50		 push	 eax
  00048	8d 45 08	 lea	 eax, DWORD PTR __Wc$2[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 __Mbrtowc
  00051	0f b7 4d 08	 movzx	 ecx, WORD PTR __Wc$2[ebp]
  00055	8d 5b 02	 lea	 ebx, DWORD PTR [ebx+2]
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	85 c0		 test	 eax, eax
  0005d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00062	0f 48 c8	 cmovs	 ecx, eax
  00065	8b 45 fc	 mov	 eax, DWORD PTR tv160[ebp]
  00068	40		 inc	 eax
  00069	66 89 4b fe	 mov	 WORD PTR [ebx-2], cx
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR tv129[ebp]
  00070	46		 inc	 esi
  00071	89 45 fc	 mov	 DWORD PTR tv160[ebp], eax
  00074	3b c7		 cmp	 eax, edi
  00076	75 b8		 jne	 SHORT $LL4@do_widen
  00078	5b		 pop	 ebx
$LN12@do_widen:
  00079	5f		 pop	 edi

; 2761 : 		return (_First);

  0007a	8b c6		 mov	 eax, esi
  0007c	5e		 pop	 esi

; 2762 : 		}

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Mbst$1 = -12						; size = 8
__Wc$2 = -4						; size = 2
__Byte$ = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 2751 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2752 : 		return (_Dowiden(_Byte));

  00006	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	88 45 08	 mov	 BYTE PTR __Byte$[ebp], al
  0000f	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00012	50		 push	 eax
  00013	8d 45 f4	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  00016	66 0f d6 45 f4	 movq	 QWORD PTR __Mbst$1[ebp], xmm0
  0001b	50		 push	 eax
  0001c	6a 01		 push	 1
  0001e	8d 45 08	 lea	 eax, DWORD PTR __Byte$[ebp]
  00021	50		 push	 eax
  00022	8d 45 fc	 lea	 eax, DWORD PTR __Wc$2[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __Mbrtowc
  0002b	0f b7 4d fc	 movzx	 ecx, WORD PTR __Wc$2[ebp]
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	85 c0		 test	 eax, eax
  00034	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00039	0f 48 ca	 cmovs	 ecx, edx
  0003c	66 8b c1	 mov	 ax, cx

; 2753 : 		}

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
_TEXT	SEGMENT
__Mbst$ = -12						; size = 8
__Wc$ = -4						; size = 2
__Byte$ = 8						; size = 1
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z PROC			; std::ctype<wchar_t>::_Dowiden, COMDAT
; _this$ = ecx

; 2743 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2744 : 		_Mbstinit(_Mbst);
; 2745 : 		wchar_t _Wc;
; 2746 : 		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0

  00006	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	50		 push	 eax
  0000d	8d 45 f4	 lea	 eax, DWORD PTR __Mbst$[ebp]
  00010	66 0f d6 45 f4	 movq	 QWORD PTR __Mbst$[ebp], xmm0
  00015	50		 push	 eax
  00016	6a 01		 push	 1
  00018	8d 45 08	 lea	 eax, DWORD PTR __Byte$[ebp]
  0001b	50		 push	 eax
  0001c	8d 45 fc	 lea	 eax, DWORD PTR __Wc$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 __Mbrtowc
  00025	0f b7 4d fc	 movzx	 ecx, WORD PTR __Wc$[ebp]
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	85 c0		 test	 eax, eax
  0002e	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00033	0f 48 ca	 cmovs	 ecx, edx
  00036	66 8b c1	 mov	 ax, cx

; 2747 : 			? (wchar_t)WEOF : _Wc);
; 2748 : 		}

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ENDP			; std::ctype<wchar_t>::_Dowiden
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv131 = 12						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2735 : 		{	// convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	43		 inc	 ebx
  00010	d1 eb		 shr	 ebx, 1
  00012	57		 push	 edi
  00013	33 ff		 xor	 edi, edi
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	0f 47 da	 cmova	 ebx, edx

; 2736 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2737 : 		for (; _First != _Last; ++_First)

  0001b	85 db		 test	 ebx, ebx
  0001d	74 21		 je	 SHORT $LN10@do_toupper
  0001f	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00022	89 45 0c	 mov	 DWORD PTR tv131[ebp], eax
$LL4@do_toupper:

; 2738 : 			*_First = _Towupper(*_First, &_Ctype);

  00025	50		 push	 eax
  00026	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 __Towupper
  0002f	66 89 06	 mov	 WORD PTR [esi], ax
  00032	47		 inc	 edi
  00033	8b 45 0c	 mov	 eax, DWORD PTR tv131[ebp]
  00036	83 c4 08	 add	 esp, 8
  00039	83 c6 02	 add	 esi, 2
  0003c	3b fb		 cmp	 edi, ebx
  0003e	75 e5		 jne	 SHORT $LL4@do_toupper
$LN10@do_toupper:
  00040	5f		 pop	 edi

; 2739 : 		return ((const _Elem *)_First);

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 2740 : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 2729 : 		{	// convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2730 : 		return (_Towupper(_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Towupper
  0000f	83 c4 08	 add	 esp, 8

; 2731 : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv131 = 12						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2721 : 		{	// convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	43		 inc	 ebx
  00010	d1 eb		 shr	 ebx, 1
  00012	57		 push	 edi
  00013	33 ff		 xor	 edi, edi
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	0f 47 da	 cmova	 ebx, edx

; 2722 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2723 : 		for (; _First != _Last; ++_First)

  0001b	85 db		 test	 ebx, ebx
  0001d	74 21		 je	 SHORT $LN10@do_tolower
  0001f	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00022	89 45 0c	 mov	 DWORD PTR tv131[ebp], eax
$LL4@do_tolower:

; 2724 : 			*_First = _Towlower(*_First, &_Ctype);

  00025	50		 push	 eax
  00026	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 __Towlower
  0002f	66 89 06	 mov	 WORD PTR [esi], ax
  00032	47		 inc	 edi
  00033	8b 45 0c	 mov	 eax, DWORD PTR tv131[ebp]
  00036	83 c4 08	 add	 esp, 8
  00039	83 c6 02	 add	 esi, 2
  0003c	3b fb		 cmp	 edi, ebx
  0003e	75 e5		 jne	 SHORT $LL4@do_tolower
$LN10@do_tolower:
  00040	5f		 pop	 edi

; 2725 : 		return ((const _Elem *)_First);

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 2726 : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 2715 : 		{	// convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2716 : 		return (_Towlower(_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Towlower
  0000f	83 c4 08	 add	 esp, 8

; 2717 : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 2707 : 		{	// find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2708 : 		_DEBUG_RANGE(_First, _Last);
; 2709 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)

  00005	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 1b		 je	 SHORT $LN12@do_scan_no
$LL4@do_scan_no:
  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	8b cb		 mov	 ecx, ebx
  00017	8b 13		 mov	 edx, DWORD PTR [ebx]
  00019	50		 push	 eax
  0001a	ff 75 08	 push	 DWORD PTR __Maskval$[ebp]
  0001d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00020	ff d0		 call	 eax
  00022	84 c0		 test	 al, al
  00024	74 07		 je	 SHORT $LN12@do_scan_no
  00026	83 c6 02	 add	 esi, 2
  00029	3b f7		 cmp	 esi, edi
  0002b	75 e5		 jne	 SHORT $LL4@do_scan_no
$LN12@do_scan_no:
  0002d	5f		 pop	 edi

; 2710 : 			;
; 2711 : 		return (_First);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 2712 : 		}

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2698 : 		{	// find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2699 : 		_DEBUG_RANGE(_First, _Last);
; 2700 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)

  00005	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 1b		 je	 SHORT $LN12@do_scan_is
$LL4@do_scan_is:
  00012	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00015	8b cb		 mov	 ecx, ebx
  00017	8b 13		 mov	 edx, DWORD PTR [ebx]
  00019	50		 push	 eax
  0001a	ff 75 08	 push	 DWORD PTR __Maskval$[ebp]
  0001d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00020	ff d0		 call	 eax
  00022	84 c0		 test	 al, al
  00024	75 07		 jne	 SHORT $LN12@do_scan_is
  00026	83 c6 02	 add	 esi, 2
  00029	3b f7		 cmp	 esi, edi
  0002b	75 e5		 jne	 SHORT $LL4@do_scan_is
$LN12@do_scan_is:
  0002d	5f		 pop	 edi

; 2701 : 			;
; 2702 : 		return (_First);

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 2703 : 		}

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2691 : 		{	// get mask sequence for elements in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2692 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2693 : 		return (_CSTD _Getwctypes(_First, _Last, _Dest, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 __Getwctypes
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2694 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2685 : 		{	// test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2686 : 		return ((_CSTD _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Getwctype
  0000f	83 c4 08	 add	 esp, 8
  00012	66 85 45 08	 test	 WORD PTR __Maskval$[ebp], ax
  00016	0f 95 c0	 setne	 al

; 2687 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -60						; size = 44
$T2 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z PROC	; std::ctype<wchar_t>::_Init, COMDAT
; _this$ = ecx

; 2679 : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 2680 : 		_Ctype = _Lobj._Getctype();

  00006	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 __Getctype
  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2681 : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 c4	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  0001d	e8 00 00 00 00	 call	 __Getcvt
  00022	83 c4 08	 add	 esp, 8
  00025	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00028	0f 11 46 18	 movups	 XMMWORD PTR [esi+24], xmm0
  0002c	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00030	0f 11 46 28	 movups	 XMMWORD PTR [esi+40], xmm0
  00034	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00039	66 0f d6 46 38	 movq	 QWORD PTR [esi+56], xmm0
  0003e	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00041	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00044	5e		 pop	 esi

; 2682 : 		}

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::ctype<wchar_t>::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2671 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2672 : 		if (_Ctype._Delfl)

  00003	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0b		 je	 SHORT $LN2@ctype

; 2673 : 			_CSTD free((void *)_Ctype._Table);

  0000f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00012	e8 00 00 00 00	 call	 _free
  00017	83 c4 04	 add	 esp, 4
$LN2@ctype:

; 2674 : 
; 2675 : 		_CSTD free(_Ctype._LocaleName);

  0001a	ff 76 14	 push	 DWORD PTR [esi+20]
  0001d	e8 00 00 00 00	 call	 _free
  00022	83 c4 04	 add	 esp, 4

; 2676 : 		}

  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002b	5e		 pop	 esi
  0002c	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<wchar_t>::_Getcat, COMDAT

; 2662 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2663 : 		if (_Ppf != 0 && *_Ppf == 0)

  00028	8b 75 08	 mov	 esi, DWORD PTR __Ppf$[ebp]
  0002b	33 db		 xor	 ebx, ebx
  0002d	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
  00030	85 f6		 test	 esi, esi
  00032	74 60		 je	 SHORT $LN19@Getcat
  00034	39 1e		 cmp	 DWORD PTR [esi], ebx
  00036	75 5c		 jne	 SHORT $LN19@Getcat

; 2664 : 			*_Ppf = new ctype<_Elem>(

  00038	6a 44		 push	 68			; 00000044H
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f8		 mov	 edi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 7d 08	 mov	 DWORD PTR $T4[ebp], edi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 ff		 test	 edi, edi
  0004c	74 35		 je	 SHORT $LN4@Getcat
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	85 c9		 test	 ecx, ecx
  00056	75 07		 jne	 SHORT $LN12@Getcat
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005d	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
  0005f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00062	85 c0		 test	 eax, eax
  00064	75 03		 jne	 SHORT $LN17@Getcat
  00066	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
  00069	50		 push	 eax
  0006a	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00072	6a 00		 push	 0
  00074	50		 push	 eax
  00075	8b cf		 mov	 ecx, edi
  00077	bb 01 00 00 00	 mov	 ebx, 1
  0007c	e8 00 00 00 00	 call	 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>
  00081	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00083	33 c0		 xor	 eax, eax
$LN5@Getcat:
  00085	89 06		 mov	 DWORD PTR [esi], eax
  00087	f6 c3 01	 test	 bl, 1
  0008a	74 08		 je	 SHORT $LN19@Getcat
  0008c	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0008f	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN19@Getcat:

; 2665 : 				_Locinfo(_Ploc->c_str()));
; 2666 : 		return (_X_CTYPE);

  00094	b8 02 00 00 00	 mov	 eax, 2

; 2667 : 		}

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 44		 push	 68			; 00000044H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<wchar_t>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T1 = -64						; size = 44
$T2 = -20						; size = 16
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<wchar_t>::ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2656 : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 2655 : 		: ctype_base(_Refs)

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00009	56		 push	 esi

; 2656 : 		{	// construct from specified locale

  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2657 : 		_Init(_Lobj);

  00012	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  00015	50		 push	 eax
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0001c	e8 00 00 00 00	 call	 __Getctype
  00021	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00024	8d 45 c0	 lea	 eax, DWORD PTR $T1[ebp]
  00027	50		 push	 eax
  00028	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  0002c	e8 00 00 00 00	 call	 __Getcvt
  00031	83 c4 08	 add	 esp, 8
  00034	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00037	0f 11 46 18	 movups	 XMMWORD PTR [esi+24], xmm0
  0003b	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0003f	0f 11 46 28	 movups	 XMMWORD PTR [esi+40], xmm0
  00043	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00048	66 0f d6 46 38	 movq	 QWORD PTR [esi+56], xmm0
  0004d	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00050	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 2658 : 		}

  00053	8b c6		 mov	 eax, esi
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<wchar_t>::ctype<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@_W@std@@QBE_WD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@_W@std@@QBE_WD@Z PROC			; std::ctype<wchar_t>::widen, COMDAT
; _this$ = ecx

; 2623 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2624 : 		return (do_widen(_Byte));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2625 : 		}

  00005	5d		 pop	 ebp

; 2624 : 		return (do_widen(_Byte));

  00006	ff 60 30	 jmp	 DWORD PTR [eax+48]
?widen@?$ctype@_W@std@@QBE_WD@Z ENDP			; std::ctype<wchar_t>::widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?is@?$ctype@_W@std@@QBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?is@?$ctype@_W@std@@QBE_NF_W@Z PROC			; std::ctype<wchar_t>::is, COMDAT
; _this$ = ecx

; 2580 : 		{	// test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2581 : 		return (do_is(_Maskval, _Ch));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 2582 : 		}

  00008	5d		 pop	 ebp

; 2581 : 		return (do_is(_Maskval, _Ch));

  00009	ff e0		 jmp	 eax
?is@?$ctype@_W@std@@QBE_NF_W@Z ENDP			; std::ctype<wchar_t>::is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__Lock$3 = -24						; size = 4
__Lock$4 = -20						; size = 4
__Psave$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 553  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d f0	 mov	 DWORD PTR __Psave$5[ebp], ebx
  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet
  0004c	57		 push	 edi
  0004d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:
  0006d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00081	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00084	73 0c		 jae	 SHORT $LN20@use_facet
  00086	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00089	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
  0008c	85 f6		 test	 esi, esi
  0008e	75 77		 jne	 SHORT $LN7@use_facet
  00090	eb 02		 jmp	 SHORT $LN28@use_facet
$LN20@use_facet:
  00092	33 f6		 xor	 esi, esi
$LN28@use_facet:
  00094	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00098	74 10		 je	 SHORT $LN17@use_facet
  0009a	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009f	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a2	73 0a		 jae	 SHORT $LN29@use_facet
  000a4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a7	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 565  : 
; 566  : 		if (_Pf != 0)

  000aa	85 f6		 test	 esi, esi
  000ac	75 59		 jne	 SHORT $LN7@use_facet
$LN29@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  000ae	85 db		 test	 ebx, ebx
  000b0	74 04		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  000b2	8b f3		 mov	 esi, ebx
  000b4	eb 51		 jmp	 SHORT $LN7@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000b6	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000b9	8d 45 f0	 lea	 eax, DWORD PTR __Psave$5[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000c2	83 c4 08	 add	 esp, 8
  000c5	83 f8 ff	 cmp	 eax, -1
  000c8	75 24		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7bad_cast@std@@6B@
  000d4	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d9	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000dc	66 0f d6 45 e0	 movq	 QWORD PTR $T2[ebp+4], xmm0
  000e1	50		 push	 eax
  000e2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@use_facet:
$LN6@use_facet:

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else
; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000ee	8b 75 f0	 mov	 esi, DWORD PTR __Psave$5[ebp]

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 586  : 			_Pfmod->_Incref();

  000f1	8b ce		 mov	 ecx, esi
  000f3	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
  000f9	8b 16		 mov	 edx, DWORD PTR [esi]
  000fb	ff 52 04	 call	 DWORD PTR [edx+4]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00104	83 c4 04	 add	 esp, 4
$LN7@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00107	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0010a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0010f	8b c6		 mov	 eax, esi

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  00111	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00114	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011b	59		 pop	 ecx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
$LN31@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN22@scalar
  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN23@scalar
$LN22@scalar:
  0001d	79 0b		 jns	 SHORT $LN10@scalar
  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN23@scalar:
  00027	83 c4 04	 add	 esp, 4
$LN10@scalar:
  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN21@scalar
  00041	6a 18		 push	 24			; 00000018H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN21@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2558 : 		{	// narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2559 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2560 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2561 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2562 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2552 : 		{	// narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2553 : 		return (_Ch);

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2554 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2545 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2546 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2547 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2548 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2549 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2539 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2540 : 		return (_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2541 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv132 = 12						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2531 : 		{	// convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	57		 push	 edi
  00010	33 ff		 xor	 edi, edi
  00012	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00015	0f 47 da	 cmova	 ebx, edx

; 2532 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2533 : 		for (; _First != _Last; ++_First)

  00018	85 db		 test	 ebx, ebx
  0001a	74 1e		 je	 SHORT $LN10@do_toupper
  0001c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0001f	89 45 0c	 mov	 DWORD PTR tv132[ebp], eax
$LL4@do_toupper:

; 2534 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00022	50		 push	 eax
  00023	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Toupper
  0002c	88 06		 mov	 BYTE PTR [esi], al
  0002e	47		 inc	 edi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR tv132[ebp]
  00032	83 c4 08	 add	 esp, 8
  00035	46		 inc	 esi
  00036	3b fb		 cmp	 edi, ebx
  00038	75 e8		 jne	 SHORT $LL4@do_toupper
$LN10@do_toupper:
  0003a	5f		 pop	 edi

; 2535 : 		return ((const _Elem *)_First);

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 2536 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2525 : 		{	// convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2526 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2527 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
tv132 = 12						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2517 : 		{	// convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000d	2b de		 sub	 ebx, esi
  0000f	57		 push	 edi
  00010	33 ff		 xor	 edi, edi
  00012	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00015	0f 47 da	 cmova	 ebx, edx

; 2518 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2519 : 		for (; _First != _Last; ++_First)

  00018	85 db		 test	 ebx, ebx
  0001a	74 1e		 je	 SHORT $LN10@do_tolower
  0001c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0001f	89 45 0c	 mov	 DWORD PTR tv132[ebp], eax
$LL4@do_tolower:

; 2520 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00022	50		 push	 eax
  00023	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Tolower
  0002c	88 06		 mov	 BYTE PTR [esi], al
  0002e	47		 inc	 edi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR tv132[ebp]
  00032	83 c4 08	 add	 esp, 8
  00035	46		 inc	 esi
  00036	3b fb		 cmp	 edi, ebx
  00038	75 e8		 jne	 SHORT $LL4@do_tolower
$LN10@do_tolower:
  0003a	5f		 pop	 edi

; 2521 : 		return ((const _Elem *)_First);

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx

; 2522 : 		}

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2511 : 		{	// convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2512 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2513 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2501 : 		{	// free any allocated storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2502 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax
  00008	7e 18		 jle	 SHORT $LN6@Tidy

; 2503 : 			_CSTD free((void *)_Ctype._Table);

  0000a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0000d	e8 00 00 00 00	 call	 _free

; 2505 : 			delete[] _Ctype._Table;

  00012	83 c4 04	 add	 esp, 4

; 2506 : 
; 2507 : 		_CSTD free(_Ctype._LocaleName);

  00015	ff 76 14	 push	 DWORD PTR [esi+20]
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
  00020	5e		 pop	 esi

; 2508 : 		}

  00021	c3		 ret	 0
$LN6@Tidy:

; 2504 : 		else if (_Ctype._Delfl < 0)

  00022	79 0b		 jns	 SHORT $LN4@Tidy

; 2505 : 			delete[] _Ctype._Table;

  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002c	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 2506 : 
; 2507 : 		_CSTD free(_Ctype._LocaleName);

  0002f	ff 76 14	 push	 DWORD PTR [esi+20]
  00032	e8 00 00 00 00	 call	 _free
  00037	83 c4 04	 add	 esp, 4
  0003a	5e		 pop	 esi

; 2508 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2496 : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2497 : 		_Ctype = _Lobj._Getctype();

  00006	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 __Getctype
  00012	83 c4 04	 add	 esp, 4
  00015	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00018	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  0001c	5e		 pop	 esi

; 2498 : 		}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2491 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2492 : 		_Tidy();

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN17@ctype
  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN18@ctype
$LN17@ctype:
  0001a	79 0b		 jns	 SHORT $LN6@ctype
  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN18@ctype:
  00024	83 c4 04	 add	 esp, 4
$LN6@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4

; 2493 : 		}

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -84						; size = 52
$T3 = -32						; size = 16
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T5 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2468 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2469 : 		if (_Ppf != 0 && *_Ppf == 0)

  00028	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0002b	33 db		 xor	 ebx, ebx
  0002d	89 5d f0	 mov	 DWORD PTR $T4[ebp], ebx
  00030	85 ff		 test	 edi, edi
  00032	74 76		 je	 SHORT $LN34@Getcat
  00034	39 1f		 cmp	 DWORD PTR [edi], ebx
  00036	75 72		 jne	 SHORT $LN34@Getcat

; 2470 : 			*_Ppf = new ctype<_Elem>(

  00038	6a 18		 push	 24			; 00000018H
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 75 08	 mov	 DWORD PTR $T5[ebp], esi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 f6		 test	 esi, esi
  0004c	74 4b		 je	 SHORT $LN4@Getcat
  0004e	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	85 c9		 test	 ecx, ecx
  00056	75 07		 jne	 SHORT $LN12@Getcat
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005d	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
  0005f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00062	85 c0		 test	 eax, eax
  00064	75 03		 jne	 SHORT $LN17@Getcat
  00066	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
  00069	50		 push	 eax
  0006a	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00072	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00075	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0007c	50		 push	 eax
  0007d	bb 01 00 00 00	 mov	 ebx, 1
  00082	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  00088	e8 00 00 00 00	 call	 __Getctype
  0008d	83 c4 04	 add	 esp, 4
  00090	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00093	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  00097	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00099	33 f6		 xor	 esi, esi
$LN5@Getcat:
  0009b	89 37		 mov	 DWORD PTR [edi], esi
  0009d	f6 c3 01	 test	 bl, 1
  000a0	74 08		 je	 SHORT $LN34@Getcat
  000a2	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  000a5	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN34@Getcat:

; 2471 : 				_Locinfo(_Ploc->c_str()));
; 2472 : 		return (_X_CTYPE);

  000aa	b8 02 00 00 00	 mov	 eax, 2

; 2473 : 		}

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2462 : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 2461 : 		: ctype_base(_Refs)

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00009	56		 push	 esi

; 2462 : 		{	// construct from current locale

  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2463 : 		_Init(_Lobj);

  00012	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  00015	50		 push	 eax
  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
  0001c	e8 00 00 00 00	 call	 __Getctype
  00021	83 c4 04	 add	 esp, 4
  00024	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2464 : 		}

  00027	8b c6		 mov	 eax, esi
  00029	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  0002d	5e		 pop	 esi
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z PROC		; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2421 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2422 : 		return (do_widen(_First, _Last, _Dest));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2423 : 		}

  00005	5d		 pop	 ebp

; 2422 : 		return (do_widen(_First, _Last, _Dest));

  00006	ff 60 1c	 jmp	 DWORD PTR [eax+28]
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2415 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2416 : 		return (do_widen(_Byte));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 40 20	 mov	 eax, DWORD PTR [eax+32]

; 2417 : 		}

  00008	5d		 pop	 ebp

; 2416 : 		return (do_widen(_Byte));

  00009	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN13@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN13@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2108 : 		}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2103 : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2102 : 		: locale::facet(_Refs)

  00004	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2104 : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Glocale@std@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	85 c9		 test	 ecx, ecx
  00031	74 11		 je	 SHORT $LN7@scalar
  00033	8b 01		 mov	 eax, DWORD PTR [ecx]
  00035	ff 50 08	 call	 DWORD PTR [eax+8]
  00038	85 c0		 test	 eax, eax
  0003a	74 08		 je	 SHORT $LN7@scalar
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	8b c8		 mov	 ecx, eax
  00040	6a 01		 push	 1
  00042	ff 12		 call	 DWORD PTR [edx]
$LN7@scalar:
  00044	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00048	74 0b		 je	 SHORT $LN10@scalar
  0004a	6a 08		 push	 8
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00055	8b c6		 mov	 eax, esi
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_Glocale@std@@QAEPAXI@Z$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_Glocale@std@@QAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Glocale@std@@QAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 458  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 459  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  0000a	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000d	73 0c		 jae	 SHORT $LN6@Getfacet
  0000f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00012	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 460  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 461  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00015	85 c0		 test	 eax, eax
  00017	75 21		 jne	 SHORT $LN3@Getfacet
  00019	eb 02		 jmp	 SHORT $LN10@Getfacet
$LN6@Getfacet:

; 459  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0001b	33 c0		 xor	 eax, eax
$LN10@Getfacet:

; 460  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 461  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  0001d	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00021	74 17		 je	 SHORT $LN3@Getfacet

; 462  : 			return (_Facptr);	// found facet or not transparent
; 463  : 		else
; 464  : 			{	// look in current locale
; 465  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00023	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 466  : 			return (_Id < _Ptr0->_Facetcount

  00028	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002b	73 0b		 jae	 SHORT $LN8@Getfacet
  0002d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00030	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00033	5e		 pop	 esi

; 467  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 468  : 				: 0);	// no entry in current locale
; 469  : 			}
; 470  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN8@Getfacet:

; 466  : 			return (_Id < _Ptr0->_Facetcount

  00038	33 c0		 xor	 eax, eax
$LN3@Getfacet:
  0003a	5e		 pop	 esi

; 467  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 468  : 				: 0);	// no entry in current locale
; 469  : 			}
; 470  : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 454  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 06		 jne	 SHORT $LN3@c_str
  00007	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 455  : 		}

  0000c	c3		 ret	 0
$LN3@c_str:

; 454  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  0000d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00010	85 c9		 test	 ecx, ecx
  00012	74 03		 je	 SHORT $LN7@c_str
  00014	8b c1		 mov	 eax, ecx

; 455  : 		}

  00016	c3		 ret	 0

; 454  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

$LN7@c_str:
  00017	83 c0 1c	 add	 eax, 28			; 0000001cH

; 455  : 		}

  0001a	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 430  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 431  : 		if (_Ptr != 0)

  00022	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00025	85 c9		 test	 ecx, ecx
  00027	74 11		 je	 SHORT $LN4@locale

; 432  : 			delete _Ptr->_Decref();

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	ff 50 08	 call	 DWORD PTR [eax+8]
  0002e	85 c0		 test	 eax, eax
  00030	74 08		 je	 SHORT $LN4@locale
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b c8		 mov	 ecx, eax
  00036	6a 01		 push	 1
  00038	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 433  : 		}

  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 331  : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 330  : 		: _Ptr(_Init(true))

  00025	6a 01		 push	 1
  00027	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002f	83 c4 04	 add	 esp, 4

; 332  : 		}

  00032	8b c6		 mov	 eax, esi
  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 325  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 324  : 		: _Ptr(_Right._Ptr)

  00025	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 326  : 		_Ptr->_Incref();

  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	ff 50 04	 call	 DWORD PTR [eax+4]

; 327  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN10@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 172  : 			}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 165  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 166  : 			{	// construct with initial reference count
; 167  : 			_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);

  00004	8b 45 08	 mov	 eax, DWORD PTR __Initrefs$[ebp]
  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 168  : 			}

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 155  : 			if (_MT_DECR(_Myrefs) == 0)

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 156  : 				return (this);
; 157  : 			else
; 158  : 				return (0);
; 159  : 			}

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 150  : 			_MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 151  : 			}

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 114  : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 115  : 			if (_Id == 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 24		 jne	 SHORT $LN6@operator

; 116  : 				{	// still zero, allocate stamp
; 117  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0000c	6a 00		 push	 0
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 118  : 					if (_Id == 0)

  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	75 0d		 jne	 SHORT $LN3@operator

; 119  : 						_Id = ++_Id_cnt;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00020	40		 inc	 eax
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00026	89 06		 mov	 DWORD PTR [esi], eax
$LN3@operator:

; 120  : 				_END_LOCK()

  00028	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0002b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 121  : 				}
; 122  : 			return (_Id);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	5e		 pop	 esi

; 123  : 			}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 110  : 			{	// construct with specified stamp value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 109  : 			: _Id(_Val)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 111  : 			}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@

; 25   : 		}

  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 3796 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3797 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 3798 : 
; 3799 :  #ifdef _DEBUG
; 3800 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3801 : 
; 3802 :  #else /* _DEBUG */
; 3803 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 3804 :  #endif /* _DEBUG */
; 3805 : 
; 3806 : 		_Myptr = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3807 : 		}

  00019	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 3770 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3771 : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3772 : 		}

  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 3719 : 		: _Myptr(0), _Nul(0)

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00008	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 3721 : 		}

  0000c	8b c1		 mov	 eax, ecx
  0000e	c3		 ret	 0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 3796 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3797 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 3798 : 
; 3799 :  #ifdef _DEBUG
; 3800 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3801 : 
; 3802 :  #else /* _DEBUG */
; 3803 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 3804 :  #endif /* _DEBUG */
; 3805 : 
; 3806 : 		_Myptr = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3807 : 		}

  00019	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 3781 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 3782 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 3770 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3771 : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3772 : 		}

  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 3719 : 		: _Myptr(0), _Nul(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 3721 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  0000c	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 172  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@

; 173  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 167  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false?$AA@

; 168  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 127  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
$T1 = -44						; size = 44
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 121  : 		{	// return codecvt stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 122  : 		return (::_Getcvt());

  00006	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Getcvt
  0000f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00012	83 c4 04	 add	 esp, 4
  00015	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00018	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0001b	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0001e	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00022	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00026	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  0002b	8b c2		 mov	 eax, edx
  0002d	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  00032	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 123  : 		}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 117  : 		return (::_Getctype());

  00006	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Getctype
  0000f	83 c4 04	 add	 esp, 4
  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00018	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 118  : 		}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 95   : 		_Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 96   : 		}

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN7@Locinfo
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN7@Locinfo:
  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN13@Locinfo
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN13@Locinfo:
  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN19@Locinfo
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN19@Locinfo:
  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN25@Locinfo
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN25@Locinfo:
  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN31@Locinfo
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN31@Locinfo:
  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN37@Locinfo
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN37@Locinfo:
  000b1	8b ce		 mov	 ecx, esi
  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__InitData$3 = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 73   : 		: _Lock(_LOCK_LOCALE)

  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 76   : 		{	// construct from NTBS

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00040	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004b	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004f	33 c0		 xor	 eax, eax
  00051	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00058	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005f	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00063	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00066	88 46 28	 mov	 BYTE PTR [esi+40], al
  00069	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006c	88 46 30	 mov	 BYTE PTR [esi+48], al

; 77   : 		if (_Pch == 0)

  0006f	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00072	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00076	85 c0		 test	 eax, eax
  00078	75 3f		 jne	 SHORT $LN2@Locinfo

; 78   : 			_THROW_NCEE(runtime_error, "bad locale name");

  0007a	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp+4]
  0007d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7exception@std@@6B@
  00084	50		 push	 eax
  00085	8d 45 e8	 lea	 eax, DWORD PTR __InitData$3[ebp]
  00088	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __InitData$3[ebp], OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
  0008f	0f 57 c0	 xorps	 xmm0, xmm0
  00092	c6 45 ec 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1
  00096	50		 push	 eax
  00097	66 0f d6 45 e0	 movq	 QWORD PTR $T2[ebp+4], xmm0
  0009c	e8 00 00 00 00	 call	 ___std_exception_copy
  000a1	83 c4 08	 add	 esp, 8
  000a4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7runtime_error@std@@6B@
  000ab	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000ae	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@Locinfo:
$LN2@Locinfo:

; 79   : 		_Locinfo_ctor(this, _Pch);

  000b9	50		 push	 eax
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  000c0	83 c4 08	 add	 esp, 8

; 80   : 		}

  000c3	8b c6		 mov	 eax, esi
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN28@Locinfo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 125  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 126  :     }

  00003	8b c1		 mov	 eax, ecx
  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@
  00017	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 244  : 		{	// copy construct
; 245  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@XZ
_TEXT	SEGMENT
??0?$tuple@$$V@std@@QAE@XZ PROC				; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 235  : 		{	// default construct
; 236  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$tuple@$$V@std@@QAE@XZ ENDP				; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__InitData$1 = -8					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 168  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 167  : 		: _Mybase(_Message)

  00006	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	56		 push	 esi

; 168  : 		{	// construct from message string

  0000d	8b f1		 mov	 esi, ecx
  0000f	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00012	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00015	89 45 f8	 mov	 DWORD PTR __InitData$1[ebp], eax
  00018	8d 45 f8	 lea	 eax, DWORD PTR __InitData$1[ebp]
  0001b	52		 push	 edx
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00022	50		 push	 eax
  00023	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00027	c6 45 fc 01	 mov	 BYTE PTR __InitData$1[ebp+4], 1
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	83 c4 08	 add	 esp, 8
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 169  : 		}

  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__InitData$1 = -8					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 162  : 		: _Mybase(_Message.c_str())

  00006	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
  00009	56		 push	 esi

; 163  : 		{	// construct from message string

  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00013	72 02		 jb	 SHORT $LN17@runtime_er

; 162  : 		: _Mybase(_Message.c_str())

  00015	8b 12		 mov	 edx, DWORD PTR [edx]
$LN17@runtime_er:
  00017	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00020	0f 57 c0	 xorps	 xmm0, xmm0
  00023	89 55 f8	 mov	 DWORD PTR __InitData$1[ebp], edx
  00026	50		 push	 eax
  00027	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __InitData$1[ebp]
  0002e	50		 push	 eax
  0002f	c6 45 fc 01	 mov	 BYTE PTR __InitData$1[ebp+4], 1
  00033	e8 00 00 00 00	 call	 ___std_exception_copy
  00038	83 c4 08	 add	 esp, 8

; 163  : 		{	// construct from message string

  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 164  : 		}

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2283 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2271 : 		if (this->_Mysize() < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00009	72 04		 jb	 SHORT $LN17@Check_offs

; 2273 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN17@Check_offs:

; 2272 : 			_Xran();

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN19@Check_offs:
$LN16@Check_offs:
  00019	cc		 int	 3
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2266 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2248 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2249 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 26		 je	 SHORT $LN4@Tidy

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 20		 jb	 SHORT $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN57@Tidy

; 2256 : 				_Traits::copy(this->_Bx()._Buf,

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@Tidy:

; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00028	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002b	8b ce		 mov	 ecx, esi
  0002d	40		 inc	 eax
  0002e	50		 push	 eax
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
  00035	5b		 pop	 ebx
$LN4@Tidy:

; 2259 : 			}
; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00036	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2261 : 		_Eos(_Newsize);

  0003d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00041	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00044	72 0c		 jb	 SHORT $LN92@Tidy
  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 2262 : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8

; 2261 : 		_Eos(_Newsize);

$LN92@Tidy:
  00052	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 2262 : 		}

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2238 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 2d		 je	 SHORT $LN4@Inside
  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN16@Inside
  00013	8b 31		 mov	 esi, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN17@Inside
$LN16@Inside:
  00017	8b f1		 mov	 esi, ecx
$LN17@Inside:
  00019	3b d6		 cmp	 edx, esi
  0001b	72 1b		 jb	 SHORT $LN4@Inside
  0001d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN30@Inside
  00022	8b 31		 mov	 esi, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN31@Inside
$LN30@Inside:
  00026	8b f1		 mov	 esi, ecx
$LN31@Inside:
  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	03 c6		 add	 eax, esi
  0002d	3b c2		 cmp	 eax, edx
  0002f	76 07		 jbe	 SHORT $LN4@Inside

; 2242 : 		else
; 2243 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2244 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2244 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2225 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	77 59		 ja	 SHORT $LN89@Grow

; 2227 : 		if (this->_Myres() < _Newsize)

  0000c	39 71 14	 cmp	 DWORD PTR [ecx+20], esi
  0000f	73 13		 jae	 SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00011	ff 71 10	 push	 DWORD PTR [ecx+16]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0001a	85 f6		 test	 esi, esi
  0001c	5e		 pop	 esi
  0001d	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00024	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  00028	74 1f		 je	 SHORT $LN5@Grow
  0002a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0002d	73 1a		 jae	 SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  0002f	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00032	3b f0		 cmp	 esi, eax
  00034	0f 42 c6	 cmovb	 eax, esi
  00037	50		 push	 eax
  00038	6a 01		 push	 1
  0003a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0003f	85 f6		 test	 esi, esi
  00041	5e		 pop	 esi
  00042	0f 95 c0	 setne	 al

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 10		 jne	 SHORT $LN88@Grow

; 2233 : 			_Eos(0);	// new size is zero, just null terminate

  0004d	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00051	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00054	72 02		 jb	 SHORT $LN80@Grow
  00056	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN80@Grow:
  00058	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0005b	85 f6		 test	 esi, esi
$LN88@Grow:
  0005d	0f 95 c0	 setne	 al
  00060	5e		 pop	 esi

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do
; 2235 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN89@Grow:

; 2226 : 			_Xlen();	// result too long

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0006a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN91@Grow:
$LN87@Grow:
  0006f	cc		 int	 3
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0000a	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0000d	72 0a		 jb	 SHORT $LN11@Eos
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 2220 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

$LN11@Eos:
  00019	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0

; 2220 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f8		 mov	 edi, eax
  00035	83 cf 0f	 or	 edi, 15			; 0000000fH

; 2184 : 		if (max_size() < _Newres)

  00038	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f8		 mov	 edi, eax
  0003f	eb 27		 jmp	 SHORT $LN108@Copy
$LN2@Copy:

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00041	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e7		 mul	 edi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN108@Copy

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 2189 : 			_Newres = this->_Myres()

  0005a	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN108@Copy

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()

  00063	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN108@Copy:

; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  00068	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00072	85 c0		 test	 eax, eax
  00074	75 04		 jne	 SHORT $LN136@Copy
  00076	33 db		 xor	 ebx, ebx
  00078	eb 6d		 jmp	 SHORT $LN19@Copy
$LN136@Copy:
  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 29		 jb	 SHORT $LN138@Copy
  00081	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00084	3b c8		 cmp	 ecx, eax
  00086	77 05		 ja	 SHORT $LN140@Copy
  00088	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN435@Copy:
$LN140@Copy:
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00093	83 c4 04	 add	 esp, 4
  00096	85 c0		 test	 eax, eax
  00098	75 05		 jne	 SHORT $LN141@Copy
  0009a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN436@Copy:
$LN141@Copy:
  0009f	8d 58 23	 lea	 ebx, DWORD PTR [eax+35]
  000a2	83 e3 e0	 and	 ebx, -32		; ffffffe0H
  000a5	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  000a8	eb 3d		 jmp	 SHORT $LN19@Copy
$LN138@Copy:
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b0	8b d8		 mov	 ebx, eax
  000b2	83 c4 04	 add	 esp, 4
  000b5	85 db		 test	 ebx, ebx
  000b7	75 2e		 jne	 SHORT $LN19@Copy
  000b9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN437@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000be	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  000c1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax
  000c7	40		 inc	 eax
  000c8	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000cb	50		 push	 eax
  000cc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000d0	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  000d5	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  000d8	b8 00 00 00 00	 mov	 eax, $LN432@Copy
  000dd	c3		 ret	 0
$LN432@Copy:
  000de	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000e1	8b 7d 08	 mov	 edi, DWORD PTR __Newres$[ebp]
  000e4	8b 5d e8	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN19@Copy:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

  000e7	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  000ea	85 c0		 test	 eax, eax
  000ec	74 1b		 je	 SHORT $LN270@Copy

; 2208 : 			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),

  000ee	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000f2	72 04		 jb	 SHORT $LN261@Copy
  000f4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f6	eb 02		 jmp	 SHORT $LN262@Copy
$LN261@Copy:
  000f8	8b ce		 mov	 ecx, esi
$LN262@Copy:
  000fa	85 c0		 test	 eax, eax
  000fc	74 0b		 je	 SHORT $LN270@Copy
  000fe	50		 push	 eax
  000ff	51		 push	 ecx
  00100	53		 push	 ebx
  00101	e8 00 00 00 00	 call	 _memcpy
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN270@Copy:

; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);

  00109	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0010c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0010f	72 0b		 jb	 SHORT $LN274@Copy
  00111	40		 inc	 eax
  00112	8b ce		 mov	 ecx, esi
  00114	50		 push	 eax
  00115	ff 36		 push	 DWORD PTR [esi]
  00117	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN274@Copy:
  0011c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00123	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00127	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0012e	72 04		 jb	 SHORT $LN362@Copy
  00130	8b 06		 mov	 eax, DWORD PTR [esi]
  00132	eb 02		 jmp	 SHORT $LN363@Copy
$LN362@Copy:
  00134	8b c6		 mov	 eax, esi
$LN363@Copy:
  00136	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2211 : 		this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);
; 2212 : 		this->_Myres() = _Newres;
; 2213 : 		_Eos(_Oldlen);

  00139	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  0013c	89 1e		 mov	 DWORD PTR [esi], ebx
  0013e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00141	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00145	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00148	72 02		 jb	 SHORT $LN426@Copy
  0014a	8b f3		 mov	 esi, ebx
$LN426@Copy:
  0014c	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 2214 : 		}

  00150	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00153	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015a	59		 pop	 ecx
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00164	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00167	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0016a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0016d	72 0b		 jb	 SHORT $LN156@Copy
  0016f	40		 inc	 eax
  00170	8b ce		 mov	 ecx, esi
  00172	50		 push	 eax
  00173	ff 36		 push	 DWORD PTR [esi]
  00175	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN156@Copy:
  0017a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00181	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00185	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0018c	72 02		 jb	 SHORT $LN245@Copy
  0018e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN245@Copy:

; 2203 : 			_RERAISE;

  00190	6a 00		 push	 0
  00192	6a 00		 push	 0
  00194	c6 06 00	 mov	 BYTE PTR [esi], 0
  00197	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN438@Copy:
$LN434@Copy:
  0019c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2175 : 		if (_Count == 1)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	83 f8 01	 cmp	 eax, 1
  0000b	75 15		 jne	 SHORT $LN2@Chassign

; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);

  0000d	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00011	72 02		 jb	 SHORT $LN16@Chassign
  00013	8b 12		 mov	 edx, DWORD PTR [edx]
$LN16@Chassign:
  00015	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00018	8a 4d 10	 mov	 cl, BYTE PTR __Ch$[ebp]
  0001b	88 0c 02	 mov	 BYTE PTR [edx+eax], cl

; 2179 : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

  00022	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00026	72 02		 jb	 SHORT $LN33@Chassign
  00028	8b 12		 mov	 edx, DWORD PTR [edx]
$LN33@Chassign:
  0002a	50		 push	 eax
  0002b	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0002f	50		 push	 eax
  00030	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00033	03 c2		 add	 eax, edx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2179 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 2168 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2169 : 		allocator_type _Ret(this->_Getal());
; 2170 : 		return (_Ret);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2171 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2144 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (_Traits_compare(this->_Myptr(), this->_Mysize(),

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	80 3a 00	 cmp	 BYTE PTR [edx], 0
  0000b	75 04		 jne	 SHORT $LN5@compare
  0000d	33 f6		 xor	 esi, esi
  0000f	eb 0e		 jmp	 SHORT $LN6@compare
$LN5@compare:
  00011	8b f2		 mov	 esi, edx
  00013	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL35@compare:
  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	46		 inc	 esi
  00019	84 c0		 test	 al, al
  0001b	75 f9		 jne	 SHORT $LL35@compare
  0001d	2b f7		 sub	 esi, edi
$LN6@compare:
  0001f	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00023	8d 79 10	 lea	 edi, DWORD PTR [ecx+16]
  00026	72 02		 jb	 SHORT $LN26@compare
  00028	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@compare:
  0002a	8b 3f		 mov	 edi, DWORD PTR [edi]
  0002c	8b c6		 mov	 eax, esi
  0002e	3b fe		 cmp	 edi, esi
  00030	0f 42 c7	 cmovb	 eax, edi
  00033	50		 push	 eax
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	85 c0		 test	 eax, eax
  00040	75 11		 jne	 SHORT $LN33@compare
  00042	3b f7		 cmp	 esi, edi
  00044	76 09		 jbe	 SHORT $LN36@compare
  00046	5f		 pop	 edi
  00047	83 c8 ff	 or	 eax, -1
  0004a	5e		 pop	 esi

; 2147 : 			_Ptr, _Traits::length(_Ptr)));
; 2148 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN36@compare:

; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (_Traits_compare(this->_Myptr(), this->_Mysize(),

  0004f	1b c0		 sbb	 eax, eax
  00051	f7 d8		 neg	 eax
$LN33@compare:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 2147 : 			_Ptr, _Traits::length(_Ptr)));
; 2148 : 		}

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]

; 2113 : 		if (_Size <= _Max_effective_size)

  00009	39 45 0c	 cmp	 DWORD PTR __Size$[ebp], eax
  0000c	0f 46 45 0c	 cmovbe	 eax, DWORD PTR __Size$[ebp]

; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQBDI0I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Traits_compare, COMDAT

; 2094 : 		{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2095 : 		const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;

  00004	8b 75 14	 mov	 esi, DWORD PTR __Right_size$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  0000d	3b fe		 cmp	 edi, esi
  0000f	0f 42 c7	 cmovb	 eax, edi

; 2096 : 		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  00012	50		 push	 eax
  00013	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00016	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00019	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2097 : 
; 2098 : 		if (_Ans != 0)

  00021	85 c0		 test	 eax, eax
  00023	75 0f		 jne	 SHORT $LN4@Traits_com

; 2099 : 			return (_Ans);
; 2100 : 
; 2101 : 		if (_Left_size < _Right_size)

  00025	3b f7		 cmp	 esi, edi
  00027	76 07		 jbe	 SHORT $LN6@Traits_com

; 2102 : 			return (-1);

  00029	5f		 pop	 edi
  0002a	83 c8 ff	 or	 eax, -1
  0002d	5e		 pop	 esi

; 2105 : 			return (1);
; 2106 : 
; 2107 : 		return (0);
; 2108 : 		}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN6@Traits_com:

; 2103 : 
; 2104 : 		if (_Left_size > _Right_size)

  00030	1b c0		 sbb	 eax, eax
  00032	f7 d8		 neg	 eax
$LN4@Traits_com:
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 2105 : 			return (1);
; 2106 : 
; 2107 : 		return (0);
; 2108 : 		}

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQBDI0I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Traits_compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 2088 : 		{	// return [_Off, _Off + _Count) as new string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 2089 : 		return (_Myt(*this, _Off, _Count, get_allocator()));

  00005	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  00008	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00015	51		 push	 ecx
  00016	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001d	8b ce		 mov	 ecx, esi
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	c6 06 00	 mov	 BYTE PTR [esi], 0
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 2090 : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1934 : 		{	// look for [_Ptr, <null>) beginning before _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1935 : 		_DEBUG_POINTER(_Ptr);
; 1936 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 11		 jne	 SHORT $LN5@rfind
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00018	5e		 pop	 esi

; 1937 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8

; 1935 : 		_DEBUG_POINTER(_Ptr);
; 1936 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));

$LN5@rfind:
  0001d	8b d6		 mov	 edx, esi
  0001f	57		 push	 edi
  00020	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@rfind:
  00023	8a 02		 mov	 al, BYTE PTR [edx]
  00025	42		 inc	 edx
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL7@rfind
  0002a	2b d7		 sub	 edx, edi
  0002c	5f		 pop	 edi
  0002d	52		 push	 edx
  0002e	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00037	5e		 pop	 esi

; 1937 : 		}

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
tv298 = 15						; size = 1
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 1912 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1913 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1914 : 		if (_Count == 0)

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	75 10		 jne	 SHORT $LN5@rfind

; 1915 : 			return (_Off < this->_Mysize() ? _Off

  0000e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00011	39 45 0c	 cmp	 DWORD PTR __Off$[ebp], eax
  00014	5f		 pop	 edi
  00015	0f 42 45 0c	 cmovb	 eax, DWORD PTR __Off$[ebp]
  00019	5b		 pop	 ebx

; 1931 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
$LN5@rfind:

; 1916 : 				: this->_Mysize());	// null always matches
; 1917 : 		if (_Count <= this->_Mysize())

  0001e	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00021	56		 push	 esi
  00022	3b d9		 cmp	 ebx, ecx
  00024	77 5a		 ja	 SHORT $LN93@rfind

; 1918 : 			{	// room for match, look for it
; 1919 : 			const _Elem *_Uptr = this->_Myptr() +

  00026	2b cb		 sub	 ecx, ebx
  00028	39 4d 0c	 cmp	 DWORD PTR __Off$[ebp], ecx
  0002b	0f 42 4d 0c	 cmovb	 ecx, DWORD PTR __Off$[ebp]
  0002f	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00033	72 04		 jb	 SHORT $LN70@rfind
  00035	8b 07		 mov	 eax, DWORD PTR [edi]
  00037	eb 02		 jmp	 SHORT $LN71@rfind
$LN70@rfind:
  00039	8b c7		 mov	 eax, edi
$LN71@rfind:
  0003b	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 1923 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1924 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00041	8a 08		 mov	 cl, BYTE PTR [eax]
  00043	88 4d 0f	 mov	 BYTE PTR tv298[ebp], cl
$LL4@rfind:
  00046	38 0e		 cmp	 BYTE PTR [esi], cl
  00048	75 0f		 jne	 SHORT $LN7@rfind
  0004a	53		 push	 ebx
  0004b	50		 push	 eax
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	85 c0		 test	 eax, eax
  00057	74 14		 je	 SHORT $LN92@rfind
$LN7@rfind:

; 1926 : 				else if (_Uptr == this->_Myptr())

  00059	8b cf		 mov	 ecx, edi
  0005b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00060	3b f0		 cmp	 esi, eax
  00062	74 1c		 je	 SHORT $LN93@rfind

; 1920 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1921 : 					: this->_Mysize() - _Count);
; 1922 : 			for (; ; --_Uptr)

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00067	4e		 dec	 esi
  00068	8a 4d 0f	 mov	 cl, BYTE PTR tv298[ebp]
  0006b	eb d9		 jmp	 SHORT $LL4@rfind
$LN92@rfind:

; 1925 : 					return (_Uptr - this->_Myptr());	// found a match

  0006d	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00071	72 02		 jb	 SHORT $LN87@rfind
  00073	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN87@rfind:
  00075	2b f7		 sub	 esi, edi
  00077	8b c6		 mov	 eax, esi
  00079	5e		 pop	 esi
  0007a	5f		 pop	 edi
  0007b	5b		 pop	 ebx

; 1931 : 		}

  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
$LN93@rfind:
  00080	5e		 pop	 esi
  00081	5f		 pop	 edi

; 1927 : 					break;	// at beginning, no more chance for match
; 1928 : 			}
; 1929 : 
; 1930 : 		return (npos);	// no match

  00082	83 c8 ff	 or	 eax, -1
  00085	5b		 pop	 ebx

; 1931 : 		}

  00086	5d		 pop	 ebp
  00087	c2 0c 00	 ret	 12			; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1895 : 		{	// look for [_Ptr, <null>) beginning at or after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1896 : 		_DEBUG_POINTER(_Ptr);
; 1897 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 11		 jne	 SHORT $LN5@find
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00018	5e		 pop	 esi

; 1898 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8

; 1896 : 		_DEBUG_POINTER(_Ptr);
; 1897 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));

$LN5@find:
  0001d	8b d6		 mov	 edx, esi
  0001f	57		 push	 edi
  00020	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@find:
  00023	8a 02		 mov	 al, BYTE PTR [edx]
  00025	42		 inc	 edx
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL7@find
  0002a	2b d7		 sub	 edx, edi
  0002c	5f		 pop	 edi
  0002d	52		 push	 edx
  0002e	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00037	5e		 pop	 esi

; 1898 : 		}

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1875 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1876 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1877 : 		if (_Count == 0 && _Off <= this->_Mysize())

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000e	85 db		 test	 ebx, ebx
  00010	75 0e		 jne	 SHORT $LN5@find
  00012	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00015	77 09		 ja	 SHORT $LN5@find

; 1878 : 			return (_Off);	// null string always matches (if inside string)

  00017	8b c2		 mov	 eax, edx
  00019	5b		 pop	 ebx

; 1892 : 		}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN5@find:
  00020	56		 push	 esi

; 1879 : 
; 1880 : 		size_type _Nm;
; 1881 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))

  00021	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00024	57		 push	 edi
  00025	3b d6		 cmp	 edx, esi
  00027	73 6a		 jae	 SHORT $LN3@find
  00029	2b f2		 sub	 esi, edx
  0002b	3b de		 cmp	 ebx, esi
  0002d	77 64		 ja	 SHORT $LN3@find

; 1882 : 			{	// room for match, look for it
; 1883 : 			const _Elem *_Uptr, *_Vptr;
; 1884 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	2b c3		 sub	 eax, ebx
  00036	03 f0		 add	 esi, eax
  00038	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0003c	72 02		 jb	 SHORT $LN46@find
  0003e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN46@find:
  00040	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]
$LL4@find:

; 1885 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;

  00043	85 f6		 test	 esi, esi
  00045	74 4c		 je	 SHORT $LN3@find
  00047	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004a	56		 push	 esi
  0004b	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0004e	50		 push	 eax
  0004f	53		 push	 ebx
  00050	e8 00 00 00 00	 call	 _memchr
  00055	8b f8		 mov	 edi, eax
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	85 ff		 test	 edi, edi
  0005c	74 35		 je	 SHORT $LN3@find

; 1887 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

  0005e	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  00061	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	85 c0		 test	 eax, eax
  0006f	74 0a		 je	 SHORT $LN69@find

; 1886 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

  00071	2b df		 sub	 ebx, edi
  00073	4b		 dec	 ebx
  00074	03 f3		 add	 esi, ebx
  00076	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00079	eb c8		 jmp	 SHORT $LL4@find
$LN69@find:

; 1888 : 					return (_Uptr - this->_Myptr());	// found a match

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00082	72 02		 jb	 SHORT $LN64@find
  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN64@find:
  00086	2b f8		 sub	 edi, eax
  00088	8b c7		 mov	 eax, edi
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 1892 : 		}

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
$LN3@find:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 1889 : 			}
; 1890 : 
; 1891 : 		return (npos);	// no match

  00095	83 c8 ff	 or	 eax, -1
  00098	5b		 pop	 ebx

; 1892 : 		}

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1803 : 		{	// test if sequence is empty

  00000	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00004	0f 94 c0	 sete	 al

; 1804 : 		return (this->_Mysize() == 0);
; 1805 : 		}

  00007	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 1793 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcap$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f8		 cmp	 edi, eax
  0000f	77 20		 ja	 SHORT $LN47@reserve
  00011	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00014	74 1b		 je	 SHORT $LN47@reserve

; 1795 : 			{	// change reservation
; 1796 : 			size_type _Size = this->_Mysize();
; 1797 : 			if (_Grow(_Newcap, true))

  00016	6a 01		 push	 1
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0001e	84 c0		 test	 al, al
  00020	74 0f		 je	 SHORT $LN47@reserve

; 1798 : 				_Eos(_Size);

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00026	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00029	72 02		 jb	 SHORT $LN42@reserve
  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
$LN42@reserve:
  0002d	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
$LN47@reserve:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 1799 : 			}
; 1800 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 1780 : 		{	// determine new length, padding with _Ch elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1781 : 		if (_Newsize <= this->_Mysize())

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	77 13		 ja	 SHORT $LN2@resize

; 1782 : 			_Eos(_Newsize);

  0000d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00010	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00014	72 02		 jb	 SHORT $LN25@resize
  00016	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN25@resize:
  00018	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1785 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN2@resize:

; 1783 : 		else
; 1784 : 			append(_Newsize - this->_Mysize(), _Ch);

  00020	2b c2		 sub	 eax, edx
  00022	89 45 08	 mov	 DWORD PTR __Newsize$[ebp], eax

; 1785 : 		}

  00025	5d		 pop	 ebp

; 1783 : 		else
; 1784 : 			append(_Newsize - this->_Mysize(), _Ch);

  00026	e9 00 00 00 00	 jmp	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 1775 : 		{	// determine new length, padding with null elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1776 : 		resize(_Newsize, _Elem());

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	77 13		 ja	 SHORT $LN4@resize
  0000d	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00010	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00014	72 02		 jb	 SHORT $LN27@resize
  00016	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN27@resize:
  00018	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1777 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4

; 1776 : 		resize(_Newsize, _Elem());

$LN4@resize:
  00020	6a 00		 push	 0
  00022	2b c2		 sub	 eax, edx
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1777 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1772 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1765 : 		return (this->_Mysize());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1766 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1760 : 		return (this->_Mysize());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1761 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1743 : 		return (this->_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN13@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1744 : 		}

  00008	c3		 ret	 0

; 1743 : 		return (this->_Myptr());

$LN13@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1744 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1692 : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1693 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1694 : 		if (this->_Mysize() < _Off)	// sic
; 1695 : 			_DEBUG_ERROR("string subscript out of range");
; 1696 : 
; 1697 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1698 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1699 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1700 : 
; 1701 : 		return (this->_Myptr()[_Off]);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000a	72 02		 jb	 SHORT $LN13@operator
  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@operator:
  0000e	03 c1		 add	 eax, ecx

; 1702 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1679 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1680 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1681 : 		if (this->_Mysize() < _Off)	// sic
; 1682 : 			_DEBUG_ERROR("string subscript out of range");
; 1683 : 
; 1684 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1685 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1686 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1687 : 
; 1688 : 		return (this->_Myptr()[_Off]);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000a	72 02		 jb	 SHORT $LN13@operator
  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@operator:
  0000e	03 c1		 add	 eax, ecx

; 1689 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1612 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1613 : 		auto _Mydata = &this->_Get_data();
; 1614 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 10		 jb	 SHORT $LN11@end
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000e	03 c8		 add	 ecx, eax
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	89 08		 mov	 DWORD PTR [eax], ecx

; 1615 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4

; 1613 : 		auto _Mydata = &this->_Get_data();
; 1614 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

$LN11@end:
  00019	8b c1		 mov	 eax, ecx
  0001b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0001e	03 c8		 add	 ecx, eax
  00020	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00023	89 08		 mov	 DWORD PTR [eax], ecx

; 1615 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1606 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1607 : 		auto _Mydata = &this->_Get_data();
; 1608 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 10		 jb	 SHORT $LN11@end
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0000e	03 c8		 add	 ecx, eax
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	89 08		 mov	 DWORD PTR [eax], ecx

; 1609 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4

; 1607 : 		auto _Mydata = &this->_Get_data();
; 1608 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

$LN11@end:
  00019	8b c1		 mov	 eax, ecx
  0001b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0001e	03 c8		 add	 ecx, eax
  00020	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00023	89 08		 mov	 DWORD PTR [eax], ecx

; 1609 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1600 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1601 : 		auto _Mydata = &this->_Get_data();
; 1602 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	72 02		 jb	 SHORT $LN11@begin
  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN11@begin:
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1603 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1594 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1595 : 		auto _Mydata = &this->_Get_data();
; 1596 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	72 02		 jb	 SHORT $LN11@begin
  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN11@begin:
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1597 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx

; 1584 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1585 : 		if (_First2 == _Last2)

  00003	8b 45 10	 mov	 eax, DWORD PTR __First2$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR __Last2$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	3b c2		 cmp	 eax, edx
  0000e	75 36		 jne	 SHORT $LN2@replace

; 1586 : 			erase(_First - begin(), _Last - _First);

  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00013	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00016	2b c8		 sub	 ecx, eax
  00018	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001c	72 14		 jb	 SHORT $LN24@replace
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	2b c2		 sub	 eax, edx
  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1589 : 				&*_First2, _Last2 - _First2);
; 1590 : 		return (*this);

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi

; 1591 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H

; 1586 : 			erase(_First - begin(), _Last - _First);

$LN24@replace:
  00032	8b d6		 mov	 edx, esi
  00034	51		 push	 ecx
  00035	2b c2		 sub	 eax, edx
  00037	8b ce		 mov	 ecx, esi
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1589 : 				&*_First2, _Last2 - _First2);
; 1590 : 		return (*this);

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi

; 1591 : 		}

  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
$LN2@replace:

; 1587 : 		else
; 1588 : 			replace(_First - begin(), _Last - _First,

  00046	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00049	2b d0		 sub	 edx, eax
  0004b	53		 push	 ebx
  0004c	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0004f	2b d9		 sub	 ebx, ecx
  00051	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00055	57		 push	 edi
  00056	72 04		 jb	 SHORT $LN76@replace
  00058	8b 3e		 mov	 edi, DWORD PTR [esi]
  0005a	eb 02		 jmp	 SHORT $LN77@replace
$LN76@replace:
  0005c	8b fe		 mov	 edi, esi
$LN77@replace:
  0005e	52		 push	 edx
  0005f	50		 push	 eax
  00060	2b cf		 sub	 ecx, edi
  00062	53		 push	 ebx
  00063	51		 push	 ecx
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
  0006b	5f		 pop	 edi
  0006c	5b		 pop	 ebx

; 1589 : 				&*_First2, _Last2 - _First2);
; 1590 : 		return (*this);

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1591 : 		}

  00070	5d		 pop	 ebp
  00071	c2 10 00	 ret	 16			; 00000010H
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z
_TEXT	SEGMENT
__Nm$1$ = -8						; size = 4
tv890 = -4						; size = 4
tv887 = -4						; size = 4
__Off$ = 8						; size = 4
tv891 = 12						; size = 4
tv888 = 12						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx

; 1453 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1454 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1455 : 		if (_Inside(_Ptr))

  00003	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi
  0000d	85 d2		 test	 edx, edx
  0000f	74 4d		 je	 SHORT $LN2@replace
  00011	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00014	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00017	72 04		 jb	 SHORT $LN24@replace
  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	eb 02		 jmp	 SHORT $LN25@replace
$LN24@replace:
  0001d	8b c6		 mov	 eax, esi
$LN25@replace:
  0001f	3b d0		 cmp	 edx, eax
  00021	72 3b		 jb	 SHORT $LN2@replace
  00023	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00026	72 04		 jb	 SHORT $LN38@replace
  00028	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002a	eb 02		 jmp	 SHORT $LN39@replace
$LN38@replace:
  0002c	8b fe		 mov	 edi, esi
$LN39@replace:
  0002e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00031	03 c7		 add	 eax, edi
  00033	3b c2		 cmp	 eax, edx
  00035	76 27		 jbe	 SHORT $LN2@replace

; 1456 : 			return (replace(_Off, _N0, *this,

  00037	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003a	72 04		 jb	 SHORT $LN61@replace
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	eb 02		 jmp	 SHORT $LN62@replace
$LN61@replace:
  00040	8b c6		 mov	 eax, esi
$LN62@replace:
  00042	ff 75 14	 push	 DWORD PTR __Count$[ebp]
  00045	2b d0		 sub	 edx, eax
  00047	8b ce		 mov	 ecx, esi
  00049	52		 push	 edx
  0004a	56		 push	 esi
  0004b	ff 75 0c	 push	 DWORD PTR __N0$[ebp]
  0004e	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  00051	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1480 : 		}

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 10 00	 ret	 16			; 00000010H
$LN2@replace:

; 1457 : 				_Ptr - this->_Myptr(),
; 1458 : 				_Count));	// substring, replace carefully
; 1459 : 		_Check_offset(_Off);

  0005e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00061	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00064	3b c8		 cmp	 ecx, eax
  00066	0f 82 61 01 00
	00		 jb	 $LN312@replace

; 1460 : 		_N0 = _Clamp_suffix_size(_Off, _N0);
; 1461 : 		if (npos - _Count <= this->_Mysize() - _N0)

  0006c	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  0006f	8b f9		 mov	 edi, ecx
  00071	2b f8		 sub	 edi, eax
  00073	8b c2		 mov	 eax, edx
  00075	53		 push	 ebx
  00076	8b 5d 0c	 mov	 ebx, DWORD PTR __N0$[ebp]
  00079	f7 d0		 not	 eax
  0007b	3b df		 cmp	 ebx, edi
  0007d	0f 47 df	 cmova	 ebx, edi
  00080	2b cb		 sub	 ecx, ebx
  00082	3b c1		 cmp	 eax, ecx
  00084	0f 86 4d 01 00
	00		 jbe	 $LN314@replace

; 1463 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;

  0008a	2b fb		 sub	 edi, ebx
  0008c	89 7d f8	 mov	 DWORD PTR __Nm$1$[ebp], edi

; 1464 : 
; 1465 : 		if (_Count < _N0)

  0008f	3b d3		 cmp	 edx, ebx
  00091	73 43		 jae	 SHORT $LN145@replace

; 1466 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00093	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00096	83 f8 10	 cmp	 eax, 16			; 00000010H
  00099	72 07		 jb	 SHORT $LN124@replace
  0009b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009d	89 4d 0c	 mov	 DWORD PTR tv891[ebp], ecx
  000a0	eb 03		 jmp	 SHORT $LN125@replace
$LN124@replace:
  000a2	89 75 0c	 mov	 DWORD PTR tv891[ebp], esi
$LN125@replace:
  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 07		 jb	 SHORT $LN138@replace
  000aa	8b 06		 mov	 eax, DWORD PTR [esi]
  000ac	89 45 fc	 mov	 DWORD PTR tv890[ebp], eax
  000af	eb 03		 jmp	 SHORT $LN139@replace
$LN138@replace:
  000b1	89 75 fc	 mov	 DWORD PTR tv890[ebp], esi
$LN139@replace:
  000b4	85 ff		 test	 edi, edi
  000b6	74 1e		 je	 SHORT $LN145@replace
  000b8	8b 45 0c	 mov	 eax, DWORD PTR tv891[ebp]
  000bb	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  000be	03 c3		 add	 eax, ebx
  000c0	57		 push	 edi
  000c1	50		 push	 eax
  000c2	8b 45 fc	 mov	 eax, DWORD PTR tv890[ebp]
  000c5	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  000c8	03 c2		 add	 eax, edx
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _memmove
  000d0	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN145@replace:

; 1467 : 				this->_Myptr() + _Off + _N0,
; 1468 : 				_Nm);	// smaller hole, move tail up
; 1469 : 		const size_type _Num = this->_Mysize() + _Count - _N0;

  000d6	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d9	8b f8		 mov	 edi, eax
  000db	2b fb		 sub	 edi, ebx
  000dd	03 fa		 add	 edi, edx

; 1470 : 		if ((0 < _Count || 0 < _N0)
; 1471 : 			&& _Grow(_Num))

  000df	85 d2		 test	 edx, edx
  000e1	75 08		 jne	 SHORT $LN6@replace
  000e3	85 db		 test	 ebx, ebx
  000e5	0f 84 d7 00 00
	00		 je	 $LN306@replace
$LN6@replace:
  000eb	83 ff fe	 cmp	 edi, -2			; fffffffeH
  000ee	0f 87 ed 00 00
	00		 ja	 $LN315@replace
  000f4	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  000f7	73 27		 jae	 SHORT $LN157@replace
  000f9	50		 push	 eax
  000fa	57		 push	 edi
  000fb	8b ce		 mov	 ecx, esi
  000fd	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00102	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  00105	85 ff		 test	 edi, edi
  00107	0f 84 b5 00 00
	00		 je	 $LN306@replace
$LN311@replace:

; 1472 : 			{	// make room and rearrange
; 1473 : 			if (_N0 < _Count)

  0010d	3b da		 cmp	 ebx, edx
  0010f	73 71		 jae	 SHORT $LN272@replace

; 1474 : 				_Traits::move(this->_Myptr() + _Off + _Count,

  00111	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00114	83 f8 10	 cmp	 eax, 16			; 00000010H
  00117	72 32		 jb	 SHORT $LN251@replace
  00119	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011b	89 4d 0c	 mov	 DWORD PTR tv888[ebp], ecx
  0011e	eb 2e		 jmp	 SHORT $LN252@replace

; 1470 : 		if ((0 < _Count || 0 < _N0)
; 1471 : 			&& _Grow(_Num))

$LN157@replace:
  00120	85 ff		 test	 edi, edi
  00122	75 e9		 jne	 SHORT $LN311@replace
  00124	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00127	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0012b	72 10		 jb	 SHORT $LN234@replace
  0012d	8b 06		 mov	 eax, DWORD PTR [esi]
  0012f	5b		 pop	 ebx
  00130	5f		 pop	 edi
  00131	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1478 : 			}
; 1479 : 		return (*this);

  00134	8b c6		 mov	 eax, esi
  00136	5e		 pop	 esi

; 1480 : 		}

  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 10 00	 ret	 16			; 00000010H

; 1470 : 		if ((0 < _Count || 0 < _N0)
; 1471 : 			&& _Grow(_Num))

$LN234@replace:
  0013d	8b c6		 mov	 eax, esi
  0013f	5b		 pop	 ebx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1480 : 		}

  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 10 00	 ret	 16			; 00000010H

; 1474 : 				_Traits::move(this->_Myptr() + _Off + _Count,

$LN251@replace:
  0014b	89 75 0c	 mov	 DWORD PTR tv888[ebp], esi
$LN252@replace:
  0014e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00151	72 07		 jb	 SHORT $LN265@replace
  00153	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00155	89 4d fc	 mov	 DWORD PTR tv887[ebp], ecx
  00158	eb 03		 jmp	 SHORT $LN266@replace
$LN265@replace:
  0015a	89 75 fc	 mov	 DWORD PTR tv887[ebp], esi
$LN266@replace:
  0015d	8b 45 f8	 mov	 eax, DWORD PTR __Nm$1$[ebp]
  00160	85 c0		 test	 eax, eax
  00162	74 1e		 je	 SHORT $LN272@replace
  00164	50		 push	 eax
  00165	8b 45 0c	 mov	 eax, DWORD PTR tv888[ebp]
  00168	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0016b	03 c3		 add	 eax, ebx
  0016d	50		 push	 eax
  0016e	8b 45 fc	 mov	 eax, DWORD PTR tv887[ebp]
  00171	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00174	03 c2		 add	 eax, edx
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 _memmove
  0017c	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN272@replace:

; 1475 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1476 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole

  00182	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00186	72 04		 jb	 SHORT $LN283@replace
  00188	8b 06		 mov	 eax, DWORD PTR [esi]
  0018a	eb 02		 jmp	 SHORT $LN284@replace
$LN283@replace:
  0018c	8b c6		 mov	 eax, esi
$LN284@replace:
  0018e	85 d2		 test	 edx, edx
  00190	74 10		 je	 SHORT $LN290@replace
  00192	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00195	52		 push	 edx
  00196	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _memcpy
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN290@replace:

; 1477 : 			_Eos(_Num);

  001a2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  001a6	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  001a9	72 11		 jb	 SHORT $LN301@replace
  001ab	8b 06		 mov	 eax, DWORD PTR [esi]
  001ad	5b		 pop	 ebx
  001ae	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1478 : 			}
; 1479 : 		return (*this);

  001b2	8b c6		 mov	 eax, esi
  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi

; 1480 : 		}

  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c2 10 00	 ret	 16			; 00000010H

; 1477 : 			_Eos(_Num);

$LN301@replace:
  001bc	8b c6		 mov	 eax, esi
  001be	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN306@replace:

; 1478 : 			}
; 1479 : 		return (*this);

  001c2	5b		 pop	 ebx
  001c3	5f		 pop	 edi
  001c4	8b c6		 mov	 eax, esi
  001c6	5e		 pop	 esi

; 1480 : 		}

  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 10 00	 ret	 16			; 00000010H
$LN312@replace:

; 1457 : 				_Ptr - this->_Myptr(),
; 1458 : 				_Count));	// substring, replace carefully
; 1459 : 		_Check_offset(_Off);

  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  001d2	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN316@replace:
$LN314@replace:

; 1462 : 			_Xlen();	// result too long

  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  001dc	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN317@replace:
$LN315@replace:

; 1470 : 		if ((0 < _Count || 0 < _N0)
; 1471 : 			&& _Grow(_Num))

  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  001e6	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN318@replace:
$LN309@replace:
  001eb	cc		 int	 3
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z
_TEXT	SEGMENT
tv1828 = -8						; size = 4
tv1825 = -8						; size = 4
__Max_effective_size$1$ = -8				; size = 4
__Nm$1$ = -4						; size = 4
tv1824 = 8						; size = 4
tv1821 = 8						; size = 4
tv1817 = 8						; size = 4
tv1813 = 8						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
tv1809 = 16						; size = 4
tv1807 = 16						; size = 4
tv1805 = 16						; size = 4
__Right$ = 16						; size = 4
tv1819 = 20						; size = 4
__Roff$ = 20						; size = 4
tv1798 = 24						; size = 4
__Newsize$1$ = 24					; size = 4
__Count$ = 24						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx

; 1389 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1390 : 		_Check_offset(_Off);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Off$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	3b c3		 cmp	 eax, ebx
  00013	0f 82 95 03 00
	00		 jb	 $LN600@replace

; 1391 : 		_Right._Check_offset(_Roff);

  00019	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001c	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  0001f	3b 7d 14	 cmp	 edi, DWORD PTR __Roff$[ebp]
  00022	0f 82 90 03 00
	00		 jb	 $LN602@replace

; 1392 : 		_N0 = _Clamp_suffix_size(_Off, _N0);

  00028	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  0002b	2b c3		 sub	 eax, ebx
  0002d	3b d0		 cmp	 edx, eax
  0002f	89 45 fc	 mov	 DWORD PTR __Nm$1$[ebp], eax
  00032	0f 47 d0	 cmova	 edx, eax

; 1393 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00035	2b 7d 14	 sub	 edi, DWORD PTR __Roff$[ebp]

; 1394 : 		if (npos - _Count <= this->_Mysize() - _N0)

  00038	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0003b	89 7d f8	 mov	 DWORD PTR __Max_effective_size$1$[ebp], edi
  0003e	8b 7d 18	 mov	 edi, DWORD PTR __Count$[ebp]
  00041	3b 7d f8	 cmp	 edi, DWORD PTR __Max_effective_size$1$[ebp]
  00044	89 55 0c	 mov	 DWORD PTR __N0$[ebp], edx
  00047	0f 47 7d f8	 cmova	 edi, DWORD PTR __Max_effective_size$1$[ebp]
  0004b	2b c2		 sub	 eax, edx
  0004d	89 45 18	 mov	 DWORD PTR tv1798[ebp], eax
  00050	8b c7		 mov	 eax, edi
  00052	f7 d0		 not	 eax
  00054	3b 45 18	 cmp	 eax, DWORD PTR tv1798[ebp]
  00057	0f 86 65 03 00
	00		 jbe	 $LN603@replace

; 1396 : 
; 1397 : 		const size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1398 : 		const size_type _Newsize = this->_Mysize() + _Count - _N0;

  0005d	8b 5d 18	 mov	 ebx, DWORD PTR tv1798[ebp]
  00060	8b 45 fc	 mov	 eax, DWORD PTR __Nm$1$[ebp]
  00063	03 df		 add	 ebx, edi
  00065	2b c2		 sub	 eax, edx
  00067	89 5d 18	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1399 : 		if (this->_Mysize() < _Newsize)

  0006a	39 5e 10	 cmp	 DWORD PTR [esi+16], ebx
  0006d	8b 5d 08	 mov	 ebx, DWORD PTR __Off$[ebp]
  00070	89 45 fc	 mov	 DWORD PTR __Nm$1$[ebp], eax
  00073	73 53		 jae	 SHORT $LN194@replace

; 1400 : 			_Grow(_Newsize);

  00075	83 7d 18 fe	 cmp	 DWORD PTR __Newsize$1$[ebp], -2 ; fffffffeH
  00079	0f 87 4d 03 00
	00		 ja	 $LN604@replace
  0007f	8b 5d 18	 mov	 ebx, DWORD PTR __Newsize$1$[ebp]
  00082	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00085	8b 5d 08	 mov	 ebx, DWORD PTR __Off$[ebp]
  00088	73 18		 jae	 SHORT $LN112@replace
  0008a	ff 76 10	 push	 DWORD PTR [esi+16]
  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 75 18	 push	 DWORD PTR __Newsize$1$[ebp]
  00092	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00097	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0009a	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  0009d	8b 45 fc	 mov	 eax, DWORD PTR __Nm$1$[ebp]
  000a0	eb 26		 jmp	 SHORT $LN194@replace
$LN112@replace:
  000a2	83 7d 18 00	 cmp	 DWORD PTR __Newsize$1$[ebp], 0
  000a6	75 20		 jne	 SHORT $LN194@replace
  000a8	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  000af	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b3	72 07		 jb	 SHORT $LN189@replace
  000b5	8b 1e		 mov	 ebx, DWORD PTR [esi]
  000b7	89 5d f8	 mov	 DWORD PTR tv1828[ebp], ebx
  000ba	eb 03		 jmp	 SHORT $LN190@replace
$LN189@replace:
  000bc	89 75 f8	 mov	 DWORD PTR tv1828[ebp], esi
$LN190@replace:
  000bf	8b 5d f8	 mov	 ebx, DWORD PTR tv1828[ebp]
  000c2	c6 03 00	 mov	 BYTE PTR [ebx], 0
  000c5	8b 5d 08	 mov	 ebx, DWORD PTR __Off$[ebp]
$LN194@replace:

; 1401 : 
; 1402 : 		if (_Count == _N0)

  000c8	3b fa		 cmp	 edi, edx
  000ca	75 2b		 jne	 SHORT $LN4@replace

; 1403 : 			{	// only one movement required, so _Traits::move handles any overlap
; 1404 : 			_Traits::move(this->_Myptr() + _Off,

  000cc	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  000d0	72 02		 jb	 SHORT $LN206@replace
  000d2	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN206@replace:
  000d4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000d8	72 04		 jb	 SHORT $LN220@replace
  000da	8b 16		 mov	 edx, DWORD PTR [esi]
  000dc	eb 02		 jmp	 SHORT $LN221@replace
$LN220@replace:
  000de	8b d6		 mov	 edx, esi
$LN221@replace:
  000e0	85 ff		 test	 edi, edi
  000e2	0f 84 9a 02 00
	00		 je	 $LN579@replace
  000e8	8b 45 14	 mov	 eax, DWORD PTR __Roff$[ebp]
  000eb	03 c1		 add	 eax, ecx
  000ed	57		 push	 edi
  000ee	50		 push	 eax
  000ef	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  000f2	e9 82 02 00 00	 jmp	 $LN598@replace
$LN4@replace:

; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (this != &_Right)

  000f7	3b f1		 cmp	 esi, ecx
  000f9	74 77		 je	 SHORT $LN6@replace

; 1408 : 			{	// no overlap, just move down and copy in new stuff
; 1409 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  000fb	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000ff	72 0a		 jb	 SHORT $LN238@replace
  00101	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00103	89 5d f8	 mov	 DWORD PTR tv1825[ebp], ebx
  00106	8b 5d 08	 mov	 ebx, DWORD PTR __Off$[ebp]
  00109	eb 03		 jmp	 SHORT $LN239@replace
$LN238@replace:
  0010b	89 75 f8	 mov	 DWORD PTR tv1825[ebp], esi
$LN239@replace:
  0010e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00112	72 0a		 jb	 SHORT $LN252@replace
  00114	8b 16		 mov	 edx, DWORD PTR [esi]
  00116	89 55 08	 mov	 DWORD PTR tv1824[ebp], edx
  00119	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  0011c	eb 03		 jmp	 SHORT $LN253@replace
$LN252@replace:
  0011e	89 75 08	 mov	 DWORD PTR tv1824[ebp], esi
$LN253@replace:
  00121	85 c0		 test	 eax, eax
  00123	74 1c		 je	 SHORT $LN259@replace
  00125	50		 push	 eax
  00126	8b 45 f8	 mov	 eax, DWORD PTR tv1825[ebp]
  00129	03 c3		 add	 eax, ebx
  0012b	03 c2		 add	 eax, edx
  0012d	50		 push	 eax
  0012e	8b 45 08	 mov	 eax, DWORD PTR tv1824[ebp]
  00131	03 c3		 add	 eax, ebx
  00133	03 c7		 add	 eax, edi
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _memmove
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN259@replace:

; 1410 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1411 : 			_Traits::copy(this->_Myptr() + _Off,

  00141	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00145	72 02		 jb	 SHORT $LN270@replace
  00147	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN270@replace:
  00149	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0014d	72 04		 jb	 SHORT $LN284@replace
  0014f	8b 16		 mov	 edx, DWORD PTR [esi]
  00151	eb 02		 jmp	 SHORT $LN285@replace
$LN284@replace:
  00153	8b d6		 mov	 edx, esi
$LN285@replace:
  00155	85 ff		 test	 edi, edi
  00157	0f 84 25 02 00
	00		 je	 $LN579@replace
  0015d	8b 45 14	 mov	 eax, DWORD PTR __Roff$[ebp]
  00160	03 c1		 add	 eax, ecx
  00162	57		 push	 edi
  00163	50		 push	 eax
  00164	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 _memcpy
  0016d	e9 0d 02 00 00	 jmp	 $LN599@replace
$LN6@replace:

; 1412 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1413 : 			}
; 1414 : 		else if (_Count < _N0)

  00172	3b fa		 cmp	 edi, edx
  00174	73 73		 jae	 SHORT $LN8@replace

; 1415 : 			{	// hole doesn't get larger, just copy in substring
; 1416 : 			_Traits::move(this->_Myptr() + _Off,

  00176	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00179	83 f8 10	 cmp	 eax, 16			; 00000010H
  0017c	72 07		 jb	 SHORT $LN302@replace
  0017e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00180	89 4d 08	 mov	 DWORD PTR tv1821[ebp], ecx
  00183	eb 03		 jmp	 SHORT $LN303@replace
$LN302@replace:
  00185	89 75 08	 mov	 DWORD PTR tv1821[ebp], esi
$LN303@replace:
  00188	83 f8 10	 cmp	 eax, 16			; 00000010H
  0018b	72 04		 jb	 SHORT $LN316@replace
  0018d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0018f	eb 02		 jmp	 SHORT $LN317@replace
$LN316@replace:
  00191	8b ce		 mov	 ecx, esi
$LN317@replace:
  00193	85 ff		 test	 edi, edi
  00195	74 17		 je	 SHORT $LN323@replace
  00197	8b 45 08	 mov	 eax, DWORD PTR tv1821[ebp]
  0019a	03 45 14	 add	 eax, DWORD PTR __Roff$[ebp]
  0019d	57		 push	 edi
  0019e	50		 push	 eax
  0019f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _memmove
  001a8	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  001ab	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN323@replace:

; 1417 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1418 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  001ae	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001b1	83 f8 10	 cmp	 eax, 16			; 00000010H
  001b4	72 07		 jb	 SHORT $LN334@replace
  001b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b8	89 4d 14	 mov	 DWORD PTR tv1819[ebp], ecx
  001bb	eb 03		 jmp	 SHORT $LN335@replace
$LN334@replace:
  001bd	89 75 14	 mov	 DWORD PTR tv1819[ebp], esi
$LN335@replace:
  001c0	83 f8 10	 cmp	 eax, 16			; 00000010H
  001c3	72 04		 jb	 SHORT $LN348@replace
  001c5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001c7	eb 02		 jmp	 SHORT $LN349@replace
$LN348@replace:
  001c9	8b ce		 mov	 ecx, esi
$LN349@replace:
  001cb	8b 45 fc	 mov	 eax, DWORD PTR __Nm$1$[ebp]
  001ce	85 c0		 test	 eax, eax
  001d0	0f 84 ac 01 00
	00		 je	 $LN579@replace
  001d6	50		 push	 eax
  001d7	8b 45 14	 mov	 eax, DWORD PTR tv1819[ebp]
  001da	03 c3		 add	 eax, ebx
  001dc	03 c2		 add	 eax, edx
  001de	50		 push	 eax
  001df	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001e2	03 c7		 add	 eax, edi
  001e4	e9 90 01 00 00	 jmp	 $LN598@replace
$LN8@replace:

; 1419 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1420 : 			}
; 1421 : 		else if (_Roff <= _Off)

  001e9	8b 4d 14	 mov	 ecx, DWORD PTR __Roff$[ebp]
  001ec	3b cb		 cmp	 ecx, ebx
  001ee	77 6b		 ja	 SHORT $LN10@replace

; 1422 : 			{	// hole gets larger, substring begins before hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  001f0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001f3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001f6	72 0a		 jb	 SHORT $LN366@replace
  001f8	8b 16		 mov	 edx, DWORD PTR [esi]
  001fa	89 55 08	 mov	 DWORD PTR tv1817[ebp], edx
  001fd	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  00200	eb 03		 jmp	 SHORT $LN367@replace
$LN366@replace:
  00202	89 75 08	 mov	 DWORD PTR tv1817[ebp], esi
$LN367@replace:
  00205	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00208	72 04		 jb	 SHORT $LN380@replace
  0020a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0020c	eb 02		 jmp	 SHORT $LN381@replace
$LN380@replace:
  0020e	8b ce		 mov	 ecx, esi
$LN381@replace:
  00210	85 c0		 test	 eax, eax
  00212	74 17		 je	 SHORT $LN387@replace
  00214	50		 push	 eax
  00215	8b 45 08	 mov	 eax, DWORD PTR tv1817[ebp]
  00218	03 c3		 add	 eax, ebx
  0021a	03 c2		 add	 eax, edx
  0021c	50		 push	 eax
  0021d	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00220	03 c7		 add	 eax, edi
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _memmove
  00228	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN387@replace:

; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,

  0022b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0022e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00231	72 04		 jb	 SHORT $LN398@replace
  00233	8b 16		 mov	 edx, DWORD PTR [esi]
  00235	eb 02		 jmp	 SHORT $LN399@replace
$LN398@replace:
  00237	8b d6		 mov	 edx, esi
$LN399@replace:
  00239	83 f8 10	 cmp	 eax, 16			; 00000010H
  0023c	72 04		 jb	 SHORT $LN412@replace
  0023e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00240	eb 02		 jmp	 SHORT $LN413@replace
$LN412@replace:
  00242	8b ce		 mov	 ecx, esi
$LN413@replace:
  00244	85 ff		 test	 edi, edi
  00246	0f 84 36 01 00
	00		 je	 $LN579@replace
  0024c	8b 45 14	 mov	 eax, DWORD PTR __Roff$[ebp]
  0024f	03 c2		 add	 eax, edx
  00251	57		 push	 edi
  00252	50		 push	 eax
  00253	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00256	e9 1e 01 00 00	 jmp	 $LN598@replace
$LN10@replace:

; 1426 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1427 : 			}
; 1428 : 		else if (_Off + _N0 <= _Roff)

  0025b	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0025e	3b c1		 cmp	 eax, ecx

; 1429 : 			{	// hole gets larger, substring begins after hole
; 1430 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00260	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00263	77 6d		 ja	 SHORT $LN12@replace
  00265	83 f8 10	 cmp	 eax, 16			; 00000010H
  00268	72 07		 jb	 SHORT $LN430@replace
  0026a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0026c	89 4d 08	 mov	 DWORD PTR tv1813[ebp], ecx
  0026f	eb 03		 jmp	 SHORT $LN431@replace
$LN430@replace:
  00271	89 75 08	 mov	 DWORD PTR tv1813[ebp], esi
$LN431@replace:
  00274	83 f8 10	 cmp	 eax, 16			; 00000010H
  00277	72 04		 jb	 SHORT $LN444@replace
  00279	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0027b	eb 02		 jmp	 SHORT $LN445@replace
$LN444@replace:
  0027d	8b ce		 mov	 ecx, esi
$LN445@replace:
  0027f	8b 45 fc	 mov	 eax, DWORD PTR __Nm$1$[ebp]
  00282	85 c0		 test	 eax, eax
  00284	74 1a		 je	 SHORT $LN451@replace
  00286	50		 push	 eax
  00287	8b 45 08	 mov	 eax, DWORD PTR tv1813[ebp]
  0028a	03 c3		 add	 eax, ebx
  0028c	03 c2		 add	 eax, edx
  0028e	50		 push	 eax
  0028f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00292	03 c7		 add	 eax, edi
  00294	50		 push	 eax
  00295	e8 00 00 00 00	 call	 _memmove
  0029a	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN451@replace:

; 1431 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1432 : 			_Traits::move(this->_Myptr() + _Off,

  002a0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  002a3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  002a6	72 04		 jb	 SHORT $LN462@replace
  002a8	8b 06		 mov	 eax, DWORD PTR [esi]
  002aa	eb 02		 jmp	 SHORT $LN463@replace
$LN462@replace:
  002ac	8b c6		 mov	 eax, esi
$LN463@replace:
  002ae	83 f9 10	 cmp	 ecx, 16			; 00000010H
  002b1	72 04		 jb	 SHORT $LN476@replace
  002b3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002b5	eb 02		 jmp	 SHORT $LN477@replace
$LN476@replace:
  002b7	8b ce		 mov	 ecx, esi
$LN477@replace:
  002b9	85 ff		 test	 edi, edi
  002bb	0f 84 c1 00 00
	00		 je	 $LN579@replace
  002c1	2b c2		 sub	 eax, edx
  002c3	03 45 14	 add	 eax, DWORD PTR __Roff$[ebp]
  002c6	03 c7		 add	 eax, edi
  002c8	57		 push	 edi
  002c9	50		 push	 eax
  002ca	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 1433 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1434 : 				_Count);	// fill hole
; 1435 : 			}
; 1436 : 		else

  002cd	e9 a7 00 00 00	 jmp	 $LN598@replace
$LN12@replace:

; 1437 : 			{	// hole gets larger, substring begins in hole
; 1438 : 			_Traits::move(this->_Myptr() + _Off,

  002d2	83 f8 10	 cmp	 eax, 16			; 00000010H
  002d5	72 07		 jb	 SHORT $LN494@replace
  002d7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002d9	89 4d 10	 mov	 DWORD PTR tv1809[ebp], ecx
  002dc	eb 03		 jmp	 SHORT $LN495@replace
$LN494@replace:
  002de	89 75 10	 mov	 DWORD PTR tv1809[ebp], esi
$LN495@replace:
  002e1	83 f8 10	 cmp	 eax, 16			; 00000010H
  002e4	72 04		 jb	 SHORT $LN508@replace
  002e6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e8	eb 02		 jmp	 SHORT $LN509@replace
$LN508@replace:
  002ea	8b ce		 mov	 ecx, esi
$LN509@replace:
  002ec	85 d2		 test	 edx, edx
  002ee	74 17		 je	 SHORT $LN515@replace
  002f0	8b 45 10	 mov	 eax, DWORD PTR tv1809[ebp]
  002f3	03 45 14	 add	 eax, DWORD PTR __Roff$[ebp]
  002f6	52		 push	 edx
  002f7	50		 push	 eax
  002f8	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 _memmove
  00301	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  00304	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN515@replace:

; 1439 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00307	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0030a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0030d	72 07		 jb	 SHORT $LN526@replace
  0030f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00311	89 4d 10	 mov	 DWORD PTR tv1807[ebp], ecx
  00314	eb 03		 jmp	 SHORT $LN527@replace
$LN526@replace:
  00316	89 75 10	 mov	 DWORD PTR tv1807[ebp], esi
$LN527@replace:
  00319	83 f8 10	 cmp	 eax, 16			; 00000010H
  0031c	72 04		 jb	 SHORT $LN540@replace
  0031e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00320	eb 02		 jmp	 SHORT $LN541@replace
$LN540@replace:
  00322	8b ce		 mov	 ecx, esi
$LN541@replace:
  00324	8b 45 fc	 mov	 eax, DWORD PTR __Nm$1$[ebp]
  00327	85 c0		 test	 eax, eax
  00329	74 17		 je	 SHORT $LN547@replace
  0032b	50		 push	 eax
  0032c	8b 45 10	 mov	 eax, DWORD PTR tv1807[ebp]
  0032f	03 c3		 add	 eax, ebx
  00331	03 c2		 add	 eax, edx
  00333	50		 push	 eax
  00334	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00337	03 c7		 add	 eax, edi
  00339	50		 push	 eax
  0033a	e8 00 00 00 00	 call	 _memmove
  0033f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN547@replace:

; 1441 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1442 : 			_Traits::move(this->_Myptr() + _Off + _N0,

  00342	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00345	83 f8 10	 cmp	 eax, 16			; 00000010H
  00348	72 07		 jb	 SHORT $LN558@replace
  0034a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0034c	89 4d 10	 mov	 DWORD PTR tv1805[ebp], ecx
  0034f	eb 03		 jmp	 SHORT $LN559@replace
$LN558@replace:
  00351	89 75 10	 mov	 DWORD PTR tv1805[ebp], esi
$LN559@replace:
  00354	83 f8 10	 cmp	 eax, 16			; 00000010H
  00357	72 04		 jb	 SHORT $LN572@replace
  00359	8b 16		 mov	 edx, DWORD PTR [esi]
  0035b	eb 02		 jmp	 SHORT $LN573@replace
$LN572@replace:
  0035d	8b d6		 mov	 edx, esi
$LN573@replace:
  0035f	8b 4d 0c	 mov	 ecx, DWORD PTR __N0$[ebp]
  00362	8b c7		 mov	 eax, edi
  00364	2b c1		 sub	 eax, ecx
  00366	74 1a		 je	 SHORT $LN579@replace
  00368	50		 push	 eax
  00369	8b 45 10	 mov	 eax, DWORD PTR tv1805[ebp]
  0036c	03 45 14	 add	 eax, DWORD PTR __Roff$[ebp]
  0036f	03 c7		 add	 eax, edi
  00371	50		 push	 eax
  00372	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00375	03 c2		 add	 eax, edx
  00377	03 c1		 add	 eax, ecx
$LN598@replace:
  00379	50		 push	 eax
  0037a	e8 00 00 00 00	 call	 _memmove
$LN599@replace:
  0037f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN579@replace:

; 1443 : 				this->_Myptr() + _Roff + _Count,
; 1444 : 				_Count - _N0);	// fill rest of new hole
; 1445 : 			}
; 1446 : 
; 1447 : 		_Eos(_Newsize);

  00382	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00386	8b 4d 18	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]
  00389	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0038c	72 11		 jb	 SHORT $LN590@replace
  0038e	8b 06		 mov	 eax, DWORD PTR [esi]
  00390	5f		 pop	 edi
  00391	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1448 : 		return (*this);

  00395	8b c6		 mov	 eax, esi
  00397	5e		 pop	 esi
  00398	5b		 pop	 ebx

; 1449 : 		}

  00399	8b e5		 mov	 esp, ebp
  0039b	5d		 pop	 ebp
  0039c	c2 14 00	 ret	 20			; 00000014H

; 1443 : 				this->_Myptr() + _Roff + _Count,
; 1444 : 				_Count - _N0);	// fill rest of new hole
; 1445 : 			}
; 1446 : 
; 1447 : 		_Eos(_Newsize);

$LN590@replace:
  0039f	8b c6		 mov	 eax, esi
  003a1	5f		 pop	 edi
  003a2	5e		 pop	 esi
  003a3	5b		 pop	 ebx
  003a4	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1449 : 		}

  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	c2 14 00	 ret	 20			; 00000014H
$LN600@replace:

; 1390 : 		_Check_offset(_Off);

  003ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  003b3	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN605@replace:
$LN602@replace:

; 1391 : 		_Right._Check_offset(_Roff);

  003b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  003bd	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN606@replace:
$LN603@replace:

; 1395 : 			_Xlen();	// result too long

  003c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  003c7	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN607@replace:
$LN604@replace:

; 1400 : 			_Grow(_Newsize);

  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  003d1	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN608@replace:
$LN597@replace:
  003d6	cc		 int	 3
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1348 : 		_Check_offset(_Off);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	72 7e		 jb	 SHORT $LN93@erase

; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  00011	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00014	8b c7		 mov	 eax, edi
  00016	2b c1		 sub	 eax, ecx
  00018	3b c2		 cmp	 eax, edx
  0001a	77 23		 ja	 SHORT $LN2@erase

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

  0001c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0001f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00023	72 0e		 jb	 SHORT $LN41@erase
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	5f		 pop	 edi
  00028	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1357 : 			}
; 1358 : 		return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 1359 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

$LN41@erase:
  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 1359 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@erase:

; 1351 : 		else if (0 < _Count)

  0003f	85 d2		 test	 edx, edx
  00041	74 44		 je	 SHORT $LN90@erase

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;

  00043	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00047	72 04		 jb	 SHORT $LN58@erase
  00049	8b 06		 mov	 eax, DWORD PTR [esi]
  0004b	eb 02		 jmp	 SHORT $LN59@erase
$LN58@erase:
  0004d	8b c6		 mov	 eax, esi
$LN59@erase:

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  0004f	2b fa		 sub	 edi, edx
  00051	53		 push	 ebx
  00052	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  00055	8b c7		 mov	 eax, edi
  00057	2b c1		 sub	 eax, ecx
  00059	74 0e		 je	 SHORT $LN74@erase
  0005b	50		 push	 eax
  0005c	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0005f	50		 push	 eax
  00060	53		 push	 ebx
  00061	e8 00 00 00 00	 call	 _memmove
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN74@erase:

; 1356 : 			_Eos(_Newsize);

  00069	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0006d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00070	5b		 pop	 ebx
  00071	72 0e		 jb	 SHORT $LN85@erase
  00073	8b 06		 mov	 eax, DWORD PTR [esi]
  00075	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1357 : 			}
; 1358 : 		return (*this);

  00079	8b c6		 mov	 eax, esi
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 1359 : 		}

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8

; 1356 : 			_Eos(_Newsize);

$LN85@erase:
  00081	8b c6		 mov	 eax, esi
  00083	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN90@erase:

; 1357 : 			}
; 1358 : 		return (*this);

  00087	5f		 pop	 edi
  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi

; 1359 : 		}

  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN93@erase:

; 1348 : 		_Check_offset(_Off);

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00094	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN95@erase:
$LN92@erase:
  00099	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1340 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 : 		_Check_offset(_Off);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	72 21		 jb	 SHORT $LN37@erase

; 1342 : 		_Eos(_Off);

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000e	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00012	72 0c		 jb	 SHORT $LN29@erase
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0

; 1343 : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 1344 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4

; 1342 : 		_Eos(_Off);

$LN29@erase:
  00020	8b d1		 mov	 edx, ecx
  00022	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0

; 1343 : 		return (*this);

  00026	8b c1		 mov	 eax, ecx

; 1344 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN37@erase:

; 1341 : 		_Check_offset(_Off);

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00031	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN39@erase:
$LN36@erase:
  00036	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
tv544 = 12						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1278 : 		{	// insert _Count * _Ch at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1279 : 		_Check_offset(_Off);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000e	3b ca		 cmp	 ecx, edx
  00010	0f 82 d2 00 00
	00		 jb	 $LN188@insert

; 1280 : 		if (npos - this->_Mysize() <= _Count)

  00016	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00019	8b c1		 mov	 eax, ecx
  0001b	f7 d0		 not	 eax
  0001d	3b c3		 cmp	 eax, ebx
  0001f	0f 86 cd 00 00
	00		 jbe	 $LN190@insert

; 1282 : 		const size_type _Num = this->_Mysize() + _Count;

  00025	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]

; 1283 : 		if (0 < _Count && _Grow(_Num))

  00028	85 db		 test	 ebx, ebx
  0002a	0f 84 af 00 00
	00		 je	 $LN183@insert
  00030	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00033	0f 87 c3 00 00
	00		 ja	 $LN191@insert
  00039	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0003c	73 23		 jae	 SHORT $LN43@insert
  0003e	51		 push	 ecx
  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00047	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  0004a	85 ff		 test	 edi, edi
  0004c	0f 84 8d 00 00
	00		 je	 $LN183@insert
$LN187@insert:

; 1284 : 			{	// make room and insert new stuff
; 1285 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00052	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00055	83 f8 10	 cmp	 eax, 16			; 00000010H
  00058	72 2e		 jb	 SHORT $LN146@insert
  0005a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005c	89 4d 0c	 mov	 DWORD PTR tv544[ebp], ecx
  0005f	eb 2a		 jmp	 SHORT $LN147@insert

; 1283 : 		if (0 < _Count && _Grow(_Num))

$LN43@insert:
  00061	85 ff		 test	 edi, edi
  00063	75 ed		 jne	 SHORT $LN187@insert
  00065	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00068	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0006c	72 0e		 jb	 SHORT $LN120@insert
  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	5f		 pop	 edi
  00071	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1290 : 			}
; 1291 : 		return (*this);

  00074	8b c6		 mov	 eax, esi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 1292 : 		}

  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH

; 1283 : 		if (0 < _Count && _Grow(_Num))

$LN120@insert:
  0007c	8b c6		 mov	 eax, esi
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1292 : 		}

  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH

; 1284 : 			{	// make room and insert new stuff
; 1285 : 			_Traits::move(this->_Myptr() + _Off + _Count,

$LN146@insert:
  00088	89 75 0c	 mov	 DWORD PTR tv544[ebp], esi
$LN147@insert:
  0008b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008e	72 04		 jb	 SHORT $LN160@insert
  00090	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00092	eb 02		 jmp	 SHORT $LN161@insert
$LN160@insert:
  00094	8b ce		 mov	 ecx, esi
$LN161@insert:
  00096	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00099	2b c2		 sub	 eax, edx
  0009b	74 18		 je	 SHORT $LN167@insert
  0009d	50		 push	 eax
  0009e	8b 45 0c	 mov	 eax, DWORD PTR tv544[ebp]
  000a1	03 c2		 add	 eax, edx
  000a3	50		 push	 eax
  000a4	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  000a7	03 c3		 add	 eax, ebx
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _memmove
  000af	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN167@insert:

; 1286 : 				this->_Myptr() + _Off,
; 1287 : 				this->_Mysize() - _Off);	// empty out hole
; 1288 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000b5	ff 75 10	 push	 DWORD PTR __Ch$[ebp]
  000b8	8b ce		 mov	 ecx, esi
  000ba	53		 push	 ebx
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1289 : 			_Eos(_Num);

  000c1	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c5	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c8	72 0f		 jb	 SHORT $LN178@insert
  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1290 : 			}
; 1291 : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 1292 : 		}

  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH

; 1289 : 			_Eos(_Num);

$LN178@insert:
  000d9	8b c6		 mov	 eax, esi
  000db	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN183@insert:

; 1290 : 			}
; 1291 : 		return (*this);

  000df	5f		 pop	 edi
  000e0	8b c6		 mov	 eax, esi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx

; 1292 : 		}

  000e4	5d		 pop	 ebp
  000e5	c2 0c 00	 ret	 12			; 0000000cH
$LN188@insert:

; 1279 : 		_Check_offset(_Off);

  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  000ed	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN192@insert:
$LN190@insert:

; 1281 : 			_Xlen();	// result too long

  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f7	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN193@insert:
$LN191@insert:

; 1283 : 		if (0 < _Count && _Grow(_Num))

  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00101	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN194@insert:
$LN185@insert:
  00106	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1271 : 		{	// insert [_Ptr, <null>) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1272 : 		_DEBUG_POINTER(_Ptr);
; 1273 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 11		 jne	 SHORT $LN5@insert
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  00013	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00018	5e		 pop	 esi

; 1274 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8

; 1272 : 		_DEBUG_POINTER(_Ptr);
; 1273 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));

$LN5@insert:
  0001d	8b d6		 mov	 edx, esi
  0001f	57		 push	 edi
  00020	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@insert:
  00023	8a 02		 mov	 al, BYTE PTR [edx]
  00025	42		 inc	 edx
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL7@insert
  0002a	2b d7		 sub	 edx, edi
  0002c	5f		 pop	 edi
  0002d	52		 push	 edx
  0002e	56		 push	 esi
  0002f	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  00032	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00037	5e		 pop	 esi

; 1274 : 		}

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z
_TEXT	SEGMENT
tv774 = -4						; size = 4
__Off$ = 8						; size = 4
tv775 = 12						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1250 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1251 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1252 : 		if (_Inside(_Ptr))

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	74 4a		 je	 SHORT $LN2@insert
  0000f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00015	72 04		 jb	 SHORT $LN21@insert
  00017	8b 06		 mov	 eax, DWORD PTR [esi]
  00019	eb 02		 jmp	 SHORT $LN22@insert
$LN21@insert:
  0001b	8b c6		 mov	 eax, esi
$LN22@insert:
  0001d	3b d8		 cmp	 ebx, eax
  0001f	72 38		 jb	 SHORT $LN2@insert
  00021	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00024	72 04		 jb	 SHORT $LN35@insert
  00026	8b 16		 mov	 edx, DWORD PTR [esi]
  00028	eb 02		 jmp	 SHORT $LN36@insert
$LN35@insert:
  0002a	8b d6		 mov	 edx, esi
$LN36@insert:
  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	03 c2		 add	 eax, edx
  00031	3b c3		 cmp	 eax, ebx
  00033	76 24		 jbe	 SHORT $LN2@insert

; 1253 : 			return (insert(_Off, *this,

  00035	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00038	72 04		 jb	 SHORT $LN58@insert
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	eb 02		 jmp	 SHORT $LN59@insert
$LN58@insert:
  0003e	8b c6		 mov	 eax, esi
$LN59@insert:
  00040	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  00043	2b d8		 sub	 ebx, eax
  00045	8b ce		 mov	 ecx, esi
  00047	53		 push	 ebx
  00048	56		 push	 esi
  00049	ff 75 08	 push	 DWORD PTR __Off$[ebp]
  0004c	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1268 : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
$LN2@insert:

; 1254 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1255 : 		_Check_offset(_Off);

  00059	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0005c	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0005f	0f 82 f9 00 00
	00		 jb	 $LN264@insert

; 1256 : 		if (npos - this->_Mysize() <= _Count)

  00065	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00068	8b c1		 mov	 eax, ecx
  0006a	f7 d0		 not	 eax
  0006c	3b c2		 cmp	 eax, edx
  0006e	0f 86 f4 00 00
	00		 jbe	 $LN266@insert

; 1258 : 		const size_type _Num = this->_Mysize() + _Count;

  00074	57		 push	 edi
  00075	8d 3c 11	 lea	 edi, DWORD PTR [ecx+edx]

; 1259 : 		if (0 < _Count && _Grow(_Num))

  00078	85 d2		 test	 edx, edx
  0007a	0f 84 d3 00 00
	00		 je	 $LN258@insert
  00080	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00083	0f 87 e9 00 00
	00		 ja	 $LN267@insert
  00089	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0008c	73 23		 jae	 SHORT $LN100@insert
  0008e	51		 push	 ecx
  0008f	57		 push	 edi
  00090	8b ce		 mov	 ecx, esi
  00092	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00097	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  0009a	85 ff		 test	 edi, edi
  0009c	0f 84 b1 00 00
	00		 je	 $LN258@insert
$LN263@insert:

; 1260 : 			{	// make room and insert new stuff
; 1261 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  000a2	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 32		 jb	 SHORT $LN203@insert
  000aa	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ac	89 4d 0c	 mov	 DWORD PTR tv775[ebp], ecx
  000af	eb 2e		 jmp	 SHORT $LN204@insert

; 1259 : 		if (0 < _Count && _Grow(_Num))

$LN100@insert:
  000b1	85 ff		 test	 edi, edi
  000b3	75 ed		 jne	 SHORT $LN263@insert
  000b5	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000b8	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000bc	72 10		 jb	 SHORT $LN177@insert
  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	5f		 pop	 edi
  000c1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1266 : 			}
; 1267 : 		return (*this);

  000c4	8b c6		 mov	 eax, esi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx

; 1268 : 		}

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 0c 00	 ret	 12			; 0000000cH

; 1259 : 		if (0 < _Count && _Grow(_Num))

$LN177@insert:
  000ce	8b c6		 mov	 eax, esi
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1268 : 		}

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 0c 00	 ret	 12			; 0000000cH

; 1260 : 			{	// make room and insert new stuff
; 1261 : 			_Traits::move(this->_Myptr() + _Off + _Count,

$LN203@insert:
  000dc	89 75 0c	 mov	 DWORD PTR tv775[ebp], esi
$LN204@insert:
  000df	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e2	72 07		 jb	 SHORT $LN217@insert
  000e4	8b 06		 mov	 eax, DWORD PTR [esi]
  000e6	89 45 fc	 mov	 DWORD PTR tv774[ebp], eax
  000e9	eb 03		 jmp	 SHORT $LN218@insert
$LN217@insert:
  000eb	89 75 fc	 mov	 DWORD PTR tv774[ebp], esi
$LN218@insert:
  000ee	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  000f4	2b c1		 sub	 eax, ecx
  000f6	74 1a		 je	 SHORT $LN224@insert
  000f8	50		 push	 eax
  000f9	8b 45 0c	 mov	 eax, DWORD PTR tv775[ebp]
  000fc	03 c1		 add	 eax, ecx
  000fe	50		 push	 eax
  000ff	8b 45 fc	 mov	 eax, DWORD PTR tv774[ebp]
  00102	03 c1		 add	 eax, ecx
  00104	03 c2		 add	 eax, edx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _memmove
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN224@insert:

; 1262 : 				this->_Myptr() + _Off,
; 1263 : 				this->_Mysize() - _Off);	// empty out hole
; 1264 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole

  00112	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00116	72 04		 jb	 SHORT $LN235@insert
  00118	8b 16		 mov	 edx, DWORD PTR [esi]
  0011a	eb 02		 jmp	 SHORT $LN236@insert
$LN235@insert:
  0011c	8b d6		 mov	 edx, esi
$LN236@insert:
  0011e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00121	85 c0		 test	 eax, eax
  00123	74 0e		 je	 SHORT $LN242@insert
  00125	50		 push	 eax
  00126	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00129	53		 push	 ebx
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _memcpy
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN242@insert:

; 1265 : 			_Eos(_Num);

  00133	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00137	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0013a	72 11		 jb	 SHORT $LN253@insert
  0013c	8b 06		 mov	 eax, DWORD PTR [esi]
  0013e	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1266 : 			}
; 1267 : 		return (*this);

  00142	8b c6		 mov	 eax, esi
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx

; 1268 : 		}

  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 0c 00	 ret	 12			; 0000000cH

; 1265 : 			_Eos(_Num);

$LN253@insert:
  0014d	8b c6		 mov	 eax, esi
  0014f	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN258@insert:

; 1266 : 			}
; 1267 : 		return (*this);

  00153	5f		 pop	 edi
  00154	8b c6		 mov	 eax, esi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx

; 1268 : 		}

  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 0c 00	 ret	 12			; 0000000cH
$LN264@insert:

; 1254 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1255 : 		_Check_offset(_Off);

  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00163	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN268@insert:
$LN266@insert:

; 1257 : 			_Xlen();	// result too long

  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0016d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN269@insert:
$LN267@insert:

; 1259 : 		if (0 < _Count && _Grow(_Num))

  00172	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00177	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN270@insert:
$LN261@insert:
  0017c	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
tv860 = 8						; size = 4
tv857 = 8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
tv849 = 16						; size = 4
__Roff$ = 16						; size = 4
tv862 = 20						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1223 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1224 : 		_Check_offset(_Off);

  00008	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000b	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0000e	0f 82 55 01 00
	00		 jb	 $LN285@insert

; 1225 : 		_Right._Check_offset(_Roff);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 55 10	 mov	 edx, DWORD PTR __Roff$[ebp]
  0001a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001d	3b c2		 cmp	 eax, edx
  0001f	0f 82 4e 01 00
	00		 jb	 $LN287@insert

; 1226 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00025	8b 7d 14	 mov	 edi, DWORD PTR __Count$[ebp]
  00028	2b c2		 sub	 eax, edx
  0002a	3b f8		 cmp	 edi, eax
  0002c	0f 47 f8	 cmova	 edi, eax

; 1227 : 		if (npos - this->_Mysize() <= _Count)

  0002f	8b c1		 mov	 eax, ecx
  00031	f7 d0		 not	 eax
  00033	3b c7		 cmp	 eax, edi
  00035	0f 86 42 01 00
	00		 jbe	 $LN288@insert

; 1229 : 
; 1230 : 		const size_type _Num = this->_Mysize() + _Count;

  0003b	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]

; 1231 : 		if (0 < _Count && _Grow(_Num))

  0003e	85 ff		 test	 edi, edi
  00040	0f 84 1a 01 00
	00		 je	 $LN279@insert
  00046	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00049	0f 87 38 01 00
	00		 ja	 $LN289@insert
  0004f	39 5e 14	 cmp	 DWORD PTR [esi+20], ebx
  00052	73 20		 jae	 SHORT $LN75@insert
  00054	51		 push	 ecx
  00055	53		 push	 ebx
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0005d	85 db		 test	 ebx, ebx
  0005f	0f 84 fb 00 00
	00		 je	 $LN279@insert
$LN283@insert:

; 1232 : 			{	// make room and insert new stuff
; 1233 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00065	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00068	83 f8 10	 cmp	 eax, 16			; 00000010H
  0006b	72 2d		 jb	 SHORT $LN178@insert
  0006d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006f	89 4d 14	 mov	 DWORD PTR tv862[ebp], ecx
  00072	eb 29		 jmp	 SHORT $LN179@insert

; 1231 : 		if (0 < _Count && _Grow(_Num))

$LN75@insert:
  00074	85 db		 test	 ebx, ebx
  00076	75 ed		 jne	 SHORT $LN283@insert
  00078	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0007b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0007f	72 0d		 jb	 SHORT $LN152@insert
  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	5f		 pop	 edi
  00084	88 18		 mov	 BYTE PTR [eax], bl

; 1244 : 			}
; 1245 : 		return (*this);

  00086	8b c6		 mov	 eax, esi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx

; 1246 : 		}

  0008a	5d		 pop	 ebp
  0008b	c2 10 00	 ret	 16			; 00000010H

; 1231 : 		if (0 < _Count && _Grow(_Num))

$LN152@insert:
  0008e	8b c6		 mov	 eax, esi
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1246 : 		}

  00096	5d		 pop	 ebp
  00097	c2 10 00	 ret	 16			; 00000010H

; 1232 : 			{	// make room and insert new stuff
; 1233 : 			_Traits::move(this->_Myptr() + _Off + _Count,

$LN178@insert:
  0009a	89 75 14	 mov	 DWORD PTR tv862[ebp], esi
$LN179@insert:
  0009d	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a0	72 04		 jb	 SHORT $LN192@insert
  000a2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a4	eb 02		 jmp	 SHORT $LN193@insert
$LN192@insert:
  000a6	8b ce		 mov	 ecx, esi
$LN193@insert:
  000a8	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000ab	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000ae	2b c2		 sub	 eax, edx
  000b0	74 18		 je	 SHORT $LN199@insert
  000b2	50		 push	 eax
  000b3	8b 45 14	 mov	 eax, DWORD PTR tv862[ebp]
  000b6	03 c2		 add	 eax, edx
  000b8	50		 push	 eax
  000b9	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  000bc	03 c7		 add	 eax, edi
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _memmove
  000c4	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN199@insert:

; 1234 : 				this->_Myptr() + _Off,
; 1235 : 				this->_Mysize() - _Off);	// empty out hole
; 1236 : 			if (this == &_Right)

  000ca	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  000cd	3b f0		 cmp	 esi, eax
  000cf	75 42		 jne	 SHORT $LN4@insert

; 1237 : 				_Traits::move(this->_Myptr() + _Off,

  000d1	8b 45 10	 mov	 eax, DWORD PTR __Roff$[ebp]
  000d4	3b d0		 cmp	 edx, eax
  000d6	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000d9	0f 43 c8	 cmovae	 ecx, eax
  000dc	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000df	89 4d 10	 mov	 DWORD PTR tv849[ebp], ecx
  000e2	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e5	72 07		 jb	 SHORT $LN210@insert
  000e7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e9	89 4d 08	 mov	 DWORD PTR tv860[ebp], ecx
  000ec	eb 03		 jmp	 SHORT $LN211@insert
$LN210@insert:
  000ee	89 75 08	 mov	 DWORD PTR tv860[ebp], esi
$LN211@insert:
  000f1	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f4	72 04		 jb	 SHORT $LN224@insert
  000f6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f8	eb 02		 jmp	 SHORT $LN225@insert
$LN224@insert:
  000fa	8b ce		 mov	 ecx, esi
$LN225@insert:
  000fc	85 ff		 test	 edi, edi
  000fe	74 42		 je	 SHORT $LN263@insert
  00100	8b 45 10	 mov	 eax, DWORD PTR tv849[ebp]
  00103	03 45 08	 add	 eax, DWORD PTR tv860[ebp]
  00106	57		 push	 edi
  00107	50		 push	 eax
  00108	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _memmove

; 1238 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1239 : 						_Count);	// substring
; 1240 : 			else

  00111	eb 2c		 jmp	 SHORT $LN284@insert
$LN4@insert:

; 1241 : 				_Traits::copy(this->_Myptr() + _Off,

  00113	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00117	72 02		 jb	 SHORT $LN242@insert
  00119	8b 00		 mov	 eax, DWORD PTR [eax]
$LN242@insert:
  0011b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0011f	72 07		 jb	 SHORT $LN256@insert
  00121	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00123	89 4d 08	 mov	 DWORD PTR tv857[ebp], ecx
  00126	eb 03		 jmp	 SHORT $LN257@insert
$LN256@insert:
  00128	89 75 08	 mov	 DWORD PTR tv857[ebp], esi
$LN257@insert:
  0012b	85 ff		 test	 edi, edi
  0012d	74 13		 je	 SHORT $LN263@insert
  0012f	03 45 10	 add	 eax, DWORD PTR __Roff$[ebp]
  00132	57		 push	 edi
  00133	50		 push	 eax
  00134	8b 45 08	 mov	 eax, DWORD PTR tv857[ebp]
  00137	03 c2		 add	 eax, edx
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _memcpy
$LN284@insert:
  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN263@insert:

; 1242 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1243 : 			_Eos(_Num);

  00142	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00146	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00149	72 0f		 jb	 SHORT $LN274@insert
  0014b	8b 06		 mov	 eax, DWORD PTR [esi]
  0014d	5f		 pop	 edi
  0014e	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1244 : 			}
; 1245 : 		return (*this);

  00152	8b c6		 mov	 eax, esi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx

; 1246 : 		}

  00156	5d		 pop	 ebp
  00157	c2 10 00	 ret	 16			; 00000010H

; 1242 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1243 : 			_Eos(_Num);

$LN274@insert:
  0015a	8b c6		 mov	 eax, esi
  0015c	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0
$LN279@insert:

; 1244 : 			}
; 1245 : 		return (*this);

  00160	5f		 pop	 edi
  00161	8b c6		 mov	 eax, esi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx

; 1246 : 		}

  00165	5d		 pop	 ebp
  00166	c2 10 00	 ret	 16			; 00000010H
$LN285@insert:

; 1224 : 		_Check_offset(_Off);

  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0016e	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN290@insert:
$LN287@insert:

; 1225 : 		_Right._Check_offset(_Roff);

  00173	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00178	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN291@insert:
$LN288@insert:

; 1228 : 			_Xlen();	// result too long

  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00182	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN292@insert:
$LN289@insert:

; 1231 : 		if (0 < _Count && _Grow(_Num))

  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0018c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN293@insert:
$LN281@insert:
  00191	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1186 : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1187 : 		if (_Count == npos)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff ff	 cmp	 edi, -1
  0000d	0f 84 9d 00 00
	00		 je	 $LN151@assign

; 1189 : 
; 1190 : 		if (_Grow(_Count))

  00013	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00016	0f 87 9e 00 00
	00		 ja	 $LN153@assign
  0001c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0001f	73 21		 jae	 SHORT $LN10@assign
  00021	ff 76 10	 push	 DWORD PTR [esi+16]
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0002a	85 ff		 test	 edi, edi
  0002c	74 7a		 je	 SHORT $LN146@assign
$LN150@assign:

; 1191 : 			{	// make room and assign new stuff
; 1192 : 			_Chassign(0, _Count, _Ch);

  0002e	83 ff 01	 cmp	 edi, 1
  00031	75 3d		 jne	 SHORT $LN95@assign
  00033	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00037	72 2e		 jb	 SHORT $LN108@assign
  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	8a 45 0c	 mov	 al, BYTE PTR __Ch$[ebp]
  0003e	88 01		 mov	 BYTE PTR [ecx], al
  00040	eb 49		 jmp	 SHORT $LN96@assign

; 1189 : 
; 1190 : 		if (_Grow(_Count))

$LN10@assign:
  00042	85 ff		 test	 edi, edi
  00044	75 e8		 jne	 SHORT $LN150@assign
  00046	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0004a	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004d	72 0d		 jb	 SHORT $LN87@assign
  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	5f		 pop	 edi
  00052	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1194 : 			}
; 1195 : 		return (*this);

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi

; 1196 : 		}

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8

; 1189 : 
; 1190 : 		if (_Grow(_Count))

$LN87@assign:
  0005c	8b c6		 mov	 eax, esi
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1196 : 		}

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8

; 1191 : 			{	// make room and assign new stuff
; 1192 : 			_Chassign(0, _Count, _Ch);

$LN108@assign:
  00067	8a 45 0c	 mov	 al, BYTE PTR __Ch$[ebp]
  0006a	8b ce		 mov	 ecx, esi
  0006c	88 01		 mov	 BYTE PTR [ecx], al
  0006e	eb 1b		 jmp	 SHORT $LN96@assign
$LN95@assign:
  00070	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00074	72 04		 jb	 SHORT $LN125@assign
  00076	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00078	eb 02		 jmp	 SHORT $LN126@assign
$LN125@assign:
  0007a	8b ce		 mov	 ecx, esi
$LN126@assign:
  0007c	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00080	57		 push	 edi
  00081	50		 push	 eax
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _memset
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN96@assign:

; 1193 : 			_Eos(_Count);

  0008b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0008f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00092	72 0e		 jb	 SHORT $LN141@assign
  00094	8b 06		 mov	 eax, DWORD PTR [esi]
  00096	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1194 : 			}
; 1195 : 		return (*this);

  0009a	8b c6		 mov	 eax, esi
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi

; 1196 : 		}

  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8

; 1193 : 			_Eos(_Count);

$LN141@assign:
  000a2	8b c6		 mov	 eax, esi
  000a4	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN146@assign:

; 1194 : 			}
; 1195 : 		return (*this);

  000a8	5f		 pop	 edi
  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi

; 1196 : 		}

  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
$LN151@assign:

; 1188 : 			_Xlen();	// result too long

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000b5	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN154@assign:
$LN153@assign:

; 1189 : 
; 1190 : 		if (_Grow(_Count))

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000bf	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN155@assign:
$LN148@assign:
  000c4	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1180 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN5@assign
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00015	5e		 pop	 esi

; 1183 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

$LN5@assign:
  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@assign:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL7@assign
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	5e		 pop	 esi

; 1183 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 57		 je	 SHORT $LN2@assign
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN20@assign
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN21@assign
$LN20@assign:
  0001a	8b c6		 mov	 eax, esi
$LN21@assign:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 45		 jb	 SHORT $LN2@assign
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN34@assign
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN35@assign
$LN34@assign:
  00029	8b d6		 mov	 edx, esi
$LN35@assign:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	03 c2		 add	 eax, edx
  00030	3b c3		 cmp	 eax, ebx
  00032	76 31		 jbe	 SHORT $LN2@assign

; 1168 : 			return (assign(*this,

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 16		 jb	 SHORT $LN57@assign
  00039	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	2b d8		 sub	 ebx, eax
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1177 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8

; 1168 : 			return (assign(*this,

$LN57@assign:
  0004f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00052	8b c6		 mov	 eax, esi
  00054	8b ce		 mov	 ecx, esi
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 1177 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN2@assign:
  00065	57		 push	 edi

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  00066	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00069	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006c	77 7d		 ja	 SHORT $LN187@assign
  0006e	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00071	73 19		 jae	 SHORT $LN63@assign
  00073	ff 76 10	 push	 DWORD PTR [esi+16]
  00076	8b ce		 mov	 ecx, esi
  00078	57		 push	 edi
  00079	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0007e	85 ff		 test	 edi, edi
  00080	74 60		 je	 SHORT $LN181@assign
$LN186@assign:

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

  00082	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00086	72 2b		 jb	 SHORT $LN158@assign
  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	eb 29		 jmp	 SHORT $LN159@assign

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN63@assign:
  0008c	85 ff		 test	 edi, edi
  0008e	75 f2		 jne	 SHORT $LN186@assign
  00090	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00094	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00097	72 0e		 jb	 SHORT $LN140@assign
  00099	8b 06		 mov	 eax, DWORD PTR [esi]
  0009b	5f		 pop	 edi
  0009c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1175 : 			}
; 1176 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1177 : 		}

  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

$LN140@assign:
  000a7	8b c6		 mov	 eax, esi
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1177 : 		}

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

$LN158@assign:
  000b3	8b c6		 mov	 eax, esi
$LN159@assign:
  000b5	85 ff		 test	 edi, edi
  000b7	74 0b		 je	 SHORT $LN165@assign
  000b9	57		 push	 edi
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _memcpy
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN165@assign:

; 1174 : 			_Eos(_Count);

  000c4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c8	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000cb	72 0f		 jb	 SHORT $LN176@assign
  000cd	8b 06		 mov	 eax, DWORD PTR [esi]
  000cf	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1175 : 			}
; 1176 : 		return (*this);

  000d3	8b c6		 mov	 eax, esi
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 1177 : 		}

  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8

; 1174 : 			_Eos(_Count);

$LN176@assign:
  000dc	8b c6		 mov	 eax, esi
  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN181@assign:

; 1175 : 			}
; 1176 : 		return (*this);

  000e2	5f		 pop	 edi
  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 1177 : 		}

  000e7	5d		 pop	 ebp
  000e8	c2 08 00	 ret	 8
$LN187@assign:

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f0	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN189@assign:
$LN184@assign:
  000f5	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1150 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 e9 00 00
	00		 jb	 $LN208@assign

; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00019	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
  0001c	2b c1		 sub	 eax, ecx
  0001e	3b f8		 cmp	 edi, eax
  00020	0f 47 f8	 cmova	 edi, eax

; 1152 : 
; 1153 : 		if (this == &_Right)

  00023	3b f3		 cmp	 esi, ebx
  00025	75 47		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  00027	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  0002a	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0002d	0f 82 d9 00 00
	00		 jb	 $LN210@assign
  00033	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00036	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0003a	72 19		 jb	 SHORT $LN63@assign
  0003c	8b 16		 mov	 edx, DWORD PTR [esi]
  0003e	51		 push	 ecx
  0003f	6a 00		 push	 0
  00041	8b ce		 mov	 ecx, esi
  00043	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  00047	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0004c	5f		 pop	 edi

; 1160 : 			}
; 1161 : 		return (*this);

  0004d	8b c6		 mov	 eax, esi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 1162 : 		}

  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

$LN63@assign:
  00055	8b d6		 mov	 edx, esi
  00057	51		 push	 ecx
  00058	6a 00		 push	 0
  0005a	8b ce		 mov	 ecx, esi
  0005c	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  00060	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00065	5f		 pop	 edi

; 1160 : 			}
; 1161 : 		return (*this);

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 1162 : 		}

  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
$LN2@assign:

; 1155 : 		else if (_Grow(_Count))

  0006e	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00071	0f 87 9f 00 00
	00		 ja	 $LN211@assign
  00077	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0007a	73 24		 jae	 SHORT $LN72@assign
  0007c	ff 76 10	 push	 DWORD PTR [esi+16]
  0007f	8b ce		 mov	 ecx, esi
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00087	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0008a	85 ff		 test	 edi, edi
  0008c	74 6b		 je	 SHORT $LN203@assign
$LN207@assign:

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

  0008e	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00092	72 02		 jb	 SHORT $LN166@assign
  00094	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN166@assign:
  00096	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0009a	72 2b		 jb	 SHORT $LN180@assign
  0009c	8b 16		 mov	 edx, DWORD PTR [esi]
  0009e	eb 29		 jmp	 SHORT $LN181@assign

; 1155 : 		else if (_Grow(_Count))

$LN72@assign:
  000a0	85 ff		 test	 edi, edi
  000a2	75 ea		 jne	 SHORT $LN207@assign
  000a4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000a8	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000ab	72 0e		 jb	 SHORT $LN149@assign
  000ad	8b 06		 mov	 eax, DWORD PTR [esi]
  000af	5f		 pop	 edi
  000b0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1160 : 			}
; 1161 : 		return (*this);

  000b3	8b c6		 mov	 eax, esi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 1162 : 		}

  000b7	5d		 pop	 ebp
  000b8	c2 0c 00	 ret	 12			; 0000000cH

; 1155 : 		else if (_Grow(_Count))

$LN149@assign:
  000bb	8b c6		 mov	 eax, esi
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1162 : 		}

  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

$LN180@assign:
  000c7	8b d6		 mov	 edx, esi
$LN181@assign:
  000c9	85 ff		 test	 edi, edi
  000cb	74 0e		 je	 SHORT $LN187@assign
  000cd	57		 push	 edi
  000ce	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  000d1	50		 push	 eax
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _memcpy
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN187@assign:

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

  000db	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000df	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000e2	72 0f		 jb	 SHORT $LN198@assign
  000e4	8b 06		 mov	 eax, DWORD PTR [esi]
  000e6	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1160 : 			}
; 1161 : 		return (*this);

  000ea	8b c6		 mov	 eax, esi
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx

; 1162 : 		}

  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

$LN198@assign:
  000f3	8b c6		 mov	 eax, esi
  000f5	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN203@assign:

; 1160 : 			}
; 1161 : 		return (*this);

  000f9	5f		 pop	 edi
  000fa	8b c6		 mov	 eax, esi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx

; 1162 : 		}

  000fe	5d		 pop	 ebp
  000ff	c2 0c 00	 ret	 12			; 0000000cH
$LN208@assign:

; 1150 : 		_Right._Check_offset(_Roff);

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00107	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN212@assign:
$LN210@assign:

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00111	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN213@assign:
$LN211@assign:

; 1155 : 		else if (_Grow(_Count))

  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN214@assign:
$LN205@assign:
  00120	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1143 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1144 : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1111 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1112 : 		if (npos - this->_Mysize() <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000e	8b c1		 mov	 eax, ecx
  00010	f7 d0		 not	 eax
  00012	3b c3		 cmp	 eax, ebx
  00014	76 7a		 jbe	 SHORT $LN141@append

; 1114 : 
; 1115 : 		const size_type _Num = this->_Mysize() + _Count;

  00016	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]

; 1116 : 		if (0 < _Count && _Grow(_Num))

  00019	85 db		 test	 ebx, ebx
  0001b	74 6a		 je	 SHORT $LN136@append
  0001d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00020	77 78		 ja	 SHORT $LN143@append
  00022	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00025	73 33		 jae	 SHORT $LN28@append
  00027	51		 push	 ecx
  00028	57		 push	 edi
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00030	85 ff		 test	 edi, edi
  00032	74 53		 je	 SHORT $LN136@append
$LN140@append:

; 1117 : 			{	// make room and append new stuff using assign
; 1118 : 			_Chassign(this->_Mysize(), _Count, _Ch);

  00034	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00037	8b ce		 mov	 ecx, esi
  00039	53		 push	 ebx
  0003a	ff 76 10	 push	 DWORD PTR [esi+16]
  0003d	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1119 : 			_Eos(_Num);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00049	72 36		 jb	 SHORT $LN131@append
  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1120 : 			}
; 1121 : 		return (*this);

  00051	8b c6		 mov	 eax, esi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 1122 : 		}

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8

; 1116 : 		if (0 < _Count && _Grow(_Num))

$LN28@append:
  0005a	85 ff		 test	 edi, edi
  0005c	75 d6		 jne	 SHORT $LN140@append
  0005e	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00061	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00065	72 0e		 jb	 SHORT $LN105@append
  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	5f		 pop	 edi
  0006a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1120 : 			}
; 1121 : 		return (*this);

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 1122 : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8

; 1116 : 		if (0 < _Count && _Grow(_Num))

$LN105@append:
  00075	8b c6		 mov	 eax, esi
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1122 : 		}

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8

; 1119 : 			_Eos(_Num);

$LN131@append:
  00081	8b c6		 mov	 eax, esi
  00083	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN136@append:

; 1120 : 			}
; 1121 : 		return (*this);

  00087	5f		 pop	 edi
  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1122 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
$LN141@append:

; 1113 : 			_Xlen();	// result too long

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN144@append:
$LN143@append:

; 1116 : 		if (0 < _Count && _Grow(_Num))

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0009f	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN145@append:
$LN138@append:
  000a4	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1105 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN5@append
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00015	5e		 pop	 esi

; 1108 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

$LN5@append:
  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@append:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL7@append
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00031	5e		 pop	 esi

; 1108 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1087 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1088 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1089 : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 57		 je	 SHORT $LN2@append
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN21@append
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN22@append
$LN21@append:
  0001a	8b c6		 mov	 eax, esi
$LN22@append:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 45		 jb	 SHORT $LN2@append
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN35@append
  00025	8b 16		 mov	 edx, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN36@append
$LN35@append:
  00029	8b d6		 mov	 edx, esi
$LN36@append:
  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	03 c2		 add	 eax, edx
  00030	3b c3		 cmp	 eax, ebx
  00032	76 31		 jbe	 SHORT $LN2@append

; 1090 : 			return (append(*this,

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 16		 jb	 SHORT $LN58@append
  00039	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	2b d8		 sub	 ebx, eax
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1102 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8

; 1090 : 			return (append(*this,

$LN58@append:
  0004f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00052	8b c6		 mov	 eax, esi
  00054	8b ce		 mov	 ecx, esi
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 1102 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN2@append:

; 1091 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1092 : 		if (npos - this->_Mysize() <= _Count)

  00065	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00068	8b c2		 mov	 eax, edx
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0006d	f7 d0		 not	 eax
  0006f	3b c1		 cmp	 eax, ecx
  00071	0f 86 98 00 00
	00		 jbe	 $LN217@append

; 1094 : 
; 1095 : 		const size_type _Num = this->_Mysize() + _Count;

  00077	57		 push	 edi
  00078	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1096 : 		if (0 < _Count && _Grow(_Num))

  0007b	85 c9		 test	 ecx, ecx
  0007d	0f 84 83 00 00
	00		 je	 $LN211@append
  00083	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00086	0f 87 8d 00 00
	00		 ja	 $LN219@append
  0008c	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0008f	73 1a		 jae	 SHORT $LN85@append
  00091	52		 push	 edx
  00092	57		 push	 edi
  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0009d	85 ff		 test	 edi, edi
  0009f	74 65		 je	 SHORT $LN211@append
$LN216@append:

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

  000a1	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000a5	72 2b		 jb	 SHORT $LN179@append
  000a7	8b 16		 mov	 edx, DWORD PTR [esi]
  000a9	eb 29		 jmp	 SHORT $LN180@append

; 1096 : 		if (0 < _Count && _Grow(_Num))

$LN85@append:
  000ab	85 ff		 test	 edi, edi
  000ad	75 f2		 jne	 SHORT $LN216@append
  000af	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000b2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b6	72 0e		 jb	 SHORT $LN162@append
  000b8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ba	5f		 pop	 edi
  000bb	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1100 : 			}
; 1101 : 		return (*this);

  000be	8b c6		 mov	 eax, esi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx

; 1102 : 		}

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8

; 1096 : 		if (0 < _Count && _Grow(_Num))

$LN162@append:
  000c6	8b c6		 mov	 eax, esi
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1102 : 		}

  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

$LN179@append:
  000d2	8b d6		 mov	 edx, esi
$LN180@append:
  000d4	85 c9		 test	 ecx, ecx
  000d6	74 10		 je	 SHORT $LN195@append
  000d8	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000db	51		 push	 ecx
  000dc	03 c2		 add	 eax, edx
  000de	53		 push	 ebx
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _memcpy
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN195@append:

; 1099 : 			_Eos(_Num);

  000e8	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000ec	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000ef	72 0f		 jb	 SHORT $LN206@append
  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1100 : 			}
; 1101 : 		return (*this);

  000f7	8b c6		 mov	 eax, esi
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx

; 1102 : 		}

  000fc	5d		 pop	 ebp
  000fd	c2 08 00	 ret	 8

; 1099 : 			_Eos(_Num);

$LN206@append:
  00100	8b c6		 mov	 eax, esi
  00102	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN211@append:

; 1100 : 			}
; 1101 : 		return (*this);

  00106	5f		 pop	 edi
  00107	8b c6		 mov	 eax, esi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx

; 1102 : 		}

  0010b	5d		 pop	 ebp
  0010c	c2 08 00	 ret	 8
$LN217@append:

; 1093 : 			_Xlen();	// result too long

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00114	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN220@append:
$LN219@append:

; 1096 : 		if (0 < _Count && _Grow(_Num))

  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN221@append:
$LN214@append:
  00123	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1070 : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1071 : 		_Right._Check_offset(_Roff);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00011	3b c1		 cmp	 eax, ecx
  00013	0f 82 c0 00 00
	00		 jb	 $LN201@append

; 1072 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1073 : 		if (npos - this->_Mysize() <= _Count)

  00019	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001c	2b c1		 sub	 eax, ecx
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00021	3b c8		 cmp	 ecx, eax
  00023	0f 47 c8	 cmova	 ecx, eax
  00026	8b c2		 mov	 eax, edx
  00028	f7 d0		 not	 eax
  0002a	89 4d 10	 mov	 DWORD PTR __Count$[ebp], ecx
  0002d	3b c1		 cmp	 eax, ecx
  0002f	0f 86 ae 00 00
	00		 jbe	 $LN203@append

; 1075 : 
; 1076 : 		const size_type _Num = this->_Mysize() + _Count;

  00035	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1077 : 		if (0 < _Count && _Grow(_Num))

  00038	85 c9		 test	 ecx, ecx
  0003a	0f 84 90 00 00
	00		 je	 $LN196@append
  00040	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00043	0f 87 a4 00 00
	00		 ja	 $LN204@append
  00049	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  0004c	73 22		 jae	 SHORT $LN56@append
  0004e	52		 push	 edx
  0004f	57		 push	 edi
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00057	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005a	85 ff		 test	 edi, edi
  0005c	74 72		 je	 SHORT $LN196@append
$LN200@append:

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

  0005e	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00062	72 02		 jb	 SHORT $LN150@append
  00064	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN150@append:
  00066	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0006a	72 2b		 jb	 SHORT $LN164@append
  0006c	8b 16		 mov	 edx, DWORD PTR [esi]
  0006e	eb 29		 jmp	 SHORT $LN165@append

; 1077 : 		if (0 < _Count && _Grow(_Num))

$LN56@append:
  00070	85 ff		 test	 edi, edi
  00072	75 ea		 jne	 SHORT $LN200@append
  00074	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00077	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0007b	72 0e		 jb	 SHORT $LN133@append
  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	5f		 pop	 edi
  00080	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1082 : 			}
; 1083 : 		return (*this);

  00083	8b c6		 mov	 eax, esi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 1084 : 		}

  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH

; 1077 : 		if (0 < _Count && _Grow(_Num))

$LN133@append:
  0008b	8b c6		 mov	 eax, esi
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1084 : 		}

  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

$LN164@append:
  00097	8b d6		 mov	 edx, esi
$LN165@append:
  00099	85 c9		 test	 ecx, ecx
  0009b	74 15		 je	 SHORT $LN180@append
  0009d	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  000a0	03 c3		 add	 eax, ebx
  000a2	51		 push	 ecx
  000a3	50		 push	 eax
  000a4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a7	03 c2		 add	 eax, edx
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _memcpy
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN180@append:

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

  000b2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b6	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000b9	72 0f		 jb	 SHORT $LN191@append
  000bb	8b 06		 mov	 eax, DWORD PTR [esi]
  000bd	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 1082 : 			}
; 1083 : 		return (*this);

  000c1	8b c6		 mov	 eax, esi
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx

; 1084 : 		}

  000c6	5d		 pop	 ebp
  000c7	c2 0c 00	 ret	 12			; 0000000cH

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

$LN191@append:
  000ca	8b c6		 mov	 eax, esi
  000cc	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN196@append:

; 1082 : 			}
; 1083 : 		return (*this);

  000d0	5f		 pop	 edi
  000d1	8b c6		 mov	 eax, esi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 1084 : 		}

  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH
$LN201@append:

; 1071 : 		_Right._Check_offset(_Roff);

  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  000de	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN205@append:
$LN203@append:

; 1074 : 			_Xlen();	// result too long

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000e8	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN206@append:
$LN204@append:

; 1077 : 		if (0 < _Count && _Grow(_Num))

  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f2	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN207@append:
$LN198@append:
  000f7	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1064 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1065 : 		return (append(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1066 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 1059 : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1060 : 		return (append((size_type)1, _Ch));

  00003	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1061 : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 1054 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1055 : 		return (append(_Ptr));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN7@operator
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00015	5e		 pop	 esi

; 1056 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4

; 1055 : 		return (append(_Ptr));

$LN7@operator:
  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL9@operator:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL9@operator
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00031	5e		 pop	 esi

; 1056 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 1049 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1050 : 		return (append(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1051 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1039 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1040 : 		return (assign(_Ptr));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN7@operator
  0000c	33 d2		 xor	 edx, edx
  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00015	5e		 pop	 esi

; 1041 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4

; 1040 : 		return (assign(_Ptr));

$LN7@operator:
  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL9@operator:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL9@operator
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	5e		 pop	 esi

; 1041 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1023 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1024 : 		if (this != &_Right)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b f0		 cmp	 esi, eax
  0000b	74 0a		 je	 SHORT $LN132@operator

; 1025 : 			{	// different, assign it
; 1026 : 			if (this->_Getal() != _Right._Getal()
; 1027 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1028 : 				{	// change allocator before copying
; 1029 : 				_Tidy(true);
; 1030 : 				this->_Copy_alloc(_Right._Getal());
; 1031 : 				}
; 1032 : 
; 1033 : 			assign(_Right);

  0000d	6a ff		 push	 -1
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN132@operator:

; 1034 : 			}
; 1035 : 		return (*this);

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 1036 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1016 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1017 : 		_Tidy(true);

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	72 09		 jb	 SHORT $LN6@basic_stri
  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN6@basic_stri:
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00026	72 07		 jb	 SHORT $LN94@basic_stri
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	5e		 pop	 esi
  0002b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1018 : 		}

  0002e	c3		 ret	 0

; 1017 : 		_Tidy(true);

$LN94@basic_stri:
  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	5e		 pop	 esi

; 1018 : 		}

  00033	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv, COMDAT
; _this$ = ecx

; 961  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000e	73 15		 jae	 SHORT $LN2@Assign_rv

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	83 c0 01	 add	 eax, 1
  00016	74 1b		 je	 SHORT $LN3@Assign_rv
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 964  : 				_Right._Mysize() + 1);
; 965  : 		else

  00023	eb 0e		 jmp	 SHORT $LN3@Assign_rv
$LN2@Assign_rv:

; 966  : 			{	// copy pointer
; 967  : 			this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);

  00025	85 ff		 test	 edi, edi
  00027	74 04		 je	 SHORT $LN84@Assign_rv
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 07		 mov	 DWORD PTR [edi], eax
$LN84@Assign_rv:

; 968  : 			_Right._Bx()._Ptr = pointer();

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@Assign_rv:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

  00039	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003c	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 972  : 		_Right._Tidy();

  0003f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00046	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0004a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00051	72 0b		 jb	 SHORT $LN227@Assign_rv
  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	c6 00 00	 mov	 BYTE PTR [eax], 0

; 973  : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4

; 972  : 		_Right._Tidy();

$LN227@Assign_rv:
  0005e	5f		 pop	 edi
  0005f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00062	5e		 pop	 esi

; 973  : 		}

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 946  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 947  : 		if (this == &_Right)

  00025	3b 75 08	 cmp	 esi, DWORD PTR __Right$[ebp]
  00028	74 38		 je	 SHORT $LN275@assign

; 948  : 			;
; 949  : 		else if (get_allocator() != _Right.get_allocator()
; 950  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 951  : 			*this = _Right;
; 952  : 		else
; 953  : 			{	// not same, clear this and steal from _Right
; 954  : 			_Tidy(true);

  0002a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN177@assign
  00032	40		 inc	 eax
  00033	50		 push	 eax
  00034	ff 36		 push	 DWORD PTR [esi]
  00036	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN177@assign:
  0003b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004d	72 04		 jb	 SHORT $LN265@assign
  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	eb 02		 jmp	 SHORT $LN266@assign
$LN265@assign:
  00053	8b c6		 mov	 eax, esi
$LN266@assign:

; 955  : 			_Assign_rv(_STD forward<_Myt>(_Right));

  00055	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	c6 00 00	 mov	 BYTE PTR [eax], 0
  0005d	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN275@assign:

; 956  : 			}
; 957  : 		return (*this);

  00062	8b c6		 mov	 eax, esi

; 958  : 		}

  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 928  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 929  : 		if (this != &_Right)

  00025	3b 75 08	 cmp	 esi, DWORD PTR __Right$[ebp]
  00028	74 38		 je	 SHORT $LN294@operator

; 930  : 			{	// different, assign it
; 931  : 			_Tidy(true);

  0002a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00030	72 09		 jb	 SHORT $LN10@operator
  00032	40		 inc	 eax
  00033	50		 push	 eax
  00034	ff 36		 push	 DWORD PTR [esi]
  00036	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN10@operator:
  0003b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0004d	72 04		 jb	 SHORT $LN98@operator
  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	eb 02		 jmp	 SHORT $LN99@operator
$LN98@operator:
  00053	8b c6		 mov	 eax, esi
$LN99@operator:

; 932  : 
; 933  : 			if (_Alty::propagate_on_container_move_assignment::value
; 934  : 				&& this->_Getal() != _Right._Getal())
; 935  : 				this->_Move_alloc(_Right._Getal());
; 936  : 
; 937  : 			if (this->_Getal() != _Right._Getal())
; 938  : 				assign(_Right.begin(), _Right.end());
; 939  : 			else
; 940  : 				_Assign_rv(_STD forward<_Myt>(_Right));

  00055	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	c6 00 00	 mov	 BYTE PTR [eax], 0
  0005d	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN294@operator:

; 941  : 			}
; 942  : 		return (*this);

  00062	8b c6		 mov	 eax, esi

; 943  : 		}

  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 911  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 912  : 		_Tidy();
; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001a	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv

; 914  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 850  : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 851  : 		_Tidy();
; 852  : 		assign(_Count, _Ch);

  00004	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 853  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 836  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001a	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0001d	75 12		 jne	 SHORT $LN111@basic_stri
  0001f	33 d2		 xor	 edx, edx
  00021	52		 push	 edx
  00022	51		 push	 ecx
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 839  : 		}

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);

$LN111@basic_stri:
  00031	8b d1		 mov	 edx, ecx
  00033	57		 push	 edi
  00034	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL113@basic_stri:
  00037	8a 02		 mov	 al, BYTE PTR [edx]
  00039	42		 inc	 edx
  0003a	84 c0		 test	 al, al
  0003c	75 f9		 jne	 SHORT $LL113@basic_stri
  0003e	2b d7		 sub	 edx, edi
  00040	5f		 pop	 edi
  00041	52		 push	 edx
  00042	51		 push	 ecx
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 839  : 		}

  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 822  : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 823  : 		_Tidy();
; 824  : 		assign(_Ptr, _Count);

  00004	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 825  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 815  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 816  : 		_Tidy();
; 817  : 		assign(_Right, _Roff, _Count);

  00004	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00016	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001d	c6 06 00	 mov	 BYTE PTR [esi], 0
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 818  : 		}

  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 10 00	 ret	 16			; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 795  : 		_Tidy();

  00000	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 796  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 781  : 		_Tidy();
; 782  : 		assign(_Right, 0, npos);

  00006	6a ff		 push	 -1
  00008	6a 00		 push	 0
  0000a	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 783  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 321  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 316  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 301  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 296  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT
; _this$ = ecx

; 734  : 		return (_Get_data()._Myres);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 735  : 		}

  00003	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 729  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 730  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 724  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 725  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx, COMDAT
; _this$ = ecx

; 714  : 		return (_Get_data()._Bx);

  00000	8b c1		 mov	 eax, ecx

; 715  : 		}

  00002	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 707  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 708  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 702  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 703  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 697  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 698  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 692  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 693  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 607  : 		_Pocma(_Getal(), _Al);
; 608  : 		}

  00000	c2 04 00	 ret	 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc, COMDAT
; _this$ = ecx

; 602  : 		_Pocca(_Getal(), _Al);
; 603  : 		}

  00000	c2 04 00	 ret	 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 588  : 		: _Mypair(_Zero_then_variadic_args_t())

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 590  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 583  : 		return (_Get_data()._Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 584  : 		}

  00008	c3		 ret	 0

; 583  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 584  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 578  : 		return (_Get_data()._Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN11@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 579  : 		}

  00008	c3		 ret	 0

; 578  : 		return (_Get_data()._Myptr());

$LN11@Myptr:
  00009	8b c1		 mov	 eax, ecx

; 579  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 534  : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00009	8b c1		 mov	 eax, ecx

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 499  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	83 c8 ff	 or	 eax, -1

; 1009 : 		}

  00003	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Count$[ebp], 4096 ; 00001000H
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000d	72 19		 jb	 SHORT $LN7@deallocate
  0000f	a8 1f		 test	 al, 31			; 0000001fH
  00011	75 22		 jne	 SHORT $LN16@deallocate
  00013	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00016	3b c8		 cmp	 ecx, eax
  00018	73 20		 jae	 SHORT $LN18@deallocate
  0001a	2b c1		 sub	 eax, ecx
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	72 1e		 jb	 SHORT $LN19@deallocate
  00021	83 f8 23	 cmp	 eax, 35			; 00000023H
  00024	77 1e		 ja	 SHORT $LN20@deallocate
  00026	8b c1		 mov	 eax, ecx
$LN7@deallocate:
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4

; 988  : 		}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN16@deallocate:

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN18@deallocate:
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN19@deallocate:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN20@deallocate:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN15@deallocate:
  00049	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 976  : 		return (_Mybase::allocate(_Count));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN6@allocate
$LN15@allocate:

; 977  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 976  : 		return (_Mybase::allocate(_Count));

$LN6@allocate:
  0000e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00013	72 23		 jb	 SHORT $LN8@allocate
  00015	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00018	3b c8		 cmp	 ecx, eax
  0001a	76 2b		 jbe	 SHORT $LN17@allocate
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	8b c8		 mov	 ecx, eax
  00024	83 c4 04	 add	 esp, 4
  00027	85 c9		 test	 ecx, ecx
  00029	74 21		 je	 SHORT $LN19@allocate
  0002b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002e	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00031	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 977  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4

; 976  : 		return (_Mybase::allocate(_Count));

$LN8@allocate:
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 c5		 jne	 SHORT $LN15@allocate
  00045	eb 0a		 jmp	 SHORT $LN20@allocate
$LN17@allocate:
  00047	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN21@allocate:
$LN19@allocate:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN20@allocate:
  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@allocate:
$LN16@allocate:
  00056	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 963  : 		_Mybase::operator=(_STD move(_Right));
; 964  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 965  : 		}

  00002	c2 04 00	 ret	 4
??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 947  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 937  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPBDABD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPBDABD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::address, COMDAT
; _this$ = ecx

; 930  : 		{	// return address of nonmutable _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 931  : 		return (pointer_traits<const_pointer>::pointer_to(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 932  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPBDABD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::address
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::address, COMDAT
; _this$ = ecx

; 925  : 		{	// return address of mutable _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 926  : 		return (pointer_traits<pointer>::pointer_to(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 927  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::address
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 870  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	83 c8 ff	 or	 eax, -1

; 750  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 726  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN4@allocate:
  0000e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00013	72 23		 jb	 SHORT $LN6@allocate
  00015	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  00018	3b c8		 cmp	 ecx, eax
  0001a	76 2b		 jbe	 SHORT $LN14@allocate
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	8b c8		 mov	 ecx, eax
  00024	83 c4 04	 add	 esp, 4
  00027	85 c9		 test	 ecx, ecx
  00029	74 21		 je	 SHORT $LN16@allocate
  0002b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002e	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00031	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 726  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

$LN6@allocate:
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 c5		 jne	 SHORT $LN12@allocate
  00045	eb 0a		 jmp	 SHORT $LN17@allocate
$LN14@allocate:
  00047	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN18@allocate:
$LN16@allocate:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@allocate:
$LN17@allocate:
  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@allocate:
$LN13@allocate:
  00056	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Count$[ebp], 4096 ; 00001000H
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000d	72 19		 jb	 SHORT $LN5@deallocate
  0000f	a8 1f		 test	 al, 31			; 0000001fH
  00011	75 22		 jne	 SHORT $LN13@deallocate
  00013	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00016	3b c8		 cmp	 ecx, eax
  00018	73 20		 jae	 SHORT $LN15@deallocate
  0001a	2b c1		 sub	 eax, ecx
  0001c	83 f8 04	 cmp	 eax, 4
  0001f	72 1e		 jb	 SHORT $LN16@deallocate
  00021	83 f8 23	 cmp	 eax, 35			; 00000023H
  00024	77 1e		 ja	 SHORT $LN17@deallocate
  00026	8b c1		 mov	 eax, ecx
$LN5@deallocate:
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4

; 721  : 		}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN13@deallocate:

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
$LN15@deallocate:
  0003a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN16@deallocate:
  0003f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN17@deallocate:
  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN12@deallocate:
  00049	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xatomic0.h
;	COMDAT ?_Init_atomic_counter@std@@YAXAAKK@Z
_TEXT	SEGMENT
__Counter$ = 8						; size = 4
__Value$ = 12						; size = 4
?_Init_atomic_counter@std@@YAXAAKK@Z PROC		; std::_Init_atomic_counter, COMDAT

; 62   : 	{	// non-atomically initialize counter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Counter = _Value;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Counter$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Value$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 64   : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?_Init_atomic_counter@std@@YAXAAKK@Z ENDP		; std::_Init_atomic_counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 92   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 95   : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 133  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 48   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	void *_Ptr = 0;
; 50   : 
; 51   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 52   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 56   : 		_Xbad_alloc();	// report no memory
; 57   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 66   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 67   : 			_Xbad_alloc();	// report no memory
; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else
; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 606  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 607  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 600  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 601  : 		return (_Meta != eof() ? _Meta : !eof());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	33 c0		 xor	 eax, eax
  0000a	83 f9 ff	 cmp	 ecx, -1
  0000d	0f 45 c1	 cmovne	 eax, ecx

; 602  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 595  : 		return (_Left == _Right);
; 596  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 588  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 589  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 590  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 582  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  : 		return ((_Elem)_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 584  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 570  : 		{	// test for element equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 571  : 		return (_Left == _Right);
; 572  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 564  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 565  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 566  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 559  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 560  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 561  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 552  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@move
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@move:

; 553  : 		return (_Count == 0 ? _First1

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  00012	5d		 pop	 ebp

; 553  : 		return (_Count == 0 ? _First1

  00013	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 545  : 		{	// look for _Ch in [_First, _First + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 546  : 		return (_Count == 0 ? (const _Elem *)0

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 02		 jne	 SHORT $LN3@find

; 547  : 			: (const _Elem *)_CSTD memchr(_First, _Ch, _Count));
; 548  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
$LN3@find:

; 546  : 		return (_Count == 0 ? (const _Elem *)0

  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Ch$[ebp]
  00010	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00017	e8 00 00 00 00	 call	 _memchr
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 547  : 			: (const _Elem *)_CSTD memchr(_First, _Ch, _Count));
; 548  : 		}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 529  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@copy
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@copy:

; 530  : 		return (_Count == 0 ? _First1

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  00012	5d		 pop	 ebp

; 530  : 		return (_Count == 0 ? _First1

  00013	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 523  : 		return (*_First == 0 ? 0

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	80 38 00	 cmp	 BYTE PTR [eax], 0
  00009	75 04		 jne	 SHORT $LN3@length
  0000b	33 c0		 xor	 eax, eax

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@length:

; 523  : 		return (*_First == 0 ? 0

  0000f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL5@length:
  00012	8a 08		 mov	 cl, BYTE PTR [eax]
  00014	40		 inc	 eax
  00015	84 c9		 test	 cl, cl
  00017	75 f9		 jne	 SHORT $LL5@length
  00019	2b c2		 sub	 eax, edx

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 516  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 517  : 		return (_Count == 0 ? 0

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN3@compare
  0000a	33 c0		 xor	 eax, eax

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN3@compare:

; 517  : 		return (_Count == 0 ? 0

  0000e	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR __First2$[ebp]
  00015	83 e9 04	 sub	 ecx, 4
  00018	72 17		 jb	 SHORT $LN7@compare
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@compare:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN6@compare
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL8@compare
$LN7@compare:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 35		 je	 SHORT $LN5@compare
$LN6@compare:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN9@compare
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 2a		 je	 SHORT $LN5@compare
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN9@compare
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1d		 je	 SHORT $LN5@compare
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN9@compare
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 10		 je	 SHORT $LN5@compare
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 08		 je	 SHORT $LN5@compare
$LN9@compare:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	5e		 pop	 esi

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN5@compare:

; 517  : 		return (_Count == 0 ? 0

  0006b	33 c0		 xor	 eax, eax
  0006d	5e		 pop	 esi

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@_W@std@@SAGXZ
_TEXT	SEGMENT
?eof@?$char_traits@_W@std@@SAGXZ PROC			; std::char_traits<wchar_t>::eof, COMDAT

; 386  : 		return (WEOF);

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 387  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@_W@std@@SAGXZ ENDP			; std::char_traits<wchar_t>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@_W@std@@SAGABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@_W@std@@SAGABG@Z PROC		; std::char_traits<wchar_t>::not_eof, COMDAT

; 380  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 		return (_Meta != eof() ? _Meta : !eof());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000e	66 3b c1	 cmp	 ax, cx
  00011	75 02		 jne	 SHORT $LN4@not_eof
  00013	33 c0		 xor	 eax, eax
$LN4@not_eof:

; 382  : 		}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?not_eof@?$char_traits@_W@std@@SAGABG@Z ENDP		; std::char_traits<wchar_t>::not_eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z PROC	; std::char_traits<wchar_t>::eq_int_type, COMDAT

; 374  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	66 8b 08	 mov	 cx, WORD PTR [eax]
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	66 3b 08	 cmp	 cx, WORD PTR [eax]
  0000f	0f 94 c0	 sete	 al

; 375  : 		return (_Left == _Right);
; 376  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ENDP	; std::char_traits<wchar_t>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z PROC	; std::char_traits<wchar_t>::to_int_type, COMDAT

; 368  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  : 		return (_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	66 8b 00	 mov	 ax, WORD PTR [eax]

; 370  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ENDP	; std::char_traits<wchar_t>::to_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z PROC	; std::char_traits<wchar_t>::to_char_type, COMDAT

; 362  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 		return (_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	66 8b 00	 mov	 ax, WORD PTR [eax]

; 364  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ENDP	; std::char_traits<wchar_t>::to_char_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z PROC		; std::char_traits<wchar_t>::eq, COMDAT

; 350  : 		{	// test for element equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	66 8b 08	 mov	 cx, WORD PTR [eax]
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	66 3b 08	 cmp	 cx, WORD PTR [eax]
  0000f	0f 94 c0	 sete	 al

; 351  : 		return (_Left == _Right);
; 352  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ENDP		; std::char_traits<wchar_t>::eq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 344  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 345  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	66 8b 08	 mov	 cx, WORD PTR [eax]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	66 89 08	 mov	 WORD PTR [eax], cx

; 346  : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT

; 332  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@move
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 334  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));
; 335  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@move:

; 333  : 		return (_Count == 0 ? _First1

  0000f	03 c0		 add	 eax, eax
  00011	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 334  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));
; 335  : 		}

  00014	5d		 pop	 ebp

; 333  : 		return (_Count == 0 ? _First1

  00015	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT

; 309  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@copy
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 311  : 			: (_Elem *)_CSTD wmemcpy(_First1, _First2, _Count));
; 312  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@copy:

; 310  : 		return (_Count == 0 ? _First1

  0000f	03 c0		 add	 eax, eax
  00011	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 311  : 			: (_Elem *)_CSTD wmemcpy(_First1, _First2, _Count));
; 312  : 		}

  00014	5d		 pop	 ebp

; 310  : 		return (_Count == 0 ? _First1

  00015	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 302  : 		{	// find length of null-terminated sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 303  : 		return (*_First == 0 ? 0

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0000a	75 04		 jne	 SHORT $LN3@length
  0000c	33 c0		 xor	 eax, eax

; 304  : 			: _CSTD wcslen(_First));
; 305  : 		}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN3@length:

; 303  : 		return (*_First == 0 ? 0

  00010	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL5@length:
  00013	66 8b 08	 mov	 cx, WORD PTR [eax]
  00016	83 c0 02	 add	 eax, 2
  00019	66 85 c9	 test	 cx, cx
  0001c	75 f5		 jne	 SHORT $LL5@length
  0001e	2b c2		 sub	 eax, edx
  00020	d1 f8		 sar	 eax, 1

; 304  : 			: _CSTD wcslen(_First));
; 305  : 		}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?length@?$char_traits@_W@std@@SAIPB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z PROC		; std::char_traits<wchar_t>::compare, COMDAT

; 296  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 297  : 		return (_Count == 0 ? 0

  00004	8b 75 10	 mov	 esi, DWORD PTR __Count$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 19		 je	 SHORT $LN7@compare
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
$LL8@compare:
  00011	66 8b 02	 mov	 ax, WORD PTR [edx]
  00014	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  00017	75 10		 jne	 SHORT $LN12@compare
  00019	83 c2 02	 add	 edx, 2
  0001c	83 c1 02	 add	 ecx, 2
  0001f	83 ee 01	 sub	 esi, 1
  00022	75 ed		 jne	 SHORT $LL8@compare
$LN7@compare:
  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 298  : 			: _CSTD wmemcmp(_First1, _First2, _Count));
; 299  : 		}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN12@compare:

; 297  : 		return (_Count == 0 ? 0

  00029	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0002c	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  0002f	5e		 pop	 esi
  00030	1b c0		 sbb	 eax, eax
  00032	83 e0 fe	 and	 eax, -2			; fffffffeH
  00035	40		 inc	 eax

; 298  : 			: _CSTD wmemcmp(_First1, _First2, _Count));
; 299  : 		}

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ENDP		; std::char_traits<wchar_t>::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 94   :         return;
; 95   :     }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 89   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 90   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 84   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 85   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 67   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 68   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 60   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 61   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0000f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00014	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 62   :     }

  00017	8b c1		 mov	 eax, ecx
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -8					; size = 8
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 53   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 54   :         __std_exception_data _InitData = { _Message, true };

  00006	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx
  0000f	89 45 f8	 mov	 DWORD PTR __InitData$[ebp], eax
  00012	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00015	c6 45 fc 01	 mov	 BYTE PTR __InitData$[ebp+4], 1

; 55   :         __std_exception_copy(&_InitData, &_Data);

  00019	52		 push	 edx
  0001a	8d 45 f8	 lea	 eax, DWORD PTR __InitData$[ebp]
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00023	50		 push	 eax
  00024	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00028	e8 00 00 00 00	 call	 ___std_exception_copy
  0002d	83 c4 08	 add	 esp, 8

; 56   :     }

  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT

; 244  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	89 45 10	 mov	 DWORD PTR __N$[ebp], eax

; 248  :         #pragma warning(pop)
; 249  :     }

  0000b	5d		 pop	 ebp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  0000c	e9 00 00 00 00	 jmp	 _memmove
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 231  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	89 45 10	 mov	 DWORD PTR __N$[ebp], eax

; 235  :         #pragma warning(pop)
; 236  :     }

  0000b	5d		 pop	 ebp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0000c	e9 00 00 00 00	 jmp	 _memcpy
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemcmp
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcmp PROC						; COMDAT

; 215  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 216  :         for (; 0 < _N; ++_S1, ++_S2, --_N)

  00004	8b 75 10	 mov	 esi, DWORD PTR __N$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 19		 je	 SHORT $LN3@wmemcmp
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
$LL4@wmemcmp:

; 217  :             if (*_S1 != *_S2)

  00011	66 8b 02	 mov	 ax, WORD PTR [edx]
  00014	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  00017	75 10		 jne	 SHORT $LN8@wmemcmp

; 216  :         for (; 0 < _N; ++_S1, ++_S2, --_N)

  00019	83 c2 02	 add	 edx, 2
  0001c	83 c1 02	 add	 ecx, 2
  0001f	83 ee 01	 sub	 esi, 1
  00022	75 ed		 jne	 SHORT $LL4@wmemcmp
$LN3@wmemcmp:

; 219  : 
; 220  :         return 0;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 221  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN8@wmemcmp:

; 218  :                 return *_S1 < *_S2 ? -1 : 1;

  00029	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0002c	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  0002f	5e		 pop	 esi
  00030	1b c0		 sbb	 eax, eax
  00032	83 e0 fe	 and	 eax, -2			; fffffffeH
  00035	40		 inc	 eax

; 221  :     }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_wmemcmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2261 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2262 :     int _Result;
; 2263 :     va_list _ArgList;
; 2264 :     __crt_va_start(_ArgList, _Format);
; 2265 :     _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00020	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2266 :     __crt_va_end(_ArgList);
; 2267 :     return _Result;
; 2268 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2167 :     return __stdio_common_vsscanf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00020	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2168 :         _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2169 :         _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2170 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1960 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1961 :     int _Result;
; 1962 :     va_list _ArgList;
; 1963 :     __crt_va_start(_ArgList, _Format);
; 1964 : #pragma warning(suppress:28719)    // __WARNING_BANNED_API_USAGE
; 1965 :     _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1966 :     __crt_va_end(_ArgList);
; 1967 :     return _Result;
; 1968 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1834 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1835 :         int _Result;
; 1836 :         va_list _ArgList;
; 1837 :         __crt_va_start(_ArgList, _Format);
; 1838 :         _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s
  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1839 :         __crt_va_end(_ArgList);
; 1840 :         return _Result;
; 1841 :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1494 :     int const _Result = __stdio_common_vsprintf_s(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1495 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1496 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1497 : 
; 1498 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1499 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1406 :     #pragma warning(push)
; 1407 :     #pragma warning(disable: 4996) // Deprecation
; 1408 :     return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1409 :     #pragma warning(pop)
; 1410 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);
; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 836  :     __crt_va_end(_ArgList);
; 837  :     return _Result;
; 838  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT _swscanf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_swscanf_s PROC						; COMDAT

; 2085 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2086 :         int _Result;
; 2087 :         va_list _ArgList;
; 2088 :         __crt_va_start(_ArgList, _Format);
; 2089 :         _Result = _vswscanf_s_l(_Buffer, _Format, NULL, _ArgList);  

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vswscanf
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2090 :         __crt_va_end(_ArgList);
; 2091 :         return _Result;
; 2092 :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
_swscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswscanf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vswscanf_s_l PROC					; COMDAT

; 1943 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1944 :     return __stdio_common_vswscanf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vswscanf
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1945 :         _CRT_INTERNAL_LOCAL_SCANF_OPTIONS | _CRT_INTERNAL_SCANF_SECURECRT,
; 1946 :         _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1947 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vswscanf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT ?swprintf@@YAHQA_WQB_WZZ
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
?swprintf@@YAHQA_WQB_WZZ PROC				; swprintf, COMDAT

; 1824 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 :             int _Result;
; 1826 :             va_list _ArgList;
; 1827 :             __crt_va_start(_ArgList, _Format);
; 1828 :             #pragma warning(suppress: 28719)
; 1829 :             _Result = vswprintf(_Buffer, _CRT_INT_MAX, _Format, _ArgList);       

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00011	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1830 :             __crt_va_end(_ArgList);
; 1831 :             return _Result;
; 1832 :         }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?swprintf@@YAHQA_WQB_WZZ ENDP				; swprintf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PB_W@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PB_W@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<wchar_t const *>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PB_W@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1536 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1537 :         int _Result;
; 1538 :         va_list _ArgList;
; 1539 :         __crt_va_start(_ArgList, _Format);
; 1540 :         _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vswprintf_s
  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1541 :         __crt_va_end(_ArgList);
; 1542 :         return _Result;
; 1543 :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1262 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1263 :     int const _Result = __stdio_common_vswprintf_s(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vswprintf_s

; 1264 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1265 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1266 : 
; 1267 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1268 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT _vswprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vswprintf PROC						; COMDAT

; 1245 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1246 :     return _vswprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00020	83 c9 ff	 or	 ecx, -1
  00023	83 c4 1c	 add	 esp, 28			; 0000001cH
  00026	85 c0		 test	 eax, eax
  00028	0f 48 c1	 cmovs	 eax, ecx

; 1247 : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_vswprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_c_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_c_l PROC					; COMDAT

; 1158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1159 :     int const _Result = __stdio_common_vswprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vswprintf

; 1160 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1161 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1162 : 
; 1163 :     return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1164 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __snwprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snwprintf PROC					; COMDAT

; 1673 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1674 :     int _Result;
; 1675 :     va_list _ArgList;
; 1676 :     __crt_va_start(_ArgList, _Format);
; 1677 : 
; 1678 :     #pragma warning(push)
; 1679 :     #pragma warning(disable: 4996) // Deprecation
; 1680 :     _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1681 :     #pragma warning(pop)
; 1682 : 
; 1683 :     __crt_va_end(_ArgList);
; 1684 :     return _Result;
; 1685 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstdio.h
;	COMDAT __vsnwprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnwprintf_l PROC					; COMDAT

; 1056 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1057 :     int const _Result = __stdio_common_vswprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vswprintf

; 1058 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1059 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1060 : 
; 1061 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1062 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<wchar_t const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<wchar_t const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 83   :     static unsigned __int64 _OptionsStorage;
; 84   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 85   : }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _frexpl
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 4
_frexpl	PROC						; COMDAT

; 849  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 850  :     return frexp((double)_X, _Y);

  00003	ff 75 10	 push	 DWORD PTR __Y$[ebp]
  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR __X$[ebp]
  0000b	83 ec 08	 sub	 esp, 8
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	e8 00 00 00 00	 call	 _frexp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 851  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_frexpl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _fabsl
_TEXT	SEGMENT
tv68 = -8						; size = 8
__X$ = 8						; size = 8
_fabsl	PROC						; COMDAT

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 829  :     return fabs((double)_X);

  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR __X$[ebp]
  0000b	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00012	f2 0f 11 45 f8	 movsd	 QWORD PTR tv68[ebp], xmm0
  00017	dd 45 f8	 fld	 QWORD PTR tv68[ebp]

; 830  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_fabsl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT

; 17787: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17788:     volatile char *vptr = (volatile char *)ptr;
; 17789: 
; 17790: #if defined(_M_AMD64)
; 17791: 
; 17792:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
; 17793: 
; 17794: #else
; 17795: 
; 17796:     while (cnt) {

  00003	8b 55 0c	 mov	 edx, DWORD PTR _cnt$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  00009	8b c8		 mov	 ecx, eax
  0000b	85 d2		 test	 edx, edx
  0000d	74 0c		 je	 SHORT $LN3@RtlSecureZ
  0000f	90		 npad	 1
$LL2@RtlSecureZ:

; 17797: 
; 17798: #if !defined(_M_CEE) && defined(_M_ARM)
; 17799: 
; 17800:         __iso_volatile_store8(vptr, 0);
; 17801: 
; 17802: #else
; 17803: 
; 17804:         *vptr = 0;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 17805: 
; 17806: #endif
; 17807: 
; 17808:         vptr++;

  00013	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]

; 17809:         cnt--;

  00016	83 ea 01	 sub	 edx, 1
  00019	75 f5		 jne	 SHORT $LL2@RtlSecureZ
$LN3@RtlSecureZ:

; 17810:     }
; 17811: 
; 17812: #endif // _M_AMD64
; 17813: 
; 17814:     return ptr;
; 17815: }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
;	COMDAT ?strstr@@YAPADQADQBD@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubString$ = 12					; size = 4
?strstr@@YAPADQADQBD@Z PROC				; strstr, COMDAT

; 536  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 538  :     }

  00003	5d		 pop	 ebp

; 537  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00004	e9 00 00 00 00	 jmp	 _strstr
?strstr@@YAPADQADQBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
;	COMDAT ?strrchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADQADH@Z PROC				; strrchr, COMDAT

; 530  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 532  :     }

  00003	5d		 pop	 ebp

; 531  :         return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));

  00004	e9 00 00 00 00	 jmp	 _strrchr
?strrchr@@YAPADQADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
;	COMDAT ?strchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADQADH@Z PROC				; strchr, COMDAT

; 518  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  :     }

  00003	5d		 pop	 ebp

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00004	e9 00 00 00 00	 jmp	 _strchr
?strchr@@YAPADQADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__C$ = 12						; size = 2
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT

; 545  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  :     }

  00003	5d		 pop	 ebp

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

  00004	e9 00 00 00 00	 jmp	 _wcsrchr
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
END
