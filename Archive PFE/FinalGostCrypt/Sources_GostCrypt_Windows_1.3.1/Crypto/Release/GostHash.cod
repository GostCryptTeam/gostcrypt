; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Crypto\GostHash.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_C_3	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
_GostR3411_94_CryptoProParamSet DB 01H
	DB	03H
	DB	0aH
	DB	09H
	DB	05H
	DB	0bH
	DB	04H
	DB	0fH
	DB	08H
	DB	06H
	DB	07H
	DB	0eH
	DB	0dH
	DB	00H
	DB	02H
	DB	0cH
	DB	0dH
	DB	0eH
	DB	04H
	DB	01H
	DB	07H
	DB	00H
	DB	05H
	DB	0aH
	DB	03H
	DB	0cH
	DB	08H
	DB	0fH
	DB	06H
	DB	02H
	DB	09H
	DB	0bH
	DB	07H
	DB	06H
	DB	02H
	DB	04H
	DB	0dH
	DB	09H
	DB	0fH
	DB	00H
	DB	0aH
	DB	01H
	DB	05H
	DB	0bH
	DB	08H
	DB	0eH
	DB	0cH
	DB	03H
	DB	07H
	DB	06H
	DB	04H
	DB	0bH
	DB	09H
	DB	0cH
	DB	02H
	DB	0aH
	DB	01H
	DB	08H
	DB	00H
	DB	0eH
	DB	0fH
	DB	0dH
	DB	03H
	DB	05H
	DB	04H
	DB	0aH
	DB	07H
	DB	0cH
	DB	00H
	DB	0fH
	DB	02H
	DB	08H
	DB	0eH
	DB	01H
	DB	06H
	DB	05H
	DB	0dH
	DB	0bH
	DB	09H
	DB	03H
	DB	07H
	DB	0fH
	DB	0cH
	DB	0eH
	DB	09H
	DB	04H
	DB	01H
	DB	00H
	DB	03H
	DB	0bH
	DB	05H
	DB	02H
	DB	06H
	DB	0aH
	DB	08H
	DB	0dH
	DB	05H
	DB	0fH
	DB	04H
	DB	00H
	DB	02H
	DB	0dH
	DB	0bH
	DB	09H
	DB	01H
	DB	07H
	DB	06H
	DB	03H
	DB	0cH
	DB	0eH
	DB	0aH
	DB	08H
	DB	0aH
	DB	04H
	DB	05H
	DB	06H
	DB	08H
	DB	01H
	DB	03H
	DB	07H
	DB	0dH
	DB	0cH
	DB	0eH
	DB	00H
	DB	09H
	DB	02H
	DB	0bH
	DB	0fH
_DATA	ENDS
PUBLIC	_GOSTHASH_init
PUBLIC	_GOSTHASH_add
PUBLIC	_GOSTHASH_finalize
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _step
_TEXT	SEGMENT
_K$ = -260						; size = 128
_W$ = -132						; size = 32
_U$ = -100						; size = 32
_S$ = -68						; size = 32
_V$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_H$ = 8							; size = 4
_M$ = 12						; size = 4
_ctx$ = 16						; size = 4
_step	PROC						; COMDAT

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _M$[ebp]

; 331  : 	byte U[32], W[32], V[32], S[32], K[4][32];
; 332  : 	gst_dword i;
; 333  : 	
; 334  : 	xor_blocks(W, H, M, 32);

  00017	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _H$[ebp]
  00022	6a 20		 push	 32			; 00000020H
  00024	53		 push	 ebx
  00025	57		 push	 edi
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _xor_blocks

; 335  : 	P_transform(W, K[0]); //First key

  0002c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _K$[ebp]
  00032	50		 push	 eax
  00033	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _P_transform

; 336  : 
; 337  : 	gost_encrypt_with_key (H, S, K[0]);

  0003f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _K$[ebp]
  00045	50		 push	 eax
  00046	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  00049	50		 push	 eax
  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 _gost_encrypt_with_key

; 338  : 
; 339  : 	A (H, U);

  00050	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  00053	50		 push	 eax
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 _A

; 340  : 	A (M, V);

  0005a	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  0005d	50		 push	 eax
  0005e	53		 push	 ebx
  0005f	e8 00 00 00 00	 call	 _A

; 341  : 	A (V, V);

  00064	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  00067	50		 push	 eax
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _A

; 342  : 	xor_blocks(W, U, V, 32);

  0006e	6a 20		 push	 32			; 00000020H
  00070	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  00073	50		 push	 eax
  00074	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  00077	50		 push	 eax
  00078	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 _xor_blocks
  00084	83 c4 4c	 add	 esp, 76			; 0000004cH

; 343  : 	P_transform(W, K[1]); //Second key

  00087	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _K$[ebp+32]
  0008d	50		 push	 eax
  0008e	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _P_transform

; 344  : 
; 345  : 	gost_encrypt_with_key (H + 8, S + 8, K[1]);

  0009a	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _K$[ebp+32]
  000a0	50		 push	 eax
  000a1	8d 45 c4	 lea	 eax, DWORD PTR _S$[ebp+8]
  000a4	50		 push	 eax
  000a5	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _gost_encrypt_with_key

; 346  : 
; 347  : 	A (U, U);

  000ae	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  000b1	50		 push	 eax
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _A

; 348  : 	/* As the other C values are all 0's, we only need to XOR
; 349  :      * with C[3] */
; 350  : 	xor_blocks(U, U, C_3, 32);

  000b8	6a 20		 push	 32			; 00000020H
  000ba	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  000bd	68 00 00 00 00	 push	 OFFSET _C_3
  000c2	50		 push	 eax
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _xor_blocks

; 351  : 	A (V, V);

  000c9	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  000cc	50		 push	 eax
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _A

; 352  : 	A (V, V);

  000d3	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  000d6	50		 push	 eax
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _A

; 353  : 	xor_blocks (W, U, V, 32);

  000dd	6a 20		 push	 32			; 00000020H
  000df	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  000e2	50		 push	 eax
  000e3	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  000e6	50		 push	 eax
  000e7	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 _xor_blocks
  000f3	83 c4 4c	 add	 esp, 76			; 0000004cH

; 354  : 	P_transform (W, K[2]); //Third key

  000f6	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _K$[ebp+64]
  000fc	50		 push	 eax
  000fd	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _P_transform

; 355  : 	
; 356  : 	gost_encrypt_with_key (H + 16, S + 16, K[2]);

  00109	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _K$[ebp+64]
  0010f	50		 push	 eax
  00110	8d 45 cc	 lea	 eax, DWORD PTR _S$[ebp+16]
  00113	50		 push	 eax
  00114	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 _gost_encrypt_with_key

; 357  : 	
; 358  : 	A (U, U);

  0011d	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  00120	50		 push	 eax
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 _A

; 359  : 	A (V, V);

  00127	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  0012a	50		 push	 eax
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 _A

; 360  : 	A (V, V);

  00131	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  00134	50		 push	 eax
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _A

; 361  : 	xor_blocks (W, U, V, 32);

  0013b	6a 20		 push	 32			; 00000020H
  0013d	8d 45 dc	 lea	 eax, DWORD PTR _V$[ebp]
  00140	50		 push	 eax
  00141	8d 45 9c	 lea	 eax, DWORD PTR _U$[ebp]
  00144	50		 push	 eax
  00145	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _xor_blocks

; 362  : 	P_transform (W, K[3]); //Fourth key

  00151	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _K$[ebp+96]
  00157	50		 push	 eax
  00158	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _W$[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _P_transform
  00164	83 c4 44	 add	 esp, 68			; 00000044H

; 363  : 	
; 364  : 	gost_encrypt_with_key (H + 24, S + 24, K[3]);

  00167	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _K$[ebp+96]
  0016d	50		 push	 eax
  0016e	8d 45 d4	 lea	 eax, DWORD PTR _S$[ebp+24]
  00171	50		 push	 eax
  00172	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _gost_encrypt_with_key
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017e	be 0c 00 00 00	 mov	 esi, 12			; 0000000cH
$LL4@step:

; 365  : 
; 366  : 	for (i = 0; i < 12; i++)
; 367  : 		PSI (S);

  00183	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 _PSI
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 ee 01	 sub	 esi, 1
  00192	75 ef		 jne	 SHORT $LL4@step

; 368  : 	xor_blocks (S, S, M, 32);

  00194	6a 20		 push	 32			; 00000020H
  00196	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  00199	53		 push	 ebx
  0019a	50		 push	 eax
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _xor_blocks

; 369  : 	PSI (S);

  001a1	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 _PSI

; 370  : 	xor_blocks (S, S, H, 32);

  001aa	6a 20		 push	 32			; 00000020H
  001ac	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  001af	57		 push	 edi
  001b0	50		 push	 eax
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 _xor_blocks
  001b7	83 c4 24	 add	 esp, 36			; 00000024H
  001ba	be 3d 00 00 00	 mov	 esi, 61			; 0000003dH
  001bf	90		 npad	 1
$LL7@step:

; 371  : 	for (i = 0; i < 61; i++)
; 372  : 		PSI (S);

  001c0	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _PSI
  001c9	83 c4 04	 add	 esp, 4
  001cc	83 ee 01	 sub	 esi, 1
  001cf	75 ef		 jne	 SHORT $LL7@step

; 373  : 	copy_blocks (H, S, 32);

  001d1	6a 20		 push	 32			; 00000020H
  001d3	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  001d6	50		 push	 eax
  001d7	57		 push	 edi
  001d8	e8 00 00 00 00	 call	 _memcpy

; 374  : }

  001dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e3	33 cd		 xor	 ecx, ebp
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c3		 ret	 0
_step	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _PSI
_TEXT	SEGMENT
tv373 = 8						; size = 4
_X$ = 8							; size = 4
_PSI	PROC						; COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  : 	gst_word T;
; 298  : 
; 299  : 	T = (gst_word)(X[0]^X[2]^X[4]^X[6]^X[24]^X[30])|

  00003	8b 45 08	 mov	 eax, DWORD PTR _X$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	0f b6 48 19	 movzx	 ecx, BYTE PTR [eax+25]
  0000d	8d 78 1f	 lea	 edi, DWORD PTR [eax+31]
  00010	32 48 07	 xor	 cl, BYTE PTR [eax+7]
  00013	8d 58 1e	 lea	 ebx, DWORD PTR [eax+30]
  00016	32 48 05	 xor	 cl, BYTE PTR [eax+5]
  00019	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
  0001c	32 48 03	 xor	 cl, BYTE PTR [eax+3]
  0001f	32 48 01	 xor	 cl, BYTE PTR [eax+1]
  00022	32 0f		 xor	 cl, BYTE PTR [edi]
  00024	0f b6 d1	 movzx	 edx, cl
  00027	0f b6 48 18	 movzx	 ecx, BYTE PTR [eax+24]
  0002b	32 48 06	 xor	 cl, BYTE PTR [eax+6]
  0002e	32 48 04	 xor	 cl, BYTE PTR [eax+4]
  00031	32 0b		 xor	 cl, BYTE PTR [ebx]
  00033	32 08		 xor	 cl, BYTE PTR [eax]
  00035	32 0e		 xor	 cl, BYTE PTR [esi]
  00037	66 c1 e2 08	 shl	 dx, 8
  0003b	0f b6 c9	 movzx	 ecx, cl
  0003e	66 0b d1	 or	 dx, cx
  00041	89 5d 08	 mov	 DWORD PTR tv373[ebp], ebx
  00044	0f b7 da	 movzx	 ebx, dx

; 300  : 		((gst_word)(X[1]^X[3]^X[5]^X[7]^X[25]^X[31])<<8);
; 301  : 	move_blocks(X, X+2, 30);

  00047	3b f0		 cmp	 esi, eax
  00049	73 26		 jae	 SHORT $LN10@PSI
  0004b	ba 1d 00 00 00	 mov	 edx, 29			; 0000001dH
  00050	8d 48 1d	 lea	 ecx, DWORD PTR [eax+29]
  00053	2b f0		 sub	 esi, eax
$LL6@PSI:
  00055	83 ea 01	 sub	 edx, 1
  00058	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]
  0005b	88 01		 mov	 BYTE PTR [ecx], al
  0005d	8d 49 ff	 lea	 ecx, DWORD PTR [ecx-1]
  00060	79 f3		 jns	 SHORT $LL6@PSI

; 302  : 	X[30] = (byte)(T&0xFF);

  00062	8b 45 08	 mov	 eax, DWORD PTR tv373[ebp]
  00065	88 18		 mov	 BYTE PTR [eax], bl

; 303  : 	X[31] = (byte)(T>>8);

  00067	c1 fb 08	 sar	 ebx, 8
  0006a	88 1f		 mov	 BYTE PTR [edi], bl
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 304  : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0

; 300  : 		((gst_word)(X[1]^X[3]^X[5]^X[7]^X[25]^X[31])<<8);
; 301  : 	move_blocks(X, X+2, 30);

$LN10@PSI:
  00071	2b f0		 sub	 esi, eax
  00073	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  00078	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL17@PSI:
  00080	8a 0c 30	 mov	 cl, BYTE PTR [eax+esi]
  00083	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00086	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  00089	83 ea 01	 sub	 edx, 1
  0008c	75 f2		 jne	 SHORT $LL17@PSI

; 302  : 	X[30] = (byte)(T&0xFF);

  0008e	8b 45 08	 mov	 eax, DWORD PTR tv373[ebp]
  00091	88 18		 mov	 BYTE PTR [eax], bl

; 303  : 	X[31] = (byte)(T>>8);

  00093	c1 fb 08	 sar	 ebx, 8
  00096	88 1f		 mov	 BYTE PTR [edi], bl
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 304  : }

  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_PSI	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _A
_TEXT	SEGMENT
_F$ = 8							; size = 4
_T$ = 12						; size = 4
_A	PROC						; COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _F$[ebp]

; 280  : 	byte i;
; 281  : 	for (i = 0; i < 24; i++)

  00006	8b 55 0c	 mov	 edx, DWORD PTR _T$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  0000f	be 18 00 00 00	 mov	 esi, 24			; 00000018H
  00014	8b df		 mov	 ebx, edi
  00016	2b da		 sub	 ebx, edx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@A:

; 282  : 		T[i] = F[i+8];

  00020	8a 0c 13	 mov	 cl, BYTE PTR [ebx+edx]
  00023	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00026	88 4a ff	 mov	 BYTE PTR [edx-1], cl
  00029	83 ee 01	 sub	 esi, 1
  0002c	75 f2		 jne	 SHORT $LL4@A

; 283  : 	for (i = 0; i < 8; i++)

  0002e	8b 5d 0c	 mov	 ebx, DWORD PTR _T$[ebp]
  00031	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  00034	2b f8		 sub	 edi, eax
  00036	2b d8		 sub	 ebx, eax
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@A:

; 284  : 		T[i+24] = F[i] ^ F[i+8];

  00040	8a 0c 07	 mov	 cl, BYTE PTR [edi+eax]
  00043	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00046	32 48 ff	 xor	 cl, BYTE PTR [eax-1]
  00049	88 4c 03 17	 mov	 BYTE PTR [ebx+eax+23], cl
  0004d	83 ea 01	 sub	 edx, 1
  00050	75 ee		 jne	 SHORT $LL7@A
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx

; 285  : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_A	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _P_transform
_TEXT	SEGMENT
_F$ = 8							; size = 4
_T$ = 12						; size = 4
_P_transform PROC					; COMDAT

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 261  : 	gst_dword i, k;
; 262  : 	for (i = 0; i < 4; i++)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _T$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _F$[ebp]
  00009	83 c2 04	 add	 edx, 4
  0000c	56		 push	 esi
  0000d	83 c0 02	 add	 eax, 2
  00010	be 04 00 00 00	 mov	 esi, 4
$LL4@P_transfor:

; 263  : 		for (k = 0; k < 8; k++)
; 264  : 			T[i+4*k] = F[8*i+k];

  00015	0f b6 48 fe	 movzx	 ecx, BYTE PTR [eax-2]
  00019	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0001c	88 4a fb	 mov	 BYTE PTR [edx-5], cl
  0001f	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00022	0f b6 48 f7	 movzx	 ecx, BYTE PTR [eax-9]
  00026	88 4a ff	 mov	 BYTE PTR [edx-1], cl
  00029	0f b6 48 f8	 movzx	 ecx, BYTE PTR [eax-8]
  0002d	88 4a 03	 mov	 BYTE PTR [edx+3], cl
  00030	0f b6 48 f9	 movzx	 ecx, BYTE PTR [eax-7]
  00034	88 4a 07	 mov	 BYTE PTR [edx+7], cl
  00037	0f b6 48 fa	 movzx	 ecx, BYTE PTR [eax-6]
  0003b	88 4a 0b	 mov	 BYTE PTR [edx+11], cl
  0003e	0f b6 48 fb	 movzx	 ecx, BYTE PTR [eax-5]
  00042	88 4a 0f	 mov	 BYTE PTR [edx+15], cl
  00045	0f b6 48 fc	 movzx	 ecx, BYTE PTR [eax-4]
  00049	88 4a 13	 mov	 BYTE PTR [edx+19], cl
  0004c	0f b6 48 fd	 movzx	 ecx, BYTE PTR [eax-3]
  00050	88 4a 17	 mov	 BYTE PTR [edx+23], cl
  00053	83 ee 01	 sub	 esi, 1
  00056	75 bd		 jne	 SHORT $LL4@P_transfor
  00058	5e		 pop	 esi

; 265  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_P_transform ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _xor_blocks
_TEXT	SEGMENT
tv498 = -16						; size = 4
tv491 = -12						; size = 4
tv493 = -8						; size = 4
tv495 = -4						; size = 4
_T$ = 8							; size = 4
_F$ = 12						; size = 4
_S$ = 16						; size = 4
_len$ = 20						; size = 4
_xor_blocks PROC					; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 241  : 	gst_dword i;
; 242  : 	for (i = 0; i < len; i++)

  00003	8b 55 14	 mov	 edx, DWORD PTR _len$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	33 c9		 xor	 ecx, ecx
  0000b	85 d2		 test	 edx, edx
  0000d	0f 8e d4 00 00
	00		 jle	 $LN3@xor_blocks

; 243  : 		T[i] = F[i] ^ S[i];

  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _S$[ebp]
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _T$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 0c	 mov	 edi, DWORD PTR _F$[ebp]
  0001f	83 fa 20	 cmp	 edx, 32			; 00000020H
  00022	0f 82 9d 00 00
	00		 jb	 $LN9@xor_blocks
  00028	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0002b	03 c2		 add	 eax, edx
  0002d	3b f0		 cmp	 esi, eax
  0002f	77 0d		 ja	 SHORT $LN10@xor_blocks
  00031	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00034	03 c2		 add	 eax, edx
  00036	3b c3		 cmp	 eax, ebx
  00038	0f 83 87 00 00
	00		 jae	 $LN9@xor_blocks
$LN10@xor_blocks:
  0003e	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00041	03 c2		 add	 eax, edx
  00043	3b f0		 cmp	 esi, eax
  00045	77 09		 ja	 SHORT $LN11@xor_blocks
  00047	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0004a	03 c2		 add	 eax, edx
  0004c	3b c7		 cmp	 eax, edi
  0004e	73 75		 jae	 SHORT $LN9@xor_blocks
$LN11@xor_blocks:
  00050	8b c2		 mov	 eax, edx
  00052	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00057	79 05		 jns	 SHORT $LN21@xor_blocks
  00059	48		 dec	 eax
  0005a	83 c8 e0	 or	 eax, -32		; ffffffe0H
  0005d	40		 inc	 eax
$LN21@xor_blocks:
  0005e	8b da		 mov	 ebx, edx

; 241  : 	gst_dword i;
; 242  : 	for (i = 0; i < len; i++)

  00060	8b d7		 mov	 edx, edi
  00062	2b d8		 sub	 ebx, eax
  00064	8b 45 10	 mov	 eax, DWORD PTR _S$[ebp]
  00067	2b d0		 sub	 edx, eax
  00069	89 5d f0	 mov	 DWORD PTR tv498[ebp], ebx
  0006c	89 55 fc	 mov	 DWORD PTR tv495[ebp], edx
  0006f	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  00072	8b d6		 mov	 edx, esi
  00074	2b d0		 sub	 edx, eax
  00076	89 55 f8	 mov	 DWORD PTR tv493[ebp], edx
  00079	8b d7		 mov	 edx, edi
  0007b	8b 7d f8	 mov	 edi, DWORD PTR tv493[ebp]
  0007e	2b d6		 sub	 edx, esi
  00080	8b 75 fc	 mov	 esi, DWORD PTR tv495[ebp]
  00083	89 55 f4	 mov	 DWORD PTR tv491[ebp], edx
$LL4@xor_blocks:
  00086	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00089	8b 55 f4	 mov	 edx, DWORD PTR tv491[ebp]
  0008c	83 c1 20	 add	 ecx, 32			; 00000020H
  0008f	8d 40 20	 lea	 eax, DWORD PTR [eax+32]
  00092	8d 5b 20	 lea	 ebx, DWORD PTR [ebx+32]
  00095	0f 10 4c 06 e0	 movups	 xmm1, XMMWORD PTR [esi+eax-32]

; 243  : 		T[i] = F[i] ^ S[i];

  0009a	66 0f ef c8	 pxor	 xmm1, xmm0
  0009e	0f 11 4c 07 e0	 movups	 XMMWORD PTR [edi+eax-32], xmm1
  000a3	0f 10 4c 1a e0	 movups	 xmm1, XMMWORD PTR [edx+ebx-32]
  000a8	8b 55 14	 mov	 edx, DWORD PTR _len$[ebp]
  000ab	0f 10 40 f0	 movups	 xmm0, XMMWORD PTR [eax-16]
  000af	66 0f ef c8	 pxor	 xmm1, xmm0
  000b3	0f 11 4b e0	 movups	 XMMWORD PTR [ebx-32], xmm1
  000b7	3b 4d f0	 cmp	 ecx, DWORD PTR tv498[ebp]
  000ba	7c ca		 jl	 SHORT $LL4@xor_blocks
  000bc	8b 75 08	 mov	 esi, DWORD PTR _T$[ebp]
  000bf	8b 7d 0c	 mov	 edi, DWORD PTR _F$[ebp]
  000c2	8b 5d 10	 mov	 ebx, DWORD PTR _S$[ebp]
$LN9@xor_blocks:

; 241  : 	gst_dword i;
; 242  : 	for (i = 0; i < len; i++)

  000c5	3b ca		 cmp	 ecx, edx
  000c7	7d 1b		 jge	 SHORT $LN18@xor_blocks
  000c9	2b fb		 sub	 edi, ebx
  000cb	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  000ce	2b f3		 sub	 esi, ebx
  000d0	2b d1		 sub	 edx, ecx
$LL8@xor_blocks:

; 243  : 		T[i] = F[i] ^ S[i];

  000d2	8a 0c 38	 mov	 cl, BYTE PTR [eax+edi]
  000d5	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000d8	32 48 ff	 xor	 cl, BYTE PTR [eax-1]
  000db	88 4c 30 ff	 mov	 BYTE PTR [eax+esi-1], cl
  000df	83 ea 01	 sub	 edx, 1
  000e2	75 ee		 jne	 SHORT $LL8@xor_blocks
$LN18@xor_blocks:
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
$LN3@xor_blocks:

; 244  : }

  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
_xor_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _add_blocks
_TEXT	SEGMENT
_T$ = 8							; size = 4
_F$ = 12						; size = 4
_len$ = 16						; size = 4
_add_blocks PROC					; COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 217  : 	gst_dword i;
; 218  : 	gst_word carry = 0;
; 219  : 	gst_word sum;
; 220  : 	for (i = 0; i < len; i++)

  00004	8b 75 10	 mov	 esi, DWORD PTR _len$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	85 f6		 test	 esi, esi
  0000c	7e 36		 jle	 SHORT $LN3@add_blocks
  0000e	8b 45 08	 mov	 eax, DWORD PTR _T$[ebp]
  00011	53		 push	 ebx
  00012	8b 5d 0c	 mov	 ebx, DWORD PTR _F$[ebp]
  00015	2b d8		 sub	 ebx, eax
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@add_blocks:

; 221  : 	{
; 222  : 		sum = (gst_word)T[i] + (gst_word)F[i] + carry;

  00020	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00023	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00026	0f b6 54 03 ff	 movzx	 edx, BYTE PTR [ebx+eax-1]
  0002b	66 03 d1	 add	 dx, cx
  0002e	66 03 d7	 add	 dx, di
  00031	0f b7 ca	 movzx	 ecx, dx

; 223  : 		T[i] = (byte)sum & 0xFF;

  00034	88 48 ff	 mov	 BYTE PTR [eax-1], cl

; 224  : 		carry = sum >> 8;

  00037	66 c1 f9 08	 sar	 cx, 8
  0003b	0f b7 f9	 movzx	 edi, cx
  0003e	83 ee 01	 sub	 esi, 1
  00041	75 dd		 jne	 SHORT $LL4@add_blocks
  00043	5b		 pop	 ebx
$LN3@add_blocks:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 225  : 	}
; 226  : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_add_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _set_blocks
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_val$ = 12						; size = 1
_len$ = 16						; size = 4
_set_blocks PROC					; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 199  : 	gst_dword i;
; 200  : 	for (i = 0; i < len; i++)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	7e 1f		 jle	 SHORT $LN3@set_blocks

; 201  : 		ptr[i] = val;

  0000a	0f b6 45 0c	 movzx	 eax, BYTE PTR _val$[ebp]
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
  00011	69 c0 01 01 01
	01		 imul	 eax, 16843009		; 01010101H
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _ptr$[ebp]
  0001b	c1 e9 02	 shr	 ecx, 2
  0001e	f3 ab		 rep stosd
  00020	8b ce		 mov	 ecx, esi
  00022	83 e1 03	 and	 ecx, 3
  00025	f3 aa		 rep stosb
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
$LN3@set_blocks:

; 202  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_set_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _move_blocks
_TEXT	SEGMENT
_to$ = 8						; size = 4
_from$ = 12						; size = 4
_len$ = 16						; size = 4
_move_blocks PROC					; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  : 	gst_dword i;
; 179  : 	if (from < to)

  00003	8b 45 08	 mov	 eax, DWORD PTR _to$[ebp]

; 180  : 		for (i = len-1; i >= 0; i--)

  00006	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _from$[ebp]
  0000d	3b f0		 cmp	 esi, eax
  0000f	73 1f		 jae	 SHORT $LN8@move_block
  00011	83 ea 01	 sub	 edx, 1
  00014	78 2e		 js	 SHORT $LN6@move_block
  00016	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  00019	2b f0		 sub	 esi, eax
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@move_block:
  00020	83 ea 01	 sub	 edx, 1

; 181  : 			to[i] = from[i];

  00023	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]
  00026	88 01		 mov	 BYTE PTR [ecx], al
  00028	8d 49 ff	 lea	 ecx, DWORD PTR [ecx-1]
  0002b	79 f3		 jns	 SHORT $LL4@move_block
  0002d	5e		 pop	 esi

; 185  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN8@move_block:

; 182  : 	else
; 183  : 		for (i = 0; i < len; i++)

  00030	85 d2		 test	 edx, edx
  00032	7e 10		 jle	 SHORT $LN6@move_block
  00034	2b f0		 sub	 esi, eax
$LL15@move_block:

; 184  : 			to[i] = from[i];

  00036	8a 0c 30	 mov	 cl, BYTE PTR [eax+esi]
  00039	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0003c	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  0003f	83 ea 01	 sub	 edx, 1
  00042	75 f2		 jne	 SHORT $LL15@move_block
$LN6@move_block:
  00044	5e		 pop	 esi

; 185  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_move_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _copy_blocks
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_len$ = 16						; size = 4
_copy_blocks PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  : 	gst_dword i;
; 162  : 	for (i = 0; i < len; i++)

  00003	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	7e 18		 jle	 SHORT $LN3@copy_block
  0000a	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR _src$[ebp]
  00011	2b f0		 sub	 esi, eax
$LL8@copy_block:

; 163  : 		dst[i] = src[i];

  00013	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  00016	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00019	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  0001c	83 ea 01	 sub	 edx, 1
  0001f	75 f2		 jne	 SHORT $LL8@copy_block
  00021	5e		 pop	 esi
$LN3@copy_block:

; 164  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_copy_blocks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _gost_encrypt_with_key
_TEXT	SEGMENT
_X0$1$ = -24						; size = 4
_X1$1$ = -20						; size = 4
_X2$1$ = -16						; size = 4
_X3$1$ = -12						; size = 4
_X4$1$ = -8						; size = 4
_X5$1$ = -4						; size = 4
_X6$1$ = 8						; size = 4
_n1$17$ = 8						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_key$ = 16						; size = 4
_gost_encrypt_with_key PROC				; COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 77   : 	gst_dword i;
; 78   : 	gst_udword n1, n2;
; 79   : 	gst_udword X0, X1, X2, X3, X4, X5, X6, X7;
; 80   : 
; 81   : 	n1 = (gst_udword)in[3] << 24 | (gst_udword)in[2] << 16 | (gst_udword)in[1] << 8 | (gst_udword)in[0];

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	0f b6 79 03	 movzx	 edi, BYTE PTR [ecx+3]
  00010	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]

; 82   : 	n2 = (gst_udword)in[7] << 24 | (gst_udword)in[6] << 16 | (gst_udword)in[5] << 8 | (gst_udword)in[4];

  00014	0f b6 51 07	 movzx	 edx, BYTE PTR [ecx+7]
  00018	c1 e7 08	 shl	 edi, 8
  0001b	0b f8		 or	 edi, eax
  0001d	c1 e2 08	 shl	 edx, 8
  00020	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00024	c1 e7 08	 shl	 edi, 8
  00027	0b f8		 or	 edi, eax
  00029	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0002c	c1 e7 08	 shl	 edi, 8
  0002f	0b f8		 or	 edi, eax
  00031	0f b6 41 06	 movzx	 eax, BYTE PTR [ecx+6]
  00035	0b d0		 or	 edx, eax
  00037	0f b6 41 05	 movzx	 eax, BYTE PTR [ecx+5]
  0003b	c1 e2 08	 shl	 edx, 8
  0003e	0b d0		 or	 edx, eax
  00040	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]

; 83   : 
; 84   : 	/* Set the 8 round keys */
; 85   : 	X0 = 0;
; 86   : 	X1 = 0;
; 87   : 	X2 = 0;
; 88   : 	X3 = 0;
; 89   : 	X4 = 0;
; 90   : 	X5 = 0;
; 91   : 	X6 = 0;
; 92   : 	X7 = 0;
; 93   : 	
; 94   : 	for (i = 0; i < GOSTHASH_GOST_KEYSIZE / 8; i++)
; 95   : 	{
; 96   : 		X0 |= (gst_udword)key[i + 0] << (i * 8);

  00044	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  00047	c1 e2 08	 shl	 edx, 8
  0004a	0b d0		 or	 edx, eax
  0004c	0f b6 71 03	 movzx	 esi, BYTE PTR [ecx+3]
  00050	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]

; 97   : 		X1 |= (gst_udword)key[i + 4] << (i * 8);

  00054	0f b6 59 07	 movzx	 ebx, BYTE PTR [ecx+7]
  00058	c1 e3 08	 shl	 ebx, 8
  0005b	c1 e6 08	 shl	 esi, 8
  0005e	0b f0		 or	 esi, eax
  00060	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00064	c1 e6 08	 shl	 esi, 8
  00067	0b f0		 or	 esi, eax
  00069	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0006c	c1 e6 08	 shl	 esi, 8
  0006f	0b f0		 or	 esi, eax
  00071	0f b6 41 06	 movzx	 eax, BYTE PTR [ecx+6]
  00075	0b d8		 or	 ebx, eax
  00077	89 75 e8	 mov	 DWORD PTR _X0$1$[ebp], esi
  0007a	0f b6 41 05	 movzx	 eax, BYTE PTR [ecx+5]
  0007e	c1 e3 08	 shl	 ebx, 8
  00081	0b d8		 or	 ebx, eax
  00083	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00087	c1 e3 08	 shl	 ebx, 8
  0008a	0b d8		 or	 ebx, eax

; 98   : 		X2 |= (gst_udword)key[i + 8] << (i * 8);

  0008c	0f b6 41 0a	 movzx	 eax, BYTE PTR [ecx+10]
  00090	89 5d ec	 mov	 DWORD PTR _X1$1$[ebp], ebx
  00093	0f b6 59 0b	 movzx	 ebx, BYTE PTR [ecx+11]
  00097	c1 e3 08	 shl	 ebx, 8
  0009a	0b d8		 or	 ebx, eax
  0009c	0f b6 41 09	 movzx	 eax, BYTE PTR [ecx+9]
  000a0	c1 e3 08	 shl	 ebx, 8
  000a3	0b d8		 or	 ebx, eax
  000a5	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  000a9	c1 e3 08	 shl	 ebx, 8
  000ac	0b d8		 or	 ebx, eax

; 99   : 		X3 |= (gst_udword)key[i + 12] << (i * 8);

  000ae	0f b6 41 0e	 movzx	 eax, BYTE PTR [ecx+14]
  000b2	89 5d f0	 mov	 DWORD PTR _X2$1$[ebp], ebx
  000b5	0f b6 59 0f	 movzx	 ebx, BYTE PTR [ecx+15]
  000b9	c1 e3 08	 shl	 ebx, 8
  000bc	0b d8		 or	 ebx, eax
  000be	0f b6 41 0d	 movzx	 eax, BYTE PTR [ecx+13]
  000c2	c1 e3 08	 shl	 ebx, 8
  000c5	0b d8		 or	 ebx, eax
  000c7	0f b6 41 0c	 movzx	 eax, BYTE PTR [ecx+12]
  000cb	c1 e3 08	 shl	 ebx, 8
  000ce	0b d8		 or	 ebx, eax

; 100  : 		X4 |= (gst_udword)key[i + 16] << (i * 8);

  000d0	0f b6 41 12	 movzx	 eax, BYTE PTR [ecx+18]
  000d4	89 5d f4	 mov	 DWORD PTR _X3$1$[ebp], ebx
  000d7	0f b6 59 13	 movzx	 ebx, BYTE PTR [ecx+19]
  000db	c1 e3 08	 shl	 ebx, 8
  000de	0b d8		 or	 ebx, eax
  000e0	0f b6 41 11	 movzx	 eax, BYTE PTR [ecx+17]
  000e4	c1 e3 08	 shl	 ebx, 8
  000e7	0b d8		 or	 ebx, eax
  000e9	0f b6 41 10	 movzx	 eax, BYTE PTR [ecx+16]
  000ed	c1 e3 08	 shl	 ebx, 8
  000f0	0b d8		 or	 ebx, eax
  000f2	89 5d f8	 mov	 DWORD PTR _X4$1$[ebp], ebx

; 101  : 		X5 |= (gst_udword)key[i + 20] << (i * 8);

  000f5	0f b6 59 17	 movzx	 ebx, BYTE PTR [ecx+23]
  000f9	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  000fd	c1 e3 08	 shl	 ebx, 8
  00100	0b d8		 or	 ebx, eax
  00102	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00106	c1 e3 08	 shl	 ebx, 8
  00109	0b d8		 or	 ebx, eax
  0010b	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0010f	c1 e3 08	 shl	 ebx, 8
  00112	0b d8		 or	 ebx, eax

; 102  : 		X6 |= (gst_udword)key[i + 24] << (i * 8);

  00114	0f b6 41 1a	 movzx	 eax, BYTE PTR [ecx+26]
  00118	89 5d fc	 mov	 DWORD PTR _X5$1$[ebp], ebx
  0011b	0f b6 59 1b	 movzx	 ebx, BYTE PTR [ecx+27]
  0011f	c1 e3 08	 shl	 ebx, 8
  00122	0b d8		 or	 ebx, eax
  00124	0f b6 41 19	 movzx	 eax, BYTE PTR [ecx+25]
  00128	c1 e3 08	 shl	 ebx, 8
  0012b	0b d8		 or	 ebx, eax
  0012d	0f b6 41 18	 movzx	 eax, BYTE PTR [ecx+24]
  00131	c1 e3 08	 shl	 ebx, 8
  00134	0b d8		 or	 ebx, eax

; 103  : 		X7 |= (gst_udword)key[i + 28] << (i * 8);

  00136	0f b6 41 1e	 movzx	 eax, BYTE PTR [ecx+30]
  0013a	89 5d 08	 mov	 DWORD PTR _X6$1$[ebp], ebx
  0013d	0f b6 59 1f	 movzx	 ebx, BYTE PTR [ecx+31]
  00141	c1 e3 08	 shl	 ebx, 8
  00144	0b d8		 or	 ebx, eax
  00146	0f b6 41 1d	 movzx	 eax, BYTE PTR [ecx+29]
  0014a	c1 e3 08	 shl	 ebx, 8
  0014d	0b d8		 or	 ebx, eax
  0014f	0f b6 41 1c	 movzx	 eax, BYTE PTR [ecx+28]

; 104  : 	}
; 105  : 
; 106  : 	/* Encryption rounds 1-24 */
; 107  : 	n2 = r(n1, n2, X0);

  00153	56		 push	 esi
  00154	52		 push	 edx
  00155	c1 e3 08	 shl	 ebx, 8
  00158	57		 push	 edi
  00159	0b d8		 or	 ebx, eax
  0015b	e8 00 00 00 00	 call	 _r

; 108  : 	n1 = r(n2, n1, X1);

  00160	ff 75 ec	 push	 DWORD PTR _X1$1$[ebp]
  00163	8b f0		 mov	 esi, eax
  00165	57		 push	 edi
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _r

; 109  : 	n2 = r(n1, n2, X2);

  0016c	ff 75 f0	 push	 DWORD PTR _X2$1$[ebp]
  0016f	8b f8		 mov	 edi, eax
  00171	56		 push	 esi
  00172	57		 push	 edi
  00173	e8 00 00 00 00	 call	 _r

; 110  : 	n1 = r(n2, n1, X3);

  00178	ff 75 f4	 push	 DWORD PTR _X3$1$[ebp]
  0017b	8b f0		 mov	 esi, eax
  0017d	57		 push	 edi
  0017e	56		 push	 esi
  0017f	e8 00 00 00 00	 call	 _r

; 111  : 	n2 = r(n1, n2, X4);

  00184	ff 75 f8	 push	 DWORD PTR _X4$1$[ebp]
  00187	8b f8		 mov	 edi, eax
  00189	56		 push	 esi
  0018a	57		 push	 edi
  0018b	e8 00 00 00 00	 call	 _r

; 112  : 	n1 = r(n2, n1, X5);

  00190	ff 75 fc	 push	 DWORD PTR _X5$1$[ebp]
  00193	8b f0		 mov	 esi, eax
  00195	57		 push	 edi
  00196	56		 push	 esi
  00197	e8 00 00 00 00	 call	 _r
  0019c	83 c4 48	 add	 esp, 72			; 00000048H
  0019f	8b f8		 mov	 edi, eax

; 113  : 	n2 = r(n1, n2, X6);

  001a1	ff 75 08	 push	 DWORD PTR _X6$1$[ebp]
  001a4	56		 push	 esi
  001a5	57		 push	 edi
  001a6	e8 00 00 00 00	 call	 _r

; 114  : 	n1 = r(n2, n1, X7);

  001ab	53		 push	 ebx
  001ac	8b f0		 mov	 esi, eax
  001ae	57		 push	 edi
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 _r

; 115  : 	
; 116  : 	n2 = r(n1, n2, X0);

  001b5	ff 75 e8	 push	 DWORD PTR _X0$1$[ebp]
  001b8	8b f8		 mov	 edi, eax
  001ba	56		 push	 esi
  001bb	57		 push	 edi
  001bc	e8 00 00 00 00	 call	 _r

; 117  : 	n1 = r(n2, n1, X1);

  001c1	ff 75 ec	 push	 DWORD PTR _X1$1$[ebp]
  001c4	8b f0		 mov	 esi, eax
  001c6	57		 push	 edi
  001c7	56		 push	 esi
  001c8	e8 00 00 00 00	 call	 _r

; 118  : 	n2 = r(n1, n2, X2);

  001cd	ff 75 f0	 push	 DWORD PTR _X2$1$[ebp]
  001d0	8b f8		 mov	 edi, eax
  001d2	56		 push	 esi
  001d3	57		 push	 edi
  001d4	e8 00 00 00 00	 call	 _r

; 119  : 	n1 = r(n2, n1, X3);

  001d9	ff 75 f4	 push	 DWORD PTR _X3$1$[ebp]
  001dc	8b f0		 mov	 esi, eax
  001de	57		 push	 edi
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 _r
  001e5	83 c4 48	 add	 esp, 72			; 00000048H
  001e8	8b f8		 mov	 edi, eax

; 120  : 	n2 = r(n1, n2, X4);

  001ea	ff 75 f8	 push	 DWORD PTR _X4$1$[ebp]
  001ed	56		 push	 esi
  001ee	57		 push	 edi
  001ef	e8 00 00 00 00	 call	 _r

; 121  : 	n1 = r(n2, n1, X5);

  001f4	ff 75 fc	 push	 DWORD PTR _X5$1$[ebp]
  001f7	8b f0		 mov	 esi, eax
  001f9	57		 push	 edi
  001fa	56		 push	 esi
  001fb	e8 00 00 00 00	 call	 _r

; 122  : 	n2 = r(n1, n2, X6);

  00200	ff 75 08	 push	 DWORD PTR _X6$1$[ebp]
  00203	8b f8		 mov	 edi, eax
  00205	56		 push	 esi
  00206	57		 push	 edi
  00207	e8 00 00 00 00	 call	 _r

; 123  : 	n1 = r(n2, n1, X7);

  0020c	53		 push	 ebx
  0020d	8b f0		 mov	 esi, eax
  0020f	57		 push	 edi
  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 _r

; 124  : 
; 125  : 	n2 = r(n1, n2, X0);

  00216	ff 75 e8	 push	 DWORD PTR _X0$1$[ebp]
  00219	8b f8		 mov	 edi, eax
  0021b	56		 push	 esi
  0021c	57		 push	 edi
  0021d	e8 00 00 00 00	 call	 _r

; 126  : 	n1 = r(n2, n1, X1);

  00222	ff 75 ec	 push	 DWORD PTR _X1$1$[ebp]
  00225	8b f0		 mov	 esi, eax
  00227	57		 push	 edi
  00228	56		 push	 esi
  00229	e8 00 00 00 00	 call	 _r
  0022e	83 c4 48	 add	 esp, 72			; 00000048H
  00231	8b f8		 mov	 edi, eax

; 127  : 	n2 = r(n1, n2, X2);

  00233	ff 75 f0	 push	 DWORD PTR _X2$1$[ebp]
  00236	56		 push	 esi
  00237	57		 push	 edi
  00238	e8 00 00 00 00	 call	 _r

; 128  : 	n1 = r(n2, n1, X3);

  0023d	ff 75 f4	 push	 DWORD PTR _X3$1$[ebp]
  00240	8b f0		 mov	 esi, eax
  00242	57		 push	 edi
  00243	56		 push	 esi
  00244	e8 00 00 00 00	 call	 _r

; 129  : 	n2 = r(n1, n2, X4);

  00249	ff 75 f8	 push	 DWORD PTR _X4$1$[ebp]
  0024c	8b f8		 mov	 edi, eax
  0024e	56		 push	 esi
  0024f	57		 push	 edi
  00250	e8 00 00 00 00	 call	 _r

; 130  : 	n1 = r(n2, n1, X5);

  00255	ff 75 fc	 push	 DWORD PTR _X5$1$[ebp]
  00258	8b f0		 mov	 esi, eax
  0025a	57		 push	 edi
  0025b	56		 push	 esi
  0025c	e8 00 00 00 00	 call	 _r

; 131  : 	n2 = r(n1, n2, X6);

  00261	ff 75 08	 push	 DWORD PTR _X6$1$[ebp]
  00264	8b f8		 mov	 edi, eax
  00266	56		 push	 esi
  00267	57		 push	 edi
  00268	e8 00 00 00 00	 call	 _r

; 132  : 	n1 = r(n2, n1, X7);

  0026d	53		 push	 ebx
  0026e	8b f0		 mov	 esi, eax
  00270	57		 push	 edi
  00271	56		 push	 esi
  00272	e8 00 00 00 00	 call	 _r
  00277	83 c4 48	 add	 esp, 72			; 00000048H
  0027a	8b f8		 mov	 edi, eax

; 133  : 
; 134  : 	/* Encryption rounds 25-32 */
; 135  : 	n2 = r(n1, n2, X7);

  0027c	53		 push	 ebx
  0027d	56		 push	 esi
  0027e	57		 push	 edi
  0027f	e8 00 00 00 00	 call	 _r

; 136  : 	n1 = r(n2, n1, X6);

  00284	ff 75 08	 push	 DWORD PTR _X6$1$[ebp]
  00287	8b f0		 mov	 esi, eax
  00289	57		 push	 edi
  0028a	56		 push	 esi
  0028b	e8 00 00 00 00	 call	 _r

; 137  : 	n2 = r(n1, n2, X5);

  00290	ff 75 fc	 push	 DWORD PTR _X5$1$[ebp]
  00293	8b f8		 mov	 edi, eax
  00295	56		 push	 esi
  00296	57		 push	 edi
  00297	e8 00 00 00 00	 call	 _r

; 138  : 	n1 = r(n2, n1, X4);

  0029c	ff 75 f8	 push	 DWORD PTR _X4$1$[ebp]
  0029f	8b f0		 mov	 esi, eax
  002a1	57		 push	 edi
  002a2	56		 push	 esi
  002a3	e8 00 00 00 00	 call	 _r

; 139  : 	n2 = r(n1, n2, X3);

  002a8	ff 75 f4	 push	 DWORD PTR _X3$1$[ebp]
  002ab	8b f8		 mov	 edi, eax
  002ad	56		 push	 esi
  002ae	57		 push	 edi
  002af	e8 00 00 00 00	 call	 _r

; 140  : 	n1 = r(n2, n1, X2);

  002b4	ff 75 f0	 push	 DWORD PTR _X2$1$[ebp]
  002b7	8b f0		 mov	 esi, eax
  002b9	57		 push	 edi
  002ba	56		 push	 esi
  002bb	e8 00 00 00 00	 call	 _r
  002c0	83 c4 48	 add	 esp, 72			; 00000048H
  002c3	8b f8		 mov	 edi, eax

; 141  : 	n2 = r(n1, n2, X1);

  002c5	ff 75 ec	 push	 DWORD PTR _X1$1$[ebp]
  002c8	56		 push	 esi
  002c9	57		 push	 edi
  002ca	e8 00 00 00 00	 call	 _r

; 142  : 	n1 = r(n2, n1, X0);

  002cf	ff 75 e8	 push	 DWORD PTR _X0$1$[ebp]
  002d2	8b d8		 mov	 ebx, eax
  002d4	57		 push	 edi
  002d5	53		 push	 ebx
  002d6	e8 00 00 00 00	 call	 _r

; 143  : 
; 144  : 	out[0] = (byte)(n2 & 0xFF); out[1] = (byte)((n2 >> 8) & 0xFF); out[2] = (byte)((n2 >> 16) & 0xFF); out[3] = (byte)((n2 >> 24) & 0xFF);

  002db	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  002de	8b cb		 mov	 ecx, ebx
  002e0	c1 e9 08	 shr	 ecx, 8
  002e3	83 c4 18	 add	 esp, 24			; 00000018H
  002e6	89 45 08	 mov	 DWORD PTR _n1$17$[ebp], eax
  002e9	88 4a 01	 mov	 BYTE PTR [edx+1], cl
  002ec	8b cb		 mov	 ecx, ebx
  002ee	c1 e9 10	 shr	 ecx, 16			; 00000010H
  002f1	88 4a 02	 mov	 BYTE PTR [edx+2], cl

; 145  : 	out[4] = (byte)(n1 & 0xFF); out[5] = (byte)((n1 >> 8) & 0xFF); out[6] = (byte)((n1 >> 16) & 0xFF); out[7] = (byte)((n1 >> 24) & 0xFF);

  002f4	8b c8		 mov	 ecx, eax
  002f6	c1 e8 08	 shr	 eax, 8
  002f9	88 42 05	 mov	 BYTE PTR [edx+5], al
  002fc	8b c1		 mov	 eax, ecx
  002fe	88 1a		 mov	 BYTE PTR [edx], bl
  00300	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00303	5f		 pop	 edi
  00304	c1 e8 10	 shr	 eax, 16			; 00000010H
  00307	88 4a 04	 mov	 BYTE PTR [edx+4], cl
  0030a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0030d	5e		 pop	 esi
  0030e	88 5a 03	 mov	 BYTE PTR [edx+3], bl
  00311	88 42 06	 mov	 BYTE PTR [edx+6], al
  00314	88 4a 07	 mov	 BYTE PTR [edx+7], cl
  00317	5b		 pop	 ebx

; 146  : }

  00318	8b e5		 mov	 esp, ebp
  0031a	5d		 pop	 ebp
  0031b	c3		 ret	 0
_gost_encrypt_with_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _r
_TEXT	SEGMENT
_n1$ = 8						; size = 4
_n2$ = 12						; size = 4
_X$ = 16						; size = 4
_r	PROC						; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 54   : 	gosthash_s_box *sbox = &GostR3411_94_CryptoProParamSet;
; 55   : 	n1 += X;

  00004	8b 75 08	 mov	 esi, DWORD PTR _n1$[ebp]
  00007	03 75 10	 add	 esi, DWORD PTR _X$[ebp]

; 56   : 	n1 =  (gst_udword)sbox->k8[(n1>>28)&0xF]<<28 | (gst_udword)sbox->k7[(n1>>24)&0xF]<<24
; 57   : 				| (gst_udword)sbox->k6[(n1>>20)&0xF]<<20 | (gst_udword)sbox->k5[(n1>>16)&0xF]<<16
; 58   : 				| (gst_udword)sbox->k4[(n1>>12)&0xF]<<12 | (gst_udword)sbox->k3[(n1>>8)&0xF]<<8
; 59   : 				| (gst_udword)sbox->k2[(n1>>4)&0xF]<<4 | (gst_udword)sbox->k1[n1&0xF];
; 60   : 	n1 = gosthash_rotl32(n1, 11);
; 61   : 	n2 ^= n1;
; 62   : 	return n2;

  0000a	8b c6		 mov	 eax, esi
  0000c	8b ce		 mov	 ecx, esi
  0000e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00011	83 e0 0f	 and	 eax, 15			; 0000000fH
  00014	c1 e9 04	 shr	 ecx, 4
  00017	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0001a	0f b6 90 10 00
	00 00		 movzx	 edx, BYTE PTR _GostR3411_94_CryptoProParamSet[eax+16]
  00021	8b c6		 mov	 eax, esi
  00023	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  00026	0f b6 89 60 00
	00 00		 movzx	 ecx, BYTE PTR _GostR3411_94_CryptoProParamSet[ecx+96]
  0002d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _GostR3411_94_CryptoProParamSet[eax]
  00034	c1 e0 04	 shl	 eax, 4
  00037	0b d0		 or	 edx, eax
  00039	8b c6		 mov	 eax, esi
  0003b	c1 e8 14	 shr	 eax, 20			; 00000014H
  0003e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00041	c1 e2 04	 shl	 edx, 4
  00044	0f b6 80 20 00
	00 00		 movzx	 eax, BYTE PTR _GostR3411_94_CryptoProParamSet[eax+32]
  0004b	0b d0		 or	 edx, eax
  0004d	8b c6		 mov	 eax, esi
  0004f	c1 e8 10	 shr	 eax, 16			; 00000010H
  00052	83 e0 0f	 and	 eax, 15			; 0000000fH
  00055	c1 e2 04	 shl	 edx, 4
  00058	0f b6 80 30 00
	00 00		 movzx	 eax, BYTE PTR _GostR3411_94_CryptoProParamSet[eax+48]
  0005f	0b d0		 or	 edx, eax
  00061	8b c6		 mov	 eax, esi
  00063	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00066	83 e0 0f	 and	 eax, 15			; 0000000fH
  00069	c1 e2 04	 shl	 edx, 4
  0006c	0f b6 80 40 00
	00 00		 movzx	 eax, BYTE PTR _GostR3411_94_CryptoProParamSet[eax+64]
  00073	0b d0		 or	 edx, eax
  00075	8b c6		 mov	 eax, esi
  00077	c1 e8 08	 shr	 eax, 8
  0007a	83 e6 0f	 and	 esi, 15			; 0000000fH
  0007d	83 e0 0f	 and	 eax, 15			; 0000000fH
  00080	c1 e2 04	 shl	 edx, 4
  00083	0f b6 80 50 00
	00 00		 movzx	 eax, BYTE PTR _GostR3411_94_CryptoProParamSet[eax+80]
  0008a	0b c2		 or	 eax, edx
  0008c	c1 e0 04	 shl	 eax, 4
  0008f	0b c1		 or	 eax, ecx
  00091	0f b6 8e 70 00
	00 00		 movzx	 ecx, BYTE PTR _GostR3411_94_CryptoProParamSet[esi+112]
  00098	c1 e0 04	 shl	 eax, 4
  0009b	0b c1		 or	 eax, ecx
  0009d	c1 c0 0b	 rol	 eax, 11			; 0000000bH
  000a0	33 45 0c	 xor	 eax, DWORD PTR _n2$[ebp]
  000a3	5e		 pop	 esi

; 63   : }

  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_r	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _GOSTHASH_finalize
_TEXT	SEGMENT
_out$GSCopy$1$ = -104					; size = 4
_H$ = -100						; size = 32
_S$ = -68						; size = 32
_buf$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_out$ = 12						; size = 4
_GOSTHASH_finalize PROC					; COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 443  : 	byte buf[32];
; 444  : 	byte H[32];
; 445  : 	byte S[32];
; 446  : 	gst_dword final_len;
; 447  : 	gst_dword bptr;
; 448  : 
; 449  : 	final_len = ctx->len;

  00012	8b 75 08	 mov	 esi, DWORD PTR _ctx$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _out$[ebp]

; 450  : 	
; 451  : 	copy_blocks(H, ctx->H, 32);

  00019	6a 20		 push	 32			; 00000020H
  0001b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00020	50		 push	 eax
  00021	8d 45 9c	 lea	 eax, DWORD PTR _H$[ebp]
  00024	89 7d 98	 mov	 DWORD PTR _out$GSCopy$1$[ebp], edi
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _memcpy

; 452  : 	copy_blocks(S, ctx->S, 32);

  0002d	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00030	6a 20		 push	 32			; 00000020H
  00032	50		 push	 eax
  00033	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memcpy

; 453  : 
; 454  : 	if (ctx->left) //Handle any remaining bytes

  0003c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
  00042	85 c9		 test	 ecx, ecx
  00044	0f 84 b3 00 00
	00		 je	 $LN4@GOSTHASH_f

; 455  : 	{
; 456  : 		set_blocks(buf, 0, 32);

  0004a	0f 57 c0	 xorps	 xmm0, xmm0
  0004d	0f 11 45 dc	 movups	 XMMWORD PTR _buf$[ebp], xmm0
  00051	0f 11 45 ec	 movups	 XMMWORD PTR _buf$[ebp+16], xmm0

; 457  : 		copy_blocks(buf, ctx->remainder, (gst_dword)ctx->left);

  00055	7e 11		 jle	 SHORT $LN24@GOSTHASH_f
  00057	51		 push	 ecx
  00058	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
  0005b	50		 push	 eax
  0005c	8d 45 dc	 lea	 eax, DWORD PTR _buf$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _memcpy
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@GOSTHASH_f:

; 458  : 		step (H, buf, ctx);

  00068	56		 push	 esi
  00069	8d 45 dc	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8d 45 9c	 lea	 eax, DWORD PTR _H$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _step
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 459  : 		add_blocks (S, buf, 32);

  00079	33 ff		 xor	 edi, edi
  0007b	33 d2		 xor	 edx, edx
  0007d	0f 1f 00	 npad	 3
$LL29@GOSTHASH_f:
  00080	0f b6 44 15 bc	 movzx	 eax, BYTE PTR _S$[ebp+edx]
  00085	0f b6 4c 15 dc	 movzx	 ecx, BYTE PTR _buf$[ebp+edx]
  0008a	66 03 c8	 add	 cx, ax
  0008d	66 03 cf	 add	 cx, di
  00090	0f b7 c1	 movzx	 eax, cx
  00093	0f b6 4c 15 dd	 movzx	 ecx, BYTE PTR _buf$[ebp+edx+1]
  00098	88 44 15 bc	 mov	 BYTE PTR _S$[ebp+edx], al
  0009c	66 c1 f8 08	 sar	 ax, 8
  000a0	66 03 c8	 add	 cx, ax
  000a3	0f b6 44 15 bd	 movzx	 eax, BYTE PTR _S$[ebp+edx+1]
  000a8	66 03 c8	 add	 cx, ax
  000ab	0f b7 c1	 movzx	 eax, cx
  000ae	0f b6 4c 15 de	 movzx	 ecx, BYTE PTR _buf$[ebp+edx+2]
  000b3	88 44 15 bd	 mov	 BYTE PTR _S$[ebp+edx+1], al
  000b7	66 c1 f8 08	 sar	 ax, 8
  000bb	66 03 c8	 add	 cx, ax
  000be	0f b6 44 15 be	 movzx	 eax, BYTE PTR _S$[ebp+edx+2]
  000c3	66 03 c8	 add	 cx, ax
  000c6	0f b7 c1	 movzx	 eax, cx
  000c9	0f b6 4c 15 df	 movzx	 ecx, BYTE PTR _buf$[ebp+edx+3]
  000ce	88 44 15 be	 mov	 BYTE PTR _S$[ebp+edx+2], al
  000d2	66 c1 f8 08	 sar	 ax, 8
  000d6	66 03 c8	 add	 cx, ax
  000d9	0f b6 44 15 bf	 movzx	 eax, BYTE PTR _S$[ebp+edx+3]
  000de	66 03 c8	 add	 cx, ax
  000e1	0f b7 c1	 movzx	 eax, cx
  000e4	88 44 15 bf	 mov	 BYTE PTR _S$[ebp+edx+3], al
  000e8	83 c2 04	 add	 edx, 4
  000eb	66 c1 f8 08	 sar	 ax, 8
  000ef	0f b7 f8	 movzx	 edi, ax
  000f2	83 fa 20	 cmp	 edx, 32			; 00000020H
  000f5	7c 89		 jl	 SHORT $LL29@GOSTHASH_f

; 460  : 		final_len += ctx->left;

  000f7	03 5e 04	 add	 ebx, DWORD PTR [esi+4]
  000fa	8b 7d 98	 mov	 edi, DWORD PTR _out$GSCopy$1$[ebp]
$LN4@GOSTHASH_f:

; 465  : 	final_len <<= 3;

  000fd	0f 57 c0	 xorps	 xmm0, xmm0
  00100	c1 e3 03	 shl	 ebx, 3
  00103	0f 11 45 dc	 movups	 XMMWORD PTR _buf$[ebp], xmm0
  00107	0f 11 45 ec	 movups	 XMMWORD PTR _buf$[ebp+16], xmm0

; 466  : 	while (final_len > 0)

  0010b	85 db		 test	 ebx, ebx
  0010d	7e 0f		 jle	 SHORT $LN3@GOSTHASH_f

; 461  : 	}
; 462  : 
; 463  : 	set_blocks(buf, 0, 32);
; 464  : 	bptr = 0;

  0010f	8d 45 dc	 lea	 eax, DWORD PTR _buf$[ebp]
$LL2@GOSTHASH_f:

; 467  : 	{
; 468  : 		buf[bptr++] = (byte)(final_len & 0xFF);

  00112	88 18		 mov	 BYTE PTR [eax], bl
  00114	8d 40 01	 lea	 eax, DWORD PTR [eax+1]

; 469  : 		final_len >>= 8;

  00117	c1 fb 08	 sar	 ebx, 8
  0011a	85 db		 test	 ebx, ebx
  0011c	7f f4		 jg	 SHORT $LL2@GOSTHASH_f
$LN3@GOSTHASH_f:

; 470  : 	}
; 471  : 
; 472  : 	step (H, buf, ctx);

  0011e	56		 push	 esi
  0011f	8d 45 dc	 lea	 eax, DWORD PTR _buf$[ebp]
  00122	50		 push	 eax
  00123	8d 45 9c	 lea	 eax, DWORD PTR _H$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _step

; 473  : 	step (H, S, ctx);

  0012c	56		 push	 esi
  0012d	8d 45 bc	 lea	 eax, DWORD PTR _S$[ebp]
  00130	50		 push	 eax
  00131	8d 45 9c	 lea	 eax, DWORD PTR _H$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _step

; 474  : 	copy_blocks (out, H, 32);

  0013a	6a 20		 push	 32			; 00000020H
  0013c	8d 45 9c	 lea	 eax, DWORD PTR _H$[ebp]
  0013f	50		 push	 eax
  00140	57		 push	 edi
  00141	e8 00 00 00 00	 call	 _memcpy

; 475  : }

  00146	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00149	83 c4 24	 add	 esp, 36			; 00000024H
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
_GOSTHASH_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _GOSTHASH_add
_TEXT	SEGMENT
_T$1$ = -16						; size = 4
_carry$1$ = -12						; size = 4
tv1017 = -8						; size = 4
_curptr$1$ = -4						; size = 4
_block$ = 8						; size = 4
_len$ = 12						; size = 4
_ctx$ = 16						; size = 4
_GOSTHASH_add PROC					; COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 388  : 	gst_udword add_bytes;
; 389  : 
; 390  : 	byte *curptr = block;
; 391  : 	byte *barrier = block + (len - 32); //In order that curptr += 32 won't overshoot len.

  00006	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]
  00009	53		 push	 ebx

; 392  : 
; 393  : 	if (ctx->left) //There are unsigned chars left from the last GOSTHASH_add

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR _ctx$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _block$[ebp]
  00012	8b f7		 mov	 esi, edi
  00014	89 75 fc	 mov	 DWORD PTR _curptr$1$[ebp], esi
  00017	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
  0001a	89 45 f8	 mov	 DWORD PTR tv1017[ebp], eax
  0001d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00020	85 c0		 test	 eax, eax
  00022	0f 84 5b 01 00
	00		 je	 $LN4@GOSTHASH_a

; 394  : 	{
; 395  : 		add_bytes = (32 - ctx->left) > len ? len : (32 - ctx->left);

  00028	ba 20 00 00 00	 mov	 edx, 32			; 00000020H

; 396  : 		copy_blocks(ctx->remainder + (byte)ctx->left, block, (gst_dword)add_bytes);

  0002d	0f b6 f0	 movzx	 esi, al
  00030	2b d0		 sub	 edx, eax
  00032	3b 55 0c	 cmp	 edx, DWORD PTR _len$[ebp]
  00035	0f 47 55 0c	 cmova	 edx, DWORD PTR _len$[ebp]
  00039	03 f3		 add	 esi, ebx
  0003b	33 c9		 xor	 ecx, ecx
  0003d	85 d2		 test	 edx, edx
  0003f	7e 0c		 jle	 SHORT $LN14@GOSTHASH_a
$LL42@GOSTHASH_a:
  00041	8a 04 39	 mov	 al, BYTE PTR [ecx+edi]
  00044	88 44 0e 48	 mov	 BYTE PTR [esi+ecx+72], al
  00048	41		 inc	 ecx
  00049	3b ca		 cmp	 ecx, edx
  0004b	7c f4		 jl	 SHORT $LL42@GOSTHASH_a
$LN14@GOSTHASH_a:

; 397  : 		if ((ctx->left + add_bytes) < 32) //This can be finished in the finalize stage if needed

  0004d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00050	03 c2		 add	 eax, edx
  00052	83 f8 20	 cmp	 eax, 32			; 00000020H
  00055	0f 82 21 01 00
	00		 jb	 $LN29@GOSTHASH_a

; 398  : 		{
; 399  : 			return;
; 400  : 		}
; 401  : 		
; 402  : 		curptr += add_bytes;

  0005b	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]

; 403  : 		step (ctx->H, ctx->remainder, ctx);

  0005e	53		 push	 ebx
  0005f	8d 7b 48	 lea	 edi, DWORD PTR [ebx+72]
  00062	89 75 fc	 mov	 DWORD PTR _curptr$1$[ebp], esi
  00065	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00068	57		 push	 edi
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _step

; 404  : 		add_blocks(ctx->S, ctx->remainder, 32);

  0006f	6a 20		 push	 32			; 00000020H
  00071	8d 43 28	 lea	 eax, DWORD PTR [ebx+40]
  00074	57		 push	 edi
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _add_blocks
  0007b	83 c4 18	 add	 esp, 24			; 00000018H

; 405  : 		ctx->len += 32;
; 406  : 		ctx->left = 0;

  0007e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00085	83 03 20	 add	 DWORD PTR [ebx], 32	; 00000020H
$LN34@GOSTHASH_a:

; 412  : 		return;
; 413  : 	}
; 414  : 
; 415  : 	while (curptr <= barrier) //Add the input block to the hash

  00088	8b 45 f8	 mov	 eax, DWORD PTR tv1017[ebp]
  0008b	83 c0 e0	 add	 eax, -32		; ffffffe0H
  0008e	3b f0		 cmp	 esi, eax
  00090	0f 87 bd 00 00
	00		 ja	 $LN3@GOSTHASH_a
  00096	8d 43 28	 lea	 eax, DWORD PTR [ebx+40]
  00099	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0009c	89 45 f0	 mov	 DWORD PTR _T$1$[ebp], eax
  0009f	90		 npad	 1
$LL2@GOSTHASH_a:

; 416  : 	{
; 417  : 		step(ctx->H, curptr, ctx);

  000a0	53		 push	 ebx
  000a1	56		 push	 esi
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _step
  000a8	8b 55 f0	 mov	 edx, DWORD PTR _T$1$[ebp]
  000ab	8d 7e 02	 lea	 edi, DWORD PTR [esi+2]

; 418  : 		
; 419  : 		add_blocks(ctx->S, curptr, 32); //Add 32 unsigned chars of the message to the encrypted message

  000ae	8b de		 mov	 ebx, esi
  000b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _carry$1$[ebp], 0
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ba	be 08 00 00 00	 mov	 esi, 8
  000bf	2b da		 sub	 ebx, edx
$LL25@GOSTHASH_a:
  000c1	0f b6 0c 13	 movzx	 ecx, BYTE PTR [ebx+edx]
  000c5	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  000c8	0f b6 42 fc	 movzx	 eax, BYTE PTR [edx-4]
  000cc	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  000cf	66 03 c8	 add	 cx, ax
  000d2	66 03 4d f4	 add	 cx, WORD PTR _carry$1$[ebp]
  000d6	0f b7 c1	 movzx	 eax, cx
  000d9	88 42 fc	 mov	 BYTE PTR [edx-4], al
  000dc	0f b6 4f fb	 movzx	 ecx, BYTE PTR [edi-5]
  000e0	66 c1 f8 08	 sar	 ax, 8
  000e4	66 03 c8	 add	 cx, ax
  000e7	0f b6 42 fd	 movzx	 eax, BYTE PTR [edx-3]
  000eb	66 03 c8	 add	 cx, ax
  000ee	0f b6 42 fe	 movzx	 eax, BYTE PTR [edx-2]
  000f2	0f b7 c9	 movzx	 ecx, cx
  000f5	88 4a fd	 mov	 BYTE PTR [edx-3], cl
  000f8	66 c1 f9 08	 sar	 cx, 8
  000fc	66 03 c8	 add	 cx, ax
  000ff	0f b6 47 fc	 movzx	 eax, BYTE PTR [edi-4]
  00103	66 03 c8	 add	 cx, ax
  00106	0f b7 c1	 movzx	 eax, cx
  00109	88 42 fe	 mov	 BYTE PTR [edx-2], al
  0010c	0f b6 4f fd	 movzx	 ecx, BYTE PTR [edi-3]
  00110	66 c1 f8 08	 sar	 ax, 8
  00114	66 03 c8	 add	 cx, ax
  00117	0f b6 42 ff	 movzx	 eax, BYTE PTR [edx-1]
  0011b	66 03 c8	 add	 cx, ax
  0011e	0f b7 c1	 movzx	 eax, cx
  00121	88 42 ff	 mov	 BYTE PTR [edx-1], al
  00124	66 c1 f8 08	 sar	 ax, 8
  00128	0f b7 c0	 movzx	 eax, ax
  0012b	89 45 f4	 mov	 DWORD PTR _carry$1$[ebp], eax
  0012e	83 ee 01	 sub	 esi, 1
  00131	75 8e		 jne	 SHORT $LL25@GOSTHASH_a

; 420  : 		
; 421  : 		ctx->len += 32; //We've processed 32 unsigned chars

  00133	8b 5d 10	 mov	 ebx, DWORD PTR _ctx$[ebp]

; 422  : 		curptr += 32; //Advance the block-pointer 32 unsigned chars

  00136	8b 75 fc	 mov	 esi, DWORD PTR _curptr$1$[ebp]
  00139	8b 45 f8	 mov	 eax, DWORD PTR tv1017[ebp]
  0013c	83 c6 20	 add	 esi, 32			; 00000020H
  0013f	83 c0 e0	 add	 eax, -32		; ffffffe0H
  00142	89 75 fc	 mov	 DWORD PTR _curptr$1$[ebp], esi
  00145	83 03 20	 add	 DWORD PTR [ebx], 32	; 00000020H
  00148	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0014b	3b f0		 cmp	 esi, eax
  0014d	0f 86 4d ff ff
	ff		 jbe	 $LL2@GOSTHASH_a
$LN3@GOSTHASH_a:

; 423  : 	}
; 424  : 
; 425  : 	if (curptr != block + len) //If we have unsigned chars remaining, add them for the next GOSTHASH_add of _finalize

  00153	3b 75 f8	 cmp	 esi, DWORD PTR tv1017[ebp]
  00156	74 24		 je	 SHORT $LN29@GOSTHASH_a

; 426  : 	{
; 427  : 		ctx->left = (gst_udword)(block + len - curptr);

  00158	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]

; 428  : 		copy_blocks(ctx->remainder, curptr, (gst_dword)ctx->left);

  0015b	33 c9		 xor	 ecx, ecx
  0015d	2b d6		 sub	 edx, esi
  0015f	03 55 0c	 add	 edx, DWORD PTR _len$[ebp]
  00162	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  00165	85 d2		 test	 edx, edx
  00167	7e 13		 jle	 SHORT $LN29@GOSTHASH_a
  00169	0f 1f 80 00 00
	00 00		 npad	 7
$LL30@GOSTHASH_a:
  00170	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]
  00173	88 44 0b 48	 mov	 BYTE PTR [ebx+ecx+72], al
  00177	41		 inc	 ecx
  00178	3b ca		 cmp	 ecx, edx
  0017a	7c f4		 jl	 SHORT $LL30@GOSTHASH_a
$LN29@GOSTHASH_a:
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx

; 429  : 	}
; 430  : }

  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
$LN4@GOSTHASH_a:

; 407  : 	}
; 408  : 	else if (ctx->left + len < 32)

  00183	83 fa 20	 cmp	 edx, 32			; 00000020H
  00186	0f 83 fc fe ff
	ff		 jae	 $LN34@GOSTHASH_a

; 409  : 	{
; 410  : 		copy_blocks(ctx->remainder + (byte)ctx->left, block, (gst_dword)len);

  0018c	0f b6 f0	 movzx	 esi, al
  0018f	33 c9		 xor	 ecx, ecx
  00191	03 f3		 add	 esi, ebx
  00193	85 d2		 test	 edx, edx
  00195	7e 0c		 jle	 SHORT $LN19@GOSTHASH_a
$LL44@GOSTHASH_a:
  00197	8a 04 39	 mov	 al, BYTE PTR [ecx+edi]
  0019a	88 44 0e 48	 mov	 BYTE PTR [esi+ecx+72], al
  0019e	41		 inc	 ecx
  0019f	3b ca		 cmp	 ecx, edx
  001a1	7c f4		 jl	 SHORT $LL44@GOSTHASH_a
$LN19@GOSTHASH_a:

; 411  : 		ctx->left += len;

  001a3	01 53 04	 add	 DWORD PTR [ebx+4], edx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx

; 429  : 	}
; 430  : }

  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
_GOSTHASH_add ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\gosthash.c
;	COMDAT _GOSTHASH_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_GOSTHASH_init PROC					; COMDAT

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 316  : 	set_blocks((byte *)ctx, 0, sizeof(gost_hash_ctx));

  00003	8b 45 08	 mov	 eax, DWORD PTR _ctx$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0000c	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00010	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  00014	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  00018	0f 11 40 40	 movups	 XMMWORD PTR [eax+64], xmm0
  0001c	0f 11 40 50	 movups	 XMMWORD PTR [eax+80], xmm0
  00020	66 0f d6 40 60	 movq	 QWORD PTR [eax+96], xmm0

; 317  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
_GOSTHASH_init ENDP
_TEXT	ENDS
END
