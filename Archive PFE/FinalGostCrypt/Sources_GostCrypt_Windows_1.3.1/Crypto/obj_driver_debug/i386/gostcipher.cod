; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\crypto\gostcipher.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_GostR3411_94_CryptoProParamSet DD 01H
	DD	03H
	DD	0aH
	DD	09H
	DD	05H
	DD	0bH
	DD	04H
	DD	0fH
	DD	08H
	DD	06H
	DD	07H
	DD	0eH
	DD	0dH
	DD	00H
	DD	02H
	DD	0cH
	DD	0dH
	DD	0eH
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	05H
	DD	0aH
	DD	03H
	DD	0cH
	DD	08H
	DD	0fH
	DD	06H
	DD	02H
	DD	09H
	DD	0bH
	DD	07H
	DD	06H
	DD	02H
	DD	04H
	DD	0dH
	DD	09H
	DD	0fH
	DD	00H
	DD	0aH
	DD	01H
	DD	05H
	DD	0bH
	DD	08H
	DD	0eH
	DD	0cH
	DD	03H
	DD	07H
	DD	06H
	DD	04H
	DD	0bH
	DD	09H
	DD	0cH
	DD	02H
	DD	0aH
	DD	01H
	DD	08H
	DD	00H
	DD	0eH
	DD	0fH
	DD	0dH
	DD	03H
	DD	05H
	DD	04H
	DD	0aH
	DD	07H
	DD	0cH
	DD	00H
	DD	0fH
	DD	02H
	DD	08H
	DD	0eH
	DD	01H
	DD	06H
	DD	05H
	DD	0dH
	DD	0bH
	DD	09H
	DD	03H
	DD	07H
	DD	0fH
	DD	0cH
	DD	0eH
	DD	09H
	DD	04H
	DD	01H
	DD	00H
	DD	03H
	DD	0bH
	DD	05H
	DD	02H
	DD	06H
	DD	0aH
	DD	08H
	DD	0dH
	DD	05H
	DD	0fH
	DD	04H
	DD	00H
	DD	02H
	DD	0dH
	DD	0bH
	DD	09H
	DD	01H
	DD	07H
	DD	06H
	DD	03H
	DD	0cH
	DD	0eH
	DD	0aH
	DD	08H
	DD	0aH
	DD	04H
	DD	05H
	DD	06H
	DD	08H
	DD	01H
	DD	03H
	DD	07H
	DD	0dH
	DD	0cH
	DD	0eH
	DD	00H
	DD	09H
	DD	02H
	DD	0bH
	DD	0fH
_DATA	ENDS
PUBLIC	_gost_encrypt@12
; Function compile flags: /Odtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\crypto\gostcipher.c
;	COMDAT _gost_encrypt@12
_TEXT	SEGMENT
_n2$ = -12						; size = 4
_sbox$ = -8						; size = 4
_n1$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_ks$ = 16						; size = 4
_gost_encrypt@12 PROC					; COMDAT

; 94   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 95   : 	gst_udword n1, n2;
; 96   : 	gost_s_box *sbox;
; 97   : 	n1 = 0;

  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n1$[ebp], 0

; 98   : 	n2 = 0;

  0000f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n2$[ebp], 0

; 99   : 
; 100  : 	n1 = (gst_udword)in[3] << 24 | (gst_udword)in[2] << 16 | (gst_udword)in[1] << 8 | (gst_udword)in[0];

  00016	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00019	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0001d	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00020	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  00023	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00027	c1 e0 10	 shl	 eax, 16			; 00000010H
  0002a	0b c8		 or	 ecx, eax
  0002c	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0002f	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00033	c1 e0 08	 shl	 eax, 8
  00036	0b c8		 or	 ecx, eax
  00038	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0003b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0003e	0b c8		 or	 ecx, eax
  00040	89 4d fc	 mov	 DWORD PTR _n1$[ebp], ecx

; 101  : 	n2 = (gst_udword)in[7] << 24 | (gst_udword)in[6] << 16 | (gst_udword)in[5] << 8 | (gst_udword)in[4];

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  00046	0f b6 51 07	 movzx	 edx, BYTE PTR [ecx+7]
  0004a	c1 e2 18	 shl	 edx, 24			; 00000018H
  0004d	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00050	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00054	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00057	0b d1		 or	 edx, ecx
  00059	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  0005c	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00060	c1 e1 08	 shl	 ecx, 8
  00063	0b d1		 or	 edx, ecx
  00065	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00068	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0006c	0b d1		 or	 edx, ecx
  0006e	89 55 f4	 mov	 DWORD PTR _n2$[ebp], edx

; 102  : #ifdef GOST_DYNAMIC_SBOXES
; 103  : 	sbox = &ks->sbox;

  00071	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00074	83 c2 20	 add	 edx, 32			; 00000020H
  00077	89 55 f8	 mov	 DWORD PTR _sbox$[ebp], edx

; 104  : #else
; 105  : 	sbox = ks->sbox;
; 106  : #endif
; 107  : 
; 108  : 	//Rounds 1-24
; 109  : 	n2 = r(n1, n2, ks->X0, sbox);

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	52		 push	 edx
  00084	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _r@16
  00091	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 110  : 	n1 = r(n2, n1, ks->X1, sbox);

  00094	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  00097	52		 push	 edx
  00098	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0009b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009e	51		 push	 ecx
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _r@16
  000ac	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 111  : 	n2 = r(n1, n2, ks->X2, sbox);

  000af	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  000b6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b9	50		 push	 eax
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _r@16
  000c7	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 112  : 	n1 = r(n2, n1, ks->X3, sbox);

  000ca	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  000d1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000d4	52		 push	 edx
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _r@16
  000e2	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 113  : 	n2 = r(n1, n2, ks->X4, sbox);

  000e5	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  000e8	52		 push	 edx
  000e9	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  000ec	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ef	51		 push	 ecx
  000f0	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  000f3	52		 push	 edx
  000f4	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _r@16
  000fd	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 114  : 	n1 = r(n2, n1, ks->X5, sbox);

  00100	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00103	51		 push	 ecx
  00104	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00107	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0010a	50		 push	 eax
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 _r@16
  00118	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 115  : 	n2 = r(n1, n2, ks->X6, sbox);

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  0011e	50		 push	 eax
  0011f	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00122	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00125	52		 push	 edx
  00126	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _r@16
  00133	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 116  : 	n1 = r(n2, n1, ks->X7, sbox);

  00136	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  00139	52		 push	 edx
  0013a	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0013d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00140	51		 push	 ecx
  00141	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00144	52		 push	 edx
  00145	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _r@16
  0014e	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 117  : 
; 118  : 	n2 = r(n1, n2, ks->X0, sbox);

  00151	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00154	51		 push	 ecx
  00155	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00158	8b 02		 mov	 eax, DWORD PTR [edx]
  0015a	50		 push	 eax
  0015b	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0015e	51		 push	 ecx
  0015f	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00162	52		 push	 edx
  00163	e8 00 00 00 00	 call	 _r@16
  00168	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 119  : 	n1 = r(n2, n1, ks->X1, sbox);

  0016b	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00172	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00175	52		 push	 edx
  00176	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0017d	51		 push	 ecx
  0017e	e8 00 00 00 00	 call	 _r@16
  00183	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 120  : 	n2 = r(n1, n2, ks->X2, sbox);

  00186	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  00189	52		 push	 edx
  0018a	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0018d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00190	51		 push	 ecx
  00191	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00194	52		 push	 edx
  00195	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _r@16
  0019e	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 121  : 	n1 = r(n2, n1, ks->X3, sbox);

  001a1	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  001a4	51		 push	 ecx
  001a5	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  001a8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001ab	50		 push	 eax
  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  001af	51		 push	 ecx
  001b0	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  001b3	52		 push	 edx
  001b4	e8 00 00 00 00	 call	 _r@16
  001b9	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 122  : 	n2 = r(n1, n2, ks->X4, sbox);

  001bc	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  001bf	50		 push	 eax
  001c0	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  001c3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001c6	52		 push	 edx
  001c7	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  001ca	50		 push	 eax
  001cb	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  001ce	51		 push	 ecx
  001cf	e8 00 00 00 00	 call	 _r@16
  001d4	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 123  : 	n1 = r(n2, n1, ks->X5, sbox);

  001d7	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  001da	52		 push	 edx
  001db	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  001de	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001e1	51		 push	 ecx
  001e2	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  001e5	52		 push	 edx
  001e6	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 _r@16
  001ef	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 124  : 	n2 = r(n1, n2, ks->X6, sbox);

  001f2	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  001f5	51		 push	 ecx
  001f6	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  001f9	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001fc	50		 push	 eax
  001fd	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  00200	51		 push	 ecx
  00201	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00204	52		 push	 edx
  00205	e8 00 00 00 00	 call	 _r@16
  0020a	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 125  : 	n1 = r(n2, n1, ks->X7, sbox);

  0020d	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00210	50		 push	 eax
  00211	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00214	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00217	52		 push	 edx
  00218	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 _r@16
  00225	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 126  : 
; 127  : 	n2 = r(n1, n2, ks->X0, sbox);

  00228	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0022b	52		 push	 edx
  0022c	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0022f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00231	51		 push	 ecx
  00232	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00235	52		 push	 edx
  00236	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 _r@16
  0023f	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 128  : 	n1 = r(n2, n1, ks->X1, sbox);

  00242	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00245	51		 push	 ecx
  00246	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00249	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0024c	50		 push	 eax
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00250	51		 push	 ecx
  00251	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00254	52		 push	 edx
  00255	e8 00 00 00 00	 call	 _r@16
  0025a	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 129  : 	n2 = r(n1, n2, ks->X2, sbox);

  0025d	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00260	50		 push	 eax
  00261	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00264	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00267	52		 push	 edx
  00268	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0026b	50		 push	 eax
  0026c	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0026f	51		 push	 ecx
  00270	e8 00 00 00 00	 call	 _r@16
  00275	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 130  : 	n1 = r(n2, n1, ks->X3, sbox);

  00278	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0027b	52		 push	 edx
  0027c	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0027f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00282	51		 push	 ecx
  00283	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00286	52		 push	 edx
  00287	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0028a	50		 push	 eax
  0028b	e8 00 00 00 00	 call	 _r@16
  00290	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 131  : 	n2 = r(n1, n2, ks->X4, sbox);

  00293	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00296	51		 push	 ecx
  00297	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0029a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0029d	50		 push	 eax
  0029e	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  002a1	51		 push	 ecx
  002a2	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  002a5	52		 push	 edx
  002a6	e8 00 00 00 00	 call	 _r@16
  002ab	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 132  : 	n1 = r(n2, n1, ks->X5, sbox);

  002ae	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  002b1	50		 push	 eax
  002b2	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  002b5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002b8	52		 push	 edx
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 _r@16
  002c6	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 133  : 	n2 = r(n1, n2, ks->X6, sbox);

  002c9	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  002cc	52		 push	 edx
  002cd	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  002d0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002d3	51		 push	 ecx
  002d4	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  002d7	52		 push	 edx
  002d8	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 _r@16
  002e1	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 134  : 	n1 = r(n2, n1, ks->X7, sbox);

  002e4	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  002e7	51		 push	 ecx
  002e8	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  002eb	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002ee	50		 push	 eax
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  002f2	51		 push	 ecx
  002f3	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  002f6	52		 push	 edx
  002f7	e8 00 00 00 00	 call	 _r@16
  002fc	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 135  : 
; 136  : 	//Rounds 25-32
; 137  : 	n2 = r(n1, n2, ks->X7, sbox);

  002ff	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00302	50		 push	 eax
  00303	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00306	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00309	52		 push	 edx
  0030a	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0030d	50		 push	 eax
  0030e	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00311	51		 push	 ecx
  00312	e8 00 00 00 00	 call	 _r@16
  00317	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 138  : 	n1 = r(n2, n1, ks->X6, sbox);

  0031a	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0031d	52		 push	 edx
  0031e	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00321	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00324	51		 push	 ecx
  00325	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00328	52		 push	 edx
  00329	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 _r@16
  00332	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 139  : 	n2 = r(n1, n2, ks->X5, sbox);

  00335	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00338	51		 push	 ecx
  00339	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0033c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0033f	50		 push	 eax
  00340	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  00343	51		 push	 ecx
  00344	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00347	52		 push	 edx
  00348	e8 00 00 00 00	 call	 _r@16
  0034d	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 140  : 	n1 = r(n2, n1, ks->X4, sbox);

  00350	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00353	50		 push	 eax
  00354	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00357	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0035a	52		 push	 edx
  0035b	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0035e	50		 push	 eax
  0035f	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  00362	51		 push	 ecx
  00363	e8 00 00 00 00	 call	 _r@16
  00368	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 141  : 	n2 = r(n1, n2, ks->X3, sbox);

  0036b	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0036e	52		 push	 edx
  0036f	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00372	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00375	51		 push	 ecx
  00376	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00379	52		 push	 edx
  0037a	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 _r@16
  00383	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 142  : 	n1 = r(n2, n1, ks->X2, sbox);

  00386	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00389	51		 push	 ecx
  0038a	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0038d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00390	50		 push	 eax
  00391	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00394	51		 push	 ecx
  00395	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00398	52		 push	 edx
  00399	e8 00 00 00 00	 call	 _r@16
  0039e	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 143  : 	n2 = r(n1, n2, ks->X1, sbox);

  003a1	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  003a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003ab	52		 push	 edx
  003ac	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  003af	50		 push	 eax
  003b0	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  003b3	51		 push	 ecx
  003b4	e8 00 00 00 00	 call	 _r@16
  003b9	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 144  : 	n1 = r(n2, n1, ks->X0, sbox);

  003bc	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  003bf	52		 push	 edx
  003c0	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  003c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c5	51		 push	 ecx
  003c6	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  003c9	52		 push	 edx
  003ca	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 _r@16
  003d3	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 145  : 
; 146  : 	out[0] = (byte)(n2 & 0xFF); out[1] = (byte)((n2 >> 8) & 0xFF); out[2] = (byte)((n2 >> 16) & 0xFF); out[3] = (byte)((n2 >> 24) & 0xFF);

  003d6	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  003d9	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  003df	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  003e2	88 0a		 mov	 BYTE PTR [edx], cl
  003e4	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  003e7	c1 e8 08	 shr	 eax, 8
  003ea	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003ef	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  003f2	88 41 01	 mov	 BYTE PTR [ecx+1], al
  003f5	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  003f8	c1 ea 10	 shr	 edx, 16			; 00000010H
  003fb	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00401	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  00404	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00407	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0040a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0040d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00413	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00416	88 4a 03	 mov	 BYTE PTR [edx+3], cl

; 147  : 	out[4] = (byte)(n1 & 0xFF); out[5] = (byte)((n1 >> 8) & 0xFF); out[6] = (byte)((n1 >> 16) & 0xFF); out[7] = (byte)((n1 >> 24) & 0xFF);

  00419	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0041c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00421	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  00424	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00427	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  0042a	c1 ea 08	 shr	 edx, 8
  0042d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00433	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  00436	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00439	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0043c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0043f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00445	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00448	88 4a 06	 mov	 BYTE PTR [edx+6], cl
  0044b	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0044e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00451	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00456	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  00459	88 41 07	 mov	 BYTE PTR [ecx+7], al

; 148  : }

  0045c	8b e5		 mov	 esp, ebp
  0045e	5d		 pop	 ebp
  0045f	c2 0c 00	 ret	 12			; 0000000cH
_gost_encrypt@12 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _r@16
_TEXT	SEGMENT
_n1$ = 8						; size = 4
_n2$ = 12						; size = 4
_X$ = 16						; size = 4
_sbox$ = 20						; size = 4
_r@16	PROC						; COMDAT

; 65   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 66   : 	n1 += X;

  00006	8b 45 08	 mov	 eax, DWORD PTR _n1$[ebp]
  00009	03 45 10	 add	 eax, DWORD PTR _X$[ebp]
  0000c	89 45 08	 mov	 DWORD PTR _n1$[ebp], eax

; 67   : #ifdef GOST_DYNAMIC_SBOXES
; 68   : 	n1 =  sbox->k8[(n1>>28)&0xF] | sbox->k7[(n1>>24)&0xF]
; 69   : 				| sbox->k6[(n1>>20)&0xF] | sbox->k5[(n1>>16)&0xF]
; 70   : 				| sbox->k4[(n1>>12)&0xF] | sbox->k3[(n1>>8)&0xF]
; 71   : 				| sbox->k2[(n1>>4)&0xF] | sbox->k1[n1&0xF];

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _n1$[ebp]
  00012	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00015	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00018	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  0001b	c1 ea 18	 shr	 edx, 24			; 00000018H
  0001e	83 e2 0f	 and	 edx, 15			; 0000000fH
  00021	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  00024	8b 75 14	 mov	 esi, DWORD PTR _sbox$[ebp]
  00027	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0002a	0b 4c 96 40	 or	 ecx, DWORD PTR [esi+edx*4+64]
  0002e	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  00031	c1 ea 14	 shr	 edx, 20			; 00000014H
  00034	83 e2 0f	 and	 edx, 15			; 0000000fH
  00037	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  0003a	0b 8c 90 80 00
	00 00		 or	 ecx, DWORD PTR [eax+edx*4+128]
  00041	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  00044	c1 ea 10	 shr	 edx, 16			; 00000010H
  00047	83 e2 0f	 and	 edx, 15			; 0000000fH
  0004a	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  0004d	0b 8c 90 c0 00
	00 00		 or	 ecx, DWORD PTR [eax+edx*4+192]
  00054	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  00057	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  0005a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0005d	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  00060	0b 8c 90 00 01
	00 00		 or	 ecx, DWORD PTR [eax+edx*4+256]
  00067	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  0006a	c1 ea 08	 shr	 edx, 8
  0006d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00070	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  00073	0b 8c 90 40 01
	00 00		 or	 ecx, DWORD PTR [eax+edx*4+320]
  0007a	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  0007d	c1 ea 04	 shr	 edx, 4
  00080	83 e2 0f	 and	 edx, 15			; 0000000fH
  00083	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  00086	0b 8c 90 80 01
	00 00		 or	 ecx, DWORD PTR [eax+edx*4+384]
  0008d	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  00090	83 e2 0f	 and	 edx, 15			; 0000000fH
  00093	8b 45 14	 mov	 eax, DWORD PTR _sbox$[ebp]
  00096	0b 8c 90 c0 01
	00 00		 or	 ecx, DWORD PTR [eax+edx*4+448]
  0009d	89 4d 08	 mov	 DWORD PTR _n1$[ebp], ecx

; 72   : #else
; 73   : 	n1 =  (gst_udword)sbox->k8[(n1>>28)&0xF]<<28 | (gst_udword)sbox->k7[(n1>>24)&0xF]<<24
; 74   : 				| (gst_udword)sbox->k6[(n1>>20)&0xF]<<20 | (gst_udword)sbox->k5[(n1>>16)&0xF]<<16
; 75   : 				| (gst_udword)sbox->k4[(n1>>12)&0xF]<<12 | (gst_udword)sbox->k3[(n1>>8)&0xF]<<8
; 76   : 				| (gst_udword)sbox->k2[(n1>>4)&0xF]<<4 | (gst_udword)sbox->k1[n1&0xF];
; 77   : #endif
; 78   : 	n1 = rotl32(n1, 11);

  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _n1$[ebp]
  000a3	c1 e1 0b	 shl	 ecx, 11			; 0000000bH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _n1$[ebp]
  000a9	c1 ea 15	 shr	 edx, 21			; 00000015H
  000ac	0b ca		 or	 ecx, edx
  000ae	89 4d 08	 mov	 DWORD PTR _n1$[ebp], ecx

; 79   : 	n2 ^= n1;

  000b1	8b 45 0c	 mov	 eax, DWORD PTR _n2$[ebp]
  000b4	33 45 08	 xor	 eax, DWORD PTR _n1$[ebp]
  000b7	89 45 0c	 mov	 DWORD PTR _n2$[ebp], eax

; 80   : 	return n2;

  000ba	8b 45 0c	 mov	 eax, DWORD PTR _n2$[ebp]

; 81   : }

  000bd	5e		 pop	 esi
  000be	5d		 pop	 ebp
  000bf	c2 10 00	 ret	 16			; 00000010H
_r@16	ENDP
_TEXT	ENDS
PUBLIC	_gost_decrypt@12
; Function compile flags: /Odtp
;	COMDAT _gost_decrypt@12
_TEXT	SEGMENT
_n2$ = -12						; size = 4
_sbox$ = -8						; size = 4
_n1$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_ks$ = 16						; size = 4
_gost_decrypt@12 PROC					; COMDAT

; 161  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 162  : 	gst_udword n1, n2;
; 163  : 	gost_s_box *sbox;
; 164  : 	n1 = 0;

  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n1$[ebp], 0

; 165  : 	n2 = 0;

  0000f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _n2$[ebp], 0

; 166  : 
; 167  : 	n1 = (gst_udword)in[3] << 24 | (gst_udword)in[2] << 16 | (gst_udword)in[1] << 8 | (gst_udword)in[0];

  00016	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00019	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0001d	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00020	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  00023	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00027	c1 e0 10	 shl	 eax, 16			; 00000010H
  0002a	0b c8		 or	 ecx, eax
  0002c	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0002f	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00033	c1 e0 08	 shl	 eax, 8
  00036	0b c8		 or	 ecx, eax
  00038	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0003b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0003e	0b c8		 or	 ecx, eax
  00040	89 4d fc	 mov	 DWORD PTR _n1$[ebp], ecx

; 168  : 	n2 = (gst_udword)in[7] << 24 | (gst_udword)in[6] << 16 | (gst_udword)in[5] << 8 | (gst_udword)in[4];

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  00046	0f b6 51 07	 movzx	 edx, BYTE PTR [ecx+7]
  0004a	c1 e2 18	 shl	 edx, 24			; 00000018H
  0004d	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00050	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00054	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00057	0b d1		 or	 edx, ecx
  00059	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  0005c	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00060	c1 e1 08	 shl	 ecx, 8
  00063	0b d1		 or	 edx, ecx
  00065	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00068	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0006c	0b d1		 or	 edx, ecx
  0006e	89 55 f4	 mov	 DWORD PTR _n2$[ebp], edx

; 169  : #ifdef GOST_DYNAMIC_SBOXES
; 170  : 	sbox = &ks->sbox;

  00071	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00074	83 c2 20	 add	 edx, 32			; 00000020H
  00077	89 55 f8	 mov	 DWORD PTR _sbox$[ebp], edx

; 171  : #else
; 172  : 	sbox = ks->sbox;
; 173  : #endif
; 174  : 
; 175  : 	//Rounds 1-8
; 176  : 	n2 = r(n1, n2, ks->X0, sbox);

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	52		 push	 edx
  00084	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  00087	50		 push	 eax
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _r@16
  00091	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 177  : 	n1 = r(n2, n1, ks->X1, sbox);

  00094	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  00097	52		 push	 edx
  00098	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0009b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009e	51		 push	 ecx
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _r@16
  000ac	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 178  : 	n2 = r(n1, n2, ks->X2, sbox);

  000af	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  000b6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b9	50		 push	 eax
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 _r@16
  000c7	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 179  : 	n1 = r(n2, n1, ks->X3, sbox);

  000ca	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  000d1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000d4	52		 push	 edx
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _r@16
  000e2	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 180  : 	n2 = r(n1, n2, ks->X4, sbox);

  000e5	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  000e8	52		 push	 edx
  000e9	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  000ec	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ef	51		 push	 ecx
  000f0	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  000f3	52		 push	 edx
  000f4	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _r@16
  000fd	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 181  : 	n1 = r(n2, n1, ks->X5, sbox);

  00100	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00103	51		 push	 ecx
  00104	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00107	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0010a	50		 push	 eax
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 _r@16
  00118	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 182  : 	n2 = r(n1, n2, ks->X6, sbox);

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  0011e	50		 push	 eax
  0011f	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00122	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00125	52		 push	 edx
  00126	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _r@16
  00133	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 183  : 	n1 = r(n2, n1, ks->X7, sbox);

  00136	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  00139	52		 push	 edx
  0013a	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0013d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00140	51		 push	 ecx
  00141	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00144	52		 push	 edx
  00145	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 _r@16
  0014e	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 184  : 
; 185  : 	//Rounds 9-32
; 186  : 	n2 = r(n1, n2, ks->X7, sbox);

  00151	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00154	51		 push	 ecx
  00155	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  00158	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0015b	50		 push	 eax
  0015c	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0015f	51		 push	 ecx
  00160	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00163	52		 push	 edx
  00164	e8 00 00 00 00	 call	 _r@16
  00169	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 187  : 	n1 = r(n2, n1, ks->X6, sbox);

  0016c	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  0016f	50		 push	 eax
  00170	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00173	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00176	52		 push	 edx
  00177	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 _r@16
  00184	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 188  : 	n2 = r(n1, n2, ks->X5, sbox);

  00187	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0018a	52		 push	 edx
  0018b	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0018e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00191	51		 push	 ecx
  00192	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00195	52		 push	 edx
  00196	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 _r@16
  0019f	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 189  : 	n1 = r(n2, n1, ks->X4, sbox);

  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  001a9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ac	50		 push	 eax
  001ad	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  001b0	51		 push	 ecx
  001b1	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  001b4	52		 push	 edx
  001b5	e8 00 00 00 00	 call	 _r@16
  001ba	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 190  : 	n2 = r(n1, n2, ks->X3, sbox);

  001bd	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  001c0	50		 push	 eax
  001c1	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  001c4	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001c7	52		 push	 edx
  001c8	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  001cb	50		 push	 eax
  001cc	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  001cf	51		 push	 ecx
  001d0	e8 00 00 00 00	 call	 _r@16
  001d5	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 191  : 	n1 = r(n2, n1, ks->X2, sbox);

  001d8	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  001db	52		 push	 edx
  001dc	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  001df	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001e2	51		 push	 ecx
  001e3	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  001e6	52		 push	 edx
  001e7	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 _r@16
  001f0	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 192  : 	n2 = r(n1, n2, ks->X1, sbox);

  001f3	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  001f6	51		 push	 ecx
  001f7	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  001fa	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001fd	50		 push	 eax
  001fe	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  00201	51		 push	 ecx
  00202	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 _r@16
  0020b	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 193  : 	n1 = r(n2, n1, ks->X0, sbox);

  0020e	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00211	50		 push	 eax
  00212	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00215	8b 11		 mov	 edx, DWORD PTR [ecx]
  00217	52		 push	 edx
  00218	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 _r@16
  00225	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 194  : 
; 195  : 	n2 = r(n1, n2, ks->X7, sbox);

  00228	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0022b	52		 push	 edx
  0022c	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  0022f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00232	51		 push	 ecx
  00233	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00236	52		 push	 edx
  00237	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _r@16
  00240	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 196  : 	n1 = r(n2, n1, ks->X6, sbox);

  00243	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00246	51		 push	 ecx
  00247	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0024a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0024d	50		 push	 eax
  0024e	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00251	51		 push	 ecx
  00252	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00255	52		 push	 edx
  00256	e8 00 00 00 00	 call	 _r@16
  0025b	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 197  : 	n2 = r(n1, n2, ks->X5, sbox);

  0025e	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00261	50		 push	 eax
  00262	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00265	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00268	52		 push	 edx
  00269	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0026c	50		 push	 eax
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00270	51		 push	 ecx
  00271	e8 00 00 00 00	 call	 _r@16
  00276	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 198  : 	n1 = r(n2, n1, ks->X4, sbox);

  00279	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0027c	52		 push	 edx
  0027d	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00280	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00283	51		 push	 ecx
  00284	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00287	52		 push	 edx
  00288	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 _r@16
  00291	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 199  : 	n2 = r(n1, n2, ks->X3, sbox);

  00294	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00297	51		 push	 ecx
  00298	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0029b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0029e	50		 push	 eax
  0029f	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  002a2	51		 push	 ecx
  002a3	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  002a6	52		 push	 edx
  002a7	e8 00 00 00 00	 call	 _r@16
  002ac	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 200  : 	n1 = r(n2, n1, ks->X2, sbox);

  002af	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  002b2	50		 push	 eax
  002b3	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  002b6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002b9	52		 push	 edx
  002ba	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  002bd	50		 push	 eax
  002be	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  002c1	51		 push	 ecx
  002c2	e8 00 00 00 00	 call	 _r@16
  002c7	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 201  : 	n2 = r(n1, n2, ks->X1, sbox);

  002ca	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  002cd	52		 push	 edx
  002ce	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  002d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002d4	51		 push	 ecx
  002d5	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  002d8	52		 push	 edx
  002d9	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 _r@16
  002e2	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 202  : 	n1 = r(n2, n1, ks->X0, sbox);

  002e5	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  002e8	51		 push	 ecx
  002e9	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  002ec	8b 02		 mov	 eax, DWORD PTR [edx]
  002ee	50		 push	 eax
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  002f2	51		 push	 ecx
  002f3	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  002f6	52		 push	 edx
  002f7	e8 00 00 00 00	 call	 _r@16
  002fc	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 203  : 
; 204  : 	n2 = r(n1, n2, ks->X7, sbox);

  002ff	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00302	50		 push	 eax
  00303	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00306	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00309	52		 push	 edx
  0030a	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0030d	50		 push	 eax
  0030e	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00311	51		 push	 ecx
  00312	e8 00 00 00 00	 call	 _r@16
  00317	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 205  : 	n1 = r(n2, n1, ks->X6, sbox);

  0031a	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0031d	52		 push	 edx
  0031e	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00321	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00324	51		 push	 ecx
  00325	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00328	52		 push	 edx
  00329	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 _r@16
  00332	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 206  : 	n2 = r(n1, n2, ks->X5, sbox);

  00335	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00338	51		 push	 ecx
  00339	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0033c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0033f	50		 push	 eax
  00340	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  00343	51		 push	 ecx
  00344	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  00347	52		 push	 edx
  00348	e8 00 00 00 00	 call	 _r@16
  0034d	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 207  : 	n1 = r(n2, n1, ks->X4, sbox);

  00350	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  00353	50		 push	 eax
  00354	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00357	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0035a	52		 push	 edx
  0035b	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0035e	50		 push	 eax
  0035f	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  00362	51		 push	 ecx
  00363	e8 00 00 00 00	 call	 _r@16
  00368	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 208  : 	n2 = r(n1, n2, ks->X3, sbox);

  0036b	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  0036e	52		 push	 edx
  0036f	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  00372	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00375	51		 push	 ecx
  00376	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00379	52		 push	 edx
  0037a	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 _r@16
  00383	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 209  : 	n1 = r(n2, n1, ks->X2, sbox);

  00386	8b 4d f8	 mov	 ecx, DWORD PTR _sbox$[ebp]
  00389	51		 push	 ecx
  0038a	8b 55 10	 mov	 edx, DWORD PTR _ks$[ebp]
  0038d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00390	50		 push	 eax
  00391	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  00394	51		 push	 ecx
  00395	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  00398	52		 push	 edx
  00399	e8 00 00 00 00	 call	 _r@16
  0039e	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 210  : 	n2 = r(n1, n2, ks->X1, sbox);

  003a1	8b 45 f8	 mov	 eax, DWORD PTR _sbox$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  003a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003ab	52		 push	 edx
  003ac	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  003af	50		 push	 eax
  003b0	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  003b3	51		 push	 ecx
  003b4	e8 00 00 00 00	 call	 _r@16
  003b9	89 45 f4	 mov	 DWORD PTR _n2$[ebp], eax

; 211  : 	n1 = r(n2, n1, ks->X0, sbox);

  003bc	8b 55 f8	 mov	 edx, DWORD PTR _sbox$[ebp]
  003bf	52		 push	 edx
  003c0	8b 45 10	 mov	 eax, DWORD PTR _ks$[ebp]
  003c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c5	51		 push	 ecx
  003c6	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  003c9	52		 push	 edx
  003ca	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 _r@16
  003d3	89 45 fc	 mov	 DWORD PTR _n1$[ebp], eax

; 212  : 	
; 213  : 	out[0] = (byte)(n2 & 0xFF); out[1] = (byte)((n2 >> 8) & 0xFF); out[2] = (byte)((n2 >> 16) & 0xFF); out[3] = (byte)((n2 >> 24) & 0xFF);

  003d6	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  003d9	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  003df	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  003e2	88 0a		 mov	 BYTE PTR [edx], cl
  003e4	8b 45 f4	 mov	 eax, DWORD PTR _n2$[ebp]
  003e7	c1 e8 08	 shr	 eax, 8
  003ea	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003ef	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  003f2	88 41 01	 mov	 BYTE PTR [ecx+1], al
  003f5	8b 55 f4	 mov	 edx, DWORD PTR _n2$[ebp]
  003f8	c1 ea 10	 shr	 edx, 16			; 00000010H
  003fb	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00401	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  00404	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00407	8b 4d f4	 mov	 ecx, DWORD PTR _n2$[ebp]
  0040a	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0040d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00413	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00416	88 4a 03	 mov	 BYTE PTR [edx+3], cl

; 214  : 	out[4] = (byte)(n1 & 0xFF); out[5] = (byte)((n1 >> 8) & 0xFF); out[6] = (byte)((n1 >> 16) & 0xFF); out[7] = (byte)((n1 >> 24) & 0xFF);

  00419	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0041c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00421	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  00424	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00427	8b 55 fc	 mov	 edx, DWORD PTR _n1$[ebp]
  0042a	c1 ea 08	 shr	 edx, 8
  0042d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00433	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  00436	88 50 05	 mov	 BYTE PTR [eax+5], dl
  00439	8b 4d fc	 mov	 ecx, DWORD PTR _n1$[ebp]
  0043c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0043f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00445	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00448	88 4a 06	 mov	 BYTE PTR [edx+6], cl
  0044b	8b 45 fc	 mov	 eax, DWORD PTR _n1$[ebp]
  0044e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00451	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00456	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  00459	88 41 07	 mov	 BYTE PTR [ecx+7], al

; 215  : }

  0045c	8b e5		 mov	 esp, ebp
  0045e	5d		 pop	 ebp
  0045f	c2 0c 00	 ret	 12			; 0000000cH
_gost_decrypt@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_gost_set_key@8
EXTRN	_STRIBOG_finalize@8:PROC
EXTRN	_STRIBOG_add@12:PROC
EXTRN	_STRIBOG_init@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
;	COMDAT _gost_set_key@8
_TEXT	SEGMENT
_sctx$ = -472						; size = 385
_i$ = -76						; size = 4
_sbox_seed$ = -72					; size = 64
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_ks$ = 12						; size = 4
_gost_set_key@8 PROC					; COMDAT

; 227  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec d8 01 00
	00		 sub	 esp, 472		; 000001d8H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 228  :     gst_udword i;
; 229  : 
; 230  : #ifdef GOST_DYNAMIC_SBOXES
; 231  : 	STRIBOG_CTX sctx;
; 232  : 	byte sbox_seed[64];
; 233  : 
; 234  : 	ks->sbox = GostR3411_94_CryptoProParamSet;

  00017	8b 7d 0c	 mov	 edi, DWORD PTR _ks$[ebp]
  0001a	83 c7 20	 add	 edi, 32			; 00000020H
  0001d	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00022	be 00 00 00 00	 mov	 esi, OFFSET _GostR3411_94_CryptoProParamSet
  00027	f3 a5		 rep movsd

; 235  : 
; 236  : 	//Generate pseudorandom data based on the key
; 237  : 	STRIBOG_init(&sctx);

  00029	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _sctx$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _STRIBOG_init@4

; 238  : 	STRIBOG_add(&sctx, key, 32);

  00035	6a 20		 push	 32			; 00000020H
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  0003a	51		 push	 ecx
  0003b	8d 95 28 fe ff
	ff		 lea	 edx, DWORD PTR _sctx$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 _STRIBOG_add@12

; 239  : 	STRIBOG_finalize(&sctx, sbox_seed);

  00047	8d 45 b8	 lea	 eax, DWORD PTR _sbox_seed$[ebp]
  0004a	50		 push	 eax
  0004b	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR _sctx$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _STRIBOG_finalize@8

; 240  : 
; 241  : 	xor_s_box(&ks->sbox, sbox_seed);

  00057	8d 55 b8	 lea	 edx, DWORD PTR _sbox_seed$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  0005e	83 c0 20	 add	 eax, 32			; 00000020H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _xor_s_box@8

; 242  : 
; 243  : 	/* In order to avoid 7 bitshift operations on each pass through the S-Box,
; 244  : 	* this step is pre-processed once during the set_key phase. If memory contraints
; 245  : 	* become a problem, this step can be skipped and the sbox struct can change its
; 246  : 	* unsigned int arrays to unsigned char arrays, going from 512 unsigned chars to 128.
; 247  : 	*/
; 248  : 	for (i = 0; i < GOST_SBOX_SIZE; i++)

  00067	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN6@gost_set_k
$LN5@gost_set_k:
  00070	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  00073	83 c1 01	 add	 ecx, 1
  00076	89 4d b4	 mov	 DWORD PTR _i$[ebp], ecx
$LN6@gost_set_k:
  00079	83 7d b4 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0007d	0f 83 c4 00 00
	00		 jae	 $LN4@gost_set_k

; 249  : 	{
; 250  : 		ks->sbox.k8[i] <<= 28;

  00083	8b 55 b4	 mov	 edx, DWORD PTR _i$[ebp]
  00086	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  00089	8b 4c 90 20	 mov	 ecx, DWORD PTR [eax+edx*4+32]
  0008d	c1 e1 1c	 shl	 ecx, 28			; 0000001cH
  00090	8b 55 b4	 mov	 edx, DWORD PTR _i$[ebp]
  00093	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  00096	89 4c 90 20	 mov	 DWORD PTR [eax+edx*4+32], ecx

; 251  : 		ks->sbox.k7[i] <<= 24;

  0009a	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  0009d	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  000a0	8b 44 8a 60	 mov	 eax, DWORD PTR [edx+ecx*4+96]
  000a4	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a7	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  000aa	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  000ad	89 44 8a 60	 mov	 DWORD PTR [edx+ecx*4+96], eax

; 252  : 		ks->sbox.k6[i] <<= 20;

  000b1	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  000b7	8b 94 81 a0 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+160]
  000be	c1 e2 14	 shl	 edx, 20			; 00000014H
  000c1	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  000c7	89 94 81 a0 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+160], edx

; 253  : 		ks->sbox.k5[i] <<= 16;

  000ce	8b 55 b4	 mov	 edx, DWORD PTR _i$[ebp]
  000d1	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  000d4	8b 8c 90 e0 00
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+224]
  000db	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000de	8b 55 b4	 mov	 edx, DWORD PTR _i$[ebp]
  000e1	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  000e4	89 8c 90 e0 00
	00 00		 mov	 DWORD PTR [eax+edx*4+224], ecx

; 254  : 		ks->sbox.k4[i] <<= 12;

  000eb	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  000ee	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  000f1	8b 84 8a 20 01
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+288]
  000f8	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  000fb	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  000fe	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  00101	89 84 8a 20 01
	00 00		 mov	 DWORD PTR [edx+ecx*4+288], eax

; 255  : 		ks->sbox.k3[i] <<= 8;

  00108	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  0010e	8b 94 81 60 01
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+352]
  00115	c1 e2 08	 shl	 edx, 8
  00118	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  0011e	89 94 81 60 01
	00 00		 mov	 DWORD PTR [ecx+eax*4+352], edx

; 256  : 		ks->sbox.k2[i] <<= 4;

  00125	8b 55 b4	 mov	 edx, DWORD PTR _i$[ebp]
  00128	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  0012b	8b 8c 90 a0 01
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+416]
  00132	c1 e1 04	 shl	 ecx, 4
  00135	8b 55 b4	 mov	 edx, DWORD PTR _i$[ebp]
  00138	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  0013b	89 8c 90 a0 01
	00 00		 mov	 DWORD PTR [eax+edx*4+416], ecx

; 257  : 	}

  00142	e9 29 ff ff ff	 jmp	 $LN5@gost_set_k
$LN4@gost_set_k:

; 258  : #else
; 259  : 	ks->sbox = &GostR3411_94_CryptoProParamSet;
; 260  : #endif
; 261  : 
; 262  : 	ks->X0 = 0;

  00147	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  0014a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 263  : 	ks->X1 = 0;

  00150	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  00153	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 264  : 	ks->X2 = 0;

  0015a	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  0015d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 265  : 	ks->X3 = 0;

  00164	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  00167	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 266  : 	ks->X4 = 0;

  0016e	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  00171	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 267  : 	ks->X5 = 0;

  00178	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  0017b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 268  : 	ks->X6 = 0;

  00182	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  00185	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 269  : 	ks->X7 = 0;

  0018c	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  0018f	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 270  : 
; 271  : 	//Set the key
; 272  : 	for (i = 0; i < GOST_KEYSIZE / 8; i++)

  00196	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0019d	eb 09		 jmp	 SHORT $LN3@gost_set_k
$LN2@gost_set_k:
  0019f	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  001a2	83 c0 01	 add	 eax, 1
  001a5	89 45 b4	 mov	 DWORD PTR _i$[ebp], eax
$LN3@gost_set_k:
  001a8	83 7d b4 04	 cmp	 DWORD PTR _i$[ebp], 4
  001ac	0f 83 f2 00 00
	00		 jae	 $LN7@gost_set_k

; 273  : 	{
; 274  : 		ks->X0 |= (gst_udword)key[i + 0] << (i * 8);

  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  001b5	03 4d b4	 add	 ecx, DWORD PTR _i$[ebp]
  001b8	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  001bb	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  001be	c1 e1 03	 shl	 ecx, 3
  001c1	d3 e2		 shl	 edx, cl
  001c3	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  001c6	0b 10		 or	 edx, DWORD PTR [eax]
  001c8	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  001cb	89 11		 mov	 DWORD PTR [ecx], edx

; 275  : 		ks->X1 |= (gst_udword)key[i + 4] << (i * 8);

  001cd	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  001d0	03 55 b4	 add	 edx, DWORD PTR _i$[ebp]
  001d3	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  001d7	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  001da	c1 e1 03	 shl	 ecx, 3
  001dd	d3 e0		 shl	 eax, cl
  001df	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  001e2	0b 41 04	 or	 eax, DWORD PTR [ecx+4]
  001e5	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  001e8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 276  : 		ks->X2 |= (gst_udword)key[i + 8] << (i * 8);

  001eb	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  001ee	03 45 b4	 add	 eax, DWORD PTR _i$[ebp]
  001f1	0f b6 50 08	 movzx	 edx, BYTE PTR [eax+8]
  001f5	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  001f8	c1 e1 03	 shl	 ecx, 3
  001fb	d3 e2		 shl	 edx, cl
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  00200	0b 50 08	 or	 edx, DWORD PTR [eax+8]
  00203	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  00206	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 277  : 		ks->X3 |= (gst_udword)key[i + 12] << (i * 8);

  00209	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0020c	03 55 b4	 add	 edx, DWORD PTR _i$[ebp]
  0020f	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00213	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  00216	c1 e1 03	 shl	 ecx, 3
  00219	d3 e0		 shl	 eax, cl
  0021b	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  0021e	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  00221	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  00224	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 278  : 		ks->X4 |= (gst_udword)key[i + 16] << (i * 8);

  00227	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0022a	03 45 b4	 add	 eax, DWORD PTR _i$[ebp]
  0022d	0f b6 50 10	 movzx	 edx, BYTE PTR [eax+16]
  00231	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  00234	c1 e1 03	 shl	 ecx, 3
  00237	d3 e2		 shl	 edx, cl
  00239	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  0023c	0b 50 10	 or	 edx, DWORD PTR [eax+16]
  0023f	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  00242	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 279  : 		ks->X5 |= (gst_udword)key[i + 20] << (i * 8);

  00245	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  00248	03 55 b4	 add	 edx, DWORD PTR _i$[ebp]
  0024b	0f b6 42 14	 movzx	 eax, BYTE PTR [edx+20]
  0024f	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  00252	c1 e1 03	 shl	 ecx, 3
  00255	d3 e0		 shl	 eax, cl
  00257	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  0025a	0b 41 14	 or	 eax, DWORD PTR [ecx+20]
  0025d	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  00260	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 280  : 		ks->X6 |= (gst_udword)key[i + 24] << (i * 8);

  00263	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00266	03 45 b4	 add	 eax, DWORD PTR _i$[ebp]
  00269	0f b6 50 18	 movzx	 edx, BYTE PTR [eax+24]
  0026d	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  00270	c1 e1 03	 shl	 ecx, 3
  00273	d3 e2		 shl	 edx, cl
  00275	8b 45 0c	 mov	 eax, DWORD PTR _ks$[ebp]
  00278	0b 50 18	 or	 edx, DWORD PTR [eax+24]
  0027b	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  0027e	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 281  : 		ks->X7 |= (gst_udword)key[i + 28] << (i * 8);

  00281	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  00284	03 55 b4	 add	 edx, DWORD PTR _i$[ebp]
  00287	0f b6 42 1c	 movzx	 eax, BYTE PTR [edx+28]
  0028b	8b 4d b4	 mov	 ecx, DWORD PTR _i$[ebp]
  0028e	c1 e1 03	 shl	 ecx, 3
  00291	d3 e0		 shl	 eax, cl
  00293	8b 4d 0c	 mov	 ecx, DWORD PTR _ks$[ebp]
  00296	0b 41 1c	 or	 eax, DWORD PTR [ecx+28]
  00299	8b 55 0c	 mov	 edx, DWORD PTR _ks$[ebp]
  0029c	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 282  : 	}

  0029f	e9 fb fe ff ff	 jmp	 $LN2@gost_set_k
$LN7@gost_set_k:

; 283  : }

  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a9	33 cd		 xor	 ecx, ebp
  002ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b0	8b e5		 mov	 esp, ebp
  002b2	5d		 pop	 ebp
  002b3	c2 08 00	 ret	 8
_gost_set_key@8 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _xor_s_box@8
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s_box$ = 8						; size = 4
_seed$ = 12						; size = 4
_xor_s_box@8 PROC					; COMDAT

; 37   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 38   :    int i;
; 39   :    for (i = 0; i < 16; i++)

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN3@xor_s_box
$LN2@xor_s_box:
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN3@xor_s_box:
  00018	83 7d fc 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  0001c	0f 8d 41 01 00
	00		 jge	 $LN4@xor_s_box

; 40   :    {
; 41   :       s_box->k1[i] ^= (seed[ (i * 4) + 0 ]   ) & 0xF;

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00025	8b 55 0c	 mov	 edx, DWORD PTR _seed$[ebp]
  00028	0f b6 04 8a	 movzx	 eax, BYTE PTR [edx+ecx*4]
  0002c	83 e0 0f	 and	 eax, 15			; 0000000fH
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _s_box$[ebp]
  00035	33 84 8a c0 01
	00 00		 xor	 eax, DWORD PTR [edx+ecx*4+448]
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _s_box$[ebp]
  00042	89 84 8a c0 01
	00 00		 mov	 DWORD PTR [edx+ecx*4+448], eax

; 42   :       s_box->k2[i] ^= (seed[ (i * 4) + 0 ]>>4) & 0xF;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _seed$[ebp]
  0004f	0f b6 14 81	 movzx	 edx, BYTE PTR [ecx+eax*4]
  00053	c1 fa 04	 sar	 edx, 4
  00056	83 e2 0f	 and	 edx, 15			; 0000000fH
  00059	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _s_box$[ebp]
  0005f	33 94 81 80 01
	00 00		 xor	 edx, DWORD PTR [ecx+eax*4+384]
  00066	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _s_box$[ebp]
  0006c	89 94 81 80 01
	00 00		 mov	 DWORD PTR [ecx+eax*4+384], edx

; 43   :       s_box->k3[i] ^= (seed[ (i * 4) + 1 ]   ) & 0xF;

  00073	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00076	8b 45 0c	 mov	 eax, DWORD PTR _seed$[ebp]
  00079	0f b6 4c 90 01	 movzx	 ecx, BYTE PTR [eax+edx*4+1]
  0007e	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00081	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00084	8b 45 08	 mov	 eax, DWORD PTR _s_box$[ebp]
  00087	33 8c 90 40 01
	00 00		 xor	 ecx, DWORD PTR [eax+edx*4+320]
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00091	8b 45 08	 mov	 eax, DWORD PTR _s_box$[ebp]
  00094	89 8c 90 40 01
	00 00		 mov	 DWORD PTR [eax+edx*4+320], ecx

; 44   :       s_box->k4[i] ^= (seed[ (i * 4) + 1 ]>>4) & 0xF;

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0009e	8b 55 0c	 mov	 edx, DWORD PTR _seed$[ebp]
  000a1	0f b6 44 8a 01	 movzx	 eax, BYTE PTR [edx+ecx*4+1]
  000a6	c1 f8 04	 sar	 eax, 4
  000a9	83 e0 0f	 and	 eax, 15			; 0000000fH
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000af	8b 55 08	 mov	 edx, DWORD PTR _s_box$[ebp]
  000b2	33 84 8a 00 01
	00 00		 xor	 eax, DWORD PTR [edx+ecx*4+256]
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000bc	8b 55 08	 mov	 edx, DWORD PTR _s_box$[ebp]
  000bf	89 84 8a 00 01
	00 00		 mov	 DWORD PTR [edx+ecx*4+256], eax

; 45   :       s_box->k5[i] ^= (seed[ (i * 4) + 2 ]   ) & 0xF;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c9	8b 4d 0c	 mov	 ecx, DWORD PTR _seed$[ebp]
  000cc	0f b6 54 81 02	 movzx	 edx, BYTE PTR [ecx+eax*4+2]
  000d1	83 e2 0f	 and	 edx, 15			; 0000000fH
  000d4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _s_box$[ebp]
  000da	33 94 81 c0 00
	00 00		 xor	 edx, DWORD PTR [ecx+eax*4+192]
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _s_box$[ebp]
  000e7	89 94 81 c0 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+192], edx

; 46   :       s_box->k6[i] ^= (seed[ (i * 4) + 2 ]>>4) & 0xF;

  000ee	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000f1	8b 45 0c	 mov	 eax, DWORD PTR _seed$[ebp]
  000f4	0f b6 4c 90 02	 movzx	 ecx, BYTE PTR [eax+edx*4+2]
  000f9	c1 f9 04	 sar	 ecx, 4
  000fc	83 e1 0f	 and	 ecx, 15			; 0000000fH
  000ff	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00102	8b 45 08	 mov	 eax, DWORD PTR _s_box$[ebp]
  00105	33 8c 90 80 00
	00 00		 xor	 ecx, DWORD PTR [eax+edx*4+128]
  0010c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0010f	8b 45 08	 mov	 eax, DWORD PTR _s_box$[ebp]
  00112	89 8c 90 80 00
	00 00		 mov	 DWORD PTR [eax+edx*4+128], ecx

; 47   :       s_box->k7[i] ^= (seed[ (i * 4) + 3 ]   ) & 0xF;

  00119	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0011c	8b 55 0c	 mov	 edx, DWORD PTR _seed$[ebp]
  0011f	0f b6 44 8a 03	 movzx	 eax, BYTE PTR [edx+ecx*4+3]
  00124	83 e0 0f	 and	 eax, 15			; 0000000fH
  00127	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0012a	8b 55 08	 mov	 edx, DWORD PTR _s_box$[ebp]
  0012d	33 44 8a 40	 xor	 eax, DWORD PTR [edx+ecx*4+64]
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00134	8b 55 08	 mov	 edx, DWORD PTR _s_box$[ebp]
  00137	89 44 8a 40	 mov	 DWORD PTR [edx+ecx*4+64], eax

; 48   :       s_box->k8[i] ^= (seed[ (i * 4) + 3 ]>>4) & 0xF;

  0013b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0013e	8b 4d 0c	 mov	 ecx, DWORD PTR _seed$[ebp]
  00141	0f b6 54 81 03	 movzx	 edx, BYTE PTR [ecx+eax*4+3]
  00146	c1 fa 04	 sar	 edx, 4
  00149	83 e2 0f	 and	 edx, 15			; 0000000fH
  0014c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _s_box$[ebp]
  00152	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  00155	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00158	8b 4d 08	 mov	 ecx, DWORD PTR _s_box$[ebp]
  0015b	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 49   :    }

  0015e	e9 ac fe ff ff	 jmp	 $LN2@xor_s_box
$LN4@xor_s_box:

; 50   : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 08 00	 ret	 8
_xor_s_box@8 ENDP
_TEXT	ENDS
PUBLIC	_gost_xor_ks@16
; Function compile flags: /Odtp
;	COMDAT _gost_xor_ks@16
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ks$ = 8						; size = 4
_out_ks$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_gost_xor_ks@16 PROC					; COMDAT

; 297  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 298  : 	gst_dword i;
; 299  : 	if (!len)

  00006	83 7d 14 00	 cmp	 DWORD PTR _len$[ebp], 0
  0000a	75 05		 jne	 SHORT $LN4@gost_xor_k

; 300  : 		return;

  0000c	e9 4f 01 00 00	 jmp	 $LN5@gost_xor_k
$LN4@gost_xor_k:

; 301  : 
; 302  : 	out_ks->X0 = ks->X0 ^ in[0];

  00011	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	33 11		 xor	 edx, DWORD PTR [ecx]
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0001e	89 10		 mov	 DWORD PTR [eax], edx

; 303  : 	out_ks->X1 = ks->X1 ^ in[0];

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00023	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00026	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00029	33 02		 xor	 eax, DWORD PTR [edx]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 304  : 	out_ks->X2 = ks->X2 ^ in[0];

  00031	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00034	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00037	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0003a	33 08		 xor	 ecx, DWORD PTR [eax]
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0003f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 305  : 	out_ks->X3 = ks->X3 ^ in[0];

  00042	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00045	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00048	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004b	33 11		 xor	 edx, DWORD PTR [ecx]
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00050	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 306  : 	out_ks->X4 = ks->X4 ^ in[0];

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00056	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00059	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005c	33 02		 xor	 eax, DWORD PTR [edx]
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00061	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 307  : 	out_ks->X5 = ks->X5 ^ in[0];

  00064	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00067	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0006a	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0006d	33 08		 xor	 ecx, DWORD PTR [eax]
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00072	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 308  : 	out_ks->X6 = ks->X6 ^ in[0];

  00075	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00078	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0007b	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0007e	33 11		 xor	 edx, DWORD PTR [ecx]
  00080	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00083	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 309  : 	out_ks->X7 = ks->X7 ^ in[0];

  00086	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00089	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0008c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0008f	33 02		 xor	 eax, DWORD PTR [edx]
  00091	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00094	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 310  : 
; 311  : 	for (i = 1; i < len; i++)

  00097	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0009e	eb 09		 jmp	 SHORT $LN3@gost_xor_k
$LN2@gost_xor_k:
  000a0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a3	83 c2 01	 add	 edx, 1
  000a6	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN3@gost_xor_k:
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ac	3b 45 14	 cmp	 eax, DWORD PTR _len$[ebp]
  000af	0f 8d ab 00 00
	00		 jge	 $LN5@gost_xor_k

; 312  : 	{
; 313  : 		out_ks->X0 ^= in[i];

  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  000b8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000bb	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  000be	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c0	33 0c 90	 xor	 ecx, DWORD PTR [eax+edx*4]
  000c3	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  000c6	89 0a		 mov	 DWORD PTR [edx], ecx

; 314  : 		out_ks->X1 ^= in[i];

  000c8	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000ce	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  000d1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d4	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  000da	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 315  : 		out_ks->X2 ^= in[i];

  000dd	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e3	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  000e6	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  000e9	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  000ec	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  000ef	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 316  : 		out_ks->X3 ^= in[i];

  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000f8	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  000fb	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000fe	33 0c 90	 xor	 ecx, DWORD PTR [eax+edx*4]
  00101	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00104	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 317  : 		out_ks->X4 ^= in[i];

  00107	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010d	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00110	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00113	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00116	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00119	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 318  : 		out_ks->X5 ^= in[i];

  0011c	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0011f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00122	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00125	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00128	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  0012b	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0012e	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 319  : 		out_ks->X6 ^= in[i];

  00131	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00134	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00137	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0013a	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0013d	33 0c 90	 xor	 ecx, DWORD PTR [eax+edx*4]
  00140	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00143	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 320  : 		out_ks->X7 ^= in[i];

  00146	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0014c	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0014f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00152	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00158	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 321  : 	}

  0015b	e9 40 ff ff ff	 jmp	 $LN2@gost_xor_k
$LN5@gost_xor_k:

; 322  : }

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 10 00	 ret	 16			; 00000010H
_gost_xor_ks@16 ENDP
_TEXT	ENDS
END
