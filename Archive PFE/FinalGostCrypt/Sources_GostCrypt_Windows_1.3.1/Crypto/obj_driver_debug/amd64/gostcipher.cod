; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

GostR3411_94_CryptoProParamSet DD 01H
	DD	03H
	DD	0aH
	DD	09H
	DD	05H
	DD	0bH
	DD	04H
	DD	0fH
	DD	08H
	DD	06H
	DD	07H
	DD	0eH
	DD	0dH
	DD	00H
	DD	02H
	DD	0cH
	DD	0dH
	DD	0eH
	DD	04H
	DD	01H
	DD	07H
	DD	00H
	DD	05H
	DD	0aH
	DD	03H
	DD	0cH
	DD	08H
	DD	0fH
	DD	06H
	DD	02H
	DD	09H
	DD	0bH
	DD	07H
	DD	06H
	DD	02H
	DD	04H
	DD	0dH
	DD	09H
	DD	0fH
	DD	00H
	DD	0aH
	DD	01H
	DD	05H
	DD	0bH
	DD	08H
	DD	0eH
	DD	0cH
	DD	03H
	DD	07H
	DD	06H
	DD	04H
	DD	0bH
	DD	09H
	DD	0cH
	DD	02H
	DD	0aH
	DD	01H
	DD	08H
	DD	00H
	DD	0eH
	DD	0fH
	DD	0dH
	DD	03H
	DD	05H
	DD	04H
	DD	0aH
	DD	07H
	DD	0cH
	DD	00H
	DD	0fH
	DD	02H
	DD	08H
	DD	0eH
	DD	01H
	DD	06H
	DD	05H
	DD	0dH
	DD	0bH
	DD	09H
	DD	03H
	DD	07H
	DD	0fH
	DD	0cH
	DD	0eH
	DD	09H
	DD	04H
	DD	01H
	DD	00H
	DD	03H
	DD	0bH
	DD	05H
	DD	02H
	DD	06H
	DD	0aH
	DD	08H
	DD	0dH
	DD	05H
	DD	0fH
	DD	04H
	DD	00H
	DD	02H
	DD	0dH
	DD	0bH
	DD	09H
	DD	01H
	DD	07H
	DD	06H
	DD	03H
	DD	0cH
	DD	0eH
	DD	0aH
	DD	08H
	DD	0aH
	DD	04H
	DD	05H
	DD	06H
	DD	08H
	DD	01H
	DD	03H
	DD	07H
	DD	0dH
	DD	0cH
	DD	0eH
	DD	00H
	DD	09H
	DD	02H
	DD	0bH
	DD	0fH
PUBLIC	gost_xor_ks
;	COMDAT pdata
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\crypto\gostcipher.c
pdata	SEGMENT
$pdata$gost_xor_ks DD imagerel $LN7
	DD	imagerel $LN7+513
	DD	imagerel $unwind$gost_xor_ks
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gost_xor_ks DD 011801H
	DD	02218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gost_xor_ks
_TEXT	SEGMENT
i$ = 0
ks$ = 32
out_ks$ = 40
in$ = 48
len$ = 56
gost_xor_ks PROC					; COMDAT

; 297  : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 298  : 	gst_dword i;
; 299  : 	if (!len)

  00018	83 7c 24 38 00	 cmp	 DWORD PTR len$[rsp], 0
  0001d	75 05		 jne	 SHORT $LN4@gost_xor_k

; 300  : 		return;

  0001f	e9 d8 01 00 00	 jmp	 $LN5@gost_xor_k
$LN4@gost_xor_k:

; 301  : 
; 302  : 	out_ks->X0 = ks->X0 ^ in[0];

  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0002e	8b 00		 mov	 eax, DWORD PTR [rax]
  00030	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00032	33 c8		 xor	 ecx, eax
  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  00039	89 08		 mov	 DWORD PTR [rax], ecx

; 303  : 	out_ks->X1 = ks->X1 ^ in[0];

  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00045	8b 00		 mov	 eax, DWORD PTR [rax]
  00047	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  00051	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 304  : 	out_ks->X2 = ks->X2 ^ in[0];

  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0005e	8b 00		 mov	 eax, DWORD PTR [rax]
  00060	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00063	33 c8		 xor	 ecx, eax
  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  0006a	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 305  : 	out_ks->X3 = ks->X3 ^ in[0];

  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00077	8b 00		 mov	 eax, DWORD PTR [rax]
  00079	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0007c	33 c8		 xor	 ecx, eax
  0007e	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  00083	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 306  : 	out_ks->X4 = ks->X4 ^ in[0];

  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00090	8b 00		 mov	 eax, DWORD PTR [rax]
  00092	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00095	33 c8		 xor	 ecx, eax
  00097	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  0009c	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 307  : 	out_ks->X5 = ks->X5 ^ in[0];

  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  000a9	8b 00		 mov	 eax, DWORD PTR [rax]
  000ab	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  000ae	33 c8		 xor	 ecx, eax
  000b0	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  000b5	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 308  : 	out_ks->X6 = ks->X6 ^ in[0];

  000b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  000c2	8b 00		 mov	 eax, DWORD PTR [rax]
  000c4	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c7	33 c8		 xor	 ecx, eax
  000c9	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  000ce	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 309  : 	out_ks->X7 = ks->X7 ^ in[0];

  000d1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ks$[rsp]
  000d6	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000e0	33 c8		 xor	 ecx, eax
  000e2	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  000e7	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 310  : 
; 311  : 	for (i = 1; i < len; i++)

  000ea	c7 04 24 01 00
	00 00		 mov	 DWORD PTR i$[rsp], 1
  000f1	eb 09		 jmp	 SHORT $LN3@gost_xor_k
$LN2@gost_xor_k:
  000f3	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@gost_xor_k:
  000fc	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00100	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00103	0f 8d f3 00 00
	00		 jge	 $LN1@gost_xor_k

; 312  : 	{
; 313  : 		out_ks->X0 ^= in[i];

  00109	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  0010d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  00112	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00117	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0011a	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0011c	33 c8		 xor	 ecx, eax
  0011e	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  00123	89 08		 mov	 DWORD PTR [rax], ecx

; 314  : 		out_ks->X1 ^= in[i];

  00125	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00129	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00133	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00136	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00139	33 c8		 xor	 ecx, eax
  0013b	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  00140	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 315  : 		out_ks->X2 ^= in[i];

  00143	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  0014c	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00151	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00154	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00157	33 c8		 xor	 ecx, eax
  00159	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  0015e	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 316  : 		out_ks->X3 ^= in[i];

  00161	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00165	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  0016a	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0016f	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00172	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00175	33 c8		 xor	 ecx, eax
  00177	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  0017c	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 317  : 		out_ks->X4 ^= in[i];

  0017f	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00183	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  00188	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0018d	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00190	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00193	33 c8		 xor	 ecx, eax
  00195	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  0019a	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 318  : 		out_ks->X5 ^= in[i];

  0019d	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  001a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  001a6	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  001ab	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  001ae	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  001b1	33 c8		 xor	 ecx, eax
  001b3	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  001b8	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 319  : 		out_ks->X6 ^= in[i];

  001bb	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  001bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  001c4	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  001c9	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  001cc	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  001cf	33 c8		 xor	 ecx, eax
  001d1	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  001d6	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 320  : 		out_ks->X7 ^= in[i];

  001d9	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  001dd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out_ks$[rsp]
  001e2	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  001e7	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  001ea	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  001ed	33 c8		 xor	 ecx, eax
  001ef	48 8b 44 24 28	 mov	 rax, QWORD PTR out_ks$[rsp]
  001f4	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 321  : 	}

  001f7	e9 f7 fe ff ff	 jmp	 $LN2@gost_xor_k
$LN1@gost_xor_k:
$LN5@gost_xor_k:

; 322  : }

  001fc	48 83 c4 18	 add	 rsp, 24
  00200	c3		 ret	 0
gost_xor_ks ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT r
_TEXT	SEGMENT
n1$ = 8
n2$ = 16
X$ = 24
sbox$ = 32
r	PROC						; COMDAT

; 65   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 66   : 	n1 += X;

  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR X$[rsp]
  00016	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  0001a	03 c1		 add	 eax, ecx
  0001c	89 44 24 08	 mov	 DWORD PTR n1$[rsp], eax

; 67   : #ifdef GOST_DYNAMIC_SBOXES
; 68   : 	n1 =  sbox->k8[(n1>>28)&0xF] | sbox->k7[(n1>>24)&0xF]
; 69   : 				| sbox->k6[(n1>>20)&0xF] | sbox->k5[(n1>>16)&0xF]
; 70   : 				| sbox->k4[(n1>>12)&0xF] | sbox->k3[(n1>>8)&0xF]
; 71   : 				| sbox->k2[(n1>>4)&0xF] | sbox->k1[n1&0xF];

  00020	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  00024	c1 e8 1c	 shr	 eax, 28
  00027	83 e0 0f	 and	 eax, 15
  0002a	44 8b c0	 mov	 r8d, eax
  0002d	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  00031	c1 e8 18	 shr	 eax, 24
  00034	83 e0 0f	 and	 eax, 15
  00037	8b d0		 mov	 edx, eax
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sbox$[rsp]
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR sbox$[rsp]
  00043	8b 44 90 40	 mov	 eax, DWORD PTR [rax+rdx*4+64]
  00047	46 8b 04 81	 mov	 r8d, DWORD PTR [rcx+r8*4]
  0004b	44 0b c0	 or	 r8d, eax
  0004e	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  00052	c1 e8 14	 shr	 eax, 20
  00055	83 e0 0f	 and	 eax, 15
  00058	8b c8		 mov	 ecx, eax
  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR sbox$[rsp]
  0005f	44 0b 84 88 80
	00 00 00	 or	 r8d, DWORD PTR [rax+rcx*4+128]
  00067	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  0006b	c1 e8 10	 shr	 eax, 16
  0006e	83 e0 0f	 and	 eax, 15
  00071	8b c8		 mov	 ecx, eax
  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR sbox$[rsp]
  00078	44 0b 84 88 c0
	00 00 00	 or	 r8d, DWORD PTR [rax+rcx*4+192]
  00080	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  00084	c1 e8 0c	 shr	 eax, 12
  00087	83 e0 0f	 and	 eax, 15
  0008a	8b c8		 mov	 ecx, eax
  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR sbox$[rsp]
  00091	44 0b 84 88 00
	01 00 00	 or	 r8d, DWORD PTR [rax+rcx*4+256]
  00099	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  0009d	c1 e8 08	 shr	 eax, 8
  000a0	83 e0 0f	 and	 eax, 15
  000a3	8b c8		 mov	 ecx, eax
  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR sbox$[rsp]
  000aa	44 0b 84 88 40
	01 00 00	 or	 r8d, DWORD PTR [rax+rcx*4+320]
  000b2	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  000b6	c1 e8 04	 shr	 eax, 4
  000b9	83 e0 0f	 and	 eax, 15
  000bc	8b c8		 mov	 ecx, eax
  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR sbox$[rsp]
  000c3	44 0b 84 88 80
	01 00 00	 or	 r8d, DWORD PTR [rax+rcx*4+384]
  000cb	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  000cf	83 e0 0f	 and	 eax, 15
  000d2	8b d0		 mov	 edx, eax
  000d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sbox$[rsp]
  000d9	41 8b c0	 mov	 eax, r8d
  000dc	0b 84 91 c0 01
	00 00		 or	 eax, DWORD PTR [rcx+rdx*4+448]
  000e3	89 44 24 08	 mov	 DWORD PTR n1$[rsp], eax

; 72   : #else
; 73   : 	n1 =  (gst_udword)sbox->k8[(n1>>28)&0xF]<<28 | (gst_udword)sbox->k7[(n1>>24)&0xF]<<24
; 74   : 				| (gst_udword)sbox->k6[(n1>>20)&0xF]<<20 | (gst_udword)sbox->k5[(n1>>16)&0xF]<<16
; 75   : 				| (gst_udword)sbox->k4[(n1>>12)&0xF]<<12 | (gst_udword)sbox->k3[(n1>>8)&0xF]<<8
; 76   : 				| (gst_udword)sbox->k2[(n1>>4)&0xF]<<4 | (gst_udword)sbox->k1[n1&0xF];
; 77   : #endif
; 78   : 	n1 = rotl32(n1, 11);

  000e7	8b 44 24 08	 mov	 eax, DWORD PTR n1$[rsp]
  000eb	c1 e0 0b	 shl	 eax, 11
  000ee	8b 4c 24 08	 mov	 ecx, DWORD PTR n1$[rsp]
  000f2	c1 e9 15	 shr	 ecx, 21
  000f5	0b c1		 or	 eax, ecx
  000f7	89 44 24 08	 mov	 DWORD PTR n1$[rsp], eax

; 79   : 	n2 ^= n1;

  000fb	8b 4c 24 08	 mov	 ecx, DWORD PTR n1$[rsp]
  000ff	8b 44 24 10	 mov	 eax, DWORD PTR n2$[rsp]
  00103	33 c1		 xor	 eax, ecx
  00105	89 44 24 10	 mov	 DWORD PTR n2$[rsp], eax

; 80   : 	return n2;

  00109	8b 44 24 10	 mov	 eax, DWORD PTR n2$[rsp]

; 81   : }

  0010d	c3		 ret	 0
r	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xor_s_box DD imagerel xor_s_box
	DD	imagerel xor_s_box+514
	DD	imagerel $unwind$xor_s_box
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xor_s_box DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT xor_s_box
_TEXT	SEGMENT
i$ = 0
s_box$ = 32
seed$ = 40
xor_s_box PROC						; COMDAT

; 37   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 38   :    int i;
; 39   :    for (i = 0; i < 16; i++)

  0000e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00015	eb 09		 jmp	 SHORT $LN3@xor_s_box
$LN2@xor_s_box:
  00017	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0001a	83 c0 01	 add	 eax, 1
  0001d	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@xor_s_box:
  00020	83 3c 24 10	 cmp	 DWORD PTR i$[rsp], 16
  00024	0f 8d d3 01 00
	00		 jge	 $LN1@xor_s_box

; 40   :    {
; 41   :       s_box->k1[i] ^= (seed[ (i * 4) + 0 ]   ) & 0xF;

  0002a	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  0002e	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00031	c1 e0 02	 shl	 eax, 2
  00034	48 63 c8	 movsxd	 rcx, eax
  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  0003c	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00040	83 e1 0f	 and	 ecx, 15
  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00048	8b 94 90 c0 01
	00 00		 mov	 edx, DWORD PTR [rax+rdx*4+448]
  0004f	33 d1		 xor	 edx, ecx
  00051	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  0005a	89 94 88 c0 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+448], edx

; 42   :       s_box->k2[i] ^= (seed[ (i * 4) + 0 ]>>4) & 0xF;

  00061	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00065	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00068	c1 e0 02	 shl	 eax, 2
  0006b	48 63 c8	 movsxd	 rcx, eax
  0006e	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  00073	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00077	c1 f9 04	 sar	 ecx, 4
  0007a	83 e1 0f	 and	 ecx, 15
  0007d	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00082	8b 94 90 80 01
	00 00		 mov	 edx, DWORD PTR [rax+rdx*4+384]
  00089	33 d1		 xor	 edx, ecx
  0008b	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  0008f	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00094	89 94 88 80 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+384], edx

; 43   :       s_box->k3[i] ^= (seed[ (i * 4) + 1 ]   ) & 0xF;

  0009b	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  0009f	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000a2	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  000a9	48 63 c8	 movsxd	 rcx, eax
  000ac	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  000b1	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  000b5	83 e1 0f	 and	 ecx, 15
  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  000bd	8b 94 90 40 01
	00 00		 mov	 edx, DWORD PTR [rax+rdx*4+320]
  000c4	33 d1		 xor	 edx, ecx
  000c6	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  000ca	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  000cf	89 94 88 40 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+320], edx

; 44   :       s_box->k4[i] ^= (seed[ (i * 4) + 1 ]>>4) & 0xF;

  000d6	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  000da	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000dd	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  000e4	48 63 c8	 movsxd	 rcx, eax
  000e7	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  000ec	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  000f0	c1 f9 04	 sar	 ecx, 4
  000f3	83 e1 0f	 and	 ecx, 15
  000f6	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  000fb	8b 94 90 00 01
	00 00		 mov	 edx, DWORD PTR [rax+rdx*4+256]
  00102	33 d1		 xor	 edx, ecx
  00104	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00108	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  0010d	89 94 88 00 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+256], edx

; 45   :       s_box->k5[i] ^= (seed[ (i * 4) + 2 ]   ) & 0xF;

  00114	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00118	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0011b	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  00122	48 63 c8	 movsxd	 rcx, eax
  00125	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  0012a	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  0012e	83 e1 0f	 and	 ecx, 15
  00131	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00136	8b 94 90 c0 00
	00 00		 mov	 edx, DWORD PTR [rax+rdx*4+192]
  0013d	33 d1		 xor	 edx, ecx
  0013f	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00143	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00148	89 94 88 c0 00
	00 00		 mov	 DWORD PTR [rax+rcx*4+192], edx

; 46   :       s_box->k6[i] ^= (seed[ (i * 4) + 2 ]>>4) & 0xF;

  0014f	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00153	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00156	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  0015d	48 63 c8	 movsxd	 rcx, eax
  00160	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  00165	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00169	c1 f9 04	 sar	 ecx, 4
  0016c	83 e1 0f	 and	 ecx, 15
  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00174	8b 94 90 80 00
	00 00		 mov	 edx, DWORD PTR [rax+rdx*4+128]
  0017b	33 d1		 xor	 edx, ecx
  0017d	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00181	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  00186	89 94 88 80 00
	00 00		 mov	 DWORD PTR [rax+rcx*4+128], edx

; 47   :       s_box->k7[i] ^= (seed[ (i * 4) + 3 ]   ) & 0xF;

  0018d	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  00191	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00194	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  0019b	48 63 c8	 movsxd	 rcx, eax
  0019e	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  001a3	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  001a7	83 e1 0f	 and	 ecx, 15
  001aa	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  001af	8b 54 90 40	 mov	 edx, DWORD PTR [rax+rdx*4+64]
  001b3	33 d1		 xor	 edx, ecx
  001b5	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  001b9	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  001be	89 54 88 40	 mov	 DWORD PTR [rax+rcx*4+64], edx

; 48   :       s_box->k8[i] ^= (seed[ (i * 4) + 3 ]>>4) & 0xF;

  001c2	48 63 14 24	 movsxd	 rdx, DWORD PTR i$[rsp]
  001c6	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  001c9	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  001d0	48 63 c8	 movsxd	 rcx, eax
  001d3	48 8b 44 24 28	 mov	 rax, QWORD PTR seed$[rsp]
  001d8	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  001dc	c1 f9 04	 sar	 ecx, 4
  001df	83 e1 0f	 and	 ecx, 15
  001e2	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  001e7	8b 14 90	 mov	 edx, DWORD PTR [rax+rdx*4]
  001ea	33 d1		 xor	 edx, ecx
  001ec	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  001f0	48 8b 44 24 20	 mov	 rax, QWORD PTR s_box$[rsp]
  001f5	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx

; 49   :    }

  001f8	e9 1a fe ff ff	 jmp	 $LN2@xor_s_box
$LN1@xor_s_box:

; 50   : }

  001fd	48 83 c4 18	 add	 rsp, 24
  00201	c3		 ret	 0
xor_s_box ENDP
PUBLIC	gost_decrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$gost_decrypt DD imagerel $LN3
	DD	imagerel $LN3+1316
	DD	imagerel $unwind$gost_decrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gost_decrypt DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gost_decrypt
_TEXT	SEGMENT
n1$ = 32
sbox$ = 40
n2$ = 48
in$ = 80
out$ = 88
ks$ = 96
gost_decrypt PROC					; COMDAT

; 161  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 162  : 	gst_udword n1, n2;
; 163  : 	gost_s_box *sbox;
; 164  : 	n1 = 0;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n1$[rsp], 0

; 165  : 	n2 = 0;

  0001b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR n2$[rsp], 0

; 166  : 
; 167  : 	n1 = (gst_udword)in[3] << 24 | (gst_udword)in[2] << 16 | (gst_udword)in[1] << 8 | (gst_udword)in[0];

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00028	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  0002c	c1 e2 18	 shl	 edx, 24
  0002f	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00034	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00038	c1 e0 10	 shl	 eax, 16
  0003b	0b d0		 or	 edx, eax
  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00042	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00046	c1 e0 08	 shl	 eax, 8
  00049	0b d0		 or	 edx, eax
  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00050	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00053	8b c2		 mov	 eax, edx
  00055	0b c1		 or	 eax, ecx
  00057	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 168  : 	n2 = (gst_udword)in[7] << 24 | (gst_udword)in[6] << 16 | (gst_udword)in[5] << 8 | (gst_udword)in[4];

  0005b	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00060	0f b6 50 07	 movzx	 edx, BYTE PTR [rax+7]
  00064	c1 e2 18	 shl	 edx, 24
  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  0006c	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  00070	c1 e0 10	 shl	 eax, 16
  00073	0b d0		 or	 edx, eax
  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  0007a	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  0007e	c1 e0 08	 shl	 eax, 8
  00081	0b d0		 or	 edx, eax
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00088	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0008c	8b c2		 mov	 eax, edx
  0008e	0b c1		 or	 eax, ecx
  00090	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 169  : #ifdef GOST_DYNAMIC_SBOXES
; 170  : 	sbox = &ks->sbox;

  00094	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00099	48 83 c0 20	 add	 rax, 32			; 00000020H
  0009d	48 89 44 24 28	 mov	 QWORD PTR sbox$[rsp], rax

; 171  : #else
; 172  : 	sbox = ks->sbox;
; 173  : #endif
; 174  : 
; 175  : 	//Rounds 1-8
; 176  : 	n2 = r(n1, n2, ks->X0, sbox);

  000a2	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  000a7	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  000ac	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000af	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  000b3	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  000b7	e8 00 00 00 00	 call	 r
  000bc	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 177  : 	n1 = r(n2, n1, ks->X1, sbox);

  000c0	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  000c5	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  000ca	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  000ce	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  000d2	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  000d6	e8 00 00 00 00	 call	 r
  000db	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 178  : 	n2 = r(n1, n2, ks->X2, sbox);

  000df	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  000e4	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  000e9	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  000ed	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  000f1	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  000f5	e8 00 00 00 00	 call	 r
  000fa	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 179  : 	n1 = r(n2, n1, ks->X3, sbox);

  000fe	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00103	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00108	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  0010c	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00110	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00114	e8 00 00 00 00	 call	 r
  00119	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 180  : 	n2 = r(n1, n2, ks->X4, sbox);

  0011d	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00122	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00127	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  0012b	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0012f	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00133	e8 00 00 00 00	 call	 r
  00138	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 181  : 	n1 = r(n2, n1, ks->X5, sbox);

  0013c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00141	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00146	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  0014a	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0014e	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00152	e8 00 00 00 00	 call	 r
  00157	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 182  : 	n2 = r(n1, n2, ks->X6, sbox);

  0015b	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00160	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00165	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  00169	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0016d	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00171	e8 00 00 00 00	 call	 r
  00176	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 183  : 	n1 = r(n2, n1, ks->X7, sbox);

  0017a	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0017f	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00184	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  00188	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0018c	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00190	e8 00 00 00 00	 call	 r
  00195	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 184  : 
; 185  : 	//Rounds 9-32
; 186  : 	n2 = r(n1, n2, ks->X7, sbox);

  00199	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0019e	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001a3	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  001a7	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  001ab	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  001af	e8 00 00 00 00	 call	 r
  001b4	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 187  : 	n1 = r(n2, n1, ks->X6, sbox);

  001b8	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  001bd	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001c2	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  001c6	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  001ca	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  001ce	e8 00 00 00 00	 call	 r
  001d3	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 188  : 	n2 = r(n1, n2, ks->X5, sbox);

  001d7	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  001dc	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001e1	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  001e5	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  001e9	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  001ed	e8 00 00 00 00	 call	 r
  001f2	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 189  : 	n1 = r(n2, n1, ks->X4, sbox);

  001f6	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  001fb	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00200	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  00204	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00208	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  0020c	e8 00 00 00 00	 call	 r
  00211	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 190  : 	n2 = r(n1, n2, ks->X3, sbox);

  00215	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0021a	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0021f	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00223	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00227	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0022b	e8 00 00 00 00	 call	 r
  00230	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 191  : 	n1 = r(n2, n1, ks->X2, sbox);

  00234	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00239	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0023e	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00242	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00246	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  0024a	e8 00 00 00 00	 call	 r
  0024f	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 192  : 	n2 = r(n1, n2, ks->X1, sbox);

  00253	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00258	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0025d	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  00261	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00265	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00269	e8 00 00 00 00	 call	 r
  0026e	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 193  : 	n1 = r(n2, n1, ks->X0, sbox);

  00272	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00277	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0027c	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  0027f	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00283	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00287	e8 00 00 00 00	 call	 r
  0028c	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 194  : 
; 195  : 	n2 = r(n1, n2, ks->X7, sbox);

  00290	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00295	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0029a	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  0029e	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  002a2	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  002a6	e8 00 00 00 00	 call	 r
  002ab	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 196  : 	n1 = r(n2, n1, ks->X6, sbox);

  002af	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  002b4	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  002b9	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  002bd	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  002c1	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  002c5	e8 00 00 00 00	 call	 r
  002ca	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 197  : 	n2 = r(n1, n2, ks->X5, sbox);

  002ce	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  002d3	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  002d8	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  002dc	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  002e0	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  002e4	e8 00 00 00 00	 call	 r
  002e9	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 198  : 	n1 = r(n2, n1, ks->X4, sbox);

  002ed	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  002f2	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  002f7	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  002fb	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  002ff	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00303	e8 00 00 00 00	 call	 r
  00308	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 199  : 	n2 = r(n1, n2, ks->X3, sbox);

  0030c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00311	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00316	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  0031a	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0031e	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00322	e8 00 00 00 00	 call	 r
  00327	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 200  : 	n1 = r(n2, n1, ks->X2, sbox);

  0032b	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00330	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00335	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00339	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0033d	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00341	e8 00 00 00 00	 call	 r
  00346	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 201  : 	n2 = r(n1, n2, ks->X1, sbox);

  0034a	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0034f	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00354	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  00358	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0035c	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00360	e8 00 00 00 00	 call	 r
  00365	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 202  : 	n1 = r(n2, n1, ks->X0, sbox);

  00369	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0036e	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00373	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00376	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0037a	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  0037e	e8 00 00 00 00	 call	 r
  00383	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 203  : 
; 204  : 	n2 = r(n1, n2, ks->X7, sbox);

  00387	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0038c	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00391	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  00395	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00399	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0039d	e8 00 00 00 00	 call	 r
  003a2	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 205  : 	n1 = r(n2, n1, ks->X6, sbox);

  003a6	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  003ab	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  003b0	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  003b4	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  003b8	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  003bc	e8 00 00 00 00	 call	 r
  003c1	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 206  : 	n2 = r(n1, n2, ks->X5, sbox);

  003c5	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  003ca	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  003cf	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  003d3	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  003d7	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  003db	e8 00 00 00 00	 call	 r
  003e0	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 207  : 	n1 = r(n2, n1, ks->X4, sbox);

  003e4	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  003e9	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  003ee	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  003f2	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  003f6	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  003fa	e8 00 00 00 00	 call	 r
  003ff	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 208  : 	n2 = r(n1, n2, ks->X3, sbox);

  00403	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00408	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0040d	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00411	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00415	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00419	e8 00 00 00 00	 call	 r
  0041e	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 209  : 	n1 = r(n2, n1, ks->X2, sbox);

  00422	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00427	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0042c	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00430	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00434	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00438	e8 00 00 00 00	 call	 r
  0043d	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 210  : 	n2 = r(n1, n2, ks->X1, sbox);

  00441	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00446	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0044b	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  0044f	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00453	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00457	e8 00 00 00 00	 call	 r
  0045c	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 211  : 	n1 = r(n2, n1, ks->X0, sbox);

  00460	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00465	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0046a	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  0046d	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00471	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00475	e8 00 00 00 00	 call	 r
  0047a	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 212  : 	
; 213  : 	out[0] = (byte)(n2 & 0xFF); out[1] = (byte)((n2 >> 8) & 0xFF); out[2] = (byte)((n2 >> 16) & 0xFF); out[3] = (byte)((n2 >> 24) & 0xFF);

  0047e	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00482	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00488	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  0048d	88 08		 mov	 BYTE PTR [rax], cl
  0048f	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00493	c1 e9 08	 shr	 ecx, 8
  00496	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0049c	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004a1	88 48 01	 mov	 BYTE PTR [rax+1], cl
  004a4	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  004a8	c1 e9 10	 shr	 ecx, 16
  004ab	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004b1	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004b6	88 48 02	 mov	 BYTE PTR [rax+2], cl
  004b9	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  004bd	c1 e9 18	 shr	 ecx, 24
  004c0	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004c6	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004cb	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 214  : 	out[4] = (byte)(n1 & 0xFF); out[5] = (byte)((n1 >> 8) & 0xFF); out[6] = (byte)((n1 >> 16) & 0xFF); out[7] = (byte)((n1 >> 24) & 0xFF);

  004ce	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  004d2	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004d8	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004dd	88 48 04	 mov	 BYTE PTR [rax+4], cl
  004e0	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  004e4	c1 e9 08	 shr	 ecx, 8
  004e7	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004ed	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004f2	88 48 05	 mov	 BYTE PTR [rax+5], cl
  004f5	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  004f9	c1 e9 10	 shr	 ecx, 16
  004fc	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00502	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  00507	88 48 06	 mov	 BYTE PTR [rax+6], cl
  0050a	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0050e	c1 e9 18	 shr	 ecx, 24
  00511	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00517	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  0051c	88 48 07	 mov	 BYTE PTR [rax+7], cl

; 215  : }

  0051f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00523	c3		 ret	 0
gost_decrypt ENDP
_TEXT	ENDS
PUBLIC	gost_encrypt
;	COMDAT pdata
pdata	SEGMENT
$pdata$gost_encrypt DD imagerel $LN3
	DD	imagerel $LN3+1316
	DD	imagerel $unwind$gost_encrypt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gost_encrypt DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gost_encrypt
_TEXT	SEGMENT
n1$ = 32
sbox$ = 40
n2$ = 48
in$ = 80
out$ = 88
ks$ = 96
gost_encrypt PROC					; COMDAT

; 94   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 95   : 	gst_udword n1, n2;
; 96   : 	gost_s_box *sbox;
; 97   : 	n1 = 0;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n1$[rsp], 0

; 98   : 	n2 = 0;

  0001b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR n2$[rsp], 0

; 99   : 
; 100  : 	n1 = (gst_udword)in[3] << 24 | (gst_udword)in[2] << 16 | (gst_udword)in[1] << 8 | (gst_udword)in[0];

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00028	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  0002c	c1 e2 18	 shl	 edx, 24
  0002f	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00034	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00038	c1 e0 10	 shl	 eax, 16
  0003b	0b d0		 or	 edx, eax
  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00042	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00046	c1 e0 08	 shl	 eax, 8
  00049	0b d0		 or	 edx, eax
  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00050	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00053	8b c2		 mov	 eax, edx
  00055	0b c1		 or	 eax, ecx
  00057	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 101  : 	n2 = (gst_udword)in[7] << 24 | (gst_udword)in[6] << 16 | (gst_udword)in[5] << 8 | (gst_udword)in[4];

  0005b	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00060	0f b6 50 07	 movzx	 edx, BYTE PTR [rax+7]
  00064	c1 e2 18	 shl	 edx, 24
  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  0006c	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  00070	c1 e0 10	 shl	 eax, 16
  00073	0b d0		 or	 edx, eax
  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  0007a	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  0007e	c1 e0 08	 shl	 eax, 8
  00081	0b d0		 or	 edx, eax
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR in$[rsp]
  00088	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0008c	8b c2		 mov	 eax, edx
  0008e	0b c1		 or	 eax, ecx
  00090	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 102  : #ifdef GOST_DYNAMIC_SBOXES
; 103  : 	sbox = &ks->sbox;

  00094	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00099	48 83 c0 20	 add	 rax, 32			; 00000020H
  0009d	48 89 44 24 28	 mov	 QWORD PTR sbox$[rsp], rax

; 104  : #else
; 105  : 	sbox = ks->sbox;
; 106  : #endif
; 107  : 
; 108  : 	//Rounds 1-24
; 109  : 	n2 = r(n1, n2, ks->X0, sbox);

  000a2	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  000a7	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  000ac	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000af	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  000b3	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  000b7	e8 00 00 00 00	 call	 r
  000bc	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 110  : 	n1 = r(n2, n1, ks->X1, sbox);

  000c0	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  000c5	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  000ca	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  000ce	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  000d2	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  000d6	e8 00 00 00 00	 call	 r
  000db	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 111  : 	n2 = r(n1, n2, ks->X2, sbox);

  000df	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  000e4	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  000e9	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  000ed	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  000f1	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  000f5	e8 00 00 00 00	 call	 r
  000fa	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 112  : 	n1 = r(n2, n1, ks->X3, sbox);

  000fe	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00103	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00108	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  0010c	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00110	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00114	e8 00 00 00 00	 call	 r
  00119	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 113  : 	n2 = r(n1, n2, ks->X4, sbox);

  0011d	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00122	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00127	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  0012b	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0012f	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00133	e8 00 00 00 00	 call	 r
  00138	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 114  : 	n1 = r(n2, n1, ks->X5, sbox);

  0013c	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00141	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00146	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  0014a	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0014e	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00152	e8 00 00 00 00	 call	 r
  00157	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 115  : 	n2 = r(n1, n2, ks->X6, sbox);

  0015b	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00160	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00165	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  00169	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0016d	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00171	e8 00 00 00 00	 call	 r
  00176	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 116  : 	n1 = r(n2, n1, ks->X7, sbox);

  0017a	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0017f	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00184	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  00188	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0018c	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00190	e8 00 00 00 00	 call	 r
  00195	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 117  : 
; 118  : 	n2 = r(n1, n2, ks->X0, sbox);

  00199	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0019e	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001a3	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  001a6	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  001aa	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  001ae	e8 00 00 00 00	 call	 r
  001b3	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 119  : 	n1 = r(n2, n1, ks->X1, sbox);

  001b7	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  001bc	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001c1	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  001c5	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  001c9	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  001cd	e8 00 00 00 00	 call	 r
  001d2	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 120  : 	n2 = r(n1, n2, ks->X2, sbox);

  001d6	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  001db	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001e0	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  001e4	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  001e8	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  001ec	e8 00 00 00 00	 call	 r
  001f1	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 121  : 	n1 = r(n2, n1, ks->X3, sbox);

  001f5	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  001fa	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  001ff	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00203	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00207	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  0020b	e8 00 00 00 00	 call	 r
  00210	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 122  : 	n2 = r(n1, n2, ks->X4, sbox);

  00214	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00219	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0021e	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  00222	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00226	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0022a	e8 00 00 00 00	 call	 r
  0022f	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 123  : 	n1 = r(n2, n1, ks->X5, sbox);

  00233	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00238	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0023d	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00241	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00245	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00249	e8 00 00 00 00	 call	 r
  0024e	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 124  : 	n2 = r(n1, n2, ks->X6, sbox);

  00252	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00257	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0025c	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  00260	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00264	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00268	e8 00 00 00 00	 call	 r
  0026d	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 125  : 	n1 = r(n2, n1, ks->X7, sbox);

  00271	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00276	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0027b	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  0027f	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00283	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00287	e8 00 00 00 00	 call	 r
  0028c	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 126  : 
; 127  : 	n2 = r(n1, n2, ks->X0, sbox);

  00290	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00295	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0029a	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  0029d	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  002a1	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  002a5	e8 00 00 00 00	 call	 r
  002aa	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 128  : 	n1 = r(n2, n1, ks->X1, sbox);

  002ae	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  002b3	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  002b8	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  002bc	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  002c0	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  002c4	e8 00 00 00 00	 call	 r
  002c9	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 129  : 	n2 = r(n1, n2, ks->X2, sbox);

  002cd	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  002d2	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  002d7	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  002db	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  002df	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  002e3	e8 00 00 00 00	 call	 r
  002e8	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 130  : 	n1 = r(n2, n1, ks->X3, sbox);

  002ec	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  002f1	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  002f6	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  002fa	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  002fe	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00302	e8 00 00 00 00	 call	 r
  00307	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 131  : 	n2 = r(n1, n2, ks->X4, sbox);

  0030b	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00310	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00315	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  00319	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0031d	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00321	e8 00 00 00 00	 call	 r
  00326	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 132  : 	n1 = r(n2, n1, ks->X5, sbox);

  0032a	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0032f	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00334	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00338	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0033c	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00340	e8 00 00 00 00	 call	 r
  00345	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 133  : 	n2 = r(n1, n2, ks->X6, sbox);

  00349	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0034e	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00353	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  00357	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  0035b	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0035f	e8 00 00 00 00	 call	 r
  00364	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 134  : 	n1 = r(n2, n1, ks->X7, sbox);

  00368	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0036d	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00372	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  00376	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  0037a	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  0037e	e8 00 00 00 00	 call	 r
  00383	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 135  : 
; 136  : 	//Rounds 25-32
; 137  : 	n2 = r(n1, n2, ks->X7, sbox);

  00387	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  0038c	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  00391	44 8b 40 1c	 mov	 r8d, DWORD PTR [rax+28]
  00395	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00399	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0039d	e8 00 00 00 00	 call	 r
  003a2	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 138  : 	n1 = r(n2, n1, ks->X6, sbox);

  003a6	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  003ab	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  003b0	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  003b4	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  003b8	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  003bc	e8 00 00 00 00	 call	 r
  003c1	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 139  : 	n2 = r(n1, n2, ks->X5, sbox);

  003c5	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  003ca	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  003cf	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  003d3	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  003d7	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  003db	e8 00 00 00 00	 call	 r
  003e0	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 140  : 	n1 = r(n2, n1, ks->X4, sbox);

  003e4	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  003e9	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  003ee	44 8b 40 10	 mov	 r8d, DWORD PTR [rax+16]
  003f2	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  003f6	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  003fa	e8 00 00 00 00	 call	 r
  003ff	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 141  : 	n2 = r(n1, n2, ks->X3, sbox);

  00403	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00408	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0040d	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00411	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00415	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00419	e8 00 00 00 00	 call	 r
  0041e	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 142  : 	n1 = r(n2, n1, ks->X2, sbox);

  00422	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00427	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0042c	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00430	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00434	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00438	e8 00 00 00 00	 call	 r
  0043d	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 143  : 	n2 = r(n1, n2, ks->X1, sbox);

  00441	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00446	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0044b	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  0044f	8b 54 24 30	 mov	 edx, DWORD PTR n2$[rsp]
  00453	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  00457	e8 00 00 00 00	 call	 r
  0045c	89 44 24 30	 mov	 DWORD PTR n2$[rsp], eax

; 144  : 	n1 = r(n2, n1, ks->X0, sbox);

  00460	4c 8b 4c 24 28	 mov	 r9, QWORD PTR sbox$[rsp]
  00465	48 8b 44 24 60	 mov	 rax, QWORD PTR ks$[rsp]
  0046a	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  0046d	8b 54 24 20	 mov	 edx, DWORD PTR n1$[rsp]
  00471	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00475	e8 00 00 00 00	 call	 r
  0047a	89 44 24 20	 mov	 DWORD PTR n1$[rsp], eax

; 145  : 
; 146  : 	out[0] = (byte)(n2 & 0xFF); out[1] = (byte)((n2 >> 8) & 0xFF); out[2] = (byte)((n2 >> 16) & 0xFF); out[3] = (byte)((n2 >> 24) & 0xFF);

  0047e	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00482	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00488	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  0048d	88 08		 mov	 BYTE PTR [rax], cl
  0048f	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  00493	c1 e9 08	 shr	 ecx, 8
  00496	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0049c	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004a1	88 48 01	 mov	 BYTE PTR [rax+1], cl
  004a4	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  004a8	c1 e9 10	 shr	 ecx, 16
  004ab	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004b1	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004b6	88 48 02	 mov	 BYTE PTR [rax+2], cl
  004b9	8b 4c 24 30	 mov	 ecx, DWORD PTR n2$[rsp]
  004bd	c1 e9 18	 shr	 ecx, 24
  004c0	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004c6	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004cb	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 147  : 	out[4] = (byte)(n1 & 0xFF); out[5] = (byte)((n1 >> 8) & 0xFF); out[6] = (byte)((n1 >> 16) & 0xFF); out[7] = (byte)((n1 >> 24) & 0xFF);

  004ce	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  004d2	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004d8	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004dd	88 48 04	 mov	 BYTE PTR [rax+4], cl
  004e0	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  004e4	c1 e9 08	 shr	 ecx, 8
  004e7	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  004ed	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  004f2	88 48 05	 mov	 BYTE PTR [rax+5], cl
  004f5	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  004f9	c1 e9 10	 shr	 ecx, 16
  004fc	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00502	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  00507	88 48 06	 mov	 BYTE PTR [rax+6], cl
  0050a	8b 4c 24 20	 mov	 ecx, DWORD PTR n1$[rsp]
  0050e	c1 e9 18	 shr	 ecx, 24
  00511	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00517	48 8b 44 24 58	 mov	 rax, QWORD PTR out$[rsp]
  0051c	88 48 07	 mov	 BYTE PTR [rax+7], cl

; 148  : }

  0051f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00523	c3		 ret	 0
gost_encrypt ENDP
PUBLIC	__$ArrayPad$
PUBLIC	gost_set_key
;	COMDAT pdata
pdata	SEGMENT
$pdata$gost_set_key DD imagerel $LN9
	DD	imagerel $LN9+1086
	DD	imagerel $unwind$gost_set_key
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gost_set_key DD 042519H
	DD	0450113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0210H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gost_set_key
_TEXT	SEGMENT
sbox_seed$ = 48
i$ = 112
sctx$ = 128
__$ArrayPad$ = 528
key$ = 576
ks$ = 584
gost_set_key PROC					; COMDAT

; 227  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 228  :     gst_udword i;
; 229  : 
; 230  : #ifdef GOST_DYNAMIC_SBOXES
; 231  : 	STRIBOG_CTX sctx;
; 232  : 	byte sbox_seed[64];
; 233  : 
; 234  : 	ks->sbox = GostR3411_94_CryptoProParamSet;

  00025	48 8b bc 24 48
	02 00 00	 mov	 rdi, QWORD PTR ks$[rsp]
  0002d	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:GostR3411_94_CryptoProParamSet
  00034	48 83 c7 20	 add	 rdi, 32			; 00000020H
  00038	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0003d	f3 a4		 rep movsb

; 235  : 
; 236  : 	//Generate pseudorandom data based on the key
; 237  : 	STRIBOG_init(&sctx);

  0003f	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR sctx$[rsp]
  00047	e8 00 00 00 00	 call	 STRIBOG_init

; 238  : 	STRIBOG_add(&sctx, key, 32);

  0004c	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00052	48 8b 94 24 40
	02 00 00	 mov	 rdx, QWORD PTR key$[rsp]
  0005a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR sctx$[rsp]
  00062	e8 00 00 00 00	 call	 STRIBOG_add

; 239  : 	STRIBOG_finalize(&sctx, sbox_seed);

  00067	48 8d 54 24 30	 lea	 rdx, QWORD PTR sbox_seed$[rsp]
  0006c	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR sctx$[rsp]
  00074	e8 00 00 00 00	 call	 STRIBOG_finalize

; 240  : 
; 241  : 	xor_s_box(&ks->sbox, sbox_seed);

  00079	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR ks$[rsp]
  00081	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00085	48 8d 54 24 30	 lea	 rdx, QWORD PTR sbox_seed$[rsp]
  0008a	e8 00 00 00 00	 call	 xor_s_box

; 242  : 
; 243  : 	/* In order to avoid 7 bitshift operations on each pass through the S-Box,
; 244  : 	* this step is pre-processed once during the set_key phase. If memory contraints
; 245  : 	* become a problem, this step can be skipped and the sbox struct can change its
; 246  : 	* unsigned int arrays to unsigned char arrays, going from 512 unsigned chars to 128.
; 247  : 	*/
; 248  : 	for (i = 0; i < GOST_SBOX_SIZE; i++)

  0008f	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00097	eb 0b		 jmp	 SHORT $LN6@gost_set_k
$LN5@gost_set_k:
  00099	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN6@gost_set_k:
  000a4	83 7c 24 70 10	 cmp	 DWORD PTR i$[rsp], 16
  000a9	0f 83 18 01 00
	00		 jae	 $LN4@gost_set_k

; 249  : 	{
; 250  : 		ks->sbox.k8[i] <<= 28;

  000af	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  000b3	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  000bb	8b 54 88 20	 mov	 edx, DWORD PTR [rax+rcx*4+32]
  000bf	c1 e2 1c	 shl	 edx, 28
  000c2	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  000c6	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  000ce	89 54 88 20	 mov	 DWORD PTR [rax+rcx*4+32], edx

; 251  : 		ks->sbox.k7[i] <<= 24;

  000d2	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  000d6	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  000de	8b 54 88 60	 mov	 edx, DWORD PTR [rax+rcx*4+96]
  000e2	c1 e2 18	 shl	 edx, 24
  000e5	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  000e9	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  000f1	89 54 88 60	 mov	 DWORD PTR [rax+rcx*4+96], edx

; 252  : 		ks->sbox.k6[i] <<= 20;

  000f5	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  000f9	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00101	8b 94 88 a0 00
	00 00		 mov	 edx, DWORD PTR [rax+rcx*4+160]
  00108	c1 e2 14	 shl	 edx, 20
  0010b	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  0010f	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00117	89 94 88 a0 00
	00 00		 mov	 DWORD PTR [rax+rcx*4+160], edx

; 253  : 		ks->sbox.k5[i] <<= 16;

  0011e	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  00122	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0012a	8b 94 88 e0 00
	00 00		 mov	 edx, DWORD PTR [rax+rcx*4+224]
  00131	c1 e2 10	 shl	 edx, 16
  00134	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  00138	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00140	89 94 88 e0 00
	00 00		 mov	 DWORD PTR [rax+rcx*4+224], edx

; 254  : 		ks->sbox.k4[i] <<= 12;

  00147	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  0014b	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00153	8b 94 88 20 01
	00 00		 mov	 edx, DWORD PTR [rax+rcx*4+288]
  0015a	c1 e2 0c	 shl	 edx, 12
  0015d	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  00161	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00169	89 94 88 20 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+288], edx

; 255  : 		ks->sbox.k3[i] <<= 8;

  00170	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  00174	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0017c	8b 94 88 60 01
	00 00		 mov	 edx, DWORD PTR [rax+rcx*4+352]
  00183	c1 e2 08	 shl	 edx, 8
  00186	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  0018a	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00192	89 94 88 60 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+352], edx

; 256  : 		ks->sbox.k2[i] <<= 4;

  00199	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  0019d	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001a5	8b 94 88 a0 01
	00 00		 mov	 edx, DWORD PTR [rax+rcx*4+416]
  001ac	c1 e2 04	 shl	 edx, 4
  001af	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  001b3	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001bb	89 94 88 a0 01
	00 00		 mov	 DWORD PTR [rax+rcx*4+416], edx

; 257  : 	}

  001c2	e9 d2 fe ff ff	 jmp	 $LN5@gost_set_k
$LN4@gost_set_k:

; 258  : #else
; 259  : 	ks->sbox = &GostR3411_94_CryptoProParamSet;
; 260  : #endif
; 261  : 
; 262  : 	ks->X0 = 0;

  001c7	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001cf	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 263  : 	ks->X1 = 0;

  001d5	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001dd	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0

; 264  : 	ks->X2 = 0;

  001e4	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001ec	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 265  : 	ks->X3 = 0;

  001f3	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  001fb	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 266  : 	ks->X4 = 0;

  00202	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0020a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 267  : 	ks->X5 = 0;

  00211	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00219	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 268  : 	ks->X6 = 0;

  00220	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00228	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 269  : 	ks->X7 = 0;

  0022f	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00237	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [rax+28], 0

; 270  : 
; 271  : 	//Set the key
; 272  : 	for (i = 0; i < GOST_KEYSIZE / 8; i++)

  0023e	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00246	eb 0b		 jmp	 SHORT $LN3@gost_set_k
$LN2@gost_set_k:
  00248	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0024c	83 c0 01	 add	 eax, 1
  0024f	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN3@gost_set_k:
  00253	83 7c 24 70 04	 cmp	 DWORD PTR i$[rsp], 4
  00258	0f 83 c6 01 00
	00		 jae	 $LN1@gost_set_k

; 273  : 	{
; 274  : 		ks->X0 |= (gst_udword)key[i + 0] << (i * 8);

  0025e	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  00262	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  0026a	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  0026e	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00272	c1 e0 03	 shl	 eax, 3
  00275	0f b6 c8	 movzx	 ecx, al
  00278	d3 e2		 shl	 edx, cl
  0027a	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00282	8b 08		 mov	 ecx, DWORD PTR [rax]
  00284	0b ca		 or	 ecx, edx
  00286	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0028e	89 08		 mov	 DWORD PTR [rax], ecx

; 275  : 		ks->X1 |= (gst_udword)key[i + 4] << (i * 8);

  00290	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00294	83 c0 04	 add	 eax, 4
  00297	8b c8		 mov	 ecx, eax
  00299	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  002a1	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  002a5	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  002a9	c1 e0 03	 shl	 eax, 3
  002ac	0f b6 c8	 movzx	 ecx, al
  002af	d3 e2		 shl	 edx, cl
  002b1	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  002b9	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  002bc	0b ca		 or	 ecx, edx
  002be	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  002c6	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 276  : 		ks->X2 |= (gst_udword)key[i + 8] << (i * 8);

  002c9	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  002cd	83 c0 08	 add	 eax, 8
  002d0	8b c8		 mov	 ecx, eax
  002d2	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  002da	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  002de	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  002e2	c1 e0 03	 shl	 eax, 3
  002e5	0f b6 c8	 movzx	 ecx, al
  002e8	d3 e2		 shl	 edx, cl
  002ea	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  002f2	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  002f5	0b ca		 or	 ecx, edx
  002f7	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  002ff	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 277  : 		ks->X3 |= (gst_udword)key[i + 12] << (i * 8);

  00302	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00306	83 c0 0c	 add	 eax, 12
  00309	8b c8		 mov	 ecx, eax
  0030b	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  00313	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00317	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0031b	c1 e0 03	 shl	 eax, 3
  0031e	0f b6 c8	 movzx	 ecx, al
  00321	d3 e2		 shl	 edx, cl
  00323	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0032b	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  0032e	0b ca		 or	 ecx, edx
  00330	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00338	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 278  : 		ks->X4 |= (gst_udword)key[i + 16] << (i * 8);

  0033b	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0033f	83 c0 10	 add	 eax, 16
  00342	8b c8		 mov	 ecx, eax
  00344	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  0034c	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00350	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00354	c1 e0 03	 shl	 eax, 3
  00357	0f b6 c8	 movzx	 ecx, al
  0035a	d3 e2		 shl	 edx, cl
  0035c	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00364	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00367	0b ca		 or	 ecx, edx
  00369	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  00371	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 279  : 		ks->X5 |= (gst_udword)key[i + 20] << (i * 8);

  00374	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00378	83 c0 14	 add	 eax, 20
  0037b	8b c8		 mov	 ecx, eax
  0037d	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  00385	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  00389	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0038d	c1 e0 03	 shl	 eax, 3
  00390	0f b6 c8	 movzx	 ecx, al
  00393	d3 e2		 shl	 edx, cl
  00395	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0039d	8b 48 14	 mov	 ecx, DWORD PTR [rax+20]
  003a0	0b ca		 or	 ecx, edx
  003a2	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  003aa	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 280  : 		ks->X6 |= (gst_udword)key[i + 24] << (i * 8);

  003ad	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  003b1	83 c0 18	 add	 eax, 24
  003b4	8b c8		 mov	 ecx, eax
  003b6	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  003be	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  003c2	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  003c6	c1 e0 03	 shl	 eax, 3
  003c9	0f b6 c8	 movzx	 ecx, al
  003cc	d3 e2		 shl	 edx, cl
  003ce	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  003d6	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  003d9	0b ca		 or	 ecx, edx
  003db	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  003e3	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 281  : 		ks->X7 |= (gst_udword)key[i + 28] << (i * 8);

  003e6	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  003ea	83 c0 1c	 add	 eax, 28
  003ed	8b c8		 mov	 ecx, eax
  003ef	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR key$[rsp]
  003f7	0f b6 14 08	 movzx	 edx, BYTE PTR [rax+rcx]
  003fb	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  003ff	c1 e0 03	 shl	 eax, 3
  00402	0f b6 c8	 movzx	 ecx, al
  00405	d3 e2		 shl	 edx, cl
  00407	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0040f	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  00412	0b ca		 or	 ecx, edx
  00414	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR ks$[rsp]
  0041c	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 282  : 	}

  0041f	e9 24 fe ff ff	 jmp	 $LN2@gost_set_k
$LN1@gost_set_k:

; 283  : }

  00424	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0042c	48 33 cc	 xor	 rcx, rsp
  0042f	e8 00 00 00 00	 call	 __security_check_cookie
  00434	48 81 c4 28 02
	00 00		 add	 rsp, 552		; 00000228H
  0043b	5f		 pop	 rdi
  0043c	5e		 pop	 rsi
  0043d	c3		 ret	 0
gost_set_key ENDP
END
