; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\tests.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@ ; `string'
PUBLIC	??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@ ; `string'
PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	_XTS_vectors
PUBLIC	_hmac_whirlpool_test_key
PUBLIC	_hmac_whirlpool_test_data
PUBLIC	_hmac_whirlpool_test_vectors
PUBLIC	_hmac_gosthash_test_key
PUBLIC	_hmac_gosthash_test_data
PUBLIC	_hmac_gosthash_test_vectors
PUBLIC	_hmac_stribog_test_key
PUBLIC	_hmac_stribog_test_data
PUBLIC	_hmac_stribog_test_vectors
_DATA	SEGMENT
COMM	_ks_tmp:BYTE:0220H
_DATA	ENDS
;	COMDAT ??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@
CONST	SEGMENT
??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@ DB 't'
	DB	08aH, 'd', 094H, 0b8H, '4', 0bdH, 'r', 095H, 0a2H, ';', 011H, 086H
	DB	01dH, 'F', 0e7H, 088H, 0fH, 'e', 098H, 0d3H, 'T', 0e1H, 0b2H, 'J'
	DB	'5', 0c2H, 0a2H, 085H, 'A', 08H, 085H, 07H, 0c8H, 'RQ6&', 0d2H
	DB	08cH, '8', 0e5H, 'U', 09eH, 0d2H, 01bH, 088H, '++7', 0aeH, 087H
	DB	011H, 01aH, '7', 0e4H, 0b1H, 088H, 0d3H, 0d7H, 08cH, 09fH, 0efH
	DB	01bH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@
CONST	SEGMENT
??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@ DB 'R'
	DB	'5', 0b7H, 017H, 'V', 0b8H, 'u!', 0caH, 0e9H, 'R', 09bH, '!', 097H
	DB	'>mNT', 012H, 0fcH, 'ap@', 0faH, 'FL', 0f7H, '$', 09dH, '(', 0deH
	DB	01dH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
_DATA	SEGMENT
_XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
_hmac_whirlpool_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_whirlpool_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_whirlpool_test_vectors DD FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
_hmac_gosthash_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_gosthash_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_gosthash_test_vectors DD FLAT:??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@
_hmac_stribog_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_stribog_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_stribog_test_vectors DD FLAT:??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
_DATA	ENDS
PUBLIC	_CipherInit2@16
EXTRN	__imp__KeBugCheckEx@20:PROC
EXTRN	_CipherInit@12:PROC
; Function compile flags: /Odtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _CipherInit2@16
_TEXT	SEGMENT
tv64 = -4						; size = 4
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_key_len$ = 20						; size = 4
_CipherInit2@16 PROC					; COMDAT

; 317  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 318  : 	switch (cipher)

  00006	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000c	83 7d fc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00010	74 08		 je	 SHORT $LN3@CipherInit
  00012	83 7d fc 02	 cmp	 DWORD PTR tv64[ebp], 2
  00016	74 15		 je	 SHORT $LN2@CipherInit
  00018	eb 26		 jmp	 SHORT $LN1@CipherInit
$LN3@CipherInit:

; 319  : 	{
; 320  : 	case GOST:
; 321  : 		CipherInit(cipher,key,ks);

  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _CipherInit@12

; 322  : 		break;

  0002b	eb 29		 jmp	 SHORT $LN7@CipherInit
$LN2@CipherInit:

; 323  : 	case GRASSHOPPER:
; 324  : 		CipherInit(cipher, key, ks);

  0002d	8b 4d 10	 mov	 ecx, DWORD PTR _ks$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00034	52		 push	 edx
  00035	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _CipherInit@12

; 325  : 		break;

  0003e	eb 16		 jmp	 SHORT $LN7@CipherInit
$LN1@CipherInit:

; 326  : 	default:			
; 327  : 		/* Unknown/wrong ID */
; 328  : 		GST_THROW_FATAL_EXCEPTION;

  00040	68 54 53 47 00	 push	 4674388			; 00475354H
  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	68 48 01 00 00	 push	 328			; 00000148H
  0004e	6a 29		 push	 41			; 00000029H
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN7@CipherInit:

; 329  : 	}
; 330  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 10 00	 ret	 16			; 00000010H
_CipherInit2@16 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TestCRCs@4
EXTRN	_hmac_stribog@20:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
;	COMDAT _TestCRCs@4
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv84 = -81						; size = 1
tv81 = -80						; size = 4
tv78 = -76						; size = 4
_digest$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_buf$ = 8						; size = 4
_TestCRCs@4 PROC					; COMDAT

; 341  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 58	 sub	 esp, 88			; 00000058H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 342  : 	unsigned char digest[STRIBOG_DIGESTSIZE];
; 343  : 	hmac_stribog(hmac_stribog_test_key, 64, hmac_stribog_test_data, (int) strlen (hmac_stribog_test_data), digest);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _hmac_stribog_test_data
  00019	89 45 b4	 mov	 DWORD PTR tv78[ebp], eax
  0001c	8b 4d b4	 mov	 ecx, DWORD PTR tv78[ebp]
  0001f	83 c1 01	 add	 ecx, 1
  00022	89 4d b0	 mov	 DWORD PTR tv81[ebp], ecx
$LL3@TestCRCs:
  00025	8b 55 b4	 mov	 edx, DWORD PTR tv78[ebp]
  00028	8a 02		 mov	 al, BYTE PTR [edx]
  0002a	88 45 af	 mov	 BYTE PTR tv84[ebp], al
  0002d	83 45 b4 01	 add	 DWORD PTR tv78[ebp], 1
  00031	80 7d af 00	 cmp	 BYTE PTR tv84[ebp], 0
  00035	75 ee		 jne	 SHORT $LL3@TestCRCs
  00037	8b 4d b4	 mov	 ecx, DWORD PTR tv78[ebp]
  0003a	2b 4d b0	 sub	 ecx, DWORD PTR tv81[ebp]
  0003d	89 4d a8	 mov	 DWORD PTR tv67[ebp], ecx
  00040	8d 55 b8	 lea	 edx, DWORD PTR _digest$[ebp]
  00043	52		 push	 edx
  00044	8b 45 a8	 mov	 eax, DWORD PTR tv67[ebp]
  00047	50		 push	 eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_stribog_test_data
  0004e	51		 push	 ecx
  0004f	6a 40		 push	 64			; 00000040H
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_stribog_test_key
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _hmac_stribog@20

; 344  : 	memcpy(buf, digest, STRIBOG_DIGESTSIZE);

  0005d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00062	8d 75 b8	 lea	 esi, DWORD PTR _digest$[ebp]
  00065	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  00068	f3 a5		 rep movsd

; 345  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TestCRCs@4 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	_TestLegacySectorBufEncryption@4
PUBLIC	__$ArrayPad$
PUBLIC	_TestSectorBufEncryption@4
EXTRN	_DecryptBuffer@16:PROC
EXTRN	_EncryptBuffer@16:PROC
EXTRN	_DecryptDataUnits@16:PROC
EXTRN	_GetCrc32@8:PROC
EXTRN	_EncryptDataUnits@16:PROC
EXTRN	_EAInitMode@4:PROC
EXTRN	_EAInit@12:PROC
EXTRN	_EAGetName@8:PROC
EXTRN	_EAIsModeSupported@8:PROC
EXTRN	_EAGetNextMode@8:PROC
EXTRN	_EAGetFirstMode@4:PROC
EXTRN	_EAGetNext@4:PROC
EXTRN	_EAGetFirst@0:PROC
EXTRN	__aulldiv:PROC
;	COMDAT ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@ DB 'Gost Grasshopper', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@ DB 'GOST 28147-89', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _TestSectorBufEncryption@4
_TEXT	SEGMENT
tv262 = -2252						; size = 4
tv519 = -2248						; size = 4
tv514 = -2242						; size = 1
tv507 = -2241						; size = 1
tv502 = -2240						; size = 4
tv504 = -2236						; size = 4
tv255 = -2232						; size = 4
tv495 = -2228						; size = 4
tv490 = -2222						; size = 1
tv483 = -2221						; size = 1
tv478 = -2220						; size = 4
tv480 = -2216						; size = 4
tv183 = -2212						; size = 4
tv412 = -2208						; size = 4
tv407 = -2202						; size = 1
tv400 = -2201						; size = 1
tv395 = -2200						; size = 4
tv397 = -2196						; size = 4
tv170 = -2192						; size = 4
tv168 = -2188						; size = 4
tv380 = -2184						; size = 4
tv375 = -2178						; size = 1
tv368 = -2177						; size = 1
tv363 = -2176						; size = 4
tv365 = -2172						; size = 4
tv290 = -2168						; size = 8
_nTestsPerformed$ = -2160				; size = 4
_nbrUnits$ = -2156					; size = 4
_buf$ = -2152						; size = 2048
_writeOffset$ = -104					; size = 8
_name$ = -96						; size = 64
__$ArrayPad$ = -28					; size = 4
_unitNo$ = -24						; size = 8
_i$ = -12						; size = 4
_crc$ = -8						; size = 4
_testCase$ = -4						; size = 4
_ci$ = 8						; size = 4
_TestSectorBufEncryption@4 PROC				; COMDAT

; 356  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec cc 08 00
	00		 sub	 esp, 2252		; 000008ccH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 357  : 	unsigned char buf[ENCRYPTION_DATA_UNIT_SIZE * 4];
; 358  : 	unsigned int i;
; 359  : 	char name[64];
; 360  : 	unsigned __int32 crc;
; 361  : 	UINT64_STRUCT unitNo;
; 362  : 	uint32 nbrUnits;
; 363  : 	unsigned __int64 writeOffset;
; 364  : 	int testCase = 0;

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _testCase$[ebp], 0

; 365  : 	int nTestsPerformed = 0;

  0001e	c7 85 90 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 366  : 
; 367  : 	static unsigned char key1[] =
; 368  : 	{
; 369  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 370  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 371  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 372  : 	};
; 373  : 
; 374  : 	if (!TestLegacySectorBufEncryption(ci))

  00028	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _TestLegacySectorBufEncryption@4
  00031	85 c0		 test	 eax, eax
  00033	75 07		 jne	 SHORT $LN52@TestSector

; 375  : 		return FALSE;

  00035	33 c0		 xor	 eax, eax
  00037	e9 35 07 00 00	 jmp	 $LN53@TestSector
$LN52@TestSector:

; 376  : 
; 377  : 
; 378  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 379  : 
; 380  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0003c	c7 85 94 f7 ff
	ff 04 00 00 00	 mov	 DWORD PTR _nbrUnits$[ebp], 4

; 381  : 
; 382  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 383  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 384  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 385  : 	for (writeOffset = 562949953420800ULL;
; 386  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE;
; 387  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  00046	c7 45 98 00 fe
	ff ff		 mov	 DWORD PTR _writeOffset$[ebp], -512 ; fffffe00H
  0004d	c7 45 9c ff ff
	01 00		 mov	 DWORD PTR _writeOffset$[ebp+4], 131071 ; 0001ffffH
  00054	eb 15		 jmp	 SHORT $LN51@TestSector
$LN50@TestSector:
  00056	8b 4d 98	 mov	 ecx, DWORD PTR _writeOffset$[ebp]
  00059	81 e9 00 02 00
	00		 sub	 ecx, 512		; 00000200H
  0005f	8b 55 9c	 mov	 edx, DWORD PTR _writeOffset$[ebp+4]
  00062	83 da 00	 sbb	 edx, 0
  00065	89 4d 98	 mov	 DWORD PTR _writeOffset$[ebp], ecx
  00068	89 55 9c	 mov	 DWORD PTR _writeOffset$[ebp+4], edx
$LN51@TestSector:
  0006b	8b 85 94 f7 ff
	ff		 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  00071	c1 e0 09	 shl	 eax, 9
  00074	33 c9		 xor	 ecx, ecx
  00076	ba 00 fe ff ff	 mov	 edx, -512		; fffffe00H
  0007b	2b d0		 sub	 edx, eax
  0007d	b8 ff ff 01 00	 mov	 eax, 131071		; 0001ffffH
  00082	1b c1		 sbb	 eax, ecx
  00084	89 95 88 f7 ff
	ff		 mov	 DWORD PTR tv290[ebp], edx
  0008a	89 85 8c f7 ff
	ff		 mov	 DWORD PTR tv290[ebp+4], eax
  00090	8b 4d 9c	 mov	 ecx, DWORD PTR _writeOffset$[ebp+4]
  00093	3b 8d 8c f7 ff
	ff		 cmp	 ecx, DWORD PTR tv290[ebp+4]
  00099	0f 82 e0 03 00
	00		 jb	 $LN49@TestSector
  0009f	77 0f		 ja	 SHORT $LN55@TestSector
  000a1	8b 55 98	 mov	 edx, DWORD PTR _writeOffset$[ebp]
  000a4	3b 95 88 f7 ff
	ff		 cmp	 edx, DWORD PTR tv290[ebp]
  000aa	0f 86 cf 03 00
	00		 jbe	 $LN49@TestSector
$LN55@TestSector:

; 388  : 	{
; 389  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  000b0	6a 00		 push	 0
  000b2	68 00 02 00 00	 push	 512			; 00000200H
  000b7	8b 45 9c	 mov	 eax, DWORD PTR _writeOffset$[ebp+4]
  000ba	50		 push	 eax
  000bb	8b 4d 98	 mov	 ecx, DWORD PTR _writeOffset$[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 __aulldiv
  000c4	89 45 e8	 mov	 DWORD PTR _unitNo$[ebp], eax
  000c7	89 55 ec	 mov	 DWORD PTR _unitNo$[ebp+4], edx

; 390  : 
; 391  : 		// Test all EAs that support this mode of operation
; 392  : 		for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  000ca	e8 00 00 00 00	 call	 _EAGetFirst@0
  000cf	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000d2	89 02		 mov	 DWORD PTR [edx], eax
  000d4	eb 10		 jmp	 SHORT $LN48@TestSector
$LN47@TestSector:
  000d6	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 _EAGetNext@4
  000e1	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000e4	89 02		 mov	 DWORD PTR [edx], eax
$LN48@TestSector:
  000e6	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000e9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ec	0f 84 7f 03 00
	00		 je	 $LN46@TestSector

; 393  : 		{
; 394  : 			for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00100	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00103	eb 18		 jmp	 SHORT $LN45@TestSector
$LN44@TestSector:
  00105	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00108	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010b	50		 push	 eax
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0010f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _EAGetNextMode@8
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0011a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN45@TestSector:
  0011d	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00120	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00124	0f 84 42 03 00
	00		 je	 $LN43@TestSector

; 395  : 			{
; 396  : 				if (!EAIsModeSupported(ci->ea, ci->mode))

  0012a	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0012d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00130	51		 push	 ecx
  00131	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00134	8b 02		 mov	 eax, DWORD PTR [edx]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  0013c	85 c0		 test	 eax, eax
  0013e	75 02		 jne	 SHORT $LN42@TestSector

; 397  : 					continue;

  00140	eb c3		 jmp	 SHORT $LN44@TestSector
$LN42@TestSector:

; 398  : 
; 399  : 				EAGetName(name, ci->ea);

  00142	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00145	8b 11		 mov	 edx, DWORD PTR [ecx]
  00147	52		 push	 edx
  00148	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _EAGetName@8

; 400  : 
; 401  : 				if (EAInit(ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00154	83 c1 08	 add	 ecx, 8
  00157	51		 push	 ecx
  00158	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  0015d	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00160	8b 02		 mov	 eax, DWORD PTR [edx]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _EAInit@12
  00168	85 c0		 test	 eax, eax
  0016a	74 07		 je	 SHORT $LN41@TestSector

; 402  : 					return FALSE;

  0016c	33 c0		 xor	 eax, eax
  0016e	e9 fe 05 00 00	 jmp	 $LN53@TestSector
$LN41@TestSector:

; 403  : 
; 404  : 				for (i = 0; i < sizeof (ci->k2); i++)

  00173	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0017a	eb 09		 jmp	 SHORT $LN40@TestSector
$LN39@TestSector:
  0017c	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0017f	83 c1 01	 add	 ecx, 1
  00182	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$LN40@TestSector:
  00185	81 7d f4 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0018c	73 11		 jae	 SHORT $LN38@TestSector

; 405  : 					ci->k2[i] = (unsigned char)i;

  0018e	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00191	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00194	8a 45 f4	 mov	 al, BYTE PTR _i$[ebp]
  00197	88 82 50 1d 00
	00		 mov	 BYTE PTR [edx+7504], al
  0019d	eb dd		 jmp	 SHORT $LN39@TestSector
$LN38@TestSector:

; 406  : 
; 407  : 				memcpy(&ci->k2, XTS_vectors[XTS_TEST_COUNT - 1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT - 1].key2));

  0019f	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432
  001a4	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]
  001a7	81 c7 50 1d 00
	00		 add	 edi, 7504		; 00001d50H
  001ad	b9 08 00 00 00	 mov	 ecx, 8
  001b2	f3 a5		 rep movsd

; 408  : 
; 409  : 				if (!EAInitMode(ci))

  001b4	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  001b7	51		 push	 ecx
  001b8	e8 00 00 00 00	 call	 _EAInitMode@4
  001bd	85 c0		 test	 eax, eax
  001bf	75 07		 jne	 SHORT $LN37@TestSector

; 410  : 					return FALSE;

  001c1	33 c0		 xor	 eax, eax
  001c3	e9 a9 05 00 00	 jmp	 $LN53@TestSector
$LN37@TestSector:

; 411  : 
; 412  : 				// Each data unit will contain the same plaintext
; 413  : 				for (i = 0; i < nbrUnits; i++)

  001c8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001cf	eb 09		 jmp	 SHORT $LN36@TestSector
$LN35@TestSector:
  001d1	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  001d4	83 c2 01	 add	 edx, 1
  001d7	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN36@TestSector:
  001da	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  001dd	3b 85 94 f7 ff
	ff		 cmp	 eax, DWORD PTR _nbrUnits$[ebp]
  001e3	73 1b		 jae	 SHORT $LN34@TestSector

; 414  : 				{
; 415  : 					memcpy((unsigned char *)buf + i * ENCRYPTION_DATA_UNIT_SIZE,
; 416  : 						XTS_vectors[XTS_TEST_COUNT - 1].plaintext,
; 417  : 						ENCRYPTION_DATA_UNIT_SIZE);

  001e5	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  001ea	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  001ed	c1 e1 09	 shl	 ecx, 9
  001f0	8d bc 0d 98 f7
	ff ff		 lea	 edi, DWORD PTR _buf$[ebp+ecx]
  001f7	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  001fc	f3 a5		 rep movsd

; 418  : 				}

  001fe	eb d1		 jmp	 SHORT $LN35@TestSector
$LN34@TestSector:

; 419  : 
; 420  : 				EncryptDataUnits(buf, &unitNo, nbrUnits, ci);

  00200	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00203	52		 push	 edx
  00204	8b 85 94 f7 ff
	ff		 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  0020a	50		 push	 eax
  0020b	8d 4d e8	 lea	 ecx, DWORD PTR _unitNo$[ebp]
  0020e	51		 push	 ecx
  0020f	8d 95 98 f7 ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 421  : 
; 422  : 				crc = GetCrc32(buf, sizeof (buf));

  0021b	68 00 08 00 00	 push	 2048			; 00000800H
  00220	8d 85 98 f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 _GetCrc32@8
  0022c	89 45 f8	 mov	 DWORD PTR _crc$[ebp], eax

; 423  : 
; 424  : 				if (strcmp(name, "GOST 28147-89") == 0)

  0022f	c7 85 84 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv365[ebp], OFFSET ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@
  00239	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0023c	89 8d 80 f7 ff
	ff		 mov	 DWORD PTR tv363[ebp], ecx
$LL56@TestSector:
  00242	8b 95 80 f7 ff
	ff		 mov	 edx, DWORD PTR tv363[ebp]
  00248	8a 02		 mov	 al, BYTE PTR [edx]
  0024a	88 85 7f f7 ff
	ff		 mov	 BYTE PTR tv368[ebp], al
  00250	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR tv365[ebp]
  00256	3a 01		 cmp	 al, BYTE PTR [ecx]
  00258	75 46		 jne	 SHORT $LN57@TestSector
  0025a	80 bd 7f f7 ff
	ff 00		 cmp	 BYTE PTR tv368[ebp], 0
  00261	74 31		 je	 SHORT $LN58@TestSector
  00263	8b 95 80 f7 ff
	ff		 mov	 edx, DWORD PTR tv363[ebp]
  00269	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0026c	88 85 7e f7 ff
	ff		 mov	 BYTE PTR tv375[ebp], al
  00272	8b 8d 84 f7 ff
	ff		 mov	 ecx, DWORD PTR tv365[ebp]
  00278	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  0027b	75 23		 jne	 SHORT $LN57@TestSector
  0027d	83 85 80 f7 ff
	ff 02		 add	 DWORD PTR tv363[ebp], 2
  00284	83 85 84 f7 ff
	ff 02		 add	 DWORD PTR tv365[ebp], 2
  0028b	80 bd 7e f7 ff
	ff 00		 cmp	 BYTE PTR tv375[ebp], 0
  00292	75 ae		 jne	 SHORT $LL56@TestSector
$LN58@TestSector:
  00294	c7 85 78 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp], 0
  0029e	eb 0b		 jmp	 SHORT $LN59@TestSector
$LN57@TestSector:
  002a0	1b d2		 sbb	 edx, edx
  002a2	83 da ff	 sbb	 edx, -1
  002a5	89 95 78 f7 ff
	ff		 mov	 DWORD PTR tv380[ebp], edx
$LN59@TestSector:
  002ab	8b 85 78 f7 ff
	ff		 mov	 eax, DWORD PTR tv380[ebp]
  002b1	89 85 74 f7 ff
	ff		 mov	 DWORD PTR tv168[ebp], eax
  002b7	83 bd 74 f7 ff
	ff 00		 cmp	 DWORD PTR tv168[ebp], 0
  002be	0f 85 aa 00 00
	00		 jne	 $LN33@TestSector

; 425  : 				{
; 426  : 					switch (testCase)

  002c4	8b 4d fc	 mov	 ecx, DWORD PTR _testCase$[ebp]
  002c7	89 8d 70 f7 ff
	ff		 mov	 DWORD PTR tv170[ebp], ecx
  002cd	83 bd 70 f7 ff
	ff 03		 cmp	 DWORD PTR tv170[ebp], 3
  002d4	0f 87 8f 00 00
	00		 ja	 $LN31@TestSector
  002da	8b 95 70 f7 ff
	ff		 mov	 edx, DWORD PTR tv170[ebp]
  002e0	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN72@TestSector[edx*4]
$LN30@TestSector:

; 427  : 					{
; 428  : 					case 0:
; 429  : #ifdef GOST_DYNAMIC_SBOXES
; 430  : 						if (crc != 0x05eacf7d)

  002e7	81 7d f8 7d cf
	ea 05		 cmp	 DWORD PTR _crc$[ebp], 99274621 ; 05eacf7dH
  002ee	74 07		 je	 SHORT $LN29@TestSector

; 431  : 							return FALSE;

  002f0	33 c0		 xor	 eax, eax
  002f2	e9 7a 04 00 00	 jmp	 $LN53@TestSector
$LN29@TestSector:

; 432  : #endif
; 433  : 						nTestsPerformed++;

  002f7	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  002fd	83 c0 01	 add	 eax, 1
  00300	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 434  : 						break;

  00306	eb 61		 jmp	 SHORT $LN31@TestSector
$LN28@TestSector:

; 435  : 					case 1:
; 436  : #ifdef GOST_DYNAMIC_SBOXES
; 437  : 						if (crc != 0x5b5926d9)

  00308	81 7d f8 d9 26
	59 5b		 cmp	 DWORD PTR _crc$[ebp], 1532569305 ; 5b5926d9H
  0030f	74 07		 je	 SHORT $LN27@TestSector

; 438  : 							return FALSE;

  00311	33 c0		 xor	 eax, eax
  00313	e9 59 04 00 00	 jmp	 $LN53@TestSector
$LN27@TestSector:

; 439  : #endif
; 440  : 						nTestsPerformed++;

  00318	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  0031e	83 c1 01	 add	 ecx, 1
  00321	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 441  : 						break;

  00327	eb 40		 jmp	 SHORT $LN31@TestSector
$LN26@TestSector:

; 442  : 					case 2:
; 443  : #ifdef GOST_DYNAMIC_SBOXES
; 444  : 						if (crc != 0xcf0cfdd1)

  00329	81 7d f8 d1 fd
	0c cf		 cmp	 DWORD PTR _crc$[ebp], -821232175 ; cf0cfdd1H
  00330	74 07		 je	 SHORT $LN25@TestSector

; 445  : 							return FALSE;

  00332	33 c0		 xor	 eax, eax
  00334	e9 38 04 00 00	 jmp	 $LN53@TestSector
$LN25@TestSector:

; 446  : #endif
; 447  : 						nTestsPerformed++;

  00339	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  0033f	83 c2 01	 add	 edx, 1
  00342	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx

; 448  : 						break;

  00348	eb 1f		 jmp	 SHORT $LN31@TestSector
$LN24@TestSector:

; 449  : 					case 3:
; 450  : #ifdef GOST_DYNAMIC_SBOXES
; 451  : 						if (crc != 0xe82865a8)

  0034a	81 7d f8 a8 65
	28 e8		 cmp	 DWORD PTR _crc$[ebp], -400005720 ; e82865a8H
  00351	74 07		 je	 SHORT $LN23@TestSector

; 452  : 							return FALSE;

  00353	33 c0		 xor	 eax, eax
  00355	e9 17 04 00 00	 jmp	 $LN53@TestSector
$LN23@TestSector:

; 453  : #endif
; 454  : 						nTestsPerformed++;

  0035a	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  00360	83 c0 01	 add	 eax, 1
  00363	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN31@TestSector:

; 455  : 						break;
; 456  : 					}
; 457  : 				}
; 458  : 				else if (strcmp(name, "Gost Grasshopper") == 0)

  00369	e9 a0 00 00 00	 jmp	 $LN22@TestSector
$LN33@TestSector:
  0036e	c7 85 6c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv397[ebp], OFFSET ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@
  00378	8d 4d a0	 lea	 ecx, DWORD PTR _name$[ebp]
  0037b	89 8d 68 f7 ff
	ff		 mov	 DWORD PTR tv395[ebp], ecx
$LL60@TestSector:
  00381	8b 95 68 f7 ff
	ff		 mov	 edx, DWORD PTR tv395[ebp]
  00387	8a 02		 mov	 al, BYTE PTR [edx]
  00389	88 85 67 f7 ff
	ff		 mov	 BYTE PTR tv400[ebp], al
  0038f	8b 8d 6c f7 ff
	ff		 mov	 ecx, DWORD PTR tv397[ebp]
  00395	3a 01		 cmp	 al, BYTE PTR [ecx]
  00397	75 46		 jne	 SHORT $LN61@TestSector
  00399	80 bd 67 f7 ff
	ff 00		 cmp	 BYTE PTR tv400[ebp], 0
  003a0	74 31		 je	 SHORT $LN62@TestSector
  003a2	8b 95 68 f7 ff
	ff		 mov	 edx, DWORD PTR tv395[ebp]
  003a8	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  003ab	88 85 66 f7 ff
	ff		 mov	 BYTE PTR tv407[ebp], al
  003b1	8b 8d 6c f7 ff
	ff		 mov	 ecx, DWORD PTR tv397[ebp]
  003b7	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  003ba	75 23		 jne	 SHORT $LN61@TestSector
  003bc	83 85 68 f7 ff
	ff 02		 add	 DWORD PTR tv395[ebp], 2
  003c3	83 85 6c f7 ff
	ff 02		 add	 DWORD PTR tv397[ebp], 2
  003ca	80 bd 66 f7 ff
	ff 00		 cmp	 BYTE PTR tv407[ebp], 0
  003d1	75 ae		 jne	 SHORT $LL60@TestSector
$LN62@TestSector:
  003d3	c7 85 60 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv412[ebp], 0
  003dd	eb 0b		 jmp	 SHORT $LN63@TestSector
$LN61@TestSector:
  003df	1b d2		 sbb	 edx, edx
  003e1	83 da ff	 sbb	 edx, -1
  003e4	89 95 60 f7 ff
	ff		 mov	 DWORD PTR tv412[ebp], edx
$LN63@TestSector:
  003ea	8b 85 60 f7 ff
	ff		 mov	 eax, DWORD PTR tv412[ebp]
  003f0	89 85 5c f7 ff
	ff		 mov	 DWORD PTR tv183[ebp], eax
  003f6	83 bd 5c f7 ff
	ff 00		 cmp	 DWORD PTR tv183[ebp], 0
  003fd	75 0f		 jne	 SHORT $LN22@TestSector

; 459  : 					nTestsPerformed++;

  003ff	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00405	83 c1 01	 add	 ecx, 1
  00408	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx
$LN22@TestSector:

; 460  : 
; 461  : 				if (crc == 0x9f5edd58)

  0040e	81 7d f8 58 dd
	5e 9f		 cmp	 DWORD PTR _crc$[ebp], -1621172904 ; 9f5edd58H
  00415	75 07		 jne	 SHORT $LN20@TestSector

; 462  : 					return FALSE;

  00417	33 c0		 xor	 eax, eax
  00419	e9 53 03 00 00	 jmp	 $LN53@TestSector
$LN20@TestSector:

; 463  : 
; 464  : 				DecryptDataUnits(buf, &unitNo, nbrUnits, ci);

  0041e	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00421	52		 push	 edx
  00422	8b 85 94 f7 ff
	ff		 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  00428	50		 push	 eax
  00429	8d 4d e8	 lea	 ecx, DWORD PTR _unitNo$[ebp]
  0042c	51		 push	 ecx
  0042d	8d 95 98 f7 ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00433	52		 push	 edx
  00434	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 465  : 
; 466  : 				if (GetCrc32(buf, sizeof (buf)) != 0x9f5edd58)

  00439	68 00 08 00 00	 push	 2048			; 00000800H
  0043e	8d 85 98 f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00444	50		 push	 eax
  00445	e8 00 00 00 00	 call	 _GetCrc32@8
  0044a	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  0044f	74 07		 je	 SHORT $LN19@TestSector

; 467  : 					return FALSE;

  00451	33 c0		 xor	 eax, eax
  00453	e9 19 03 00 00	 jmp	 $LN53@TestSector
$LN19@TestSector:

; 468  : 
; 469  : 				nTestsPerformed++;

  00458	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  0045e	83 c1 01	 add	 ecx, 1
  00461	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 470  : 			}

  00467	e9 99 fc ff ff	 jmp	 $LN44@TestSector
$LN43@TestSector:

; 471  : 		}

  0046c	e9 65 fc ff ff	 jmp	 $LN47@TestSector
$LN46@TestSector:

; 472  : 		testCase++;

  00471	8b 55 fc	 mov	 edx, DWORD PTR _testCase$[ebp]
  00474	83 c2 01	 add	 edx, 1
  00477	89 55 fc	 mov	 DWORD PTR _testCase$[ebp], edx

; 473  : 	}

  0047a	e9 d7 fb ff ff	 jmp	 $LN50@TestSector
$LN49@TestSector:

; 474  : 
; 475  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 476  : 
; 477  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0047f	c7 85 94 f7 ff
	ff 04 00 00 00	 mov	 DWORD PTR _nbrUnits$[ebp], 4

; 478  : 
; 479  : 	// Test all EAs that support this mode of operation
; 480  : 	for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  00489	e8 00 00 00 00	 call	 _EAGetFirst@0
  0048e	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00491	89 01		 mov	 DWORD PTR [ecx], eax
  00493	eb 10		 jmp	 SHORT $LN18@TestSector
$LN17@TestSector:
  00495	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00498	8b 02		 mov	 eax, DWORD PTR [edx]
  0049a	50		 push	 eax
  0049b	e8 00 00 00 00	 call	 _EAGetNext@4
  004a0	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  004a3	89 01		 mov	 DWORD PTR [ecx], eax
$LN18@TestSector:
  004a5	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  004a8	83 3a 00	 cmp	 DWORD PTR [edx], 0
  004ab	0f 84 bb 02 00
	00		 je	 $LN16@TestSector

; 481  : 	{
; 482  : 		for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  004b1	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  004b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004b6	51		 push	 ecx
  004b7	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  004bc	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  004bf	89 42 04	 mov	 DWORD PTR [edx+4], eax
  004c2	eb 18		 jmp	 SHORT $LN15@TestSector
$LN14@TestSector:
  004c4	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  004c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004ca	51		 push	 ecx
  004cb	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  004ce	8b 02		 mov	 eax, DWORD PTR [edx]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 _EAGetNextMode@8
  004d6	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  004d9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN15@TestSector:
  004dc	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  004df	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  004e3	0f 84 7e 02 00
	00		 je	 $LN13@TestSector

; 483  : 		{
; 484  : 			if (!EAIsModeSupported(ci->ea, ci->mode))

  004e9	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  004ec	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004ef	51		 push	 ecx
  004f0	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  004f3	8b 02		 mov	 eax, DWORD PTR [edx]
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  004fb	85 c0		 test	 eax, eax
  004fd	75 02		 jne	 SHORT $LN12@TestSector

; 485  : 				continue;

  004ff	eb c3		 jmp	 SHORT $LN14@TestSector
$LN12@TestSector:

; 486  : 
; 487  : 			EAGetName(name, ci->ea);

  00501	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00504	8b 11		 mov	 edx, DWORD PTR [ecx]
  00506	52		 push	 edx
  00507	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  0050a	50		 push	 eax
  0050b	e8 00 00 00 00	 call	 _EAGetName@8

; 488  : 
; 489  : 			if (EAInit(ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00510	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00513	83 c1 08	 add	 ecx, 8
  00516	51		 push	 ecx
  00517	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  0051c	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0051f	8b 02		 mov	 eax, DWORD PTR [edx]
  00521	50		 push	 eax
  00522	e8 00 00 00 00	 call	 _EAInit@12
  00527	85 c0		 test	 eax, eax
  00529	74 07		 je	 SHORT $LN11@TestSector

; 490  : 				return FALSE;

  0052b	33 c0		 xor	 eax, eax
  0052d	e9 3f 02 00 00	 jmp	 $LN53@TestSector
$LN11@TestSector:

; 491  : 
; 492  : 			memcpy(&ci->k2, XTS_vectors[XTS_TEST_COUNT - 1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT - 1].key2));

  00532	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432
  00537	8b 7d 08	 mov	 edi, DWORD PTR _ci$[ebp]
  0053a	81 c7 50 1d 00
	00		 add	 edi, 7504		; 00001d50H
  00540	b9 08 00 00 00	 mov	 ecx, 8
  00545	f3 a5		 rep movsd

; 493  : 
; 494  : 			if (!EAInitMode(ci))

  00547	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0054a	51		 push	 ecx
  0054b	e8 00 00 00 00	 call	 _EAInitMode@4
  00550	85 c0		 test	 eax, eax
  00552	75 07		 jne	 SHORT $LN10@TestSector

; 495  : 				return FALSE;

  00554	33 c0		 xor	 eax, eax
  00556	e9 16 02 00 00	 jmp	 $LN53@TestSector
$LN10@TestSector:

; 496  : 
; 497  : 			// Each data unit will contain the same plaintext
; 498  : 			for (i = 0; i < nbrUnits; i++)

  0055b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00562	eb 09		 jmp	 SHORT $LN9@TestSector
$LN8@TestSector:
  00564	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00567	83 c2 01	 add	 edx, 1
  0056a	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN9@TestSector:
  0056d	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00570	3b 85 94 f7 ff
	ff		 cmp	 eax, DWORD PTR _nbrUnits$[ebp]
  00576	73 1b		 jae	 SHORT $LN7@TestSector

; 499  : 			{
; 500  : 				memcpy((unsigned char *)buf + i * ENCRYPTION_DATA_UNIT_SIZE,
; 501  : 					XTS_vectors[XTS_TEST_COUNT - 1].plaintext,
; 502  : 					ENCRYPTION_DATA_UNIT_SIZE);

  00578	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  0057d	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00580	c1 e1 09	 shl	 ecx, 9
  00583	8d bc 0d 98 f7
	ff ff		 lea	 edi, DWORD PTR _buf$[ebp+ecx]
  0058a	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0058f	f3 a5		 rep movsd

; 503  : 			}

  00591	eb d1		 jmp	 SHORT $LN8@TestSector
$LN7@TestSector:

; 504  : 
; 505  : 			EncryptBuffer(buf, sizeof (buf), ci);

  00593	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  00596	52		 push	 edx
  00597	6a 00		 push	 0
  00599	68 00 08 00 00	 push	 2048			; 00000800H
  0059e	8d 85 98 f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  005a4	50		 push	 eax
  005a5	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 506  : 
; 507  : 			crc = GetCrc32(buf, sizeof (buf));

  005aa	68 00 08 00 00	 push	 2048			; 00000800H
  005af	8d 8d 98 f7 ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  005b5	51		 push	 ecx
  005b6	e8 00 00 00 00	 call	 _GetCrc32@8
  005bb	89 45 f8	 mov	 DWORD PTR _crc$[ebp], eax

; 508  : 
; 509  : 			if (strcmp(name, "GOST 28147-89") == 0)

  005be	c7 85 58 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv480[ebp], OFFSET ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@
  005c8	8d 55 a0	 lea	 edx, DWORD PTR _name$[ebp]
  005cb	89 95 54 f7 ff
	ff		 mov	 DWORD PTR tv478[ebp], edx
$LL64@TestSector:
  005d1	8b 85 54 f7 ff
	ff		 mov	 eax, DWORD PTR tv478[ebp]
  005d7	8a 08		 mov	 cl, BYTE PTR [eax]
  005d9	88 8d 53 f7 ff
	ff		 mov	 BYTE PTR tv483[ebp], cl
  005df	8b 95 58 f7 ff
	ff		 mov	 edx, DWORD PTR tv480[ebp]
  005e5	3a 0a		 cmp	 cl, BYTE PTR [edx]
  005e7	75 46		 jne	 SHORT $LN65@TestSector
  005e9	80 bd 53 f7 ff
	ff 00		 cmp	 BYTE PTR tv483[ebp], 0
  005f0	74 31		 je	 SHORT $LN66@TestSector
  005f2	8b 85 54 f7 ff
	ff		 mov	 eax, DWORD PTR tv478[ebp]
  005f8	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  005fb	88 8d 52 f7 ff
	ff		 mov	 BYTE PTR tv490[ebp], cl
  00601	8b 95 58 f7 ff
	ff		 mov	 edx, DWORD PTR tv480[ebp]
  00607	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0060a	75 23		 jne	 SHORT $LN65@TestSector
  0060c	83 85 54 f7 ff
	ff 02		 add	 DWORD PTR tv478[ebp], 2
  00613	83 85 58 f7 ff
	ff 02		 add	 DWORD PTR tv480[ebp], 2
  0061a	80 bd 52 f7 ff
	ff 00		 cmp	 BYTE PTR tv490[ebp], 0
  00621	75 ae		 jne	 SHORT $LL64@TestSector
$LN66@TestSector:
  00623	c7 85 4c f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv495[ebp], 0
  0062d	eb 0b		 jmp	 SHORT $LN67@TestSector
$LN65@TestSector:
  0062f	1b c0		 sbb	 eax, eax
  00631	83 d8 ff	 sbb	 eax, -1
  00634	89 85 4c f7 ff
	ff		 mov	 DWORD PTR tv495[ebp], eax
$LN67@TestSector:
  0063a	8b 8d 4c f7 ff
	ff		 mov	 ecx, DWORD PTR tv495[ebp]
  00640	89 8d 48 f7 ff
	ff		 mov	 DWORD PTR tv255[ebp], ecx
  00646	83 bd 48 f7 ff
	ff 00		 cmp	 DWORD PTR tv255[ebp], 0
  0064d	75 24		 jne	 SHORT $LN6@TestSector

; 510  : 			{
; 511  : #ifdef GOST_DYNAMIC_SBOXES
; 512  : 				if (crc != 0x5d31eec2)

  0064f	81 7d f8 c2 ee
	31 5d		 cmp	 DWORD PTR _crc$[ebp], 1563553474 ; 5d31eec2H
  00656	74 07		 je	 SHORT $LN5@TestSector

; 513  : 					return FALSE;

  00658	33 c0		 xor	 eax, eax
  0065a	e9 12 01 00 00	 jmp	 $LN53@TestSector
$LN5@TestSector:

; 514  : #endif
; 515  : 				nTestsPerformed++;

  0065f	8b 95 90 f7 ff
	ff		 mov	 edx, DWORD PTR _nTestsPerformed$[ebp]
  00665	83 c2 01	 add	 edx, 1
  00668	89 95 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], edx
  0066e	e9 a0 00 00 00	 jmp	 $LN4@TestSector
$LN6@TestSector:

; 516  : 			}
; 517  : 			else if (strcmp(name, "Gost Grasshopper") == 0)

  00673	c7 85 44 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv504[ebp], OFFSET ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@
  0067d	8d 45 a0	 lea	 eax, DWORD PTR _name$[ebp]
  00680	89 85 40 f7 ff
	ff		 mov	 DWORD PTR tv502[ebp], eax
$LL68@TestSector:
  00686	8b 8d 40 f7 ff
	ff		 mov	 ecx, DWORD PTR tv502[ebp]
  0068c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0068e	88 95 3f f7 ff
	ff		 mov	 BYTE PTR tv507[ebp], dl
  00694	8b 85 44 f7 ff
	ff		 mov	 eax, DWORD PTR tv504[ebp]
  0069a	3a 10		 cmp	 dl, BYTE PTR [eax]
  0069c	75 46		 jne	 SHORT $LN69@TestSector
  0069e	80 bd 3f f7 ff
	ff 00		 cmp	 BYTE PTR tv507[ebp], 0
  006a5	74 31		 je	 SHORT $LN70@TestSector
  006a7	8b 8d 40 f7 ff
	ff		 mov	 ecx, DWORD PTR tv502[ebp]
  006ad	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  006b0	88 95 3e f7 ff
	ff		 mov	 BYTE PTR tv514[ebp], dl
  006b6	8b 85 44 f7 ff
	ff		 mov	 eax, DWORD PTR tv504[ebp]
  006bc	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  006bf	75 23		 jne	 SHORT $LN69@TestSector
  006c1	83 85 40 f7 ff
	ff 02		 add	 DWORD PTR tv502[ebp], 2
  006c8	83 85 44 f7 ff
	ff 02		 add	 DWORD PTR tv504[ebp], 2
  006cf	80 bd 3e f7 ff
	ff 00		 cmp	 BYTE PTR tv514[ebp], 0
  006d6	75 ae		 jne	 SHORT $LL68@TestSector
$LN70@TestSector:
  006d8	c7 85 38 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv519[ebp], 0
  006e2	eb 0b		 jmp	 SHORT $LN71@TestSector
$LN69@TestSector:
  006e4	1b c9		 sbb	 ecx, ecx
  006e6	83 d9 ff	 sbb	 ecx, -1
  006e9	89 8d 38 f7 ff
	ff		 mov	 DWORD PTR tv519[ebp], ecx
$LN71@TestSector:
  006ef	8b 95 38 f7 ff
	ff		 mov	 edx, DWORD PTR tv519[ebp]
  006f5	89 95 34 f7 ff
	ff		 mov	 DWORD PTR tv262[ebp], edx
  006fb	83 bd 34 f7 ff
	ff 00		 cmp	 DWORD PTR tv262[ebp], 0
  00702	75 0f		 jne	 SHORT $LN4@TestSector

; 518  : 				nTestsPerformed++;

  00704	8b 85 90 f7 ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  0070a	83 c0 01	 add	 eax, 1
  0070d	89 85 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax
$LN4@TestSector:

; 519  : 
; 520  : 
; 521  : 			if (crc == 0x9f5edd58)

  00713	81 7d f8 58 dd
	5e 9f		 cmp	 DWORD PTR _crc$[ebp], -1621172904 ; 9f5edd58H
  0071a	75 04		 jne	 SHORT $LN2@TestSector

; 522  : 				return FALSE;

  0071c	33 c0		 xor	 eax, eax
  0071e	eb 51		 jmp	 SHORT $LN53@TestSector
$LN2@TestSector:

; 523  : 
; 524  : 			DecryptBuffer(buf, sizeof (buf), ci);

  00720	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00723	51		 push	 ecx
  00724	6a 00		 push	 0
  00726	68 00 08 00 00	 push	 2048			; 00000800H
  0072b	8d 95 98 f7 ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00731	52		 push	 edx
  00732	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 525  : 
; 526  : 			if (GetCrc32(buf, sizeof (buf)) != 0x9f5edd58)

  00737	68 00 08 00 00	 push	 2048			; 00000800H
  0073c	8d 85 98 f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00742	50		 push	 eax
  00743	e8 00 00 00 00	 call	 _GetCrc32@8
  00748	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  0074d	74 04		 je	 SHORT $LN1@TestSector

; 527  : 				return FALSE;

  0074f	33 c0		 xor	 eax, eax
  00751	eb 1e		 jmp	 SHORT $LN53@TestSector
$LN1@TestSector:

; 528  : 
; 529  : 			nTestsPerformed++;

  00753	8b 8d 90 f7 ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00759	83 c1 01	 add	 ecx, 1
  0075c	89 8d 90 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 530  : 		}

  00762	e9 5d fd ff ff	 jmp	 $LN14@TestSector
$LN13@TestSector:

; 531  : 	}

  00767	e9 29 fd ff ff	 jmp	 $LN17@TestSector
$LN16@TestSector:

; 532  : 
; 533  : 	return 1;

  0076c	b8 01 00 00 00	 mov	 eax, 1
$LN53@TestSector:

; 534  : 	//return (nTestsPerformed == 20); // 2 * number of ea
; 535  : }

  00771	5f		 pop	 edi
  00772	5e		 pop	 esi
  00773	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00776	33 cd		 xor	 ecx, ebp
  00778	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0077d	8b e5		 mov	 esp, ebp
  0077f	5d		 pop	 ebp
  00780	c2 04 00	 ret	 4
  00783	90		 npad	 1
$LN72@TestSector:
  00784	00 00 00 00	 DD	 $LN30@TestSector
  00788	00 00 00 00	 DD	 $LN28@TestSector
  0078c	00 00 00 00	 DD	 $LN26@TestSector
  00790	00 00 00 00	 DD	 $LN24@TestSector
_TestSectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_CipherGetBlockSize@4:PROC
EXTRN	_EAGetFirstCipher@4:PROC
; Function compile flags: /Odtp
;	COMDAT _TestLegacySectorBufEncryption@4
_TEXT	SEGMENT
_blockSize$ = -1124					; size = 4
_nTestsPerformed$ = -1120				; size = 4
_nbrUnits$ = -1116					; size = 4
_buf$ = -1112						; size = 1024
_name$ = -88						; size = 64
__$ArrayPad$ = -20					; size = 4
_unitNo$ = -16						; size = 8
_i$ = -8						; size = 4
_crc$ = -4						; size = 4
_ci$ = 8						; size = 4
_TestLegacySectorBufEncryption@4 PROC			; COMDAT

; 546  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 64 04 00
	00		 sub	 esp, 1124		; 00000464H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 547  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 548  : 	unsigned int i;
; 549  : 	char name[64];
; 550  : 	unsigned __int32 crc;
; 551  : 	UINT64_STRUCT unitNo;
; 552  : 	uint32 nbrUnits;
; 553  : 	int blockSize;
; 554  : 	int nTestsPerformed = 0;

  00015	c7 85 a0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _nTestsPerformed$[ebp], 0

; 555  : 
; 556  : 	unitNo.Value = 0x0234567890ABCDEFull;

  0001f	c7 45 f0 ef cd
	ab 90		 mov	 DWORD PTR _unitNo$[ebp], -1867788817 ; 90abcdefH
  00026	c7 45 f4 78 56
	34 02		 mov	 DWORD PTR _unitNo$[ebp+4], 36984440 ; 02345678H

; 557  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;

  0002d	c7 85 a4 fb ff
	ff 02 00 00 00	 mov	 DWORD PTR _nbrUnits$[ebp], 2

; 558  : 
; 559  : 	for (i = 0; i < sizeof (buf); i++)

  00037	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003e	eb 09		 jmp	 SHORT $LN19@TestLegacy
$LN18@TestLegacy:
  00040	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00043	83 c0 01	 add	 eax, 1
  00046	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN19@TestLegacy:
  00049	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _i$[ebp], 1024 ; 00000400H
  00050	73 0f		 jae	 SHORT $LN17@TestLegacy

; 560  : 		buf[i] = (unsigned char) i;

  00052	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00055	8a 55 f8	 mov	 dl, BYTE PTR _i$[ebp]
  00058	88 94 0d a8 fb
	ff ff		 mov	 BYTE PTR _buf$[ebp+ecx], dl
  0005f	eb df		 jmp	 SHORT $LN18@TestLegacy
$LN17@TestLegacy:

; 561  : 
; 562  : 	for (i = 0; i < sizeof (ci->k2); i++)

  00061	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00068	eb 09		 jmp	 SHORT $LN16@TestLegacy
$LN15@TestLegacy:
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006d	83 c0 01	 add	 eax, 1
  00070	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN16@TestLegacy:
  00073	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0007a	73 11		 jae	 SHORT $LN14@TestLegacy

; 563  : 		ci->k2[i] = (unsigned char) i;

  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0007f	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00082	8a 55 f8	 mov	 dl, BYTE PTR _i$[ebp]
  00085	88 91 50 1d 00
	00		 mov	 BYTE PTR [ecx+7504], dl
  0008b	eb dd		 jmp	 SHORT $LN15@TestLegacy
$LN14@TestLegacy:

; 564  : 
; 565  : 	// Test all EAs
; 566  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0008d	e8 00 00 00 00	 call	 _EAGetFirst@0
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00095	89 01		 mov	 DWORD PTR [ecx], eax
  00097	eb 10		 jmp	 SHORT $LN13@TestLegacy
$LN12@TestLegacy:
  00099	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0009c	8b 02		 mov	 eax, DWORD PTR [edx]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _EAGetNext@4
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@TestLegacy:
  000a9	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000ac	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000af	0f 84 a3 01 00
	00		 je	 $LN11@TestLegacy

; 567  : 	{
; 568  : 		EAGetName (name, ci->ea);

  000b5	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	51		 push	 ecx
  000bb	8d 55 a8	 lea	 edx, DWORD PTR _name$[ebp]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 _EAGetName@8

; 569  : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  000c4	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _EAGetFirstCipher@4
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 _CipherGetBlockSize@4
  000d5	89 85 9c fb ff
	ff		 mov	 DWORD PTR _blockSize$[ebp], eax

; 570  : 
; 571  : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  000db	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  000de	83 c2 08	 add	 edx, 8
  000e1	52		 push	 edx
  000e2	8d 85 a8 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  000ec	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 _EAInit@12
  000f4	83 f8 11	 cmp	 eax, 17			; 00000011H
  000f7	75 07		 jne	 SHORT $LN10@TestLegacy

; 572  : 			return FALSE;

  000f9	33 c0		 xor	 eax, eax
  000fb	e9 5d 01 00 00	 jmp	 $LN20@TestLegacy
$LN10@TestLegacy:

; 573  : 
; 574  : 		// Test all deprecated modes of operation
; 575  : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 576  : 			ci->mode != 0;
; 577  : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  00100	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00103	8b 08		 mov	 ecx, DWORD PTR [eax]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  0010b	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00111	eb 18		 jmp	 SHORT $LN9@TestLegacy
$LN8@TestLegacy:
  00113	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  00116	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00119	51		 push	 ecx
  0011a	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0011d	8b 02		 mov	 eax, DWORD PTR [edx]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _EAGetNextMode@8
  00125	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00128	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN9@TestLegacy:
  0012b	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0012e	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00132	0f 84 1b 01 00
	00		 je	 $LN7@TestLegacy

; 578  : 		{
; 579  : 			// Skip modes that are not deprecated
; 580  : 			if (ci->mode == XTS || ci->mode == XTS8)

  00138	8b 45 08	 mov	 eax, DWORD PTR _ci$[ebp]
  0013b	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0013f	74 09		 je	 SHORT $LN5@TestLegacy
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  00144	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00148	75 02		 jne	 SHORT $LN6@TestLegacy
$LN5@TestLegacy:

; 581  : 				continue;

  0014a	eb c7		 jmp	 SHORT $LN8@TestLegacy
$LN6@TestLegacy:

; 582  : 
; 583  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  0014c	8b 55 08	 mov	 edx, DWORD PTR _ci$[ebp]
  0014f	52		 push	 edx
  00150	8b 85 a4 fb ff
	ff		 mov	 eax, DWORD PTR _nbrUnits$[ebp]
  00156	50		 push	 eax
  00157	8d 4d f0	 lea	 ecx, DWORD PTR _unitNo$[ebp]
  0015a	51		 push	 ecx
  0015b	8d 95 a8 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 584  : 			crc = GetCrc32 (buf, sizeof (buf));

  00167	68 00 04 00 00	 push	 1024			; 00000400H
  0016c	8d 85 a8 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _GetCrc32@8
  00178	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax

; 585  : 
; 586  : 			if (crc == 0xb70b4c26)

  0017b	81 7d fc 26 4c
	0b b7		 cmp	 DWORD PTR _crc$[ebp], -1223996378 ; b70b4c26H
  00182	75 07		 jne	 SHORT $LN4@TestLegacy

; 587  : 				return FALSE;

  00184	33 c0		 xor	 eax, eax
  00186	e9 d2 00 00 00	 jmp	 $LN20@TestLegacy
$LN4@TestLegacy:

; 588  : 
; 589  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 95 a4 fb ff
	ff		 mov	 edx, DWORD PTR _nbrUnits$[ebp]
  00195	52		 push	 edx
  00196	8d 45 f0	 lea	 eax, DWORD PTR _unitNo$[ebp]
  00199	50		 push	 eax
  0019a	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  001a0	51		 push	 ecx
  001a1	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 590  : 
; 591  : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  001a6	68 00 04 00 00	 push	 1024			; 00000400H
  001ab	8d 95 a8 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  001b1	52		 push	 edx
  001b2	e8 00 00 00 00	 call	 _GetCrc32@8
  001b7	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  001bc	74 07		 je	 SHORT $LN3@TestLegacy

; 592  : 				return FALSE;

  001be	33 c0		 xor	 eax, eax
  001c0	e9 98 00 00 00	 jmp	 $LN20@TestLegacy
$LN3@TestLegacy:

; 593  : 
; 594  : 			nTestsPerformed++;

  001c5	8b 85 a0 fb ff
	ff		 mov	 eax, DWORD PTR _nTestsPerformed$[ebp]
  001cb	83 c0 01	 add	 eax, 1
  001ce	89 85 a0 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], eax

; 595  : 
; 596  : 			EncryptBuffer (buf, sizeof (buf), ci);

  001d4	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  001d7	51		 push	 ecx
  001d8	6a 00		 push	 0
  001da	68 00 04 00 00	 push	 1024			; 00000400H
  001df	8d 95 a8 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  001e5	52		 push	 edx
  001e6	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 597  : 			crc = GetCrc32 (buf, sizeof (buf));

  001eb	68 00 04 00 00	 push	 1024			; 00000400H
  001f0	8d 85 a8 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 _GetCrc32@8
  001fc	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax

; 598  : 
; 599  : 			if (crc == 0xb70b4c26)

  001ff	81 7d fc 26 4c
	0b b7		 cmp	 DWORD PTR _crc$[ebp], -1223996378 ; b70b4c26H
  00206	75 04		 jne	 SHORT $LN2@TestLegacy

; 600  : 				return FALSE;

  00208	33 c0		 xor	 eax, eax
  0020a	eb 51		 jmp	 SHORT $LN20@TestLegacy
$LN2@TestLegacy:

; 601  : 
; 602  : 			DecryptBuffer (buf, sizeof (buf), ci);

  0020c	8b 4d 08	 mov	 ecx, DWORD PTR _ci$[ebp]
  0020f	51		 push	 ecx
  00210	6a 00		 push	 0
  00212	68 00 04 00 00	 push	 1024			; 00000400H
  00217	8d 95 a8 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0021d	52		 push	 edx
  0021e	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 603  : 
; 604  : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00223	68 00 04 00 00	 push	 1024			; 00000400H
  00228	8d 85 a8 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 _GetCrc32@8
  00234	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00239	74 04		 je	 SHORT $LN1@TestLegacy

; 605  : 				return FALSE;

  0023b	33 c0		 xor	 eax, eax
  0023d	eb 1e		 jmp	 SHORT $LN20@TestLegacy
$LN1@TestLegacy:

; 606  : 
; 607  : 			nTestsPerformed++;

  0023f	8b 8d a0 fb ff
	ff		 mov	 ecx, DWORD PTR _nTestsPerformed$[ebp]
  00245	83 c1 01	 add	 ecx, 1
  00248	89 8d a0 fb ff
	ff		 mov	 DWORD PTR _nTestsPerformed$[ebp], ecx

; 608  : 		}

  0024e	e9 c0 fe ff ff	 jmp	 $LN8@TestLegacy
$LN7@TestLegacy:

; 609  : 	}

  00253	e9 41 fe ff ff	 jmp	 $LN12@TestLegacy
$LN11@TestLegacy:

; 610  : 	return 1;//(nTestsPerformed == 86);

  00258	b8 01 00 00 00	 mov	 eax, 1
$LN20@TestLegacy:

; 611  : }

  0025d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00260	33 cd		 xor	 ecx, ebp
  00262	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c2 04 00	 ret	 4
_TestLegacySectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	_AutoTestAlgorithms@0
EXTRN	_EnableHwEncryption@4:PROC
EXTRN	_IsHwEncryptionEnabled@0:PROC
; Function compile flags: /Odtp
;	COMDAT _AutoTestAlgorithms@0
_TEXT	SEGMENT
_result$ = -8						; size = 4
_hwEncryptionEnabled$ = -4				; size = 4
_AutoTestAlgorithms@0 PROC				; COMDAT

; 665  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 666  : 	BOOL result = TRUE;

  00008	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1

; 667  : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  0000f	e8 00 00 00 00	 call	 _IsHwEncryptionEnabled@0
  00014	89 45 fc	 mov	 DWORD PTR _hwEncryptionEnabled$[ebp], eax

; 668  : 
; 669  : 	EnableHwEncryption (FALSE);

  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 670  : 
; 671  : 	if (!DoAutoTestAlgorithms())

  0001e	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  00023	85 c0		 test	 eax, eax
  00025	75 07		 jne	 SHORT $LN2@AutoTestAl

; 672  : 		result = FALSE;

  00027	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@AutoTestAl:

; 673  : 
; 674  : 	EnableHwEncryption (TRUE);

  0002e	6a 01		 push	 1
  00030	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 675  : 
; 676  : 	if (!DoAutoTestAlgorithms())

  00035	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  0003a	85 c0		 test	 eax, eax
  0003c	75 07		 jne	 SHORT $LN1@AutoTestAl

; 677  : 		result = FALSE;

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN1@AutoTestAl:

; 678  : 
; 679  : 	EnableHwEncryption (hwEncryptionEnabled);

  00045	8b 45 fc	 mov	 eax, DWORD PTR _hwEncryptionEnabled$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 680  : 	return result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _result$[ebp]

; 681  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_AutoTestAlgorithms@0 ENDP
_TEXT	ENDS
PUBLIC	_test_pkcs5@0
EXTRN	_crypto_close@4:PROC
EXTRN	_crc32_selftests@0:PROC
EXTRN	_crypto_open@0:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT _DoAutoTestAlgorithms@0
_TEXT	SEGMENT
_bFailed$ = -8						; size = 4
_ci$ = -4						; size = 4
_DoAutoTestAlgorithms@0 PROC				; COMDAT

; 622  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 623  : 	PCRYPTO_INFO ci;
; 624  : 	BOOL bFailed = FALSE;

  00008	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 0

; 625  : 
; 626  : 	ci = crypto_open ();

  0000f	e8 00 00 00 00	 call	 _crypto_open@0
  00014	89 45 fc	 mov	 DWORD PTR _ci$[ebp], eax

; 627  : 	if (!ci)

  00017	83 7d fc 00	 cmp	 DWORD PTR _ci$[ebp], 0
  0001b	75 04		 jne	 SHORT $LN4@DoAutoTest

; 628  : 		return FALSE;

  0001d	33 c0		 xor	 eax, eax
  0001f	eb 59		 jmp	 SHORT $LN5@DoAutoTest
$LN4@DoAutoTest:

; 629  : 
; 630  : 	memset (ci, 0, sizeof (*ci));

  00021	68 10 1f 00 00	 push	 7952			; 00001f10H
  00026	6a 00		 push	 0
  00028	8b 45 fc	 mov	 eax, DWORD PTR _ci$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _memset
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 631  : 
; 632  : 	/* GOST Cipher test here */
; 633  : 	
; 634  : 	/* PKCS #5 and HMACs */
; 635  : 	if (!test_pkcs5 ())

  00034	e8 00 00 00 00	 call	 _test_pkcs5@0
  00039	85 c0		 test	 eax, eax
  0003b	75 07		 jne	 SHORT $LN3@DoAutoTest

; 636  : 		bFailed = TRUE;

  0003d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN3@DoAutoTest:

; 637  : 
; 638  : 	/* CRC-32 */
; 639  : 	if (!crc32_selftests ())

  00044	e8 00 00 00 00	 call	 _crc32_selftests@0
  00049	85 c0		 test	 eax, eax
  0004b	75 07		 jne	 SHORT $LN2@DoAutoTest

; 640  : 		bFailed = TRUE;

  0004d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN2@DoAutoTest:

; 641  : 
; 642  : 	/* GF multiplicator */
; 643  : #if 0
; 644  : 	if (!GfMulSelfTest ())
; 645  : 		bFailed = TRUE;
; 646  : #endif
; 647  : 
; 648  : 	/* Sector and buffer related algorithms */
; 649  : 	if (!TestSectorBufEncryption (ci))

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _ci$[ebp]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _TestSectorBufEncryption@4
  0005d	85 c0		 test	 eax, eax
  0005f	75 07		 jne	 SHORT $LN1@DoAutoTest

; 650  : 		bFailed = TRUE;

  00061	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFailed$[ebp], 1
$LN1@DoAutoTest:

; 651  : 	
; 652  : 	crypto_close (ci);

  00068	8b 55 fc	 mov	 edx, DWORD PTR _ci$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _crypto_close@4

; 653  : 	return !bFailed;

  00071	33 c0		 xor	 eax, eax
  00073	83 7d f8 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00077	0f 94 c0	 sete	 al
$LN5@DoAutoTest:

; 654  : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_DoAutoTestAlgorithms@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_whirlpool@0
EXTRN	_hmac_whirlpool@24:PROC
; Function compile flags: /Odtp
;	COMDAT _test_hmac_whirlpool@0
_TEXT	SEGMENT
tv68 = -88						; size = 4
tv86 = -81						; size = 1
tv83 = -80						; size = 4
tv80 = -76						; size = 4
_digest$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_whirlpool@0 PROC				; COMDAT

; 691  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 58	 sub	 esp, 88			; 00000058H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 692  : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 693  : 
; 694  : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _hmac_whirlpool_test_data
  00019	89 45 b4	 mov	 DWORD PTR tv80[ebp], eax
  0001c	8b 4d b4	 mov	 ecx, DWORD PTR tv80[ebp]
  0001f	83 c1 01	 add	 ecx, 1
  00022	89 4d b0	 mov	 DWORD PTR tv83[ebp], ecx
$LL4@test_hmac_:
  00025	8b 55 b4	 mov	 edx, DWORD PTR tv80[ebp]
  00028	8a 02		 mov	 al, BYTE PTR [edx]
  0002a	88 45 af	 mov	 BYTE PTR tv86[ebp], al
  0002d	83 45 b4 01	 add	 DWORD PTR tv80[ebp], 1
  00031	80 7d af 00	 cmp	 BYTE PTR tv86[ebp], 0
  00035	75 ee		 jne	 SHORT $LL4@test_hmac_
  00037	8b 4d b4	 mov	 ecx, DWORD PTR tv80[ebp]
  0003a	2b 4d b0	 sub	 ecx, DWORD PTR tv83[ebp]
  0003d	89 4d a8	 mov	 DWORD PTR tv68[ebp], ecx
  00040	6a 40		 push	 64			; 00000040H
  00042	8d 55 b8	 lea	 edx, DWORD PTR _digest$[ebp]
  00045	52		 push	 edx
  00046	8b 45 a8	 mov	 eax, DWORD PTR tv68[ebp]
  00049	50		 push	 eax
  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_whirlpool_test_data
  00050	51		 push	 ecx
  00051	6a 40		 push	 64			; 00000040H
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_whirlpool_test_key
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _hmac_whirlpool@24

; 695  : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  0005f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00064	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_whirlpool_test_vectors
  0006a	8d 75 b8	 lea	 esi, DWORD PTR _digest$[ebp]
  0006d	33 c0		 xor	 eax, eax
  0006f	f3 a7		 repe cmpsd
  00071	74 04		 je	 SHORT $LN1@test_hmac_

; 696  : 		return FALSE;

  00073	33 c0		 xor	 eax, eax
  00075	eb 05		 jmp	 SHORT $LN2@test_hmac_
$LN1@test_hmac_:

; 697  : 
; 698  : 	return TRUE;

  00077	b8 01 00 00 00	 mov	 eax, 1
$LN2@test_hmac_:

; 699  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_test_hmac_whirlpool@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_gosthash@0
EXTRN	_hmac_gosthash@20:PROC
; Function compile flags: /Odtp
;	COMDAT _test_hmac_gosthash@0
_TEXT	SEGMENT
tv67 = -52						; size = 4
tv85 = -45						; size = 1
tv82 = -44						; size = 4
tv79 = -40						; size = 4
_digest$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_test_hmac_gosthash@0 PROC				; COMDAT

; 709  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 34	 sub	 esp, 52			; 00000034H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 710  : 	unsigned char digest[GOSTHASH_DIGESTSIZE];
; 711  : 	hmac_gosthash(hmac_gosthash_test_key, 64, hmac_gosthash_test_data, (int) strlen (hmac_gosthash_test_data), digest);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _hmac_gosthash_test_data
  00019	89 45 d8	 mov	 DWORD PTR tv79[ebp], eax
  0001c	8b 4d d8	 mov	 ecx, DWORD PTR tv79[ebp]
  0001f	83 c1 01	 add	 ecx, 1
  00022	89 4d d4	 mov	 DWORD PTR tv82[ebp], ecx
$LL4@test_hmac_@2:
  00025	8b 55 d8	 mov	 edx, DWORD PTR tv79[ebp]
  00028	8a 02		 mov	 al, BYTE PTR [edx]
  0002a	88 45 d3	 mov	 BYTE PTR tv85[ebp], al
  0002d	83 45 d8 01	 add	 DWORD PTR tv79[ebp], 1
  00031	80 7d d3 00	 cmp	 BYTE PTR tv85[ebp], 0
  00035	75 ee		 jne	 SHORT $LL4@test_hmac_@2
  00037	8b 4d d8	 mov	 ecx, DWORD PTR tv79[ebp]
  0003a	2b 4d d4	 sub	 ecx, DWORD PTR tv82[ebp]
  0003d	89 4d cc	 mov	 DWORD PTR tv67[ebp], ecx
  00040	8d 55 dc	 lea	 edx, DWORD PTR _digest$[ebp]
  00043	52		 push	 edx
  00044	8b 45 cc	 mov	 eax, DWORD PTR tv67[ebp]
  00047	50		 push	 eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_gosthash_test_data
  0004e	51		 push	 ecx
  0004f	6a 40		 push	 64			; 00000040H
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_gosthash_test_key
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _hmac_gosthash@20

; 712  : 	if (memcmp (digest, hmac_gosthash_test_vectors, GOSTHASH_DIGESTSIZE) != 0)

  0005d	b9 08 00 00 00	 mov	 ecx, 8
  00062	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_gosthash_test_vectors
  00068	8d 75 dc	 lea	 esi, DWORD PTR _digest$[ebp]
  0006b	33 c0		 xor	 eax, eax
  0006d	f3 a7		 repe cmpsd
  0006f	74 04		 je	 SHORT $LN1@test_hmac_@2

; 713  : 		return FALSE;

  00071	33 c0		 xor	 eax, eax
  00073	eb 05		 jmp	 SHORT $LN2@test_hmac_@2
$LN1@test_hmac_@2:

; 714  : 
; 715  : 	return TRUE;

  00075	b8 01 00 00 00	 mov	 eax, 1
$LN2@test_hmac_@2:

; 716  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_test_hmac_gosthash@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_stribog@0
; Function compile flags: /Odtp
;	COMDAT _test_hmac_stribog@0
_TEXT	SEGMENT
tv67 = -88						; size = 4
tv85 = -81						; size = 1
tv82 = -80						; size = 4
tv79 = -76						; size = 4
_digest$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_stribog@0 PROC				; COMDAT

; 726  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 58	 sub	 esp, 88			; 00000058H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 727  : 	unsigned char digest[STRIBOG_DIGESTSIZE];
; 728  : 	hmac_stribog(hmac_stribog_test_key, 64, hmac_stribog_test_data, (int) strlen (hmac_stribog_test_data), digest);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR _hmac_stribog_test_data
  00019	89 45 b4	 mov	 DWORD PTR tv79[ebp], eax
  0001c	8b 4d b4	 mov	 ecx, DWORD PTR tv79[ebp]
  0001f	83 c1 01	 add	 ecx, 1
  00022	89 4d b0	 mov	 DWORD PTR tv82[ebp], ecx
$LL4@test_hmac_@3:
  00025	8b 55 b4	 mov	 edx, DWORD PTR tv79[ebp]
  00028	8a 02		 mov	 al, BYTE PTR [edx]
  0002a	88 45 af	 mov	 BYTE PTR tv85[ebp], al
  0002d	83 45 b4 01	 add	 DWORD PTR tv79[ebp], 1
  00031	80 7d af 00	 cmp	 BYTE PTR tv85[ebp], 0
  00035	75 ee		 jne	 SHORT $LL4@test_hmac_@3
  00037	8b 4d b4	 mov	 ecx, DWORD PTR tv79[ebp]
  0003a	2b 4d b0	 sub	 ecx, DWORD PTR tv82[ebp]
  0003d	89 4d a8	 mov	 DWORD PTR tv67[ebp], ecx
  00040	8d 55 b8	 lea	 edx, DWORD PTR _digest$[ebp]
  00043	52		 push	 edx
  00044	8b 45 a8	 mov	 eax, DWORD PTR tv67[ebp]
  00047	50		 push	 eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_stribog_test_data
  0004e	51		 push	 ecx
  0004f	6a 40		 push	 64			; 00000040H
  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_stribog_test_key
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _hmac_stribog@20

; 729  : 	if (memcmp (digest, hmac_stribog_test_vectors, STRIBOG_DIGESTSIZE) != 0)

  0005d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00062	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_stribog_test_vectors
  00068	8d 75 b8	 lea	 esi, DWORD PTR _digest$[ebp]
  0006b	33 c0		 xor	 eax, eax
  0006d	f3 a7		 repe cmpsd
  0006f	74 04		 je	 SHORT $LN1@test_hmac_@3

; 730  : 		return FALSE;

  00071	33 c0		 xor	 eax, eax
  00073	eb 05		 jmp	 SHORT $LN2@test_hmac_@3
$LN1@test_hmac_@3:

; 731  : 
; 732  : 	return TRUE;

  00075	b8 01 00 00 00	 mov	 eax, 1
$LN2@test_hmac_@3:

; 733  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	33 cd		 xor	 ecx, ebp
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_test_hmac_stribog@0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
EXTRN	_derive_key_stribog@28:PROC
EXTRN	_derive_key_gosthash@28:PROC
EXTRN	_derive_key_whirlpool@28:PROC
;	COMDAT ??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@ DB 0c7H, 013H, 'V', 0b6H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@ DB '}S', 0e0H, '~', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
text$s	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@ DB 'P|6o', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08NLHBPEGP@password?$AA@FNODOBFM@ DB 'password', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@ DB 012H, '4Vx', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _test_pkcs5@0
_TEXT	SEGMENT
_dk$ = -152						; size = 144
__$ArrayPad$ = -4					; size = 4
_test_pkcs5@0 PROC					; COMDAT

; 743  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 744  : 	char dk[144];
; 745  : 
; 746  : 	/* HMAC-Whirlpool tests */
; 747  : 	if (test_hmac_whirlpool() == FALSE)

  00017	e8 00 00 00 00	 call	 _test_hmac_whirlpool@0
  0001c	85 c0		 test	 eax, eax
  0001e	75 07		 jne	 SHORT $LN7@test_pkcs5

; 748  : 		return FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	e9 f3 00 00 00	 jmp	 $LN8@test_pkcs5
$LN7@test_pkcs5:

; 749  : 
; 750  : 	/* HMAC-GOSTHASH tests */
; 751  : 	if (test_hmac_gosthash() == FALSE)

  00027	e8 00 00 00 00	 call	 _test_hmac_gosthash@0
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN6@test_pkcs5

; 752  : 		return FALSE;

  00030	33 c0		 xor	 eax, eax
  00032	e9 e3 00 00 00	 jmp	 $LN8@test_pkcs5
$LN6@test_pkcs5:

; 753  : 
; 754  : 	/* HMAC-Stribog tests */
; 755  : 	if (test_hmac_stribog() == FALSE)

  00037	e8 00 00 00 00	 call	 _test_hmac_stribog@0
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN5@test_pkcs5

; 756  : 		return FALSE;

  00040	33 c0		 xor	 eax, eax
  00042	e9 d3 00 00 00	 jmp	 $LN8@test_pkcs5
$LN5@test_pkcs5:

; 757  : 
; 758  : #ifndef GST_WINDOWS_BOOT
; 759  : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 760  : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00047	6a 04		 push	 4
  00049	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  0004f	50		 push	 eax
  00050	6a 05		 push	 5
  00052	6a 04		 push	 4
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  00059	6a 08		 push	 8
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00060	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 761  : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
  0006a	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  00070	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00072	74 07		 je	 SHORT $LN4@test_pkcs5

; 762  : 		return FALSE;

  00074	33 c0		 xor	 eax, eax
  00076	e9 9f 00 00 00	 jmp	 $LN8@test_pkcs5
$LN4@test_pkcs5:

; 763  : 
; 764  : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 765  : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  0007b	6a 60		 push	 96			; 00000060H
  0007d	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00083	50		 push	 eax
  00084	6a 05		 push	 5
  00086	6a 04		 push	 4
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  0008d	6a 08		 push	 8
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00094	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 766  : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  00099	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0009e	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
  000a3	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  000a9	33 d2		 xor	 edx, edx
  000ab	f3 a7		 repe cmpsd
  000ad	74 04		 je	 SHORT $LN3@test_pkcs5

; 767  : 		return FALSE;

  000af	33 c0		 xor	 eax, eax
  000b1	eb 67		 jmp	 SHORT $LN8@test_pkcs5
$LN3@test_pkcs5:

; 768  : 
; 769  : 	/* PKCS-5 test 1 with HMAC-GostHash used as the PRF */
; 770  : 	derive_key_gosthash ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000b3	6a 04		 push	 4
  000b5	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000bb	50		 push	 eax
  000bc	6a 05		 push	 5
  000be	6a 04		 push	 4
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000c5	6a 08		 push	 8
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  000cc	e8 00 00 00 00	 call	 _derive_key_gosthash@28

; 771  : 	if (memcmp (dk, "\x7d\x53\xe0\x7e", 4) != 0)

  000d1	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@
  000d6	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  000dc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000de	74 04		 je	 SHORT $LN2@test_pkcs5

; 772  : 		return FALSE;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 36		 jmp	 SHORT $LN8@test_pkcs5
$LN2@test_pkcs5:

; 773  : #endif
; 774  : 
; 775  : 	/* PKCS-5 test 1 with HMAC-Stribog used as the PRF */
; 776  : 	derive_key_stribog ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000e4	6a 04		 push	 4
  000e6	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000ec	50		 push	 eax
  000ed	6a 05		 push	 5
  000ef	6a 04		 push	 4
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000f6	6a 08		 push	 8
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  000fd	e8 00 00 00 00	 call	 _derive_key_stribog@28

; 777  : 	if (memcmp (dk, "\xc7\x13\x56\xb6", 4) != 0)

  00102	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@
  00107	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _dk$[ebp]
  0010d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0010f	74 04		 je	 SHORT $LN1@test_pkcs5

; 778  : 		return FALSE;

  00111	33 c0		 xor	 eax, eax
  00113	eb 05		 jmp	 SHORT $LN8@test_pkcs5
$LN1@test_pkcs5:

; 779  : 
; 780  : 	return TRUE;

  00115	b8 01 00 00 00	 mov	 eax, 1
$LN8@test_pkcs5:

; 781  : }

  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011f	33 cd		 xor	 ecx, ebp
  00121	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
_test_pkcs5@0 ENDP
_TEXT	ENDS
END
