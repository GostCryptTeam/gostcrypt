; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	GetWipePassCount
;	COMDAT pdata
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\common\wipe.c
pdata	SEGMENT
$pdata$GetWipePassCount DD imagerel $LN11
	DD	imagerel $LN11+95
	DD	imagerel $unwind$GetWipePassCount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetWipePassCount DD 010401H
	DD	06204H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT GetWipePassCount
_TEXT	SEGMENT
algorithm$ = 64
GetWipePassCount PROC					; COMDAT

; 201  : {

$LN11:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 202  : 	switch (algorithm)

  00004	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00007	74 4c		 je	 SHORT $LN5@GetWipePas
  00009	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  0000f	74 3d		 je	 SHORT $LN4@GetWipePas
  00011	81 f9 bc 02 00
	00		 cmp	 ecx, 700		; 000002bcH
  00017	74 2e		 je	 SHORT $LN3@GetWipePas
  00019	81 f9 ac 0d 00
	00		 cmp	 ecx, 3500		; 00000dacH
  0001f	74 1f		 je	 SHORT $LN2@GetWipePas

; 215  : 
; 216  : 	default:
; 217  : 		GST_THROW_FATAL_EXCEPTION;

  00021	45 33 c9	 xor	 r9d, r9d
  00024	45 33 c0	 xor	 r8d, r8d
  00027	ba d9 00 00 00	 mov	 edx, 217		; 000000d9H
  0002c	41 8d 49 29	 lea	 ecx, QWORD PTR [r9+41]
  00030	48 c7 44 24 20
	54 53 47 00	 mov	 QWORD PTR [rsp+32], 4674388 ; 00475354H
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
  0003f	cc		 int	 3
$LN2@GetWipePas:

; 212  : 
; 213  : 	case GST_WIPE_35_GUTMANN:
; 214  : 		return 35;

  00040	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  00045	eb 13		 jmp	 SHORT $LN8@GetWipePas
$LN3@GetWipePas:

; 209  : 
; 210  : 	case GST_WIPE_7_DOD_5220:
; 211  : 		return 7;

  00047	b8 07 00 00 00	 mov	 eax, 7
  0004c	eb 0c		 jmp	 SHORT $LN8@GetWipePas
$LN4@GetWipePas:

; 206  : 
; 207  : 	case GST_WIPE_3_DOD_5220:
; 208  : 		return 3;

  0004e	b8 03 00 00 00	 mov	 eax, 3
  00053	eb 05		 jmp	 SHORT $LN8@GetWipePas
$LN5@GetWipePas:

; 203  : 	{
; 204  : 	case GST_WIPE_1_RAND:
; 205  : 		return 1;

  00055	b8 01 00 00 00	 mov	 eax, 1
$LN8@GetWipePas:

; 218  : 	}
; 219  : 
; 220  : 	return 0;	// Prevent compiler warnings
; 221  : }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
$LN10@GetWipePas:
GetWipePassCount ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Wipe35Gutmann DD imagerel Wipe35Gutmann
	DD	imagerel Wipe35Gutmann+212
	DD	imagerel $unwind$Wipe35Gutmann
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Wipe35Gutmann DD 020601H
	DD	030023206H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT Wipe35Gutmann
_TEXT	SEGMENT
wipePat3$ = 48
pass$ = 48
buffer$ = 56
size$ = 64
Wipe35Gutmann PROC					; COMDAT

; 134  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 135  : 	byte wipePat3[] = { 0x92, 0x49, 0x24 };
; 136  : 	int wipePat3Pos;
; 137  : 	size_t i;
; 138  : 
; 139  : 	switch (pass)

  00006	33 db		 xor	 ebx, ebx
  00008	83 f9 1a	 cmp	 ecx, 26
  0000b	4c 8b da	 mov	 r11, rdx
  0000e	44 8b c9	 mov	 r9d, ecx
  00011	c6 44 24 30 92	 mov	 BYTE PTR wipePat3$[rsp], 146 ; 00000092H
  00016	c6 44 24 31 49	 mov	 BYTE PTR wipePat3$[rsp+1], 73 ; 00000049H
  0001b	c6 44 24 32 24	 mov	 BYTE PTR wipePat3$[rsp+2], 36 ; 00000024H
  00020	7f 1a		 jg	 SHORT $LN17@Wipe35Gutm
  00022	74 4b		 je	 SHORT $LN10@Wipe35Gutm
  00024	83 e9 05	 sub	 ecx, 5
  00027	74 0c		 je	 SHORT $LN12@Wipe35Gutm
  00029	83 e9 01	 sub	 ecx, 1
  0002c	75 18		 jne	 SHORT $LN20@Wipe35Gutm

; 144  : 
; 145  : 	case 6:
; 146  : 		memset (buffer, 0xaa, size);

  0002e	ba aa 00 00 00	 mov	 edx, 170		; 000000aaH

; 147  : 		break;

  00033	eb 2c		 jmp	 SHORT $LN21@Wipe35Gutm
$LN12@Wipe35Gutm:

; 140  : 	{
; 141  : 	case 5:
; 142  : 		memset (buffer, 0x55, size);

  00035	ba 55 00 00 00	 mov	 edx, 85			; 00000055H

; 143  : 		break;

  0003a	eb 25		 jmp	 SHORT $LN21@Wipe35Gutm
$LN17@Wipe35Gutm:

; 135  : 	byte wipePat3[] = { 0x92, 0x49, 0x24 };
; 136  : 	int wipePat3Pos;
; 137  : 	size_t i;
; 138  : 
; 139  : 	switch (pass)

  0003c	83 e9 1b	 sub	 ecx, 27
  0003f	74 3b		 je	 SHORT $LN9@Wipe35Gutm
  00041	83 e9 01	 sub	 ecx, 1
  00044	74 2e		 je	 SHORT $LN8@Wipe35Gutm
$LN20@Wipe35Gutm:
  00046	83 e9 01	 sub	 ecx, 1
  00049	74 24		 je	 SHORT $LN10@Wipe35Gutm
  0004b	83 e9 01	 sub	 ecx, 1
  0004e	74 2c		 je	 SHORT $LN9@Wipe35Gutm
  00050	83 f9 01	 cmp	 ecx, 1
  00053	74 1f		 je	 SHORT $LN8@Wipe35Gutm

; 178  : 		}
; 179  : 		break;
; 180  : 
; 181  : 	default:
; 182  : 		if (pass >= 10 && pass <= 25)

  00055	41 8d 51 f6	 lea	 edx, DWORD PTR [r9-10]
  00059	83 fa 0f	 cmp	 edx, 15
  0005c	77 0d		 ja	 SHORT $LN2@Wipe35Gutm

; 183  : 			memset (buffer, (pass - 10) * 0x11, size);

  0005e	6b d2 11	 imul	 edx, 17
$LN21@Wipe35Gutm:
  00061	49 8b cb	 mov	 rcx, r11
  00064	e8 00 00 00 00	 call	 memset

; 184  : 		else

  00069	eb 5e		 jmp	 SHORT $LN4@Wipe35Gutm
$LN2@Wipe35Gutm:

; 185  : 			return FALSE;

  0006b	33 c0		 xor	 eax, eax
  0006d	eb 5f		 jmp	 SHORT $LN15@Wipe35Gutm
$LN10@Wipe35Gutm:

; 148  : 
; 149  : 	case 7:
; 150  : 	case 26:
; 151  : 	case 29:
; 152  : 		wipePat3Pos = 0;

  0006f	44 8b d3	 mov	 r10d, ebx

; 153  : 		goto wipe3;

  00072	eb 0e		 jmp	 SHORT $wipe3$26454
$LN8@Wipe35Gutm:

; 159  : 		goto wipe3;
; 160  : 
; 161  : 	case 9:
; 162  : 	case 28:
; 163  : 	case 31:
; 164  : 		wipePat3Pos = 2;

  00074	41 ba 02 00 00
	00		 mov	 r10d, 2
  0007a	eb 06		 jmp	 SHORT $wipe3$26454
$LN9@Wipe35Gutm:

; 154  : 
; 155  : 	case 8:
; 156  : 	case 27:
; 157  : 	case 30:
; 158  : 		wipePat3Pos = 1;

  0007c	41 ba 01 00 00
	00		 mov	 r10d, 1
$wipe3$26454:

; 165  : 		goto wipe3;
; 166  : 
; 167  : wipe3:
; 168  : 		if (pass >= 29)

  00082	41 83 f9 1d	 cmp	 r9d, 29
  00086	7c 0f		 jl	 SHORT $LN7@Wipe35Gutm

; 169  : 		{
; 170  : 			wipePat3[0] = ~wipePat3[0];

  00088	c6 44 24 30 6d	 mov	 BYTE PTR wipePat3$[rsp], 109 ; 0000006dH

; 171  : 			wipePat3[1] = ~wipePat3[1];

  0008d	c6 44 24 31 b6	 mov	 BYTE PTR wipePat3$[rsp+1], 182 ; 000000b6H

; 172  : 			wipePat3[2] = ~wipePat3[2];

  00092	c6 44 24 32 db	 mov	 BYTE PTR wipePat3$[rsp+2], 219 ; 000000dbH
$LN7@Wipe35Gutm:

; 173  : 		}
; 174  : 
; 175  : 		for (i = 0; i < size; ++i)

  00097	4c 3b c3	 cmp	 r8, rbx
  0009a	76 2d		 jbe	 SHORT $LN4@Wipe35Gutm
$LL6@Wipe35Gutm:

; 176  : 		{
; 177  : 			buffer[i] = wipePat3[wipePat3Pos++ % 3];

  0009c	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000a1	41 f7 ea	 imul	 r10d
  000a4	8b c2		 mov	 eax, edx
  000a6	c1 e8 1f	 shr	 eax, 31
  000a9	03 d0		 add	 edx, eax
  000ab	8d 0c 52	 lea	 ecx, DWORD PTR [rdx+rdx*2]
  000ae	41 8b d2	 mov	 edx, r10d
  000b1	41 ff c2	 inc	 r10d
  000b4	2b d1		 sub	 edx, ecx
  000b6	48 63 ca	 movsxd	 rcx, edx
  000b9	8a 54 0c 30	 mov	 dl, BYTE PTR wipePat3$[rsp+rcx]
  000bd	42 88 14 1b	 mov	 BYTE PTR [rbx+r11], dl
  000c1	48 ff c3	 inc	 rbx
  000c4	49 3b d8	 cmp	 rbx, r8
  000c7	72 d3		 jb	 SHORT $LL6@Wipe35Gutm
$LN4@Wipe35Gutm:

; 186  : 	}
; 187  : 
; 188  : 	return TRUE;

  000c9	b8 01 00 00 00	 mov	 eax, 1
$LN15@Wipe35Gutm:

; 189  : }

  000ce	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d2	5b		 pop	 rbx
  000d3	c3		 ret	 0
Wipe35Gutmann ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Wipe7Dod5220 DD imagerel Wipe7Dod5220
	DD	imagerel Wipe7Dod5220+83
	DD	imagerel $unwind$Wipe7Dod5220
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Wipe7Dod5220 DD 010401H
	DD	04204H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT Wipe7Dod5220
_TEXT	SEGMENT
pass$ = 48
randChars$ = 56
buffer$ = 64
size$ = 72
Wipe7Dod5220 PROC					; COMDAT

; 86   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 87   : 	byte wipeChar;
; 88   : 
; 89   : 	switch (pass)

  00004	83 e9 01	 sub	 ecx, 1
  00007	4d 8b d0	 mov	 r10, r8
  0000a	74 2d		 je	 SHORT $LN6@Wipe7Dod52
  0000c	83 e9 01	 sub	 ecx, 1
  0000f	74 22		 je	 SHORT $LN5@Wipe7Dod52
  00011	83 e9 02	 sub	 ecx, 2
  00014	74 18		 je	 SHORT $LN4@Wipe7Dod52
  00016	83 e9 01	 sub	 ecx, 1
  00019	74 0e		 je	 SHORT $LN3@Wipe7Dod52
  0001b	83 f9 01	 cmp	 ecx, 1
  0001e	74 04		 je	 SHORT $LN2@Wipe7Dod52

; 110  : 
; 111  : 	default:
; 112  : 		return FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	eb 2a		 jmp	 SHORT $LN9@Wipe7Dod52
$LN2@Wipe7Dod52:

; 106  : 
; 107  : 	case 6:
; 108  : 		wipeChar = ~randChars[2];

  00024	8a 42 02	 mov	 al, BYTE PTR [rdx+2]

; 109  : 		break;

  00027	eb 0c		 jmp	 SHORT $LN11@Wipe7Dod52
$LN3@Wipe7Dod52:

; 102  : 
; 103  : 	case 5:
; 104  : 		wipeChar = randChars[2];

  00029	8a 42 02	 mov	 al, BYTE PTR [rdx+2]

; 105  : 		break;

  0002c	eb 0d		 jmp	 SHORT $LN7@Wipe7Dod52
$LN4@Wipe7Dod52:

; 98   : 
; 99   : 	case 4:
; 100  : 		wipeChar = randChars[1];

  0002e	8a 42 01	 mov	 al, BYTE PTR [rdx+1]

; 101  : 		break;

  00031	eb 08		 jmp	 SHORT $LN7@Wipe7Dod52
$LN5@Wipe7Dod52:

; 93   : 		break;
; 94   : 
; 95   : 	case 2:
; 96   : 		wipeChar = ~randChars[0];

  00033	8a 02		 mov	 al, BYTE PTR [rdx]
$LN11@Wipe7Dod52:
  00035	f6 d0		 not	 al

; 97   : 		break;

  00037	eb 02		 jmp	 SHORT $LN7@Wipe7Dod52
$LN6@Wipe7Dod52:

; 90   : 	{
; 91   : 	case 1:
; 92   : 		wipeChar = randChars[0];

  00039	8a 02		 mov	 al, BYTE PTR [rdx]
$LN7@Wipe7Dod52:

; 113  : 	}
; 114  : 
; 115  : 	memset (buffer, wipeChar, size);

  0003b	0f b6 d0	 movzx	 edx, al
  0003e	4d 8b c1	 mov	 r8, r9
  00041	49 8b ca	 mov	 rcx, r10
  00044	e8 00 00 00 00	 call	 memset

; 116  : 	return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1
$LN9@Wipe7Dod52:

; 117  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
Wipe7Dod5220 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Wipe3Dod5220 DD imagerel Wipe3Dod5220
	DD	imagerel Wipe3Dod5220+48
	DD	imagerel $unwind$Wipe3Dod5220
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Wipe3Dod5220 DD 010401H
	DD	04204H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT Wipe3Dod5220
_TEXT	SEGMENT
pass$ = 48
buffer$ = 56
size$ = 64
Wipe3Dod5220 PROC					; COMDAT

; 52   : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 53   : 	byte wipeChar;
; 54   : 
; 55   : 	switch (pass)

  00004	83 e9 01	 sub	 ecx, 1
  00007	4c 8b ca	 mov	 r9, rdx
  0000a	74 0d		 je	 SHORT $LN3@Wipe3Dod52
  0000c	83 f9 01	 cmp	 ecx, 1
  0000f	74 04		 je	 SHORT $LN2@Wipe3Dod52

; 64   : 
; 65   : 	default:
; 66   : 		return FALSE;

  00011	33 c0		 xor	 eax, eax
  00013	eb 16		 jmp	 SHORT $LN6@Wipe3Dod52
$LN2@Wipe3Dod52:

; 59   : 		break;
; 60   : 
; 61   : 	case 2:
; 62   : 		wipeChar = 0xff;

  00015	b0 ff		 mov	 al, 255			; 000000ffH

; 63   : 		break;

  00017	eb 02		 jmp	 SHORT $LN4@Wipe3Dod52
$LN3@Wipe3Dod52:

; 56   : 	{
; 57   : 	case 1:
; 58   : 		wipeChar = 0;

  00019	32 c0		 xor	 al, al
$LN4@Wipe3Dod52:

; 67   : 	}
; 68   : 
; 69   : 	memset (buffer, wipeChar, size);

  0001b	0f b6 d0	 movzx	 edx, al
  0001e	49 8b c9	 mov	 rcx, r9
  00021	e8 00 00 00 00	 call	 memset

; 70   : 	return TRUE;

  00026	b8 01 00 00 00	 mov	 eax, 1
$LN6@Wipe3Dod52:

; 71   : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
Wipe3Dod5220 ENDP
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT Wipe1PseudoRandom
_TEXT	SEGMENT
pass$ = 8
buffer$ = 16
size$ = 24
Wipe1PseudoRandom PROC					; COMDAT

; 34   : 	return FALSE;

  00000	33 c0		 xor	 eax, eax

; 35   : }

  00002	c3		 ret	 0
Wipe1PseudoRandom ENDP
PUBLIC	WipeBuffer
;	COMDAT pdata
pdata	SEGMENT
$pdata$WipeBuffer DD imagerel $LN32
	DD	imagerel $LN32+192
	DD	imagerel $unwind$WipeBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WipeBuffer DD 010401H
	DD	06204H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT WipeBuffer
_TEXT	SEGMENT
algorithm$ = 64
randChars$ = 72
pass$ = 80
buffer$ = 88
size$ = 96
WipeBuffer PROC						; COMDAT

; 237  : {

$LN32:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	45 8b d0	 mov	 r10d, r8d

; 238  : 	switch (algorithm)

  00007	83 f9 64	 cmp	 ecx, 100		; 00000064H
  0000a	0f 84 a9 00 00
	00		 je	 $LN5@WipeBuffer
  00010	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  00016	74 78		 je	 SHORT $LN4@WipeBuffer
  00018	81 f9 bc 02 00
	00		 cmp	 ecx, 700		; 000002bcH
  0001e	74 39		 je	 SHORT $LN3@WipeBuffer
  00020	81 f9 ac 0d 00
	00		 cmp	 ecx, 3500		; 00000dacH
  00026	74 1f		 je	 SHORT $LN2@WipeBuffer

; 251  : 
; 252  : 	default:
; 253  : 		GST_THROW_FATAL_EXCEPTION;

  00028	45 33 c9	 xor	 r9d, r9d
  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	ba fd 00 00 00	 mov	 edx, 253		; 000000fdH
  00033	41 8d 49 29	 lea	 ecx, QWORD PTR [r9+41]
  00037	48 c7 44 24 20
	54 53 47 00	 mov	 QWORD PTR [rsp+32], 4674388 ; 00475354H
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeBugCheckEx
  00046	cc		 int	 3
$LN2@WipeBuffer:

; 248  : 
; 249  : 	case GST_WIPE_35_GUTMANN:
; 250  : 		return Wipe35Gutmann (pass, buffer, size);

  00047	4c 8b 44 24 60	 mov	 r8, QWORD PTR size$[rsp]
  0004c	49 8b d1	 mov	 rdx, r9
  0004f	41 8b ca	 mov	 ecx, r10d
  00052	e8 00 00 00 00	 call	 Wipe35Gutmann
  00057	eb 62		 jmp	 SHORT $LN8@WipeBuffer
$LN3@WipeBuffer:

; 245  : 
; 246  : 	case GST_WIPE_7_DOD_5220:
; 247  : 		return Wipe7Dod5220 (pass, randChars, buffer, size);

  00059	41 83 ea 01	 sub	 r10d, 1
  0005d	74 2d		 je	 SHORT $LN24@WipeBuffer
  0005f	41 83 ea 01	 sub	 r10d, 1
  00063	74 21		 je	 SHORT $LN23@WipeBuffer
  00065	41 83 ea 02	 sub	 r10d, 2
  00069	74 16		 je	 SHORT $LN22@WipeBuffer
  0006b	41 83 ea 01	 sub	 r10d, 1
  0006f	74 0b		 je	 SHORT $LN21@WipeBuffer
  00071	41 83 fa 01	 cmp	 r10d, 1
  00075	75 42		 jne	 SHORT $LN5@WipeBuffer
  00077	8a 42 02	 mov	 al, BYTE PTR [rdx+2]
  0007a	eb 0c		 jmp	 SHORT $LN30@WipeBuffer
$LN21@WipeBuffer:
  0007c	8a 42 02	 mov	 al, BYTE PTR [rdx+2]
  0007f	eb 21		 jmp	 SHORT $LN15@WipeBuffer
$LN22@WipeBuffer:
  00081	8a 42 01	 mov	 al, BYTE PTR [rdx+1]
  00084	eb 1c		 jmp	 SHORT $LN15@WipeBuffer
$LN23@WipeBuffer:
  00086	8a 02		 mov	 al, BYTE PTR [rdx]
$LN30@WipeBuffer:
  00088	f6 d0		 not	 al
  0008a	eb 16		 jmp	 SHORT $LN15@WipeBuffer
$LN24@WipeBuffer:
  0008c	8a 02		 mov	 al, BYTE PTR [rdx]
  0008e	eb 12		 jmp	 SHORT $LN15@WipeBuffer
$LN4@WipeBuffer:

; 242  : 
; 243  : 	case GST_WIPE_3_DOD_5220:
; 244  : 		return Wipe3Dod5220 (pass, buffer, size);

  00090	41 83 ea 01	 sub	 r10d, 1
  00094	74 0a		 je	 SHORT $LN14@WipeBuffer
  00096	41 83 fa 01	 cmp	 r10d, 1
  0009a	75 1d		 jne	 SHORT $LN5@WipeBuffer
  0009c	b0 ff		 mov	 al, 255			; 000000ffH
  0009e	eb 02		 jmp	 SHORT $LN15@WipeBuffer
$LN14@WipeBuffer:
  000a0	33 c0		 xor	 eax, eax
$LN15@WipeBuffer:
  000a2	4c 8b 44 24 60	 mov	 r8, QWORD PTR size$[rsp]
  000a7	0f b6 d0	 movzx	 edx, al
  000aa	49 8b c9	 mov	 rcx, r9
  000ad	e8 00 00 00 00	 call	 memset
  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	eb 02		 jmp	 SHORT $LN8@WipeBuffer
$LN5@WipeBuffer:

; 239  : 	{
; 240  : 	case GST_WIPE_1_RAND:
; 241  : 		return Wipe1PseudoRandom (pass, buffer, size);

  000b9	33 c0		 xor	 eax, eax
$LN8@WipeBuffer:

; 254  : 	}
; 255  : 
; 256  : 	return FALSE;	// Prevent compiler warnings
; 257  : }

  000bb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bf	c3		 ret	 0
$LN29@WipeBuffer:
WipeBuffer ENDP
END
