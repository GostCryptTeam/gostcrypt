; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@ ; `string'
PUBLIC	??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@ ; `string'
PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	_XTS_vectors
PUBLIC	_hmac_whirlpool_test_key
PUBLIC	_hmac_whirlpool_test_data
PUBLIC	_hmac_whirlpool_test_vectors
PUBLIC	_hmac_gosthash_test_key
PUBLIC	_hmac_gosthash_test_data
PUBLIC	_hmac_gosthash_test_vectors
PUBLIC	_hmac_stribog_test_key
PUBLIC	_hmac_stribog_test_data
PUBLIC	_hmac_stribog_test_vectors
_DATA	SEGMENT
COMM	_ks_tmp:BYTE:0220H
_DATA	ENDS
;	COMDAT ??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@
CONST	SEGMENT
??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@ DB 't'
	DB	08aH, 'd', 094H, 0b8H, '4', 0bdH, 'r', 095H, 0a2H, ';', 011H, 086H
	DB	01dH, 'F', 0e7H, 088H, 0fH, 'e', 098H, 0d3H, 'T', 0e1H, 0b2H, 'J'
	DB	'5', 0c2H, 0a2H, 085H, 'A', 08H, 085H, 07H, 0c8H, 'RQ6&', 0d2H
	DB	08cH, '8', 0e5H, 'U', 09eH, 0d2H, 01bH, 088H, '++7', 0aeH, 087H
	DB	011H, 01aH, '7', 0e4H, 0b1H, 088H, 0d3H, 0d7H, 08cH, 09fH, 0efH
	DB	01bH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@
CONST	SEGMENT
??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@ DB 'R'
	DB	'5', 0b7H, 017H, 'V', 0b8H, 'u!', 0caH, 0e9H, 'R', 09bH, '!', 097H
	DB	'>mNT', 012H, 0fcH, 'ap@', 0faH, 'FL', 0f7H, '$', 09dH, '(', 0deH
	DB	01dH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
_DATA	SEGMENT
_XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
_hmac_whirlpool_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_whirlpool_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_whirlpool_test_vectors DD FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
_hmac_gosthash_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_gosthash_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_gosthash_test_vectors DD FLAT:??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@
_hmac_stribog_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_stribog_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_stribog_test_vectors DD FLAT:??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
_DATA	ENDS
PUBLIC	_CipherInit2@16
EXTRN	_CipherInit@12:PROC
EXTRN	__imp__KeBugCheckEx@20:PROC
; Function compile flags: /Ogsp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _CipherInit2@16
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_key_len$ = 20						; size = 4
_CipherInit2@16 PROC					; COMDAT

; 332  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 333  : 	switch (cipher)

  00005	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00008	48		 dec	 eax
  00009	74 23		 je	 SHORT $LN3@CipherInit
  0000b	48		 dec	 eax
  0000c	74 16		 je	 SHORT $LN2@CipherInit

; 341  : 	default:			
; 342  : 		/* Unknown/wrong ID */
; 343  : 		GST_THROW_FATAL_EXCEPTION;

  0000e	68 54 53 47 00	 push	 4674388			; 00475354H
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	68 57 01 00 00	 push	 343			; 00000157H
  0001c	6a 29		 push	 41			; 00000029H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeBugCheckEx@20
$LN10@CipherInit:
$LN2@CipherInit:

; 337  : 		break;
; 338  : 	case GRASSHOPPER:
; 339  : 		CipherInit(cipher, key, ks);

  00024	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  00027	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  0002a	6a 02		 push	 2

; 340  : 		break;

  0002c	eb 08		 jmp	 SHORT $LN9@CipherInit
$LN3@CipherInit:

; 334  : 	{
; 335  : 	case GOST:
; 336  : 		CipherInit(cipher,key,ks);

  0002e	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  00031	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00034	6a 01		 push	 1
$LN9@CipherInit:
  00036	e8 00 00 00 00	 call	 _CipherInit@12

; 344  : 	}
; 345  : }

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
$LN8@CipherInit:
_CipherInit2@16 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TestCRCs@4
EXTRN	_hmac_stribog@20:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
;	COMDAT _TestCRCs@4
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_buf$ = 8						; size = 4
_TestCRCs@4 PROC					; COMDAT

; 356  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 44	 sub	 esp, 68			; 00000044H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 357  : 	unsigned char digest[STRIBOG_DIGESTSIZE];
; 358  : 	hmac_stribog(hmac_stribog_test_key, 64, hmac_stribog_test_data, (int) strlen (hmac_stribog_test_data), digest);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_stribog_test_data
  00018	56		 push	 esi
  00019	8b c1		 mov	 eax, ecx
  0001b	57		 push	 edi
  0001c	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  0001f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL3@TestCRCs:
  00022	8a 10		 mov	 dl, BYTE PTR [eax]
  00024	40		 inc	 eax
  00025	84 d2		 test	 dl, dl
  00027	75 f9		 jne	 SHORT $LL3@TestCRCs
  00029	8d 55 bc	 lea	 edx, DWORD PTR _digest$[ebp]
  0002c	52		 push	 edx
  0002d	2b c6		 sub	 eax, esi
  0002f	50		 push	 eax
  00030	51		 push	 ecx
  00031	6a 40		 push	 64			; 00000040H
  00033	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_stribog_test_key
  00039	e8 00 00 00 00	 call	 _hmac_stribog@20

; 359  : 	memcpy(buf, digest, STRIBOG_DIGESTSIZE);

  0003e	6a 10		 push	 16			; 00000010H
  00040	59		 pop	 ecx
  00041	8d 75 bc	 lea	 esi, DWORD PTR _digest$[ebp]
  00044	f3 a5		 rep movsd

; 360  : }

  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	5f		 pop	 edi
  0004a	33 cd		 xor	 ecx, ebp
  0004c	5e		 pop	 esi
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	c9		 leave
  00053	c2 04 00	 ret	 4
_TestCRCs@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_TestLegacySectorBufEncryption@4
EXTRN	_EAGetNext@4:PROC
EXTRN	_EAGetNextMode@8:PROC
EXTRN	_DecryptBuffer@16:PROC
EXTRN	_EncryptBuffer@16:PROC
EXTRN	_DecryptDataUnits@16:PROC
EXTRN	_GetCrc32@8:PROC
EXTRN	_EncryptDataUnits@16:PROC
EXTRN	_EAGetFirstMode@4:PROC
EXTRN	_EAInit@12:PROC
EXTRN	_CipherGetBlockSize@4:PROC
EXTRN	_EAGetFirstCipher@4:PROC
EXTRN	_EAGetName@8:PROC
EXTRN	_EAGetFirst@0:PROC
; Function compile flags: /Ogsp
;	COMDAT _TestLegacySectorBufEncryption@4
_TEXT	SEGMENT
_unitNo$ = -1104					; size = 8
_nTestsPerformed$ = -1096				; size = 4
_buf$ = -1092						; size = 1024
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestLegacySectorBufEncryption@4 PROC			; COMDAT

; 578  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 50 04 00
	00		 sub	 esp, 1104		; 00000450H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 579  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 580  : 	unsigned int i;
; 581  : 	char name[64];
; 582  : 	unsigned __int32 crc;
; 583  : 	UINT64_STRUCT unitNo;
; 584  : 	uint32 nbrUnits;
; 585  : 	int blockSize;
; 586  : 	int nTestsPerformed = 0;

  00015	83 a5 b8 fb ff
	ff 00		 and	 DWORD PTR _nTestsPerformed$[ebp], 0
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	8b 75 08	 mov	 esi, DWORD PTR _ci$[ebp]
  00021	57		 push	 edi

; 587  : 
; 588  : 	unitNo.Value = 0x0234567890ABCDEFull;

  00022	c7 85 b0 fb ff
	ff ef cd ab 90	 mov	 DWORD PTR _unitNo$[ebp], -1867788817 ; 90abcdefH
  0002c	c7 85 b4 fb ff
	ff 78 56 34 02	 mov	 DWORD PTR _unitNo$[ebp+4], 36984440 ; 02345678H

; 589  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 590  : 
; 591  : 	for (i = 0; i < sizeof (buf); i++)

  00036	33 c0		 xor	 eax, eax
  00038	bf 00 04 00 00	 mov	 edi, 1024		; 00000400H
$LL19@TestLegacy:

; 592  : 		buf[i] = (unsigned char) i;

  0003d	88 84 05 bc fb
	ff ff		 mov	 BYTE PTR _buf$[ebp+eax], al
  00044	40		 inc	 eax
  00045	3b c7		 cmp	 eax, edi
  00047	72 f4		 jb	 SHORT $LL19@TestLegacy

; 593  : 
; 594  : 	for (i = 0; i < sizeof (ci->k2); i++)

  00049	33 c0		 xor	 eax, eax
$LL16@TestLegacy:

; 595  : 		ci->k2[i] = (unsigned char) i;

  0004b	88 84 06 50 1d
	00 00		 mov	 BYTE PTR [esi+eax+7504], al
  00052	40		 inc	 eax
  00053	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00058	72 f1		 jb	 SHORT $LL16@TestLegacy

; 596  : 
; 597  : 	// Test all EAs
; 598  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  0005a	e8 00 00 00 00	 call	 _EAGetFirst@0
  0005f	89 06		 mov	 DWORD PTR [esi], eax
  00061	85 c0		 test	 eax, eax
  00063	0f 84 1e 01 00
	00		 je	 $LN11@TestLegacy
  00069	bb 26 4c 0b b7	 mov	 ebx, -1223996378	; b70b4c26H
$LL13@TestLegacy:

; 599  : 	{
; 600  : 		EAGetName (name, ci->ea);

  0006e	ff 36		 push	 DWORD PTR [esi]
  00070	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _EAGetName@8

; 601  : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 _EAGetFirstCipher@4
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _CipherGetBlockSize@4

; 602  : 
; 603  : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  00086	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00089	50		 push	 eax
  0008a	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00090	50		 push	 eax
  00091	ff 36		 push	 DWORD PTR [esi]
  00093	e8 00 00 00 00	 call	 _EAInit@12
  00098	83 f8 11	 cmp	 eax, 17			; 00000011H
  0009b	0f 84 fa 00 00
	00		 je	 $LN30@TestLegacy

; 605  : 
; 606  : 		// Test all deprecated modes of operation
; 607  : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 608  : 			ci->mode != 0;
; 609  : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  000a1	ff 36		 push	 DWORD PTR [esi]
  000a3	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  000a8	e9 be 00 00 00	 jmp	 $LN35@TestLegacy
$LL9@TestLegacy:

; 610  : 		{
; 611  : 			// Skip modes that are not deprecated
; 612  : 			if (ci->mode == XTS || ci->mode == XTS8)

  000ad	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b0	83 f8 01	 cmp	 eax, 1
  000b3	0f 84 a8 00 00
	00		 je	 $LN8@TestLegacy
  000b9	83 f8 02	 cmp	 eax, 2
  000bc	0f 84 9f 00 00
	00		 je	 $LN8@TestLegacy

; 613  : 				continue;
; 614  : 
; 615  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  000c2	56		 push	 esi
  000c3	6a 02		 push	 2
  000c5	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  000cb	50		 push	 eax
  000cc	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 616  : 			crc = GetCrc32 (buf, sizeof (buf));

  000d8	57		 push	 edi
  000d9	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _GetCrc32@8

; 617  : 
; 618  : 			if (crc == 0xb70b4c26)

  000e5	3b c3		 cmp	 eax, ebx
  000e7	0f 84 ae 00 00
	00		 je	 $LN30@TestLegacy

; 619  : 				return FALSE;
; 620  : 
; 621  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  000ed	56		 push	 esi
  000ee	6a 02		 push	 2
  000f0	8d 85 b0 fb ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  000f6	50		 push	 eax
  000f7	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 622  : 
; 623  : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00103	57		 push	 edi
  00104	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _GetCrc32@8
  00110	3b c3		 cmp	 eax, ebx
  00112	0f 85 83 00 00
	00		 jne	 $LN30@TestLegacy

; 624  : 				return FALSE;
; 625  : 
; 626  : 			nTestsPerformed++;
; 627  : 
; 628  : 			EncryptBuffer (buf, sizeof (buf), ci);

  00118	56		 push	 esi
  00119	6a 00		 push	 0
  0011b	57		 push	 edi
  0011c	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 629  : 			crc = GetCrc32 (buf, sizeof (buf));

  00128	57		 push	 edi
  00129	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _GetCrc32@8

; 630  : 
; 631  : 			if (crc == 0xb70b4c26)

  00135	3b c3		 cmp	 eax, ebx
  00137	74 62		 je	 SHORT $LN30@TestLegacy

; 632  : 				return FALSE;
; 633  : 
; 634  : 			DecryptBuffer (buf, sizeof (buf), ci);

  00139	56		 push	 esi
  0013a	6a 00		 push	 0
  0013c	57		 push	 edi
  0013d	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 635  : 
; 636  : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00149	57		 push	 edi
  0014a	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 _GetCrc32@8
  00156	3b c3		 cmp	 eax, ebx
  00158	75 41		 jne	 SHORT $LN30@TestLegacy

; 637  : 				return FALSE;
; 638  : 
; 639  : 			nTestsPerformed++;

  0015a	83 85 b8 fb ff
	ff 02		 add	 DWORD PTR _nTestsPerformed$[ebp], 2
$LN8@TestLegacy:

; 605  : 
; 606  : 		// Test all deprecated modes of operation
; 607  : 		for (ci->mode = EAGetFirstMode (ci->ea);
; 608  : 			ci->mode != 0;
; 609  : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  00161	ff 76 04	 push	 DWORD PTR [esi+4]
  00164	ff 36		 push	 DWORD PTR [esi]
  00166	e8 00 00 00 00	 call	 _EAGetNextMode@8
$LN35@TestLegacy:
  0016b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0016e	85 c0		 test	 eax, eax
  00170	0f 85 37 ff ff
	ff		 jne	 $LL9@TestLegacy
  00176	ff 36		 push	 DWORD PTR [esi]
  00178	e8 00 00 00 00	 call	 _EAGetNext@4
  0017d	89 06		 mov	 DWORD PTR [esi], eax
  0017f	85 c0		 test	 eax, eax
  00181	0f 85 e7 fe ff
	ff		 jne	 $LL13@TestLegacy
$LN11@TestLegacy:

; 640  : 		}
; 641  : 	}
; 642  : 	return 1;//(nTestsPerformed == 86);

  00187	33 c0		 xor	 eax, eax
  00189	40		 inc	 eax
$LN20@TestLegacy:

; 643  : }

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	33 cd		 xor	 ecx, ebp
  00191	5b		 pop	 ebx
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	c9		 leave
  00198	c2 04 00	 ret	 4
$LN30@TestLegacy:

; 604  : 			return FALSE;

  0019b	33 c0		 xor	 eax, eax
  0019d	eb eb		 jmp	 SHORT $LN20@TestLegacy
_TestLegacySectorBufEncryption@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_whirlpool@0
EXTRN	_hmac_whirlpool@24:PROC
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_whirlpool@0
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_whirlpool@0 PROC				; COMDAT

; 725  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 44	 sub	 esp, 68			; 00000044H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 726  : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 727  : 
; 728  : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_whirlpool_test_data
  00018	56		 push	 esi
  00019	8b c1		 mov	 eax, ecx
  0001b	57		 push	 edi
  0001c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL4@test_hmac_:
  0001f	8a 10		 mov	 dl, BYTE PTR [eax]
  00021	40		 inc	 eax
  00022	84 d2		 test	 dl, dl
  00024	75 f9		 jne	 SHORT $LL4@test_hmac_
  00026	6a 40		 push	 64			; 00000040H
  00028	8d 55 bc	 lea	 edx, DWORD PTR _digest$[ebp]
  0002b	52		 push	 edx
  0002c	2b c6		 sub	 eax, esi
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	6a 40		 push	 64			; 00000040H
  00032	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_whirlpool_test_key
  00038	e8 00 00 00 00	 call	 _hmac_whirlpool@24

; 729  : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  0003d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_whirlpool_test_vectors
  00043	6a 10		 push	 16			; 00000010H
  00045	59		 pop	 ecx
  00046	33 c0		 xor	 eax, eax
  00048	8d 75 bc	 lea	 esi, DWORD PTR _digest$[ebp]
  0004b	f3 a7		 repe cmpsd

; 730  : 		return FALSE;
; 731  : 
; 732  : 	return TRUE;
; 733  : }

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	0f 94 c0	 sete	 al
  00053	5f		 pop	 edi
  00054	33 cd		 xor	 ecx, ebp
  00056	5e		 pop	 esi
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	c9		 leave
  0005d	c3		 ret	 0
_test_hmac_whirlpool@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_gosthash@0
EXTRN	_hmac_gosthash@20:PROC
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_gosthash@0
_TEXT	SEGMENT
_digest$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_test_hmac_gosthash@0 PROC				; COMDAT

; 744  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 24	 sub	 esp, 36			; 00000024H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 745  : 	unsigned char digest[GOSTHASH_DIGESTSIZE];
; 746  : 	hmac_gosthash(hmac_gosthash_test_key, 64, hmac_gosthash_test_data, (int) strlen (hmac_gosthash_test_data), digest);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_gosthash_test_data
  00018	56		 push	 esi
  00019	8b c1		 mov	 eax, ecx
  0001b	57		 push	 edi
  0001c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL4@test_hmac_@2:
  0001f	8a 10		 mov	 dl, BYTE PTR [eax]
  00021	40		 inc	 eax
  00022	84 d2		 test	 dl, dl
  00024	75 f9		 jne	 SHORT $LL4@test_hmac_@2
  00026	8d 55 dc	 lea	 edx, DWORD PTR _digest$[ebp]
  00029	52		 push	 edx
  0002a	2b c6		 sub	 eax, esi
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	6a 40		 push	 64			; 00000040H
  00030	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_gosthash_test_key
  00036	e8 00 00 00 00	 call	 _hmac_gosthash@20

; 747  : 	if (memcmp (digest, hmac_gosthash_test_vectors, GOSTHASH_DIGESTSIZE) != 0)

  0003b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_gosthash_test_vectors
  00041	6a 08		 push	 8
  00043	59		 pop	 ecx
  00044	33 c0		 xor	 eax, eax
  00046	8d 75 dc	 lea	 esi, DWORD PTR _digest$[ebp]
  00049	f3 a7		 repe cmpsd

; 748  : 		return FALSE;
; 749  : 
; 750  : 	return TRUE;
; 751  : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	0f 94 c0	 sete	 al
  00051	5f		 pop	 edi
  00052	33 cd		 xor	 ecx, ebp
  00054	5e		 pop	 esi
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	c9		 leave
  0005b	c3		 ret	 0
_test_hmac_gosthash@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_test_hmac_stribog@0
; Function compile flags: /Ogsp
;	COMDAT _test_hmac_stribog@0
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_stribog@0 PROC				; COMDAT

; 762  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 44	 sub	 esp, 68			; 00000044H
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000d	33 c5		 xor	 eax, ebp
  0000f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 763  : 	unsigned char digest[STRIBOG_DIGESTSIZE];
; 764  : 	hmac_stribog(hmac_stribog_test_key, 64, hmac_stribog_test_data, (int) strlen (hmac_stribog_test_data), digest);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hmac_stribog_test_data
  00018	56		 push	 esi
  00019	8b c1		 mov	 eax, ecx
  0001b	57		 push	 edi
  0001c	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL4@test_hmac_@3:
  0001f	8a 10		 mov	 dl, BYTE PTR [eax]
  00021	40		 inc	 eax
  00022	84 d2		 test	 dl, dl
  00024	75 f9		 jne	 SHORT $LL4@test_hmac_@3
  00026	8d 55 bc	 lea	 edx, DWORD PTR _digest$[ebp]
  00029	52		 push	 edx
  0002a	2b c6		 sub	 eax, esi
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	6a 40		 push	 64			; 00000040H
  00030	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_stribog_test_key
  00036	e8 00 00 00 00	 call	 _hmac_stribog@20

; 765  : 	if (memcmp (digest, hmac_stribog_test_vectors, STRIBOG_DIGESTSIZE) != 0)

  0003b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR _hmac_stribog_test_vectors
  00041	6a 10		 push	 16			; 00000010H
  00043	59		 pop	 ecx
  00044	33 c0		 xor	 eax, eax
  00046	8d 75 bc	 lea	 esi, DWORD PTR _digest$[ebp]
  00049	f3 a7		 repe cmpsd

; 766  : 		return FALSE;
; 767  : 
; 768  : 	return TRUE;
; 769  : }

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	0f 94 c0	 sete	 al
  00051	5f		 pop	 edi
  00052	33 cd		 xor	 ecx, ebp
  00054	5e		 pop	 esi
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	c9		 leave
  0005b	c3		 ret	 0
_test_hmac_stribog@0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
PUBLIC	_test_pkcs5@0
EXTRN	_derive_key_stribog@28:PROC
EXTRN	_derive_key_gosthash@28:PROC
EXTRN	_derive_key_whirlpool@28:PROC
;	COMDAT ??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@ DB 0c7H, 013H, 'V', 0b6H, 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@ DB '}S', 0e0H, '~', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
text$s	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@ DB 'P|6o', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_08NLHBPEGP@password?$AA@FNODOBFM@ DB 'password', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@ DB 012H, '4Vx', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
text$s	ENDS
;	COMDAT _test_pkcs5@0
_TEXT	SEGMENT
_dk$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_test_pkcs5@0 PROC					; COMDAT

; 786  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 787  : 	char dk[144];
; 788  : 
; 789  : 	/* HMAC-Whirlpool tests */
; 790  : 	if (test_hmac_whirlpool() == FALSE)

  00015	e8 00 00 00 00	 call	 _test_hmac_whirlpool@0
  0001a	85 c0		 test	 eax, eax
  0001c	75 07		 jne	 SHORT $LN7@test_pkcs5
$LN15@test_pkcs5:

; 791  : 		return FALSE;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 cd 00 00 00	 jmp	 $LN1@test_pkcs5
$LN7@test_pkcs5:

; 792  : 
; 793  : 	/* HMAC-GOSTHASH tests */
; 794  : 	if (test_hmac_gosthash() == FALSE)

  00025	e8 00 00 00 00	 call	 _test_hmac_gosthash@0
  0002a	85 c0		 test	 eax, eax

; 795  : 		return FALSE;

  0002c	74 f0		 je	 SHORT $LN15@test_pkcs5

; 796  : 
; 797  : 	/* HMAC-Stribog tests */
; 798  : 	if (test_hmac_stribog() == FALSE)

  0002e	e8 00 00 00 00	 call	 _test_hmac_stribog@0
  00033	85 c0		 test	 eax, eax

; 799  : 		return FALSE;

  00035	74 e7		 je	 SHORT $LN15@test_pkcs5
  00037	53		 push	 ebx
  00038	56		 push	 esi

; 800  : 
; 801  : #ifndef GST_WINDOWS_BOOT
; 802  : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 803  : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  00039	6a 04		 push	 4
  0003b	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00041	50		 push	 eax
  00042	6a 05		 push	 5
  00044	6a 04		 push	 4
  00046	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  0004b	56		 push	 esi
  0004c	6a 08		 push	 8
  0004e	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_08NLHBPEGP@password?$AA@FNODOBFM@
  00053	53		 push	 ebx
  00054	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 804  : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  00059	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dk$[ebp]
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04OCKEDGEH@P?$HM6o?$AA@FNODOBFM@
  00064	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00066	74 07		 je	 SHORT $LN4@test_pkcs5

; 805  : 		return FALSE;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 81 00 00 00	 jmp	 $LN11@test_pkcs5
$LN4@test_pkcs5:
  0006f	57		 push	 edi

; 806  : 
; 807  : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 808  : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  00070	6a 60		 push	 96			; 00000060H
  00072	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00078	50		 push	 eax
  00079	6a 05		 push	 5
  0007b	6a 04		 push	 4
  0007d	56		 push	 esi
  0007e	6a 08		 push	 8
  00080	53		 push	 ebx
  00081	e8 00 00 00 00	 call	 _derive_key_whirlpool@28

; 809  : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  00086	6a 18		 push	 24			; 00000018H
  00088	59		 pop	 ecx
  00089	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@FNODOBFM@
  0008e	8d b5 6c ff ff
	ff		 lea	 esi, DWORD PTR _dk$[ebp]
  00094	33 c0		 xor	 eax, eax
  00096	f3 a7		 repe cmpsd

; 810  : 		return FALSE;

  00098	75 2b		 jne	 SHORT $LN14@test_pkcs5

; 811  : 
; 812  : 	/* PKCS-5 test 1 with HMAC-GostHash used as the PRF */
; 813  : 	derive_key_gosthash ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  0009a	6a 04		 push	 4
  0009c	5f		 pop	 edi
  0009d	57		 push	 edi
  0009e	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000a4	50		 push	 eax
  000a5	6a 05		 push	 5
  000a7	57		 push	 edi
  000a8	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@FNODOBFM@
  000ad	56		 push	 esi
  000ae	6a 08		 push	 8
  000b0	53		 push	 ebx
  000b1	e8 00 00 00 00	 call	 _derive_key_gosthash@28

; 814  : 	if (memcmp (dk, "\x7d\x53\xe0\x7e", 4) != 0)

  000b6	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dk$[ebp]
  000bc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04PJHJAIAI@?$HNS?$OA?$HO?$AA@FNODOBFM@
  000c1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000c3	74 04		 je	 SHORT $LN2@test_pkcs5
$LN14@test_pkcs5:

; 815  : 		return FALSE;

  000c5	33 c0		 xor	 eax, eax
  000c7	eb 26		 jmp	 SHORT $LN13@test_pkcs5
$LN2@test_pkcs5:

; 816  : #endif
; 817  : 
; 818  : 	/* PKCS-5 test 1 with HMAC-Stribog used as the PRF */
; 819  : 	derive_key_stribog ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000c9	57		 push	 edi
  000ca	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000d0	50		 push	 eax
  000d1	6a 05		 push	 5
  000d3	57		 push	 edi
  000d4	56		 push	 esi
  000d5	6a 08		 push	 8
  000d7	53		 push	 ebx
  000d8	e8 00 00 00 00	 call	 _derive_key_stribog@28

; 820  : 	if (memcmp (dk, "\xc7\x13\x56\xb6", 4) != 0)

  000dd	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _dk$[ebp]
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_04PKOKJPGE@?G?$BDV?$LG?$AA@FNODOBFM@
  000e8	2b 01		 sub	 eax, DWORD PTR [ecx]
  000ea	f7 d8		 neg	 eax
  000ec	1b c0		 sbb	 eax, eax
  000ee	40		 inc	 eax
$LN13@test_pkcs5:
  000ef	5f		 pop	 edi
$LN11@test_pkcs5:
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
$LN1@test_pkcs5:

; 821  : 		return FALSE;
; 822  : 
; 823  : 	return TRUE;
; 824  : }

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	33 cd		 xor	 ecx, ebp
  000f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fc	c9		 leave
  000fd	c3		 ret	 0
_test_pkcs5@0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	__$ArrayPad$
PUBLIC	_TestSectorBufEncryption@4
EXTRN	_EAInitMode@4:PROC
EXTRN	_EAIsModeSupported@8:PROC
;	COMDAT ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@ DB 'Gost Grasshopper', 00H ;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@ DB 'GOST 28147-89', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Ogsp
text$s	ENDS
;	COMDAT _TestSectorBufEncryption@4
_TEXT	SEGMENT
_unitNo$ = -2140					; size = 8
_testCase$ = -2132					; size = 4
_writeOffset$ = -2128					; size = 8
_nTestsPerformed$ = -2120				; size = 4
_buf$ = -2116						; size = 2048
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestSectorBufEncryption@4 PROC				; COMDAT

; 384  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 5c 08 00
	00		 sub	 esp, 2140		; 0000085cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 385  : 	unsigned char buf[ENCRYPTION_DATA_UNIT_SIZE * 4];
; 386  : 	unsigned int i;
; 387  : 	char name[64];
; 388  : 	unsigned __int32 crc;
; 389  : 	UINT64_STRUCT unitNo;
; 390  : 	uint32 nbrUnits;
; 391  : 	unsigned __int64 writeOffset;
; 392  : 	int testCase = 0;

  00015	83 a5 ac f7 ff
	ff 00		 and	 DWORD PTR _testCase$[ebp], 0

; 393  : 	int nTestsPerformed = 0;

  0001c	83 a5 b8 f7 ff
	ff 00		 and	 DWORD PTR _nTestsPerformed$[ebp], 0
  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _ci$[ebp]

; 394  : 
; 395  : 	static unsigned char key1[] =
; 396  : 	{
; 397  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 398  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 399  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 400  : 	};
; 401  : 
; 402  : 	if (!TestLegacySectorBufEncryption(ci))

  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 _TestLegacySectorBufEncryption@4
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 49 03 00
	00		 je	 $LN53@TestSector
$LN52@TestSector:
  00035	56		 push	 esi

; 403  : 		return FALSE;
; 404  : 
; 405  : 
; 406  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 407  : 
; 408  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 409  : 
; 410  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 411  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 412  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 413  : 	for (writeOffset = 562949953420800ULL;
; 414  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE;
; 415  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  00036	c7 85 b0 f7 ff
	ff 00 fe ff ff	 mov	 DWORD PTR _writeOffset$[ebp], -512 ; fffffe00H
  00040	c7 85 b4 f7 ff
	ff ff ff 01 00	 mov	 DWORD PTR _writeOffset$[ebp+4], 131071 ; 0001ffffH
  0004a	57		 push	 edi
$LL51@TestSector:

; 416  : 	{
; 417  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  0004b	8b 85 b0 f7 ff
	ff		 mov	 eax, DWORD PTR _writeOffset$[ebp]
  00051	8b 8d b4 f7 ff
	ff		 mov	 ecx, DWORD PTR _writeOffset$[ebp+4]
  00057	0f ac c8 09	 shrd	 eax, ecx, 9
  0005b	c1 e9 09	 shr	 ecx, 9
  0005e	89 85 a4 f7 ff
	ff		 mov	 DWORD PTR _unitNo$[ebp], eax
  00064	89 8d a8 f7 ff
	ff		 mov	 DWORD PTR _unitNo$[ebp+4], ecx

; 418  : 
; 419  : 		// Test all EAs that support this mode of operation
; 420  : 		for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  0006a	e8 00 00 00 00	 call	 _EAGetFirst@0
  0006f	e9 73 01 00 00	 jmp	 $LN93@TestSector
$LL48@TestSector:

; 421  : 		{
; 422  : 			for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  00074	ff 33		 push	 DWORD PTR [ebx]
  00076	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  0007b	e9 55 01 00 00	 jmp	 $LN94@TestSector
$LL45@TestSector:

; 423  : 			{
; 424  : 				if (!EAIsModeSupported(ci->ea, ci->mode))

  00080	ff 73 04	 push	 DWORD PTR [ebx+4]
  00083	ff 33		 push	 DWORD PTR [ebx]
  00085	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 39 01 00
	00		 je	 $LN44@TestSector

; 425  : 					continue;
; 426  : 
; 427  : 				EAGetName(name, ci->ea);

  00092	ff 33		 push	 DWORD PTR [ebx]
  00094	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _EAGetName@8

; 428  : 
; 429  : 				if (EAInit(ci->ea, key1, ci->ks) != ERR_SUCCESS)

  0009d	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  000a0	50		 push	 eax
  000a1	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  000a6	ff 33		 push	 DWORD PTR [ebx]
  000a8	e8 00 00 00 00	 call	 _EAInit@12
  000ad	85 c0		 test	 eax, eax
  000af	0f 85 bd 00 00
	00		 jne	 $LN75@TestSector
  000b5	8d bb 50 1d 00
	00		 lea	 edi, DWORD PTR [ebx+7504]
$LL40@TestSector:

; 430  : 					return FALSE;
; 431  : 
; 432  : 				for (i = 0; i < sizeof (ci->k2); i++)
; 433  : 					ci->k2[i] = (unsigned char)i;

  000bb	88 04 07	 mov	 BYTE PTR [edi+eax], al
  000be	40		 inc	 eax
  000bf	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000c4	72 f5		 jb	 SHORT $LL40@TestSector

; 434  : 
; 435  : 				memcpy(&ci->k2, XTS_vectors[XTS_TEST_COUNT - 1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT - 1].key2));

  000c6	6a 08		 push	 8
  000c8	59		 pop	 ecx
  000c9	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432

; 436  : 
; 437  : 				if (!EAInitMode(ci))

  000ce	53		 push	 ebx
  000cf	f3 a5		 rep movsd
  000d1	e8 00 00 00 00	 call	 _EAInitMode@4
  000d6	85 c0		 test	 eax, eax
  000d8	0f 84 94 00 00
	00		 je	 $LN75@TestSector

; 438  : 					return FALSE;
; 439  : 
; 440  : 				// Each data unit will contain the same plaintext
; 441  : 				for (i = 0; i < nbrUnits; i++)
; 442  : 				{
; 443  : 					memcpy((unsigned char *)buf + i * ENCRYPTION_DATA_UNIT_SIZE,
; 444  : 						XTS_vectors[XTS_TEST_COUNT - 1].plaintext,
; 445  : 						ENCRYPTION_DATA_UNIT_SIZE);
; 446  : 				}
; 447  : 
; 448  : 				EncryptDataUnits(buf, &unitNo, nbrUnits, ci);

  000de	53		 push	 ebx
  000df	6a 04		 push	 4
  000e1	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  000e7	50		 push	 eax
  000e8	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000ed	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  000f2	8d bd bc f7 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  000f8	f3 a5		 rep movsd
  000fa	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00100	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  00105	8d b5 bc f7 ff
	ff		 lea	 esi, DWORD PTR _buf$[ebp]
  0010b	8d bd bc f9 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp+512]
  00111	50		 push	 eax
  00112	f3 a5		 rep movsd
  00114	e8 00 00 00 00	 call	 _EncryptDataUnits@16

; 449  : 
; 450  : 				crc = GetCrc32(buf, sizeof (buf));

  00119	68 00 08 00 00	 push	 2048			; 00000800H
  0011e	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _GetCrc32@8

; 451  : 
; 452  : 				if (strcmp(name, "GOST 28147-89") == 0)

  0012a	6a 0e		 push	 14			; 0000000eH
  0012c	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@
  00131	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00134	59		 pop	 ecx
  00135	33 d2		 xor	 edx, edx
  00137	f3 a6		 repe cmpsb
  00139	75 3e		 jne	 SHORT $LN33@TestSector

; 453  : 				{
; 454  : 					switch (testCase)

  0013b	8b 8d ac f7 ff
	ff		 mov	 ecx, DWORD PTR _testCase$[ebp]
  00141	2b ca		 sub	 ecx, edx
  00143	74 26		 je	 SHORT $LN30@TestSector
  00145	49		 dec	 ecx
  00146	74 1c		 je	 SHORT $LN28@TestSector
  00148	49		 dec	 ecx
  00149	74 12		 je	 SHORT $LN26@TestSector
  0014b	49		 dec	 ecx
  0014c	75 42		 jne	 SHORT $LN21@TestSector

; 477  : 					case 3:
; 478  : #ifdef GOST_DYNAMIC_SBOXES
; 479  : 						if (crc != 0xe82865a8)

  0014e	3d a8 65 28 e8	 cmp	 eax, -400005720		; e82865a8H
$LN99@TestSector:
  00153	75 1d		 jne	 SHORT $LN75@TestSector

; 480  : 							return FALSE;
; 481  : #endif
; 482  : 						nTestsPerformed++;

  00155	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]

; 483  : 						break;

  0015b	eb 3a		 jmp	 SHORT $LN84@TestSector
$LN26@TestSector:

; 470  : 					case 2:
; 471  : #ifdef GOST_DYNAMIC_SBOXES
; 472  : 						if (crc != 0xcf0cfdd1)

  0015d	3d d1 fd 0c cf	 cmp	 eax, -821232175		; cf0cfdd1H

; 473  : 							return FALSE;
; 474  : #endif
; 475  : 						nTestsPerformed++;
; 476  : 						break;

  00162	eb ef		 jmp	 SHORT $LN99@TestSector
$LN28@TestSector:

; 459  : 							return FALSE;
; 460  : #endif
; 461  : 						nTestsPerformed++;
; 462  : 						break;
; 463  : 					case 1:
; 464  : #ifdef GOST_DYNAMIC_SBOXES
; 465  : 						if (crc != 0x5b5926d9)

  00164	3d d9 26 59 5b	 cmp	 eax, 1532569305		; 5b5926d9H

; 466  : 							return FALSE;
; 467  : #endif
; 468  : 						nTestsPerformed++;
; 469  : 						break;

  00169	eb e8		 jmp	 SHORT $LN99@TestSector
$LN30@TestSector:

; 455  : 					{
; 456  : 					case 0:
; 457  : #ifdef GOST_DYNAMIC_SBOXES
; 458  : 						if (crc != 0x05eacf7d)

  0016b	3d 7d cf ea 05	 cmp	 eax, 99274621		; 05eacf7dH
  00170	74 18		 je	 SHORT $LN95@TestSector
$LN75@TestSector:

; 555  : 				return FALSE;

  00172	33 c0		 xor	 eax, eax
  00174	e9 03 02 00 00	 jmp	 $LN91@TestSector
$LN33@TestSector:

; 484  : 					}
; 485  : 				}
; 486  : 				else if (strcmp(name, "Gost Grasshopper") == 0)

  00179	6a 11		 push	 17			; 00000011H
  0017b	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@
  00180	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00183	59		 pop	 ecx
  00184	33 d2		 xor	 edx, edx
  00186	f3 a6		 repe cmpsb
  00188	75 06		 jne	 SHORT $LN21@TestSector
$LN95@TestSector:

; 487  : 					nTestsPerformed++;

  0018a	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN21@TestSector:

; 488  : 
; 489  : 				if (crc == 0x9f5edd58)

  00190	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  00195	74 db		 je	 SHORT $LN75@TestSector
$LN84@TestSector:

; 490  : 					return FALSE;
; 491  : 
; 492  : 				DecryptDataUnits(buf, &unitNo, nbrUnits, ci);

  00197	53		 push	 ebx
  00198	6a 04		 push	 4
  0019a	8d 85 a4 f7 ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  001a0	50		 push	 eax
  001a1	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _DecryptDataUnits@16

; 493  : 
; 494  : 				if (GetCrc32(buf, sizeof (buf)) != 0x9f5edd58)

  001ad	68 00 08 00 00	 push	 2048			; 00000800H
  001b2	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 _GetCrc32@8
  001be	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  001c3	75 ad		 jne	 SHORT $LN75@TestSector

; 495  : 					return FALSE;
; 496  : 
; 497  : 				nTestsPerformed++;

  001c5	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN44@TestSector:

; 421  : 		{
; 422  : 			for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  001cb	ff 73 04	 push	 DWORD PTR [ebx+4]
  001ce	ff 33		 push	 DWORD PTR [ebx]
  001d0	e8 00 00 00 00	 call	 _EAGetNextMode@8
$LN94@TestSector:
  001d5	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  001d8	85 c0		 test	 eax, eax
  001da	0f 85 a0 fe ff
	ff		 jne	 $LL45@TestSector
  001e0	ff 33		 push	 DWORD PTR [ebx]
  001e2	e8 00 00 00 00	 call	 _EAGetNext@4
$LN93@TestSector:
  001e7	89 03		 mov	 DWORD PTR [ebx], eax
  001e9	85 c0		 test	 eax, eax
  001eb	0f 85 83 fe ff
	ff		 jne	 $LL48@TestSector

; 498  : 			}
; 499  : 		}
; 500  : 		testCase++;

  001f1	ff 85 ac f7 ff
	ff		 inc	 DWORD PTR _testCase$[ebp]
  001f7	81 85 b0 f7 ff
	ff 00 fe ff ff	 add	 DWORD PTR _writeOffset$[ebp], -512 ; fffffe00H
  00201	83 95 b4 f7 ff
	ff ff		 adc	 DWORD PTR _writeOffset$[ebp+4], -1
  00208	81 bd b4 f7 ff
	ff ff ff 01 00	 cmp	 DWORD PTR _writeOffset$[ebp+4], 131071 ; 0001ffffH
  00212	0f 87 33 fe ff
	ff		 ja	 $LL51@TestSector

; 403  : 		return FALSE;
; 404  : 
; 405  : 
; 406  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 407  : 
; 408  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 409  : 
; 410  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 411  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 412  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 413  : 	for (writeOffset = 562949953420800ULL;
; 414  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE;
; 415  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  00218	72 10		 jb	 SHORT $LN49@TestSector
  0021a	81 bd b0 f7 ff
	ff 00 f6 ff ff	 cmp	 DWORD PTR _writeOffset$[ebp], -2560 ; fffff600H
  00224	0f 87 21 fe ff
	ff		 ja	 $LL51@TestSector
$LN49@TestSector:

; 501  : 	}
; 502  : 
; 503  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 504  : 
; 505  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 506  : 
; 507  : 	// Test all EAs that support this mode of operation
; 508  : 	for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  0022a	e8 00 00 00 00	 call	 _EAGetFirst@0
  0022f	e9 3b 01 00 00	 jmp	 $LN97@TestSector
$LL18@TestSector:

; 509  : 	{
; 510  : 		for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  00234	ff 33		 push	 DWORD PTR [ebx]
  00236	e8 00 00 00 00	 call	 _EAGetFirstMode@4
  0023b	e9 1d 01 00 00	 jmp	 $LN98@TestSector
$LL15@TestSector:

; 511  : 		{
; 512  : 			if (!EAIsModeSupported(ci->ea, ci->mode))

  00240	ff 73 04	 push	 DWORD PTR [ebx+4]
  00243	ff 33		 push	 DWORD PTR [ebx]
  00245	e8 00 00 00 00	 call	 _EAIsModeSupported@8
  0024a	85 c0		 test	 eax, eax
  0024c	0f 84 01 01 00
	00		 je	 $LN14@TestSector

; 513  : 				continue;
; 514  : 
; 515  : 			EAGetName(name, ci->ea);

  00252	ff 33		 push	 DWORD PTR [ebx]
  00254	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 _EAGetName@8

; 516  : 
; 517  : 			if (EAInit(ci->ea, key1, ci->ks) != ERR_SUCCESS)

  0025d	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00260	50		 push	 eax
  00261	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  00266	ff 33		 push	 DWORD PTR [ebx]
  00268	e8 00 00 00 00	 call	 _EAInit@12
  0026d	85 c0		 test	 eax, eax
  0026f	0f 85 fd fe ff
	ff		 jne	 $LN75@TestSector

; 518  : 				return FALSE;
; 519  : 
; 520  : 			memcpy(&ci->k2, XTS_vectors[XTS_TEST_COUNT - 1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT - 1].key2));

  00275	6a 08		 push	 8
  00277	59		 pop	 ecx
  00278	8d bb 50 1d 00
	00		 lea	 edi, DWORD PTR [ebx+7504]
  0027e	be 50 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4432

; 521  : 
; 522  : 			if (!EAInitMode(ci))

  00283	53		 push	 ebx
  00284	f3 a5		 rep movsd
  00286	e8 00 00 00 00	 call	 _EAInitMode@4
  0028b	85 c0		 test	 eax, eax
  0028d	0f 84 df fe ff
	ff		 je	 $LN75@TestSector

; 523  : 				return FALSE;
; 524  : 
; 525  : 			// Each data unit will contain the same plaintext
; 526  : 			for (i = 0; i < nbrUnits; i++)
; 527  : 			{
; 528  : 				memcpy((unsigned char *)buf + i * ENCRYPTION_DATA_UNIT_SIZE,
; 529  : 					XTS_vectors[XTS_TEST_COUNT - 1].plaintext,
; 530  : 					ENCRYPTION_DATA_UNIT_SIZE);

  00293	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00298	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  0029d	8d bd bc f7 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  002a3	f3 a5		 rep movsd

; 531  : 			}
; 532  : 
; 533  : 			EncryptBuffer(buf, sizeof (buf), ci);

  002a5	53		 push	 ebx
  002a6	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  002ab	8d b5 bc f7 ff
	ff		 lea	 esi, DWORD PTR _buf$[ebp]
  002b1	8d bd bc f9 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp+512]
  002b7	f3 a5		 rep movsd
  002b9	6a 00		 push	 0
  002bb	be 00 08 00 00	 mov	 esi, 2048		; 00000800H
  002c0	56		 push	 esi
  002c1	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  002c7	50		 push	 eax
  002c8	e8 00 00 00 00	 call	 _EncryptBuffer@16

; 534  : 
; 535  : 			crc = GetCrc32(buf, sizeof (buf));

  002cd	56		 push	 esi
  002ce	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 _GetCrc32@8

; 536  : 
; 537  : 			if (strcmp(name, "GOST 28147-89") == 0)

  002da	6a 0e		 push	 14			; 0000000eH
  002dc	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@FNODOBFM@
  002e1	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  002e4	59		 pop	 ecx
  002e5	33 d2		 xor	 edx, edx
  002e7	f3 a6		 repe cmpsb
  002e9	75 13		 jne	 SHORT $LN6@TestSector

; 538  : 			{
; 539  : #ifdef GOST_DYNAMIC_SBOXES
; 540  : 				if (crc != 0x5d31eec2)

  002eb	3d c2 ee 31 5d	 cmp	 eax, 1563553474		; 5d31eec2H
  002f0	0f 85 7c fe ff
	ff		 jne	 $LN75@TestSector

; 541  : 					return FALSE;
; 542  : #endif
; 543  : 				nTestsPerformed++;

  002f6	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
  002fc	eb 22		 jmp	 SHORT $LN85@TestSector
$LN6@TestSector:

; 544  : 			}
; 545  : 			else if (strcmp(name, "Gost Grasshopper") == 0)

  002fe	6a 11		 push	 17			; 00000011H
  00300	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@FNODOBFM@
  00305	8d 75 bc	 lea	 esi, DWORD PTR _name$[ebp]
  00308	59		 pop	 ecx
  00309	33 d2		 xor	 edx, edx
  0030b	f3 a6		 repe cmpsb
  0030d	75 06		 jne	 SHORT $LN3@TestSector

; 546  : 				nTestsPerformed++;

  0030f	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN3@TestSector:

; 547  : 
; 548  : 
; 549  : 			if (crc == 0x9f5edd58)

  00315	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  0031a	0f 84 52 fe ff
	ff		 je	 $LN75@TestSector
$LN85@TestSector:

; 550  : 				return FALSE;
; 551  : 
; 552  : 			DecryptBuffer(buf, sizeof (buf), ci);

  00320	53		 push	 ebx
  00321	6a 00		 push	 0
  00323	be 00 08 00 00	 mov	 esi, 2048		; 00000800H
  00328	56		 push	 esi
  00329	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 _DecryptBuffer@16

; 553  : 
; 554  : 			if (GetCrc32(buf, sizeof (buf)) != 0x9f5edd58)

  00335	56		 push	 esi
  00336	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 _GetCrc32@8
  00342	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  00347	0f 85 25 fe ff
	ff		 jne	 $LN75@TestSector

; 556  : 
; 557  : 			nTestsPerformed++;

  0034d	ff 85 b8 f7 ff
	ff		 inc	 DWORD PTR _nTestsPerformed$[ebp]
$LN14@TestSector:

; 509  : 	{
; 510  : 		for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  00353	ff 73 04	 push	 DWORD PTR [ebx+4]
  00356	ff 33		 push	 DWORD PTR [ebx]
  00358	e8 00 00 00 00	 call	 _EAGetNextMode@8
$LN98@TestSector:
  0035d	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00360	85 c0		 test	 eax, eax
  00362	0f 85 d8 fe ff
	ff		 jne	 $LL15@TestSector
  00368	ff 33		 push	 DWORD PTR [ebx]
  0036a	e8 00 00 00 00	 call	 _EAGetNext@4
$LN97@TestSector:
  0036f	89 03		 mov	 DWORD PTR [ebx], eax
  00371	85 c0		 test	 eax, eax
  00373	0f 85 bb fe ff
	ff		 jne	 $LL18@TestSector

; 558  : 		}
; 559  : 	}
; 560  : 
; 561  : 	return 1;

  00379	33 c0		 xor	 eax, eax
  0037b	40		 inc	 eax
$LN91@TestSector:
  0037c	5f		 pop	 edi
  0037d	5e		 pop	 esi
$LN53@TestSector:

; 562  : 	//return (nTestsPerformed == 20); // 2 * number of ea
; 563  : }

  0037e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00381	33 cd		 xor	 ecx, ebp
  00383	5b		 pop	 ebx
  00384	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00389	c9		 leave
  0038a	c2 04 00	 ret	 4
_TestSectorBufEncryption@4 ENDP
_TEXT	ENDS
EXTRN	_crypto_close@4:PROC
EXTRN	_crc32_selftests@0:PROC
EXTRN	_crypto_open@0:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT _DoAutoTestAlgorithms@0
_TEXT	SEGMENT
_DoAutoTestAlgorithms@0 PROC				; COMDAT

; 655  : {

  00000	8b ff		 npad	 2
  00002	56		 push	 esi
  00003	57		 push	 edi

; 656  : 	PCRYPTO_INFO ci;
; 657  : 	BOOL bFailed = FALSE;

  00004	33 f6		 xor	 esi, esi

; 658  : 
; 659  : 	ci = crypto_open ();

  00006	e8 00 00 00 00	 call	 _crypto_open@0
  0000b	8b f8		 mov	 edi, eax

; 660  : 	if (!ci)

  0000d	85 ff		 test	 edi, edi
  0000f	74 42		 je	 SHORT $LN5@DoAutoTest
$LN4@DoAutoTest:

; 661  : 		return FALSE;
; 662  : 
; 663  : 	memset (ci, 0, sizeof (*ci));

  00011	68 10 1f 00 00	 push	 7952			; 00001f10H
  00016	6a 00		 push	 0
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _memset
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 664  : 
; 665  : 	/* GOST Cipher test here */
; 666  : 	
; 667  : 	/* PKCS #5 and HMACs */
; 668  : 	if (!test_pkcs5 ())

  00021	e8 00 00 00 00	 call	 _test_pkcs5@0
  00026	85 c0		 test	 eax, eax
  00028	75 03		 jne	 SHORT $LN3@DoAutoTest

; 669  : 		bFailed = TRUE;

  0002a	33 f6		 xor	 esi, esi
  0002c	46		 inc	 esi
$LN3@DoAutoTest:

; 670  : 
; 671  : 	/* CRC-32 */
; 672  : 	if (!crc32_selftests ())

  0002d	e8 00 00 00 00	 call	 _crc32_selftests@0
  00032	85 c0		 test	 eax, eax
  00034	75 03		 jne	 SHORT $LN2@DoAutoTest

; 673  : 		bFailed = TRUE;

  00036	33 f6		 xor	 esi, esi
  00038	46		 inc	 esi
$LN2@DoAutoTest:

; 674  : 
; 675  : 	/* GF multiplicator */
; 676  : #if 0
; 677  : 	if (!GfMulSelfTest ())
; 678  : 		bFailed = TRUE;
; 679  : #endif
; 680  : 
; 681  : 	/* Sector and buffer related algorithms */
; 682  : 	if (!TestSectorBufEncryption (ci))

  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 _TestSectorBufEncryption@4
  0003f	85 c0		 test	 eax, eax
  00041	75 03		 jne	 SHORT $LN1@DoAutoTest

; 683  : 		bFailed = TRUE;

  00043	33 f6		 xor	 esi, esi
  00045	46		 inc	 esi
$LN1@DoAutoTest:

; 684  : 	
; 685  : 	crypto_close (ci);

  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 _crypto_close@4

; 686  : 	return !bFailed;

  0004c	33 c0		 xor	 eax, eax
  0004e	85 f6		 test	 esi, esi
  00050	0f 94 c0	 sete	 al
$LN5@DoAutoTest:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 687  : }

  00055	c3		 ret	 0
_DoAutoTestAlgorithms@0 ENDP
_TEXT	ENDS
PUBLIC	_AutoTestAlgorithms@0
EXTRN	_EnableHwEncryption@4:PROC
EXTRN	_IsHwEncryptionEnabled@0:PROC
; Function compile flags: /Ogsp
;	COMDAT _AutoTestAlgorithms@0
_TEXT	SEGMENT
_AutoTestAlgorithms@0 PROC				; COMDAT

; 698  : {

  00000	8b ff		 npad	 2
  00002	56		 push	 esi

; 699  : 	BOOL result = TRUE;

  00003	33 f6		 xor	 esi, esi
  00005	57		 push	 edi
  00006	46		 inc	 esi

; 700  : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  00007	e8 00 00 00 00	 call	 _IsHwEncryptionEnabled@0

; 701  : 
; 702  : 	EnableHwEncryption (FALSE);

  0000c	6a 00		 push	 0
  0000e	8b f8		 mov	 edi, eax
  00010	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 703  : 
; 704  : 	if (!DoAutoTestAlgorithms())

  00015	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  0001a	85 c0		 test	 eax, eax
  0001c	75 02		 jne	 SHORT $LN2@AutoTestAl

; 705  : 		result = FALSE;

  0001e	33 f6		 xor	 esi, esi
$LN2@AutoTestAl:

; 706  : 
; 707  : 	EnableHwEncryption (TRUE);

  00020	6a 01		 push	 1
  00022	e8 00 00 00 00	 call	 _EnableHwEncryption@4

; 708  : 
; 709  : 	if (!DoAutoTestAlgorithms())

  00027	e8 00 00 00 00	 call	 _DoAutoTestAlgorithms@0
  0002c	85 c0		 test	 eax, eax
  0002e	75 02		 jne	 SHORT $LN1@AutoTestAl

; 710  : 		result = FALSE;

  00030	33 f6		 xor	 esi, esi
$LN1@AutoTestAl:

; 711  : 
; 712  : 	EnableHwEncryption (hwEncryptionEnabled);

  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _EnableHwEncryption@4
  00038	5f		 pop	 edi

; 713  : 	return result;

  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi

; 714  : }

  0003c	c3		 ret	 0
_AutoTestAlgorithms@0 ENDP
_TEXT	ENDS
END
