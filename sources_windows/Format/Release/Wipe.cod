; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Common\Wipe.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_GetWipePassCount
PUBLIC	_WipeBuffer
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\wipe.c
;	COMDAT _Wipe35Gutmann
_TEXT	SEGMENT
_wipePat3$ = -4						; size = 3
_pass$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Wipe35Gutmann PROC					; COMDAT

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 140  : 	byte wipePat3[] = { 0x92, 0x49, 0x24 };
; 141  : 	int wipePat3Pos;
; 142  : 	size_t i;
; 143  : 
; 144  : 	switch (pass)

  00004	8b 4d 08	 mov	 ecx, DWORD PTR _pass$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8d 41 fb	 lea	 eax, DWORD PTR [ecx-5]
  0000d	66 c7 45 fc 92
	49		 mov	 WORD PTR _wipePat3$[ebp], 18834 ; 00004992H
  00013	c6 45 fe 24	 mov	 BYTE PTR _wipePat3$[ebp+2], 36 ; 00000024H
  00017	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0001a	77 78		 ja	 SHORT $LN13@Wipe35Gutm
  0001c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@Wipe35Gutm[eax]
  00023	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@Wipe35Gutm[eax*4]
$LN7@Wipe35Gutm:

; 145  : 	{
; 146  : 	case 5:
; 147  : 		memset (buffer, 0x55, size);

  0002a	ff 75 10	 push	 DWORD PTR _size$[ebp]
  0002d	6a 55		 push	 85			; 00000055H

; 148  : 		break;

  0002f	eb 79		 jmp	 SHORT $LN22@Wipe35Gutm
$LN8@Wipe35Gutm:

; 149  : 
; 150  : 	case 6:
; 151  : 		memset (buffer, 0xaa, size);

  00031	ff 75 10	 push	 DWORD PTR _size$[ebp]
  00034	68 aa 00 00 00	 push	 170			; 000000aaH

; 152  : 		break;

  00039	eb 6f		 jmp	 SHORT $LN22@Wipe35Gutm
$LN9@Wipe35Gutm:

; 153  : 
; 154  : 	case 7:
; 155  : 	case 26:
; 156  : 	case 29:
; 157  : 		wipePat3Pos = 0;

  0003b	33 f6		 xor	 esi, esi

; 158  : 		goto wipe3;

  0003d	eb 0c		 jmp	 SHORT $wipe3$25
$LN10@Wipe35Gutm:

; 159  : 
; 160  : 	case 8:
; 161  : 	case 27:
; 162  : 	case 30:
; 163  : 		wipePat3Pos = 1;

  0003f	be 01 00 00 00	 mov	 esi, 1

; 164  : 		goto wipe3;

  00044	eb 05		 jmp	 SHORT $wipe3$25
$LN11@Wipe35Gutm:

; 165  : 
; 166  : 	case 9:
; 167  : 	case 28:
; 168  : 	case 31:
; 169  : 		wipePat3Pos = 2;

  00046	be 02 00 00 00	 mov	 esi, 2
$wipe3$25:

; 170  : 		goto wipe3;
; 171  : 
; 172  : wipe3:
; 173  : 		if (pass >= 29)

  0004b	83 f9 1d	 cmp	 ecx, 29			; 0000001dH
  0004e	7c 0a		 jl	 SHORT $LN12@Wipe35Gutm

; 174  : 		{
; 175  : 			wipePat3[0] = ~wipePat3[0];

  00050	66 c7 45 fc 6d
	b6		 mov	 WORD PTR _wipePat3$[ebp], 46701 ; 0000b66dH

; 176  : 			wipePat3[1] = ~wipePat3[1];
; 177  : 			wipePat3[2] = ~wipePat3[2];

  00056	c6 45 fe db	 mov	 BYTE PTR _wipePat3$[ebp+2], 219 ; 000000dbH
$LN12@Wipe35Gutm:

; 178  : 		}
; 179  : 
; 180  : 		for (i = 0; i < size; ++i)

  0005a	8b 5d 10	 mov	 ebx, DWORD PTR _size$[ebp]
  0005d	33 ff		 xor	 edi, edi
  0005f	85 db		 test	 ebx, ebx
  00061	74 52		 je	 SHORT $LN15@Wipe35Gutm
$LL6@Wipe35Gutm:

; 181  : 		{
; 182  : 			buffer[i] = wipePat3[wipePat3Pos++ % 3];

  00063	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00068	8b ce		 mov	 ecx, esi
  0006a	f7 ee		 imul	 esi
  0006c	46		 inc	 esi
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
  00074	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00077	2b c8		 sub	 ecx, eax
  00079	8a 44 0d fc	 mov	 al, BYTE PTR _wipePat3$[ebp+ecx]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00080	88 04 0f	 mov	 BYTE PTR [edi+ecx], al
  00083	47		 inc	 edi
  00084	3b fb		 cmp	 edi, ebx
  00086	72 db		 jb	 SHORT $LL6@Wipe35Gutm

; 191  : 	}
; 192  : 
; 193  : 	return TRUE;

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	5b		 pop	 ebx

; 194  : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN13@Wipe35Gutm:

; 183  : 		}
; 184  : 		break;
; 185  : 
; 186  : 	default:
; 187  : 		if (pass >= 10 && pass <= 25)

  00094	8d 41 f6	 lea	 eax, DWORD PTR [ecx-10]
  00097	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0009a	77 25		 ja	 SHORT $LN14@Wipe35Gutm

; 188  : 			memset (buffer, (pass - 10) * 0x11, size);

  0009c	ff 75 10	 push	 DWORD PTR _size$[ebp]
  0009f	83 c1 f6	 add	 ecx, -10		; fffffff6H
  000a2	8b c1		 mov	 eax, ecx
  000a4	c1 e0 04	 shl	 eax, 4
  000a7	03 c1		 add	 eax, ecx
  000a9	50		 push	 eax
$LN22@Wipe35Gutm:
  000aa	ff 75 0c	 push	 DWORD PTR _buffer$[ebp]
  000ad	e8 00 00 00 00	 call	 _memset
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Wipe35Gutm:

; 191  : 	}
; 192  : 
; 193  : 	return TRUE;

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	b8 01 00 00 00	 mov	 eax, 1
  000bc	5b		 pop	 ebx

; 194  : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN14@Wipe35Gutm:
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi

; 189  : 		else
; 190  : 			return FALSE;

  000c3	33 c0		 xor	 eax, eax
  000c5	5b		 pop	 ebx

; 194  : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
  000ca	66 90		 npad	 2
$LN24@Wipe35Gutm:
  000cc	00 00 00 00	 DD	 $LN7@Wipe35Gutm
  000d0	00 00 00 00	 DD	 $LN8@Wipe35Gutm
  000d4	00 00 00 00	 DD	 $LN9@Wipe35Gutm
  000d8	00 00 00 00	 DD	 $LN10@Wipe35Gutm
  000dc	00 00 00 00	 DD	 $LN11@Wipe35Gutm
  000e0	00 00 00 00	 DD	 $LN13@Wipe35Gutm
$LN21@Wipe35Gutm:
  000e4	00		 DB	 0
  000e5	01		 DB	 1
  000e6	02		 DB	 2
  000e7	03		 DB	 3
  000e8	04		 DB	 4
  000e9	05		 DB	 5
  000ea	05		 DB	 5
  000eb	05		 DB	 5
  000ec	05		 DB	 5
  000ed	05		 DB	 5
  000ee	05		 DB	 5
  000ef	05		 DB	 5
  000f0	05		 DB	 5
  000f1	05		 DB	 5
  000f2	05		 DB	 5
  000f3	05		 DB	 5
  000f4	05		 DB	 5
  000f5	05		 DB	 5
  000f6	05		 DB	 5
  000f7	05		 DB	 5
  000f8	05		 DB	 5
  000f9	02		 DB	 2
  000fa	03		 DB	 3
  000fb	04		 DB	 4
  000fc	02		 DB	 2
  000fd	03		 DB	 3
  000fe	04		 DB	 4
_Wipe35Gutmann ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\wipe.c
;	COMDAT _Wipe7Dod5220
_TEXT	SEGMENT
_pass$ = 8						; size = 4
_randChars$ = 12					; size = 4
_buffer$ = 16						; size = 4
_size$ = 20						; size = 4
_Wipe7Dod5220 PROC					; COMDAT

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	byte wipeChar;
; 94   : 
; 95   : 	switch (pass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pass$[ebp]
  00006	48		 dec	 eax
  00007	83 f8 05	 cmp	 eax, 5
  0000a	77 46		 ja	 SHORT $LN9@Wipe7Dod52
  0000c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@Wipe7Dod52[eax*4]
$LN4@Wipe7Dod52:

; 96   : 	{
; 97   : 	case 1:
; 98   : 		wipeChar = randChars[0];

  00013	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  00016	8a 00		 mov	 al, BYTE PTR [eax]

; 99   : 		break;

  00018	eb 1f		 jmp	 SHORT $LN2@Wipe7Dod52
$LN5@Wipe7Dod52:

; 100  : 
; 101  : 	case 2:
; 102  : 		wipeChar = ~randChars[0];

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  0001d	8a 00		 mov	 al, BYTE PTR [eax]

; 103  : 		break;

  0001f	eb 16		 jmp	 SHORT $LN11@Wipe7Dod52
$LN6@Wipe7Dod52:

; 104  : 
; 105  : 	case 4:
; 106  : 		wipeChar = randChars[1];

  00021	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  00024	8a 40 01	 mov	 al, BYTE PTR [eax+1]

; 107  : 		break;

  00027	eb 10		 jmp	 SHORT $LN2@Wipe7Dod52
$LN7@Wipe7Dod52:

; 108  : 
; 109  : 	case 5:
; 110  : 		wipeChar = randChars[2];

  00029	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  0002c	8a 40 02	 mov	 al, BYTE PTR [eax+2]

; 111  : 		break;

  0002f	eb 08		 jmp	 SHORT $LN2@Wipe7Dod52
$LN8@Wipe7Dod52:

; 112  : 
; 113  : 	case 6:
; 114  : 		wipeChar = ~randChars[2];

  00031	8b 45 0c	 mov	 eax, DWORD PTR _randChars$[ebp]
  00034	8a 40 02	 mov	 al, BYTE PTR [eax+2]
$LN11@Wipe7Dod52:
  00037	f6 d0		 not	 al
$LN2@Wipe7Dod52:

; 119  : 	}
; 120  : 
; 121  : 	memset (buffer, wipeChar, size);

  00039	ff 75 14	 push	 DWORD PTR _size$[ebp]
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	50		 push	 eax
  00040	ff 75 10	 push	 DWORD PTR _buffer$[ebp]
  00043	e8 00 00 00 00	 call	 _memset
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 122  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 123  : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Wipe7Dod52:

; 115  : 		break;
; 116  : 
; 117  : 	default:
; 118  : 		return FALSE;

  00052	33 c0		 xor	 eax, eax

; 123  : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
  00056	66 90		 npad	 2
$LN13@Wipe7Dod52:
  00058	00 00 00 00	 DD	 $LN4@Wipe7Dod52
  0005c	00 00 00 00	 DD	 $LN5@Wipe7Dod52
  00060	00 00 00 00	 DD	 $LN9@Wipe7Dod52
  00064	00 00 00 00	 DD	 $LN6@Wipe7Dod52
  00068	00 00 00 00	 DD	 $LN7@Wipe7Dod52
  0006c	00 00 00 00	 DD	 $LN8@Wipe7Dod52
_Wipe7Dod5220 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\wipe.c
;	COMDAT _Wipe3Dod5220
_TEXT	SEGMENT
_pass$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Wipe3Dod5220 PROC					; COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	byte wipeChar;
; 58   : 
; 59   : 	switch (pass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pass$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	74 10		 je	 SHORT $LN4@Wipe3Dod52
  0000b	83 e8 01	 sub	 eax, 1
  0000e	74 04		 je	 SHORT $LN5@Wipe3Dod52

; 68   : 
; 69   : 	default:
; 70   : 		return FALSE;

  00010	33 c0		 xor	 eax, eax

; 75   : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN5@Wipe3Dod52:

; 63   : 		break;
; 64   : 
; 65   : 	case 2:
; 66   : 		wipeChar = 0xff;

  00014	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH

; 67   : 		break;

  00019	eb 02		 jmp	 SHORT $LN2@Wipe3Dod52
$LN4@Wipe3Dod52:

; 60   : 	{
; 61   : 	case 1:
; 62   : 		wipeChar = 0;

  0001b	33 c0		 xor	 eax, eax
$LN2@Wipe3Dod52:

; 71   : 	}
; 72   : 
; 73   : 	memset (buffer, wipeChar, size);

  0001d	ff 75 10	 push	 DWORD PTR _size$[ebp]
  00020	50		 push	 eax
  00021	ff 75 0c	 push	 DWORD PTR _buffer$[ebp]
  00024	e8 00 00 00 00	 call	 _memset
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 74   : 	return TRUE;

  0002c	b8 01 00 00 00	 mov	 eax, 1

; 75   : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_Wipe3Dod5220 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\wipe.c
;	COMDAT _Wipe1PseudoRandom
_TEXT	SEGMENT
_pass$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_Wipe1PseudoRandom PROC					; COMDAT

; 36   : 	return FALSE;

  00000	33 c0		 xor	 eax, eax

; 37   : }

  00002	c3		 ret	 0
_Wipe1PseudoRandom ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\wipe.c
;	COMDAT _WipeBuffer
_TEXT	SEGMENT
_algorithm$ = 8						; size = 4
_randChars$ = 12					; size = 4
_pass$ = 16						; size = 4
_buffer$ = 20						; size = 4
_size$ = 24						; size = 4
_WipeBuffer PROC					; COMDAT

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 	switch (algorithm)

  00003	8b 45 08	 mov	 eax, DWORD PTR _algorithm$[ebp]
  00006	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  0000b	7f 50		 jg	 SHORT $LN10@WipeBuffer
  0000d	74 38		 je	 SHORT $LN6@WipeBuffer
  0000f	83 f8 64	 cmp	 eax, 100		; 00000064H
  00012	74 57		 je	 SHORT $LN4@WipeBuffer
  00014	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00019	75 49		 jne	 SHORT $LN8@WipeBuffer

; 254  : 	{
; 255  : 	case GST_WIPE_1_RAND:
; 256  : 		return Wipe1PseudoRandom (pass, buffer, size);
; 257  : 
; 258  : 	case GST_WIPE_3_DOD_5220:
; 259  : 		return Wipe3Dod5220 (pass, buffer, size);

  0001b	8b 45 10	 mov	 eax, DWORD PTR _pass$[ebp]
  0001e	83 e8 01	 sub	 eax, 1
  00021	74 0c		 je	 SHORT $LN16@WipeBuffer
  00023	83 e8 01	 sub	 eax, 1
  00026	75 43		 jne	 SHORT $LN4@WipeBuffer
  00028	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0002d	eb 02		 jmp	 SHORT $LN14@WipeBuffer
$LN16@WipeBuffer:
  0002f	33 c0		 xor	 eax, eax
$LN14@WipeBuffer:
  00031	ff 75 18	 push	 DWORD PTR _size$[ebp]
  00034	50		 push	 eax
  00035	ff 75 14	 push	 DWORD PTR _buffer$[ebp]
  00038	e8 00 00 00 00	 call	 _memset
  0003d	b8 01 00 00 00	 mov	 eax, 1

; 263  : 
; 264  : 	case GST_WIPE_35_GUTMANN:
; 265  : 		return Wipe35Gutmann (pass, buffer, size);

  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 272  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN6@WipeBuffer:

; 260  : 
; 261  : 	case GST_WIPE_7_DOD_5220:
; 262  : 		return Wipe7Dod5220 (pass, randChars, buffer, size);

  00047	ff 75 18	 push	 DWORD PTR _size$[ebp]
  0004a	ff 75 14	 push	 DWORD PTR _buffer$[ebp]
  0004d	ff 75 0c	 push	 DWORD PTR _randChars$[ebp]
  00050	ff 75 10	 push	 DWORD PTR _pass$[ebp]
  00053	e8 00 00 00 00	 call	 _Wipe7Dod5220
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 272  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN10@WipeBuffer:

; 253  : 	switch (algorithm)

  0005d	3d ac 0d 00 00	 cmp	 eax, 3500		; 00000dacH
  00062	74 0b		 je	 SHORT $LN7@WipeBuffer
$LN8@WipeBuffer:

; 266  : 
; 267  : 	default:
; 268  : 		GST_THROW_FATAL_EXCEPTION;

  00064	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0
$LN4@WipeBuffer:

; 269  : 	}
; 270  : 
; 271  : 	return FALSE;	// Prevent compiler warnings

  0006b	33 c0		 xor	 eax, eax

; 272  : }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN7@WipeBuffer:

; 263  : 
; 264  : 	case GST_WIPE_35_GUTMANN:
; 265  : 		return Wipe35Gutmann (pass, buffer, size);

  0006f	ff 75 18	 push	 DWORD PTR _size$[ebp]
  00072	ff 75 14	 push	 DWORD PTR _buffer$[ebp]
  00075	ff 75 10	 push	 DWORD PTR _pass$[ebp]
  00078	e8 00 00 00 00	 call	 _Wipe35Gutmann
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 272  : }

  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_WipeBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\wipe.c
;	COMDAT _GetWipePassCount
_TEXT	SEGMENT
_algorithm$ = 8						; size = 4
_GetWipePassCount PROC					; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  : 	switch (algorithm)

  00003	8b 45 08	 mov	 eax, DWORD PTR _algorithm$[ebp]
  00006	3d bc 02 00 00	 cmp	 eax, 700		; 000002bcH
  0000b	7f 23		 jg	 SHORT $LN10@GetWipePas
  0000d	74 1a		 je	 SHORT $LN6@GetWipePas
  0000f	83 f8 64	 cmp	 eax, 100		; 00000064H
  00012	74 0e		 je	 SHORT $LN4@GetWipePas
  00014	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00019	75 1c		 jne	 SHORT $LN8@GetWipePas

; 216  : 
; 217  : 	case GST_WIPE_3_DOD_5220:
; 218  : 		return 3;

  0001b	b8 03 00 00 00	 mov	 eax, 3

; 231  : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN4@GetWipePas:

; 213  : 	{
; 214  : 	case GST_WIPE_1_RAND:
; 215  : 		return 1;

  00022	b8 01 00 00 00	 mov	 eax, 1

; 231  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN6@GetWipePas:

; 219  : 
; 220  : 	case GST_WIPE_7_DOD_5220:
; 221  : 		return 7;

  00029	b8 07 00 00 00	 mov	 eax, 7

; 231  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN10@GetWipePas:

; 212  : 	switch (algorithm)

  00030	3d ac 0d 00 00	 cmp	 eax, 3500		; 00000dacH
  00035	74 0b		 je	 SHORT $LN7@GetWipePas
$LN8@GetWipePas:

; 225  : 
; 226  : 	default:
; 227  : 		GST_THROW_FATAL_EXCEPTION;

  00037	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 228  : 	}
; 229  : 
; 230  : 	return 0;	// Prevent compiler warnings

  0003e	33 c0		 xor	 eax, eax

; 231  : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN7@GetWipePas:

; 222  : 
; 223  : 	case GST_WIPE_35_GUTMANN:
; 224  : 		return 35;

  00042	b8 23 00 00 00	 mov	 eax, 35			; 00000023H

; 231  : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_GetWipePassCount ENDP
_TEXT	ENDS
END
