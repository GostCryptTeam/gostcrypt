; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Common\Tests.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_XTS_vectors
PUBLIC	_hmac_whirlpool_test_key
PUBLIC	??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ ; `string'
PUBLIC	_hmac_whirlpool_test_data
PUBLIC	??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ ; `string'
PUBLIC	_hmac_whirlpool_test_vectors
PUBLIC	??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ ; `string'
PUBLIC	_hmac_gosthash_test_key
PUBLIC	_hmac_gosthash_test_data
PUBLIC	_hmac_gosthash_test_vectors
PUBLIC	??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@ ; `string'
PUBLIC	_hmac_stribog_test_key
PUBLIC	_hmac_stribog_test_data
PUBLIC	_hmac_stribog_test_vectors
PUBLIC	??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@ ; `string'
_DATA	SEGMENT
COMM	_ks_tmp:BYTE:0220H
_DATA	ENDS
;	COMDAT ??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@
CONST	SEGMENT
??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@ DB 't'
	DB	08aH, 'd', 094H, 0b8H, '4', 0bdH, 'r', 095H, 0a2H, ';', 011H, 086H
	DB	01dH, 'F', 0e7H, 088H, 0fH, 'e', 098H, 0d3H, 'T', 0e1H, 0b2H, 'J'
	DB	'5', 0c2H, 0a2H, 085H, 'A', 08H, 085H, 07H, 0c8H, 'RQ6&', 0d2H
	DB	08cH, '8', 0e5H, 'U', 09eH, 0d2H, 01bH, 088H, '++7', 0aeH, 087H
	DB	011H, 01aH, '7', 0e4H, 0b1H, 088H, 0d3H, 0d7H, 08cH, 09fH, 0efH
	DB	01bH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@
CONST	SEGMENT
??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@ DB 'R'
	DB	'5', 0b7H, 017H, 'V', 0b8H, 'u!', 0caH, 0e9H, 'R', 09bH, '!', 097H
	DB	'>mNT', 012H, 0fcH, 'ap@', 0faH, 'FL', 0f7H, '$', 09dH, '(', 0deH
	DB	01dH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
CONST	SEGMENT
??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@ DB 03H
	DB	091H, 0d2H, 080H, 00H, 0b6H, 'b', 0bbH, 0b8H, 0e6H, '#>', 0e8H
	DB	'l', 0f2H, 0b2H, 084H, 'tLs', 08bH, 'X', 00H, 0baH, '(', 012H, 0edH
	DB	'Ro', 0e3H, 015H, ':', 0b1H, 0baH, 0e7H, 0e2H, '6', 0beH, 096H
	DB	'TI?', 019H, 0faH, 0ceH, 0a6H, 'D', 01fH, '`', 0f5H, 0f0H, 018H
	DB	093H, 09H, 011H, 0a5H, 0e5H, 0ceH, 0d8H, 0f2H, 'j', 0bfH, 0a4H
	DB	02H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
CONST	SEGMENT
??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@ DB 'abcdbcdecdefdefg'
	DB	'efghfghighijhijkijkljklmklmnlmnomnopnopq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
CONST	SEGMENT
??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@ DB 00H
	DB	011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH
	DB	01H, '#Eg', 089H, 0abH, 0cdH, 0efH, 00H, 011H, '"3DUfw', 088H, 099H
	DB	0aaH, 0bbH, 0ccH, 0ddH, 0eeH, 0ffH, 01H, '#Eg', 089H, 0abH, 0cdH
	DB	0efH, 00H, 011H, '"3DUfw', 088H, 099H, 0aaH, 0bbH, 0ccH, 0ddH, 0eeH
	DB	0ffH, 00H					; `string'
CONST	ENDS
_DATA	SEGMENT
_XTS_vectors DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	01cH
	DB	03bH
	DB	03aH
	DB	010H
	DB	02fH
	DB	077H
	DB	03H
	DB	086H
	DB	0e4H
	DB	083H
	DB	06cH
	DB	099H
	DB	0e3H
	DB	070H
	DB	0cfH
	DB	09bH
	DB	0eaH
	DB	00H
	DB	080H
	DB	03fH
	DB	05eH
	DB	048H
	DB	023H
	DB	057H
	DB	0a4H
	DB	0aeH
	DB	012H
	DB	0d4H
	DB	014H
	DB	0a3H
	DB	0e6H
	DB	03bH
	DB	05dH
	DB	031H
	DB	0e2H
	DB	076H
	DB	0f8H
	DB	0feH
	DB	04aH
	DB	08dH
	DB	066H
	DB	0b3H
	DB	017H
	DB	0f9H
	DB	0acH
	DB	068H
	DB	03fH
	DB	044H
	DB	068H
	DB	0aH
	DB	086H
	DB	0acH
	DB	035H
	DB	0adH
	DB	0fcH
	DB	033H
	DB	045H
	DB	0beH
	DB	0feH
	DB	0cbH
	DB	04bH
	DB	0b1H
	DB	088H
	DB	0fdH
	DB	057H
	DB	076H
	DB	092H
	DB	06cH
	DB	049H
	DB	0a3H
	DB	09H
	DB	05eH
	DB	0b1H
	DB	08H
	DB	0fdH
	DB	010H
	DB	098H
	DB	0baH
	DB	0ecH
	DB	070H
	DB	0aaH
	DB	0a6H
	DB	069H
	DB	099H
	DB	0a7H
	DB	02aH
	DB	082H
	DB	0f2H
	DB	07dH
	DB	084H
	DB	08bH
	DB	021H
	DB	0d4H
	DB	0a7H
	DB	041H
	DB	0b0H
	DB	0c5H
	DB	0cdH
	DB	04dH
	DB	05fH
	DB	0ffH
	DB	09dH
	DB	0acH
	DB	089H
	DB	0aeH
	DB	0baH
	DB	012H
	DB	029H
	DB	061H
	DB	0d0H
	DB	03aH
	DB	075H
	DB	071H
	DB	023H
	DB	0e9H
	DB	087H
	DB	0fH
	DB	08aH
	DB	0cfH
	DB	010H
	DB	00H
	DB	02H
	DB	08H
	DB	087H
	DB	089H
	DB	014H
	DB	029H
	DB	0caH
	DB	02aH
	DB	03eH
	DB	07aH
	DB	07dH
	DB	07dH
	DB	0f7H
	DB	0b1H
	DB	03H
	DB	055H
	DB	016H
	DB	05cH
	DB	08bH
	DB	09aH
	DB	06dH
	DB	0aH
	DB	07dH
	DB	0e8H
	DB	0b0H
	DB	062H
	DB	0c4H
	DB	050H
	DB	0dH
	DB	0c4H
	DB	0cdH
	DB	012H
	DB	0cH
	DB	0fH
	DB	074H
	DB	018H
	DB	0daH
	DB	0e3H
	DB	0d0H
	DB	0b5H
	DB	078H
	DB	01cH
	DB	034H
	DB	080H
	DB	03fH
	DB	0a7H
	DB	054H
	DB	021H
	DB	0c7H
	DB	090H
	DB	0dfH
	DB	0e1H
	DB	0deH
	DB	018H
	DB	034H
	DB	0f2H
	DB	080H
	DB	0d7H
	DB	066H
	DB	07bH
	DB	032H
	DB	07fH
	DB	06cH
	DB	08cH
	DB	0d7H
	DB	055H
	DB	07eH
	DB	012H
	DB	0acH
	DB	03aH
	DB	0fH
	DB	093H
	DB	0ecH
	DB	05H
	DB	0c5H
	DB	02eH
	DB	04H
	DB	093H
	DB	0efH
	DB	031H
	DB	0a1H
	DB	02dH
	DB	03dH
	DB	092H
	DB	060H
	DB	0f7H
	DB	09aH
	DB	028H
	DB	09dH
	DB	06aH
	DB	037H
	DB	09bH
	DB	0c7H
	DB	0cH
	DB	050H
	DB	084H
	DB	014H
	DB	073H
	DB	0d1H
	DB	0a8H
	DB	0ccH
	DB	081H
	DB	0ecH
	DB	058H
	DB	03eH
	DB	096H
	DB	045H
	DB	0e0H
	DB	07bH
	DB	08dH
	DB	096H
	DB	070H
	DB	065H
	DB	05bH
	DB	0a5H
	DB	0bbH
	DB	0cfH
	DB	0ecH
	DB	0c6H
	DB	0dcH
	DB	039H
	DB	066H
	DB	038H
	DB	0aH
	DB	0d8H
	DB	0feH
	DB	0cbH
	DB	017H
	DB	0b6H
	DB	0baH
	DB	02H
	DB	046H
	DB	09aH
	DB	02H
	DB	0aH
	DB	084H
	DB	0e1H
	DB	08eH
	DB	08fH
	DB	084H
	DB	025H
	DB	020H
	DB	070H
	DB	0c1H
	DB	03eH
	DB	09fH
	DB	01fH
	DB	028H
	DB	09bH
	DB	0e5H
	DB	04fH
	DB	0bcH
	DB	048H
	DB	014H
	DB	057H
	DB	077H
	DB	08fH
	DB	061H
	DB	060H
	DB	015H
	DB	0e1H
	DB	032H
	DB	07aH
	DB	02H
	DB	0b1H
	DB	040H
	DB	0f1H
	DB	050H
	DB	05eH
	DB	0b3H
	DB	09H
	DB	032H
	DB	06dH
	DB	068H
	DB	037H
	DB	08fH
	DB	083H
	DB	074H
	DB	059H
	DB	05cH
	DB	084H
	DB	09dH
	DB	084H
	DB	0f4H
	DB	0c3H
	DB	033H
	DB	0ecH
	DB	044H
	DB	023H
	DB	088H
	DB	051H
	DB	043H
	DB	0cbH
	DB	047H
	DB	0bdH
	DB	071H
	DB	0c5H
	DB	0edH
	DB	0aeH
	DB	09bH
	DB	0e6H
	DB	09aH
	DB	02fH
	DB	0feH
	DB	0ceH
	DB	0b1H
	DB	0beH
	DB	0c9H
	DB	0deH
	DB	024H
	DB	04fH
	DB	0beH
	DB	015H
	DB	099H
	DB	02bH
	DB	011H
	DB	0b7H
	DB	07cH
	DB	04H
	DB	0fH
	DB	012H
	DB	0bdH
	DB	08fH
	DB	06aH
	DB	097H
	DB	05aH
	DB	044H
	DB	0a0H
	DB	0f9H
	DB	0cH
	DB	029H
	DB	0a9H
	DB	0abH
	DB	0c3H
	DB	0d4H
	DB	0d8H
	DB	093H
	DB	092H
	DB	072H
	DB	084H
	DB	0c5H
	DB	087H
	DB	054H
	DB	0ccH
	DB	0e2H
	DB	094H
	DB	052H
	DB	09fH
	DB	086H
	DB	014H
	DB	0dcH
	DB	0d2H
	DB	0abH
	DB	0a9H
	DB	091H
	DB	092H
	DB	05fH
	DB	0edH
	DB	0c4H
	DB	0aeH
	DB	074H
	DB	0ffH
	DB	0acH
	DB	06eH
	DB	033H
	DB	03bH
	DB	093H
	DB	0ebH
	DB	04aH
	DB	0ffH
	DB	04H
	DB	079H
	DB	0daH
	DB	09aH
	DB	041H
	DB	0eH
	DB	044H
	DB	050H
	DB	0e0H
	DB	0ddH
	DB	07aH
	DB	0e4H
	DB	0c6H
	DB	0e2H
	DB	091H
	DB	09H
	DB	00H
	DB	057H
	DB	05dH
	DB	0a4H
	DB	01H
	DB	0fcH
	DB	07H
	DB	05H
	DB	09fH
	DB	064H
	DB	05eH
	DB	08bH
	DB	07eH
	DB	09bH
	DB	0fdH
	DB	0efH
	DB	033H
	DB	094H
	DB	030H
	DB	054H
	DB	0ffH
	DB	084H
	DB	01H
	DB	014H
	DB	093H
	DB	0c2H
	DB	07bH
	DB	034H
	DB	029H
	DB	0eaH
	DB	0edH
	DB	0b4H
	DB	0edH
	DB	053H
	DB	076H
	DB	044H
	DB	01aH
	DB	077H
	DB	0edH
	DB	043H
	DB	085H
	DB	01aH
	DB	0d7H
	DB	07fH
	DB	016H
	DB	0f5H
	DB	041H
	DB	0dfH
	DB	0d2H
	DB	069H
	DB	0d5H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	014H
	DB	0fbH
	DB	0aH
	DB	0abH
	DB	01cH
	DB	0bbH
	DB	04cH
	DB	015H
	DB	050H
	DB	0beH
	DB	097H
	DB	0f7H
	DB	0abH
	DB	040H
	DB	066H
	DB	019H
	DB	03cH
	DB	04cH
	DB	0aaH
	DB	077H
	DB	03dH
	DB	0adH
	DB	038H
	DB	01H
	DB	04bH
	DB	0d2H
	DB	09H
	DB	02fH
	DB	0a7H
	DB	055H
	DB	0c8H
	DB	024H
	DB	0bbH
	DB	05eH
	DB	054H
	DB	0c4H
	DB	0f3H
	DB	06fH
	DB	0fdH
	DB	0a9H
	DB	0fcH
	DB	0eaH
	DB	070H
	DB	0b9H
	DB	0c6H
	DB	0e6H
	DB	093H
	DB	0e1H
	DB	048H
	DB	0c1H
	DB	051H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	077H
	DB	0a3H
	DB	012H
	DB	051H
	DB	061H
	DB	08aH
	DB	015H
	DB	0e6H
	DB	0b9H
	DB	02dH
	DB	01dH
	DB	066H
	DB	0dfH
	DB	0feH
	DB	07bH
	DB	050H
	DB	0b5H
	DB	0bH
	DB	0adH
	DB	055H
	DB	023H
	DB	05H
	DB	0baH
	DB	02H
	DB	017H
	DB	0a6H
	DB	010H
	DB	068H
	DB	08eH
	DB	0ffH
	DB	07eH
	DB	011H
	DB	0e1H
	DB	0d0H
	DB	022H
	DB	054H
	DB	038H
	DB	0e0H
	DB	093H
	DB	024H
	DB	02dH
	DB	06dH
	DB	0b2H
	DB	074H
	DB	0fdH
	DB	0e8H
	DB	01H
	DB	0d4H
	DB	0caH
	DB	0e0H
	DB	06fH
	DB	020H
	DB	092H
	DB	0c7H
	DB	028H
	DB	0b2H
	DB	047H
	DB	085H
	DB	059H
	DB	0dfH
	DB	058H
	DB	0e8H
	DB	037H
	DB	0c2H
	DB	046H
	DB	09eH
	DB	0e4H
	DB	0a4H
	DB	0faH
	DB	079H
	DB	04eH
	DB	04bH
	DB	0bcH
	DB	07fH
	DB	039H
	DB	0bcH
	DB	02H
	DB	06eH
	DB	03cH
	DB	0b7H
	DB	02cH
	DB	033H
	DB	0b0H
	DB	088H
	DB	08fH
	DB	025H
	DB	0b4H
	DB	0acH
	DB	0f5H
	DB	06aH
	DB	02aH
	DB	098H
	DB	04H
	DB	0f1H
	DB	0ceH
	DB	06dH
	DB	03dH
	DB	06eH
	DB	01dH
	DB	0c6H
	DB	0caH
	DB	018H
	DB	01dH
	DB	04bH
	DB	054H
	DB	061H
	DB	079H
	DB	0d5H
	DB	055H
	DB	044H
	DB	0aaH
	DB	077H
	DB	060H
	DB	0c4H
	DB	0dH
	DB	06H
	DB	074H
	DB	015H
	DB	039H
	DB	0c7H
	DB	0e3H
	DB	0cdH
	DB	09dH
	DB	02fH
	DB	066H
	DB	050H
	DB	0b2H
	DB	01H
	DB	03fH
	DB	0d0H
	DB	0eeH
	DB	0b8H
	DB	0c2H
	DB	0b8H
	DB	0e3H
	DB	0d8H
	DB	0d2H
	DB	040H
	DB	0ccH
	DB	0aeH
	DB	02dH
	DB	04cH
	DB	098H
	DB	032H
	DB	0aH
	DB	074H
	DB	042H
	DB	0e1H
	DB	0c8H
	DB	0d7H
	DB	05aH
	DB	042H
	DB	0d6H
	DB	0e6H
	DB	0cfH
	DB	0a4H
	DB	0c2H
	DB	0ecH
	DB	0a1H
	DB	079H
	DB	08dH
	DB	015H
	DB	08cH
	DB	07aH
	DB	0ecH
	DB	0dfH
	DB	082H
	DB	049H
	DB	0fH
	DB	024H
	DB	0bbH
	DB	09bH
	DB	038H
	DB	0e1H
	DB	08H
	DB	0bcH
	DB	0daH
	DB	012H
	DB	0c3H
	DB	0faH
	DB	0f9H
	DB	0a2H
	DB	011H
	DB	041H
	DB	0c3H
	DB	061H
	DB	03bH
	DB	058H
	DB	036H
	DB	07fH
	DB	092H
	DB	02aH
	DB	0aaH
	DB	026H
	DB	0cdH
	DB	022H
	DB	0f2H
	DB	03dH
	DB	070H
	DB	08dH
	DB	0aeH
	DB	069H
	DB	09aH
	DB	0d7H
	DB	0cbH
	DB	040H
	DB	0a8H
	DB	0adH
	DB	0bH
	DB	06eH
	DB	027H
	DB	084H
	DB	097H
	DB	03dH
	DB	0cbH
	DB	060H
	DB	056H
	DB	084H
	DB	0c0H
	DB	08bH
	DB	08dH
	DB	069H
	DB	098H
	DB	0c6H
	DB	09aH
	DB	0acH
	DB	04H
	DB	099H
	DB	021H
	DB	087H
	DB	01eH
	DB	0bbH
	DB	065H
	DB	030H
	DB	01aH
	DB	046H
	DB	019H
	DB	0caH
	DB	080H
	DB	0ecH
	DB	0b4H
	DB	085H
	DB	0a3H
	DB	01dH
	DB	074H
	DB	042H
	DB	023H
	DB	0ceH
	DB	08dH
	DB	0dcH
	DB	023H
	DB	094H
	DB	082H
	DB	08dH
	DB	06aH
	DB	080H
	DB	047H
	DB	0cH
	DB	09H
	DB	02fH
	DB	05bH
	DB	0a4H
	DB	013H
	DB	0c3H
	DB	037H
	DB	08fH
	DB	0a6H
	DB	05H
	DB	042H
	DB	055H
	DB	0c6H
	DB	0f9H
	DB	0dfH
	DB	044H
	DB	095H
	DB	086H
	DB	02bH
	DB	0bbH
	DB	032H
	DB	087H
	DB	068H
	DB	01fH
	DB	093H
	DB	01bH
	DB	068H
	DB	07cH
	DB	088H
	DB	08aH
	DB	0bfH
	DB	084H
	DB	04dH
	DB	0fcH
	DB	08fH
	DB	0c2H
	DB	083H
	DB	031H
	DB	0e5H
	DB	079H
	DB	092H
	DB	08cH
	DB	0d1H
	DB	02bH
	DB	0d2H
	DB	039H
	DB	0aH
	DB	0e1H
	DB	023H
	DB	0cfH
	DB	03H
	DB	081H
	DB	08dH
	DB	014H
	DB	0deH
	DB	0ddH
	DB	0e5H
	DB	0c0H
	DB	0c2H
	DB	04cH
	DB	08aH
	DB	0b0H
	DB	018H
	DB	0bfH
	DB	0caH
	DB	075H
	DB	0caH
	DB	09H
	DB	06fH
	DB	02dH
	DB	053H
	DB	01fH
	DB	03dH
	DB	016H
	DB	019H
	DB	0e7H
	DB	085H
	DB	0f1H
	DB	0adH
	DB	0a4H
	DB	037H
	DB	0caH
	DB	0b9H
	DB	02eH
	DB	098H
	DB	05H
	DB	058H
	DB	0b3H
	DB	0dcH
	DB	0e1H
	DB	047H
	DB	04aH
	DB	0fbH
	DB	075H
	DB	0bfH
	DB	0edH
	DB	0bfH
	DB	08fH
	DB	0f5H
	DB	04cH
	DB	0b2H
	DB	061H
	DB	08eH
	DB	02H
	DB	044H
	DB	0c9H
	DB	0acH
	DB	0dH
	DB	03cH
	DB	066H
	DB	0fbH
	DB	051H
	DB	059H
	DB	08cH
	DB	0d2H
	DB	0dbH
	DB	011H
	DB	0f9H
	DB	0beH
	DB	039H
	DB	079H
	DB	01aH
	DB	0beH
	DB	044H
	DB	07cH
	DB	063H
	DB	09H
	DB	04fH
	DB	07cH
	DB	045H
	DB	03bH
	DB	07fH
	DB	0f8H
	DB	07cH
	DB	0b5H
	DB	0bbH
	DB	036H
	DB	0b7H
	DB	0c7H
	DB	09eH
	DB	0fbH
	DB	08H
	DB	072H
	DB	0d1H
	DB	070H
	DB	058H
	DB	0b8H
	DB	03bH
	DB	015H
	DB	0abH
	DB	08H
	DB	066H
	DB	0adH
	DB	08aH
	DB	058H
	DB	065H
	DB	06cH
	DB	05aH
	DB	07eH
	DB	020H
	DB	0dbH
	DB	0dfH
	DB	030H
	DB	08bH
	DB	024H
	DB	061H
	DB	0d9H
	DB	07cH
	DB	0eH
	DB	0c0H
	DB	02H
	DB	04aH
	DB	027H
	DB	015H
	DB	05H
	DB	052H
	DB	049H
	DB	0cfH
	DB	03bH
	DB	047H
	DB	08dH
	DB	0ddH
	DB	047H
	DB	040H
	DB	0deH
	DB	065H
	DB	04fH
	DB	075H
	DB	0caH
	DB	068H
	DB	06eH
	DB	0dH
	DB	073H
	DB	045H
	DB	0c6H
	DB	09eH
	DB	0d5H
	DB	0cH
	DB	0dcH
	DB	02aH
	DB	08bH
	DB	033H
	DB	02bH
	DB	01fH
	DB	088H
	DB	024H
	DB	010H
	DB	08aH
	DB	0c9H
	DB	037H
	DB	0ebH
	DB	05H
	DB	05H
	DB	085H
	DB	060H
	DB	08eH
	DB	0e7H
	DB	034H
	DB	09H
	DB	07fH
	DB	0c0H
	DB	090H
	DB	054H
	DB	0fbH
	DB	0ffH
	DB	089H
	DB	0eeH
	DB	0aeH
	DB	0eaH
	DB	079H
	DB	01fH
	DB	04aH
	DB	07aH
	DB	0b1H
	DB	0f9H
	DB	086H
	DB	082H
	DB	094H
	DB	0a4H
	DB	0f9H
	DB	0e2H
	DB	07bH
	DB	042H
	DB	0afH
	DB	081H
	DB	00H
	DB	0cbH
	DB	09dH
	DB	059H
	DB	0ceH
	DB	0f9H
	DB	064H
	DB	058H
	DB	03H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0e3H
	DB	087H
	DB	0aaH
	DB	0a5H
	DB	08bH
	DB	0a4H
	DB	083H
	DB	0afH
	DB	0a7H
	DB	0e8H
	DB	0ebH
	DB	046H
	DB	097H
	DB	078H
	DB	031H
	DB	07eH
	DB	0cfH
	DB	04cH
	DB	0f5H
	DB	073H
	DB	0aaH
	DB	09dH
	DB	04eH
	DB	0acH
	DB	023H
	DB	0f2H
	DB	0cdH
	DB	0f9H
	DB	014H
	DB	0e4H
	DB	0e2H
	DB	00H
	DB	0a8H
	DB	0b4H
	DB	090H
	DB	0e4H
	DB	02eH
	DB	0e6H
	DB	046H
	DB	080H
	DB	02dH
	DB	0c6H
	DB	0eeH
	DB	02bH
	DB	047H
	DB	01bH
	DB	027H
	DB	081H
	DB	095H
	DB	0d6H
	DB	09H
	DB	018H
	DB	0ecH
	DB	0ecH
	DB	0b4H
	DB	04bH
	DB	0f7H
	DB	099H
	DB	066H
	DB	0f8H
	DB	03fH
	DB	0abH
	DB	0a0H
	DB	049H
	DB	092H
	DB	098H
	DB	0ebH
	DB	0c6H
	DB	099H
	DB	0c0H
	DB	0c8H
	DB	063H
	DB	047H
	DB	015H
	DB	0a3H
	DB	020H
	DB	0bbH
	DB	04fH
	DB	07H
	DB	05dH
	DB	062H
	DB	02eH
	DB	074H
	DB	0c8H
	DB	0c9H
	DB	032H
	DB	00H
	DB	04fH
	DB	025H
	DB	0b4H
	DB	01eH
	DB	036H
	DB	010H
	DB	025H
	DB	0b5H
	DB	0a8H
	DB	078H
	DB	015H
	DB	039H
	DB	01fH
	DB	061H
	DB	08H
	DB	0fcH
	DB	04aH
	DB	0faH
	DB	06aH
	DB	05H
	DB	0d9H
	DB	030H
	DB	03cH
	DB	06bH
	DB	0a6H
	DB	08aH
	DB	012H
	DB	08aH
	DB	055H
	DB	070H
	DB	05dH
	DB	041H
	DB	059H
	DB	085H
	DB	083H
	DB	02fH
	DB	0deH
	DB	0aaH
	DB	0e6H
	DB	0c8H
	DB	0e1H
	DB	091H
	DB	010H
	DB	0e8H
	DB	04dH
	DB	01bH
	DB	01fH
	DB	019H
	DB	09aH
	DB	026H
	DB	092H
	DB	011H
	DB	09eH
	DB	0dcH
	DB	096H
	DB	013H
	DB	026H
	DB	058H
	DB	0f0H
	DB	09dH
	DB	0a7H
	DB	0c6H
	DB	023H
	DB	0efH
	DB	0ceH
	DB	0c7H
	DB	012H
	DB	053H
	DB	07aH
	DB	03dH
	DB	094H
	DB	0c0H
	DB	0bfH
	DB	05dH
	DB	07eH
	DB	035H
	DB	02eH
	DB	0c9H
	DB	04aH
	DB	0e5H
	DB	079H
	DB	07fH
	DB	0dbH
	DB	037H
	DB	07dH
	DB	0c1H
	DB	055H
	DB	011H
	DB	050H
	DB	072H
	DB	01aH
	DB	0dfH
	DB	015H
	DB	0bdH
	DB	026H
	DB	0a8H
	DB	0efH
	DB	0c2H
	DB	0fcH
	DB	0aaH
	DB	0d5H
	DB	068H
	DB	081H
	DB	0faH
	DB	09eH
	DB	062H
	DB	046H
	DB	02cH
	DB	028H
	DB	0f3H
	DB	0aH
	DB	0e1H
	DB	0ceH
	DB	0acH
	DB	0a9H
	DB	03cH
	DB	034H
	DB	05cH
	DB	0f2H
	DB	043H
	DB	0b7H
	DB	03fH
	DB	054H
	DB	02eH
	DB	020H
	DB	074H
	DB	0a7H
	DB	05H
	DB	0bdH
	DB	026H
	DB	043H
	DB	0bbH
	DB	09fH
	DB	07cH
	DB	0c7H
	DB	09bH
	DB	0b6H
	DB	0e7H
	DB	09H
	DB	01eH
	DB	0a6H
	DB	0e2H
	DB	032H
	DB	0dfH
	DB	0fH
	DB	09aH
	DB	0d0H
	DB	0d6H
	DB	0cfH
	DB	050H
	DB	023H
	DB	027H
	DB	087H
	DB	06dH
	DB	082H
	DB	020H
	DB	07aH
	DB	0bfH
	DB	021H
	DB	015H
	DB	0cdH
	DB	0acH
	DB	0f6H
	DB	0d5H
	DB	0a4H
	DB	08fH
	DB	06cH
	DB	018H
	DB	079H
	DB	0a6H
	DB	05bH
	DB	011H
	DB	05fH
	DB	0fH
	DB	08bH
	DB	03cH
	DB	0b3H
	DB	0c5H
	DB	09dH
	DB	015H
	DB	0ddH
	DB	08cH
	DB	076H
	DB	09bH
	DB	0c0H
	DB	014H
	DB	079H
	DB	05aH
	DB	018H
	DB	037H
	DB	0f3H
	DB	090H
	DB	01bH
	DB	058H
	DB	045H
	DB	0ebH
	DB	049H
	DB	01aH
	DB	0dfH
	DB	0efH
	DB	0e0H
	DB	097H
	DB	0b1H
	DB	0faH
	DB	030H
	DB	0a1H
	DB	02fH
	DB	0c1H
	DB	0f6H
	DB	05bH
	DB	0a2H
	DB	029H
	DB	05H
	DB	03H
	DB	015H
	DB	039H
	DB	097H
	DB	01aH
	DB	010H
	DB	0f2H
	DB	0f3H
	DB	06cH
	DB	032H
	DB	01bH
	DB	0b5H
	DB	013H
	DB	031H
	DB	0cdH
	DB	0efH
	DB	0b3H
	DB	09eH
	DB	039H
	DB	064H
	DB	0c7H
	DB	0efH
	DB	07H
	DB	099H
	DB	094H
	DB	0f5H
	DB	0b6H
	DB	09bH
	DB	02eH
	DB	0ddH
	DB	083H
	DB	0a7H
	DB	01eH
	DB	0f5H
	DB	049H
	DB	097H
	DB	01eH
	DB	0e9H
	DB	03fH
	DB	044H
	DB	0eaH
	DB	0c3H
	DB	093H
	DB	08fH
	DB	0cdH
	DB	0d6H
	DB	01dH
	DB	01H
	DB	0faH
	DB	071H
	DB	079H
	DB	09dH
	DB	0a3H
	DB	0a8H
	DB	09H
	DB	01cH
	DB	04cH
	DB	048H
	DB	0aaH
	DB	09eH
	DB	0d2H
	DB	063H
	DB	0ffH
	DB	07H
	DB	049H
	DB	0dfH
	DB	095H
	DB	0d4H
	DB	04fH
	DB	0efH
	DB	06aH
	DB	0bH
	DB	0b5H
	DB	078H
	DB	0ecH
	DB	069H
	DB	045H
	DB	06aH
	DB	0a5H
	DB	040H
	DB	08aH
	DB	0e3H
	DB	02cH
	DB	07aH
	DB	0f0H
	DB	08aH
	DB	0d7H
	DB	0baH
	DB	089H
	DB	021H
	DB	028H
	DB	07eH
	DB	03bH
	DB	0beH
	DB	0e3H
	DB	01bH
	DB	076H
	DB	07bH
	DB	0e0H
	DB	06aH
	DB	0eH
	DB	070H
	DB	05cH
	DB	086H
	DB	04aH
	DB	076H
	DB	091H
	DB	037H
	DB	0dfH
	DB	028H
	DB	029H
	DB	022H
	DB	083H
	DB	0eaH
	DB	081H
	DB	0a2H
	DB	048H
	DB	02H
	DB	041H
	DB	0b4H
	DB	04dH
	DB	099H
	DB	021H
	DB	0cdH
	DB	0beH
	DB	0c1H
	DB	0bcH
	DB	028H
	DB	0dcH
	DB	01fH
	DB	0daH
	DB	011H
	DB	04bH
	DB	0d8H
	DB	0e5H
	DB	021H
	DB	07aH
	DB	0c9H
	DB	0d8H
	DB	0ebH
	DB	0afH
	DB	0a7H
	DB	020H
	DB	0e9H
	DB	0daH
	DB	04fH
	DB	09aH
	DB	0ceH
	DB	023H
	DB	01cH
	DB	0c9H
	DB	049H
	DB	0e5H
	DB	0b9H
	DB	06fH
	DB	0e7H
	DB	06fH
	DB	0fcH
	DB	021H
	DB	06H
	DB	03fH
	DB	0ddH
	DB	0c8H
	DB	03aH
	DB	06bH
	DB	086H
	DB	079H
	DB	0c0H
	DB	0dH
	DB	035H
	DB	0e0H
	DB	095H
	DB	076H
	DB	0a8H
	DB	075H
	DB	030H
	DB	05bH
	DB	0edH
	DB	05fH
	DB	036H
	DB	0edH
	DB	024H
	DB	02cH
	DB	089H
	DB	00H
	DB	0ddH
	DB	01fH
	DB	0a9H
	DB	065H
	DB	0bcH
	DB	095H
	DB	0dH
	DB	0fcH
	DB	0e0H
	DB	09bH
	DB	013H
	DB	022H
	DB	063H
	DB	0a1H
	DB	0eeH
	DB	0f5H
	DB	02dH
	DB	0d6H
	DB	088H
	DB	08cH
	DB	030H
	DB	09fH
	DB	05aH
	DB	07dH
	DB	071H
	DB	028H
	DB	026H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	0bfH
	DB	053H
	DB	0d2H
	DB	0daH
	DB	0deH
	DB	078H
	DB	0e8H
	DB	022H
	DB	0a4H
	DB	0d9H
	DB	049H
	DB	0a9H
	DB	0bcH
	DB	067H
	DB	066H
	DB	0b0H
	DB	01bH
	DB	06H
	DB	0a8H
	DB	0efH
	DB	070H
	DB	0d2H
	DB	067H
	DB	048H
	DB	0c6H
	DB	0a7H
	DB	0fcH
	DB	036H
	DB	0d8H
	DB	0aH
	DB	0e4H
	DB	0c5H
	DB	052H
	DB	0fH
	DB	07cH
	DB	04aH
	DB	0b0H
	DB	0acH
	DB	085H
	DB	044H
	DB	042H
	DB	04fH
	DB	0a4H
	DB	05H
	DB	016H
	DB	02fH
	DB	0efH
	DB	05aH
	DB	06bH
	DB	07fH
	DB	022H
	DB	094H
	DB	098H
	DB	06H
	DB	036H
	DB	018H
	DB	0d3H
	DB	09fH
	DB	00H
	DB	03H
	DB	0cbH
	DB	05fH
	DB	0b8H
	DB	0d1H
	DB	0c8H
	DB	06bH
	DB	064H
	DB	034H
	DB	097H
	DB	0daH
	DB	01fH
	DB	0f9H
	DB	045H
	DB	0c8H
	DB	0d3H
	DB	0beH
	DB	0deH
	DB	0caH
	DB	04fH
	DB	047H
	DB	097H
	DB	02H
	DB	0a7H
	DB	0a7H
	DB	035H
	DB	0f0H
	DB	043H
	DB	0ddH
	DB	0b1H
	DB	0d6H
	DB	0aaH
	DB	0adH
	DB	0e3H
	DB	0c4H
	DB	0a0H
	DB	0acH
	DB	07cH
	DB	0a7H
	DB	0f3H
	DB	0faH
	DB	052H
	DB	079H
	DB	0beH
	DB	0f5H
	DB	06fH
	DB	082H
	DB	0cdH
	DB	07aH
	DB	02fH
	DB	038H
	DB	067H
	DB	02eH
	DB	082H
	DB	048H
	DB	014H
	DB	0e1H
	DB	07H
	DB	00H
	DB	030H
	DB	0aH
	DB	05H
	DB	05eH
	DB	016H
	DB	030H
	DB	0b8H
	DB	0f1H
	DB	0cbH
	DB	0eH
	DB	091H
	DB	09fH
	DB	05eH
	DB	094H
	DB	020H
	DB	010H
	DB	0a4H
	DB	016H
	DB	0e2H
	DB	0bfH
	DB	048H
	DB	0cbH
	DB	046H
	DB	099H
	DB	03dH
	DB	03cH
	DB	0b6H
	DB	0a5H
	DB	01cH
	DB	019H
	DB	0baH
	DB	0cfH
	DB	086H
	DB	047H
	DB	085H
	DB	0a0H
	DB	0bH
	DB	0c2H
	DB	0ecH
	DB	0ffH
	DB	015H
	DB	0d3H
	DB	050H
	DB	087H
	DB	05bH
	DB	024H
	DB	06eH
	DB	0d5H
	DB	03eH
	DB	068H
	DB	0beH
	DB	06fH
	DB	055H
	DB	0bdH
	DB	07eH
	DB	05H
	DB	0cfH
	DB	0c2H
	DB	0b2H
	DB	0edH
	DB	064H
	DB	032H
	DB	019H
	DB	08aH
	DB	064H
	DB	044H
	DB	0b6H
	DB	0d8H
	DB	0c2H
	DB	047H
	DB	0faH
	DB	0b9H
	DB	041H
	DB	0f5H
	DB	069H
	DB	076H
	DB	08bH
	DB	05cH
	DB	042H
	DB	093H
	DB	066H
	DB	0f1H
	DB	0d3H
	DB	0f0H
	DB	0fH
	DB	03H
	DB	045H
	DB	0b9H
	DB	061H
	DB	023H
	DB	0d5H
	DB	062H
	DB	04H
	DB	0c0H
	DB	01cH
	DB	063H
	DB	0b2H
	DB	02cH
	DB	0e7H
	DB	08bH
	DB	0afH
	DB	011H
	DB	06eH
	DB	052H
	DB	05eH
	DB	0d9H
	DB	0fH
	DB	0deH
	DB	0a3H
	DB	09fH
	DB	0a4H
	DB	069H
	DB	049H
	DB	04dH
	DB	038H
	DB	066H
	DB	0c3H
	DB	01eH
	DB	05H
	DB	0f2H
	DB	095H
	DB	0ffH
	DB	021H
	DB	0feH
	DB	0a8H
	DB	0d4H
	DB	0e6H
	DB	0e1H
	DB	03dH
	DB	067H
	DB	0e4H
	DB	07cH
	DB	0e7H
	DB	022H
	DB	0e9H
	DB	069H
	DB	08aH
	DB	01cH
	DB	010H
	DB	048H
	DB	0d6H
	DB	08eH
	DB	0bcH
	DB	0deH
	DB	076H
	DB	0b8H
	DB	06fH
	DB	0cfH
	DB	097H
	DB	06eH
	DB	0abH
	DB	08aH
	DB	0a9H
	DB	079H
	DB	02H
	DB	068H
	DB	0b7H
	DB	06H
	DB	08eH
	DB	01H
	DB	07aH
	DB	08bH
	DB	09bH
	DB	074H
	DB	094H
	DB	09H
	DB	051H
	DB	04fH
	DB	010H
	DB	053H
	DB	02H
	DB	07fH
	DB	0d1H
	DB	06cH
	DB	037H
	DB	086H
	DB	0eaH
	DB	01bH
	DB	0acH
	DB	05fH
	DB	015H
	DB	0cbH
	DB	079H
	DB	071H
	DB	01eH
	DB	0e2H
	DB	0abH
	DB	0e8H
	DB	02fH
	DB	05cH
	DB	0f8H
	DB	0b1H
	DB	03aH
	DB	0e7H
	DB	030H
	DB	030H
	DB	0efH
	DB	05bH
	DB	09eH
	DB	044H
	DB	057H
	DB	0e7H
	DB	05dH
	DB	013H
	DB	04H
	DB	0f9H
	DB	088H
	DB	0d6H
	DB	02dH
	DB	0d6H
	DB	0fcH
	DB	04bH
	DB	094H
	DB	0edH
	DB	038H
	DB	0baH
	DB	083H
	DB	01dH
	DB	0a4H
	DB	0b7H
	DB	063H
	DB	049H
	DB	071H
	DB	0b6H
	DB	0cdH
	DB	08eH
	DB	0c3H
	DB	025H
	DB	0d9H
	DB	0c6H
	DB	01cH
	DB	00H
	DB	0f1H
	DB	0dfH
	DB	073H
	DB	062H
	DB	07eH
	DB	0d3H
	DB	074H
	DB	05aH
	DB	05eH
	DB	084H
	DB	089H
	DB	0f3H
	DB	0a9H
	DB	05cH
	DB	069H
	DB	063H
	DB	09cH
	DB	032H
	DB	0cdH
	DB	06eH
	DB	01dH
	DB	053H
	DB	07aH
	DB	085H
	DB	0f7H
	DB	05cH
	DB	0c8H
	DB	044H
	DB	072H
	DB	06eH
	DB	08aH
	DB	072H
	DB	0fcH
	DB	00H
	DB	077H
	DB	0adH
	DB	022H
	DB	00H
	DB	0fH
	DB	01dH
	DB	050H
	DB	078H
	DB	0f6H
	DB	0b8H
	DB	066H
	DB	031H
	DB	08cH
	DB	066H
	DB	08fH
	DB	01aH
	DB	0d0H
	DB	03dH
	DB	05aH
	DB	05fH
	DB	0ceH
	DB	0d5H
	DB	021H
	DB	09fH
	DB	02eH
	DB	0abH
	DB	0bdH
	DB	0aH
	DB	0a5H
	DB	0c0H
	DB	0f4H
	DB	060H
	DB	0d1H
	DB	083H
	DB	0f0H
	DB	044H
	DB	04H
	DB	0a0H
	DB	0d6H
	DB	0f4H
	DB	069H
	DB	055H
	DB	08eH
	DB	081H
	DB	0faH
	DB	0b2H
	DB	04aH
	DB	016H
	DB	079H
	DB	05H
	DB	0abH
	DB	04cH
	DB	078H
	DB	078H
	DB	050H
	DB	02aH
	DB	0d3H
	DB	0e3H
	DB	08fH
	DB	0dbH
	DB	0e6H
	DB	02aH
	DB	041H
	DB	055H
	DB	06cH
	DB	0ecH
	DB	037H
	DB	032H
	DB	057H
	DB	059H
	DB	053H
	DB	03cH
	DB	0e8H
	DB	0f2H
	DB	05fH
	DB	036H
	DB	07cH
	DB	087H
	DB	0bbH
	DB	055H
	DB	078H
	DB	0d6H
	DB	067H
	DB	0aeH
	DB	093H
	DB	0f9H
	DB	0e2H
	DB	0fdH
	DB	099H
	DB	0bcH
	DB	0bcH
	DB	05fH
	DB	02fH
	DB	0bbH
	DB	0a8H
	DB	08cH
	DB	0f6H
	DB	051H
	DB	061H
	DB	039H
	DB	042H
	DB	0fH
	DB	0cfH
	DB	0f3H
	DB	0b7H
	DB	036H
	DB	01dH
	DB	086H
	DB	032H
	DB	02cH
	DB	04bH
	DB	0d8H
	DB	04cH
	DB	082H
	DB	0f3H
	DB	035H
	DB	0abH
	DB	0b1H
	DB	052H
	DB	0c4H
	DB	0a9H
	DB	034H
	DB	011H
	DB	037H
	DB	03aH
	DB	0aaH
	DB	082H
	DB	020H
	DB	027H
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DD	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	064H
	DB	049H
	DB	07eH
	DB	05aH
	DB	083H
	DB	01eH
	DB	04aH
	DB	093H
	DB	02cH
	DB	09H
	DB	0beH
	DB	03eH
	DB	053H
	DB	093H
	DB	037H
	DB	06dH
	DB	0aaH
	DB	059H
	DB	095H
	DB	048H
	DB	0b8H
	DB	016H
	DB	03H
	DB	01dH
	DB	022H
	DB	04bH
	DB	0bfH
	DB	050H
	DB	0a8H
	DB	018H
	DB	0edH
	DB	023H
	DB	050H
	DB	0eaH
	DB	0e7H
	DB	0e9H
	DB	060H
	DB	087H
	DB	0c8H
	DB	0a0H
	DB	0dbH
	DB	051H
	DB	0adH
	DB	029H
	DB	0bH
	DB	0d0H
	DB	0cH
	DB	01aH
	DB	0c1H
	DB	062H
	DB	08H
	DB	057H
	DB	063H
	DB	05bH
	DB	0f2H
	DB	046H
	DB	0c1H
	DB	076H
	DB	0abH
	DB	046H
	DB	03bH
	DB	0e3H
	DB	0bH
	DB	080H
	DB	08dH
	DB	0a5H
	DB	048H
	DB	08H
	DB	01aH
	DB	0c8H
	DB	047H
	DB	0b1H
	DB	058H
	DB	0e1H
	DB	026H
	DB	04bH
	DB	0e2H
	DB	05bH
	DB	0b0H
	DB	091H
	DB	0bH
	DB	0bcH
	DB	092H
	DB	064H
	DB	071H
	DB	08H
	DB	08H
	DB	094H
	DB	015H
	DB	0d4H
	DB	05fH
	DB	0abH
	DB	01bH
	DB	03dH
	DB	026H
	DB	04H
	DB	0e8H
	DB	0a8H
	DB	0efH
	DB	0f1H
	DB	0aeH
	DB	040H
	DB	020H
	DB	0cfH
	DB	0a3H
	DB	099H
	DB	036H
	DB	0b6H
	DB	068H
	DB	027H
	DB	0b2H
	DB	03fH
	DB	037H
	DB	01bH
	DB	092H
	DB	020H
	DB	0bH
	DB	0e9H
	DB	02H
	DB	051H
	DB	0e6H
	DB	0d7H
	DB	03cH
	DB	05fH
	DB	086H
	DB	0deH
	DB	05fH
	DB	0d4H
	DB	0a9H
	DB	050H
	DB	078H
	DB	019H
	DB	033H
	DB	0d7H
	DB	09aH
	DB	028H
	DB	027H
	DB	02bH
	DB	078H
	DB	02aH
	DB	02eH
	DB	0c3H
	DB	013H
	DB	0efH
	DB	0dfH
	DB	0ccH
	DB	06H
	DB	028H
	DB	0f4H
	DB	03dH
	DB	074H
	DB	04cH
	DB	02dH
	DB	0c2H
	DB	0ffH
	DB	03dH
	DB	0cbH
	DB	066H
	DB	099H
	DB	09bH
	DB	050H
	DB	0c7H
	DB	0caH
	DB	089H
	DB	05bH
	DB	0cH
	DB	064H
	DB	079H
	DB	01eH
	DB	0eaH
	DB	0a5H
	DB	0f2H
	DB	094H
	DB	099H
	DB	0fbH
	DB	01cH
	DB	02H
	DB	06fH
	DB	084H
	DB	0ceH
	DB	05bH
	DB	05cH
	DB	072H
	DB	0baH
	DB	010H
	DB	083H
	DB	0cdH
	DB	0dbH
	DB	05cH
	DB	0e4H
	DB	054H
	DB	034H
	DB	063H
	DB	016H
	DB	065H
	DB	0c3H
	DB	033H
	DB	0b6H
	DB	0bH
	DB	011H
	DB	059H
	DB	03fH
	DB	0b2H
	DB	053H
	DB	0c5H
	DB	017H
	DB	09aH
	DB	02cH
	DB	08dH
	DB	0b8H
	DB	013H
	DB	078H
	DB	02aH
	DB	00H
	DB	048H
	DB	056H
	DB	0a1H
	DB	065H
	DB	030H
	DB	011H
	DB	0e9H
	DB	03fH
	DB	0b6H
	DB	0d8H
	DB	076H
	DB	0c1H
	DB	083H
	DB	066H
	DB	0ddH
	DB	086H
	DB	083H
	DB	0f5H
	DB	034H
	DB	012H
	DB	0c0H
	DB	0c1H
	DB	080H
	DB	0f9H
	DB	0c8H
	DB	048H
	DB	059H
	DB	02dH
	DB	059H
	DB	03fH
	DB	086H
	DB	09H
	DB	0caH
	DB	073H
	DB	063H
	DB	017H
	DB	0d3H
	DB	056H
	DB	0e1H
	DB	03eH
	DB	02bH
	DB	0ffH
	DB	03aH
	DB	09fH
	DB	059H
	DB	0cdH
	DB	09aH
	DB	0ebH
	DB	019H
	DB	0cdH
	DB	048H
	DB	025H
	DB	093H
	DB	0d8H
	DB	0c4H
	DB	061H
	DB	028H
	DB	0bbH
	DB	032H
	DB	042H
	DB	03bH
	DB	037H
	DB	0a9H
	DB	0adH
	DB	0fbH
	DB	048H
	DB	02bH
	DB	099H
	DB	045H
	DB	03fH
	DB	0beH
	DB	025H
	DB	0a4H
	DB	01bH
	DB	0f6H
	DB	0feH
	DB	0b4H
	DB	0aaH
	DB	0bH
	DB	0efH
	DB	05eH
	DB	0d2H
	DB	04bH
	DB	0f7H
	DB	03cH
	DB	076H
	DB	029H
	DB	078H
	DB	02H
	DB	054H
	DB	082H
	DB	0c1H
	DB	031H
	DB	015H
	DB	0e4H
	DB	01H
	DB	05aH
	DB	0acH
	DB	099H
	DB	02eH
	DB	056H
	DB	013H
	DB	0a3H
	DB	0b5H
	DB	0c2H
	DB	0f6H
	DB	085H
	DB	0b8H
	DB	047H
	DB	095H
	DB	0cbH
	DB	06eH
	DB	09bH
	DB	026H
	DB	056H
	DB	0d8H
	DB	0c8H
	DB	081H
	DB	057H
	DB	0e5H
	DB	02cH
	DB	042H
	DB	0f9H
	DB	078H
	DB	0d8H
	DB	063H
	DB	04cH
	DB	043H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	092H
	DB	08fH
	DB	028H
	DB	022H
	DB	0e4H
	DB	065H
	DB	0aaH
	DB	065H
	DB	076H
	DB	0e9H
	DB	0bfH
	DB	041H
	DB	093H
	DB	084H
	DB	050H
	DB	06cH
	DB	0c3H
	DB	0ceH
	DB	03cH
	DB	054H
	DB	0acH
	DB	01aH
	DB	06fH
	DB	067H
	DB	0dcH
	DB	066H
	DB	0f3H
	DB	0b3H
	DB	01H
	DB	091H
	DB	0e6H
	DB	098H
	DB	038H
	DB	0bH
	DB	0c9H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	0bcH
	DB	0e1H
	DB	09dH
	DB	0c0H
	DB	0c6H
	DB	0dcH
	DB	0c2H
	DB	0ddH
	DB	00H
	DB	01eH
	DB	0c5H
	DB	035H
	DB	0baH
	DB	018H
	DB	0deH
	DB	0b2H
	DB	0dfH
	DB	01aH
	DB	010H
	DB	010H
	DB	023H
	DB	010H
	DB	083H
	DB	018H
	DB	0c7H
	DB	05dH
	DB	0c9H
	DB	086H
	DB	011H
	DB	0a0H
	DB	09dH
	DB	0c4H
	DB	08aH
	DB	0aH
	DB	0cdH
	DB	0ecH
	DB	067H
	DB	06fH
	DB	0abH
	DB	0dfH
	DB	022H
	DB	02fH
	DB	07H
	DB	0e0H
	DB	026H
	DB	0f0H
	DB	059H
	DB	0b6H
	DB	072H
	DB	0b5H
	DB	06eH
	DB	05cH
	DB	0bcH
	DB	08eH
	DB	01dH
	DB	021H
	DB	0bbH
	DB	0d8H
	DB	067H
	DB	0ddH
	DB	092H
	DB	072H
	DB	012H
	DB	05H
	DB	046H
	DB	081H
	DB	0d7H
	DB	0eH
	DB	0a7H
	DB	037H
	DB	013H
	DB	04cH
	DB	0dfH
	DB	0ceH
	DB	093H
	DB	0b6H
	DB	0f8H
	DB	02aH
	DB	0e2H
	DB	024H
	DB	023H
	DB	027H
	DB	04eH
	DB	058H
	DB	0a0H
	DB	082H
	DB	01cH
	DB	0c5H
	DB	050H
	DB	02eH
	DB	02dH
	DB	0aH
	DB	0b4H
	DB	058H
	DB	05eH
	DB	094H
	DB	0deH
	DB	069H
	DB	075H
	DB	0beH
	DB	05eH
	DB	0bH
	DB	04eH
	DB	0fcH
	DB	0e5H
	DB	01cH
	DB	0d3H
	DB	0e7H
	DB	0cH
	DB	025H
	DB	0a1H
	DB	0fbH
	DB	0bbH
	DB	0d6H
	DB	09H
	DB	0d2H
	DB	073H
	DB	0adH
	DB	05bH
	DB	0dH
	DB	059H
	DB	063H
	DB	01cH
	DB	053H
	DB	01fH
	DB	06aH
	DB	0aH
	DB	057H
	DB	0b9H
_hmac_whirlpool_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_whirlpool_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_whirlpool_test_vectors DD FLAT:??_C@_0EB@PHFBDMAI@?$AD?$JB?R?$IA?$AA?$LGb?$LL?$LI?f?$CD?$DO?hl?r?$LC?$IEtLs?$ILX?$AA?$LK?$CI?$BC?mRo?c?$BF?3@
_hmac_gosthash_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_gosthash_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_gosthash_test_vectors DD FLAT:??_C@_0CB@IGIOKONH@R5?$LH?$BHV?$LIu?$CB?J?iR?$JL?$CB?$JH?$DOmNT?$BC?$PMap?$EA?zFL?w$?$JN?$CI?$NO?$BN@
_hmac_stribog_test_key DD FLAT:??_C@_0EB@DIMDKBBC@?$AA?$BB?$CC3DUfw?$II?$JJ?$KK?$LL?L?$NN?n?$PP?$AB?$CDEg?$IJ?$KL?M?o?$AA?$BB?$CC3DUfw@
_hmac_stribog_test_data DD FLAT:??_C@_0DJ@NGDOEGCI@abcdbcdecdefdefgefghfghighijhijk@
_hmac_stribog_test_vectors DD FLAT:??_C@_0EB@NCCFEKHJ@t?$IKd?$JE?$LI4?$LNr?$JF?$KC?$DL?$BB?$IG?$BNF?g?$II?$APe?$JI?ST?a?$LCJ5?B?$KC?$IFA?$AI?$IF@
?key1@?1??TestSectorBufEncryption@@9@9 DB 027H		; `TestSectorBufEncryption'::`2'::key1
	DB	018H
	DB	028H
	DB	018H
	DB	028H
	DB	045H
	DB	090H
	DB	045H
	DB	023H
	DB	053H
	DB	060H
	DB	028H
	DB	074H
	DB	071H
	DB	035H
	DB	026H
	DB	062H
	DB	049H
	DB	077H
	DB	057H
	DB	024H
	DB	070H
	DB	093H
	DB	069H
	DB	099H
	DB	059H
	DB	057H
	DB	049H
	DB	066H
	DB	096H
	DB	076H
	DB	027H
	DB	031H
	DB	041H
	DB	059H
	DB	026H
	DB	053H
	DB	058H
	DB	097H
	DB	093H
	DB	023H
	DB	084H
	DB	062H
	DB	064H
	DB	033H
	DB	083H
	DB	027H
	DB	095H
	DB	02H
	DB	088H
	DB	041H
	DB	097H
	DB	016H
	DB	093H
	DB	099H
	DB	037H
	DB	051H
	DB	05H
	DB	082H
	DB	09H
	DB	074H
	DB	094H
	DB	045H
	DB	092H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
_DATA	ENDS
PUBLIC	_CipherInit2
PUBLIC	_test_hmac_whirlpool
PUBLIC	_test_hmac_gosthash
PUBLIC	_test_pkcs5
PUBLIC	_TestSectorBufEncryption
PUBLIC	_TestLegacySectorBufEncryption
PUBLIC	_AutoTestAlgorithms
PUBLIC	_TestCRCs
PUBLIC	_test_hmac_stribog
PUBLIC	??_C@_0O@POKHNLDL@GOST?528147?989?$AA@		; `string'
PUBLIC	??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@	; `string'
PUBLIC	??_C@_04NDGDACAK@?$BC4Vx?$AA@			; `string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@			; `string'
PUBLIC	??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@ ; `string'
EXTRN	_GetCrc32:PROC
EXTRN	_crc32_selftests:PROC
EXTRN	_crypto_open:PROC
EXTRN	_crypto_close:PROC
EXTRN	_CipherGetBlockSize:PROC
EXTRN	_CipherInit:PROC
EXTRN	_EAInit:PROC
EXTRN	_EAInitMode:PROC
EXTRN	_EAGetFirst:PROC
EXTRN	_EAGetNext:PROC
EXTRN	_EAGetName:PROC
EXTRN	_EAGetFirstMode:PROC
EXTRN	_EAGetNextMode:PROC
EXTRN	_EAGetFirstCipher:PROC
EXTRN	_EAIsModeSupported:PROC
EXTRN	_EncryptDataUnits:PROC
EXTRN	_DecryptDataUnits:PROC
EXTRN	_EncryptBuffer:PROC
EXTRN	_DecryptBuffer:PROC
EXTRN	_EnableHwEncryption:PROC
EXTRN	_IsHwEncryptionEnabled:PROC
EXTRN	_hmac_whirlpool:PROC
EXTRN	_derive_key_whirlpool:PROC
EXTRN	_hmac_gosthash:PROC
EXTRN	_derive_key_gosthash:PROC
EXTRN	_hmac_stribog:PROC
EXTRN	_derive_key_stribog:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@
CONST	SEGMENT
??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@ DB 'P'
	DB	'|6o', 0eeH, 010H, '.', 09aH, 0e2H, 08aH, 0d5H, 082H, 'r}''', 0fH
	DB	0e8H, 'M', 07fH, 'hz', 0cfH, 0b5H, 0e7H, 'Cg', 0aaH, 098H, 093H
	DB	'R+', 09H, 'nB', 0dfH, ',YJ', 091H, 'm~', 010H, 0aeH, 0b2H, 01aH
	DB	089H, 08fH, 0b9H, 08fH, 0e6H, '1', 0a9H, 0d8H, 09fH, 098H, '&', 0f4H
	DB	0daH, 0cdH, '}ee', 0deH, 010H, 095H, 091H, 0b4H, 084H, '&', 0aeH
	DB	'C', 0a1H, 00H, '[', 01eH, 0b8H, '8', 097H, 0a4H, 01eH, 'K', 0d2H
	DB	'ed', 0bcH, 0faH, 01fH, '5', 085H, 0dbH, 'O', 097H, 'eo', 0bdH
	DB	'$', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@
CONST	SEGMENT
??_C@_08NLHBPEGP@password?$AA@ DB 'password', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDGDACAK@?$BC4Vx?$AA@
CONST	SEGMENT
??_C@_04NDGDACAK@?$BC4Vx?$AA@ DB 012H, '4Vx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@
CONST	SEGMENT
??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@ DB 'Gost Grasshopper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@
CONST	SEGMENT
??_C@_0O@POKHNLDL@GOST?528147?989?$AA@ DB 'GOST 28147-89', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _test_hmac_stribog
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_stribog PROC					; COMDAT

; 762  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 763  : 	unsigned char digest[STRIBOG_DIGESTSIZE];
; 764  : 	hmac_stribog(hmac_stribog_test_key, 64, hmac_stribog_test_data, (int) strlen (hmac_stribog_test_data), digest);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_stribog_test_data
  00016	8b c2		 mov	 eax, edx
  00018	56		 push	 esi
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001c	0f 1f 40 00	 npad	 4
$LL4@test_hmac_:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL4@test_hmac_
  00027	8d 4d bc	 lea	 ecx, DWORD PTR _digest$[ebp]
  0002a	2b c6		 sub	 eax, esi
  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	52		 push	 edx
  0002f	6a 40		 push	 64			; 00000040H
  00031	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_stribog_test_key
  00037	e8 00 00 00 00	 call	 _hmac_stribog

; 765  : 	if (memcmp (digest, hmac_stribog_test_vectors, STRIBOG_DIGESTSIZE) != 0)

  0003c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_stribog_test_vectors
  00042	8d 4d bc	 lea	 ecx, DWORD PTR _digest$[ebp]
  00045	83 c4 14	 add	 esp, 20			; 00000014H
  00048	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  0004d	0f 1f 00	 npad	 3
$LL7@test_hmac_:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]
  00052	3b 02		 cmp	 eax, DWORD PTR [edx]
  00054	75 1f		 jne	 SHORT $LN6@test_hmac_
  00056	83 c1 04	 add	 ecx, 4
  00059	83 c2 04	 add	 edx, 4
  0005c	83 ee 04	 sub	 esi, 4
  0005f	73 ef		 jae	 SHORT $LL7@test_hmac_
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	5e		 pop	 esi

; 766  : 		return FALSE;
; 767  : 
; 768  : 	return TRUE;
; 769  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN6@test_hmac_:
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 c0		 xor	 eax, eax
  0007a	33 cd		 xor	 ecx, ebp
  0007c	5e		 pop	 esi
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_test_hmac_stribog ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _DoAutoTestAlgorithms
_TEXT	SEGMENT
_DoAutoTestAlgorithms PROC				; COMDAT

; 655  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 656  : 	PCRYPTO_INFO ci;
; 657  : 	BOOL bFailed = FALSE;

  00002	33 f6		 xor	 esi, esi

; 658  : 
; 659  : 	ci = crypto_open ();

  00004	e8 00 00 00 00	 call	 _crypto_open
  00009	8b f8		 mov	 edi, eax

; 660  : 	if (!ci)

  0000b	85 ff		 test	 edi, edi
  0000d	75 03		 jne	 SHORT $LN2@DoAutoTest
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi

; 687  : }

  00011	c3		 ret	 0
$LN2@DoAutoTest:
  00012	53		 push	 ebx

; 661  : 		return FALSE;
; 662  : 
; 663  : 	memset (ci, 0, sizeof (*ci));

  00013	68 10 1f 00 00	 push	 7952			; 00001f10H
  00018	6a 00		 push	 0
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 _memset

; 664  : 
; 665  : 	/* GOST Cipher test here */
; 666  : 	
; 667  : 	/* PKCS #5 and HMACs */
; 668  : 	if (!test_pkcs5 ())

  00020	e8 00 00 00 00	 call	 _test_pkcs5
  00025	85 c0		 test	 eax, eax
  00027	bb 01 00 00 00	 mov	 ebx, 1
  0002c	0f 44 f3	 cmove	 esi, ebx

; 669  : 		bFailed = TRUE;
; 670  : 
; 671  : 	/* CRC-32 */
; 672  : 	if (!crc32_selftests ())

  0002f	e8 00 00 00 00	 call	 _crc32_selftests
  00034	85 c0		 test	 eax, eax

; 673  : 		bFailed = TRUE;
; 674  : 
; 675  : 	/* GF multiplicator */
; 676  : #if 0
; 677  : 	if (!GfMulSelfTest ())
; 678  : 		bFailed = TRUE;
; 679  : #endif
; 680  : 
; 681  : 	/* Sector and buffer related algorithms */
; 682  : 	if (!TestSectorBufEncryption (ci))

  00036	57		 push	 edi
  00037	0f 44 f3	 cmove	 esi, ebx
  0003a	e8 00 00 00 00	 call	 _TestSectorBufEncryption
  0003f	85 c0		 test	 eax, eax

; 683  : 		bFailed = TRUE;
; 684  : 	
; 685  : 	crypto_close (ci);

  00041	57		 push	 edi
  00042	0f 44 f3	 cmove	 esi, ebx
  00045	e8 00 00 00 00	 call	 _crypto_close
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 686  : 	return !bFailed;

  0004d	33 f3		 xor	 esi, ebx
  0004f	8b c6		 mov	 eax, esi
  00051	5b		 pop	 ebx
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 687  : }

  00054	c3		 ret	 0
_DoAutoTestAlgorithms ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _TestCRCs
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_buf$ = 8						; size = 4
_TestCRCs PROC						; COMDAT

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 357  : 	unsigned char digest[STRIBOG_DIGESTSIZE];
; 358  : 	hmac_stribog(hmac_stribog_test_key, 64, hmac_stribog_test_data, (int) strlen (hmac_stribog_test_data), digest);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_stribog_test_data
  00016	8b c2		 mov	 eax, edx
  00018	56		 push	 esi
  00019	8b 75 08	 mov	 esi, DWORD PTR _buf$[ebp]
  0001c	57		 push	 edi
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL3@TestCRCs:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL3@TestCRCs
  00027	8d 4d bc	 lea	 ecx, DWORD PTR _digest$[ebp]
  0002a	2b c7		 sub	 eax, edi
  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	52		 push	 edx
  0002f	6a 40		 push	 64			; 00000040H
  00031	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_stribog_test_key
  00037	e8 00 00 00 00	 call	 _hmac_stribog

; 359  : 	memcpy(buf, digest, STRIBOG_DIGESTSIZE);

  0003c	0f 10 45 bc	 movups	 xmm0, XMMWORD PTR _digest$[ebp]

; 360  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	83 c4 14	 add	 esp, 20			; 00000014H
  00046	33 cd		 xor	 ecx, ebp
  00048	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004b	0f 10 45 cc	 movups	 xmm0, XMMWORD PTR _digest$[ebp+16]
  0004f	5f		 pop	 edi
  00050	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00054	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR _digest$[ebp+32]
  00058	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  0005c	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR _digest$[ebp+48]
  00060	0f 11 46 30	 movups	 XMMWORD PTR [esi+48], xmm0
  00064	5e		 pop	 esi
  00065	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_TestCRCs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _AutoTestAlgorithms
_TEXT	SEGMENT
_hwEncryptionEnabled$1$ = -4				; size = 4
_AutoTestAlgorithms PROC				; COMDAT

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 699  : 	BOOL result = TRUE;
; 700  : 	BOOL hwEncryptionEnabled = IsHwEncryptionEnabled();

  00007	e8 00 00 00 00	 call	 _IsHwEncryptionEnabled

; 701  : 
; 702  : 	EnableHwEncryption (FALSE);

  0000c	6a 00		 push	 0
  0000e	89 45 fc	 mov	 DWORD PTR _hwEncryptionEnabled$1$[ebp], eax
  00011	e8 00 00 00 00	 call	 _EnableHwEncryption
  00016	83 c4 04	 add	 esp, 4

; 703  : 
; 704  : 	if (!DoAutoTestAlgorithms())

  00019	33 ff		 xor	 edi, edi
  0001b	e8 00 00 00 00	 call	 _crypto_open
  00020	8b f0		 mov	 esi, eax
  00022	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00025	85 f6		 test	 esi, esi
  00027	74 37		 je	 SHORT $LN5@AutoTestAl
$LN6@AutoTestAl:
  00029	68 10 1f 00 00	 push	 7952			; 00001f10H
  0002e	6a 00		 push	 0
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _memset
  00036	e8 00 00 00 00	 call	 _test_pkcs5
  0003b	85 c0		 test	 eax, eax
  0003d	0f 44 fb	 cmove	 edi, ebx
  00040	e8 00 00 00 00	 call	 _crc32_selftests
  00045	85 c0		 test	 eax, eax
  00047	56		 push	 esi
  00048	0f 44 fb	 cmove	 edi, ebx
  0004b	e8 00 00 00 00	 call	 _TestSectorBufEncryption
  00050	85 c0		 test	 eax, eax
  00052	56		 push	 esi
  00053	0f 44 fb	 cmove	 edi, ebx
  00056	e8 00 00 00 00	 call	 _crypto_close
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
  0005e	33 fb		 xor	 edi, ebx
$LN5@AutoTestAl:

; 705  : 		result = FALSE;
; 706  : 
; 707  : 	EnableHwEncryption (TRUE);

  00060	6a 01		 push	 1
  00062	e8 00 00 00 00	 call	 _EnableHwEncryption
  00067	83 c4 04	 add	 esp, 4

; 708  : 
; 709  : 	if (!DoAutoTestAlgorithms())

  0006a	33 f6		 xor	 esi, esi
  0006c	e8 00 00 00 00	 call	 _crypto_open
  00071	8b d8		 mov	 ebx, eax
  00073	85 db		 test	 ebx, ebx
  00075	74 47		 je	 SHORT $LN11@AutoTestAl
$LN12@AutoTestAl:
  00077	68 10 1f 00 00	 push	 7952			; 00001f10H
  0007c	6a 00		 push	 0
  0007e	53		 push	 ebx
  0007f	e8 00 00 00 00	 call	 _memset
  00084	e8 00 00 00 00	 call	 _test_pkcs5
  00089	85 c0		 test	 eax, eax
  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	0f 44 f0	 cmove	 esi, eax
  00093	e8 00 00 00 00	 call	 _crc32_selftests
  00098	85 c0		 test	 eax, eax
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	53		 push	 ebx
  000a0	0f 44 f0	 cmove	 esi, eax
  000a3	e8 00 00 00 00	 call	 _TestSectorBufEncryption
  000a8	85 c0		 test	 eax, eax
  000aa	b8 01 00 00 00	 mov	 eax, 1
  000af	53		 push	 ebx
  000b0	0f 44 f0	 cmove	 esi, eax
  000b3	e8 00 00 00 00	 call	 _crypto_close
  000b8	83 c4 14	 add	 esp, 20			; 00000014H
  000bb	83 f6 01	 xor	 esi, 1
$LN11@AutoTestAl:

; 710  : 		result = FALSE;
; 711  : 
; 712  : 	EnableHwEncryption (hwEncryptionEnabled);

  000be	ff 75 fc	 push	 DWORD PTR _hwEncryptionEnabled$1$[ebp]
  000c1	23 f7		 and	 esi, edi
  000c3	e8 00 00 00 00	 call	 _EnableHwEncryption
  000c8	83 c4 04	 add	 esp, 4

; 713  : 	return result;

  000cb	8b c6		 mov	 eax, esi
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx

; 714  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_AutoTestAlgorithms ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _TestLegacySectorBufEncryption
_TEXT	SEGMENT
_unitNo$ = -1100					; size = 8
_buf$ = -1092						; size = 1024
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestLegacySectorBufEncryption PROC			; COMDAT

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 04 00
	00		 sub	 esp, 1100		; 0000044cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _ci$[ebp]
  00018	57		 push	 edi

; 579  : 	unsigned char buf [ENCRYPTION_DATA_UNIT_SIZE * 2];
; 580  : 	unsigned int i;
; 581  : 	char name[64];
; 582  : 	unsigned __int32 crc;
; 583  : 	UINT64_STRUCT unitNo;
; 584  : 	uint32 nbrUnits;
; 585  : 	int blockSize;
; 586  : 	int nTestsPerformed = 0;

  00019	33 ff		 xor	 edi, edi

; 587  : 
; 588  : 	unitNo.Value = 0x0234567890ABCDEFull;

  0001b	c7 85 b4 fb ff
	ff ef cd ab 90	 mov	 DWORD PTR _unitNo$[ebp], -1867788817 ; 90abcdefH
  00025	c7 85 b8 fb ff
	ff 78 56 34 02	 mov	 DWORD PTR _unitNo$[ebp+4], 36984440 ; 02345678H

; 589  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 590  : 
; 591  : 	for (i = 0; i < sizeof (buf); i++)

  0002f	33 c0		 xor	 eax, eax
$LL4@TestLegacy:

; 592  : 		buf[i] = (unsigned char) i;

  00031	88 84 05 bc fb
	ff ff		 mov	 BYTE PTR _buf$[ebp+eax], al
  00038	40		 inc	 eax
  00039	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0003e	72 f1		 jb	 SHORT $LL4@TestLegacy

; 593  : 
; 594  : 	for (i = 0; i < sizeof (ci->k2); i++)

  00040	33 c0		 xor	 eax, eax
$LL7@TestLegacy:

; 595  : 		ci->k2[i] = (unsigned char) i;

  00042	88 84 06 50 1d
	00 00		 mov	 BYTE PTR [esi+eax+7504], al
  00049	40		 inc	 eax
  0004a	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0004f	72 f1		 jb	 SHORT $LL7@TestLegacy

; 596  : 
; 597  : 	// Test all EAs
; 598  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  00051	e8 00 00 00 00	 call	 _EAGetFirst
  00056	89 06		 mov	 DWORD PTR [esi], eax
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 5c 01 00
	00		 je	 $LN9@TestLegacy
  00060	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LL10@TestLegacy:

; 599  : 	{
; 600  : 		EAGetName (name, ci->ea);

  00063	ff 36		 push	 DWORD PTR [esi]
  00065	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _EAGetName

; 601  : 		blockSize = CipherGetBlockSize (EAGetFirstCipher (ci->ea));

  0006e	ff 36		 push	 DWORD PTR [esi]
  00070	e8 00 00 00 00	 call	 _EAGetFirstCipher
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _CipherGetBlockSize

; 602  : 
; 603  : 		if (EAInit (ci->ea, (unsigned char *)buf, ci->ks) == ERR_CIPHER_INIT_FAILURE)

  0007b	53		 push	 ebx
  0007c	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00082	50		 push	 eax
  00083	ff 36		 push	 DWORD PTR [esi]
  00085	e8 00 00 00 00	 call	 _EAInit
  0008a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008d	83 f8 11	 cmp	 eax, 17			; 00000011H
  00090	0f 84 3c 01 00
	00		 je	 $LN30@TestLegacy

; 604  : 			return FALSE;
; 605  : 
; 606  : 		// Test all deprecated modes of operation
; 607  : 		for (ci->mode = EAGetFirstMode (ci->ea);

  00096	ff 36		 push	 DWORD PTR [esi]
  00098	e8 00 00 00 00	 call	 _EAGetFirstMode
  0009d	83 c4 04	 add	 esp, 4
  000a0	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 608  : 			ci->mode != 0;

  000a3	85 c0		 test	 eax, eax
  000a5	0f 84 fd 00 00
	00		 je	 $LN8@TestLegacy
  000ab	0f 1f 44 00 00	 npad	 5
$LL13@TestLegacy:

; 610  : 		{
; 611  : 			// Skip modes that are not deprecated
; 612  : 			if (ci->mode == XTS || ci->mode == XTS8)

  000b0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b3	83 f8 01	 cmp	 eax, 1
  000b6	0f 84 d4 00 00
	00		 je	 $LN11@TestLegacy
  000bc	83 f8 02	 cmp	 eax, 2
  000bf	0f 84 cb 00 00
	00		 je	 $LN11@TestLegacy

; 613  : 				continue;
; 614  : 
; 615  : 			EncryptDataUnits (buf, &unitNo, nbrUnits, ci);

  000c5	56		 push	 esi
  000c6	6a 02		 push	 2
  000c8	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  000ce	50		 push	 eax
  000cf	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _EncryptDataUnits

; 616  : 			crc = GetCrc32 (buf, sizeof (buf));

  000db	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  000e1	68 00 04 00 00	 push	 1024			; 00000400H
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _GetCrc32
  000ec	83 c4 18	 add	 esp, 24			; 00000018H

; 617  : 
; 618  : 			if (crc == 0xb70b4c26)

  000ef	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  000f4	0f 84 d8 00 00
	00		 je	 $LN30@TestLegacy

; 619  : 				return FALSE;
; 620  : 
; 621  : 			DecryptDataUnits (buf, &unitNo, nbrUnits, ci);

  000fa	56		 push	 esi
  000fb	6a 02		 push	 2
  000fd	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  00103	50		 push	 eax
  00104	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _DecryptDataUnits

; 622  : 
; 623  : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00110	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00116	68 00 04 00 00	 push	 1024			; 00000400H
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _GetCrc32
  00121	83 c4 18	 add	 esp, 24			; 00000018H
  00124	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  00129	0f 85 a3 00 00
	00		 jne	 $LN30@TestLegacy

; 624  : 				return FALSE;
; 625  : 
; 626  : 			nTestsPerformed++;
; 627  : 
; 628  : 			EncryptBuffer (buf, sizeof (buf), ci);

  0012f	56		 push	 esi
  00130	6a 00		 push	 0
  00132	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00138	68 00 04 00 00	 push	 1024			; 00000400H
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 _EncryptBuffer

; 629  : 			crc = GetCrc32 (buf, sizeof (buf));

  00143	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00149	68 00 04 00 00	 push	 1024			; 00000400H
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 _GetCrc32
  00154	83 c4 18	 add	 esp, 24			; 00000018H

; 630  : 
; 631  : 			if (crc == 0xb70b4c26)

  00157	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  0015c	74 74		 je	 SHORT $LN30@TestLegacy

; 632  : 				return FALSE;
; 633  : 
; 634  : 			DecryptBuffer (buf, sizeof (buf), ci);

  0015e	56		 push	 esi
  0015f	6a 00		 push	 0
  00161	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00167	68 00 04 00 00	 push	 1024			; 00000400H
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _DecryptBuffer

; 635  : 
; 636  : 			if (GetCrc32 (buf, sizeof (buf)) != 0xb70b4c26)

  00172	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00178	68 00 04 00 00	 push	 1024			; 00000400H
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _GetCrc32
  00183	83 c4 18	 add	 esp, 24			; 00000018H
  00186	3d 26 4c 0b b7	 cmp	 eax, -1223996378	; b70b4c26H
  0018b	75 45		 jne	 SHORT $LN30@TestLegacy

; 637  : 				return FALSE;
; 638  : 
; 639  : 			nTestsPerformed++;

  0018d	83 c7 02	 add	 edi, 2
$LN11@TestLegacy:

; 609  : 			ci->mode = EAGetNextMode (ci->ea, ci->mode))

  00190	ff 76 04	 push	 DWORD PTR [esi+4]
  00193	ff 36		 push	 DWORD PTR [esi]
  00195	e8 00 00 00 00	 call	 _EAGetNextMode
  0019a	83 c4 08	 add	 esp, 8
  0019d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  001a0	85 c0		 test	 eax, eax
  001a2	0f 85 08 ff ff
	ff		 jne	 $LL13@TestLegacy
$LN8@TestLegacy:

; 596  : 
; 597  : 	// Test all EAs
; 598  : 	for (ci->ea = EAGetFirst (); ci->ea != 0; ci->ea = EAGetNext (ci->ea))

  001a8	ff 36		 push	 DWORD PTR [esi]
  001aa	e8 00 00 00 00	 call	 _EAGetNext
  001af	83 c4 04	 add	 esp, 4
  001b2	89 06		 mov	 DWORD PTR [esi], eax
  001b4	85 c0		 test	 eax, eax
  001b6	0f 85 a7 fe ff
	ff		 jne	 $LL10@TestLegacy
$LN9@TestLegacy:
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi

; 640  : 		}
; 641  : 	}
; 642  : 	return 1;//(nTestsPerformed == 86);

  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	5b		 pop	 ebx

; 643  : }

  001c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c7	33 cd		 xor	 ecx, ebp
  001c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c3		 ret	 0
$LN30@TestLegacy:
  001d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d5	33 c0		 xor	 eax, eax
  001d7	5f		 pop	 edi
  001d8	5e		 pop	 esi
  001d9	33 cd		 xor	 ecx, ebp
  001db	5b		 pop	 ebx
  001dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c3		 ret	 0
_TestLegacySectorBufEncryption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _TestSectorBufEncryption
_TEXT	SEGMENT
_unitNo$ = -2144					; size = 8
_ci$GSCopy$1$ = -2136					; size = 4
_writeOffset$2$ = -2132					; size = 4
_writeOffset$1$ = -2128					; size = 4
_testCase$1$ = -2124					; size = 4
_nTestsPerformed$1$ = -2120				; size = 4
_buf$ = -2116						; size = 2048
_name$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_ci$ = 8						; size = 4
_TestSectorBufEncryption PROC				; COMDAT

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 08 00
	00		 sub	 esp, 2144		; 00000860H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _ci$[ebp]
  00017	56		 push	 esi

; 385  : 	unsigned char buf[ENCRYPTION_DATA_UNIT_SIZE * 4];
; 386  : 	unsigned int i;
; 387  : 	char name[64];
; 388  : 	unsigned __int32 crc;
; 389  : 	UINT64_STRUCT unitNo;
; 390  : 	uint32 nbrUnits;
; 391  : 	unsigned __int64 writeOffset;
; 392  : 	int testCase = 0;

  00018	33 f6		 xor	 esi, esi
  0001a	89 9d a8 f7 ff
	ff		 mov	 DWORD PTR _ci$GSCopy$1$[ebp], ebx

; 393  : 	int nTestsPerformed = 0;
; 394  : 
; 395  : 	static unsigned char key1[] =
; 396  : 	{
; 397  : 		0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45, 0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26, 0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69, 0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27,
; 398  : 		0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93, 0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95, 0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37, 0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92,
; 399  : 		0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
; 400  : 	};
; 401  : 
; 402  : 	if (!TestLegacySectorBufEncryption(ci))

  00020	53		 push	 ebx
  00021	89 b5 b4 f7 ff
	ff		 mov	 DWORD PTR _testCase$1$[ebp], esi
  00027	89 b5 b8 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$1$[ebp], esi
  0002d	e8 00 00 00 00	 call	 _TestLegacySectorBufEncryption
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	75 10		 jne	 SHORT $LN28@TestSector
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 562  : 	//return (nTestsPerformed == 20); // 2 * number of ea
; 563  : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN28@TestSector:

; 403  : 		return FALSE;
; 404  : 
; 405  : 
; 406  : 	/* Encryption/decryption of data units (typically, volume data sectors) */
; 407  : 
; 408  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 409  : 
; 410  : 	/* The buffer can accommodate 4 data units and we'll test 4 cases by "scrolling". The data unit 0xFFFFFFFFFF
; 411  : 	will "move" from the start of the buffer to its end. For a 512-byte data unit, the byte offset 562949953420800
; 412  : 	corresponds to the data unit 0xFFFFFFFFFF. */
; 413  : 	for (writeOffset = 562949953420800ULL;

  00049	b8 00 fe ff ff	 mov	 eax, -512		; fffffe00H
  0004e	b9 ff ff 01 00	 mov	 ecx, 131071		; 0001ffffH
  00053	89 85 b0 f7 ff
	ff		 mov	 DWORD PTR _writeOffset$1$[ebp], eax
  00059	89 8d ac f7 ff
	ff		 mov	 DWORD PTR _writeOffset$2$[ebp], ecx
  0005f	57		 push	 edi
$LL4@TestSector:

; 416  : 	{
; 417  : 		unitNo.Value = writeOffset / ENCRYPTION_DATA_UNIT_SIZE;

  00060	0f ac c8 09	 shrd	 eax, ecx, 9
  00064	c1 e9 09	 shr	 ecx, 9
  00067	89 85 a0 f7 ff
	ff		 mov	 DWORD PTR _unitNo$[ebp], eax
  0006d	89 8d a4 f7 ff
	ff		 mov	 DWORD PTR _unitNo$[ebp+4], ecx

; 418  : 
; 419  : 		// Test all EAs that support this mode of operation
; 420  : 		for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  00073	e8 00 00 00 00	 call	 _EAGetFirst
  00078	89 03		 mov	 DWORD PTR [ebx], eax
  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 49 02 00
	00		 je	 $LN6@TestSector
$LL7@TestSector:

; 421  : 		{
; 422  : 			for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  00082	ff 33		 push	 DWORD PTR [ebx]
  00084	e8 00 00 00 00	 call	 _EAGetFirstMode
  00089	83 c4 04	 add	 esp, 4
  0008c	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0008f	85 c0		 test	 eax, eax
  00091	0f 84 1a 02 00
	00		 je	 $LN5@TestSector
  00097	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@TestSector:

; 423  : 			{
; 424  : 				if (!EAIsModeSupported(ci->ea, ci->mode))

  000a0	ff 73 04	 push	 DWORD PTR [ebx+4]
  000a3	ff 33		 push	 DWORD PTR [ebx]
  000a5	e8 00 00 00 00	 call	 _EAIsModeSupported
  000aa	83 c4 08	 add	 esp, 8
  000ad	85 c0		 test	 eax, eax
  000af	0f 84 e4 01 00
	00		 je	 $LN8@TestSector

; 425  : 					continue;
; 426  : 
; 427  : 				EAGetName(name, ci->ea);

  000b5	ff 33		 push	 DWORD PTR [ebx]
  000b7	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _EAGetName

; 428  : 
; 429  : 				if (EAInit(ci->ea, key1, ci->ks) != ERR_SUCCESS)

  000c0	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  000c9	ff 33		 push	 DWORD PTR [ebx]
  000cb	e8 00 00 00 00	 call	 _EAInit
  000d0	83 c4 14	 add	 esp, 20			; 00000014H
  000d3	85 c0		 test	 eax, eax
  000d5	0f 85 15 04 00
	00		 jne	 $LN71@TestSector
  000db	0f 1f 44 00 00	 npad	 5
$LL13@TestSector:

; 430  : 					return FALSE;
; 431  : 
; 432  : 				for (i = 0; i < sizeof (ci->k2); i++)
; 433  : 					ci->k2[i] = (unsigned char)i;

  000e0	88 84 03 50 1d
	00 00		 mov	 BYTE PTR [ebx+eax+7504], al
  000e7	40		 inc	 eax
  000e8	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000ed	72 f1		 jb	 SHORT $LL13@TestSector

; 434  : 
; 435  : 				memcpy(&ci->k2, XTS_vectors[XTS_TEST_COUNT - 1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT - 1].key2));

  000ef	0f 10 05 50 11
	00 00		 movups	 xmm0, XMMWORD PTR _XTS_vectors+4432

; 436  : 
; 437  : 				if (!EAInitMode(ci))

  000f6	53		 push	 ebx
  000f7	0f 11 83 50 1d
	00 00		 movups	 XMMWORD PTR [ebx+7504], xmm0
  000fe	0f 10 05 60 11
	00 00		 movups	 xmm0, XMMWORD PTR _XTS_vectors+4448
  00105	0f 11 83 60 1d
	00 00		 movups	 XMMWORD PTR [ebx+7520], xmm0
  0010c	e8 00 00 00 00	 call	 _EAInitMode
  00111	83 c4 04	 add	 esp, 4
  00114	85 c0		 test	 eax, eax
  00116	0f 84 d4 03 00
	00		 je	 $LN71@TestSector

; 438  : 					return FALSE;
; 439  : 
; 440  : 				// Each data unit will contain the same plaintext
; 441  : 				for (i = 0; i < nbrUnits; i++)
; 442  : 				{
; 443  : 					memcpy((unsigned char *)buf + i * ENCRYPTION_DATA_UNIT_SIZE,
; 444  : 						XTS_vectors[XTS_TEST_COUNT - 1].plaintext,
; 445  : 						ENCRYPTION_DATA_UNIT_SIZE);
; 446  : 				}
; 447  : 
; 448  : 				EncryptDataUnits(buf, &unitNo, nbrUnits, ci);

  0011c	53		 push	 ebx
  0011d	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00122	8d bd bc f7 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  00128	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  0012d	8d 85 a0 f7 ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  00133	f3 a5		 rep movsd
  00135	6a 04		 push	 4
  00137	50		 push	 eax
  00138	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0013e	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  00143	8d b5 bc f7 ff
	ff		 lea	 esi, DWORD PTR _buf$[ebp]
  00149	8d bd bc f9 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp+512]
  0014f	f3 a5		 rep movsd
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 _EncryptDataUnits

; 449  : 
; 450  : 				crc = GetCrc32(buf, sizeof (buf));

  00157	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0015d	68 00 08 00 00	 push	 2048			; 00000800H
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _GetCrc32
  00168	83 c4 18	 add	 esp, 24			; 00000018H

; 451  : 
; 452  : 				if (strcmp(name, "GOST 28147-89") == 0)

  0016b	8d 4d bc	 lea	 ecx, DWORD PTR _name$[ebp]
  0016e	8b f8		 mov	 edi, eax
  00170	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@
$LL104@TestSector:
  00175	8a 19		 mov	 bl, BYTE PTR [ecx]
  00177	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00179	75 1a		 jne	 SHORT $LN105@TestSector
  0017b	84 db		 test	 bl, bl
  0017d	74 12		 je	 SHORT $LN106@TestSector
  0017f	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00182	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00185	75 0e		 jne	 SHORT $LN105@TestSector
  00187	83 c1 02	 add	 ecx, 2
  0018a	83 c2 02	 add	 edx, 2
  0018d	84 c0		 test	 al, al
  0018f	75 e4		 jne	 SHORT $LL104@TestSector
$LN106@TestSector:
  00191	33 c0		 xor	 eax, eax
  00193	eb 05		 jmp	 SHORT $LN107@TestSector
$LN105@TestSector:
  00195	1b c0		 sbb	 eax, eax
  00197	83 c8 01	 or	 eax, 1
$LN107@TestSector:
  0019a	85 c0		 test	 eax, eax
  0019c	75 6d		 jne	 SHORT $LN32@TestSector

; 453  : 				{
; 454  : 					switch (testCase)

  0019e	8b 85 b4 f7 ff
	ff		 mov	 eax, DWORD PTR _testCase$1$[ebp]
  001a4	83 f8 03	 cmp	 eax, 3
  001a7	0f 87 98 00 00
	00		 ja	 $LN123@TestSector
  001ad	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN127@TestSector[eax*4]
$LN34@TestSector:

; 455  : 					{
; 456  : 					case 0:
; 457  : #ifdef GOST_DYNAMIC_SBOXES
; 458  : 						if (crc != 0x05eacf7d)

  001b4	81 ff 7d cf ea
	05		 cmp	 edi, 99274621		; 05eacf7dH
  001ba	0f 85 30 03 00
	00		 jne	 $LN71@TestSector

; 459  : 							return FALSE;
; 460  : #endif
; 461  : 						nTestsPerformed++;

  001c0	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  001c6	46		 inc	 esi

; 462  : 						break;

  001c7	e9 8b 00 00 00	 jmp	 $LN100@TestSector
$LN36@TestSector:

; 463  : 					case 1:
; 464  : #ifdef GOST_DYNAMIC_SBOXES
; 465  : 						if (crc != 0x5b5926d9)

  001cc	81 ff d9 26 59
	5b		 cmp	 edi, 1532569305		; 5b5926d9H
  001d2	0f 85 18 03 00
	00		 jne	 $LN71@TestSector

; 466  : 							return FALSE;
; 467  : #endif
; 468  : 						nTestsPerformed++;

  001d8	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  001de	46		 inc	 esi

; 469  : 						break;

  001df	eb 76		 jmp	 SHORT $LN100@TestSector
$LN38@TestSector:

; 470  : 					case 2:
; 471  : #ifdef GOST_DYNAMIC_SBOXES
; 472  : 						if (crc != 0xcf0cfdd1)

  001e1	81 ff d1 fd 0c
	cf		 cmp	 edi, -821232175		; cf0cfdd1H
  001e7	0f 85 03 03 00
	00		 jne	 $LN71@TestSector

; 473  : 							return FALSE;
; 474  : #endif
; 475  : 						nTestsPerformed++;

  001ed	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  001f3	46		 inc	 esi

; 476  : 						break;

  001f4	eb 61		 jmp	 SHORT $LN100@TestSector
$LN40@TestSector:

; 477  : 					case 3:
; 478  : #ifdef GOST_DYNAMIC_SBOXES
; 479  : 						if (crc != 0xe82865a8)

  001f6	81 ff a8 65 28
	e8		 cmp	 edi, -400005720		; e82865a8H
  001fc	0f 85 ee 02 00
	00		 jne	 $LN71@TestSector

; 480  : 							return FALSE;
; 481  : #endif
; 482  : 						nTestsPerformed++;

  00202	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  00208	46		 inc	 esi

; 483  : 						break;
; 484  : 					}
; 485  : 				}

  00209	eb 4c		 jmp	 SHORT $LN100@TestSector
$LN32@TestSector:

; 486  : 				else if (strcmp(name, "Gost Grasshopper") == 0)

  0020b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@
  00210	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
$LL108@TestSector:
  00213	8a 10		 mov	 dl, BYTE PTR [eax]
  00215	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00217	75 1a		 jne	 SHORT $LN109@TestSector
  00219	84 d2		 test	 dl, dl
  0021b	74 12		 je	 SHORT $LN110@TestSector
  0021d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00220	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00223	75 0e		 jne	 SHORT $LN109@TestSector
  00225	83 c0 02	 add	 eax, 2
  00228	83 c1 02	 add	 ecx, 2
  0022b	84 d2		 test	 dl, dl
  0022d	75 e4		 jne	 SHORT $LL108@TestSector
$LN110@TestSector:
  0022f	33 c0		 xor	 eax, eax
  00231	eb 05		 jmp	 SHORT $LN111@TestSector
$LN109@TestSector:
  00233	1b c0		 sbb	 eax, eax
  00235	83 c8 01	 or	 eax, 1
$LN111@TestSector:

; 487  : 					nTestsPerformed++;

  00238	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  0023e	85 c0		 test	 eax, eax
  00240	75 09		 jne	 SHORT $LN42@TestSector
  00242	46		 inc	 esi
  00243	eb 06		 jmp	 SHORT $LN42@TestSector
$LN123@TestSector:
  00245	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
$LN42@TestSector:

; 488  : 
; 489  : 				if (crc == 0x9f5edd58)

  0024b	81 ff 58 dd 5e
	9f		 cmp	 edi, -1621172904	; 9f5edd58H
  00251	0f 84 99 02 00
	00		 je	 $LN71@TestSector
$LN100@TestSector:

; 490  : 					return FALSE;
; 491  : 
; 492  : 				DecryptDataUnits(buf, &unitNo, nbrUnits, ci);

  00257	8b 9d a8 f7 ff
	ff		 mov	 ebx, DWORD PTR _ci$GSCopy$1$[ebp]
  0025d	8d 85 a0 f7 ff
	ff		 lea	 eax, DWORD PTR _unitNo$[ebp]
  00263	53		 push	 ebx
  00264	6a 04		 push	 4
  00266	50		 push	 eax
  00267	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 _DecryptDataUnits

; 493  : 
; 494  : 				if (GetCrc32(buf, sizeof (buf)) != 0x9f5edd58)

  00273	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00279	68 00 08 00 00	 push	 2048			; 00000800H
  0027e	50		 push	 eax
  0027f	e8 00 00 00 00	 call	 _GetCrc32
  00284	83 c4 18	 add	 esp, 24			; 00000018H
  00287	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  0028c	0f 85 5e 02 00
	00		 jne	 $LN71@TestSector

; 495  : 					return FALSE;
; 496  : 
; 497  : 				nTestsPerformed++;

  00292	46		 inc	 esi
  00293	89 b5 b8 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$1$[ebp], esi
$LN8@TestSector:

; 421  : 		{
; 422  : 			for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  00299	ff 73 04	 push	 DWORD PTR [ebx+4]
  0029c	ff 33		 push	 DWORD PTR [ebx]
  0029e	e8 00 00 00 00	 call	 _EAGetNextMode
  002a3	83 c4 08	 add	 esp, 8
  002a6	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  002a9	85 c0		 test	 eax, eax
  002ab	0f 85 ef fd ff
	ff		 jne	 $LL10@TestSector
$LN5@TestSector:

; 418  : 
; 419  : 		// Test all EAs that support this mode of operation
; 420  : 		for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  002b1	ff 33		 push	 DWORD PTR [ebx]
  002b3	e8 00 00 00 00	 call	 _EAGetNext
  002b8	83 c4 04	 add	 esp, 4
  002bb	89 03		 mov	 DWORD PTR [ebx], eax
  002bd	85 c0		 test	 eax, eax
  002bf	0f 85 bd fd ff
	ff		 jne	 $LL7@TestSector
  002c5	8b b5 b4 f7 ff
	ff		 mov	 esi, DWORD PTR _testCase$1$[ebp]
$LN6@TestSector:

; 415  : 		writeOffset -= ENCRYPTION_DATA_UNIT_SIZE)

  002cb	8b 85 b0 f7 ff
	ff		 mov	 eax, DWORD PTR _writeOffset$1$[ebp]

; 498  : 			}
; 499  : 		}
; 500  : 		testCase++;

  002d1	46		 inc	 esi
  002d2	8b 8d ac f7 ff
	ff		 mov	 ecx, DWORD PTR _writeOffset$2$[ebp]
  002d8	05 00 fe ff ff	 add	 eax, -512		; fffffe00H
  002dd	89 b5 b4 f7 ff
	ff		 mov	 DWORD PTR _testCase$1$[ebp], esi
  002e3	83 d1 ff	 adc	 ecx, -1
  002e6	89 85 b0 f7 ff
	ff		 mov	 DWORD PTR _writeOffset$1$[ebp], eax
  002ec	89 8d ac f7 ff
	ff		 mov	 DWORD PTR _writeOffset$2$[ebp], ecx
  002f2	81 f9 ff ff 01
	00		 cmp	 ecx, 131071		; 0001ffffH
  002f8	72 11		 jb	 SHORT $LN102@TestSector

; 414  : 		writeOffset > 562949953420800ULL - nbrUnits * ENCRYPTION_DATA_UNIT_SIZE;

  002fa	0f 87 60 fd ff
	ff		 ja	 $LL4@TestSector
  00300	3d 00 f6 ff ff	 cmp	 eax, -2560		; fffff600H
  00305	0f 87 55 fd ff
	ff		 ja	 $LL4@TestSector
$LN102@TestSector:

; 501  : 	}
; 502  : 
; 503  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 504  : 
; 505  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 506  : 
; 507  : 	// Test all EAs that support this mode of operation
; 508  : 	for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  0030b	e8 00 00 00 00	 call	 _EAGetFirst
  00310	89 03		 mov	 DWORD PTR [ebx], eax
  00312	85 c0		 test	 eax, eax
  00314	0f 84 c0 01 00
	00		 je	 $LN103@TestSector
  0031a	66 0f 1f 44 00
	00		 npad	 6
$LL21@TestSector:

; 509  : 	{
; 510  : 		for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  00320	ff 33		 push	 DWORD PTR [ebx]
  00322	e8 00 00 00 00	 call	 _EAGetFirstMode
  00327	83 c4 04	 add	 esp, 4
  0032a	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0032d	85 c0		 test	 eax, eax
  0032f	0f 84 91 01 00
	00		 je	 $LN19@TestSector
$LL24@TestSector:

; 511  : 		{
; 512  : 			if (!EAIsModeSupported(ci->ea, ci->mode))

  00335	ff 73 04	 push	 DWORD PTR [ebx+4]
  00338	ff 33		 push	 DWORD PTR [ebx]
  0033a	e8 00 00 00 00	 call	 _EAIsModeSupported
  0033f	83 c4 08	 add	 esp, 8
  00342	85 c0		 test	 eax, eax
  00344	0f 84 64 01 00
	00		 je	 $LN22@TestSector

; 513  : 				continue;
; 514  : 
; 515  : 			EAGetName(name, ci->ea);

  0034a	ff 33		 push	 DWORD PTR [ebx]
  0034c	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 _EAGetName

; 516  : 
; 517  : 			if (EAInit(ci->ea, key1, ci->ks) != ERR_SUCCESS)

  00355	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00358	50		 push	 eax
  00359	68 00 00 00 00	 push	 OFFSET ?key1@?1??TestSectorBufEncryption@@9@9
  0035e	ff 33		 push	 DWORD PTR [ebx]
  00360	e8 00 00 00 00	 call	 _EAInit
  00365	83 c4 14	 add	 esp, 20			; 00000014H
  00368	85 c0		 test	 eax, eax
  0036a	0f 85 80 01 00
	00		 jne	 $LN71@TestSector

; 518  : 				return FALSE;
; 519  : 
; 520  : 			memcpy(&ci->k2, XTS_vectors[XTS_TEST_COUNT - 1].key2, sizeof (XTS_vectors[XTS_TEST_COUNT - 1].key2));

  00370	0f 10 05 50 11
	00 00		 movups	 xmm0, XMMWORD PTR _XTS_vectors+4432

; 521  : 
; 522  : 			if (!EAInitMode(ci))

  00377	53		 push	 ebx
  00378	0f 11 83 50 1d
	00 00		 movups	 XMMWORD PTR [ebx+7504], xmm0
  0037f	0f 10 05 60 11
	00 00		 movups	 xmm0, XMMWORD PTR _XTS_vectors+4448
  00386	0f 11 83 60 1d
	00 00		 movups	 XMMWORD PTR [ebx+7520], xmm0
  0038d	e8 00 00 00 00	 call	 _EAInitMode
  00392	83 c4 04	 add	 esp, 4
  00395	85 c0		 test	 eax, eax
  00397	0f 84 53 01 00
	00		 je	 $LN71@TestSector

; 523  : 				return FALSE;
; 524  : 
; 525  : 			// Each data unit will contain the same plaintext
; 526  : 			for (i = 0; i < nbrUnits; i++)
; 527  : 			{
; 528  : 				memcpy((unsigned char *)buf + i * ENCRYPTION_DATA_UNIT_SIZE,
; 529  : 					XTS_vectors[XTS_TEST_COUNT - 1].plaintext,
; 530  : 					ENCRYPTION_DATA_UNIT_SIZE);
; 531  : 			}
; 532  : 
; 533  : 			EncryptBuffer(buf, sizeof (buf), ci);

  0039d	53		 push	 ebx
  0039e	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  003a3	8d bd bc f7 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  003a9	be 7c 11 00 00	 mov	 esi, OFFSET _XTS_vectors+4476
  003ae	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  003b4	f3 a5		 rep movsd
  003b6	6a 00		 push	 0
  003b8	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  003bd	8d b5 bc f7 ff
	ff		 lea	 esi, DWORD PTR _buf$[ebp]
  003c3	8d bd bc f9 ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp+512]
  003c9	68 00 08 00 00	 push	 2048			; 00000800H
  003ce	f3 a5		 rep movsd
  003d0	50		 push	 eax
  003d1	e8 00 00 00 00	 call	 _EncryptBuffer

; 534  : 
; 535  : 			crc = GetCrc32(buf, sizeof (buf));

  003d6	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  003dc	68 00 08 00 00	 push	 2048			; 00000800H
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _GetCrc32
  003e7	83 c4 18	 add	 esp, 24			; 00000018H

; 536  : 
; 537  : 			if (strcmp(name, "GOST 28147-89") == 0)

  003ea	8d 4d bc	 lea	 ecx, DWORD PTR _name$[ebp]
  003ed	8b f8		 mov	 edi, eax
  003ef	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0O@POKHNLDL@GOST?528147?989?$AA@
$LL113@TestSector:
  003f4	8a 01		 mov	 al, BYTE PTR [ecx]
  003f6	3a 02		 cmp	 al, BYTE PTR [edx]
  003f8	75 1a		 jne	 SHORT $LN114@TestSector
  003fa	84 c0		 test	 al, al
  003fc	74 12		 je	 SHORT $LN115@TestSector
  003fe	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00401	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00404	75 0e		 jne	 SHORT $LN114@TestSector
  00406	83 c1 02	 add	 ecx, 2
  00409	83 c2 02	 add	 edx, 2
  0040c	84 c0		 test	 al, al
  0040e	75 e4		 jne	 SHORT $LL113@TestSector
$LN115@TestSector:
  00410	33 c0		 xor	 eax, eax
  00412	eb 05		 jmp	 SHORT $LN116@TestSector
$LN114@TestSector:
  00414	1b c0		 sbb	 eax, eax
  00416	83 c8 01	 or	 eax, 1
$LN116@TestSector:
  00419	85 c0		 test	 eax, eax
  0041b	75 15		 jne	 SHORT $LN48@TestSector

; 538  : 			{
; 539  : #ifdef GOST_DYNAMIC_SBOXES
; 540  : 				if (crc != 0x5d31eec2)

  0041d	81 ff c2 ee 31
	5d		 cmp	 edi, 1563553474		; 5d31eec2H
  00423	0f 85 c7 00 00
	00		 jne	 $LN71@TestSector

; 541  : 					return FALSE;
; 542  : #endif
; 543  : 				nTestsPerformed++;

  00429	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  0042f	46		 inc	 esi

; 544  : 			}

  00430	eb 46		 jmp	 SHORT $LN101@TestSector
$LN48@TestSector:

; 545  : 			else if (strcmp(name, "Gost Grasshopper") == 0)

  00432	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BB@BMJBGELP@Gost?5Grasshopper?$AA@
  00437	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  0043a	66 0f 1f 44 00
	00		 npad	 6
$LL117@TestSector:
  00440	8a 10		 mov	 dl, BYTE PTR [eax]
  00442	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00444	75 1a		 jne	 SHORT $LN118@TestSector
  00446	84 d2		 test	 dl, dl
  00448	74 12		 je	 SHORT $LN119@TestSector
  0044a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0044d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00450	75 0e		 jne	 SHORT $LN118@TestSector
  00452	83 c0 02	 add	 eax, 2
  00455	83 c1 02	 add	 ecx, 2
  00458	84 d2		 test	 dl, dl
  0045a	75 e4		 jne	 SHORT $LL117@TestSector
$LN119@TestSector:
  0045c	33 c0		 xor	 eax, eax
  0045e	eb 05		 jmp	 SHORT $LN120@TestSector
$LN118@TestSector:
  00460	1b c0		 sbb	 eax, eax
  00462	83 c8 01	 or	 eax, 1
$LN120@TestSector:

; 546  : 				nTestsPerformed++;

  00465	8b b5 b8 f7 ff
	ff		 mov	 esi, DWORD PTR _nTestsPerformed$1$[ebp]
  0046b	85 c0		 test	 eax, eax
  0046d	75 01		 jne	 SHORT $LN51@TestSector
  0046f	46		 inc	 esi
$LN51@TestSector:

; 547  : 
; 548  : 
; 549  : 			if (crc == 0x9f5edd58)

  00470	81 ff 58 dd 5e
	9f		 cmp	 edi, -1621172904	; 9f5edd58H
  00476	74 78		 je	 SHORT $LN71@TestSector
$LN101@TestSector:

; 550  : 				return FALSE;
; 551  : 
; 552  : 			DecryptBuffer(buf, sizeof (buf), ci);

  00478	53		 push	 ebx
  00479	6a 00		 push	 0
  0047b	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00481	68 00 08 00 00	 push	 2048			; 00000800H
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 _DecryptBuffer

; 553  : 
; 554  : 			if (GetCrc32(buf, sizeof (buf)) != 0x9f5edd58)

  0048c	8d 85 bc f7 ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  00492	68 00 08 00 00	 push	 2048			; 00000800H
  00497	50		 push	 eax
  00498	e8 00 00 00 00	 call	 _GetCrc32
  0049d	83 c4 18	 add	 esp, 24			; 00000018H
  004a0	3d 58 dd 5e 9f	 cmp	 eax, -1621172904	; 9f5edd58H
  004a5	75 49		 jne	 SHORT $LN71@TestSector

; 555  : 				return FALSE;
; 556  : 
; 557  : 			nTestsPerformed++;

  004a7	46		 inc	 esi
  004a8	89 b5 b8 f7 ff
	ff		 mov	 DWORD PTR _nTestsPerformed$1$[ebp], esi
$LN22@TestSector:

; 509  : 	{
; 510  : 		for (ci->mode = EAGetFirstMode(ci->ea); ci->mode != 0; ci->mode = EAGetNextMode(ci->ea, ci->mode))

  004ae	ff 73 04	 push	 DWORD PTR [ebx+4]
  004b1	ff 33		 push	 DWORD PTR [ebx]
  004b3	e8 00 00 00 00	 call	 _EAGetNextMode
  004b8	83 c4 08	 add	 esp, 8
  004bb	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  004be	85 c0		 test	 eax, eax
  004c0	0f 85 6f fe ff
	ff		 jne	 $LL24@TestSector
$LN19@TestSector:

; 501  : 	}
; 502  : 
; 503  : 	/* Encryption/decryption of a buffer (typically, a volume header) */
; 504  : 
; 505  : 	nbrUnits = sizeof (buf) / ENCRYPTION_DATA_UNIT_SIZE;
; 506  : 
; 507  : 	// Test all EAs that support this mode of operation
; 508  : 	for (ci->ea = EAGetFirst(); ci->ea != 0; ci->ea = EAGetNext(ci->ea))

  004c6	ff 33		 push	 DWORD PTR [ebx]
  004c8	e8 00 00 00 00	 call	 _EAGetNext
  004cd	83 c4 04	 add	 esp, 4
  004d0	89 03		 mov	 DWORD PTR [ebx], eax
  004d2	85 c0		 test	 eax, eax
  004d4	0f 85 46 fe ff
	ff		 jne	 $LL21@TestSector
$LN103@TestSector:
  004da	5f		 pop	 edi
  004db	5e		 pop	 esi

; 558  : 		}
; 559  : 	}
; 560  : 
; 561  : 	return 1;

  004dc	b8 01 00 00 00	 mov	 eax, 1
  004e1	5b		 pop	 ebx

; 562  : 	//return (nTestsPerformed == 20); // 2 * number of ea
; 563  : }

  004e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e5	33 cd		 xor	 ecx, ebp
  004e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ec	8b e5		 mov	 esp, ebp
  004ee	5d		 pop	 ebp
  004ef	c3		 ret	 0
$LN71@TestSector:
  004f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f3	33 c0		 xor	 eax, eax
  004f5	5f		 pop	 edi
  004f6	5e		 pop	 esi
  004f7	33 cd		 xor	 ecx, ebp
  004f9	5b		 pop	 ebx
  004fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ff	8b e5		 mov	 esp, ebp
  00501	5d		 pop	 ebp
  00502	c3		 ret	 0
  00503	90		 npad	 1
$LN127@TestSector:
  00504	00 00 00 00	 DD	 $LN34@TestSector
  00508	00 00 00 00	 DD	 $LN36@TestSector
  0050c	00 00 00 00	 DD	 $LN38@TestSector
  00510	00 00 00 00	 DD	 $LN40@TestSector
_TestSectorBufEncryption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _test_pkcs5
_TEXT	SEGMENT
_dk$ = -148						; size = 144
__$ArrayPad$ = -4					; size = 4
_test_pkcs5 PROC					; COMDAT

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 787  : 	char dk[144];
; 788  : 
; 789  : 	/* HMAC-Whirlpool tests */
; 790  : 	if (test_hmac_whirlpool() == FALSE)

  00013	e8 00 00 00 00	 call	 _test_hmac_whirlpool
  00018	85 c0		 test	 eax, eax
  0001a	75 10		 jne	 SHORT $LN2@test_pkcs5
$LN14@test_pkcs5:

; 791  : 		return FALSE;

  0001c	33 c0		 xor	 eax, eax

; 821  : 		return FALSE;
; 822  : 
; 823  : 	return TRUE;
; 824  : }

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00021	33 cd		 xor	 ecx, ebp
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@test_pkcs5:

; 792  : 
; 793  : 	/* HMAC-GOSTHASH tests */
; 794  : 	if (test_hmac_gosthash() == FALSE)

  0002c	e8 00 00 00 00	 call	 _test_hmac_gosthash
  00031	85 c0		 test	 eax, eax
  00033	74 e7		 je	 SHORT $LN14@test_pkcs5

; 795  : 		return FALSE;
; 796  : 
; 797  : 	/* HMAC-Stribog tests */
; 798  : 	if (test_hmac_stribog() == FALSE)

  00035	e8 00 00 00 00	 call	 _test_hmac_stribog
  0003a	85 c0		 test	 eax, eax
  0003c	74 de		 je	 SHORT $LN14@test_pkcs5

; 799  : 		return FALSE;
; 800  : 
; 801  : #ifndef GST_WINDOWS_BOOT
; 802  : 	/* PKCS-5 test 1 with HMAC-Whirlpool used as the PRF */
; 803  : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  0003e	6a 04		 push	 4
  00040	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00046	50		 push	 eax
  00047	6a 05		 push	 5
  00049	6a 04		 push	 4
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  00050	6a 08		 push	 8
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  00057	e8 00 00 00 00	 call	 _derive_key_whirlpool

; 804  : 	if (memcmp (dk, "\x50\x7c\x36\x6f", 4) != 0)

  0005c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  00062	83 c4 1c	 add	 esp, 28			; 0000001cH
  00065	81 38 50 7c 36
	6f		 cmp	 DWORD PTR [eax], 1865841744 ; 6f367c50H
  0006b	75 af		 jne	 SHORT $LN14@test_pkcs5

; 805  : 		return FALSE;
; 806  : 
; 807  : 	/* PKCS-5 test 2 with HMAC-Whirlpool used as the PRF (derives a key longer than the underlying hash) */
; 808  : 	derive_key_whirlpool ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 96);

  0006d	56		 push	 esi
  0006e	6a 60		 push	 96			; 00000060H
  00070	50		 push	 eax
  00071	6a 05		 push	 5
  00073	6a 04		 push	 4
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  0007a	6a 08		 push	 8
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  00081	e8 00 00 00 00	 call	 _derive_key_whirlpool
  00086	83 c4 1c	 add	 esp, 28			; 0000001cH

; 809  : 	if (memcmp (dk, "\x50\x7c\x36\x6f\xee\x10\x2e\x9a\xe2\x8a\xd5\x82\x72\x7d\x27\x0f\xe8\x4d\x7f\x68\x7a\xcf\xb5\xe7\x43\x67\xaa\x98\x93\x52\x2b\x09\x6e\x42\xdf\x2c\x59\x4a\x91\x6d\x7e\x10\xae\xb2\x1a\x89\x8f\xb9\x8f\xe6\x31\xa9\xd8\x9f\x98\x26\xf4\xda\xcd\x7d\x65\x65\xde\x10\x95\x91\xb4\x84\x26\xae\x43\xa1\x00\x5b\x1e\xb8\x38\x97\xa4\x1e\x4b\xd2\x65\x64\xbc\xfa\x1f\x35\x85\xdb\x4f\x97\x65\x6f\xbd\x24", 96) != 0)

  00089	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _dk$[ebp]
  0008f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0GB@BHABHNEI@P?$HM6o?n?$BA?4?$JK?b?$IK?U?$ICr?$HN?8?$AP?hM?$HPhz?O?$LF?gCg?$KK?$JI?$JDR?$CL?7@
  00094	be 5c 00 00 00	 mov	 esi, 92			; 0000005cH
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@test_pkcs5:
  000a0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a2	3b 02		 cmp	 eax, DWORD PTR [edx]
  000a4	75 75		 jne	 SHORT $LN11@test_pkcs5
  000a6	83 c1 04	 add	 ecx, 4
  000a9	83 c2 04	 add	 edx, 4
  000ac	83 ee 04	 sub	 esi, 4
  000af	73 ef		 jae	 SHORT $LL12@test_pkcs5

; 810  : 		return FALSE;
; 811  : 
; 812  : 	/* PKCS-5 test 1 with HMAC-GostHash used as the PRF */
; 813  : 	derive_key_gosthash ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000b1	6a 04		 push	 4
  000b3	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000b9	50		 push	 eax
  000ba	6a 05		 push	 5
  000bc	6a 04		 push	 4
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  000c3	6a 08		 push	 8
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  000ca	e8 00 00 00 00	 call	 _derive_key_gosthash

; 814  : 	if (memcmp (dk, "\x7d\x53\xe0\x7e", 4) != 0)

  000cf	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _dk$[ebp]
  000d5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d8	81 38 7d 53 e0
	7e		 cmp	 DWORD PTR [eax], 2128630653 ; 7ee0537dH
  000de	75 3b		 jne	 SHORT $LN11@test_pkcs5

; 815  : 		return FALSE;
; 816  : #endif
; 817  : 
; 818  : 	/* PKCS-5 test 1 with HMAC-Stribog used as the PRF */
; 819  : 	derive_key_stribog ("password", 8, "\x12\x34\x56\x78", 4, 5, dk, 4);

  000e0	6a 04		 push	 4
  000e2	50		 push	 eax
  000e3	6a 05		 push	 5
  000e5	6a 04		 push	 4
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_04NDGDACAK@?$BC4Vx?$AA@
  000ec	6a 08		 push	 8
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password?$AA@
  000f3	e8 00 00 00 00	 call	 _derive_key_stribog
  000f8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 820  : 	if (memcmp (dk, "\xc7\x13\x56\xb6", 4) != 0)

  000fb	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _dk$[ebp]
  00101	33 c0		 xor	 eax, eax
  00103	81 39 c7 13 56
	b6		 cmp	 DWORD PTR [ecx], -1235872825 ; b65613c7H
  00109	0f 94 c0	 sete	 al
  0010c	5e		 pop	 esi

; 821  : 		return FALSE;
; 822  : 
; 823  : 	return TRUE;
; 824  : }

  0010d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00110	33 cd		 xor	 ecx, ebp
  00112	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
$LN11@test_pkcs5:
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 c0		 xor	 eax, eax
  00120	33 cd		 xor	 ecx, ebp
  00122	5e		 pop	 esi
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
_test_pkcs5 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _test_hmac_gosthash
_TEXT	SEGMENT
_digest$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_test_hmac_gosthash PROC				; COMDAT

; 744  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 745  : 	unsigned char digest[GOSTHASH_DIGESTSIZE];
; 746  : 	hmac_gosthash(hmac_gosthash_test_key, 64, hmac_gosthash_test_data, (int) strlen (hmac_gosthash_test_data), digest);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_gosthash_test_data
  00016	8b c2		 mov	 eax, edx
  00018	56		 push	 esi
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001c	0f 1f 40 00	 npad	 4
$LL4@test_hmac_:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL4@test_hmac_
  00027	8d 4d dc	 lea	 ecx, DWORD PTR _digest$[ebp]
  0002a	2b c6		 sub	 eax, esi
  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	52		 push	 edx
  0002f	6a 40		 push	 64			; 00000040H
  00031	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_gosthash_test_key
  00037	e8 00 00 00 00	 call	 _hmac_gosthash

; 747  : 	if (memcmp (digest, hmac_gosthash_test_vectors, GOSTHASH_DIGESTSIZE) != 0)

  0003c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_gosthash_test_vectors
  00042	8d 4d dc	 lea	 ecx, DWORD PTR _digest$[ebp]
  00045	83 c4 14	 add	 esp, 20			; 00000014H
  00048	be 1c 00 00 00	 mov	 esi, 28			; 0000001cH
  0004d	0f 1f 00	 npad	 3
$LL7@test_hmac_:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]
  00052	3b 02		 cmp	 eax, DWORD PTR [edx]
  00054	75 1f		 jne	 SHORT $LN6@test_hmac_
  00056	83 c1 04	 add	 ecx, 4
  00059	83 c2 04	 add	 edx, 4
  0005c	83 ee 04	 sub	 esi, 4
  0005f	73 ef		 jae	 SHORT $LL7@test_hmac_
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	5e		 pop	 esi

; 748  : 		return FALSE;
; 749  : 
; 750  : 	return TRUE;
; 751  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN6@test_hmac_:
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 c0		 xor	 eax, eax
  0007a	33 cd		 xor	 ecx, ebp
  0007c	5e		 pop	 esi
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_test_hmac_gosthash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _test_hmac_whirlpool
_TEXT	SEGMENT
_digest$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_test_hmac_whirlpool PROC				; COMDAT

; 725  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 726  : 	unsigned char digest[WHIRLPOOL_DIGESTSIZE];
; 727  : 
; 728  : 	hmac_whirlpool (hmac_whirlpool_test_key, 64, hmac_whirlpool_test_data, (int) strlen (hmac_whirlpool_test_data), digest, WHIRLPOOL_DIGESTSIZE);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_whirlpool_test_data
  00016	8b c2		 mov	 eax, edx
  00018	56		 push	 esi
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001c	0f 1f 40 00	 npad	 4
$LL4@test_hmac_:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL4@test_hmac_
  00027	6a 40		 push	 64			; 00000040H
  00029	8d 4d bc	 lea	 ecx, DWORD PTR _digest$[ebp]
  0002c	2b c6		 sub	 eax, esi
  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	52		 push	 edx
  00031	6a 40		 push	 64			; 00000040H
  00033	ff 35 00 00 00
	00		 push	 DWORD PTR _hmac_whirlpool_test_key
  00039	e8 00 00 00 00	 call	 _hmac_whirlpool

; 729  : 	if (memcmp (digest, hmac_whirlpool_test_vectors, WHIRLPOOL_DIGESTSIZE) != 0)

  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _hmac_whirlpool_test_vectors
  00044	8d 4d bc	 lea	 ecx, DWORD PTR _digest$[ebp]
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH
  0004f	90		 npad	 1
$LL7@test_hmac_:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]
  00052	3b 02		 cmp	 eax, DWORD PTR [edx]
  00054	75 1f		 jne	 SHORT $LN6@test_hmac_
  00056	83 c1 04	 add	 ecx, 4
  00059	83 c2 04	 add	 edx, 4
  0005c	83 ee 04	 sub	 esi, 4
  0005f	73 ef		 jae	 SHORT $LL7@test_hmac_
  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	5e		 pop	 esi

; 730  : 		return FALSE;
; 731  : 
; 732  : 	return TRUE;
; 733  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN6@test_hmac_:
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 c0		 xor	 eax, eax
  0007a	33 cd		 xor	 ecx, ebp
  0007c	5e		 pop	 esi
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_test_hmac_whirlpool ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\common\tests.c
;	COMDAT _CipherInit2
_TEXT	SEGMENT
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_ks$ = 16						; size = 4
_key_len$ = 20						; size = 4
_CipherInit2 PROC					; COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  : 	switch (cipher)

  00003	8b 45 08	 mov	 eax, DWORD PTR _cipher$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	74 20		 je	 SHORT $LN4@CipherInit
  0000b	83 e8 01	 sub	 eax, 1
  0000e	74 09		 je	 SHORT $LN5@CipherInit

; 340  : 		break;
; 341  : 	default:			
; 342  : 		/* Unknown/wrong ID */
; 343  : 		GST_THROW_FATAL_EXCEPTION;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ds:0, 0

; 344  : 	}
; 345  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN5@CipherInit:

; 337  : 		break;
; 338  : 	case GRASSHOPPER:
; 339  : 		CipherInit(cipher, key, ks);

  00019	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  0001c	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  0001f	6a 02		 push	 2
  00021	e8 00 00 00 00	 call	 _CipherInit
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 344  : 	}
; 345  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN4@CipherInit:

; 334  : 	{
; 335  : 	case GOST:
; 336  : 		CipherInit(cipher,key,ks);

  0002b	ff 75 10	 push	 DWORD PTR _ks$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00031	6a 01		 push	 1
  00033	e8 00 00 00 00	 call	 _CipherInit
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 344  : 	}
; 345  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_CipherInit2 ENDP
_TEXT	ENDS
END
