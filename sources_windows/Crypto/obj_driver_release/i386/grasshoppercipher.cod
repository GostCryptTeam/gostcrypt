; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_pi
PUBLIC	_pi_inv
PUBLIC	_mult_mod_poly
_DATA	SEGMENT
_pi	DB	0fcH
	DB	0eeH
	DB	0ddH
	DB	011H
	DB	0cfH
	DB	06eH
	DB	031H
	DB	016H
	DB	0fbH
	DB	0c4H
	DB	0faH
	DB	0daH
	DB	023H
	DB	0c5H
	DB	04H
	DB	04dH
	DB	0e9H
	DB	077H
	DB	0f0H
	DB	0dbH
	DB	093H
	DB	02eH
	DB	099H
	DB	0baH
	DB	017H
	DB	036H
	DB	0f1H
	DB	0bbH
	DB	014H
	DB	0cdH
	DB	05fH
	DB	0c1H
	DB	0f9H
	DB	018H
	DB	065H
	DB	05aH
	DB	0e2H
	DB	05cH
	DB	0efH
	DB	021H
	DB	081H
	DB	01cH
	DB	03cH
	DB	042H
	DB	08bH
	DB	01H
	DB	08eH
	DB	04fH
	DB	05H
	DB	084H
	DB	02H
	DB	0aeH
	DB	0e3H
	DB	06aH
	DB	08fH
	DB	0a0H
	DB	06H
	DB	0bH
	DB	0edH
	DB	098H
	DB	07fH
	DB	0d4H
	DB	0d3H
	DB	01fH
	DB	0ebH
	DB	034H
	DB	02cH
	DB	051H
	DB	0eaH
	DB	0c8H
	DB	048H
	DB	0abH
	DB	0f2H
	DB	02aH
	DB	068H
	DB	0a2H
	DB	0fdH
	DB	03aH
	DB	0ceH
	DB	0ccH
	DB	0b5H
	DB	070H
	DB	0eH
	DB	056H
	DB	08H
	DB	0cH
	DB	076H
	DB	012H
	DB	0bfH
	DB	072H
	DB	013H
	DB	047H
	DB	09cH
	DB	0b7H
	DB	05dH
	DB	087H
	DB	015H
	DB	0a1H
	DB	096H
	DB	029H
	DB	010H
	DB	07bH
	DB	09aH
	DB	0c7H
	DB	0f3H
	DB	091H
	DB	078H
	DB	06fH
	DB	09dH
	DB	09eH
	DB	0b2H
	DB	0b1H
	DB	032H
	DB	075H
	DB	019H
	DB	03dH
	DB	0ffH
	DB	035H
	DB	08aH
	DB	07eH
	DB	06dH
	DB	054H
	DB	0c6H
	DB	080H
	DB	0c3H
	DB	0bdH
	DB	0dH
	DB	057H
	DB	0dfH
	DB	0f5H
	DB	024H
	DB	0a9H
	DB	03eH
	DB	0a8H
	DB	043H
	DB	0c9H
	DB	0d7H
	DB	079H
	DB	0d6H
	DB	0f6H
	DB	07cH
	DB	022H
	DB	0b9H
	DB	03H
	DB	0e0H
	DB	0fH
	DB	0ecH
	DB	0deH
	DB	07aH
	DB	094H
	DB	0b0H
	DB	0bcH
	DB	0dcH
	DB	0e8H
	DB	028H
	DB	050H
	DB	04eH
	DB	033H
	DB	0aH
	DB	04aH
	DB	0a7H
	DB	097H
	DB	060H
	DB	073H
	DB	01eH
	DB	00H
	DB	062H
	DB	044H
	DB	01aH
	DB	0b8H
	DB	038H
	DB	082H
	DB	064H
	DB	09fH
	DB	026H
	DB	041H
	DB	0adH
	DB	045H
	DB	046H
	DB	092H
	DB	027H
	DB	05eH
	DB	055H
	DB	02fH
	DB	08cH
	DB	0a3H
	DB	0a5H
	DB	07dH
	DB	069H
	DB	0d5H
	DB	095H
	DB	03bH
	DB	07H
	DB	058H
	DB	0b3H
	DB	040H
	DB	086H
	DB	0acH
	DB	01dH
	DB	0f7H
	DB	030H
	DB	037H
	DB	06bH
	DB	0e4H
	DB	088H
	DB	0d9H
	DB	0e7H
	DB	089H
	DB	0e1H
	DB	01bH
	DB	083H
	DB	049H
	DB	04cH
	DB	03fH
	DB	0f8H
	DB	0feH
	DB	08dH
	DB	053H
	DB	0aaH
	DB	090H
	DB	0caH
	DB	0d8H
	DB	085H
	DB	061H
	DB	020H
	DB	071H
	DB	067H
	DB	0a4H
	DB	02dH
	DB	02bH
	DB	09H
	DB	05bH
	DB	0cbH
	DB	09bH
	DB	025H
	DB	0d0H
	DB	0beH
	DB	0e5H
	DB	06cH
	DB	052H
	DB	059H
	DB	0a6H
	DB	074H
	DB	0d2H
	DB	0e6H
	DB	0f4H
	DB	0b4H
	DB	0c0H
	DB	0d1H
	DB	066H
	DB	0afH
	DB	0c2H
	DB	039H
	DB	04bH
	DB	063H
	DB	0b6H
_pi_inv	DB	0a5H
	DB	02dH
	DB	032H
	DB	08fH
	DB	0eH
	DB	030H
	DB	038H
	DB	0c0H
	DB	054H
	DB	0e6H
	DB	09eH
	DB	039H
	DB	055H
	DB	07eH
	DB	052H
	DB	091H
	DB	064H
	DB	03H
	DB	057H
	DB	05aH
	DB	01cH
	DB	060H
	DB	07H
	DB	018H
	DB	021H
	DB	072H
	DB	0a8H
	DB	0d1H
	DB	029H
	DB	0c6H
	DB	0a4H
	DB	03fH
	DB	0e0H
	DB	027H
	DB	08dH
	DB	0cH
	DB	082H
	DB	0eaH
	DB	0aeH
	DB	0b4H
	DB	09aH
	DB	063H
	DB	049H
	DB	0e5H
	DB	042H
	DB	0e4H
	DB	015H
	DB	0b7H
	DB	0c8H
	DB	06H
	DB	070H
	DB	09dH
	DB	041H
	DB	075H
	DB	019H
	DB	0c9H
	DB	0aaH
	DB	0fcH
	DB	04dH
	DB	0bfH
	DB	02aH
	DB	073H
	DB	084H
	DB	0d5H
	DB	0c3H
	DB	0afH
	DB	02bH
	DB	086H
	DB	0a7H
	DB	0b1H
	DB	0b2H
	DB	05bH
	DB	046H
	DB	0d3H
	DB	09fH
	DB	0fdH
	DB	0d4H
	DB	0fH
	DB	09cH
	DB	02fH
	DB	09bH
	DB	043H
	DB	0efH
	DB	0d9H
	DB	079H
	DB	0b6H
	DB	053H
	DB	07fH
	DB	0c1H
	DB	0f0H
	DB	023H
	DB	0e7H
	DB	025H
	DB	05eH
	DB	0b5H
	DB	01eH
	DB	0a2H
	DB	0dfH
	DB	0a6H
	DB	0feH
	DB	0acH
	DB	022H
	DB	0f9H
	DB	0e2H
	DB	04aH
	DB	0bcH
	DB	035H
	DB	0caH
	DB	0eeH
	DB	078H
	DB	05H
	DB	06bH
	DB	051H
	DB	0e1H
	DB	059H
	DB	0a3H
	DB	0f2H
	DB	071H
	DB	056H
	DB	011H
	DB	06aH
	DB	089H
	DB	094H
	DB	065H
	DB	08cH
	DB	0bbH
	DB	077H
	DB	03cH
	DB	07bH
	DB	028H
	DB	0abH
	DB	0d2H
	DB	031H
	DB	0deH
	DB	0c4H
	DB	05fH
	DB	0ccH
	DB	0cfH
	DB	076H
	DB	02cH
	DB	0b8H
	DB	0d8H
	DB	02eH
	DB	036H
	DB	0dbH
	DB	069H
	DB	0b3H
	DB	014H
	DB	095H
	DB	0beH
	DB	062H
	DB	0a1H
	DB	03bH
	DB	016H
	DB	066H
	DB	0e9H
	DB	05cH
	DB	06cH
	DB	06dH
	DB	0adH
	DB	037H
	DB	061H
	DB	04bH
	DB	0b9H
	DB	0e3H
	DB	0baH
	DB	0f1H
	DB	0a0H
	DB	085H
	DB	083H
	DB	0daH
	DB	047H
	DB	0c5H
	DB	0b0H
	DB	033H
	DB	0faH
	DB	096H
	DB	06fH
	DB	06eH
	DB	0c2H
	DB	0f6H
	DB	050H
	DB	0ffH
	DB	05dH
	DB	0a9H
	DB	08eH
	DB	017H
	DB	01bH
	DB	097H
	DB	07dH
	DB	0ecH
	DB	058H
	DB	0f7H
	DB	01fH
	DB	0fbH
	DB	07cH
	DB	09H
	DB	0dH
	DB	07aH
	DB	067H
	DB	045H
	DB	087H
	DB	0dcH
	DB	0e8H
	DB	04fH
	DB	01dH
	DB	04eH
	DB	04H
	DB	0ebH
	DB	0f8H
	DB	0f3H
	DB	03eH
	DB	03dH
	DB	0bdH
	DB	08aH
	DB	088H
	DB	0ddH
	DB	0cdH
	DB	0bH
	DB	013H
	DB	098H
	DB	02H
	DB	093H
	DB	080H
	DB	090H
	DB	0d0H
	DB	024H
	DB	034H
	DB	0cbH
	DB	0edH
	DB	0f4H
	DB	0ceH
	DB	099H
	DB	010H
	DB	044H
	DB	040H
	DB	092H
	DB	03aH
	DB	01H
	DB	026H
	DB	012H
	DB	01aH
	DB	048H
	DB	068H
	DB	0f5H
	DB	081H
	DB	08bH
	DB	0c7H
	DB	0d6H
	DB	020H
	DB	0aH
	DB	08H
	DB	00H
	DB	04cH
	DB	0d7H
	DB	074H
_mult_mod_poly DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	010H
	DB	020H
	DB	030H
	DB	040H
	DB	050H
	DB	060H
	DB	070H
	DB	080H
	DB	090H
	DB	0a0H
	DB	0b0H
	DB	0c0H
	DB	0d0H
	DB	0e0H
	DB	0f0H
	DB	0c3H
	DB	0d3H
	DB	0e3H
	DB	0f3H
	DB	083H
	DB	093H
	DB	0a3H
	DB	0b3H
	DB	043H
	DB	053H
	DB	063H
	DB	073H
	DB	03H
	DB	013H
	DB	023H
	DB	033H
	DB	045H
	DB	055H
	DB	065H
	DB	075H
	DB	05H
	DB	015H
	DB	025H
	DB	035H
	DB	0c5H
	DB	0d5H
	DB	0e5H
	DB	0f5H
	DB	085H
	DB	095H
	DB	0a5H
	DB	0b5H
	DB	086H
	DB	096H
	DB	0a6H
	DB	0b6H
	DB	0c6H
	DB	0d6H
	DB	0e6H
	DB	0f6H
	DB	06H
	DB	016H
	DB	026H
	DB	036H
	DB	046H
	DB	056H
	DB	066H
	DB	076H
	DB	08aH
	DB	09aH
	DB	0aaH
	DB	0baH
	DB	0caH
	DB	0daH
	DB	0eaH
	DB	0faH
	DB	0aH
	DB	01aH
	DB	02aH
	DB	03aH
	DB	04aH
	DB	05aH
	DB	06aH
	DB	07aH
	DB	049H
	DB	059H
	DB	069H
	DB	079H
	DB	09H
	DB	019H
	DB	029H
	DB	039H
	DB	0c9H
	DB	0d9H
	DB	0e9H
	DB	0f9H
	DB	089H
	DB	099H
	DB	0a9H
	DB	0b9H
	DB	0cfH
	DB	0dfH
	DB	0efH
	DB	0ffH
	DB	08fH
	DB	09fH
	DB	0afH
	DB	0bfH
	DB	04fH
	DB	05fH
	DB	06fH
	DB	07fH
	DB	0fH
	DB	01fH
	DB	02fH
	DB	03fH
	DB	0cH
	DB	01cH
	DB	02cH
	DB	03cH
	DB	04cH
	DB	05cH
	DB	06cH
	DB	07cH
	DB	08cH
	DB	09cH
	DB	0acH
	DB	0bcH
	DB	0ccH
	DB	0dcH
	DB	0ecH
	DB	0fcH
	DB	0d7H
	DB	0c7H
	DB	0f7H
	DB	0e7H
	DB	097H
	DB	087H
	DB	0b7H
	DB	0a7H
	DB	057H
	DB	047H
	DB	077H
	DB	067H
	DB	017H
	DB	07H
	DB	037H
	DB	027H
	DB	014H
	DB	04H
	DB	034H
	DB	024H
	DB	054H
	DB	044H
	DB	074H
	DB	064H
	DB	094H
	DB	084H
	DB	0b4H
	DB	0a4H
	DB	0d4H
	DB	0c4H
	DB	0f4H
	DB	0e4H
	DB	092H
	DB	082H
	DB	0b2H
	DB	0a2H
	DB	0d2H
	DB	0c2H
	DB	0f2H
	DB	0e2H
	DB	012H
	DB	02H
	DB	032H
	DB	022H
	DB	052H
	DB	042H
	DB	072H
	DB	062H
	DB	051H
	DB	041H
	DB	071H
	DB	061H
	DB	011H
	DB	01H
	DB	031H
	DB	021H
	DB	0d1H
	DB	0c1H
	DB	0f1H
	DB	0e1H
	DB	091H
	DB	081H
	DB	0b1H
	DB	0a1H
	DB	05dH
	DB	04dH
	DB	07dH
	DB	06dH
	DB	01dH
	DB	0dH
	DB	03dH
	DB	02dH
	DB	0ddH
	DB	0cdH
	DB	0fdH
	DB	0edH
	DB	09dH
	DB	08dH
	DB	0bdH
	DB	0adH
	DB	09eH
	DB	08eH
	DB	0beH
	DB	0aeH
	DB	0deH
	DB	0ceH
	DB	0feH
	DB	0eeH
	DB	01eH
	DB	0eH
	DB	03eH
	DB	02eH
	DB	05eH
	DB	04eH
	DB	07eH
	DB	06eH
	DB	018H
	DB	08H
	DB	038H
	DB	028H
	DB	058H
	DB	048H
	DB	078H
	DB	068H
	DB	098H
	DB	088H
	DB	0b8H
	DB	0a8H
	DB	0d8H
	DB	0c8H
	DB	0f8H
	DB	0e8H
	DB	0dbH
	DB	0cbH
	DB	0fbH
	DB	0ebH
	DB	09bH
	DB	08bH
	DB	0bbH
	DB	0abH
	DB	05bH
	DB	04bH
	DB	07bH
	DB	06bH
	DB	01bH
	DB	0bH
	DB	03bH
	DB	02bH
	DB	00H
	DB	020H
	DB	040H
	DB	060H
	DB	080H
	DB	0a0H
	DB	0c0H
	DB	0e0H
	DB	0c3H
	DB	0e3H
	DB	083H
	DB	0a3H
	DB	043H
	DB	063H
	DB	03H
	DB	023H
	DB	045H
	DB	065H
	DB	05H
	DB	025H
	DB	0c5H
	DB	0e5H
	DB	085H
	DB	0a5H
	DB	086H
	DB	0a6H
	DB	0c6H
	DB	0e6H
	DB	06H
	DB	026H
	DB	046H
	DB	066H
	DB	08aH
	DB	0aaH
	DB	0caH
	DB	0eaH
	DB	0aH
	DB	02aH
	DB	04aH
	DB	06aH
	DB	049H
	DB	069H
	DB	09H
	DB	029H
	DB	0c9H
	DB	0e9H
	DB	089H
	DB	0a9H
	DB	0cfH
	DB	0efH
	DB	08fH
	DB	0afH
	DB	04fH
	DB	06fH
	DB	0fH
	DB	02fH
	DB	0cH
	DB	02cH
	DB	04cH
	DB	06cH
	DB	08cH
	DB	0acH
	DB	0ccH
	DB	0ecH
	DB	0d7H
	DB	0f7H
	DB	097H
	DB	0b7H
	DB	057H
	DB	077H
	DB	017H
	DB	037H
	DB	014H
	DB	034H
	DB	054H
	DB	074H
	DB	094H
	DB	0b4H
	DB	0d4H
	DB	0f4H
	DB	092H
	DB	0b2H
	DB	0d2H
	DB	0f2H
	DB	012H
	DB	032H
	DB	052H
	DB	072H
	DB	051H
	DB	071H
	DB	011H
	DB	031H
	DB	0d1H
	DB	0f1H
	DB	091H
	DB	0b1H
	DB	05dH
	DB	07dH
	DB	01dH
	DB	03dH
	DB	0ddH
	DB	0fdH
	DB	09dH
	DB	0bdH
	DB	09eH
	DB	0beH
	DB	0deH
	DB	0feH
	DB	01eH
	DB	03eH
	DB	05eH
	DB	07eH
	DB	018H
	DB	038H
	DB	058H
	DB	078H
	DB	098H
	DB	0b8H
	DB	0d8H
	DB	0f8H
	DB	0dbH
	DB	0fbH
	DB	09bH
	DB	0bbH
	DB	05bH
	DB	07bH
	DB	01bH
	DB	03bH
	DB	06dH
	DB	04dH
	DB	02dH
	DB	0dH
	DB	0edH
	DB	0cdH
	DB	0adH
	DB	08dH
	DB	0aeH
	DB	08eH
	DB	0eeH
	DB	0ceH
	DB	02eH
	DB	0eH
	DB	06eH
	DB	04eH
	DB	028H
	DB	08H
	DB	068H
	DB	048H
	DB	0a8H
	DB	088H
	DB	0e8H
	DB	0c8H
	DB	0ebH
	DB	0cbH
	DB	0abH
	DB	08bH
	DB	06bH
	DB	04bH
	DB	02bH
	DB	0bH
	DB	0e7H
	DB	0c7H
	DB	0a7H
	DB	087H
	DB	067H
	DB	047H
	DB	027H
	DB	07H
	DB	024H
	DB	04H
	DB	064H
	DB	044H
	DB	0a4H
	DB	084H
	DB	0e4H
	DB	0c4H
	DB	0a2H
	DB	082H
	DB	0e2H
	DB	0c2H
	DB	022H
	DB	02H
	DB	062H
	DB	042H
	DB	061H
	DB	041H
	DB	021H
	DB	01H
	DB	0e1H
	DB	0c1H
	DB	0a1H
	DB	081H
	DB	0baH
	DB	09aH
	DB	0faH
	DB	0daH
	DB	03aH
	DB	01aH
	DB	07aH
	DB	05aH
	DB	079H
	DB	059H
	DB	039H
	DB	019H
	DB	0f9H
	DB	0d9H
	DB	0b9H
	DB	099H
	DB	0ffH
	DB	0dfH
	DB	0bfH
	DB	09fH
	DB	07fH
	DB	05fH
	DB	03fH
	DB	01fH
	DB	03cH
	DB	01cH
	DB	07cH
	DB	05cH
	DB	0bcH
	DB	09cH
	DB	0fcH
	DB	0dcH
	DB	030H
	DB	010H
	DB	070H
	DB	050H
	DB	0b0H
	DB	090H
	DB	0f0H
	DB	0d0H
	DB	0f3H
	DB	0d3H
	DB	0b3H
	DB	093H
	DB	073H
	DB	053H
	DB	033H
	DB	013H
	DB	075H
	DB	055H
	DB	035H
	DB	015H
	DB	0f5H
	DB	0d5H
	DB	0b5H
	DB	095H
	DB	0b6H
	DB	096H
	DB	0f6H
	DB	0d6H
	DB	036H
	DB	016H
	DB	076H
	DB	056H
	DB	00H
	DB	085H
	DB	0c9H
	DB	04cH
	DB	051H
	DB	0d4H
	DB	098H
	DB	01dH
	DB	0a2H
	DB	027H
	DB	06bH
	DB	0eeH
	DB	0f3H
	DB	076H
	DB	03aH
	DB	0bfH
	DB	087H
	DB	02H
	DB	04eH
	DB	0cbH
	DB	0d6H
	DB	053H
	DB	01fH
	DB	09aH
	DB	025H
	DB	0a0H
	DB	0ecH
	DB	069H
	DB	074H
	DB	0f1H
	DB	0bdH
	DB	038H
	DB	0cdH
	DB	048H
	DB	04H
	DB	081H
	DB	09cH
	DB	019H
	DB	055H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	0a6H
	DB	023H
	DB	03eH
	DB	0bbH
	DB	0f7H
	DB	072H
	DB	04aH
	DB	0cfH
	DB	083H
	DB	06H
	DB	01bH
	DB	09eH
	DB	0d2H
	DB	057H
	DB	0e8H
	DB	06dH
	DB	021H
	DB	0a4H
	DB	0b9H
	DB	03cH
	DB	070H
	DB	0f5H
	DB	059H
	DB	0dcH
	DB	090H
	DB	015H
	DB	08H
	DB	08dH
	DB	0c1H
	DB	044H
	DB	0fbH
	DB	07eH
	DB	032H
	DB	0b7H
	DB	0aaH
	DB	02fH
	DB	063H
	DB	0e6H
	DB	0deH
	DB	05bH
	DB	017H
	DB	092H
	DB	08fH
	DB	0aH
	DB	046H
	DB	0c3H
	DB	07cH
	DB	0f9H
	DB	0b5H
	DB	030H
	DB	02dH
	DB	0a8H
	DB	0e4H
	DB	061H
	DB	094H
	DB	011H
	DB	05dH
	DB	0d8H
	DB	0c5H
	DB	040H
	DB	0cH
	DB	089H
	DB	036H
	DB	0b3H
	DB	0ffH
	DB	07aH
	DB	067H
	DB	0e2H
	DB	0aeH
	DB	02bH
	DB	013H
	DB	096H
	DB	0daH
	DB	05fH
	DB	042H
	DB	0c7H
	DB	08bH
	DB	0eH
	DB	0b1H
	DB	034H
	DB	078H
	DB	0fdH
	DB	0e0H
	DB	065H
	DB	029H
	DB	0acH
	DB	0b2H
	DB	037H
	DB	07bH
	DB	0feH
	DB	0e3H
	DB	066H
	DB	02aH
	DB	0afH
	DB	010H
	DB	095H
	DB	0d9H
	DB	05cH
	DB	041H
	DB	0c4H
	DB	088H
	DB	0dH
	DB	035H
	DB	0b0H
	DB	0fcH
	DB	079H
	DB	064H
	DB	0e1H
	DB	0adH
	DB	028H
	DB	097H
	DB	012H
	DB	05eH
	DB	0dbH
	DB	0c6H
	DB	043H
	DB	0fH
	DB	08aH
	DB	07fH
	DB	0faH
	DB	0b6H
	DB	033H
	DB	02eH
	DB	0abH
	DB	0e7H
	DB	062H
	DB	0ddH
	DB	058H
	DB	014H
	DB	091H
	DB	08cH
	DB	09H
	DB	045H
	DB	0c0H
	DB	0f8H
	DB	07dH
	DB	031H
	DB	0b4H
	DB	0a9H
	DB	02cH
	DB	060H
	DB	0e5H
	DB	05aH
	DB	0dfH
	DB	093H
	DB	016H
	DB	0bH
	DB	08eH
	DB	0c2H
	DB	047H
	DB	0ebH
	DB	06eH
	DB	022H
	DB	0a7H
	DB	0baH
	DB	03fH
	DB	073H
	DB	0f6H
	DB	049H
	DB	0ccH
	DB	080H
	DB	05H
	DB	018H
	DB	09dH
	DB	0d1H
	DB	054H
	DB	06cH
	DB	0e9H
	DB	0a5H
	DB	020H
	DB	03dH
	DB	0b8H
	DB	0f4H
	DB	071H
	DB	0ceH
	DB	04bH
	DB	07H
	DB	082H
	DB	09fH
	DB	01aH
	DB	056H
	DB	0d3H
	DB	026H
	DB	0a3H
	DB	0efH
	DB	06aH
	DB	077H
	DB	0f2H
	DB	0beH
	DB	03bH
	DB	084H
	DB	01H
	DB	04dH
	DB	0c8H
	DB	0d5H
	DB	050H
	DB	01cH
	DB	099H
	DB	0a1H
	DB	024H
	DB	068H
	DB	0edH
	DB	0f0H
	DB	075H
	DB	039H
	DB	0bcH
	DB	03H
	DB	086H
	DB	0caH
	DB	04fH
	DB	052H
	DB	0d7H
	DB	09bH
	DB	01eH
	DB	00H
	DB	094H
	DB	0ebH
	DB	07fH
	DB	015H
	DB	081H
	DB	0feH
	DB	06aH
	DB	02aH
	DB	0beH
	DB	0c1H
	DB	055H
	DB	03fH
	DB	0abH
	DB	0d4H
	DB	040H
	DB	054H
	DB	0c0H
	DB	0bfH
	DB	02bH
	DB	041H
	DB	0d5H
	DB	0aaH
	DB	03eH
	DB	07eH
	DB	0eaH
	DB	095H
	DB	01H
	DB	06bH
	DB	0ffH
	DB	080H
	DB	014H
	DB	0a8H
	DB	03cH
	DB	043H
	DB	0d7H
	DB	0bdH
	DB	029H
	DB	056H
	DB	0c2H
	DB	082H
	DB	016H
	DB	069H
	DB	0fdH
	DB	097H
	DB	03H
	DB	07cH
	DB	0e8H
	DB	0fcH
	DB	068H
	DB	017H
	DB	083H
	DB	0e9H
	DB	07dH
	DB	02H
	DB	096H
	DB	0d6H
	DB	042H
	DB	03dH
	DB	0a9H
	DB	0c3H
	DB	057H
	DB	028H
	DB	0bcH
	DB	093H
	DB	07H
	DB	078H
	DB	0ecH
	DB	086H
	DB	012H
	DB	06dH
	DB	0f9H
	DB	0b9H
	DB	02dH
	DB	052H
	DB	0c6H
	DB	0acH
	DB	038H
	DB	047H
	DB	0d3H
	DB	0c7H
	DB	053H
	DB	02cH
	DB	0b8H
	DB	0d2H
	DB	046H
	DB	039H
	DB	0adH
	DB	0edH
	DB	079H
	DB	06H
	DB	092H
	DB	0f8H
	DB	06cH
	DB	013H
	DB	087H
	DB	03bH
	DB	0afH
	DB	0d0H
	DB	044H
	DB	02eH
	DB	0baH
	DB	0c5H
	DB	051H
	DB	011H
	DB	085H
	DB	0faH
	DB	06eH
	DB	04H
	DB	090H
	DB	0efH
	DB	07bH
	DB	06fH
	DB	0fbH
	DB	084H
	DB	010H
	DB	07aH
	DB	0eeH
	DB	091H
	DB	05H
	DB	045H
	DB	0d1H
	DB	0aeH
	DB	03aH
	DB	050H
	DB	0c4H
	DB	0bbH
	DB	02fH
	DB	0e5H
	DB	071H
	DB	0eH
	DB	09aH
	DB	0f0H
	DB	064H
	DB	01bH
	DB	08fH
	DB	0cfH
	DB	05bH
	DB	024H
	DB	0b0H
	DB	0daH
	DB	04eH
	DB	031H
	DB	0a5H
	DB	0b1H
	DB	025H
	DB	05aH
	DB	0ceH
	DB	0a4H
	DB	030H
	DB	04fH
	DB	0dbH
	DB	09bH
	DB	0fH
	DB	070H
	DB	0e4H
	DB	08eH
	DB	01aH
	DB	065H
	DB	0f1H
	DB	04dH
	DB	0d9H
	DB	0a6H
	DB	032H
	DB	058H
	DB	0ccH
	DB	0b3H
	DB	027H
	DB	067H
	DB	0f3H
	DB	08cH
	DB	018H
	DB	072H
	DB	0e6H
	DB	099H
	DB	0dH
	DB	019H
	DB	08dH
	DB	0f2H
	DB	066H
	DB	0cH
	DB	098H
	DB	0e7H
	DB	073H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	04cH
	DB	026H
	DB	0b2H
	DB	0cdH
	DB	059H
	DB	076H
	DB	0e2H
	DB	09dH
	DB	09H
	DB	063H
	DB	0f7H
	DB	088H
	DB	01cH
	DB	05cH
	DB	0c8H
	DB	0b7H
	DB	023H
	DB	049H
	DB	0ddH
	DB	0a2H
	DB	036H
	DB	022H
	DB	0b6H
	DB	0c9H
	DB	05dH
	DB	037H
	DB	0a3H
	DB	0dcH
	DB	048H
	DB	08H
	DB	09cH
	DB	0e3H
	DB	077H
	DB	01dH
	DB	089H
	DB	0f6H
	DB	062H
	DB	0deH
	DB	04aH
	DB	035H
	DB	0a1H
	DB	0cbH
	DB	05fH
	DB	020H
	DB	0b4H
	DB	0f4H
	DB	060H
	DB	01fH
	DB	08bH
	DB	0e1H
	DB	075H
	DB	0aH
	DB	09eH
	DB	08aH
	DB	01eH
	DB	061H
	DB	0f5H
	DB	09fH
	DB	0bH
	DB	074H
	DB	0e0H
	DB	0a0H
	DB	034H
	DB	04bH
	DB	0dfH
	DB	0b5H
	DB	021H
	DB	05eH
	DB	0caH
	DB	00H
	DB	0c0H
	DB	043H
	DB	083H
	DB	086H
	DB	046H
	DB	0c5H
	DB	05H
	DB	0cfH
	DB	0fH
	DB	08cH
	DB	04cH
	DB	049H
	DB	089H
	DB	0aH
	DB	0caH
	DB	05dH
	DB	09dH
	DB	01eH
	DB	0deH
	DB	0dbH
	DB	01bH
	DB	098H
	DB	058H
	DB	092H
	DB	052H
	DB	0d1H
	DB	011H
	DB	014H
	DB	0d4H
	DB	057H
	DB	097H
	DB	0baH
	DB	07aH
	DB	0f9H
	DB	039H
	DB	03cH
	DB	0fcH
	DB	07fH
	DB	0bfH
	DB	075H
	DB	0b5H
	DB	036H
	DB	0f6H
	DB	0f3H
	DB	033H
	DB	0b0H
	DB	070H
	DB	0e7H
	DB	027H
	DB	0a4H
	DB	064H
	DB	061H
	DB	0a1H
	DB	022H
	DB	0e2H
	DB	028H
	DB	0e8H
	DB	06bH
	DB	0abH
	DB	0aeH
	DB	06eH
	DB	0edH
	DB	02dH
	DB	0b7H
	DB	077H
	DB	0f4H
	DB	034H
	DB	031H
	DB	0f1H
	DB	072H
	DB	0b2H
	DB	078H
	DB	0b8H
	DB	03bH
	DB	0fbH
	DB	0feH
	DB	03eH
	DB	0bdH
	DB	07dH
	DB	0eaH
	DB	02aH
	DB	0a9H
	DB	069H
	DB	06cH
	DB	0acH
	DB	02fH
	DB	0efH
	DB	025H
	DB	0e5H
	DB	066H
	DB	0a6H
	DB	0a3H
	DB	063H
	DB	0e0H
	DB	020H
	DB	0dH
	DB	0cdH
	DB	04eH
	DB	08eH
	DB	08bH
	DB	04bH
	DB	0c8H
	DB	08H
	DB	0c2H
	DB	02H
	DB	081H
	DB	041H
	DB	044H
	DB	084H
	DB	07H
	DB	0c7H
	DB	050H
	DB	090H
	DB	013H
	DB	0d3H
	DB	0d6H
	DB	016H
	DB	095H
	DB	055H
	DB	09fH
	DB	05fH
	DB	0dcH
	DB	01cH
	DB	019H
	DB	0d9H
	DB	05aH
	DB	09aH
	DB	0adH
	DB	06dH
	DB	0eeH
	DB	02eH
	DB	02bH
	DB	0ebH
	DB	068H
	DB	0a8H
	DB	062H
	DB	0a2H
	DB	021H
	DB	0e1H
	DB	0e4H
	DB	024H
	DB	0a7H
	DB	067H
	DB	0f0H
	DB	030H
	DB	0b3H
	DB	073H
	DB	076H
	DB	0b6H
	DB	035H
	DB	0f5H
	DB	03fH
	DB	0ffH
	DB	07cH
	DB	0bcH
	DB	0b9H
	DB	079H
	DB	0faH
	DB	03aH
	DB	017H
	DB	0d7H
	DB	054H
	DB	094H
	DB	091H
	DB	051H
	DB	0d2H
	DB	012H
	DB	0d8H
	DB	018H
	DB	09bH
	DB	05bH
	DB	05eH
	DB	09eH
	DB	01dH
	DB	0ddH
	DB	04aH
	DB	08aH
	DB	09H
	DB	0c9H
	DB	0ccH
	DB	0cH
	DB	08fH
	DB	04fH
	DB	085H
	DB	045H
	DB	0c6H
	DB	06H
	DB	03H
	DB	0c3H
	DB	040H
	DB	080H
	DB	01aH
	DB	0daH
	DB	059H
	DB	099H
	DB	09cH
	DB	05cH
	DB	0dfH
	DB	01fH
	DB	0d5H
	DB	015H
	DB	096H
	DB	056H
	DB	053H
	DB	093H
	DB	010H
	DB	0d0H
	DB	047H
	DB	087H
	DB	04H
	DB	0c4H
	DB	0c1H
	DB	01H
	DB	082H
	DB	042H
	DB	088H
	DB	048H
	DB	0cbH
	DB	0bH
	DB	0eH
	DB	0ceH
	DB	04dH
	DB	08dH
	DB	0a0H
	DB	060H
	DB	0e3H
	DB	023H
	DB	026H
	DB	0e6H
	DB	065H
	DB	0a5H
	DB	06fH
	DB	0afH
	DB	02cH
	DB	0ecH
	DB	0e9H
	DB	029H
	DB	0aaH
	DB	06aH
	DB	0fdH
	DB	03dH
	DB	0beH
	DB	07eH
	DB	07bH
	DB	0bbH
	DB	038H
	DB	0f8H
	DB	032H
	DB	0f2H
	DB	071H
	DB	0b1H
	DB	0b4H
	DB	074H
	DB	0f7H
	DB	037H
	DB	00H
	DB	0c2H
	DB	047H
	DB	085H
	DB	08eH
	DB	04cH
	DB	0c9H
	DB	0bH
	DB	0dfH
	DB	01dH
	DB	098H
	DB	05aH
	DB	051H
	DB	093H
	DB	016H
	DB	0d4H
	DB	07dH
	DB	0bfH
	DB	03aH
	DB	0f8H
	DB	0f3H
	DB	031H
	DB	0b4H
	DB	076H
	DB	0a2H
	DB	060H
	DB	0e5H
	DB	027H
	DB	02cH
	DB	0eeH
	DB	06bH
	DB	0a9H
	DB	0faH
	DB	038H
	DB	0bdH
	DB	07fH
	DB	074H
	DB	0b6H
	DB	033H
	DB	0f1H
	DB	025H
	DB	0e7H
	DB	062H
	DB	0a0H
	DB	0abH
	DB	069H
	DB	0ecH
	DB	02eH
	DB	087H
	DB	045H
	DB	0c0H
	DB	02H
	DB	09H
	DB	0cbH
	DB	04eH
	DB	08cH
	DB	058H
	DB	09aH
	DB	01fH
	DB	0ddH
	DB	0d6H
	DB	014H
	DB	091H
	DB	053H
	DB	037H
	DB	0f5H
	DB	070H
	DB	0b2H
	DB	0b9H
	DB	07bH
	DB	0feH
	DB	03cH
	DB	0e8H
	DB	02aH
	DB	0afH
	DB	06dH
	DB	066H
	DB	0a4H
	DB	021H
	DB	0e3H
	DB	04aH
	DB	088H
	DB	0dH
	DB	0cfH
	DB	0c4H
	DB	06H
	DB	083H
	DB	041H
	DB	095H
	DB	057H
	DB	0d2H
	DB	010H
	DB	01bH
	DB	0d9H
	DB	05cH
	DB	09eH
	DB	0cdH
	DB	0fH
	DB	08aH
	DB	048H
	DB	043H
	DB	081H
	DB	04H
	DB	0c6H
	DB	012H
	DB	0d0H
	DB	055H
	DB	097H
	DB	09cH
	DB	05eH
	DB	0dbH
	DB	019H
	DB	0b0H
	DB	072H
	DB	0f7H
	DB	035H
	DB	03eH
	DB	0fcH
	DB	079H
	DB	0bbH
	DB	06fH
	DB	0adH
	DB	028H
	DB	0eaH
	DB	0e1H
	DB	023H
	DB	0a6H
	DB	064H
	DB	06eH
	DB	0acH
	DB	029H
	DB	0ebH
	DB	0e0H
	DB	022H
	DB	0a7H
	DB	065H
	DB	0b1H
	DB	073H
	DB	0f6H
	DB	034H
	DB	03fH
	DB	0fdH
	DB	078H
	DB	0baH
	DB	013H
	DB	0d1H
	DB	054H
	DB	096H
	DB	09dH
	DB	05fH
	DB	0daH
	DB	018H
	DB	0ccH
	DB	0eH
	DB	08bH
	DB	049H
	DB	042H
	DB	080H
	DB	05H
	DB	0c7H
	DB	094H
	DB	056H
	DB	0d3H
	DB	011H
	DB	01aH
	DB	0d8H
	DB	05dH
	DB	09fH
	DB	04bH
	DB	089H
	DB	0cH
	DB	0ceH
	DB	0c5H
	DB	07H
	DB	082H
	DB	040H
	DB	0e9H
	DB	02bH
	DB	0aeH
	DB	06cH
	DB	067H
	DB	0a5H
	DB	020H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	071H
	DB	0b3H
	DB	0b8H
	DB	07aH
	DB	0ffH
	DB	03dH
	DB	059H
	DB	09bH
	DB	01eH
	DB	0dcH
	DB	0d7H
	DB	015H
	DB	090H
	DB	052H
	DB	086H
	DB	044H
	DB	0c1H
	DB	03H
	DB	08H
	DB	0caH
	DB	04fH
	DB	08dH
	DB	024H
	DB	0e6H
	DB	063H
	DB	0a1H
	DB	0aaH
	DB	068H
	DB	0edH
	DB	02fH
	DB	0fbH
	DB	039H
	DB	0bcH
	DB	07eH
	DB	075H
	DB	0b7H
	DB	032H
	DB	0f0H
	DB	0a3H
	DB	061H
	DB	0e4H
	DB	026H
	DB	02dH
	DB	0efH
	DB	06aH
	DB	0a8H
	DB	07cH
	DB	0beH
	DB	03bH
	DB	0f9H
	DB	0f2H
	DB	030H
	DB	0b5H
	DB	077H
	DB	0deH
	DB	01cH
	DB	099H
	DB	05bH
	DB	050H
	DB	092H
	DB	017H
	DB	0d5H
	DB	01H
	DB	0c3H
	DB	046H
	DB	084H
	DB	08fH
	DB	04dH
	DB	0c8H
	DB	0aH
	DB	00H
	DB	0fbH
	DB	035H
	DB	0ceH
	DB	06aH
	DB	091H
	DB	05fH
	DB	0a4H
	DB	0d4H
	DB	02fH
	DB	0e1H
	DB	01aH
	DB	0beH
	DB	045H
	DB	08bH
	DB	070H
	DB	06bH
	DB	090H
	DB	05eH
	DB	0a5H
	DB	01H
	DB	0faH
	DB	034H
	DB	0cfH
	DB	0bfH
	DB	044H
	DB	08aH
	DB	071H
	DB	0d5H
	DB	02eH
	DB	0e0H
	DB	01bH
	DB	0d6H
	DB	02dH
	DB	0e3H
	DB	018H
	DB	0bcH
	DB	047H
	DB	089H
	DB	072H
	DB	02H
	DB	0f9H
	DB	037H
	DB	0ccH
	DB	068H
	DB	093H
	DB	05dH
	DB	0a6H
	DB	0bdH
	DB	046H
	DB	088H
	DB	073H
	DB	0d7H
	DB	02cH
	DB	0e2H
	DB	019H
	DB	069H
	DB	092H
	DB	05cH
	DB	0a7H
	DB	03H
	DB	0f8H
	DB	036H
	DB	0cdH
	DB	06fH
	DB	094H
	DB	05aH
	DB	0a1H
	DB	05H
	DB	0feH
	DB	030H
	DB	0cbH
	DB	0bbH
	DB	040H
	DB	08eH
	DB	075H
	DB	0d1H
	DB	02aH
	DB	0e4H
	DB	01fH
	DB	04H
	DB	0ffH
	DB	031H
	DB	0caH
	DB	06eH
	DB	095H
	DB	05bH
	DB	0a0H
	DB	0d0H
	DB	02bH
	DB	0e5H
	DB	01eH
	DB	0baH
	DB	041H
	DB	08fH
	DB	074H
	DB	0b9H
	DB	042H
	DB	08cH
	DB	077H
	DB	0d3H
	DB	028H
	DB	0e6H
	DB	01dH
	DB	06dH
	DB	096H
	DB	058H
	DB	0a3H
	DB	07H
	DB	0fcH
	DB	032H
	DB	0c9H
	DB	0d2H
	DB	029H
	DB	0e7H
	DB	01cH
	DB	0b8H
	DB	043H
	DB	08dH
	DB	076H
	DB	06H
	DB	0fdH
	DB	033H
	DB	0c8H
	DB	06cH
	DB	097H
	DB	059H
	DB	0a2H
	DB	0deH
	DB	025H
	DB	0ebH
	DB	010H
	DB	0b4H
	DB	04fH
	DB	081H
	DB	07aH
	DB	0aH
	DB	0f1H
	DB	03fH
	DB	0c4H
	DB	060H
	DB	09bH
	DB	055H
	DB	0aeH
	DB	0b5H
	DB	04eH
	DB	080H
	DB	07bH
	DB	0dfH
	DB	024H
	DB	0eaH
	DB	011H
	DB	061H
	DB	09aH
	DB	054H
	DB	0afH
	DB	0bH
	DB	0f0H
	DB	03eH
	DB	0c5H
	DB	08H
	DB	0f3H
	DB	03dH
	DB	0c6H
	DB	062H
	DB	099H
	DB	057H
	DB	0acH
	DB	0dcH
	DB	027H
	DB	0e9H
	DB	012H
	DB	0b6H
	DB	04dH
	DB	083H
	DB	078H
	DB	063H
	DB	098H
	DB	056H
	DB	0adH
	DB	09H
	DB	0f2H
	DB	03cH
	DB	0c7H
	DB	0b7H
	DB	04cH
	DB	082H
	DB	079H
	DB	0ddH
	DB	026H
	DB	0e8H
	DB	013H
	DB	0b1H
	DB	04aH
	DB	084H
	DB	07fH
	DB	0dbH
	DB	020H
	DB	0eeH
	DB	015H
	DB	065H
	DB	09eH
	DB	050H
	DB	0abH
	DB	0fH
	DB	0f4H
	DB	03aH
	DB	0c1H
	DB	0daH
	DB	021H
	DB	0efH
	DB	014H
	DB	0b0H
	DB	04bH
	DB	085H
	DB	07eH
	DB	0eH
	DB	0f5H
	DB	03bH
	DB	0c0H
	DB	064H
	DB	09fH
	DB	051H
	DB	0aaH
	DB	067H
	DB	09cH
	DB	052H
	DB	0a9H
	DB	0dH
	DB	0f6H
	DB	038H
	DB	0c3H
	DB	0b3H
	DB	048H
	DB	086H
	DB	07dH
	DB	0d9H
	DB	022H
	DB	0ecH
	DB	017H
	DB	0cH
	DB	0f7H
	DB	039H
	DB	0c2H
	DB	066H
	DB	09dH
	DB	053H
	DB	0a8H
	DB	0d8H
	DB	023H
	DB	0edH
	DB	016H
	DB	0b2H
	DB	049H
	DB	087H
	DB	07cH
_DATA	ENDS
PUBLIC	_S@4
; Function compile flags: /Ogsp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _S@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_S@4	PROC						; COMDAT

; 143  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 144  : 	unsigned long valtmp;
; 145  : 
; 146  : 	valtmp  = ((unsigned long)(pi[(block[0] >> 24) & 0xFF]) << 24);
; 147  : 	valtmp |= ((unsigned long)(pi[(block[0] >> 16) & 0xFF]) << 16);
; 148  : 	valtmp |= ((unsigned long)(pi[(block[0] >>  8) & 0xFF]) <<  8);
; 149  : 	valtmp |= ((unsigned long)(pi[(block[0] >>  0) & 0xFF]) <<  0);
; 150  : 	block[0] = valtmp;

  00005	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00008	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0000c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  00013	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00017	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[ecx]
  0001e	c1 e2 08	 shl	 edx, 8
  00021	0b d1		 or	 edx, ecx
  00023	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00027	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[ecx]
  0002e	c1 e2 08	 shl	 edx, 8
  00031	0b d1		 or	 edx, ecx
  00033	56		 push	 esi
  00034	8b 30		 mov	 esi, DWORD PTR [eax]
  00036	c1 e2 08	 shl	 edx, 8
  00039	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0003e	23 f1		 and	 esi, ecx
  00040	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  00047	0b d6		 or	 edx, esi
  00049	89 10		 mov	 DWORD PTR [eax], edx

; 151  : 
; 152  : 	valtmp  = ((unsigned long)(pi[(block[1] >> 24) & 0xFF]) << 24);
; 153  : 	valtmp |= ((unsigned long)(pi[(block[1] >> 16) & 0xFF]) << 16);
; 154  : 	valtmp |= ((unsigned long)(pi[(block[1] >>  8) & 0xFF]) <<  8);
; 155  : 	valtmp |=  (unsigned long)(pi[ block[1] & 0xFF]);
; 156  : 
; 157  : 	block[1] = valtmp;

  0004b	0f b6 50 07	 movzx	 edx, BYTE PTR [eax+7]
  0004f	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[edx]
  00056	0f b6 70 06	 movzx	 esi, BYTE PTR [eax+6]
  0005a	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  00061	c1 e2 08	 shl	 edx, 8
  00064	0b d6		 or	 edx, esi
  00066	0f b6 70 05	 movzx	 esi, BYTE PTR [eax+5]
  0006a	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  00071	c1 e2 08	 shl	 edx, 8
  00074	0b d6		 or	 edx, esi
  00076	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00079	23 f1		 and	 esi, ecx
  0007b	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  00082	c1 e2 08	 shl	 edx, 8
  00085	0b d6		 or	 edx, esi

; 158  : 
; 159  : 	valtmp  = ((unsigned long)(pi[(block[2] >> 24) & 0xFF]) << 24);
; 160  : 	valtmp |= ((unsigned long)(pi[(block[2] >> 16) & 0xFF]) << 16);
; 161  : 	valtmp |= ((unsigned long)(pi[(block[2] >>  8) & 0xFF]) <<  8);
; 162  : 	valtmp |=  (unsigned long)(pi[ block[2] & 0xFF]);
; 163  : 
; 164  : 	block[2] = valtmp;

  00087	0f b6 70 0a	 movzx	 esi, BYTE PTR [eax+10]
  0008b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0008e	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  00095	0f b6 50 0b	 movzx	 edx, BYTE PTR [eax+11]
  00099	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[edx]
  000a0	c1 e2 08	 shl	 edx, 8
  000a3	0b d6		 or	 edx, esi
  000a5	0f b6 70 09	 movzx	 esi, BYTE PTR [eax+9]
  000a9	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  000b0	c1 e2 08	 shl	 edx, 8
  000b3	0b d6		 or	 edx, esi
  000b5	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000b8	23 f1		 and	 esi, ecx
  000ba	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  000c1	c1 e2 08	 shl	 edx, 8
  000c4	0b d6		 or	 edx, esi

; 165  : 
; 166  : 	valtmp  = ((unsigned long)(pi[(block[3] >> 24) & 0xFF]) << 24);
; 167  : 	valtmp |= ((unsigned long)(pi[(block[3] >> 16) & 0xFF]) << 16);
; 168  : 	valtmp |= ((unsigned long)(pi[(block[3] >>  8) & 0xFF]) <<  8);
; 169  : 	valtmp |=  (unsigned long)(pi[ block[3] & 0xFF]);
; 170  : 
; 171  : 	block[3] = valtmp;

  000c6	0f b6 70 0e	 movzx	 esi, BYTE PTR [eax+14]
  000ca	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000cd	0f b6 50 0f	 movzx	 edx, BYTE PTR [eax+15]
  000d1	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[edx]
  000d8	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  000df	c1 e2 08	 shl	 edx, 8
  000e2	0b d6		 or	 edx, esi
  000e4	0f b6 70 0d	 movzx	 esi, BYTE PTR [eax+13]
  000e8	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi[esi]
  000ef	c1 e2 08	 shl	 edx, 8
  000f2	0b d6		 or	 edx, esi
  000f4	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  000f7	23 f1		 and	 esi, ecx
  000f9	0f b6 8e 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[esi]
  00100	c1 e2 08	 shl	 edx, 8
  00103	0b d1		 or	 edx, ecx
  00105	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00108	5e		 pop	 esi

; 172  : }

  00109	5d		 pop	 ebp
  0010a	c2 04 00	 ret	 4
_S@4	ENDP
_TEXT	ENDS
PUBLIC	_S_inv@4
; Function compile flags: /Ogsp
;	COMDAT _S_inv@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_S_inv@4 PROC						; COMDAT

; 184  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 185  : 	unsigned long valtmp;
; 186  : 
; 187  : 	valtmp  = ((unsigned long)(pi_inv[(block[0] >> 24) & 0xFF]) << 24);
; 188  : 	valtmp |= ((unsigned long)(pi_inv[(block[0] >> 16) & 0xFF]) << 16);
; 189  : 	valtmp |= ((unsigned long)(pi_inv[(block[0] >>  8) & 0xFF]) <<  8);
; 190  : 	valtmp |=  (unsigned long)(pi_inv[ block[0] & 0xFF]);
; 191  : 
; 192  : 	block[0] = valtmp;

  00005	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00008	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0000c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  00013	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00017	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[ecx]
  0001e	c1 e2 08	 shl	 edx, 8
  00021	0b d1		 or	 edx, ecx
  00023	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00027	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[ecx]
  0002e	c1 e2 08	 shl	 edx, 8
  00031	0b d1		 or	 edx, ecx
  00033	56		 push	 esi
  00034	8b 30		 mov	 esi, DWORD PTR [eax]
  00036	c1 e2 08	 shl	 edx, 8
  00039	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  0003e	23 f1		 and	 esi, ecx
  00040	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  00047	0b d6		 or	 edx, esi
  00049	89 10		 mov	 DWORD PTR [eax], edx

; 193  : 
; 194  : 	valtmp  = ((unsigned long)(pi_inv[(block[1] >> 24) & 0xFF]) << 24);
; 195  : 	valtmp |= ((unsigned long)(pi_inv[(block[1] >> 16) & 0xFF]) << 16);
; 196  : 	valtmp |= ((unsigned long)(pi_inv[(block[1] >>  8) & 0xFF]) <<  8);
; 197  : 	valtmp |=  (unsigned long)(pi_inv[block[1] & 0xFF]);
; 198  : 
; 199  : 	block[1] = valtmp;

  0004b	0f b6 50 07	 movzx	 edx, BYTE PTR [eax+7]
  0004f	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[edx]
  00056	0f b6 70 06	 movzx	 esi, BYTE PTR [eax+6]
  0005a	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  00061	c1 e2 08	 shl	 edx, 8
  00064	0b d6		 or	 edx, esi
  00066	0f b6 70 05	 movzx	 esi, BYTE PTR [eax+5]
  0006a	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  00071	c1 e2 08	 shl	 edx, 8
  00074	0b d6		 or	 edx, esi
  00076	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00079	23 f1		 and	 esi, ecx
  0007b	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  00082	c1 e2 08	 shl	 edx, 8
  00085	0b d6		 or	 edx, esi

; 200  : 
; 201  : 	valtmp  = ((unsigned long)(pi_inv[(block[2] >> 24) & 0xFF]) << 24);
; 202  : 	valtmp |= ((unsigned long)(pi_inv[(block[2] >> 16) & 0xFF]) << 16);
; 203  : 	valtmp |= ((unsigned long)(pi_inv[(block[2] >>  8) & 0xFF]) <<  8);
; 204  : 	valtmp |=  (unsigned long)(pi_inv[block[2] & 0xFF]);
; 205  : 	
; 206  : 	block[2] = valtmp;

  00087	0f b6 70 0a	 movzx	 esi, BYTE PTR [eax+10]
  0008b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0008e	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  00095	0f b6 50 0b	 movzx	 edx, BYTE PTR [eax+11]
  00099	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[edx]
  000a0	c1 e2 08	 shl	 edx, 8
  000a3	0b d6		 or	 edx, esi
  000a5	0f b6 70 09	 movzx	 esi, BYTE PTR [eax+9]
  000a9	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  000b0	c1 e2 08	 shl	 edx, 8
  000b3	0b d6		 or	 edx, esi
  000b5	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000b8	23 f1		 and	 esi, ecx
  000ba	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  000c1	c1 e2 08	 shl	 edx, 8
  000c4	0b d6		 or	 edx, esi

; 207  : 
; 208  : 	valtmp  = ((unsigned long)(pi_inv[(block[3] >> 24) & 0xFF]) << 24);
; 209  : 	valtmp |= ((unsigned long)(pi_inv[(block[3] >> 16) & 0xFF]) << 16);
; 210  : 	valtmp |= ((unsigned long)(pi_inv[(block[3] >>  8) & 0xFF]) <<  8);
; 211  : 	valtmp |=  (unsigned long)(pi_inv[ block[3] & 0xFF]);
; 212  : 
; 213  : 	block[3] = valtmp;

  000c6	0f b6 70 0e	 movzx	 esi, BYTE PTR [eax+14]
  000ca	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000cd	0f b6 50 0f	 movzx	 edx, BYTE PTR [eax+15]
  000d1	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[edx]
  000d8	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  000df	c1 e2 08	 shl	 edx, 8
  000e2	0b d6		 or	 edx, esi
  000e4	0f b6 70 0d	 movzx	 esi, BYTE PTR [eax+13]
  000e8	0f b6 b6 00 00
	00 00		 movzx	 esi, BYTE PTR _pi_inv[esi]
  000ef	c1 e2 08	 shl	 edx, 8
  000f2	0b d6		 or	 edx, esi
  000f4	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  000f7	23 f1		 and	 esi, ecx
  000f9	0f b6 8e 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[esi]
  00100	c1 e2 08	 shl	 edx, 8
  00103	0b d1		 or	 edx, ecx
  00105	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00108	5e		 pop	 esi

; 214  : }

  00109	5d		 pop	 ebp
  0010a	c2 04 00	 ret	 4
_S_inv@4 ENDP
_TEXT	ENDS
PUBLIC	_ll@4
; Function compile flags: /Ogsp
;	COMDAT _ll@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_ll@4	PROC						; COMDAT

; 225  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 226  : 	unsigned char val;
; 227  : 
; 228  : 	val  =  mult_mod_poly[4][(block[0] >> 24) & 0xFF];
; 229  : 	val ^=  mult_mod_poly[2][(block[0] >> 16) & 0xFF];
; 230  : 	val ^=  mult_mod_poly[3][(block[0] >>  8) & 0xFF];
; 231  : 	val ^=  mult_mod_poly[1][(block[0] >>  0) & 0xFF];
; 232  : 
; 233  : 	val ^=  mult_mod_poly[6][(block[1] >> 24) & 0xFF];
; 234  : 	val ^=  mult_mod_poly[5][(block[1] >> 16) & 0xFF];
; 235  : 	val ^=  mult_mod_poly[0][(block[1] >>  8) & 0xFF];
; 236  : 	val ^=  mult_mod_poly[7][(block[1] >>  0) & 0xFF];
; 237  : 
; 238  : 	val ^=  mult_mod_poly[0][(block[2] >> 24) & 0xFF];
; 239  : 	val ^=  mult_mod_poly[5][(block[2] >> 16) & 0xFF];
; 240  : 	val ^=  mult_mod_poly[6][(block[2] >>  8) & 0xFF];
; 241  : 	val ^=  mult_mod_poly[1][(block[2] >>  0) & 0xFF];

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	56		 push	 esi
  0000c	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000f	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00014	23 c2		 and	 eax, edx
  00016	8a 80 00 01 00
	00		 mov	 al, BYTE PTR _mult_mod_poly[eax+256]
  0001c	23 f2		 and	 esi, edx
  0001e	32 86 00 07 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1792]

; 242  : 
; 243  : 	val ^=  mult_mod_poly[3][(block[3] >> 24) & 0xFF];
; 244  : 	val ^=  mult_mod_poly[2][(block[3] >> 16) & 0xFF];
; 245  : 	val ^=  mult_mod_poly[4][(block[3] >>  8) & 0xFF];
; 246  : 	val ^=  mult_mod_poly[0][(block[3] >>  0) & 0xFF];

  00024	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00027	23 f2		 and	 esi, edx

; 247  : 
; 248  : 	return(val);

  00029	32 86 00 00 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi]
  0002f	0f b6 71 0f	 movzx	 esi, BYTE PTR [ecx+15]
  00033	32 86 00 03 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+768]
  00039	0f b6 71 0e	 movzx	 esi, BYTE PTR [ecx+14]
  0003d	32 86 00 02 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+512]
  00043	0f b6 71 0a	 movzx	 esi, BYTE PTR [ecx+10]
  00047	32 86 00 05 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1280]
  0004d	0f b6 71 0d	 movzx	 esi, BYTE PTR [ecx+13]
  00051	32 86 00 04 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1024]
  00057	0f b6 71 09	 movzx	 esi, BYTE PTR [ecx+9]
  0005b	32 86 00 06 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1536]
  00061	0f b6 71 06	 movzx	 esi, BYTE PTR [ecx+6]
  00065	32 86 00 05 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1280]
  0006b	0f b6 71 07	 movzx	 esi, BYTE PTR [ecx+7]
  0006f	32 86 00 06 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1536]
  00075	0f b6 71 0b	 movzx	 esi, BYTE PTR [ecx+11]
  00079	32 86 00 00 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi]
  0007f	0f b6 71 01	 movzx	 esi, BYTE PTR [ecx+1]
  00083	32 86 00 03 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+768]
  00089	0f b6 71 02	 movzx	 esi, BYTE PTR [ecx+2]
  0008d	32 86 00 02 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+512]
  00093	0f b6 71 03	 movzx	 esi, BYTE PTR [ecx+3]
  00097	32 86 00 04 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi+1024]
  0009d	0f b6 71 05	 movzx	 esi, BYTE PTR [ecx+5]
  000a1	32 86 00 00 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[esi]
  000a7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000a9	23 ca		 and	 ecx, edx
  000ab	32 81 00 01 00
	00		 xor	 al, BYTE PTR _mult_mod_poly[ecx+256]
  000b1	5e		 pop	 esi

; 249  : }

  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_ll@4	ENDP
_TEXT	ENDS
PUBLIC	_R@4
; Function compile flags: /Ogsp
;	COMDAT _R@4
_TEXT	SEGMENT
_valtmp$ = -20						; size = 16
tv161 = -4						; size = 4
tv170 = 8						; size = 4
_block$ = 8						; size = 4
_R@4	PROC						; COMDAT

; 260  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 14	 sub	 esp, 20			; 00000014H
  00008	53		 push	 ebx
  00009	56		 push	 esi

; 261  : 	unsigned long valtmp[4];
; 262  : 	unsigned char val;
; 263  : 
; 264  : 	valtmp[0] = block[0];

  0000a	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]

; 265  : 	valtmp[1] = block[1];
; 266  : 	valtmp[2] = block[2];

  0000f	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00012	89 45 ec	 mov	 DWORD PTR _valtmp$[ebp], eax

; 267  : 	valtmp[3] = block[3];

  00015	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00018	57		 push	 edi
  00019	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0001c	89 45 f8	 mov	 DWORD PTR _valtmp$[ebp+12], eax

; 268  : 	val = ll(valtmp);

  0001f	8d 45 ec	 lea	 eax, DWORD PTR _valtmp$[ebp]
  00022	50		 push	 eax
  00023	89 7d f0	 mov	 DWORD PTR _valtmp$[ebp+4], edi
  00026	89 5d f4	 mov	 DWORD PTR _valtmp$[ebp+8], ebx
  00029	e8 00 00 00 00	 call	 _ll@4

; 269  : 
; 270  : 	//block[1] >>= 8;
; 271  : 	//block[1]  |= (((block[0]) & 0xFF) << 56);
; 272  : 	block[3] >>= 8;

  0002e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00031	c1 e9 08	 shr	 ecx, 8

; 273  : 	block[3] |= (block[2] & 0xFF) << 24;

  00034	8b d3		 mov	 edx, ebx
  00036	c1 e2 18	 shl	 edx, 24			; 00000018H
  00039	0b ca		 or	 ecx, edx
  0003b	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 274  : 	block[2] >>= 8;
; 275  : 	block[2] |= (block[1] & 0xFF) << 24;

  0003e	8b cf		 mov	 ecx, edi
  00040	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00043	c1 eb 08	 shr	 ebx, 8
  00046	0b d9		 or	 ebx, ecx

; 276  : 	
; 277  : 
; 278  : //	block[0] >>= 8;
; 279  : //	block[0]  |= ((unsigned long)(val) << 56);
; 280  : 	block[1] >>= 8;
; 281  : 	block[1] |= (block[0] & 0xFF) << 24;

  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	8b d1		 mov	 edx, ecx

; 282  : 	block[0] >>= 8;
; 283  : 	block[0] |= ((unsigned long int)(val & 0xFF) << 24);

  0004c	0f b6 c0	 movzx	 eax, al
  0004f	c1 ef 08	 shr	 edi, 8
  00052	c1 e2 18	 shl	 edx, 24			; 00000018H
  00055	0b fa		 or	 edi, edx
  00057	c1 e0 18	 shl	 eax, 24			; 00000018H
  0005a	c1 e9 08	 shr	 ecx, 8
  0005d	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00060	0b c1		 or	 eax, ecx
  00062	5f		 pop	 edi
  00063	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00066	89 06		 mov	 DWORD PTR [esi], eax
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 284  : 
; 285  : }

  0006a	c9		 leave
  0006b	c2 04 00	 ret	 4
_R@4	ENDP
_TEXT	ENDS
PUBLIC	_R_inv@4
; Function compile flags: /Ogsp
;	COMDAT _R_inv@4
_TEXT	SEGMENT
_valtmp$ = -16						; size = 16
_block$ = 8						; size = 4
_R_inv@4 PROC						; COMDAT

; 297  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H
  00008	53		 push	 ebx
  00009	56		 push	 esi

; 298  : 	unsigned long valtmp[4];
; 299  : 	unsigned char val;
; 300  : 
; 301  : 	//valtmp[0]  = (block[0] << 8);
; 302  : 	//valtmp[0] |= ((block[1] >> 56) & 0xFF);
; 303  : 	valtmp[0] = block[0] << 8;
; 304  : 	valtmp[0] |= (block[1] >> 24) & 0xFF;

  0000a	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  0000d	0f b6 5e 07	 movzx	 ebx, BYTE PTR [esi+7]
  00011	8b 06		 mov	 eax, DWORD PTR [esi]

; 305  : 	valtmp[1] = block[1] << 8;

  00013	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00016	c1 e0 08	 shl	 eax, 8
  00019	0b d8		 or	 ebx, eax

; 306  : 	valtmp[1] |= (block[2] >> 24) & 0xFF;

  0001b	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  0001f	c1 e1 08	 shl	 ecx, 8
  00022	0b c1		 or	 eax, ecx

; 307  : 
; 308  : 	//valtmp[1]  = (block[1] << 8);
; 309  : 	//valtmp[1] |= ((block[0] >> 56) & 0xFF);
; 310  : 
; 311  : 	valtmp[2] = block[2] << 8;

  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	89 45 f4	 mov	 DWORD PTR _valtmp$[ebp+4], eax

; 312  : 	valtmp[2] |= (block[3] >> 24) & 0xFF;

  0002a	0f b6 46 0f	 movzx	 eax, BYTE PTR [esi+15]
  0002e	c1 e1 08	 shl	 ecx, 8
  00031	0b c1		 or	 eax, ecx
  00033	57		 push	 edi

; 313  : 	valtmp[3] = block[3] << 8;
; 314  : 	valtmp[3] |= (block[0] >> 24) & 0xFF;

  00034	0f b6 7e 03	 movzx	 edi, BYTE PTR [esi+3]
  00038	89 45 f8	 mov	 DWORD PTR _valtmp$[ebp+8], eax
  0003b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003e	c1 e0 08	 shl	 eax, 8
  00041	0b f8		 or	 edi, eax

; 315  : 
; 316  : 	val = ll(valtmp);

  00043	8d 45 f0	 lea	 eax, DWORD PTR _valtmp$[ebp]
  00046	50		 push	 eax
  00047	89 5d f0	 mov	 DWORD PTR _valtmp$[ebp], ebx
  0004a	89 7d fc	 mov	 DWORD PTR _valtmp$[ebp+12], edi
  0004d	e8 00 00 00 00	 call	 _ll@4

; 317  : 
; 318  : 	block[0]  = valtmp[0];
; 319  : 	block[1] = valtmp[1];

  00052	8b 4d f4	 mov	 ecx, DWORD PTR _valtmp$[ebp+4]

; 320  : 	block[2]  = (valtmp[2] & 0xFFFFFFFFL);
; 321  : 	block[3] = valtmp[3] & 0xFFFFFF00L;
; 322  : 	block[3] |= val;

  00055	0f b6 c0	 movzx	 eax, al
  00058	81 e7 00 ff ff
	ff		 and	 edi, -256		; ffffff00H
  0005e	0b f8		 or	 edi, eax
  00060	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _valtmp$[ebp+8]
  00066	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00069	5f		 pop	 edi
  0006a	89 1e		 mov	 DWORD PTR [esi], ebx
  0006c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 323  : }

  00071	c9		 leave
  00072	c2 04 00	 ret	 4
_R_inv@4 ENDP
_TEXT	ENDS
PUBLIC	_L@4
; Function compile flags: /Ogsp
;	COMDAT _L@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_L@4	PROC						; COMDAT

; 334  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 335  : 	R(block); R(block); R(block); R(block);

  00006	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _R@4
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _R@4
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _R@4
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _R@4

; 336  : 	R(block); R(block); R(block); R(block);

  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _R@4
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _R@4
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _R@4
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _R@4

; 337  : 	R(block); R(block); R(block); R(block);

  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _R@4
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _R@4
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _R@4
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _R@4

; 338  : 	R(block); R(block); R(block); R(block);

  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 _R@4
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 _R@4
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _R@4
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _R@4
  00069	5e		 pop	 esi

; 339  : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_L@4	ENDP
_TEXT	ENDS
PUBLIC	_L_inv@4
; Function compile flags: /Ogsp
;	COMDAT _L_inv@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_L_inv@4 PROC						; COMDAT

; 350  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	56		 push	 esi

; 351  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00006	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _R_inv@4
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _R_inv@4
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 _R_inv@4
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _R_inv@4

; 352  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _R_inv@4
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _R_inv@4
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _R_inv@4
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 _R_inv@4

; 353  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _R_inv@4
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _R_inv@4
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 _R_inv@4
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 _R_inv@4

; 354  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 _R_inv@4
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 _R_inv@4
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _R_inv@4
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 _R_inv@4
  00069	5e		 pop	 esi

; 355  : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_L_inv@4 ENDP
_TEXT	ENDS
PUBLIC	_F@12
; Function compile flags: /Ogsp
;	COMDAT _F@12
_TEXT	SEGMENT
_tmpblock$ = -16					; size = 16
_k$ = 8							; size = 4
_block1$ = 12						; size = 4
_block0$ = 16						; size = 4
_F@12	PROC						; COMDAT

; 368  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 369  : 	unsigned long tmpblock[4];
; 370  : 
; 371  : 	/* Bitwise xor of k with block2 */
; 372  : 	tmpblock[0] = (block1[0] ^ k[0]);

  00008	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	8b 75 0c	 mov	 esi, DWORD PTR _block1$[ebp]
  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	33 d1		 xor	 edx, ecx

; 373  : 	tmpblock[1] = (block1[1] ^ k[1]);

  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	33 4e 04	 xor	 ecx, DWORD PTR [esi+4]
  0001c	57		 push	 edi
  0001d	89 4d f4	 mov	 DWORD PTR _tmpblock$[ebp+4], ecx

; 374  : 	tmpblock[2] = (block1[2] ^ k[2]);

  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 375  : 	tmpblock[3] = (block1[3] ^ k[3]);

  00023	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00026	33 46 0c	 xor	 eax, DWORD PTR [esi+12]
  00029	33 4e 08	 xor	 ecx, DWORD PTR [esi+8]
  0002c	89 45 fc	 mov	 DWORD PTR _tmpblock$[ebp+12], eax

; 376  : 
; 377  : 	/* Apply S conversion function  */
; 378  : 	S(tmpblock);

  0002f	8d 45 f0	 lea	 eax, DWORD PTR _tmpblock$[ebp]
  00032	50		 push	 eax
  00033	89 55 f0	 mov	 DWORD PTR _tmpblock$[ebp], edx
  00036	89 4d f8	 mov	 DWORD PTR _tmpblock$[ebp+8], ecx
  00039	e8 00 00 00 00	 call	 _S@4

; 379  : 
; 380  : 	/* Apply L conversion function  */
; 381  : 	L(tmpblock);

  0003e	8d 45 f0	 lea	 eax, DWORD PTR _tmpblock$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _L@4

; 382  : 
; 383  : 	/* Add a0 to the the result     */
; 384  : 	tmpblock[0] ^= block0[0];

  00047	8b 45 10	 mov	 eax, DWORD PTR _block0$[ebp]

; 385  : 	tmpblock[1] ^= block0[1];
; 386  : 	tmpblock[2] ^= block0[2];
; 387  : 	tmpblock[3] ^= block0[3];

  0004a	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _tmpblock$[ebp]
  00050	33 08		 xor	 ecx, DWORD PTR [eax]
  00052	8b 55 f4	 mov	 edx, DWORD PTR _tmpblock$[ebp+4]
  00055	33 50 04	 xor	 edx, DWORD PTR [eax+4]
  00058	8b 7d f8	 mov	 edi, DWORD PTR _tmpblock$[ebp+8]
  0005b	33 78 08	 xor	 edi, DWORD PTR [eax+8]
  0005e	31 5d fc	 xor	 DWORD PTR _tmpblock$[ebp+12], ebx

; 388  : 
; 389  : 	/* Update the results           */
; 390  : 	block0[0] = block1[0];

  00061	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00063	89 18		 mov	 DWORD PTR [eax], ebx

; 391  : 	block0[1] = block1[1];

  00065	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00068	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 392  : 	block0[2] = block1[2];

  0006b	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0006e	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 393  : 	block0[3] = block1[3];

  00071	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00074	89 58 0c	 mov	 DWORD PTR [eax+12], ebx

; 394  : 
; 395  : 	block1[0] = tmpblock[0];
; 396  : 	block1[1] = tmpblock[1];
; 397  : 	block1[2] = tmpblock[2];
; 398  : 	block1[3] = tmpblock[3];

  00077	8b 45 fc	 mov	 eax, DWORD PTR _tmpblock$[ebp+12]
  0007a	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0007d	5f		 pop	 edi
  0007e	89 0e		 mov	 DWORD PTR [esi], ecx
  00080	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00083	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 399  : }

  00088	c9		 leave
  00089	c2 0c 00	 ret	 12			; 0000000cH
_F@12	ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_xor_ks@16
; Function compile flags: /Ogsp
;	COMDAT _grasshopper_xor_ks@16
_TEXT	SEGMENT
_ks$ = 8						; size = 4
_out_ks$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_grasshopper_xor_ks@16 PROC				; COMDAT

; 610  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 611  : 	unsigned long i;
; 612  : 	if (!len)

  00005	83 7d 14 00	 cmp	 DWORD PTR _len$[ebp], 0
  00009	0f 84 04 03 00
	00		 je	 $LN1@grasshoppe

; 613  : 		return;
; 614  : 
; 615  : 	out_ks->y000 = ks->y000 ^ in[0]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];

  0000f	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00012	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00018	56		 push	 esi
  00019	8b 30		 mov	 esi, DWORD PTR [eax]
  0001b	33 32		 xor	 esi, DWORD PTR [edx]
  0001d	57		 push	 edi
  0001e	89 31		 mov	 DWORD PTR [ecx], esi
  00020	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00023	33 32		 xor	 esi, DWORD PTR [edx]
  00025	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00028	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002b	33 32		 xor	 esi, DWORD PTR [edx]
  0002d	89 71 08	 mov	 DWORD PTR [ecx+8], esi
  00030	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00033	33 32		 xor	 esi, DWORD PTR [edx]
  00035	89 71 0c	 mov	 DWORD PTR [ecx+12], esi

; 616  : 	out_ks->y100 = ks->y100 ^ in[0]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];

  00038	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  0003b	33 32		 xor	 esi, DWORD PTR [edx]
  0003d	89 71 10	 mov	 DWORD PTR [ecx+16], esi
  00040	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00043	33 32		 xor	 esi, DWORD PTR [edx]
  00045	89 71 14	 mov	 DWORD PTR [ecx+20], esi
  00048	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  0004b	33 32		 xor	 esi, DWORD PTR [edx]
  0004d	89 71 18	 mov	 DWORD PTR [ecx+24], esi
  00050	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00053	33 32		 xor	 esi, DWORD PTR [edx]
  00055	89 71 1c	 mov	 DWORD PTR [ecx+28], esi

; 617  : 	out_ks->y200 = ks->y200 ^ in[0]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];

  00058	8b 70 20	 mov	 esi, DWORD PTR [eax+32]
  0005b	33 32		 xor	 esi, DWORD PTR [edx]
  0005d	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  00060	8b 70 24	 mov	 esi, DWORD PTR [eax+36]
  00063	33 32		 xor	 esi, DWORD PTR [edx]
  00065	89 71 24	 mov	 DWORD PTR [ecx+36], esi
  00068	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  0006b	33 32		 xor	 esi, DWORD PTR [edx]
  0006d	89 71 28	 mov	 DWORD PTR [ecx+40], esi
  00070	8b 70 2c	 mov	 esi, DWORD PTR [eax+44]
  00073	33 32		 xor	 esi, DWORD PTR [edx]
  00075	89 71 2c	 mov	 DWORD PTR [ecx+44], esi

; 618  : 	out_ks->y300 = ks->y300 ^ in[0]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];

  00078	8b 70 30	 mov	 esi, DWORD PTR [eax+48]
  0007b	33 32		 xor	 esi, DWORD PTR [edx]
  0007d	89 71 30	 mov	 DWORD PTR [ecx+48], esi
  00080	8b 70 34	 mov	 esi, DWORD PTR [eax+52]
  00083	33 32		 xor	 esi, DWORD PTR [edx]
  00085	89 71 34	 mov	 DWORD PTR [ecx+52], esi
  00088	8b 70 38	 mov	 esi, DWORD PTR [eax+56]
  0008b	33 32		 xor	 esi, DWORD PTR [edx]
  0008d	89 71 38	 mov	 DWORD PTR [ecx+56], esi
  00090	8b 70 3c	 mov	 esi, DWORD PTR [eax+60]
  00093	33 32		 xor	 esi, DWORD PTR [edx]
  00095	89 71 3c	 mov	 DWORD PTR [ecx+60], esi

; 619  : 	out_ks->y400 = ks->y400 ^ in[0]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];

  00098	8b 70 40	 mov	 esi, DWORD PTR [eax+64]
  0009b	33 32		 xor	 esi, DWORD PTR [edx]
  0009d	89 71 40	 mov	 DWORD PTR [ecx+64], esi
  000a0	8b 70 44	 mov	 esi, DWORD PTR [eax+68]
  000a3	33 32		 xor	 esi, DWORD PTR [edx]
  000a5	89 71 44	 mov	 DWORD PTR [ecx+68], esi
  000a8	8b 70 48	 mov	 esi, DWORD PTR [eax+72]
  000ab	33 32		 xor	 esi, DWORD PTR [edx]
  000ad	89 71 48	 mov	 DWORD PTR [ecx+72], esi
  000b0	8b 70 4c	 mov	 esi, DWORD PTR [eax+76]
  000b3	33 32		 xor	 esi, DWORD PTR [edx]
  000b5	89 71 4c	 mov	 DWORD PTR [ecx+76], esi

; 620  : 	out_ks->y500 = ks->y500 ^ in[0]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];

  000b8	8b 70 50	 mov	 esi, DWORD PTR [eax+80]
  000bb	33 32		 xor	 esi, DWORD PTR [edx]
  000bd	89 71 50	 mov	 DWORD PTR [ecx+80], esi
  000c0	8b 70 54	 mov	 esi, DWORD PTR [eax+84]
  000c3	33 32		 xor	 esi, DWORD PTR [edx]
  000c5	89 71 54	 mov	 DWORD PTR [ecx+84], esi
  000c8	8b 70 58	 mov	 esi, DWORD PTR [eax+88]
  000cb	33 32		 xor	 esi, DWORD PTR [edx]
  000cd	89 71 58	 mov	 DWORD PTR [ecx+88], esi
  000d0	8b 70 5c	 mov	 esi, DWORD PTR [eax+92]
  000d3	33 32		 xor	 esi, DWORD PTR [edx]
  000d5	89 71 5c	 mov	 DWORD PTR [ecx+92], esi

; 621  : 	out_ks->y600 = ks->y600 ^ in[0]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];

  000d8	8b 70 60	 mov	 esi, DWORD PTR [eax+96]
  000db	33 32		 xor	 esi, DWORD PTR [edx]
  000dd	89 71 60	 mov	 DWORD PTR [ecx+96], esi
  000e0	8b 70 64	 mov	 esi, DWORD PTR [eax+100]
  000e3	33 32		 xor	 esi, DWORD PTR [edx]

; 622  : 	out_ks->y700 = ks->y700 ^ in[0]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];
; 623  : 	out_ks->y800 = ks->y800 ^ in[0]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];
; 624  : 	out_ks->y900 = ks->y900 ^ in[0]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];
; 625  : 	for (i = 1; i < len; i++)

  000e5	33 ff		 xor	 edi, edi
  000e7	89 71 64	 mov	 DWORD PTR [ecx+100], esi
  000ea	8b 70 68	 mov	 esi, DWORD PTR [eax+104]
  000ed	33 32		 xor	 esi, DWORD PTR [edx]
  000ef	47		 inc	 edi
  000f0	89 71 68	 mov	 DWORD PTR [ecx+104], esi
  000f3	8b 70 6c	 mov	 esi, DWORD PTR [eax+108]
  000f6	33 32		 xor	 esi, DWORD PTR [edx]
  000f8	89 71 6c	 mov	 DWORD PTR [ecx+108], esi
  000fb	8b 70 70	 mov	 esi, DWORD PTR [eax+112]
  000fe	33 32		 xor	 esi, DWORD PTR [edx]
  00100	89 71 70	 mov	 DWORD PTR [ecx+112], esi
  00103	8b 70 74	 mov	 esi, DWORD PTR [eax+116]
  00106	33 32		 xor	 esi, DWORD PTR [edx]
  00108	89 71 74	 mov	 DWORD PTR [ecx+116], esi
  0010b	8b 70 78	 mov	 esi, DWORD PTR [eax+120]
  0010e	33 32		 xor	 esi, DWORD PTR [edx]
  00110	89 71 78	 mov	 DWORD PTR [ecx+120], esi
  00113	8b 70 7c	 mov	 esi, DWORD PTR [eax+124]
  00116	33 32		 xor	 esi, DWORD PTR [edx]
  00118	89 71 7c	 mov	 DWORD PTR [ecx+124], esi
  0011b	8b b0 80 00 00
	00		 mov	 esi, DWORD PTR [eax+128]
  00121	33 32		 xor	 esi, DWORD PTR [edx]
  00123	89 b1 80 00 00
	00		 mov	 DWORD PTR [ecx+128], esi
  00129	8b b0 84 00 00
	00		 mov	 esi, DWORD PTR [eax+132]
  0012f	33 32		 xor	 esi, DWORD PTR [edx]
  00131	89 b1 84 00 00
	00		 mov	 DWORD PTR [ecx+132], esi
  00137	8b b0 88 00 00
	00		 mov	 esi, DWORD PTR [eax+136]
  0013d	33 32		 xor	 esi, DWORD PTR [edx]
  0013f	89 b1 88 00 00
	00		 mov	 DWORD PTR [ecx+136], esi
  00145	8b b0 8c 00 00
	00		 mov	 esi, DWORD PTR [eax+140]
  0014b	33 32		 xor	 esi, DWORD PTR [edx]
  0014d	89 b1 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], esi
  00153	8b b0 90 00 00
	00		 mov	 esi, DWORD PTR [eax+144]
  00159	33 32		 xor	 esi, DWORD PTR [edx]
  0015b	89 b1 90 00 00
	00		 mov	 DWORD PTR [ecx+144], esi
  00161	8b b0 94 00 00
	00		 mov	 esi, DWORD PTR [eax+148]
  00167	33 32		 xor	 esi, DWORD PTR [edx]
  00169	89 b1 94 00 00
	00		 mov	 DWORD PTR [ecx+148], esi
  0016f	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  00175	33 32		 xor	 esi, DWORD PTR [edx]
  00177	89 b1 98 00 00
	00		 mov	 DWORD PTR [ecx+152], esi
  0017d	8b b0 9c 00 00
	00		 mov	 esi, DWORD PTR [eax+156]
  00183	33 32		 xor	 esi, DWORD PTR [edx]
  00185	89 b1 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], esi
  0018b	39 7d 14	 cmp	 DWORD PTR _len$[ebp], edi
  0018e	0f 86 7d 01 00
	00		 jbe	 $LN9@grasshoppe
  00194	53		 push	 ebx
$LL3@grasshoppe:
  00195	8d 34 ba	 lea	 esi, DWORD PTR [edx+edi*4]

; 626  : 	{
; 627  : 		out_ks->y000 = ks->y000 ^ in[i]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];

  00198	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0019a	33 18		 xor	 ebx, DWORD PTR [eax]
  0019c	89 19		 mov	 DWORD PTR [ecx], ebx
  0019e	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  001a1	33 1a		 xor	 ebx, DWORD PTR [edx]
  001a3	89 59 04	 mov	 DWORD PTR [ecx+4], ebx
  001a6	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
  001a9	33 1a		 xor	 ebx, DWORD PTR [edx]
  001ab	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
  001ae	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  001b1	33 1a		 xor	 ebx, DWORD PTR [edx]
  001b3	89 59 0c	 mov	 DWORD PTR [ecx+12], ebx

; 628  : 		out_ks->y100 = ks->y100 ^ in[i]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];

  001b6	8b 1e		 mov	 ebx, DWORD PTR [esi]
  001b8	33 58 10	 xor	 ebx, DWORD PTR [eax+16]
  001bb	89 59 10	 mov	 DWORD PTR [ecx+16], ebx
  001be	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
  001c1	33 1a		 xor	 ebx, DWORD PTR [edx]
  001c3	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  001c6	8b 58 18	 mov	 ebx, DWORD PTR [eax+24]
  001c9	33 1a		 xor	 ebx, DWORD PTR [edx]
  001cb	89 59 18	 mov	 DWORD PTR [ecx+24], ebx
  001ce	8b 58 1c	 mov	 ebx, DWORD PTR [eax+28]
  001d1	33 1a		 xor	 ebx, DWORD PTR [edx]
  001d3	89 59 1c	 mov	 DWORD PTR [ecx+28], ebx

; 629  : 		out_ks->y200 = ks->y200 ^ in[i]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];

  001d6	8b 1e		 mov	 ebx, DWORD PTR [esi]
  001d8	33 58 20	 xor	 ebx, DWORD PTR [eax+32]
  001db	89 59 20	 mov	 DWORD PTR [ecx+32], ebx
  001de	8b 58 24	 mov	 ebx, DWORD PTR [eax+36]
  001e1	33 1a		 xor	 ebx, DWORD PTR [edx]
  001e3	89 59 24	 mov	 DWORD PTR [ecx+36], ebx
  001e6	8b 58 28	 mov	 ebx, DWORD PTR [eax+40]
  001e9	33 1a		 xor	 ebx, DWORD PTR [edx]
  001eb	89 59 28	 mov	 DWORD PTR [ecx+40], ebx
  001ee	8b 58 2c	 mov	 ebx, DWORD PTR [eax+44]
  001f1	33 1a		 xor	 ebx, DWORD PTR [edx]
  001f3	89 59 2c	 mov	 DWORD PTR [ecx+44], ebx

; 630  : 		out_ks->y300 = ks->y300 ^ in[i]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];

  001f6	8b 1e		 mov	 ebx, DWORD PTR [esi]
  001f8	33 58 30	 xor	 ebx, DWORD PTR [eax+48]
  001fb	89 59 30	 mov	 DWORD PTR [ecx+48], ebx
  001fe	8b 58 34	 mov	 ebx, DWORD PTR [eax+52]
  00201	33 1a		 xor	 ebx, DWORD PTR [edx]
  00203	89 59 34	 mov	 DWORD PTR [ecx+52], ebx
  00206	8b 58 38	 mov	 ebx, DWORD PTR [eax+56]
  00209	33 1a		 xor	 ebx, DWORD PTR [edx]
  0020b	89 59 38	 mov	 DWORD PTR [ecx+56], ebx
  0020e	8b 58 3c	 mov	 ebx, DWORD PTR [eax+60]
  00211	33 1a		 xor	 ebx, DWORD PTR [edx]
  00213	89 59 3c	 mov	 DWORD PTR [ecx+60], ebx

; 631  : 		out_ks->y400 = ks->y400 ^ in[i]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];

  00216	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00218	33 58 40	 xor	 ebx, DWORD PTR [eax+64]
  0021b	89 59 40	 mov	 DWORD PTR [ecx+64], ebx
  0021e	8b 58 44	 mov	 ebx, DWORD PTR [eax+68]
  00221	33 1a		 xor	 ebx, DWORD PTR [edx]
  00223	89 59 44	 mov	 DWORD PTR [ecx+68], ebx
  00226	8b 58 48	 mov	 ebx, DWORD PTR [eax+72]
  00229	33 1a		 xor	 ebx, DWORD PTR [edx]
  0022b	89 59 48	 mov	 DWORD PTR [ecx+72], ebx
  0022e	8b 58 4c	 mov	 ebx, DWORD PTR [eax+76]
  00231	33 1a		 xor	 ebx, DWORD PTR [edx]
  00233	89 59 4c	 mov	 DWORD PTR [ecx+76], ebx

; 632  : 		out_ks->y500 = ks->y500 ^ in[i]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];

  00236	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00238	33 58 50	 xor	 ebx, DWORD PTR [eax+80]
  0023b	89 59 50	 mov	 DWORD PTR [ecx+80], ebx
  0023e	8b 58 54	 mov	 ebx, DWORD PTR [eax+84]
  00241	33 1a		 xor	 ebx, DWORD PTR [edx]
  00243	89 59 54	 mov	 DWORD PTR [ecx+84], ebx
  00246	8b 58 58	 mov	 ebx, DWORD PTR [eax+88]
  00249	33 1a		 xor	 ebx, DWORD PTR [edx]
  0024b	89 59 58	 mov	 DWORD PTR [ecx+88], ebx
  0024e	8b 58 5c	 mov	 ebx, DWORD PTR [eax+92]
  00251	33 1a		 xor	 ebx, DWORD PTR [edx]
  00253	89 59 5c	 mov	 DWORD PTR [ecx+92], ebx

; 633  : 		out_ks->y600 = ks->y600 ^ in[i]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];

  00256	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00258	33 58 60	 xor	 ebx, DWORD PTR [eax+96]
  0025b	89 59 60	 mov	 DWORD PTR [ecx+96], ebx
  0025e	8b 58 64	 mov	 ebx, DWORD PTR [eax+100]
  00261	33 1a		 xor	 ebx, DWORD PTR [edx]
  00263	89 59 64	 mov	 DWORD PTR [ecx+100], ebx
  00266	8b 58 68	 mov	 ebx, DWORD PTR [eax+104]
  00269	33 1a		 xor	 ebx, DWORD PTR [edx]
  0026b	89 59 68	 mov	 DWORD PTR [ecx+104], ebx
  0026e	8b 58 6c	 mov	 ebx, DWORD PTR [eax+108]
  00271	33 1a		 xor	 ebx, DWORD PTR [edx]
  00273	89 59 6c	 mov	 DWORD PTR [ecx+108], ebx

; 634  : 		out_ks->y700 = ks->y700 ^ in[i]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];

  00276	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00278	33 58 70	 xor	 ebx, DWORD PTR [eax+112]
  0027b	89 59 70	 mov	 DWORD PTR [ecx+112], ebx
  0027e	8b 58 74	 mov	 ebx, DWORD PTR [eax+116]
  00281	33 1a		 xor	 ebx, DWORD PTR [edx]
  00283	89 59 74	 mov	 DWORD PTR [ecx+116], ebx
  00286	8b 58 78	 mov	 ebx, DWORD PTR [eax+120]
  00289	33 1a		 xor	 ebx, DWORD PTR [edx]
  0028b	89 59 78	 mov	 DWORD PTR [ecx+120], ebx
  0028e	8b 58 7c	 mov	 ebx, DWORD PTR [eax+124]
  00291	33 1a		 xor	 ebx, DWORD PTR [edx]
  00293	89 59 7c	 mov	 DWORD PTR [ecx+124], ebx

; 635  : 		out_ks->y800 = ks->y800 ^ in[i]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];

  00296	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00298	33 98 80 00 00
	00		 xor	 ebx, DWORD PTR [eax+128]
  0029e	89 99 80 00 00
	00		 mov	 DWORD PTR [ecx+128], ebx
  002a4	8b 98 84 00 00
	00		 mov	 ebx, DWORD PTR [eax+132]
  002aa	33 1a		 xor	 ebx, DWORD PTR [edx]
  002ac	89 99 84 00 00
	00		 mov	 DWORD PTR [ecx+132], ebx
  002b2	8b 98 88 00 00
	00		 mov	 ebx, DWORD PTR [eax+136]
  002b8	33 1a		 xor	 ebx, DWORD PTR [edx]
  002ba	89 99 88 00 00
	00		 mov	 DWORD PTR [ecx+136], ebx
  002c0	8b 98 8c 00 00
	00		 mov	 ebx, DWORD PTR [eax+140]
  002c6	33 1a		 xor	 ebx, DWORD PTR [edx]
  002c8	89 99 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], ebx

; 636  : 		out_ks->y900 = ks->y900 ^ in[i]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];

  002ce	8b 36		 mov	 esi, DWORD PTR [esi]
  002d0	33 b0 90 00 00
	00		 xor	 esi, DWORD PTR [eax+144]
  002d6	89 b1 90 00 00
	00		 mov	 DWORD PTR [ecx+144], esi
  002dc	8b b0 94 00 00
	00		 mov	 esi, DWORD PTR [eax+148]
  002e2	33 32		 xor	 esi, DWORD PTR [edx]
  002e4	89 b1 94 00 00
	00		 mov	 DWORD PTR [ecx+148], esi
  002ea	8b b0 98 00 00
	00		 mov	 esi, DWORD PTR [eax+152]
  002f0	33 32		 xor	 esi, DWORD PTR [edx]
  002f2	89 b1 98 00 00
	00		 mov	 DWORD PTR [ecx+152], esi
  002f8	8b b0 9c 00 00
	00		 mov	 esi, DWORD PTR [eax+156]
  002fe	33 32		 xor	 esi, DWORD PTR [edx]
  00300	47		 inc	 edi
  00301	89 b1 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], esi
  00307	3b 7d 14	 cmp	 edi, DWORD PTR _len$[ebp]
  0030a	0f 82 85 fe ff
	ff		 jb	 $LL3@grasshoppe
  00310	5b		 pop	 ebx
$LN9@grasshoppe:
  00311	5f		 pop	 edi
  00312	5e		 pop	 esi
$LN1@grasshoppe:

; 637  : 	}
; 638  : }

  00313	5d		 pop	 ebp
  00314	c2 10 00	 ret	 16			; 00000010H
_grasshopper_xor_ks@16 ENDP
_TEXT	ENDS
PUBLIC	_changeEndian@4
; Function compile flags: /Ogsp
;	COMDAT _changeEndian@4
_TEXT	SEGMENT
_ret$ = 8						; size = 4
_changeEndian@4 PROC					; COMDAT

; 649  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 650  : 	unsigned long tmp = 0L;
; 651  : 
; 652  : 	tmp  = (*ret & 0xFF) << 24;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _ret$[ebp]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 653  : 	tmp |= (*ret & 0xFF00) << 8;
; 654  : 	tmp |= (*ret & 0xFF0000) >> 8;
; 655  : 	tmp |= (*ret & 0xFF000000) >> 24;
; 656  : 	*ret = tmp;

  0000c	8b f0		 mov	 esi, eax
  0000e	8b f8		 mov	 edi, eax
  00010	c1 e6 10	 shl	 esi, 16			; 00000010H
  00013	ba 00 ff 00 00	 mov	 edx, 65280		; 0000ff00H
  00018	23 fa		 and	 edi, edx
  0001a	0b f7		 or	 esi, edi
  0001c	c1 e8 08	 shr	 eax, 8
  0001f	c1 e6 08	 shl	 esi, 8
  00022	23 c2		 and	 eax, edx
  00024	0b f0		 or	 esi, eax
  00026	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  0002a	0b f0		 or	 esi, eax
  0002c	5f		 pop	 edi
  0002d	89 31		 mov	 DWORD PTR [ecx], esi
  0002f	5e		 pop	 esi

; 657  : 
; 658  : 	return;
; 659  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
_changeEndian@4 ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_set_key@8
; Function compile flags: /Ogsp
;	COMDAT _grasshopper_set_key@8
_TEXT	SEGMENT
_c_values$ = -548					; size = 512
tv199 = -36						; size = 4
_blocktmp2$ = -32					; size = 16
_blocktmp$ = -16					; size = 16
_master_key$ = 8					; size = 4
_subkeys$ = 12						; size = 4
_grasshopper_set_key@8 PROC				; COMDAT

; 417  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 418  : 
; 419  : 	unsigned long c_values[32][4], blocktmp[4], blocktmp2[4];
; 420  : 	unsigned char i;
; 421  : 
; 422  : 	/* Compute the C_i values       */
; 423  : 	for(i = 0;i < 32;i++)

  0000e	33 ff		 xor	 edi, edi
  00010	47		 inc	 edi
  00011	8d b5 e0 fd ff
	ff		 lea	 esi, DWORD PTR _c_values$[ebp+4]
  00017	c7 45 dc 20 00
	00 00		 mov	 DWORD PTR tv199[ebp], 32 ; 00000020H
  0001e	33 db		 xor	 ebx, ebx
$LL3@grasshoppe@2:

; 424  : 	{
; 425  : 		blocktmp[0] = 0L;
; 426  : 		blocktmp[1] = 0L;
; 427  : 		blocktmp[2] = 0L;
; 428  : 		blocktmp[3] = (unsigned long)(i + 1);
; 429  : 		L(blocktmp);

  00020	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00023	50		 push	 eax
  00024	89 5d f0	 mov	 DWORD PTR _blocktmp$[ebp], ebx
  00027	89 5d f4	 mov	 DWORD PTR _blocktmp$[ebp+4], ebx
  0002a	89 5d f8	 mov	 DWORD PTR _blocktmp$[ebp+8], ebx
  0002d	89 7d fc	 mov	 DWORD PTR _blocktmp$[ebp+12], edi
  00030	e8 00 00 00 00	 call	 _L@4

; 430  : 		c_values[i][0] = blocktmp[0]; c_values[i][1] = blocktmp[1]; c_values[i][2] = blocktmp[2]; c_values[i][3] = blocktmp[3];

  00035	8b 45 f0	 mov	 eax, DWORD PTR _blocktmp$[ebp]
  00038	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  0003b	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  0003e	89 06		 mov	 DWORD PTR [esi], eax
  00040	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00046	8b 45 fc	 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  00049	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004c	47		 inc	 edi
  0004d	83 c6 10	 add	 esi, 16			; 00000010H
  00050	ff 4d dc	 dec	 DWORD PTR tv199[ebp]
  00053	75 cb		 jne	 SHORT $LL3@grasshoppe@2

; 431  : 	}
; 432  : 
; 433  : 
; 434  : 	/* Compute subkeys K_1 and K_2  */
; 435  : 	subkeys->y000 = master_key[0]; subkeys->y001 = master_key[1]; subkeys->y010 = master_key[2]; subkeys->y011 = master_key[3];

  00055	8b 45 08	 mov	 eax, DWORD PTR _master_key$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 75 0c	 mov	 esi, DWORD PTR _subkeys$[ebp]
  0005d	89 0e		 mov	 DWORD PTR [esi], ecx
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00065	89 0f		 mov	 DWORD PTR [edi], ecx
  00067	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006a	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
  0006d	89 0b		 mov	 DWORD PTR [ebx], ecx
  0006f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00072	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 436  : 	subkeys->y100 = master_key[4]; subkeys->y101 = master_key[5]; subkeys->y110 = master_key[6]; subkeys->y111 = master_key[7];

  00075	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00078	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0007b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007e	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00081	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00084	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  00087	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]

; 437  : 
; 438  : 	changeEndian(&subkeys->y000); changeEndian(&subkeys->y010); changeEndian(&subkeys->y001); changeEndian(&subkeys->y011);

  0008a	56		 push	 esi
  0008b	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0008e	e8 00 00 00 00	 call	 _changeEndian@4
  00093	53		 push	 ebx
  00094	e8 00 00 00 00	 call	 _changeEndian@4
  00099	57		 push	 edi
  0009a	e8 00 00 00 00	 call	 _changeEndian@4
  0009f	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 _changeEndian@4

; 439  : 	changeEndian(&subkeys->y100); changeEndian(&subkeys->y101); changeEndian(&subkeys->y110); changeEndian(&subkeys->y111);

  000a8	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _changeEndian@4
  000b1	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _changeEndian@4
  000ba	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _changeEndian@4
  000c3	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _changeEndian@4

; 440  : 
; 441  : 	/* Compute subkeys K_3 and K_4  */
; 442  : 	blocktmp[0] = subkeys->y000; blocktmp[1] = subkeys->y001; blocktmp[2] = subkeys->y010; blocktmp[3] = subkeys->y011;

  000cc	8b 06		 mov	 eax, DWORD PTR [esi]
  000ce	89 45 f0	 mov	 DWORD PTR _blocktmp$[ebp], eax
  000d1	8b 07		 mov	 eax, DWORD PTR [edi]
  000d3	89 45 f4	 mov	 DWORD PTR _blocktmp$[ebp+4], eax
  000d6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d8	89 45 f8	 mov	 DWORD PTR _blocktmp$[ebp+8], eax
  000db	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000de	89 45 fc	 mov	 DWORD PTR _blocktmp$[ebp+12], eax

; 443  : 	blocktmp2[0] = subkeys->y100; blocktmp2[1] = subkeys->y101; blocktmp2[2] = subkeys->y110; blocktmp2[3] = subkeys->y111;

  000e1	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e4	89 45 e0	 mov	 DWORD PTR _blocktmp2$[ebp], eax
  000e7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ea	89 45 e4	 mov	 DWORD PTR _blocktmp2$[ebp+4], eax
  000ed	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000f0	89 45 e8	 mov	 DWORD PTR _blocktmp2$[ebp+8], eax
  000f3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000f6	89 45 ec	 mov	 DWORD PTR _blocktmp2$[ebp+12], eax

; 444  : 	F(c_values[0], blocktmp, blocktmp2); F(c_values[1], blocktmp, blocktmp2);

  000f9	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  000fc	50		 push	 eax
  000fd	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00100	50		 push	 eax
  00101	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 _F@12
  0010d	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00110	50		 push	 eax
  00111	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00114	50		 push	 eax
  00115	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+16]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _F@12

; 445  : 	F(c_values[2], blocktmp, blocktmp2); F(c_values[3], blocktmp, blocktmp2);

  00121	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00124	50		 push	 eax
  00125	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00128	50		 push	 eax
  00129	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+32]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _F@12
  00135	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00138	50		 push	 eax
  00139	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0013c	50		 push	 eax
  0013d	8d 85 0c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+48]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 _F@12

; 446  : 	F(c_values[4], blocktmp, blocktmp2); F(c_values[5], blocktmp, blocktmp2);

  00149	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0014c	50		 push	 eax
  0014d	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00150	50		 push	 eax
  00151	8d 85 1c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+64]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 _F@12
  0015d	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00160	50		 push	 eax
  00161	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00164	50		 push	 eax
  00165	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+80]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _F@12

; 447  : 	F(c_values[6], blocktmp, blocktmp2); F(c_values[7], blocktmp, blocktmp2);

  00171	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00174	50		 push	 eax
  00175	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00178	50		 push	 eax
  00179	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+96]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 _F@12
  00185	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00188	50		 push	 eax
  00189	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0018c	50		 push	 eax
  0018d	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+112]
  00193	50		 push	 eax
  00194	e8 00 00 00 00	 call	 _F@12

; 448  : 
; 449  : 	subkeys->y200 = blocktmp[0]; subkeys->y201 = blocktmp[1]; subkeys->y210 = blocktmp[2]; subkeys->y211 = blocktmp[3];

  00199	8b 45 f0	 mov	 eax, DWORD PTR _blocktmp$[ebp]
  0019c	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0019f	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  001a2	89 46 24	 mov	 DWORD PTR [esi+36], eax
  001a5	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  001a8	89 46 28	 mov	 DWORD PTR [esi+40], eax
  001ab	8b 45 fc	 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  001ae	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 450  : 	subkeys->y300 = blocktmp2[0]; subkeys->y301 = blocktmp2[1]; subkeys->y310 = blocktmp2[2]; subkeys->y311 = blocktmp2[3];

  001b1	8b 45 e0	 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  001b4	89 46 30	 mov	 DWORD PTR [esi+48], eax
  001b7	8b 45 e4	 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  001ba	89 46 34	 mov	 DWORD PTR [esi+52], eax
  001bd	8b 45 e8	 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  001c0	89 46 38	 mov	 DWORD PTR [esi+56], eax
  001c3	8b 45 ec	 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  001c6	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 451  : 
; 452  : 	/* Compute subkeys K_5 and K_6  */
; 453  : 	F(c_values[ 8], blocktmp, blocktmp2); F(c_values[ 9], blocktmp, blocktmp2);

  001c9	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001cc	50		 push	 eax
  001cd	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  001d0	50		 push	 eax
  001d1	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+128]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 _F@12
  001dd	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001e0	50		 push	 eax
  001e1	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  001e4	50		 push	 eax
  001e5	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+144]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _F@12

; 454  : 	F(c_values[10], blocktmp, blocktmp2); F(c_values[11], blocktmp, blocktmp2);

  001f1	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001f4	50		 push	 eax
  001f5	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  001f8	50		 push	 eax
  001f9	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+160]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 _F@12
  00205	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00208	50		 push	 eax
  00209	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0020c	50		 push	 eax
  0020d	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+176]
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 _F@12

; 455  : 	F(c_values[12], blocktmp, blocktmp2); F(c_values[13], blocktmp, blocktmp2);

  00219	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0021c	50		 push	 eax
  0021d	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00220	50		 push	 eax
  00221	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+192]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 _F@12
  0022d	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00230	50		 push	 eax
  00231	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00234	50		 push	 eax
  00235	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+208]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 _F@12

; 456  : 	F(c_values[14], blocktmp, blocktmp2); F(c_values[15], blocktmp, blocktmp2);

  00241	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00244	50		 push	 eax
  00245	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00248	50		 push	 eax
  00249	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+224]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 _F@12
  00255	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00258	50		 push	 eax
  00259	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0025c	50		 push	 eax
  0025d	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+240]
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 _F@12

; 457  : 
; 458  : 	subkeys->y400 = blocktmp[0]; subkeys->y401 = blocktmp[1]; subkeys->y410 = blocktmp[2]; subkeys->y411 = blocktmp[3];

  00269	8b 45 f0	 mov	 eax, DWORD PTR _blocktmp$[ebp]
  0026c	89 46 40	 mov	 DWORD PTR [esi+64], eax
  0026f	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  00272	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00275	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  00278	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0027b	8b 45 fc	 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  0027e	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 459  : 	subkeys->y500 = blocktmp2[0]; subkeys->y501 = blocktmp2[1]; subkeys->y510 = blocktmp2[2]; subkeys->y511 = blocktmp2[3];

  00281	8b 45 e0	 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  00284	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00287	8b 45 e4	 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  0028a	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0028d	8b 45 e8	 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  00290	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00293	8b 45 ec	 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  00296	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 460  : 
; 461  : 	/* Compute subkeys K_7 and K_8  */
; 462  : 	F(c_values[16], blocktmp, blocktmp2); F(c_values[17], blocktmp, blocktmp2);

  00299	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0029c	50		 push	 eax
  0029d	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  002a0	50		 push	 eax
  002a1	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+256]
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 _F@12
  002ad	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  002b0	50		 push	 eax
  002b1	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  002b4	50		 push	 eax
  002b5	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+272]
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 _F@12

; 463  : 	F(c_values[18], blocktmp, blocktmp2); F(c_values[19], blocktmp, blocktmp2);

  002c1	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  002c4	50		 push	 eax
  002c5	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  002c8	50		 push	 eax
  002c9	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+288]
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 _F@12
  002d5	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  002d8	50		 push	 eax
  002d9	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  002dc	50		 push	 eax
  002dd	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+304]
  002e3	50		 push	 eax
  002e4	e8 00 00 00 00	 call	 _F@12

; 464  : 	F(c_values[20], blocktmp, blocktmp2); F(c_values[21], blocktmp, blocktmp2);

  002e9	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  002ec	50		 push	 eax
  002ed	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  002f0	50		 push	 eax
  002f1	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+320]
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 _F@12
  002fd	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00300	50		 push	 eax
  00301	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00304	50		 push	 eax
  00305	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+336]
  0030b	50		 push	 eax
  0030c	e8 00 00 00 00	 call	 _F@12

; 465  : 	F(c_values[22], blocktmp, blocktmp2); F(c_values[23], blocktmp, blocktmp2);

  00311	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00314	50		 push	 eax
  00315	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00318	50		 push	 eax
  00319	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+352]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 _F@12
  00325	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00328	50		 push	 eax
  00329	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0032c	50		 push	 eax
  0032d	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+368]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 _F@12

; 466  : 
; 467  : 	subkeys->y600 = blocktmp[0]; subkeys->y601 = blocktmp[1]; subkeys->y610 = blocktmp[2]; subkeys->y611 = blocktmp[3];

  00339	8b 45 f0	 mov	 eax, DWORD PTR _blocktmp$[ebp]
  0033c	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0033f	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  00342	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00345	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  00348	89 46 68	 mov	 DWORD PTR [esi+104], eax
  0034b	8b 45 fc	 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  0034e	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 468  : 	subkeys->y700 = blocktmp2[0]; subkeys->y701 = blocktmp2[1]; subkeys->y710 = blocktmp2[2]; subkeys->y711 = blocktmp2[3];

  00351	8b 45 e0	 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  00354	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00357	8b 45 e4	 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  0035a	89 46 74	 mov	 DWORD PTR [esi+116], eax
  0035d	8b 45 e8	 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  00360	89 46 78	 mov	 DWORD PTR [esi+120], eax
  00363	8b 45 ec	 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  00366	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 469  : 
; 470  : 	/* Compute subkeys K_9 and K_{10} */
; 471  : 	F(c_values[24], blocktmp, blocktmp2); F(c_values[25], blocktmp, blocktmp2);

  00369	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0036c	50		 push	 eax
  0036d	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00370	50		 push	 eax
  00371	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+384]
  00377	50		 push	 eax
  00378	e8 00 00 00 00	 call	 _F@12
  0037d	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00380	50		 push	 eax
  00381	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00384	50		 push	 eax
  00385	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+400]
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 _F@12

; 472  : 	F(c_values[26], blocktmp, blocktmp2); F(c_values[27], blocktmp, blocktmp2);

  00391	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00394	50		 push	 eax
  00395	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00398	50		 push	 eax
  00399	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+416]
  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 _F@12
  003a5	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  003a8	50		 push	 eax
  003a9	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003ac	50		 push	 eax
  003ad	8d 45 8c	 lea	 eax, DWORD PTR _c_values$[ebp+432]
  003b0	50		 push	 eax
  003b1	e8 00 00 00 00	 call	 _F@12

; 473  : 	F(c_values[28], blocktmp, blocktmp2); F(c_values[29], blocktmp, blocktmp2);

  003b6	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  003b9	50		 push	 eax
  003ba	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003bd	50		 push	 eax
  003be	8d 45 9c	 lea	 eax, DWORD PTR _c_values$[ebp+448]
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 _F@12
  003c7	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  003ca	50		 push	 eax
  003cb	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003ce	50		 push	 eax
  003cf	8d 45 ac	 lea	 eax, DWORD PTR _c_values$[ebp+464]
  003d2	50		 push	 eax
  003d3	e8 00 00 00 00	 call	 _F@12

; 474  : 	F(c_values[30], blocktmp, blocktmp2); F(c_values[31], blocktmp, blocktmp2);

  003d8	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  003db	50		 push	 eax
  003dc	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003df	50		 push	 eax
  003e0	8d 45 bc	 lea	 eax, DWORD PTR _c_values$[ebp+480]
  003e3	50		 push	 eax
  003e4	e8 00 00 00 00	 call	 _F@12
  003e9	8d 45 e0	 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  003ec	50		 push	 eax
  003ed	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003f0	50		 push	 eax
  003f1	8d 45 cc	 lea	 eax, DWORD PTR _c_values$[ebp+496]
  003f4	50		 push	 eax
  003f5	e8 00 00 00 00	 call	 _F@12

; 475  : 
; 476  : 	subkeys->y800 = blocktmp[0]; subkeys->y801 = blocktmp[1]; subkeys->y810 = blocktmp[2]; subkeys->y811 = blocktmp[3];

  003fa	8b 45 f0	 mov	 eax, DWORD PTR _blocktmp$[ebp]
  003fd	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  00403	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  00406	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  0040c	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  0040f	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00415	8b 45 fc	 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  00418	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 477  : 	subkeys->y900 = blocktmp2[0]; subkeys->y901 = blocktmp2[1]; subkeys->y910 = blocktmp2[2]; subkeys->y911 = blocktmp2[3];

  0041e	8b 45 e0	 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  00421	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  00427	8b 45 e4	 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  0042a	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  00430	8b 45 e8	 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  00433	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  00439	8b 45 ec	 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  0043c	5f		 pop	 edi
  0043d	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  00443	5e		 pop	 esi
  00444	5b		 pop	 ebx

; 478  : 
; 479  : }

  00445	c9		 leave
  00446	c2 08 00	 ret	 8
_grasshopper_set_key@8 ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_encrypt@12
; Function compile flags: /Ogsp
;	COMDAT _grasshopper_encrypt@12
_TEXT	SEGMENT
tv352 = -8						; size = 4
tv354 = -4						; size = 4
_subkeys$ = 8						; size = 4
tv353 = 12						; size = 4
_plaintext$ = 12					; size = 4
_ciphertext$ = 16					; size = 4
_grasshopper_encrypt@12 PROC				; COMDAT

; 493  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 494  : 	/* Round 1 with subkey 1 */
; 495  : 
; 496  : 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  00009	8b 75 0c	 mov	 esi, DWORD PTR _plaintext$[ebp]
  0000c	57		 push	 edi
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _changeEndian@4
  00013	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00016	50		 push	 eax
  00017	89 45 f8	 mov	 DWORD PTR tv352[ebp], eax
  0001a	e8 00 00 00 00	 call	 _changeEndian@4
  0001f	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00022	50		 push	 eax
  00023	89 45 0c	 mov	 DWORD PTR tv353[ebp], eax
  00026	e8 00 00 00 00	 call	 _changeEndian@4
  0002b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0002e	50		 push	 eax
  0002f	89 45 fc	 mov	 DWORD PTR tv354[ebp], eax
  00032	e8 00 00 00 00	 call	 _changeEndian@4

; 497  : 
; 498  : 	ciphertext[0] = plaintext[0] ^ subkeys->y000; ciphertext[1] = plaintext[1] ^ subkeys->y001; ciphertext[2] = plaintext[2] ^ subkeys->y010; ciphertext[3] = plaintext[3] ^ subkeys->y011;

  00037	8b 7d 08	 mov	 edi, DWORD PTR _subkeys$[ebp]
  0003a	8b 07		 mov	 eax, DWORD PTR [edi]
  0003c	33 06		 xor	 eax, DWORD PTR [esi]
  0003e	8b 75 10	 mov	 esi, DWORD PTR _ciphertext$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR tv352[ebp]
  00044	89 06		 mov	 DWORD PTR [esi], eax
  00046	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00049	33 01		 xor	 eax, DWORD PTR [ecx]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR tv353[ebp]
  0004e	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00051	89 03		 mov	 DWORD PTR [ebx], eax
  00053	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00056	33 01		 xor	 eax, DWORD PTR [ecx]
  00058	8b 4d fc	 mov	 ecx, DWORD PTR tv354[ebp]
  0005b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0005e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00061	33 01		 xor	 eax, DWORD PTR [ecx]

; 499  : 	S(ciphertext); L(ciphertext);

  00063	56		 push	 esi
  00064	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00067	e8 00 00 00 00	 call	 _S@4
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 _L@4

; 500  : 
; 501  : 	/* Round 2 with subkey 2 */
; 502  : 	ciphertext[0] ^= subkeys->y100; ciphertext[1] ^= subkeys->y101; ciphertext[2] ^= subkeys->y110; ciphertext[3] ^= subkeys->y111;

  00072	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00075	31 06		 xor	 DWORD PTR [esi], eax
  00077	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0007a	31 03		 xor	 DWORD PTR [ebx], eax
  0007c	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0007f	31 46 08	 xor	 DWORD PTR [esi+8], eax
  00082	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00085	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 503  : 	S(ciphertext); L(ciphertext);

  00088	56		 push	 esi
  00089	e8 00 00 00 00	 call	 _S@4
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 _L@4

; 504  : 
; 505  : 	/* Round 3 with subkey 3 */
; 506  : 	ciphertext[0] ^= subkeys->y200; ciphertext[1] ^= subkeys->y201; ciphertext[2] ^= subkeys->y210; ciphertext[3] ^= subkeys->y211;

  00094	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00097	31 06		 xor	 DWORD PTR [esi], eax
  00099	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0009c	31 03		 xor	 DWORD PTR [ebx], eax
  0009e	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000a1	31 46 08	 xor	 DWORD PTR [esi+8], eax
  000a4	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000a7	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 507  : 	S(ciphertext); L(ciphertext);

  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 _S@4
  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 _L@4

; 508  : 	
; 509  : 	/* Round 4 with subkey 4 */
; 510  : 	ciphertext[0] ^= subkeys->y300; ciphertext[1] ^= subkeys->y301; ciphertext[2] ^= subkeys->y310; ciphertext[3] ^= subkeys->y311;

  000b6	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000b9	31 06		 xor	 DWORD PTR [esi], eax
  000bb	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  000be	31 03		 xor	 DWORD PTR [ebx], eax
  000c0	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  000c3	31 46 08	 xor	 DWORD PTR [esi+8], eax
  000c6	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  000c9	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 511  : 	S(ciphertext); L(ciphertext);

  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 _S@4
  000d2	56		 push	 esi
  000d3	e8 00 00 00 00	 call	 _L@4

; 512  : 	
; 513  : 	/* Round 5 with subkey 5 */
; 514  : 	ciphertext[0] ^= subkeys->y400; ciphertext[1] ^= subkeys->y401; ciphertext[2] ^= subkeys->y410; ciphertext[3] ^= subkeys->y411;

  000d8	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  000db	31 06		 xor	 DWORD PTR [esi], eax
  000dd	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  000e0	31 03		 xor	 DWORD PTR [ebx], eax
  000e2	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  000e5	31 46 08	 xor	 DWORD PTR [esi+8], eax
  000e8	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  000eb	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 515  : 	S(ciphertext); L(ciphertext);

  000ee	56		 push	 esi
  000ef	e8 00 00 00 00	 call	 _S@4
  000f4	56		 push	 esi
  000f5	e8 00 00 00 00	 call	 _L@4

; 516  : 	
; 517  : 	/* Round 6 with subkey 6 */
; 518  : 	ciphertext[0] ^= subkeys->y500; ciphertext[1] ^= subkeys->y501; ciphertext[2] ^= subkeys->y510; ciphertext[3] ^= subkeys->y511;

  000fa	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  000fd	31 06		 xor	 DWORD PTR [esi], eax
  000ff	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00102	31 03		 xor	 DWORD PTR [ebx], eax
  00104	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00107	31 46 08	 xor	 DWORD PTR [esi+8], eax
  0010a	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  0010d	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 519  : 	S(ciphertext); L(ciphertext);

  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 _S@4
  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 _L@4

; 520  : 	
; 521  : 	/* Round 7 with subkey 7 */
; 522  : 	ciphertext[0] ^= subkeys->y600; ciphertext[1] ^= subkeys->y601; ciphertext[2] ^= subkeys->y610; ciphertext[3] ^= subkeys->y611;

  0011c	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0011f	31 06		 xor	 DWORD PTR [esi], eax
  00121	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00124	31 03		 xor	 DWORD PTR [ebx], eax
  00126	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00129	31 46 08	 xor	 DWORD PTR [esi+8], eax
  0012c	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  0012f	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 523  : 	S(ciphertext); L(ciphertext);

  00132	56		 push	 esi
  00133	e8 00 00 00 00	 call	 _S@4
  00138	56		 push	 esi
  00139	e8 00 00 00 00	 call	 _L@4

; 524  : 	
; 525  : 	/* Round 8 with subkey 8 */
; 526  : 	ciphertext[0] ^= subkeys->y700; ciphertext[1] ^= subkeys->y701; ciphertext[2] ^= subkeys->y710; ciphertext[3] ^= subkeys->y711;

  0013e	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  00141	31 06		 xor	 DWORD PTR [esi], eax
  00143	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  00146	31 03		 xor	 DWORD PTR [ebx], eax
  00148	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  0014b	31 46 08	 xor	 DWORD PTR [esi+8], eax
  0014e	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  00151	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 527  : 	S(ciphertext); L(ciphertext);

  00154	56		 push	 esi
  00155	e8 00 00 00 00	 call	 _S@4
  0015a	56		 push	 esi
  0015b	e8 00 00 00 00	 call	 _L@4

; 528  : 	
; 529  : 	/* Round 9 with subkey 9 */
; 530  : 	ciphertext[0] ^= subkeys->y800; ciphertext[1] ^= subkeys->y801; ciphertext[2] ^= subkeys->y810; ciphertext[3] ^= subkeys->y811;

  00160	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  00166	31 06		 xor	 DWORD PTR [esi], eax
  00168	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  0016e	31 03		 xor	 DWORD PTR [ebx], eax
  00170	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00176	31 46 08	 xor	 DWORD PTR [esi+8], eax
  00179	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  0017f	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 531  : 	S(ciphertext); L(ciphertext);

  00182	56		 push	 esi
  00183	e8 00 00 00 00	 call	 _S@4
  00188	56		 push	 esi
  00189	e8 00 00 00 00	 call	 _L@4

; 532  : 	
; 533  : 	/* Round 10 with subkey 10 */
; 534  : 	ciphertext[0] ^= subkeys->y900; ciphertext[1] ^= subkeys->y901; ciphertext[2] ^= subkeys->y910; ciphertext[3] ^= subkeys->y911;

  0018e	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  00194	31 06		 xor	 DWORD PTR [esi], eax
  00196	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0019c	31 03		 xor	 DWORD PTR [ebx], eax
  0019e	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  001a4	31 46 08	 xor	 DWORD PTR [esi+8], eax
  001a7	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  001ad	31 46 0c	 xor	 DWORD PTR [esi+12], eax

; 535  : 
; 536  : 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  001b0	56		 push	 esi
  001b1	e8 00 00 00 00	 call	 _changeEndian@4
  001b6	53		 push	 ebx
  001b7	e8 00 00 00 00	 call	 _changeEndian@4
  001bc	ff 75 0c	 push	 DWORD PTR tv353[ebp]
  001bf	e8 00 00 00 00	 call	 _changeEndian@4
  001c4	ff 75 fc	 push	 DWORD PTR tv354[ebp]
  001c7	e8 00 00 00 00	 call	 _changeEndian@4
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx

; 537  : 	
; 538  : }

  001cf	c9		 leave
  001d0	c2 0c 00	 ret	 12			; 0000000cH
_grasshopper_encrypt@12 ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_decrypt@12
; Function compile flags: /Ogsp
;	COMDAT _grasshopper_decrypt@12
_TEXT	SEGMENT
tv354 = -8						; size = 4
tv353 = -4						; size = 4
_subkeys$ = 8						; size = 4
tv376 = 12						; size = 4
tv352 = 12						; size = 4
_ciphertext$ = 12					; size = 4
_plaintext$ = 16					; size = 4
_grasshopper_decrypt@12 PROC				; COMDAT

; 551  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi

; 552  : 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&ciphertext[2]); changeEndian(&ciphertext[3]);

  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _ciphertext$[ebp]
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 _changeEndian@4
  00013	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00016	50		 push	 eax
  00017	89 45 0c	 mov	 DWORD PTR tv352[ebp], eax
  0001a	e8 00 00 00 00	 call	 _changeEndian@4
  0001f	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00022	50		 push	 eax
  00023	89 45 fc	 mov	 DWORD PTR tv353[ebp], eax
  00026	e8 00 00 00 00	 call	 _changeEndian@4
  0002b	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0002e	50		 push	 eax
  0002f	89 45 f8	 mov	 DWORD PTR tv354[ebp], eax
  00032	e8 00 00 00 00	 call	 _changeEndian@4

; 553  : 
; 554  : 	/* Round 1 with subkey 10 */
; 555  : 	plaintext[0] = ciphertext[0] ^ subkeys->y900; plaintext[1] = ciphertext[1] ^ subkeys->y901; plaintext[2] = ciphertext[2] ^ subkeys->y910; plaintext[3] = ciphertext[3] ^ subkeys->y911;

  00037	8b 75 08	 mov	 esi, DWORD PTR _subkeys$[ebp]
  0003a	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00040	33 07		 xor	 eax, DWORD PTR [edi]
  00042	8b 7d 10	 mov	 edi, DWORD PTR _plaintext$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR tv352[ebp]
  00048	8b 55 fc	 mov	 edx, DWORD PTR tv353[ebp]
  0004b	89 07		 mov	 DWORD PTR [edi], eax
  0004d	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
  00053	33 01		 xor	 eax, DWORD PTR [ecx]
  00055	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  00058	89 03		 mov	 DWORD PTR [ebx], eax
  0005a	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  00060	33 0a		 xor	 ecx, DWORD PTR [edx]
  00062	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00065	89 08		 mov	 DWORD PTR [eax], ecx
  00067	8b 4d f8	 mov	 ecx, DWORD PTR tv354[ebp]
  0006a	89 45 0c	 mov	 DWORD PTR tv376[ebp], eax
  0006d	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  00073	33 01		 xor	 eax, DWORD PTR [ecx]

; 556  : 	L_inv(plaintext); S_inv(plaintext);

  00075	57		 push	 edi
  00076	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00079	e8 00 00 00 00	 call	 _L_inv@4
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 _S_inv@4

; 557  : 
; 558  : 	/* Round 2 with subkey 9 */
; 559  : 	plaintext[0] ^= subkeys->y800; plaintext[1] ^= subkeys->y801; plaintext[2] ^= subkeys->y810; plaintext[3] ^= subkeys->y811;

  00084	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  0008a	31 07		 xor	 DWORD PTR [edi], eax
  0008c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00092	31 03		 xor	 DWORD PTR [ebx], eax
  00094	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0009a	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  0009d	31 08		 xor	 DWORD PTR [eax], ecx
  0009f	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  000a5	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 560  : 	L_inv(plaintext); S_inv(plaintext);

  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 _L_inv@4
  000ae	57		 push	 edi
  000af	e8 00 00 00 00	 call	 _S_inv@4

; 561  : 
; 562  : 	/* Round 3 with subkey 8 */
; 563  : 	plaintext[0] ^= subkeys->y700; plaintext[1] ^= subkeys->y701; plaintext[2] ^= subkeys->y710; plaintext[3] ^= subkeys->y711;

  000b4	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  000b7	31 07		 xor	 DWORD PTR [edi], eax
  000b9	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000bc	31 03		 xor	 DWORD PTR [ebx], eax
  000be	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  000c1	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  000c4	31 08		 xor	 DWORD PTR [eax], ecx
  000c6	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  000c9	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 564  : 	L_inv(plaintext); S_inv(plaintext);

  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 _L_inv@4
  000d2	57		 push	 edi
  000d3	e8 00 00 00 00	 call	 _S_inv@4

; 565  : 
; 566  : 	/* Round 4 with subkey 7 */
; 567  : 	plaintext[0] ^= subkeys->y600; plaintext[1] ^= subkeys->y601; plaintext[2] ^= subkeys->y610; plaintext[3] ^= subkeys->y611;

  000d8	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  000db	31 07		 xor	 DWORD PTR [edi], eax
  000dd	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  000e0	31 03		 xor	 DWORD PTR [ebx], eax
  000e2	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  000e5	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  000e8	31 08		 xor	 DWORD PTR [eax], ecx
  000ea	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000ed	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 568  : 	L_inv(plaintext); S_inv(plaintext);

  000f0	57		 push	 edi
  000f1	e8 00 00 00 00	 call	 _L_inv@4
  000f6	57		 push	 edi
  000f7	e8 00 00 00 00	 call	 _S_inv@4

; 569  : 
; 570  : 	/* Round 5 with subkey 6 */
; 571  : 	plaintext[0] ^= subkeys->y500; plaintext[1] ^= subkeys->y501; plaintext[2] ^= subkeys->y510; plaintext[3] ^= subkeys->y511;

  000fc	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  000ff	31 07		 xor	 DWORD PTR [edi], eax
  00101	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00104	31 03		 xor	 DWORD PTR [ebx], eax
  00106	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00109	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  0010c	31 08		 xor	 DWORD PTR [eax], ecx
  0010e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00111	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 572  : 	L_inv(plaintext); S_inv(plaintext);

  00114	57		 push	 edi
  00115	e8 00 00 00 00	 call	 _L_inv@4
  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 _S_inv@4

; 573  : 
; 574  : 	/* Round 6 with subkey 5 */
; 575  : 	plaintext[0] ^= subkeys->y400; plaintext[1] ^= subkeys->y401; plaintext[2] ^= subkeys->y410; plaintext[3] ^= subkeys->y411;

  00120	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00123	31 07		 xor	 DWORD PTR [edi], eax
  00125	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00128	31 03		 xor	 DWORD PTR [ebx], eax
  0012a	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0012d	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  00130	31 08		 xor	 DWORD PTR [eax], ecx
  00132	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00135	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 576  : 	L_inv(plaintext); S_inv(plaintext);

  00138	57		 push	 edi
  00139	e8 00 00 00 00	 call	 _L_inv@4
  0013e	57		 push	 edi
  0013f	e8 00 00 00 00	 call	 _S_inv@4

; 577  : 
; 578  : 	/* Round 7 with subkey 4 */
; 579  : 	plaintext[0] ^= subkeys->y300; plaintext[1] ^= subkeys->y301; plaintext[2] ^= subkeys->y310; plaintext[3] ^= subkeys->y311;

  00144	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00147	31 07		 xor	 DWORD PTR [edi], eax
  00149	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0014c	31 03		 xor	 DWORD PTR [ebx], eax
  0014e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00151	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  00154	31 08		 xor	 DWORD PTR [eax], ecx
  00156	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00159	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 580  : 	L_inv(plaintext); S_inv(plaintext);

  0015c	57		 push	 edi
  0015d	e8 00 00 00 00	 call	 _L_inv@4
  00162	57		 push	 edi
  00163	e8 00 00 00 00	 call	 _S_inv@4

; 581  : 
; 582  : 	/* Round 8 with subkey 3 */
; 583  : 	plaintext[0] ^= subkeys->y200; plaintext[1] ^= subkeys->y201; plaintext[2] ^= subkeys->y210; plaintext[3] ^= subkeys->y211;

  00168	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0016b	31 07		 xor	 DWORD PTR [edi], eax
  0016d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00170	31 03		 xor	 DWORD PTR [ebx], eax
  00172	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00175	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  00178	31 08		 xor	 DWORD PTR [eax], ecx
  0017a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0017d	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 584  : 	L_inv(plaintext); S_inv(plaintext);

  00180	57		 push	 edi
  00181	e8 00 00 00 00	 call	 _L_inv@4
  00186	57		 push	 edi
  00187	e8 00 00 00 00	 call	 _S_inv@4

; 585  : 
; 586  : 	/* Round 9 with subkey 2 */
; 587  : 	plaintext[0] ^= subkeys->y100; plaintext[1] ^= subkeys->y101; plaintext[2] ^= subkeys->y110; plaintext[3] ^= subkeys->y111;

  0018c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0018f	31 07		 xor	 DWORD PTR [edi], eax
  00191	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00194	31 03		 xor	 DWORD PTR [ebx], eax
  00196	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00199	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  0019c	31 08		 xor	 DWORD PTR [eax], ecx
  0019e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001a1	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 588  : 	L_inv(plaintext); S_inv(plaintext);

  001a4	57		 push	 edi
  001a5	e8 00 00 00 00	 call	 _L_inv@4
  001aa	57		 push	 edi
  001ab	e8 00 00 00 00	 call	 _S_inv@4

; 589  : 
; 590  : 	/* Round 10 with subkey 1 */
; 591  : 	plaintext[0] ^= subkeys->y000; plaintext[1] ^= subkeys->y001; plaintext[2] ^= subkeys->y010; plaintext[3] ^= subkeys->y011;

  001b0	8b 06		 mov	 eax, DWORD PTR [esi]
  001b2	31 07		 xor	 DWORD PTR [edi], eax
  001b4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001b7	31 03		 xor	 DWORD PTR [ebx], eax
  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	8b 45 0c	 mov	 eax, DWORD PTR tv376[ebp]
  001bf	31 08		 xor	 DWORD PTR [eax], ecx
  001c1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001c4	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  001c7	31 06		 xor	 DWORD PTR [esi], eax

; 592  : 	/*L_inv(plaintext); S_inv(plaintext);*/
; 593  : 
; 594  : 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  001c9	57		 push	 edi
  001ca	e8 00 00 00 00	 call	 _changeEndian@4
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 _changeEndian@4
  001d5	ff 75 0c	 push	 DWORD PTR tv376[ebp]
  001d8	e8 00 00 00 00	 call	 _changeEndian@4
  001dd	56		 push	 esi
  001de	e8 00 00 00 00	 call	 _changeEndian@4
  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx

; 595  : 
; 596  : }

  001e6	c9		 leave
  001e7	c2 0c 00	 ret	 12			; 0000000cH
_grasshopper_decrypt@12 ENDP
_TEXT	ENDS
END
