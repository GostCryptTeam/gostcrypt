; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

	TITLE	c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_pi
PUBLIC	_pi_inv
PUBLIC	_mult_mod_poly
_DATA	SEGMENT
_pi	DB	0fcH
	DB	0eeH
	DB	0ddH
	DB	011H
	DB	0cfH
	DB	06eH
	DB	031H
	DB	016H
	DB	0fbH
	DB	0c4H
	DB	0faH
	DB	0daH
	DB	023H
	DB	0c5H
	DB	04H
	DB	04dH
	DB	0e9H
	DB	077H
	DB	0f0H
	DB	0dbH
	DB	093H
	DB	02eH
	DB	099H
	DB	0baH
	DB	017H
	DB	036H
	DB	0f1H
	DB	0bbH
	DB	014H
	DB	0cdH
	DB	05fH
	DB	0c1H
	DB	0f9H
	DB	018H
	DB	065H
	DB	05aH
	DB	0e2H
	DB	05cH
	DB	0efH
	DB	021H
	DB	081H
	DB	01cH
	DB	03cH
	DB	042H
	DB	08bH
	DB	01H
	DB	08eH
	DB	04fH
	DB	05H
	DB	084H
	DB	02H
	DB	0aeH
	DB	0e3H
	DB	06aH
	DB	08fH
	DB	0a0H
	DB	06H
	DB	0bH
	DB	0edH
	DB	098H
	DB	07fH
	DB	0d4H
	DB	0d3H
	DB	01fH
	DB	0ebH
	DB	034H
	DB	02cH
	DB	051H
	DB	0eaH
	DB	0c8H
	DB	048H
	DB	0abH
	DB	0f2H
	DB	02aH
	DB	068H
	DB	0a2H
	DB	0fdH
	DB	03aH
	DB	0ceH
	DB	0ccH
	DB	0b5H
	DB	070H
	DB	0eH
	DB	056H
	DB	08H
	DB	0cH
	DB	076H
	DB	012H
	DB	0bfH
	DB	072H
	DB	013H
	DB	047H
	DB	09cH
	DB	0b7H
	DB	05dH
	DB	087H
	DB	015H
	DB	0a1H
	DB	096H
	DB	029H
	DB	010H
	DB	07bH
	DB	09aH
	DB	0c7H
	DB	0f3H
	DB	091H
	DB	078H
	DB	06fH
	DB	09dH
	DB	09eH
	DB	0b2H
	DB	0b1H
	DB	032H
	DB	075H
	DB	019H
	DB	03dH
	DB	0ffH
	DB	035H
	DB	08aH
	DB	07eH
	DB	06dH
	DB	054H
	DB	0c6H
	DB	080H
	DB	0c3H
	DB	0bdH
	DB	0dH
	DB	057H
	DB	0dfH
	DB	0f5H
	DB	024H
	DB	0a9H
	DB	03eH
	DB	0a8H
	DB	043H
	DB	0c9H
	DB	0d7H
	DB	079H
	DB	0d6H
	DB	0f6H
	DB	07cH
	DB	022H
	DB	0b9H
	DB	03H
	DB	0e0H
	DB	0fH
	DB	0ecH
	DB	0deH
	DB	07aH
	DB	094H
	DB	0b0H
	DB	0bcH
	DB	0dcH
	DB	0e8H
	DB	028H
	DB	050H
	DB	04eH
	DB	033H
	DB	0aH
	DB	04aH
	DB	0a7H
	DB	097H
	DB	060H
	DB	073H
	DB	01eH
	DB	00H
	DB	062H
	DB	044H
	DB	01aH
	DB	0b8H
	DB	038H
	DB	082H
	DB	064H
	DB	09fH
	DB	026H
	DB	041H
	DB	0adH
	DB	045H
	DB	046H
	DB	092H
	DB	027H
	DB	05eH
	DB	055H
	DB	02fH
	DB	08cH
	DB	0a3H
	DB	0a5H
	DB	07dH
	DB	069H
	DB	0d5H
	DB	095H
	DB	03bH
	DB	07H
	DB	058H
	DB	0b3H
	DB	040H
	DB	086H
	DB	0acH
	DB	01dH
	DB	0f7H
	DB	030H
	DB	037H
	DB	06bH
	DB	0e4H
	DB	088H
	DB	0d9H
	DB	0e7H
	DB	089H
	DB	0e1H
	DB	01bH
	DB	083H
	DB	049H
	DB	04cH
	DB	03fH
	DB	0f8H
	DB	0feH
	DB	08dH
	DB	053H
	DB	0aaH
	DB	090H
	DB	0caH
	DB	0d8H
	DB	085H
	DB	061H
	DB	020H
	DB	071H
	DB	067H
	DB	0a4H
	DB	02dH
	DB	02bH
	DB	09H
	DB	05bH
	DB	0cbH
	DB	09bH
	DB	025H
	DB	0d0H
	DB	0beH
	DB	0e5H
	DB	06cH
	DB	052H
	DB	059H
	DB	0a6H
	DB	074H
	DB	0d2H
	DB	0e6H
	DB	0f4H
	DB	0b4H
	DB	0c0H
	DB	0d1H
	DB	066H
	DB	0afH
	DB	0c2H
	DB	039H
	DB	04bH
	DB	063H
	DB	0b6H
_pi_inv	DB	0a5H
	DB	02dH
	DB	032H
	DB	08fH
	DB	0eH
	DB	030H
	DB	038H
	DB	0c0H
	DB	054H
	DB	0e6H
	DB	09eH
	DB	039H
	DB	055H
	DB	07eH
	DB	052H
	DB	091H
	DB	064H
	DB	03H
	DB	057H
	DB	05aH
	DB	01cH
	DB	060H
	DB	07H
	DB	018H
	DB	021H
	DB	072H
	DB	0a8H
	DB	0d1H
	DB	029H
	DB	0c6H
	DB	0a4H
	DB	03fH
	DB	0e0H
	DB	027H
	DB	08dH
	DB	0cH
	DB	082H
	DB	0eaH
	DB	0aeH
	DB	0b4H
	DB	09aH
	DB	063H
	DB	049H
	DB	0e5H
	DB	042H
	DB	0e4H
	DB	015H
	DB	0b7H
	DB	0c8H
	DB	06H
	DB	070H
	DB	09dH
	DB	041H
	DB	075H
	DB	019H
	DB	0c9H
	DB	0aaH
	DB	0fcH
	DB	04dH
	DB	0bfH
	DB	02aH
	DB	073H
	DB	084H
	DB	0d5H
	DB	0c3H
	DB	0afH
	DB	02bH
	DB	086H
	DB	0a7H
	DB	0b1H
	DB	0b2H
	DB	05bH
	DB	046H
	DB	0d3H
	DB	09fH
	DB	0fdH
	DB	0d4H
	DB	0fH
	DB	09cH
	DB	02fH
	DB	09bH
	DB	043H
	DB	0efH
	DB	0d9H
	DB	079H
	DB	0b6H
	DB	053H
	DB	07fH
	DB	0c1H
	DB	0f0H
	DB	023H
	DB	0e7H
	DB	025H
	DB	05eH
	DB	0b5H
	DB	01eH
	DB	0a2H
	DB	0dfH
	DB	0a6H
	DB	0feH
	DB	0acH
	DB	022H
	DB	0f9H
	DB	0e2H
	DB	04aH
	DB	0bcH
	DB	035H
	DB	0caH
	DB	0eeH
	DB	078H
	DB	05H
	DB	06bH
	DB	051H
	DB	0e1H
	DB	059H
	DB	0a3H
	DB	0f2H
	DB	071H
	DB	056H
	DB	011H
	DB	06aH
	DB	089H
	DB	094H
	DB	065H
	DB	08cH
	DB	0bbH
	DB	077H
	DB	03cH
	DB	07bH
	DB	028H
	DB	0abH
	DB	0d2H
	DB	031H
	DB	0deH
	DB	0c4H
	DB	05fH
	DB	0ccH
	DB	0cfH
	DB	076H
	DB	02cH
	DB	0b8H
	DB	0d8H
	DB	02eH
	DB	036H
	DB	0dbH
	DB	069H
	DB	0b3H
	DB	014H
	DB	095H
	DB	0beH
	DB	062H
	DB	0a1H
	DB	03bH
	DB	016H
	DB	066H
	DB	0e9H
	DB	05cH
	DB	06cH
	DB	06dH
	DB	0adH
	DB	037H
	DB	061H
	DB	04bH
	DB	0b9H
	DB	0e3H
	DB	0baH
	DB	0f1H
	DB	0a0H
	DB	085H
	DB	083H
	DB	0daH
	DB	047H
	DB	0c5H
	DB	0b0H
	DB	033H
	DB	0faH
	DB	096H
	DB	06fH
	DB	06eH
	DB	0c2H
	DB	0f6H
	DB	050H
	DB	0ffH
	DB	05dH
	DB	0a9H
	DB	08eH
	DB	017H
	DB	01bH
	DB	097H
	DB	07dH
	DB	0ecH
	DB	058H
	DB	0f7H
	DB	01fH
	DB	0fbH
	DB	07cH
	DB	09H
	DB	0dH
	DB	07aH
	DB	067H
	DB	045H
	DB	087H
	DB	0dcH
	DB	0e8H
	DB	04fH
	DB	01dH
	DB	04eH
	DB	04H
	DB	0ebH
	DB	0f8H
	DB	0f3H
	DB	03eH
	DB	03dH
	DB	0bdH
	DB	08aH
	DB	088H
	DB	0ddH
	DB	0cdH
	DB	0bH
	DB	013H
	DB	098H
	DB	02H
	DB	093H
	DB	080H
	DB	090H
	DB	0d0H
	DB	024H
	DB	034H
	DB	0cbH
	DB	0edH
	DB	0f4H
	DB	0ceH
	DB	099H
	DB	010H
	DB	044H
	DB	040H
	DB	092H
	DB	03aH
	DB	01H
	DB	026H
	DB	012H
	DB	01aH
	DB	048H
	DB	068H
	DB	0f5H
	DB	081H
	DB	08bH
	DB	0c7H
	DB	0d6H
	DB	020H
	DB	0aH
	DB	08H
	DB	00H
	DB	04cH
	DB	0d7H
	DB	074H
_mult_mod_poly DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	010H
	DB	020H
	DB	030H
	DB	040H
	DB	050H
	DB	060H
	DB	070H
	DB	080H
	DB	090H
	DB	0a0H
	DB	0b0H
	DB	0c0H
	DB	0d0H
	DB	0e0H
	DB	0f0H
	DB	0c3H
	DB	0d3H
	DB	0e3H
	DB	0f3H
	DB	083H
	DB	093H
	DB	0a3H
	DB	0b3H
	DB	043H
	DB	053H
	DB	063H
	DB	073H
	DB	03H
	DB	013H
	DB	023H
	DB	033H
	DB	045H
	DB	055H
	DB	065H
	DB	075H
	DB	05H
	DB	015H
	DB	025H
	DB	035H
	DB	0c5H
	DB	0d5H
	DB	0e5H
	DB	0f5H
	DB	085H
	DB	095H
	DB	0a5H
	DB	0b5H
	DB	086H
	DB	096H
	DB	0a6H
	DB	0b6H
	DB	0c6H
	DB	0d6H
	DB	0e6H
	DB	0f6H
	DB	06H
	DB	016H
	DB	026H
	DB	036H
	DB	046H
	DB	056H
	DB	066H
	DB	076H
	DB	08aH
	DB	09aH
	DB	0aaH
	DB	0baH
	DB	0caH
	DB	0daH
	DB	0eaH
	DB	0faH
	DB	0aH
	DB	01aH
	DB	02aH
	DB	03aH
	DB	04aH
	DB	05aH
	DB	06aH
	DB	07aH
	DB	049H
	DB	059H
	DB	069H
	DB	079H
	DB	09H
	DB	019H
	DB	029H
	DB	039H
	DB	0c9H
	DB	0d9H
	DB	0e9H
	DB	0f9H
	DB	089H
	DB	099H
	DB	0a9H
	DB	0b9H
	DB	0cfH
	DB	0dfH
	DB	0efH
	DB	0ffH
	DB	08fH
	DB	09fH
	DB	0afH
	DB	0bfH
	DB	04fH
	DB	05fH
	DB	06fH
	DB	07fH
	DB	0fH
	DB	01fH
	DB	02fH
	DB	03fH
	DB	0cH
	DB	01cH
	DB	02cH
	DB	03cH
	DB	04cH
	DB	05cH
	DB	06cH
	DB	07cH
	DB	08cH
	DB	09cH
	DB	0acH
	DB	0bcH
	DB	0ccH
	DB	0dcH
	DB	0ecH
	DB	0fcH
	DB	0d7H
	DB	0c7H
	DB	0f7H
	DB	0e7H
	DB	097H
	DB	087H
	DB	0b7H
	DB	0a7H
	DB	057H
	DB	047H
	DB	077H
	DB	067H
	DB	017H
	DB	07H
	DB	037H
	DB	027H
	DB	014H
	DB	04H
	DB	034H
	DB	024H
	DB	054H
	DB	044H
	DB	074H
	DB	064H
	DB	094H
	DB	084H
	DB	0b4H
	DB	0a4H
	DB	0d4H
	DB	0c4H
	DB	0f4H
	DB	0e4H
	DB	092H
	DB	082H
	DB	0b2H
	DB	0a2H
	DB	0d2H
	DB	0c2H
	DB	0f2H
	DB	0e2H
	DB	012H
	DB	02H
	DB	032H
	DB	022H
	DB	052H
	DB	042H
	DB	072H
	DB	062H
	DB	051H
	DB	041H
	DB	071H
	DB	061H
	DB	011H
	DB	01H
	DB	031H
	DB	021H
	DB	0d1H
	DB	0c1H
	DB	0f1H
	DB	0e1H
	DB	091H
	DB	081H
	DB	0b1H
	DB	0a1H
	DB	05dH
	DB	04dH
	DB	07dH
	DB	06dH
	DB	01dH
	DB	0dH
	DB	03dH
	DB	02dH
	DB	0ddH
	DB	0cdH
	DB	0fdH
	DB	0edH
	DB	09dH
	DB	08dH
	DB	0bdH
	DB	0adH
	DB	09eH
	DB	08eH
	DB	0beH
	DB	0aeH
	DB	0deH
	DB	0ceH
	DB	0feH
	DB	0eeH
	DB	01eH
	DB	0eH
	DB	03eH
	DB	02eH
	DB	05eH
	DB	04eH
	DB	07eH
	DB	06eH
	DB	018H
	DB	08H
	DB	038H
	DB	028H
	DB	058H
	DB	048H
	DB	078H
	DB	068H
	DB	098H
	DB	088H
	DB	0b8H
	DB	0a8H
	DB	0d8H
	DB	0c8H
	DB	0f8H
	DB	0e8H
	DB	0dbH
	DB	0cbH
	DB	0fbH
	DB	0ebH
	DB	09bH
	DB	08bH
	DB	0bbH
	DB	0abH
	DB	05bH
	DB	04bH
	DB	07bH
	DB	06bH
	DB	01bH
	DB	0bH
	DB	03bH
	DB	02bH
	DB	00H
	DB	020H
	DB	040H
	DB	060H
	DB	080H
	DB	0a0H
	DB	0c0H
	DB	0e0H
	DB	0c3H
	DB	0e3H
	DB	083H
	DB	0a3H
	DB	043H
	DB	063H
	DB	03H
	DB	023H
	DB	045H
	DB	065H
	DB	05H
	DB	025H
	DB	0c5H
	DB	0e5H
	DB	085H
	DB	0a5H
	DB	086H
	DB	0a6H
	DB	0c6H
	DB	0e6H
	DB	06H
	DB	026H
	DB	046H
	DB	066H
	DB	08aH
	DB	0aaH
	DB	0caH
	DB	0eaH
	DB	0aH
	DB	02aH
	DB	04aH
	DB	06aH
	DB	049H
	DB	069H
	DB	09H
	DB	029H
	DB	0c9H
	DB	0e9H
	DB	089H
	DB	0a9H
	DB	0cfH
	DB	0efH
	DB	08fH
	DB	0afH
	DB	04fH
	DB	06fH
	DB	0fH
	DB	02fH
	DB	0cH
	DB	02cH
	DB	04cH
	DB	06cH
	DB	08cH
	DB	0acH
	DB	0ccH
	DB	0ecH
	DB	0d7H
	DB	0f7H
	DB	097H
	DB	0b7H
	DB	057H
	DB	077H
	DB	017H
	DB	037H
	DB	014H
	DB	034H
	DB	054H
	DB	074H
	DB	094H
	DB	0b4H
	DB	0d4H
	DB	0f4H
	DB	092H
	DB	0b2H
	DB	0d2H
	DB	0f2H
	DB	012H
	DB	032H
	DB	052H
	DB	072H
	DB	051H
	DB	071H
	DB	011H
	DB	031H
	DB	0d1H
	DB	0f1H
	DB	091H
	DB	0b1H
	DB	05dH
	DB	07dH
	DB	01dH
	DB	03dH
	DB	0ddH
	DB	0fdH
	DB	09dH
	DB	0bdH
	DB	09eH
	DB	0beH
	DB	0deH
	DB	0feH
	DB	01eH
	DB	03eH
	DB	05eH
	DB	07eH
	DB	018H
	DB	038H
	DB	058H
	DB	078H
	DB	098H
	DB	0b8H
	DB	0d8H
	DB	0f8H
	DB	0dbH
	DB	0fbH
	DB	09bH
	DB	0bbH
	DB	05bH
	DB	07bH
	DB	01bH
	DB	03bH
	DB	06dH
	DB	04dH
	DB	02dH
	DB	0dH
	DB	0edH
	DB	0cdH
	DB	0adH
	DB	08dH
	DB	0aeH
	DB	08eH
	DB	0eeH
	DB	0ceH
	DB	02eH
	DB	0eH
	DB	06eH
	DB	04eH
	DB	028H
	DB	08H
	DB	068H
	DB	048H
	DB	0a8H
	DB	088H
	DB	0e8H
	DB	0c8H
	DB	0ebH
	DB	0cbH
	DB	0abH
	DB	08bH
	DB	06bH
	DB	04bH
	DB	02bH
	DB	0bH
	DB	0e7H
	DB	0c7H
	DB	0a7H
	DB	087H
	DB	067H
	DB	047H
	DB	027H
	DB	07H
	DB	024H
	DB	04H
	DB	064H
	DB	044H
	DB	0a4H
	DB	084H
	DB	0e4H
	DB	0c4H
	DB	0a2H
	DB	082H
	DB	0e2H
	DB	0c2H
	DB	022H
	DB	02H
	DB	062H
	DB	042H
	DB	061H
	DB	041H
	DB	021H
	DB	01H
	DB	0e1H
	DB	0c1H
	DB	0a1H
	DB	081H
	DB	0baH
	DB	09aH
	DB	0faH
	DB	0daH
	DB	03aH
	DB	01aH
	DB	07aH
	DB	05aH
	DB	079H
	DB	059H
	DB	039H
	DB	019H
	DB	0f9H
	DB	0d9H
	DB	0b9H
	DB	099H
	DB	0ffH
	DB	0dfH
	DB	0bfH
	DB	09fH
	DB	07fH
	DB	05fH
	DB	03fH
	DB	01fH
	DB	03cH
	DB	01cH
	DB	07cH
	DB	05cH
	DB	0bcH
	DB	09cH
	DB	0fcH
	DB	0dcH
	DB	030H
	DB	010H
	DB	070H
	DB	050H
	DB	0b0H
	DB	090H
	DB	0f0H
	DB	0d0H
	DB	0f3H
	DB	0d3H
	DB	0b3H
	DB	093H
	DB	073H
	DB	053H
	DB	033H
	DB	013H
	DB	075H
	DB	055H
	DB	035H
	DB	015H
	DB	0f5H
	DB	0d5H
	DB	0b5H
	DB	095H
	DB	0b6H
	DB	096H
	DB	0f6H
	DB	0d6H
	DB	036H
	DB	016H
	DB	076H
	DB	056H
	DB	00H
	DB	085H
	DB	0c9H
	DB	04cH
	DB	051H
	DB	0d4H
	DB	098H
	DB	01dH
	DB	0a2H
	DB	027H
	DB	06bH
	DB	0eeH
	DB	0f3H
	DB	076H
	DB	03aH
	DB	0bfH
	DB	087H
	DB	02H
	DB	04eH
	DB	0cbH
	DB	0d6H
	DB	053H
	DB	01fH
	DB	09aH
	DB	025H
	DB	0a0H
	DB	0ecH
	DB	069H
	DB	074H
	DB	0f1H
	DB	0bdH
	DB	038H
	DB	0cdH
	DB	048H
	DB	04H
	DB	081H
	DB	09cH
	DB	019H
	DB	055H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	0a6H
	DB	023H
	DB	03eH
	DB	0bbH
	DB	0f7H
	DB	072H
	DB	04aH
	DB	0cfH
	DB	083H
	DB	06H
	DB	01bH
	DB	09eH
	DB	0d2H
	DB	057H
	DB	0e8H
	DB	06dH
	DB	021H
	DB	0a4H
	DB	0b9H
	DB	03cH
	DB	070H
	DB	0f5H
	DB	059H
	DB	0dcH
	DB	090H
	DB	015H
	DB	08H
	DB	08dH
	DB	0c1H
	DB	044H
	DB	0fbH
	DB	07eH
	DB	032H
	DB	0b7H
	DB	0aaH
	DB	02fH
	DB	063H
	DB	0e6H
	DB	0deH
	DB	05bH
	DB	017H
	DB	092H
	DB	08fH
	DB	0aH
	DB	046H
	DB	0c3H
	DB	07cH
	DB	0f9H
	DB	0b5H
	DB	030H
	DB	02dH
	DB	0a8H
	DB	0e4H
	DB	061H
	DB	094H
	DB	011H
	DB	05dH
	DB	0d8H
	DB	0c5H
	DB	040H
	DB	0cH
	DB	089H
	DB	036H
	DB	0b3H
	DB	0ffH
	DB	07aH
	DB	067H
	DB	0e2H
	DB	0aeH
	DB	02bH
	DB	013H
	DB	096H
	DB	0daH
	DB	05fH
	DB	042H
	DB	0c7H
	DB	08bH
	DB	0eH
	DB	0b1H
	DB	034H
	DB	078H
	DB	0fdH
	DB	0e0H
	DB	065H
	DB	029H
	DB	0acH
	DB	0b2H
	DB	037H
	DB	07bH
	DB	0feH
	DB	0e3H
	DB	066H
	DB	02aH
	DB	0afH
	DB	010H
	DB	095H
	DB	0d9H
	DB	05cH
	DB	041H
	DB	0c4H
	DB	088H
	DB	0dH
	DB	035H
	DB	0b0H
	DB	0fcH
	DB	079H
	DB	064H
	DB	0e1H
	DB	0adH
	DB	028H
	DB	097H
	DB	012H
	DB	05eH
	DB	0dbH
	DB	0c6H
	DB	043H
	DB	0fH
	DB	08aH
	DB	07fH
	DB	0faH
	DB	0b6H
	DB	033H
	DB	02eH
	DB	0abH
	DB	0e7H
	DB	062H
	DB	0ddH
	DB	058H
	DB	014H
	DB	091H
	DB	08cH
	DB	09H
	DB	045H
	DB	0c0H
	DB	0f8H
	DB	07dH
	DB	031H
	DB	0b4H
	DB	0a9H
	DB	02cH
	DB	060H
	DB	0e5H
	DB	05aH
	DB	0dfH
	DB	093H
	DB	016H
	DB	0bH
	DB	08eH
	DB	0c2H
	DB	047H
	DB	0ebH
	DB	06eH
	DB	022H
	DB	0a7H
	DB	0baH
	DB	03fH
	DB	073H
	DB	0f6H
	DB	049H
	DB	0ccH
	DB	080H
	DB	05H
	DB	018H
	DB	09dH
	DB	0d1H
	DB	054H
	DB	06cH
	DB	0e9H
	DB	0a5H
	DB	020H
	DB	03dH
	DB	0b8H
	DB	0f4H
	DB	071H
	DB	0ceH
	DB	04bH
	DB	07H
	DB	082H
	DB	09fH
	DB	01aH
	DB	056H
	DB	0d3H
	DB	026H
	DB	0a3H
	DB	0efH
	DB	06aH
	DB	077H
	DB	0f2H
	DB	0beH
	DB	03bH
	DB	084H
	DB	01H
	DB	04dH
	DB	0c8H
	DB	0d5H
	DB	050H
	DB	01cH
	DB	099H
	DB	0a1H
	DB	024H
	DB	068H
	DB	0edH
	DB	0f0H
	DB	075H
	DB	039H
	DB	0bcH
	DB	03H
	DB	086H
	DB	0caH
	DB	04fH
	DB	052H
	DB	0d7H
	DB	09bH
	DB	01eH
	DB	00H
	DB	094H
	DB	0ebH
	DB	07fH
	DB	015H
	DB	081H
	DB	0feH
	DB	06aH
	DB	02aH
	DB	0beH
	DB	0c1H
	DB	055H
	DB	03fH
	DB	0abH
	DB	0d4H
	DB	040H
	DB	054H
	DB	0c0H
	DB	0bfH
	DB	02bH
	DB	041H
	DB	0d5H
	DB	0aaH
	DB	03eH
	DB	07eH
	DB	0eaH
	DB	095H
	DB	01H
	DB	06bH
	DB	0ffH
	DB	080H
	DB	014H
	DB	0a8H
	DB	03cH
	DB	043H
	DB	0d7H
	DB	0bdH
	DB	029H
	DB	056H
	DB	0c2H
	DB	082H
	DB	016H
	DB	069H
	DB	0fdH
	DB	097H
	DB	03H
	DB	07cH
	DB	0e8H
	DB	0fcH
	DB	068H
	DB	017H
	DB	083H
	DB	0e9H
	DB	07dH
	DB	02H
	DB	096H
	DB	0d6H
	DB	042H
	DB	03dH
	DB	0a9H
	DB	0c3H
	DB	057H
	DB	028H
	DB	0bcH
	DB	093H
	DB	07H
	DB	078H
	DB	0ecH
	DB	086H
	DB	012H
	DB	06dH
	DB	0f9H
	DB	0b9H
	DB	02dH
	DB	052H
	DB	0c6H
	DB	0acH
	DB	038H
	DB	047H
	DB	0d3H
	DB	0c7H
	DB	053H
	DB	02cH
	DB	0b8H
	DB	0d2H
	DB	046H
	DB	039H
	DB	0adH
	DB	0edH
	DB	079H
	DB	06H
	DB	092H
	DB	0f8H
	DB	06cH
	DB	013H
	DB	087H
	DB	03bH
	DB	0afH
	DB	0d0H
	DB	044H
	DB	02eH
	DB	0baH
	DB	0c5H
	DB	051H
	DB	011H
	DB	085H
	DB	0faH
	DB	06eH
	DB	04H
	DB	090H
	DB	0efH
	DB	07bH
	DB	06fH
	DB	0fbH
	DB	084H
	DB	010H
	DB	07aH
	DB	0eeH
	DB	091H
	DB	05H
	DB	045H
	DB	0d1H
	DB	0aeH
	DB	03aH
	DB	050H
	DB	0c4H
	DB	0bbH
	DB	02fH
	DB	0e5H
	DB	071H
	DB	0eH
	DB	09aH
	DB	0f0H
	DB	064H
	DB	01bH
	DB	08fH
	DB	0cfH
	DB	05bH
	DB	024H
	DB	0b0H
	DB	0daH
	DB	04eH
	DB	031H
	DB	0a5H
	DB	0b1H
	DB	025H
	DB	05aH
	DB	0ceH
	DB	0a4H
	DB	030H
	DB	04fH
	DB	0dbH
	DB	09bH
	DB	0fH
	DB	070H
	DB	0e4H
	DB	08eH
	DB	01aH
	DB	065H
	DB	0f1H
	DB	04dH
	DB	0d9H
	DB	0a6H
	DB	032H
	DB	058H
	DB	0ccH
	DB	0b3H
	DB	027H
	DB	067H
	DB	0f3H
	DB	08cH
	DB	018H
	DB	072H
	DB	0e6H
	DB	099H
	DB	0dH
	DB	019H
	DB	08dH
	DB	0f2H
	DB	066H
	DB	0cH
	DB	098H
	DB	0e7H
	DB	073H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	04cH
	DB	026H
	DB	0b2H
	DB	0cdH
	DB	059H
	DB	076H
	DB	0e2H
	DB	09dH
	DB	09H
	DB	063H
	DB	0f7H
	DB	088H
	DB	01cH
	DB	05cH
	DB	0c8H
	DB	0b7H
	DB	023H
	DB	049H
	DB	0ddH
	DB	0a2H
	DB	036H
	DB	022H
	DB	0b6H
	DB	0c9H
	DB	05dH
	DB	037H
	DB	0a3H
	DB	0dcH
	DB	048H
	DB	08H
	DB	09cH
	DB	0e3H
	DB	077H
	DB	01dH
	DB	089H
	DB	0f6H
	DB	062H
	DB	0deH
	DB	04aH
	DB	035H
	DB	0a1H
	DB	0cbH
	DB	05fH
	DB	020H
	DB	0b4H
	DB	0f4H
	DB	060H
	DB	01fH
	DB	08bH
	DB	0e1H
	DB	075H
	DB	0aH
	DB	09eH
	DB	08aH
	DB	01eH
	DB	061H
	DB	0f5H
	DB	09fH
	DB	0bH
	DB	074H
	DB	0e0H
	DB	0a0H
	DB	034H
	DB	04bH
	DB	0dfH
	DB	0b5H
	DB	021H
	DB	05eH
	DB	0caH
	DB	00H
	DB	0c0H
	DB	043H
	DB	083H
	DB	086H
	DB	046H
	DB	0c5H
	DB	05H
	DB	0cfH
	DB	0fH
	DB	08cH
	DB	04cH
	DB	049H
	DB	089H
	DB	0aH
	DB	0caH
	DB	05dH
	DB	09dH
	DB	01eH
	DB	0deH
	DB	0dbH
	DB	01bH
	DB	098H
	DB	058H
	DB	092H
	DB	052H
	DB	0d1H
	DB	011H
	DB	014H
	DB	0d4H
	DB	057H
	DB	097H
	DB	0baH
	DB	07aH
	DB	0f9H
	DB	039H
	DB	03cH
	DB	0fcH
	DB	07fH
	DB	0bfH
	DB	075H
	DB	0b5H
	DB	036H
	DB	0f6H
	DB	0f3H
	DB	033H
	DB	0b0H
	DB	070H
	DB	0e7H
	DB	027H
	DB	0a4H
	DB	064H
	DB	061H
	DB	0a1H
	DB	022H
	DB	0e2H
	DB	028H
	DB	0e8H
	DB	06bH
	DB	0abH
	DB	0aeH
	DB	06eH
	DB	0edH
	DB	02dH
	DB	0b7H
	DB	077H
	DB	0f4H
	DB	034H
	DB	031H
	DB	0f1H
	DB	072H
	DB	0b2H
	DB	078H
	DB	0b8H
	DB	03bH
	DB	0fbH
	DB	0feH
	DB	03eH
	DB	0bdH
	DB	07dH
	DB	0eaH
	DB	02aH
	DB	0a9H
	DB	069H
	DB	06cH
	DB	0acH
	DB	02fH
	DB	0efH
	DB	025H
	DB	0e5H
	DB	066H
	DB	0a6H
	DB	0a3H
	DB	063H
	DB	0e0H
	DB	020H
	DB	0dH
	DB	0cdH
	DB	04eH
	DB	08eH
	DB	08bH
	DB	04bH
	DB	0c8H
	DB	08H
	DB	0c2H
	DB	02H
	DB	081H
	DB	041H
	DB	044H
	DB	084H
	DB	07H
	DB	0c7H
	DB	050H
	DB	090H
	DB	013H
	DB	0d3H
	DB	0d6H
	DB	016H
	DB	095H
	DB	055H
	DB	09fH
	DB	05fH
	DB	0dcH
	DB	01cH
	DB	019H
	DB	0d9H
	DB	05aH
	DB	09aH
	DB	0adH
	DB	06dH
	DB	0eeH
	DB	02eH
	DB	02bH
	DB	0ebH
	DB	068H
	DB	0a8H
	DB	062H
	DB	0a2H
	DB	021H
	DB	0e1H
	DB	0e4H
	DB	024H
	DB	0a7H
	DB	067H
	DB	0f0H
	DB	030H
	DB	0b3H
	DB	073H
	DB	076H
	DB	0b6H
	DB	035H
	DB	0f5H
	DB	03fH
	DB	0ffH
	DB	07cH
	DB	0bcH
	DB	0b9H
	DB	079H
	DB	0faH
	DB	03aH
	DB	017H
	DB	0d7H
	DB	054H
	DB	094H
	DB	091H
	DB	051H
	DB	0d2H
	DB	012H
	DB	0d8H
	DB	018H
	DB	09bH
	DB	05bH
	DB	05eH
	DB	09eH
	DB	01dH
	DB	0ddH
	DB	04aH
	DB	08aH
	DB	09H
	DB	0c9H
	DB	0ccH
	DB	0cH
	DB	08fH
	DB	04fH
	DB	085H
	DB	045H
	DB	0c6H
	DB	06H
	DB	03H
	DB	0c3H
	DB	040H
	DB	080H
	DB	01aH
	DB	0daH
	DB	059H
	DB	099H
	DB	09cH
	DB	05cH
	DB	0dfH
	DB	01fH
	DB	0d5H
	DB	015H
	DB	096H
	DB	056H
	DB	053H
	DB	093H
	DB	010H
	DB	0d0H
	DB	047H
	DB	087H
	DB	04H
	DB	0c4H
	DB	0c1H
	DB	01H
	DB	082H
	DB	042H
	DB	088H
	DB	048H
	DB	0cbH
	DB	0bH
	DB	0eH
	DB	0ceH
	DB	04dH
	DB	08dH
	DB	0a0H
	DB	060H
	DB	0e3H
	DB	023H
	DB	026H
	DB	0e6H
	DB	065H
	DB	0a5H
	DB	06fH
	DB	0afH
	DB	02cH
	DB	0ecH
	DB	0e9H
	DB	029H
	DB	0aaH
	DB	06aH
	DB	0fdH
	DB	03dH
	DB	0beH
	DB	07eH
	DB	07bH
	DB	0bbH
	DB	038H
	DB	0f8H
	DB	032H
	DB	0f2H
	DB	071H
	DB	0b1H
	DB	0b4H
	DB	074H
	DB	0f7H
	DB	037H
	DB	00H
	DB	0c2H
	DB	047H
	DB	085H
	DB	08eH
	DB	04cH
	DB	0c9H
	DB	0bH
	DB	0dfH
	DB	01dH
	DB	098H
	DB	05aH
	DB	051H
	DB	093H
	DB	016H
	DB	0d4H
	DB	07dH
	DB	0bfH
	DB	03aH
	DB	0f8H
	DB	0f3H
	DB	031H
	DB	0b4H
	DB	076H
	DB	0a2H
	DB	060H
	DB	0e5H
	DB	027H
	DB	02cH
	DB	0eeH
	DB	06bH
	DB	0a9H
	DB	0faH
	DB	038H
	DB	0bdH
	DB	07fH
	DB	074H
	DB	0b6H
	DB	033H
	DB	0f1H
	DB	025H
	DB	0e7H
	DB	062H
	DB	0a0H
	DB	0abH
	DB	069H
	DB	0ecH
	DB	02eH
	DB	087H
	DB	045H
	DB	0c0H
	DB	02H
	DB	09H
	DB	0cbH
	DB	04eH
	DB	08cH
	DB	058H
	DB	09aH
	DB	01fH
	DB	0ddH
	DB	0d6H
	DB	014H
	DB	091H
	DB	053H
	DB	037H
	DB	0f5H
	DB	070H
	DB	0b2H
	DB	0b9H
	DB	07bH
	DB	0feH
	DB	03cH
	DB	0e8H
	DB	02aH
	DB	0afH
	DB	06dH
	DB	066H
	DB	0a4H
	DB	021H
	DB	0e3H
	DB	04aH
	DB	088H
	DB	0dH
	DB	0cfH
	DB	0c4H
	DB	06H
	DB	083H
	DB	041H
	DB	095H
	DB	057H
	DB	0d2H
	DB	010H
	DB	01bH
	DB	0d9H
	DB	05cH
	DB	09eH
	DB	0cdH
	DB	0fH
	DB	08aH
	DB	048H
	DB	043H
	DB	081H
	DB	04H
	DB	0c6H
	DB	012H
	DB	0d0H
	DB	055H
	DB	097H
	DB	09cH
	DB	05eH
	DB	0dbH
	DB	019H
	DB	0b0H
	DB	072H
	DB	0f7H
	DB	035H
	DB	03eH
	DB	0fcH
	DB	079H
	DB	0bbH
	DB	06fH
	DB	0adH
	DB	028H
	DB	0eaH
	DB	0e1H
	DB	023H
	DB	0a6H
	DB	064H
	DB	06eH
	DB	0acH
	DB	029H
	DB	0ebH
	DB	0e0H
	DB	022H
	DB	0a7H
	DB	065H
	DB	0b1H
	DB	073H
	DB	0f6H
	DB	034H
	DB	03fH
	DB	0fdH
	DB	078H
	DB	0baH
	DB	013H
	DB	0d1H
	DB	054H
	DB	096H
	DB	09dH
	DB	05fH
	DB	0daH
	DB	018H
	DB	0ccH
	DB	0eH
	DB	08bH
	DB	049H
	DB	042H
	DB	080H
	DB	05H
	DB	0c7H
	DB	094H
	DB	056H
	DB	0d3H
	DB	011H
	DB	01aH
	DB	0d8H
	DB	05dH
	DB	09fH
	DB	04bH
	DB	089H
	DB	0cH
	DB	0ceH
	DB	0c5H
	DB	07H
	DB	082H
	DB	040H
	DB	0e9H
	DB	02bH
	DB	0aeH
	DB	06cH
	DB	067H
	DB	0a5H
	DB	020H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	071H
	DB	0b3H
	DB	0b8H
	DB	07aH
	DB	0ffH
	DB	03dH
	DB	059H
	DB	09bH
	DB	01eH
	DB	0dcH
	DB	0d7H
	DB	015H
	DB	090H
	DB	052H
	DB	086H
	DB	044H
	DB	0c1H
	DB	03H
	DB	08H
	DB	0caH
	DB	04fH
	DB	08dH
	DB	024H
	DB	0e6H
	DB	063H
	DB	0a1H
	DB	0aaH
	DB	068H
	DB	0edH
	DB	02fH
	DB	0fbH
	DB	039H
	DB	0bcH
	DB	07eH
	DB	075H
	DB	0b7H
	DB	032H
	DB	0f0H
	DB	0a3H
	DB	061H
	DB	0e4H
	DB	026H
	DB	02dH
	DB	0efH
	DB	06aH
	DB	0a8H
	DB	07cH
	DB	0beH
	DB	03bH
	DB	0f9H
	DB	0f2H
	DB	030H
	DB	0b5H
	DB	077H
	DB	0deH
	DB	01cH
	DB	099H
	DB	05bH
	DB	050H
	DB	092H
	DB	017H
	DB	0d5H
	DB	01H
	DB	0c3H
	DB	046H
	DB	084H
	DB	08fH
	DB	04dH
	DB	0c8H
	DB	0aH
	DB	00H
	DB	0fbH
	DB	035H
	DB	0ceH
	DB	06aH
	DB	091H
	DB	05fH
	DB	0a4H
	DB	0d4H
	DB	02fH
	DB	0e1H
	DB	01aH
	DB	0beH
	DB	045H
	DB	08bH
	DB	070H
	DB	06bH
	DB	090H
	DB	05eH
	DB	0a5H
	DB	01H
	DB	0faH
	DB	034H
	DB	0cfH
	DB	0bfH
	DB	044H
	DB	08aH
	DB	071H
	DB	0d5H
	DB	02eH
	DB	0e0H
	DB	01bH
	DB	0d6H
	DB	02dH
	DB	0e3H
	DB	018H
	DB	0bcH
	DB	047H
	DB	089H
	DB	072H
	DB	02H
	DB	0f9H
	DB	037H
	DB	0ccH
	DB	068H
	DB	093H
	DB	05dH
	DB	0a6H
	DB	0bdH
	DB	046H
	DB	088H
	DB	073H
	DB	0d7H
	DB	02cH
	DB	0e2H
	DB	019H
	DB	069H
	DB	092H
	DB	05cH
	DB	0a7H
	DB	03H
	DB	0f8H
	DB	036H
	DB	0cdH
	DB	06fH
	DB	094H
	DB	05aH
	DB	0a1H
	DB	05H
	DB	0feH
	DB	030H
	DB	0cbH
	DB	0bbH
	DB	040H
	DB	08eH
	DB	075H
	DB	0d1H
	DB	02aH
	DB	0e4H
	DB	01fH
	DB	04H
	DB	0ffH
	DB	031H
	DB	0caH
	DB	06eH
	DB	095H
	DB	05bH
	DB	0a0H
	DB	0d0H
	DB	02bH
	DB	0e5H
	DB	01eH
	DB	0baH
	DB	041H
	DB	08fH
	DB	074H
	DB	0b9H
	DB	042H
	DB	08cH
	DB	077H
	DB	0d3H
	DB	028H
	DB	0e6H
	DB	01dH
	DB	06dH
	DB	096H
	DB	058H
	DB	0a3H
	DB	07H
	DB	0fcH
	DB	032H
	DB	0c9H
	DB	0d2H
	DB	029H
	DB	0e7H
	DB	01cH
	DB	0b8H
	DB	043H
	DB	08dH
	DB	076H
	DB	06H
	DB	0fdH
	DB	033H
	DB	0c8H
	DB	06cH
	DB	097H
	DB	059H
	DB	0a2H
	DB	0deH
	DB	025H
	DB	0ebH
	DB	010H
	DB	0b4H
	DB	04fH
	DB	081H
	DB	07aH
	DB	0aH
	DB	0f1H
	DB	03fH
	DB	0c4H
	DB	060H
	DB	09bH
	DB	055H
	DB	0aeH
	DB	0b5H
	DB	04eH
	DB	080H
	DB	07bH
	DB	0dfH
	DB	024H
	DB	0eaH
	DB	011H
	DB	061H
	DB	09aH
	DB	054H
	DB	0afH
	DB	0bH
	DB	0f0H
	DB	03eH
	DB	0c5H
	DB	08H
	DB	0f3H
	DB	03dH
	DB	0c6H
	DB	062H
	DB	099H
	DB	057H
	DB	0acH
	DB	0dcH
	DB	027H
	DB	0e9H
	DB	012H
	DB	0b6H
	DB	04dH
	DB	083H
	DB	078H
	DB	063H
	DB	098H
	DB	056H
	DB	0adH
	DB	09H
	DB	0f2H
	DB	03cH
	DB	0c7H
	DB	0b7H
	DB	04cH
	DB	082H
	DB	079H
	DB	0ddH
	DB	026H
	DB	0e8H
	DB	013H
	DB	0b1H
	DB	04aH
	DB	084H
	DB	07fH
	DB	0dbH
	DB	020H
	DB	0eeH
	DB	015H
	DB	065H
	DB	09eH
	DB	050H
	DB	0abH
	DB	0fH
	DB	0f4H
	DB	03aH
	DB	0c1H
	DB	0daH
	DB	021H
	DB	0efH
	DB	014H
	DB	0b0H
	DB	04bH
	DB	085H
	DB	07eH
	DB	0eH
	DB	0f5H
	DB	03bH
	DB	0c0H
	DB	064H
	DB	09fH
	DB	051H
	DB	0aaH
	DB	067H
	DB	09cH
	DB	052H
	DB	0a9H
	DB	0dH
	DB	0f6H
	DB	038H
	DB	0c3H
	DB	0b3H
	DB	048H
	DB	086H
	DB	07dH
	DB	0d9H
	DB	022H
	DB	0ecH
	DB	017H
	DB	0cH
	DB	0f7H
	DB	039H
	DB	0c2H
	DB	066H
	DB	09dH
	DB	053H
	DB	0a8H
	DB	0d8H
	DB	023H
	DB	0edH
	DB	016H
	DB	0b2H
	DB	049H
	DB	087H
	DB	07cH
_DATA	ENDS
PUBLIC	_S@4
; Function compile flags: /Odtp
; File c:\users\alexis\desktop\sources_gostcrypt_windows_1.3.1_commented\sources_gostcrypt_windows_1.3.1é\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _S@4
_TEXT	SEGMENT
_valtmp$ = -4						; size = 4
_block$ = 8						; size = 4
_S@4	PROC						; COMDAT

; 141  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 142  : 	unsigned long valtmp;
; 143  : 
; 144  : 	valtmp  = ((unsigned long)(pi[(block[0] >> 24) & 0xFF]) << 24);

  00006	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0000e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00014	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  0001b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0001e	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 145  : 	valtmp |= ((unsigned long)(pi[(block[0] >> 16) & 0xFF]) << 16);

  00021	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00029	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0002f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  00036	c1 e2 10	 shl	 edx, 16			; 00000010H
  00039	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  0003c	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 146  : 	valtmp |= ((unsigned long)(pi[(block[0] >>  8) & 0xFF]) <<  8);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	c1 e9 08	 shr	 ecx, 8
  00047	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0004d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  00054	c1 e2 08	 shl	 edx, 8
  00057	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  0005a	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 147  : 	valtmp |= ((unsigned long)(pi[(block[0] >>  0) & 0xFF]) <<  0);

  0005d	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00068	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  0006f	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  00072	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 148  : 	block[0] = valtmp;

  00075	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _valtmp$[ebp]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx

; 149  : 
; 150  : 	valtmp  = ((unsigned long)(pi[(block[1] >> 24) & 0xFF]) << 24);

  0007d	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00080	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00083	c1 e8 18	 shr	 eax, 24			; 00000018H
  00086	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0008b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  00092	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00095	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 151  : 	valtmp |= ((unsigned long)(pi[(block[1] >> 16) & 0xFF]) << 16);

  00098	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	c1 e8 10	 shr	 eax, 16			; 00000010H
  000a1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a6	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  000ad	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000b0	0b 4d fc	 or	 ecx, DWORD PTR _valtmp$[ebp]
  000b3	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 152  : 	valtmp |= ((unsigned long)(pi[(block[1] >>  8) & 0xFF]) <<  8);

  000b6	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000b9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bc	c1 e8 08	 shr	 eax, 8
  000bf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  000cb	c1 e1 08	 shl	 ecx, 8
  000ce	0b 4d fc	 or	 ecx, DWORD PTR _valtmp$[ebp]
  000d1	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 153  : 	valtmp |=  (unsigned long)(pi[ block[1] & 0xFF]);

  000d4	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000df	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  000e6	0b 4d fc	 or	 ecx, DWORD PTR _valtmp$[ebp]
  000e9	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 154  : 
; 155  : 	block[1] = valtmp;

  000ec	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000ef	8b 45 fc	 mov	 eax, DWORD PTR _valtmp$[ebp]
  000f2	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 156  : 
; 157  : 	valtmp  = ((unsigned long)(pi[(block[2] >> 24) & 0xFF]) << 24);

  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000f8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000fb	c1 ea 18	 shr	 edx, 24			; 00000018H
  000fe	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00104	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[edx]
  0010b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0010e	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 158  : 	valtmp |= ((unsigned long)(pi[(block[2] >> 16) & 0xFF]) << 16);

  00111	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00114	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00117	c1 ea 10	 shr	 edx, 16			; 00000010H
  0011a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00120	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[edx]
  00127	c1 e0 10	 shl	 eax, 16			; 00000010H
  0012a	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp]
  0012d	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 159  : 	valtmp |= ((unsigned long)(pi[(block[2] >>  8) & 0xFF]) <<  8);

  00130	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00133	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00136	c1 ea 08	 shr	 edx, 8
  00139	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0013f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[edx]
  00146	c1 e0 08	 shl	 eax, 8
  00149	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp]
  0014c	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 160  : 	valtmp |=  (unsigned long)(pi[ block[2] & 0xFF]);

  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00152	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00155	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0015b	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[edx]
  00162	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp]
  00165	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 161  : 
; 162  : 	block[2] = valtmp;

  00168	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0016b	8b 55 fc	 mov	 edx, DWORD PTR _valtmp$[ebp]
  0016e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 163  : 
; 164  : 	valtmp  = ((unsigned long)(pi[(block[3] >> 24) & 0xFF]) << 24);

  00171	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00174	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00177	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0017a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00180	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  00187	c1 e2 18	 shl	 edx, 24			; 00000018H
  0018a	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 165  : 	valtmp |= ((unsigned long)(pi[(block[3] >> 16) & 0xFF]) << 16);

  0018d	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00190	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00193	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00196	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0019c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  001a3	c1 e2 10	 shl	 edx, 16			; 00000010H
  001a6	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  001a9	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 166  : 	valtmp |= ((unsigned long)(pi[(block[3] >>  8) & 0xFF]) <<  8);

  001ac	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  001af	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001b2	c1 e9 08	 shr	 ecx, 8
  001b5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001bb	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  001c2	c1 e2 08	 shl	 edx, 8
  001c5	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  001c8	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 167  : 	valtmp |=  (unsigned long)(pi[ block[3] & 0xFF]);

  001cb	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  001ce	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001d1	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001d7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi[ecx]
  001de	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  001e1	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 168  : 
; 169  : 	block[3] = valtmp;

  001e4	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  001e7	8b 4d fc	 mov	 ecx, DWORD PTR _valtmp$[ebp]
  001ea	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 170  : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 04 00	 ret	 4
_S@4	ENDP
_TEXT	ENDS
PUBLIC	_S_inv@4
; Function compile flags: /Odtp
;	COMDAT _S_inv@4
_TEXT	SEGMENT
_valtmp$ = -4						; size = 4
_block$ = 8						; size = 4
_S_inv@4 PROC						; COMDAT

; 182  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 183  : 	unsigned long valtmp;
; 184  : 
; 185  : 	valtmp  = ((unsigned long)(pi_inv[(block[0] >> 24) & 0xFF]) << 24);

  00006	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0000e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00014	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  0001b	c1 e2 18	 shl	 edx, 24			; 00000018H
  0001e	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 186  : 	valtmp |= ((unsigned long)(pi_inv[(block[0] >> 16) & 0xFF]) << 16);

  00021	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00029	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0002f	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  00036	c1 e2 10	 shl	 edx, 16			; 00000010H
  00039	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  0003c	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 187  : 	valtmp |= ((unsigned long)(pi_inv[(block[0] >>  8) & 0xFF]) <<  8);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	c1 e9 08	 shr	 ecx, 8
  00047	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0004d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  00054	c1 e2 08	 shl	 edx, 8
  00057	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  0005a	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 188  : 	valtmp |=  (unsigned long)(pi_inv[ block[0] & 0xFF]);

  0005d	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00068	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  0006f	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  00072	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 189  : 
; 190  : 	block[0] = valtmp;

  00075	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _valtmp$[ebp]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx

; 191  : 
; 192  : 	valtmp  = ((unsigned long)(pi_inv[(block[1] >> 24) & 0xFF]) << 24);

  0007d	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00080	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00083	c1 e8 18	 shr	 eax, 24			; 00000018H
  00086	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0008b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  00092	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00095	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 193  : 	valtmp |= ((unsigned long)(pi_inv[(block[1] >> 16) & 0xFF]) << 16);

  00098	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	c1 e8 10	 shr	 eax, 16			; 00000010H
  000a1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a6	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  000ad	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000b0	0b 4d fc	 or	 ecx, DWORD PTR _valtmp$[ebp]
  000b3	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 194  : 	valtmp |= ((unsigned long)(pi_inv[(block[1] >>  8) & 0xFF]) <<  8);

  000b6	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000b9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bc	c1 e8 08	 shr	 eax, 8
  000bf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c4	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  000cb	c1 e1 08	 shl	 ecx, 8
  000ce	0b 4d fc	 or	 ecx, DWORD PTR _valtmp$[ebp]
  000d1	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 195  : 	valtmp |=  (unsigned long)(pi_inv[block[1] & 0xFF]);

  000d4	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000d7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000da	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000df	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  000e6	0b 4d fc	 or	 ecx, DWORD PTR _valtmp$[ebp]
  000e9	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 196  : 
; 197  : 	block[1] = valtmp;

  000ec	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000ef	8b 45 fc	 mov	 eax, DWORD PTR _valtmp$[ebp]
  000f2	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 198  : 
; 199  : 	valtmp  = ((unsigned long)(pi_inv[(block[2] >> 24) & 0xFF]) << 24);

  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000f8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000fb	c1 ea 18	 shr	 edx, 24			; 00000018H
  000fe	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00104	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[edx]
  0010b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0010e	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 200  : 	valtmp |= ((unsigned long)(pi_inv[(block[2] >> 16) & 0xFF]) << 16);

  00111	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00114	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00117	c1 ea 10	 shr	 edx, 16			; 00000010H
  0011a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00120	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[edx]
  00127	c1 e0 10	 shl	 eax, 16			; 00000010H
  0012a	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp]
  0012d	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 201  : 	valtmp |= ((unsigned long)(pi_inv[(block[2] >>  8) & 0xFF]) <<  8);

  00130	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00133	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00136	c1 ea 08	 shr	 edx, 8
  00139	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0013f	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[edx]
  00146	c1 e0 08	 shl	 eax, 8
  00149	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp]
  0014c	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 202  : 	valtmp |=  (unsigned long)(pi_inv[block[2] & 0xFF]);

  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00152	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00155	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0015b	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[edx]
  00162	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp]
  00165	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp], eax

; 203  : 	
; 204  : 	block[2] = valtmp;

  00168	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0016b	8b 55 fc	 mov	 edx, DWORD PTR _valtmp$[ebp]
  0016e	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 205  : 
; 206  : 	valtmp  = ((unsigned long)(pi_inv[(block[3] >> 24) & 0xFF]) << 24);

  00171	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00174	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00177	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0017a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00180	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  00187	c1 e2 18	 shl	 edx, 24			; 00000018H
  0018a	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 207  : 	valtmp |= ((unsigned long)(pi_inv[(block[3] >> 16) & 0xFF]) << 16);

  0018d	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00190	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00193	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00196	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0019c	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  001a3	c1 e2 10	 shl	 edx, 16			; 00000010H
  001a6	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  001a9	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 208  : 	valtmp |= ((unsigned long)(pi_inv[(block[3] >>  8) & 0xFF]) <<  8);

  001ac	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  001af	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001b2	c1 e9 08	 shr	 ecx, 8
  001b5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001bb	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  001c2	c1 e2 08	 shl	 edx, 8
  001c5	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  001c8	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 209  : 	valtmp |=  (unsigned long)(pi_inv[ block[3] & 0xFF]);

  001cb	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  001ce	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001d1	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001d7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _pi_inv[ecx]
  001de	0b 55 fc	 or	 edx, DWORD PTR _valtmp$[ebp]
  001e1	89 55 fc	 mov	 DWORD PTR _valtmp$[ebp], edx

; 210  : 
; 211  : 	block[3] = valtmp;

  001e4	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  001e7	8b 4d fc	 mov	 ecx, DWORD PTR _valtmp$[ebp]
  001ea	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 212  : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 04 00	 ret	 4
_S_inv@4 ENDP
_TEXT	ENDS
PUBLIC	_ll@4
; Function compile flags: /Odtp
;	COMDAT _ll@4
_TEXT	SEGMENT
_val$ = -1						; size = 1
_block$ = 8						; size = 4
_ll@4	PROC						; COMDAT

; 223  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 224  : 	unsigned char val;
; 225  : 
; 226  : 	val  =  mult_mod_poly[4][(block[0] >> 24) & 0xFF];

  00006	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0000e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00014	8a 91 00 04 00
	00		 mov	 dl, BYTE PTR _mult_mod_poly[ecx+1024]
  0001a	88 55 ff	 mov	 BYTE PTR _val$[ebp], dl

; 227  : 	val ^=  mult_mod_poly[2][(block[0] >> 16) & 0xFF];

  0001d	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00025	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0002b	0f b6 91 00 02
	00 00		 movzx	 edx, BYTE PTR _mult_mod_poly[ecx+512]
  00032	0f b6 45 ff	 movzx	 eax, BYTE PTR _val$[ebp]
  00036	33 c2		 xor	 eax, edx
  00038	88 45 ff	 mov	 BYTE PTR _val$[ebp], al

; 228  : 	val ^=  mult_mod_poly[3][(block[0] >>  8) & 0xFF];

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	c1 ea 08	 shr	 edx, 8
  00043	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00049	0f b6 82 00 03
	00 00		 movzx	 eax, BYTE PTR _mult_mod_poly[edx+768]
  00050	0f b6 4d ff	 movzx	 ecx, BYTE PTR _val$[ebp]
  00054	33 c8		 xor	 ecx, eax
  00056	88 4d ff	 mov	 BYTE PTR _val$[ebp], cl

; 229  : 	val ^=  mult_mod_poly[1][(block[0] >>  0) & 0xFF];

  00059	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00063	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR _mult_mod_poly[eax+256]
  0006a	0f b6 55 ff	 movzx	 edx, BYTE PTR _val$[ebp]
  0006e	33 d1		 xor	 edx, ecx
  00070	88 55 ff	 mov	 BYTE PTR _val$[ebp], dl

; 230  : 
; 231  : 	val ^=  mult_mod_poly[6][(block[1] >> 24) & 0xFF];

  00073	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00076	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00079	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0007c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00082	0f b6 91 00 06
	00 00		 movzx	 edx, BYTE PTR _mult_mod_poly[ecx+1536]
  00089	0f b6 45 ff	 movzx	 eax, BYTE PTR _val$[ebp]
  0008d	33 c2		 xor	 eax, edx
  0008f	88 45 ff	 mov	 BYTE PTR _val$[ebp], al

; 232  : 	val ^=  mult_mod_poly[5][(block[1] >> 16) & 0xFF];

  00092	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00095	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00098	c1 ea 10	 shr	 edx, 16			; 00000010H
  0009b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000a1	0f b6 82 00 05
	00 00		 movzx	 eax, BYTE PTR _mult_mod_poly[edx+1280]
  000a8	0f b6 4d ff	 movzx	 ecx, BYTE PTR _val$[ebp]
  000ac	33 c8		 xor	 ecx, eax
  000ae	88 4d ff	 mov	 BYTE PTR _val$[ebp], cl

; 233  : 	val ^=  mult_mod_poly[0][(block[1] >>  8) & 0xFF];

  000b1	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000b4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b7	c1 e8 08	 shr	 eax, 8
  000ba	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000bf	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mult_mod_poly[eax]
  000c6	0f b6 55 ff	 movzx	 edx, BYTE PTR _val$[ebp]
  000ca	33 d1		 xor	 edx, ecx
  000cc	88 55 ff	 mov	 BYTE PTR _val$[ebp], dl

; 234  : 	val ^=  mult_mod_poly[7][(block[1] >>  0) & 0xFF];

  000cf	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000d2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000db	0f b6 91 00 07
	00 00		 movzx	 edx, BYTE PTR _mult_mod_poly[ecx+1792]
  000e2	0f b6 45 ff	 movzx	 eax, BYTE PTR _val$[ebp]
  000e6	33 c2		 xor	 eax, edx
  000e8	88 45 ff	 mov	 BYTE PTR _val$[ebp], al

; 235  : 
; 236  : 	val ^=  mult_mod_poly[0][(block[2] >> 24) & 0xFF];

  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000ee	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000f1	c1 ea 18	 shr	 edx, 24			; 00000018H
  000f4	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000fa	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _mult_mod_poly[edx]
  00101	0f b6 4d ff	 movzx	 ecx, BYTE PTR _val$[ebp]
  00105	33 c8		 xor	 ecx, eax
  00107	88 4d ff	 mov	 BYTE PTR _val$[ebp], cl

; 237  : 	val ^=  mult_mod_poly[5][(block[2] >> 16) & 0xFF];

  0010a	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0010d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00110	c1 e8 10	 shr	 eax, 16			; 00000010H
  00113	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00118	0f b6 88 00 05
	00 00		 movzx	 ecx, BYTE PTR _mult_mod_poly[eax+1280]
  0011f	0f b6 55 ff	 movzx	 edx, BYTE PTR _val$[ebp]
  00123	33 d1		 xor	 edx, ecx
  00125	88 55 ff	 mov	 BYTE PTR _val$[ebp], dl

; 238  : 	val ^=  mult_mod_poly[6][(block[2] >>  8) & 0xFF];

  00128	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0012b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0012e	c1 e9 08	 shr	 ecx, 8
  00131	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00137	0f b6 91 00 06
	00 00		 movzx	 edx, BYTE PTR _mult_mod_poly[ecx+1536]
  0013e	0f b6 45 ff	 movzx	 eax, BYTE PTR _val$[ebp]
  00142	33 c2		 xor	 eax, edx
  00144	88 45 ff	 mov	 BYTE PTR _val$[ebp], al

; 239  : 	val ^=  mult_mod_poly[1][(block[2] >>  0) & 0xFF];

  00147	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0014a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0014d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00153	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR _mult_mod_poly[edx+256]
  0015a	0f b6 4d ff	 movzx	 ecx, BYTE PTR _val$[ebp]
  0015e	33 c8		 xor	 ecx, eax
  00160	88 4d ff	 mov	 BYTE PTR _val$[ebp], cl

; 240  : 
; 241  : 	val ^=  mult_mod_poly[3][(block[3] >> 24) & 0xFF];

  00163	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00166	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00169	c1 e8 18	 shr	 eax, 24			; 00000018H
  0016c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00171	0f b6 88 00 03
	00 00		 movzx	 ecx, BYTE PTR _mult_mod_poly[eax+768]
  00178	0f b6 55 ff	 movzx	 edx, BYTE PTR _val$[ebp]
  0017c	33 d1		 xor	 edx, ecx
  0017e	88 55 ff	 mov	 BYTE PTR _val$[ebp], dl

; 242  : 	val ^=  mult_mod_poly[2][(block[3] >> 16) & 0xFF];

  00181	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00184	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00187	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0018a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00190	0f b6 91 00 02
	00 00		 movzx	 edx, BYTE PTR _mult_mod_poly[ecx+512]
  00197	0f b6 45 ff	 movzx	 eax, BYTE PTR _val$[ebp]
  0019b	33 c2		 xor	 eax, edx
  0019d	88 45 ff	 mov	 BYTE PTR _val$[ebp], al

; 243  : 	val ^=  mult_mod_poly[4][(block[3] >>  8) & 0xFF];

  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  001a3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001a6	c1 ea 08	 shr	 edx, 8
  001a9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001af	0f b6 82 00 04
	00 00		 movzx	 eax, BYTE PTR _mult_mod_poly[edx+1024]
  001b6	0f b6 4d ff	 movzx	 ecx, BYTE PTR _val$[ebp]
  001ba	33 c8		 xor	 ecx, eax
  001bc	88 4d ff	 mov	 BYTE PTR _val$[ebp], cl

; 244  : 	val ^=  mult_mod_poly[0][(block[3] >>  0) & 0xFF];

  001bf	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  001c2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001c5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001ca	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _mult_mod_poly[eax]
  001d1	0f b6 55 ff	 movzx	 edx, BYTE PTR _val$[ebp]
  001d5	33 d1		 xor	 edx, ecx
  001d7	88 55 ff	 mov	 BYTE PTR _val$[ebp], dl

; 245  : 
; 246  : 	return(val);

  001da	8a 45 ff	 mov	 al, BYTE PTR _val$[ebp]

; 247  : }

  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c2 04 00	 ret	 4
_ll@4	ENDP
_TEXT	ENDS
PUBLIC	_R@4
; Function compile flags: /Odtp
;	COMDAT _R@4
_TEXT	SEGMENT
_val$ = -17						; size = 1
_valtmp$ = -16						; size = 16
_block$ = 8						; size = 4
_R@4	PROC						; COMDAT

; 259  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 14	 sub	 esp, 20			; 00000014H

; 260  : 	unsigned long valtmp[4];
; 261  : 	unsigned char val;
; 262  : 
; 263  : 	valtmp[0] = block[0];

  00008	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	89 4d f0	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 264  : 	valtmp[1] = block[1];

  00010	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00013	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00016	89 45 f4	 mov	 DWORD PTR _valtmp$[ebp+4], eax

; 265  : 	valtmp[2] = block[2];

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0001c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001f	89 55 f8	 mov	 DWORD PTR _valtmp$[ebp+8], edx

; 266  : 	valtmp[3] = block[3];

  00022	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00025	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00028	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp+12], ecx

; 267  : 	val = ll(valtmp);

  0002b	8d 55 f0	 lea	 edx, DWORD PTR _valtmp$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _ll@4
  00034	88 45 ef	 mov	 BYTE PTR _val$[ebp], al

; 268  : 
; 269  : 	//block[1] >>= 8;
; 270  : 	//block[1]  |= (((block[0]) & 0xFF) << 56);
; 271  : 	block[3] >>= 8;

  00037	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	c1 e9 08	 shr	 ecx, 8
  00040	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00043	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 272  : 	block[3] |= (block[2] & 0xFF) << 24;

  00046	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00049	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00052	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00055	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00058	0b 4a 0c	 or	 ecx, DWORD PTR [edx+12]
  0005b	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0005e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 273  : 	block[2] >>= 8;

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00064	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00067	c1 ea 08	 shr	 edx, 8
  0006a	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0006d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 274  : 	block[2] |= (block[1] & 0xFF) << 24;

  00070	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00073	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00076	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0007c	c1 e2 18	 shl	 edx, 24			; 00000018H
  0007f	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00082	0b 50 08	 or	 edx, DWORD PTR [eax+8]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00088	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 275  : 	
; 276  : 
; 277  : //	block[0] >>= 8;
; 278  : //	block[0]  |= ((unsigned long)(val) << 56);
; 279  : 	block[1] >>= 8;

  0008b	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0008e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00091	c1 e8 08	 shr	 eax, 8
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00097	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 280  : 	block[1] |= (block[0] & 0xFF) << 24;

  0009a	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0009d	8b 02		 mov	 eax, DWORD PTR [edx]
  0009f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000a4	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000aa	0b 41 04	 or	 eax, DWORD PTR [ecx+4]
  000ad	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000b0	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 281  : 	block[0] >>= 8;

  000b3	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	c1 e9 08	 shr	 ecx, 8
  000bb	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000be	89 0a		 mov	 DWORD PTR [edx], ecx

; 282  : 	block[0] |= ((unsigned long int)(val & 0xFF) << 24);

  000c0	0f b6 45 ef	 movzx	 eax, BYTE PTR _val$[ebp]
  000c4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c9	c1 e0 18	 shl	 eax, 24			; 00000018H
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  000cf	0b 01		 or	 eax, DWORD PTR [ecx]
  000d1	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000d4	89 02		 mov	 DWORD PTR [edx], eax

; 283  : 
; 284  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
_R@4	ENDP
_TEXT	ENDS
PUBLIC	_R_inv@4
; Function compile flags: /Odtp
;	COMDAT _R_inv@4
_TEXT	SEGMENT
_val$ = -17						; size = 1
_valtmp$ = -16						; size = 16
_block$ = 8						; size = 4
_R_inv@4 PROC						; COMDAT

; 296  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 14	 sub	 esp, 20			; 00000014H

; 297  : 	unsigned long valtmp[4];
; 298  : 	unsigned char val;
; 299  : 
; 300  : 	//valtmp[0]  = (block[0] << 8);
; 301  : 	//valtmp[0] |= ((block[1] >> 56) & 0xFF);
; 302  : 	valtmp[0] = block[0] << 8;

  00008	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	c1 e1 08	 shl	 ecx, 8
  00010	89 4d f0	 mov	 DWORD PTR _valtmp$[ebp], ecx

; 303  : 	valtmp[0] |= (block[1] >> 24) & 0xFF;

  00013	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00016	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00019	c1 e8 18	 shr	 eax, 24			; 00000018H
  0001c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00021	0b 45 f0	 or	 eax, DWORD PTR _valtmp$[ebp]
  00024	89 45 f0	 mov	 DWORD PTR _valtmp$[ebp], eax

; 304  : 	valtmp[1] = block[1] << 8;

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0002a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002d	c1 e2 08	 shl	 edx, 8
  00030	89 55 f4	 mov	 DWORD PTR _valtmp$[ebp+4], edx

; 305  : 	valtmp[1] |= (block[2] >> 24) & 0xFF;

  00033	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00036	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00039	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0003c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00042	0b 4d f4	 or	 ecx, DWORD PTR _valtmp$[ebp+4]
  00045	89 4d f4	 mov	 DWORD PTR _valtmp$[ebp+4], ecx

; 306  : 
; 307  : 	//valtmp[1]  = (block[1] << 8);
; 308  : 	//valtmp[1] |= ((block[0] >> 56) & 0xFF);
; 309  : 
; 310  : 	valtmp[2] = block[2] << 8;

  00048	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0004b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004e	c1 e0 08	 shl	 eax, 8
  00051	89 45 f8	 mov	 DWORD PTR _valtmp$[ebp+8], eax

; 311  : 	valtmp[2] |= (block[3] >> 24) & 0xFF;

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00057	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005a	c1 ea 18	 shr	 edx, 24			; 00000018H
  0005d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00063	0b 55 f8	 or	 edx, DWORD PTR _valtmp$[ebp+8]
  00066	89 55 f8	 mov	 DWORD PTR _valtmp$[ebp+8], edx

; 312  : 	valtmp[3] = block[3] << 8;

  00069	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0006c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006f	c1 e1 08	 shl	 ecx, 8
  00072	89 4d fc	 mov	 DWORD PTR _valtmp$[ebp+12], ecx

; 313  : 	valtmp[3] |= (block[0] >> 24) & 0xFF;

  00075	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00078	8b 02		 mov	 eax, DWORD PTR [edx]
  0007a	c1 e8 18	 shr	 eax, 24			; 00000018H
  0007d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00082	0b 45 fc	 or	 eax, DWORD PTR _valtmp$[ebp+12]
  00085	89 45 fc	 mov	 DWORD PTR _valtmp$[ebp+12], eax

; 314  : 
; 315  : 	val = ll(valtmp);

  00088	8d 4d f0	 lea	 ecx, DWORD PTR _valtmp$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _ll@4
  00091	88 45 ef	 mov	 BYTE PTR _val$[ebp], al

; 316  : 
; 317  : 	block[0]  = valtmp[0];

  00094	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00097	8b 45 f0	 mov	 eax, DWORD PTR _valtmp$[ebp]
  0009a	89 02		 mov	 DWORD PTR [edx], eax

; 318  : 	block[1] = valtmp[1];

  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0009f	8b 55 f4	 mov	 edx, DWORD PTR _valtmp$[ebp+4]
  000a2	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 319  : 	block[2]  = (valtmp[2] & 0xFFFFFFFFL);

  000a5	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _valtmp$[ebp+8]
  000ab	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 320  : 	block[3] = valtmp[3] & 0xFFFFFF00L;

  000ae	8b 55 fc	 mov	 edx, DWORD PTR _valtmp$[ebp+12]
  000b1	81 e2 00 ff ff
	ff		 and	 edx, -256		; ffffff00H
  000b7	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000ba	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 321  : 	block[3] |= val;

  000bd	0f b6 4d ef	 movzx	 ecx, BYTE PTR _val$[ebp]
  000c1	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  000c4	0b 4a 0c	 or	 ecx, DWORD PTR [edx+12]
  000c7	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  000ca	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 322  : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 04 00	 ret	 4
_R_inv@4 ENDP
_TEXT	ENDS
PUBLIC	_L@4
; Function compile flags: /Odtp
;	COMDAT _L@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_L@4	PROC						; COMDAT

; 334  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 335  : 	R(block); R(block); R(block); R(block);

  00005	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _R@4
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _R@4
  00017	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _R@4
  00020	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _R@4

; 336  : 	R(block); R(block); R(block); R(block);

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _R@4
  00032	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _R@4
  0003b	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _R@4
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _R@4

; 337  : 	R(block); R(block); R(block); R(block);

  0004d	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 _R@4
  00056	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _R@4
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _R@4
  00068	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _R@4

; 338  : 	R(block); R(block); R(block); R(block);

  00071	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _R@4
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _R@4
  00083	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _R@4
  0008c	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _R@4

; 339  : }

  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_L@4	ENDP
_TEXT	ENDS
PUBLIC	_L_inv@4
; Function compile flags: /Odtp
;	COMDAT _L_inv@4
_TEXT	SEGMENT
_block$ = 8						; size = 4
_L_inv@4 PROC						; COMDAT

; 351  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 352  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00005	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _R_inv@4
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _R_inv@4
  00017	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _R_inv@4
  00020	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _R_inv@4

; 353  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00029	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _R_inv@4
  00032	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 _R_inv@4
  0003b	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _R_inv@4
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _R_inv@4

; 354  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  0004d	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 _R_inv@4
  00056	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _R_inv@4
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _R_inv@4
  00068	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _R_inv@4

; 355  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00071	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _R_inv@4
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _block$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _R_inv@4
  00083	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _R_inv@4
  0008c	8b 45 08	 mov	 eax, DWORD PTR _block$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _R_inv@4

; 356  : }

  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_L_inv@4 ENDP
_TEXT	ENDS
PUBLIC	_F@12
; Function compile flags: /Odtp
;	COMDAT _F@12
_TEXT	SEGMENT
_tmpblock$ = -16					; size = 16
_k$ = 8							; size = 4
_block1$ = 12						; size = 4
_block0$ = 16						; size = 4
_F@12	PROC						; COMDAT

; 370  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H

; 371  : 	unsigned long tmpblock[4];
; 372  : 
; 373  : 	/* Bitwise xor of k with block2 */
; 374  : 	tmpblock[0] = (block1[0] ^ k[0]);

  00008	8b 45 0c	 mov	 eax, DWORD PTR _block1$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _k$[ebp]
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	33 11		 xor	 edx, DWORD PTR [ecx]
  00012	89 55 f0	 mov	 DWORD PTR _tmpblock$[ebp], edx

; 375  : 	tmpblock[1] = (block1[1] ^ k[1]);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _block1$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _k$[ebp]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001e	33 51 04	 xor	 edx, DWORD PTR [ecx+4]
  00021	89 55 f4	 mov	 DWORD PTR _tmpblock$[ebp+4], edx

; 376  : 	tmpblock[2] = (block1[2] ^ k[2]);

  00024	8b 45 0c	 mov	 eax, DWORD PTR _block1$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _k$[ebp]
  0002a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002d	33 51 08	 xor	 edx, DWORD PTR [ecx+8]
  00030	89 55 f8	 mov	 DWORD PTR _tmpblock$[ebp+8], edx

; 377  : 	tmpblock[3] = (block1[3] ^ k[3]);

  00033	8b 45 0c	 mov	 eax, DWORD PTR _block1$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _k$[ebp]
  00039	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003c	33 51 0c	 xor	 edx, DWORD PTR [ecx+12]
  0003f	89 55 fc	 mov	 DWORD PTR _tmpblock$[ebp+12], edx

; 378  : 
; 379  : 	/* Apply S conversion function  */
; 380  : 	S(tmpblock);

  00042	8d 45 f0	 lea	 eax, DWORD PTR _tmpblock$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _S@4

; 381  : 
; 382  : 	/* Apply L conversion function  */
; 383  : 	L(tmpblock);

  0004b	8d 4d f0	 lea	 ecx, DWORD PTR _tmpblock$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _L@4

; 384  : 
; 385  : 	/* Add a0 to the the result     */
; 386  : 	tmpblock[0] ^= block0[0];

  00054	8b 55 10	 mov	 edx, DWORD PTR _block0$[ebp]
  00057	8b 45 f0	 mov	 eax, DWORD PTR _tmpblock$[ebp]
  0005a	33 02		 xor	 eax, DWORD PTR [edx]
  0005c	89 45 f0	 mov	 DWORD PTR _tmpblock$[ebp], eax

; 387  : 	tmpblock[1] ^= block0[1];

  0005f	8b 4d 10	 mov	 ecx, DWORD PTR _block0$[ebp]
  00062	8b 55 f4	 mov	 edx, DWORD PTR _tmpblock$[ebp+4]
  00065	33 51 04	 xor	 edx, DWORD PTR [ecx+4]
  00068	89 55 f4	 mov	 DWORD PTR _tmpblock$[ebp+4], edx

; 388  : 	tmpblock[2] ^= block0[2];

  0006b	8b 45 10	 mov	 eax, DWORD PTR _block0$[ebp]
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _tmpblock$[ebp+8]
  00071	33 48 08	 xor	 ecx, DWORD PTR [eax+8]
  00074	89 4d f8	 mov	 DWORD PTR _tmpblock$[ebp+8], ecx

; 389  : 	tmpblock[3] ^= block0[3];

  00077	8b 55 10	 mov	 edx, DWORD PTR _block0$[ebp]
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _tmpblock$[ebp+12]
  0007d	33 42 0c	 xor	 eax, DWORD PTR [edx+12]
  00080	89 45 fc	 mov	 DWORD PTR _tmpblock$[ebp+12], eax

; 390  : 
; 391  : 	/* Update the results           */
; 392  : 	block0[0] = block1[0];

  00083	8b 4d 10	 mov	 ecx, DWORD PTR _block0$[ebp]
  00086	8b 55 0c	 mov	 edx, DWORD PTR _block1$[ebp]
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	block0[1] = block1[1];

  0008d	8b 4d 10	 mov	 ecx, DWORD PTR _block0$[ebp]
  00090	8b 55 0c	 mov	 edx, DWORD PTR _block1$[ebp]
  00093	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00096	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 394  : 	block0[2] = block1[2];

  00099	8b 4d 10	 mov	 ecx, DWORD PTR _block0$[ebp]
  0009c	8b 55 0c	 mov	 edx, DWORD PTR _block1$[ebp]
  0009f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 395  : 	block0[3] = block1[3];

  000a5	8b 4d 10	 mov	 ecx, DWORD PTR _block0$[ebp]
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _block1$[ebp]
  000ab	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000ae	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 396  : 
; 397  : 	block1[0] = tmpblock[0];

  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _block1$[ebp]
  000b4	8b 55 f0	 mov	 edx, DWORD PTR _tmpblock$[ebp]
  000b7	89 11		 mov	 DWORD PTR [ecx], edx

; 398  : 	block1[1] = tmpblock[1];

  000b9	8b 45 0c	 mov	 eax, DWORD PTR _block1$[ebp]
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR _tmpblock$[ebp+4]
  000bf	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 399  : 	block1[2] = tmpblock[2];

  000c2	8b 55 0c	 mov	 edx, DWORD PTR _block1$[ebp]
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _tmpblock$[ebp+8]
  000c8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 400  : 	block1[3] = tmpblock[3];

  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _block1$[ebp]
  000ce	8b 55 fc	 mov	 edx, DWORD PTR _tmpblock$[ebp+12]
  000d1	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 401  : }

  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
_F@12	ENDP
_TEXT	ENDS
PUBLIC	_changeEndian@4
PUBLIC	_grasshopper_set_key@8
; Function compile flags: /Odtp
;	COMDAT _grasshopper_set_key@8
_TEXT	SEGMENT
_blocktmp2$ = -552					; size = 16
_c_values$ = -536					; size = 512
_i$ = -17						; size = 1
_blocktmp$ = -16					; size = 16
_master_key$ = 8					; size = 4
_subkeys$ = 12						; size = 4
_grasshopper_set_key@8 PROC				; COMDAT

; 413  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H

; 414  : 
; 415  : 	unsigned long c_values[32][4], blocktmp[4], blocktmp2[4];
; 416  : 	unsigned char i;
; 417  : 
; 418  : 	/* Compute the C_i values       */
; 419  : 	for(i = 0;i < 32;i++)

  0000b	c6 45 ef 00	 mov	 BYTE PTR _i$[ebp], 0
  0000f	eb 08		 jmp	 SHORT $LN3@grasshoppe
$LN2@grasshoppe:
  00011	8a 45 ef	 mov	 al, BYTE PTR _i$[ebp]
  00014	04 01		 add	 al, 1
  00016	88 45 ef	 mov	 BYTE PTR _i$[ebp], al
$LN3@grasshoppe:
  00019	0f b6 4d ef	 movzx	 ecx, BYTE PTR _i$[ebp]
  0001d	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00020	7d 6e		 jge	 SHORT $LN1@grasshoppe

; 420  : 	{
; 421  : 		blocktmp[0] = 0L;

  00022	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _blocktmp$[ebp], 0

; 422  : 		blocktmp[1] = 0L;

  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _blocktmp$[ebp+4], 0

; 423  : 		blocktmp[2] = 0L;

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _blocktmp$[ebp+8], 0

; 424  : 		blocktmp[3] = (unsigned long)(i + 1);

  00037	0f b6 55 ef	 movzx	 edx, BYTE PTR _i$[ebp]
  0003b	83 c2 01	 add	 edx, 1
  0003e	89 55 fc	 mov	 DWORD PTR _blocktmp$[ebp+12], edx

; 425  : 		L(blocktmp);

  00041	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _L@4

; 426  : 		c_values[i][0] = blocktmp[0]; c_values[i][1] = blocktmp[1]; c_values[i][2] = blocktmp[2]; c_values[i][3] = blocktmp[3];

  0004a	0f b6 4d ef	 movzx	 ecx, BYTE PTR _i$[ebp]
  0004e	c1 e1 04	 shl	 ecx, 4
  00051	8b 55 f0	 mov	 edx, DWORD PTR _blocktmp$[ebp]
  00054	89 94 0d e8 fd
	ff ff		 mov	 DWORD PTR _c_values$[ebp+ecx], edx
  0005b	0f b6 45 ef	 movzx	 eax, BYTE PTR _i$[ebp]
  0005f	c1 e0 04	 shl	 eax, 4
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _blocktmp$[ebp+4]
  00065	89 8c 05 ec fd
	ff ff		 mov	 DWORD PTR _c_values$[ebp+eax+4], ecx
  0006c	0f b6 55 ef	 movzx	 edx, BYTE PTR _i$[ebp]
  00070	c1 e2 04	 shl	 edx, 4
  00073	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  00076	89 84 15 f0 fd
	ff ff		 mov	 DWORD PTR _c_values$[ebp+edx+8], eax
  0007d	0f b6 4d ef	 movzx	 ecx, BYTE PTR _i$[ebp]
  00081	c1 e1 04	 shl	 ecx, 4
  00084	8b 55 fc	 mov	 edx, DWORD PTR _blocktmp$[ebp+12]
  00087	89 94 0d f4 fd
	ff ff		 mov	 DWORD PTR _c_values$[ebp+ecx+12], edx

; 427  : 	}

  0008e	eb 81		 jmp	 SHORT $LN2@grasshoppe
$LN1@grasshoppe:

; 428  : 
; 429  : 
; 430  : 	/* Compute subkeys K_1 and K_2  */
; 431  : 	subkeys->y000 = master_key[0]; subkeys->y001 = master_key[1]; subkeys->y010 = master_key[2]; subkeys->y011 = master_key[3];

  00090	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  00096	8b 11		 mov	 edx, DWORD PTR [ecx]
  00098	89 10		 mov	 DWORD PTR [eax], edx
  0009a	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000a0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a3	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000a6	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000ac	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000af	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000b2	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000b8	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000bb	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 432  : 	subkeys->y100 = master_key[4]; subkeys->y101 = master_key[5]; subkeys->y110 = master_key[6]; subkeys->y111 = master_key[7];

  000be	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000c4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000c7	89 50 10	 mov	 DWORD PTR [eax+16], edx
  000ca	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000d0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000d3	89 50 14	 mov	 DWORD PTR [eax+20], edx
  000d6	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000dc	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000df	89 50 18	 mov	 DWORD PTR [eax+24], edx
  000e2	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  000e8	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000eb	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 433  : 
; 434  : 	changeEndian(&subkeys->y000); changeEndian(&subkeys->y010); changeEndian(&subkeys->y001); changeEndian(&subkeys->y011);

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _changeEndian@4
  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  000fa	83 c1 08	 add	 ecx, 8
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 _changeEndian@4
  00103	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00106	83 c2 04	 add	 edx, 4
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 _changeEndian@4
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00112	83 c0 0c	 add	 eax, 12			; 0000000cH
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _changeEndian@4

; 435  : 	changeEndian(&subkeys->y100); changeEndian(&subkeys->y101); changeEndian(&subkeys->y110); changeEndian(&subkeys->y111);

  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  0011e	83 c1 10	 add	 ecx, 16			; 00000010H
  00121	51		 push	 ecx
  00122	e8 00 00 00 00	 call	 _changeEndian@4
  00127	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0012a	83 c2 14	 add	 edx, 20			; 00000014H
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 _changeEndian@4
  00133	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00136	83 c0 18	 add	 eax, 24			; 00000018H
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 _changeEndian@4
  0013f	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00142	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00145	51		 push	 ecx
  00146	e8 00 00 00 00	 call	 _changeEndian@4

; 436  : 
; 437  : 	/* Compute subkeys K_3 and K_4  */
; 438  : 	blocktmp[0] = subkeys->y000; blocktmp[1] = subkeys->y001; blocktmp[2] = subkeys->y010; blocktmp[3] = subkeys->y011;

  0014b	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0014e	8b 02		 mov	 eax, DWORD PTR [edx]
  00150	89 45 f0	 mov	 DWORD PTR _blocktmp$[ebp], eax
  00153	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00156	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00159	89 55 f4	 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  0015c	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0015f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00162	89 4d f8	 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  00165	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00168	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0016b	89 45 fc	 mov	 DWORD PTR _blocktmp$[ebp+12], eax

; 439  : 	blocktmp2[0] = subkeys->y100; blocktmp2[1] = subkeys->y101; blocktmp2[2] = subkeys->y110; blocktmp2[3] = subkeys->y111;

  0016e	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00171	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00174	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp], edx
  0017a	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0017d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00180	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp+4], ecx
  00186	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00189	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0018c	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp+8], eax
  00192	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00195	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00198	89 95 e4 fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp+12], edx

; 440  : 	F(c_values[0], blocktmp, blocktmp2); F(c_values[1], blocktmp, blocktmp2);

  0019e	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001a4	50		 push	 eax
  001a5	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  001a8	51		 push	 ecx
  001a9	8d 95 e8 fd ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp]
  001af	52		 push	 edx
  001b0	e8 00 00 00 00	 call	 _F@12
  001b5	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001bb	50		 push	 eax
  001bc	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  001bf	51		 push	 ecx
  001c0	8d 95 f8 fd ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+16]
  001c6	52		 push	 edx
  001c7	e8 00 00 00 00	 call	 _F@12

; 441  : 	F(c_values[2], blocktmp, blocktmp2); F(c_values[3], blocktmp, blocktmp2);

  001cc	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001d2	50		 push	 eax
  001d3	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  001d6	51		 push	 ecx
  001d7	8d 95 08 fe ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+32]
  001dd	52		 push	 edx
  001de	e8 00 00 00 00	 call	 _F@12
  001e3	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  001e9	50		 push	 eax
  001ea	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  001ed	51		 push	 ecx
  001ee	8d 95 18 fe ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+48]
  001f4	52		 push	 edx
  001f5	e8 00 00 00 00	 call	 _F@12

; 442  : 	F(c_values[4], blocktmp, blocktmp2); F(c_values[5], blocktmp, blocktmp2);

  001fa	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00200	50		 push	 eax
  00201	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  00204	51		 push	 ecx
  00205	8d 95 28 fe ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+64]
  0020b	52		 push	 edx
  0020c	e8 00 00 00 00	 call	 _F@12
  00211	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00217	50		 push	 eax
  00218	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  0021b	51		 push	 ecx
  0021c	8d 95 38 fe ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+80]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 _F@12

; 443  : 	F(c_values[6], blocktmp, blocktmp2); F(c_values[7], blocktmp, blocktmp2);

  00228	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0022e	50		 push	 eax
  0022f	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  00232	51		 push	 ecx
  00233	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+96]
  00239	52		 push	 edx
  0023a	e8 00 00 00 00	 call	 _F@12
  0023f	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00245	50		 push	 eax
  00246	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  00249	51		 push	 ecx
  0024a	8d 95 58 fe ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+112]
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 _F@12

; 444  : 
; 445  : 	subkeys->y200 = blocktmp[0]; subkeys->y201 = blocktmp[1]; subkeys->y210 = blocktmp[2]; subkeys->y211 = blocktmp[3];

  00256	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00259	8b 4d f0	 mov	 ecx, DWORD PTR _blocktmp$[ebp]
  0025c	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0025f	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00262	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  00265	89 42 24	 mov	 DWORD PTR [edx+36], eax
  00268	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  0026b	8b 55 f8	 mov	 edx, DWORD PTR _blocktmp$[ebp+8]
  0026e	89 51 28	 mov	 DWORD PTR [ecx+40], edx
  00271	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00274	8b 4d fc	 mov	 ecx, DWORD PTR _blocktmp$[ebp+12]
  00277	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 446  : 	subkeys->y300 = blocktmp2[0]; subkeys->y301 = blocktmp2[1]; subkeys->y310 = blocktmp2[2]; subkeys->y311 = blocktmp2[3];

  0027a	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0027d	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  00283	89 42 30	 mov	 DWORD PTR [edx+48], eax
  00286	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00289	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp2$[ebp+4]
  0028f	89 51 34	 mov	 DWORD PTR [ecx+52], edx
  00292	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00295	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp2$[ebp+8]
  0029b	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  0029e	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  002a1	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  002a7	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 447  : 
; 448  : 	/* Compute subkeys K_5 and K_6  */
; 449  : 	F(c_values[ 8], blocktmp, blocktmp2); F(c_values[ 9], blocktmp, blocktmp2);

  002aa	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  002b0	51		 push	 ecx
  002b1	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  002b4	52		 push	 edx
  002b5	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+128]
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 _F@12
  002c1	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  002c7	51		 push	 ecx
  002c8	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  002cb	52		 push	 edx
  002cc	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+144]
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 _F@12

; 450  : 	F(c_values[10], blocktmp, blocktmp2); F(c_values[11], blocktmp, blocktmp2);

  002d8	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  002de	51		 push	 ecx
  002df	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  002e2	52		 push	 edx
  002e3	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+160]
  002e9	50		 push	 eax
  002ea	e8 00 00 00 00	 call	 _F@12
  002ef	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  002f5	51		 push	 ecx
  002f6	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  002f9	52		 push	 edx
  002fa	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+176]
  00300	50		 push	 eax
  00301	e8 00 00 00 00	 call	 _F@12

; 451  : 	F(c_values[12], blocktmp, blocktmp2); F(c_values[13], blocktmp, blocktmp2);

  00306	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  0030c	51		 push	 ecx
  0030d	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  00310	52		 push	 edx
  00311	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+192]
  00317	50		 push	 eax
  00318	e8 00 00 00 00	 call	 _F@12
  0031d	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  00323	51		 push	 ecx
  00324	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  00327	52		 push	 edx
  00328	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+208]
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 _F@12

; 452  : 	F(c_values[14], blocktmp, blocktmp2); F(c_values[15], blocktmp, blocktmp2);

  00334	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  0033a	51		 push	 ecx
  0033b	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  0033e	52		 push	 edx
  0033f	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+224]
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 _F@12
  0034b	8d 8d d8 fd ff
	ff		 lea	 ecx, DWORD PTR _blocktmp2$[ebp]
  00351	51		 push	 ecx
  00352	8d 55 f0	 lea	 edx, DWORD PTR _blocktmp$[ebp]
  00355	52		 push	 edx
  00356	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+240]
  0035c	50		 push	 eax
  0035d	e8 00 00 00 00	 call	 _F@12

; 453  : 
; 454  : 	subkeys->y400 = blocktmp[0]; subkeys->y401 = blocktmp[1]; subkeys->y410 = blocktmp[2]; subkeys->y411 = blocktmp[3];

  00362	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00365	8b 55 f0	 mov	 edx, DWORD PTR _blocktmp$[ebp]
  00368	89 51 40	 mov	 DWORD PTR [ecx+64], edx
  0036b	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0036e	8b 4d f4	 mov	 ecx, DWORD PTR _blocktmp$[ebp+4]
  00371	89 48 44	 mov	 DWORD PTR [eax+68], ecx
  00374	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00377	8b 45 f8	 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  0037a	89 42 48	 mov	 DWORD PTR [edx+72], eax
  0037d	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00380	8b 55 fc	 mov	 edx, DWORD PTR _blocktmp$[ebp+12]
  00383	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 455  : 	subkeys->y500 = blocktmp2[0]; subkeys->y501 = blocktmp2[1]; subkeys->y510 = blocktmp2[2]; subkeys->y511 = blocktmp2[3];

  00386	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00389	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp2$[ebp]
  0038f	89 48 50	 mov	 DWORD PTR [eax+80], ecx
  00392	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00395	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  0039b	89 42 54	 mov	 DWORD PTR [edx+84], eax
  0039e	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  003a1	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp2$[ebp+8]
  003a7	89 51 58	 mov	 DWORD PTR [ecx+88], edx
  003aa	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  003ad	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp2$[ebp+12]
  003b3	89 48 5c	 mov	 DWORD PTR [eax+92], ecx

; 456  : 
; 457  : 	/* Compute subkeys K_7 and K_8  */
; 458  : 	F(c_values[16], blocktmp, blocktmp2); F(c_values[17], blocktmp, blocktmp2);

  003b6	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  003bc	52		 push	 edx
  003bd	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003c0	50		 push	 eax
  003c1	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+256]
  003c7	51		 push	 ecx
  003c8	e8 00 00 00 00	 call	 _F@12
  003cd	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  003d3	52		 push	 edx
  003d4	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003d7	50		 push	 eax
  003d8	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+272]
  003de	51		 push	 ecx
  003df	e8 00 00 00 00	 call	 _F@12

; 459  : 	F(c_values[18], blocktmp, blocktmp2); F(c_values[19], blocktmp, blocktmp2);

  003e4	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  003ea	52		 push	 edx
  003eb	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  003ee	50		 push	 eax
  003ef	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+288]
  003f5	51		 push	 ecx
  003f6	e8 00 00 00 00	 call	 _F@12
  003fb	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  00401	52		 push	 edx
  00402	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00405	50		 push	 eax
  00406	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+304]
  0040c	51		 push	 ecx
  0040d	e8 00 00 00 00	 call	 _F@12

; 460  : 	F(c_values[20], blocktmp, blocktmp2); F(c_values[21], blocktmp, blocktmp2);

  00412	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  00418	52		 push	 edx
  00419	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0041c	50		 push	 eax
  0041d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+320]
  00423	51		 push	 ecx
  00424	e8 00 00 00 00	 call	 _F@12
  00429	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  0042f	52		 push	 edx
  00430	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00433	50		 push	 eax
  00434	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+336]
  0043a	51		 push	 ecx
  0043b	e8 00 00 00 00	 call	 _F@12

; 461  : 	F(c_values[22], blocktmp, blocktmp2); F(c_values[23], blocktmp, blocktmp2);

  00440	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  00446	52		 push	 edx
  00447	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0044a	50		 push	 eax
  0044b	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+352]
  00451	51		 push	 ecx
  00452	e8 00 00 00 00	 call	 _F@12
  00457	8d 95 d8 fd ff
	ff		 lea	 edx, DWORD PTR _blocktmp2$[ebp]
  0045d	52		 push	 edx
  0045e	8d 45 f0	 lea	 eax, DWORD PTR _blocktmp$[ebp]
  00461	50		 push	 eax
  00462	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _c_values$[ebp+368]
  00468	51		 push	 ecx
  00469	e8 00 00 00 00	 call	 _F@12

; 462  : 
; 463  : 	subkeys->y600 = blocktmp[0]; subkeys->y601 = blocktmp[1]; subkeys->y610 = blocktmp[2]; subkeys->y611 = blocktmp[3];

  0046e	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00471	8b 45 f0	 mov	 eax, DWORD PTR _blocktmp$[ebp]
  00474	89 42 60	 mov	 DWORD PTR [edx+96], eax
  00477	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  0047a	8b 55 f4	 mov	 edx, DWORD PTR _blocktmp$[ebp+4]
  0047d	89 51 64	 mov	 DWORD PTR [ecx+100], edx
  00480	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00483	8b 4d f8	 mov	 ecx, DWORD PTR _blocktmp$[ebp+8]
  00486	89 48 68	 mov	 DWORD PTR [eax+104], ecx
  00489	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0048c	8b 45 fc	 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  0048f	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 464  : 	subkeys->y700 = blocktmp2[0]; subkeys->y701 = blocktmp2[1]; subkeys->y710 = blocktmp2[2]; subkeys->y711 = blocktmp2[3];

  00492	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00495	8b 95 d8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp2$[ebp]
  0049b	89 51 70	 mov	 DWORD PTR [ecx+112], edx
  0049e	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  004a1	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp2$[ebp+4]
  004a7	89 48 74	 mov	 DWORD PTR [eax+116], ecx
  004aa	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  004ad	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  004b3	89 42 78	 mov	 DWORD PTR [edx+120], eax
  004b6	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  004b9	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp2$[ebp+12]
  004bf	89 51 7c	 mov	 DWORD PTR [ecx+124], edx

; 465  : 
; 466  : 	/* Compute subkeys K_9 and K_{10} */
; 467  : 	F(c_values[24], blocktmp, blocktmp2); F(c_values[25], blocktmp, blocktmp2);

  004c2	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  004c8	50		 push	 eax
  004c9	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  004cc	51		 push	 ecx
  004cd	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+384]
  004d3	52		 push	 edx
  004d4	e8 00 00 00 00	 call	 _F@12
  004d9	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  004df	50		 push	 eax
  004e0	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  004e3	51		 push	 ecx
  004e4	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _c_values$[ebp+400]
  004ea	52		 push	 edx
  004eb	e8 00 00 00 00	 call	 _F@12

; 468  : 	F(c_values[26], blocktmp, blocktmp2); F(c_values[27], blocktmp, blocktmp2);

  004f0	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  004f6	50		 push	 eax
  004f7	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  004fa	51		 push	 ecx
  004fb	8d 55 88	 lea	 edx, DWORD PTR _c_values$[ebp+416]
  004fe	52		 push	 edx
  004ff	e8 00 00 00 00	 call	 _F@12
  00504	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0050a	50		 push	 eax
  0050b	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  0050e	51		 push	 ecx
  0050f	8d 55 98	 lea	 edx, DWORD PTR _c_values$[ebp+432]
  00512	52		 push	 edx
  00513	e8 00 00 00 00	 call	 _F@12

; 469  : 	F(c_values[28], blocktmp, blocktmp2); F(c_values[29], blocktmp, blocktmp2);

  00518	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0051e	50		 push	 eax
  0051f	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  00522	51		 push	 ecx
  00523	8d 55 a8	 lea	 edx, DWORD PTR _c_values$[ebp+448]
  00526	52		 push	 edx
  00527	e8 00 00 00 00	 call	 _F@12
  0052c	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00532	50		 push	 eax
  00533	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  00536	51		 push	 ecx
  00537	8d 55 b8	 lea	 edx, DWORD PTR _c_values$[ebp+464]
  0053a	52		 push	 edx
  0053b	e8 00 00 00 00	 call	 _F@12

; 470  : 	F(c_values[30], blocktmp, blocktmp2); F(c_values[31], blocktmp, blocktmp2);

  00540	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  00546	50		 push	 eax
  00547	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  0054a	51		 push	 ecx
  0054b	8d 55 c8	 lea	 edx, DWORD PTR _c_values$[ebp+480]
  0054e	52		 push	 edx
  0054f	e8 00 00 00 00	 call	 _F@12
  00554	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0055a	50		 push	 eax
  0055b	8d 4d f0	 lea	 ecx, DWORD PTR _blocktmp$[ebp]
  0055e	51		 push	 ecx
  0055f	8d 55 d8	 lea	 edx, DWORD PTR _c_values$[ebp+496]
  00562	52		 push	 edx
  00563	e8 00 00 00 00	 call	 _F@12

; 471  : 
; 472  : 	subkeys->y800 = blocktmp[0]; subkeys->y801 = blocktmp[1]; subkeys->y810 = blocktmp[2]; subkeys->y811 = blocktmp[3];

  00568	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0056b	8b 4d f0	 mov	 ecx, DWORD PTR _blocktmp$[ebp]
  0056e	89 88 80 00 00
	00		 mov	 DWORD PTR [eax+128], ecx
  00574	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00577	8b 45 f4	 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  0057a	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
  00580	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00583	8b 55 f8	 mov	 edx, DWORD PTR _blocktmp$[ebp+8]
  00586	89 91 88 00 00
	00		 mov	 DWORD PTR [ecx+136], edx
  0058c	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0058f	8b 4d fc	 mov	 ecx, DWORD PTR _blocktmp$[ebp+12]
  00592	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 473  : 	subkeys->y900 = blocktmp2[0]; subkeys->y901 = blocktmp2[1]; subkeys->y910 = blocktmp2[2]; subkeys->y911 = blocktmp2[3];

  00598	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0059b	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  005a1	89 82 90 00 00
	00		 mov	 DWORD PTR [edx+144], eax
  005a7	8b 4d 0c	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  005aa	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp2$[ebp+4]
  005b0	89 91 94 00 00
	00		 mov	 DWORD PTR [ecx+148], edx
  005b6	8b 45 0c	 mov	 eax, DWORD PTR _subkeys$[ebp]
  005b9	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp2$[ebp+8]
  005bf	89 88 98 00 00
	00		 mov	 DWORD PTR [eax+152], ecx
  005c5	8b 55 0c	 mov	 edx, DWORD PTR _subkeys$[ebp]
  005c8	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  005ce	89 82 9c 00 00
	00		 mov	 DWORD PTR [edx+156], eax

; 474  : 
; 475  : }

  005d4	8b e5		 mov	 esp, ebp
  005d6	5d		 pop	 ebp
  005d7	c2 08 00	 ret	 8
_grasshopper_set_key@8 ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_encrypt@12
; Function compile flags: /Odtp
;	COMDAT _grasshopper_encrypt@12
_TEXT	SEGMENT
_subkeys$ = 8						; size = 4
_plaintext$ = 12					; size = 4
_ciphertext$ = 16					; size = 4
_grasshopper_encrypt@12 PROC				; COMDAT

; 481  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 482  : 	/* Round 1 with subkey 1 */
; 483  : 
; 484  : 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  00005	8b 45 0c	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _changeEndian@4
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 _changeEndian@4
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _plaintext$[ebp]
  0001d	83 c2 08	 add	 edx, 8
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 _changeEndian@4
  00026	8b 45 0c	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _changeEndian@4

; 485  : 
; 486  : 	ciphertext[0] = plaintext[0] ^ subkeys->y000; ciphertext[1] = plaintext[1] ^ subkeys->y001; ciphertext[2] = plaintext[2] ^ subkeys->y010; ciphertext[3] = plaintext[3] ^ subkeys->y011;

  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00035	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	33 02		 xor	 eax, DWORD PTR [edx]
  0003c	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0003f	89 01		 mov	 DWORD PTR [ecx], eax
  00041	8b 55 0c	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00044	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00047	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0004a	33 48 04	 xor	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00050	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00053	8b 45 0c	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00059	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0005c	33 51 08	 xor	 edx, DWORD PTR [ecx+8]
  0005f	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00062	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00068	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0006b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0006e	33 42 0c	 xor	 eax, DWORD PTR [edx+12]
  00071	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00074	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 487  : 	S(ciphertext); L(ciphertext);

  00077	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 _S@4
  00080	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _L@4

; 488  : 
; 489  : 	/* Round 2 with subkey 2 */
; 490  : 	ciphertext[0] ^= subkeys->y100; ciphertext[1] ^= subkeys->y101; ciphertext[2] ^= subkeys->y110; ciphertext[3] ^= subkeys->y111;

  00089	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0008c	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0008f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00091	33 42 10	 xor	 eax, DWORD PTR [edx+16]
  00094	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00097	89 01		 mov	 DWORD PTR [ecx], eax
  00099	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0009c	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0009f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000a2	33 48 14	 xor	 ecx, DWORD PTR [eax+20]
  000a5	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  000a8	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000ab	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  000b1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000b4	33 51 18	 xor	 edx, DWORD PTR [ecx+24]
  000b7	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  000ba	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000bd	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  000c0	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  000c3	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000c6	33 42 1c	 xor	 eax, DWORD PTR [edx+28]
  000c9	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  000cc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 491  : 	S(ciphertext); L(ciphertext);

  000cf	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _S@4
  000d8	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _L@4

; 492  : 
; 493  : 	/* Round 3 with subkey 3 */
; 494  : 	ciphertext[0] ^= subkeys->y200; ciphertext[1] ^= subkeys->y201; ciphertext[2] ^= subkeys->y210; ciphertext[3] ^= subkeys->y211;

  000e1	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  000e4	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  000e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e9	33 42 20	 xor	 eax, DWORD PTR [edx+32]
  000ec	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  000ef	89 01		 mov	 DWORD PTR [ecx], eax
  000f1	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  000f4	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000f7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000fa	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  000fd	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00100	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00103	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00109	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0010c	33 51 28	 xor	 edx, DWORD PTR [ecx+40]
  0010f	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00112	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00115	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00118	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0011b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0011e	33 42 2c	 xor	 eax, DWORD PTR [edx+44]
  00121	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00124	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 495  : 	S(ciphertext); L(ciphertext);

  00127	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0012a	52		 push	 edx
  0012b	e8 00 00 00 00	 call	 _S@4
  00130	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 _L@4

; 496  : 	
; 497  : 	/* Round 4 with subkey 4 */
; 498  : 	ciphertext[0] ^= subkeys->y300; ciphertext[1] ^= subkeys->y301; ciphertext[2] ^= subkeys->y310; ciphertext[3] ^= subkeys->y311;

  00139	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0013c	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0013f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00141	33 42 30	 xor	 eax, DWORD PTR [edx+48]
  00144	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00147	89 01		 mov	 DWORD PTR [ecx], eax
  00149	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0014c	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0014f	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00152	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00155	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00158	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0015b	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0015e	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00161	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00164	33 51 38	 xor	 edx, DWORD PTR [ecx+56]
  00167	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0016a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0016d	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00170	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00173	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00176	33 42 3c	 xor	 eax, DWORD PTR [edx+60]
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0017c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 499  : 	S(ciphertext); L(ciphertext);

  0017f	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 _S@4
  00188	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 _L@4

; 500  : 	
; 501  : 	/* Round 5 with subkey 5 */
; 502  : 	ciphertext[0] ^= subkeys->y400; ciphertext[1] ^= subkeys->y401; ciphertext[2] ^= subkeys->y410; ciphertext[3] ^= subkeys->y411;

  00191	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00194	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00197	8b 01		 mov	 eax, DWORD PTR [ecx]
  00199	33 42 40	 xor	 eax, DWORD PTR [edx+64]
  0019c	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0019f	89 01		 mov	 DWORD PTR [ecx], eax
  001a1	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  001a4	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  001ad	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  001b0	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  001b3	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  001b9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001bc	33 51 48	 xor	 edx, DWORD PTR [ecx+72]
  001bf	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  001c2	89 50 08	 mov	 DWORD PTR [eax+8], edx
  001c5	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  001c8	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  001cb	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  001ce	33 42 4c	 xor	 eax, DWORD PTR [edx+76]
  001d1	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  001d4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 503  : 	S(ciphertext); L(ciphertext);

  001d7	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  001da	52		 push	 edx
  001db	e8 00 00 00 00	 call	 _S@4
  001e0	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _L@4

; 504  : 	
; 505  : 	/* Round 6 with subkey 6 */
; 506  : 	ciphertext[0] ^= subkeys->y500; ciphertext[1] ^= subkeys->y501; ciphertext[2] ^= subkeys->y510; ciphertext[3] ^= subkeys->y511;

  001e9	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  001ec	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  001ef	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f1	33 42 50	 xor	 eax, DWORD PTR [edx+80]
  001f4	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  001f7	89 01		 mov	 DWORD PTR [ecx], eax
  001f9	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  001fc	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  001ff	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00202	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  00205	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00208	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0020b	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00211	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00214	33 51 58	 xor	 edx, DWORD PTR [ecx+88]
  00217	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0021a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0021d	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00220	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00223	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00226	33 42 5c	 xor	 eax, DWORD PTR [edx+92]
  00229	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0022c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 507  : 	S(ciphertext); L(ciphertext);

  0022f	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00232	52		 push	 edx
  00233	e8 00 00 00 00	 call	 _S@4
  00238	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 _L@4

; 508  : 	
; 509  : 	/* Round 7 with subkey 7 */
; 510  : 	ciphertext[0] ^= subkeys->y600; ciphertext[1] ^= subkeys->y601; ciphertext[2] ^= subkeys->y610; ciphertext[3] ^= subkeys->y611;

  00241	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00244	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00247	8b 01		 mov	 eax, DWORD PTR [ecx]
  00249	33 42 60	 xor	 eax, DWORD PTR [edx+96]
  0024c	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0024f	89 01		 mov	 DWORD PTR [ecx], eax
  00251	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00254	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00257	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0025a	33 48 64	 xor	 ecx, DWORD PTR [eax+100]
  0025d	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00260	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00263	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00269	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0026c	33 51 68	 xor	 edx, DWORD PTR [ecx+104]
  0026f	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00272	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00275	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00278	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0027b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0027e	33 42 6c	 xor	 eax, DWORD PTR [edx+108]
  00281	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00284	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 511  : 	S(ciphertext); L(ciphertext);

  00287	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0028a	52		 push	 edx
  0028b	e8 00 00 00 00	 call	 _S@4
  00290	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 _L@4

; 512  : 	
; 513  : 	/* Round 8 with subkey 8 */
; 514  : 	ciphertext[0] ^= subkeys->y700; ciphertext[1] ^= subkeys->y701; ciphertext[2] ^= subkeys->y710; ciphertext[3] ^= subkeys->y711;

  00299	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  0029c	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0029f	8b 01		 mov	 eax, DWORD PTR [ecx]
  002a1	33 42 70	 xor	 eax, DWORD PTR [edx+112]
  002a4	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  002a7	89 01		 mov	 DWORD PTR [ecx], eax
  002a9	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  002ac	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  002af	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002b2	33 48 74	 xor	 ecx, DWORD PTR [eax+116]
  002b5	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  002b8	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  002bb	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  002be	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  002c1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002c4	33 51 78	 xor	 edx, DWORD PTR [ecx+120]
  002c7	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  002ca	89 50 08	 mov	 DWORD PTR [eax+8], edx
  002cd	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  002d0	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  002d3	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  002d6	33 42 7c	 xor	 eax, DWORD PTR [edx+124]
  002d9	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  002dc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 515  : 	S(ciphertext); L(ciphertext);

  002df	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  002e2	52		 push	 edx
  002e3	e8 00 00 00 00	 call	 _S@4
  002e8	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 _L@4

; 516  : 	
; 517  : 	/* Round 9 with subkey 9 */
; 518  : 	ciphertext[0] ^= subkeys->y800; ciphertext[1] ^= subkeys->y801; ciphertext[2] ^= subkeys->y810; ciphertext[3] ^= subkeys->y811;

  002f1	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  002f4	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  002f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  002f9	33 82 80 00 00
	00		 xor	 eax, DWORD PTR [edx+128]
  002ff	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00302	89 01		 mov	 DWORD PTR [ecx], eax
  00304	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00307	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0030a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0030d	33 88 84 00 00
	00		 xor	 ecx, DWORD PTR [eax+132]
  00313	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00316	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00319	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  0031f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00322	33 91 88 00 00
	00		 xor	 edx, DWORD PTR [ecx+136]
  00328	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0032b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0032e	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00331	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00334	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00337	33 82 8c 00 00
	00		 xor	 eax, DWORD PTR [edx+140]
  0033d	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00340	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 519  : 	S(ciphertext); L(ciphertext);

  00343	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00346	52		 push	 edx
  00347	e8 00 00 00 00	 call	 _S@4
  0034c	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 _L@4

; 520  : 	
; 521  : 	/* Round 10 with subkey 10 */
; 522  : 	ciphertext[0] ^= subkeys->y900; ciphertext[1] ^= subkeys->y901; ciphertext[2] ^= subkeys->y910; ciphertext[3] ^= subkeys->y911;

  00355	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00358	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0035b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0035d	33 82 90 00 00
	00		 xor	 eax, DWORD PTR [edx+144]
  00363	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00366	89 01		 mov	 DWORD PTR [ecx], eax
  00368	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0036b	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0036e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00371	33 88 94 00 00
	00		 xor	 ecx, DWORD PTR [eax+148]
  00377	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0037a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0037d	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00380	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00383	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00386	33 91 98 00 00
	00		 xor	 edx, DWORD PTR [ecx+152]
  0038c	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0038f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00392	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00395	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00398	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0039b	33 82 9c 00 00
	00		 xor	 eax, DWORD PTR [edx+156]
  003a1	8b 4d 10	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  003a4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 523  : 
; 524  : 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  003a7	8b 55 10	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  003aa	52		 push	 edx
  003ab	e8 00 00 00 00	 call	 _changeEndian@4
  003b0	8b 45 10	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  003b3	83 c0 04	 add	 eax, 4
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 _changeEndian@4
  003bc	8b 4d 0c	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  003bf	83 c1 08	 add	 ecx, 8
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 _changeEndian@4
  003c8	8b 55 0c	 mov	 edx, DWORD PTR _plaintext$[ebp]
  003cb	83 c2 0c	 add	 edx, 12			; 0000000cH
  003ce	52		 push	 edx
  003cf	e8 00 00 00 00	 call	 _changeEndian@4

; 525  : 	
; 526  : }

  003d4	5d		 pop	 ebp
  003d5	c2 0c 00	 ret	 12			; 0000000cH
_grasshopper_encrypt@12 ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_decrypt@12
; Function compile flags: /Odtp
;	COMDAT _grasshopper_decrypt@12
_TEXT	SEGMENT
_subkeys$ = 8						; size = 4
_ciphertext$ = 12					; size = 4
_plaintext$ = 16					; size = 4
_grasshopper_decrypt@12 PROC				; COMDAT

; 532  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 533  : 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&ciphertext[2]); changeEndian(&ciphertext[3]);

  00005	8b 45 0c	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _changeEndian@4
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 _changeEndian@4
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  0001d	83 c2 08	 add	 edx, 8
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 _changeEndian@4
  00026	8b 45 0c	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  00029	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _changeEndian@4

; 534  : 
; 535  : 	/* Round 1 with subkey 10 */
; 536  : 	plaintext[0] = ciphertext[0] ^ subkeys->y900; plaintext[1] = ciphertext[1] ^ subkeys->y901; plaintext[2] = ciphertext[2] ^ subkeys->y910; plaintext[3] = ciphertext[3] ^ subkeys->y911;

  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00035	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00038	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003a	33 82 90 00 00
	00		 xor	 eax, DWORD PTR [edx+144]
  00040	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00043	89 01		 mov	 DWORD PTR [ecx], eax
  00045	8b 55 0c	 mov	 edx, DWORD PTR _ciphertext$[ebp]
  00048	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  0004b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0004e	33 88 94 00 00
	00		 xor	 ecx, DWORD PTR [eax+148]
  00054	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00057	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0005a	8b 45 0c	 mov	 eax, DWORD PTR _ciphertext$[ebp]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00060	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00063	33 91 98 00 00
	00		 xor	 edx, DWORD PTR [ecx+152]
  00069	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0006c	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _ciphertext$[ebp]
  00072	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00075	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00078	33 82 9c 00 00
	00		 xor	 eax, DWORD PTR [edx+156]
  0007e	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00081	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 537  : 	L_inv(plaintext); S_inv(plaintext);

  00084	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 _L_inv@4
  0008d	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _S_inv@4

; 538  : 
; 539  : 	/* Round 2 with subkey 9 */
; 540  : 	plaintext[0] ^= subkeys->y800; plaintext[1] ^= subkeys->y801; plaintext[2] ^= subkeys->y810; plaintext[3] ^= subkeys->y811;

  00096	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0009c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009e	33 82 80 00 00
	00		 xor	 eax, DWORD PTR [edx+128]
  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax
  000a9	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  000ac	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  000af	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000b2	33 88 84 00 00
	00		 xor	 ecx, DWORD PTR [eax+132]
  000b8	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  000bb	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000be	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  000c4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c7	33 91 88 00 00
	00		 xor	 edx, DWORD PTR [ecx+136]
  000cd	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  000d0	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  000d6	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  000d9	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000dc	33 82 8c 00 00
	00		 xor	 eax, DWORD PTR [edx+140]
  000e2	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  000e5	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 541  : 	L_inv(plaintext); S_inv(plaintext);

  000e8	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _L_inv@4
  000f1	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _S_inv@4

; 542  : 
; 543  : 	/* Round 3 with subkey 8 */
; 544  : 	plaintext[0] ^= subkeys->y700; plaintext[1] ^= subkeys->y701; plaintext[2] ^= subkeys->y710; plaintext[3] ^= subkeys->y711;

  000fa	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  000fd	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00100	8b 01		 mov	 eax, DWORD PTR [ecx]
  00102	33 42 70	 xor	 eax, DWORD PTR [edx+112]
  00105	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00108	89 01		 mov	 DWORD PTR [ecx], eax
  0010a	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  0010d	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00110	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00113	33 48 74	 xor	 ecx, DWORD PTR [eax+116]
  00116	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00119	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0011c	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00122	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00125	33 51 78	 xor	 edx, DWORD PTR [ecx+120]
  00128	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0012b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0012e	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00131	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00134	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00137	33 42 7c	 xor	 eax, DWORD PTR [edx+124]
  0013a	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  0013d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 545  : 	L_inv(plaintext); S_inv(plaintext);

  00140	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 _L_inv@4
  00149	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _S_inv@4

; 546  : 
; 547  : 	/* Round 4 with subkey 7 */
; 548  : 	plaintext[0] ^= subkeys->y600; plaintext[1] ^= subkeys->y601; plaintext[2] ^= subkeys->y610; plaintext[3] ^= subkeys->y611;

  00152	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00155	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00158	8b 01		 mov	 eax, DWORD PTR [ecx]
  0015a	33 42 60	 xor	 eax, DWORD PTR [edx+96]
  0015d	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00160	89 01		 mov	 DWORD PTR [ecx], eax
  00162	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00165	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	33 48 64	 xor	 ecx, DWORD PTR [eax+100]
  0016e	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00171	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00174	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00177	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  0017a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017d	33 51 68	 xor	 edx, DWORD PTR [ecx+104]
  00180	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00183	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00186	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00189	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0018c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0018f	33 42 6c	 xor	 eax, DWORD PTR [edx+108]
  00192	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00195	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 549  : 	L_inv(plaintext); S_inv(plaintext);

  00198	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  0019b	52		 push	 edx
  0019c	e8 00 00 00 00	 call	 _L_inv@4
  001a1	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 _S_inv@4

; 550  : 
; 551  : 	/* Round 5 with subkey 6 */
; 552  : 	plaintext[0] ^= subkeys->y500; plaintext[1] ^= subkeys->y501; plaintext[2] ^= subkeys->y510; plaintext[3] ^= subkeys->y511;

  001aa	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  001ad	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  001b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b2	33 42 50	 xor	 eax, DWORD PTR [edx+80]
  001b5	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  001b8	89 01		 mov	 DWORD PTR [ecx], eax
  001ba	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  001bd	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  001c0	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001c3	33 48 54	 xor	 ecx, DWORD PTR [eax+84]
  001c6	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  001c9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  001cc	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  001d2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001d5	33 51 58	 xor	 edx, DWORD PTR [ecx+88]
  001d8	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  001db	89 50 08	 mov	 DWORD PTR [eax+8], edx
  001de	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  001e1	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  001e4	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  001e7	33 42 5c	 xor	 eax, DWORD PTR [edx+92]
  001ea	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  001ed	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 553  : 	L_inv(plaintext); S_inv(plaintext);

  001f0	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  001f3	52		 push	 edx
  001f4	e8 00 00 00 00	 call	 _L_inv@4
  001f9	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  001fc	50		 push	 eax
  001fd	e8 00 00 00 00	 call	 _S_inv@4

; 554  : 
; 555  : 	/* Round 6 with subkey 5 */
; 556  : 	plaintext[0] ^= subkeys->y400; plaintext[1] ^= subkeys->y401; plaintext[2] ^= subkeys->y410; plaintext[3] ^= subkeys->y411;

  00202	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00205	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00208	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020a	33 42 40	 xor	 eax, DWORD PTR [edx+64]
  0020d	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00210	89 01		 mov	 DWORD PTR [ecx], eax
  00212	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00215	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00218	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0021b	33 48 44	 xor	 ecx, DWORD PTR [eax+68]
  0021e	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00221	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00224	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00227	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  0022a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0022d	33 51 48	 xor	 edx, DWORD PTR [ecx+72]
  00230	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00233	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00236	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00239	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0023c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0023f	33 42 4c	 xor	 eax, DWORD PTR [edx+76]
  00242	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00245	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 557  : 	L_inv(plaintext); S_inv(plaintext);

  00248	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  0024b	52		 push	 edx
  0024c	e8 00 00 00 00	 call	 _L_inv@4
  00251	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 _S_inv@4

; 558  : 
; 559  : 	/* Round 7 with subkey 4 */
; 560  : 	plaintext[0] ^= subkeys->y300; plaintext[1] ^= subkeys->y301; plaintext[2] ^= subkeys->y310; plaintext[3] ^= subkeys->y311;

  0025a	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  0025d	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00260	8b 01		 mov	 eax, DWORD PTR [ecx]
  00262	33 42 30	 xor	 eax, DWORD PTR [edx+48]
  00265	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00268	89 01		 mov	 DWORD PTR [ecx], eax
  0026a	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  0026d	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00270	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00273	33 48 34	 xor	 ecx, DWORD PTR [eax+52]
  00276	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00279	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0027c	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0027f	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00282	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00285	33 51 38	 xor	 edx, DWORD PTR [ecx+56]
  00288	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0028b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0028e	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00291	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00294	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00297	33 42 3c	 xor	 eax, DWORD PTR [edx+60]
  0029a	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  0029d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 561  : 	L_inv(plaintext); S_inv(plaintext);

  002a0	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  002a3	52		 push	 edx
  002a4	e8 00 00 00 00	 call	 _L_inv@4
  002a9	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _S_inv@4

; 562  : 
; 563  : 	/* Round 8 with subkey 3 */
; 564  : 	plaintext[0] ^= subkeys->y200; plaintext[1] ^= subkeys->y201; plaintext[2] ^= subkeys->y210; plaintext[3] ^= subkeys->y211;

  002b2	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  002b5	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  002b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ba	33 42 20	 xor	 eax, DWORD PTR [edx+32]
  002bd	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  002c0	89 01		 mov	 DWORD PTR [ecx], eax
  002c2	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  002c5	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  002c8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002cb	33 48 24	 xor	 ecx, DWORD PTR [eax+36]
  002ce	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  002d1	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  002d4	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  002d7	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  002da	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002dd	33 51 28	 xor	 edx, DWORD PTR [ecx+40]
  002e0	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  002e3	89 50 08	 mov	 DWORD PTR [eax+8], edx
  002e6	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  002e9	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  002ec	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  002ef	33 42 2c	 xor	 eax, DWORD PTR [edx+44]
  002f2	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  002f5	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 565  : 	L_inv(plaintext); S_inv(plaintext);

  002f8	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  002fb	52		 push	 edx
  002fc	e8 00 00 00 00	 call	 _L_inv@4
  00301	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 _S_inv@4

; 566  : 
; 567  : 	/* Round 9 with subkey 2 */
; 568  : 	plaintext[0] ^= subkeys->y100; plaintext[1] ^= subkeys->y101; plaintext[2] ^= subkeys->y110; plaintext[3] ^= subkeys->y111;

  0030a	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  0030d	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00310	8b 01		 mov	 eax, DWORD PTR [ecx]
  00312	33 42 10	 xor	 eax, DWORD PTR [edx+16]
  00315	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00318	89 01		 mov	 DWORD PTR [ecx], eax
  0031a	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  0031d	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00320	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00323	33 48 14	 xor	 ecx, DWORD PTR [eax+20]
  00326	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00329	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0032c	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00332	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00335	33 51 18	 xor	 edx, DWORD PTR [ecx+24]
  00338	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0033b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0033e	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00341	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00344	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00347	33 42 1c	 xor	 eax, DWORD PTR [edx+28]
  0034a	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  0034d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 569  : 	L_inv(plaintext); S_inv(plaintext);

  00350	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00353	52		 push	 edx
  00354	e8 00 00 00 00	 call	 _L_inv@4
  00359	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  0035c	50		 push	 eax
  0035d	e8 00 00 00 00	 call	 _S_inv@4

; 570  : 
; 571  : 	/* Round 10 with subkey 1 */
; 572  : 	plaintext[0] ^= subkeys->y000; plaintext[1] ^= subkeys->y001; plaintext[2] ^= subkeys->y010; plaintext[3] ^= subkeys->y011;

  00362	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00365	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  00368	8b 01		 mov	 eax, DWORD PTR [ecx]
  0036a	33 02		 xor	 eax, DWORD PTR [edx]
  0036c	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  0036f	89 01		 mov	 DWORD PTR [ecx], eax
  00371	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00374	8b 45 08	 mov	 eax, DWORD PTR _subkeys$[ebp]
  00377	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0037a	33 48 04	 xor	 ecx, DWORD PTR [eax+4]
  0037d	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  00380	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00383	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00386	8b 4d 08	 mov	 ecx, DWORD PTR _subkeys$[ebp]
  00389	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0038c	33 51 08	 xor	 edx, DWORD PTR [ecx+8]
  0038f	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  00392	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00395	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  00398	8b 55 08	 mov	 edx, DWORD PTR _subkeys$[ebp]
  0039b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0039e	33 42 0c	 xor	 eax, DWORD PTR [edx+12]
  003a1	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  003a4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 573  : 	/*L_inv(plaintext); S_inv(plaintext);*/
; 574  : 
; 575  : 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  003a7	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  003aa	52		 push	 edx
  003ab	e8 00 00 00 00	 call	 _changeEndian@4
  003b0	8b 45 10	 mov	 eax, DWORD PTR _plaintext$[ebp]
  003b3	83 c0 04	 add	 eax, 4
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 _changeEndian@4
  003bc	8b 4d 10	 mov	 ecx, DWORD PTR _plaintext$[ebp]
  003bf	83 c1 08	 add	 ecx, 8
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 _changeEndian@4
  003c8	8b 55 10	 mov	 edx, DWORD PTR _plaintext$[ebp]
  003cb	83 c2 0c	 add	 edx, 12			; 0000000cH
  003ce	52		 push	 edx
  003cf	e8 00 00 00 00	 call	 _changeEndian@4

; 576  : 
; 577  : }

  003d4	5d		 pop	 ebp
  003d5	c2 0c 00	 ret	 12			; 0000000cH
_grasshopper_decrypt@12 ENDP
_TEXT	ENDS
PUBLIC	_grasshopper_xor_ks@16
; Function compile flags: /Odtp
;	COMDAT _grasshopper_xor_ks@16
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ks$ = 8						; size = 4
_out_ks$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_grasshopper_xor_ks@16 PROC				; COMDAT

; 591  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 592  : 	unsigned long i;
; 593  : 	if (!len)

  00006	83 7d 14 00	 cmp	 DWORD PTR _len$[ebp], 0
  0000a	75 05		 jne	 SHORT $LN4@grasshoppe@2

; 594  : 		return;

  0000c	e9 f7 05 00 00	 jmp	 $LN5@grasshoppe@2
$LN4@grasshoppe@2:

; 595  : 
; 596  : 	out_ks->y000 = ks->y000 ^ in[0]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];

  00011	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00014	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	33 11		 xor	 edx, DWORD PTR [ecx]
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0001e	89 10		 mov	 DWORD PTR [eax], edx
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00023	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00026	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00029	33 02		 xor	 eax, DWORD PTR [edx]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00034	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00037	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0003a	33 08		 xor	 ecx, DWORD PTR [eax]
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0003f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00042	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00045	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00048	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004b	33 11		 xor	 edx, DWORD PTR [ecx]
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00050	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 597  : 	out_ks->y100 = ks->y100 ^ in[0]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];

  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00056	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00059	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0005c	33 02		 xor	 eax, DWORD PTR [edx]
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00061	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00064	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00067	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0006a	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0006d	33 08		 xor	 ecx, DWORD PTR [eax]
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00072	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00075	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00078	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0007b	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0007e	33 11		 xor	 edx, DWORD PTR [ecx]
  00080	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00083	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00089	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0008c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0008f	33 02		 xor	 eax, DWORD PTR [edx]
  00091	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00094	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 598  : 	out_ks->y200 = ks->y200 ^ in[0]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];

  00097	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  0009a	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0009d	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  000a0	33 08		 xor	 ecx, DWORD PTR [eax]
  000a2	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  000a5	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  000a8	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  000ab	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  000ae	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  000b1	33 11		 xor	 edx, DWORD PTR [ecx]
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  000b6	89 50 24	 mov	 DWORD PTR [eax+36], edx
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  000bc	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  000bf	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  000c2	33 02		 xor	 eax, DWORD PTR [edx]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  000c7	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  000ca	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  000cd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  000d0	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  000d3	33 08		 xor	 ecx, DWORD PTR [eax]
  000d5	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  000d8	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 599  : 	out_ks->y300 = ks->y300 ^ in[0]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];

  000db	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  000e1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000e4	33 11		 xor	 edx, DWORD PTR [ecx]
  000e6	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  000e9	89 50 30	 mov	 DWORD PTR [eax+48], edx
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  000ef	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  000f2	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000f5	33 02		 xor	 eax, DWORD PTR [edx]
  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  000fa	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  000fd	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00100	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00103	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00106	33 08		 xor	 ecx, DWORD PTR [eax]
  00108	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0010b	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
  0010e	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00111	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00114	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00117	33 11		 xor	 edx, DWORD PTR [ecx]
  00119	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0011c	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 600  : 	out_ks->y400 = ks->y400 ^ in[0]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];

  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00122	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00125	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  00128	33 02		 xor	 eax, DWORD PTR [edx]
  0012a	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0012d	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  00130	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00133	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00136	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  00139	33 08		 xor	 ecx, DWORD PTR [eax]
  0013b	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0013e	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  00141	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00144	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00147	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  0014a	33 11		 xor	 edx, DWORD PTR [ecx]
  0014c	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0014f	89 50 48	 mov	 DWORD PTR [eax+72], edx
  00152	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00155	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00158	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  0015b	33 02		 xor	 eax, DWORD PTR [edx]
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00160	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 601  : 	out_ks->y500 = ks->y500 ^ in[0]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];

  00163	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00166	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00169	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0016c	33 08		 xor	 ecx, DWORD PTR [eax]
  0016e	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00171	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00174	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00177	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0017a	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  0017d	33 11		 xor	 edx, DWORD PTR [ecx]
  0017f	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00182	89 50 54	 mov	 DWORD PTR [eax+84], edx
  00185	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00188	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0018b	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  0018e	33 02		 xor	 eax, DWORD PTR [edx]
  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00193	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  00196	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00199	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0019c	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  0019f	33 08		 xor	 ecx, DWORD PTR [eax]
  001a1	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  001a4	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 602  : 	out_ks->y600 = ks->y600 ^ in[0]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];

  001a7	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  001aa	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  001ad	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  001b0	33 11		 xor	 edx, DWORD PTR [ecx]
  001b2	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  001b5	89 50 60	 mov	 DWORD PTR [eax+96], edx
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  001bb	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  001be	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  001c1	33 02		 xor	 eax, DWORD PTR [edx]
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  001c6	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  001c9	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  001cc	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  001cf	8b 4a 68	 mov	 ecx, DWORD PTR [edx+104]
  001d2	33 08		 xor	 ecx, DWORD PTR [eax]
  001d4	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  001d7	89 4a 68	 mov	 DWORD PTR [edx+104], ecx
  001da	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  001dd	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  001e0	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  001e3	33 11		 xor	 edx, DWORD PTR [ecx]
  001e5	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  001e8	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 603  : 	out_ks->y700 = ks->y700 ^ in[0]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];

  001eb	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  001ee	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  001f1	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  001f4	33 02		 xor	 eax, DWORD PTR [edx]
  001f6	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  001f9	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  001fc	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  001ff	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00202	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  00205	33 08		 xor	 ecx, DWORD PTR [eax]
  00207	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0020a	89 4a 74	 mov	 DWORD PTR [edx+116], ecx
  0020d	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00210	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00213	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  00216	33 11		 xor	 edx, DWORD PTR [ecx]
  00218	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0021b	89 50 78	 mov	 DWORD PTR [eax+120], edx
  0021e	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00221	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00224	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  00227	33 02		 xor	 eax, DWORD PTR [edx]
  00229	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0022c	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 604  : 	out_ks->y800 = ks->y800 ^ in[0]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];

  0022f	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00232	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00235	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  0023b	33 08		 xor	 ecx, DWORD PTR [eax]
  0023d	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00240	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx
  00246	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00249	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0024c	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  00252	33 11		 xor	 edx, DWORD PTR [ecx]
  00254	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00257	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
  0025d	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00260	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00263	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  00269	33 02		 xor	 eax, DWORD PTR [edx]
  0026b	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0026e	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax
  00274	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00277	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0027a	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  00280	33 08		 xor	 ecx, DWORD PTR [eax]
  00282	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00285	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 605  : 	out_ks->y900 = ks->y900 ^ in[0]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];

  0028b	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  0028e	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00291	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00297	33 11		 xor	 edx, DWORD PTR [ecx]
  00299	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0029c	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx
  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  002a5	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  002a8	8b 81 94 00 00
	00		 mov	 eax, DWORD PTR [ecx+148]
  002ae	33 02		 xor	 eax, DWORD PTR [edx]
  002b0	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  002b3	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  002b9	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  002bc	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  002bf	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  002c5	33 08		 xor	 ecx, DWORD PTR [eax]
  002c7	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  002ca	89 8a 98 00 00
	00		 mov	 DWORD PTR [edx+152], ecx
  002d0	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  002d3	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  002d6	8b 90 9c 00 00
	00		 mov	 edx, DWORD PTR [eax+156]
  002dc	33 11		 xor	 edx, DWORD PTR [ecx]
  002de	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  002e1	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx

; 606  : 	for (i = 1; i < len; i++)

  002e7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  002ee	eb 09		 jmp	 SHORT $LN3@grasshoppe@2
$LN2@grasshoppe@2:
  002f0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002f3	83 c1 01	 add	 ecx, 1
  002f6	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN3@grasshoppe@2:
  002f9	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002fc	3b 55 14	 cmp	 edx, DWORD PTR _len$[ebp]
  002ff	0f 83 03 03 00
	00		 jae	 $LN5@grasshoppe@2

; 607  : 	{
; 608  : 		out_ks->y000 = ks->y000 ^ in[i]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];

  00305	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00308	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0030b	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0030e	8b 00		 mov	 eax, DWORD PTR [eax]
  00310	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  00313	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00316	89 01		 mov	 DWORD PTR [ecx], eax
  00318	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  0031b	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0031e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00321	33 08		 xor	 ecx, DWORD PTR [eax]
  00323	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00326	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00329	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  0032c	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0032f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00332	33 11		 xor	 edx, DWORD PTR [ecx]
  00334	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00337	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0033a	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  0033d	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00340	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00343	33 02		 xor	 eax, DWORD PTR [edx]
  00345	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00348	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 609  : 		out_ks->y100 = ks->y100 ^ in[i]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];

  0034b	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  0034e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00351	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00354	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00357	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  0035a	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0035d	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00360	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00363	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00366	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00369	33 02		 xor	 eax, DWORD PTR [edx]
  0036b	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0036e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00371	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00374	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00377	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0037a	33 08		 xor	 ecx, DWORD PTR [eax]
  0037c	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0037f	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  00382	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00385	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00388	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0038b	33 11		 xor	 edx, DWORD PTR [ecx]
  0038d	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00390	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 610  : 		out_ks->y200 = ks->y200 ^ in[i]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];

  00393	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00396	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00399	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0039c	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0039f	33 0c 90	 xor	 ecx, DWORD PTR [eax+edx*4]
  003a2	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  003a5	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  003a8	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  003ab	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  003ae	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  003b1	33 11		 xor	 edx, DWORD PTR [ecx]
  003b3	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  003b6	89 50 24	 mov	 DWORD PTR [eax+36], edx
  003b9	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  003bc	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  003bf	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  003c2	33 02		 xor	 eax, DWORD PTR [edx]
  003c4	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  003c7	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  003ca	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  003cd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  003d0	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  003d3	33 08		 xor	 ecx, DWORD PTR [eax]
  003d5	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  003d8	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 611  : 		out_ks->y300 = ks->y300 ^ in[i]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];

  003db	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  003de	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  003e1	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  003e4	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  003e7	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  003ea	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  003ed	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  003f0	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  003f3	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  003f6	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
  003f9	33 08		 xor	 ecx, DWORD PTR [eax]
  003fb	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  003fe	89 4a 34	 mov	 DWORD PTR [edx+52], ecx
  00401	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00404	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00407	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0040a	33 11		 xor	 edx, DWORD PTR [ecx]
  0040c	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0040f	89 50 38	 mov	 DWORD PTR [eax+56], edx
  00412	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00415	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00418	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0041b	33 02		 xor	 eax, DWORD PTR [edx]
  0041d	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00420	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 612  : 		out_ks->y400 = ks->y400 ^ in[i]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];

  00423	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00426	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00429	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0042c	8b 52 40	 mov	 edx, DWORD PTR [edx+64]
  0042f	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  00432	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00435	89 50 40	 mov	 DWORD PTR [eax+64], edx
  00438	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  0043b	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0043e	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00441	33 02		 xor	 eax, DWORD PTR [edx]
  00443	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00446	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00449	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  0044c	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0044f	8b 4a 48	 mov	 ecx, DWORD PTR [edx+72]
  00452	33 08		 xor	 ecx, DWORD PTR [eax]
  00454	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00457	89 4a 48	 mov	 DWORD PTR [edx+72], ecx
  0045a	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  0045d	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00460	8b 50 4c	 mov	 edx, DWORD PTR [eax+76]
  00463	33 11		 xor	 edx, DWORD PTR [ecx]
  00465	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00468	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 613  : 		out_ks->y500 = ks->y500 ^ in[i]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];

  0046b	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  0046e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00471	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00474	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]
  00477	33 0c 90	 xor	 ecx, DWORD PTR [eax+edx*4]
  0047a	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0047d	89 4a 50	 mov	 DWORD PTR [edx+80], ecx
  00480	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00483	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00486	8b 50 54	 mov	 edx, DWORD PTR [eax+84]
  00489	33 11		 xor	 edx, DWORD PTR [ecx]
  0048b	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0048e	89 50 54	 mov	 DWORD PTR [eax+84], edx
  00491	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00494	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00497	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  0049a	33 02		 xor	 eax, DWORD PTR [edx]
  0049c	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0049f	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  004a2	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  004a5	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  004a8	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  004ab	33 08		 xor	 ecx, DWORD PTR [eax]
  004ad	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  004b0	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 614  : 		out_ks->y600 = ks->y600 ^ in[i]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];

  004b3	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  004b6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004b9	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  004bc	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  004bf	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  004c5	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  004c8	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  004cb	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  004ce	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  004d1	33 08		 xor	 ecx, DWORD PTR [eax]
  004d3	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  004d6	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  004d9	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  004dc	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  004df	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  004e2	33 11		 xor	 edx, DWORD PTR [ecx]
  004e4	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  004e7	89 50 68	 mov	 DWORD PTR [eax+104], edx
  004ea	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  004ed	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  004f0	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  004f3	33 02		 xor	 eax, DWORD PTR [edx]
  004f5	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  004f8	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 615  : 		out_ks->y700 = ks->y700 ^ in[i]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];

  004fb	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  004fe	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00501	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00504	8b 52 70	 mov	 edx, DWORD PTR [edx+112]
  00507	33 14 81	 xor	 edx, DWORD PTR [ecx+eax*4]
  0050a	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0050d	89 50 70	 mov	 DWORD PTR [eax+112], edx
  00510	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00513	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00516	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00519	33 02		 xor	 eax, DWORD PTR [edx]
  0051b	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  0051e	89 41 74	 mov	 DWORD PTR [ecx+116], eax
  00521	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  00524	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00527	8b 4a 78	 mov	 ecx, DWORD PTR [edx+120]
  0052a	33 08		 xor	 ecx, DWORD PTR [eax]
  0052c	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0052f	89 4a 78	 mov	 DWORD PTR [edx+120], ecx
  00532	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00535	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00538	8b 50 7c	 mov	 edx, DWORD PTR [eax+124]
  0053b	33 11		 xor	 edx, DWORD PTR [ecx]
  0053d	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  00540	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 616  : 		out_ks->y800 = ks->y800 ^ in[i]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];

  00543	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00546	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00549	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0054c	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [ecx+128]
  00552	33 0c 90	 xor	 ecx, DWORD PTR [eax+edx*4]
  00555	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  00558	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx
  0055e	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  00561	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00564	8b 90 84 00 00
	00		 mov	 edx, DWORD PTR [eax+132]
  0056a	33 11		 xor	 edx, DWORD PTR [ecx]
  0056c	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  0056f	89 90 84 00 00
	00		 mov	 DWORD PTR [eax+132], edx
  00575	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  00578	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  0057b	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  00581	33 02		 xor	 eax, DWORD PTR [edx]
  00583	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00586	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax
  0058c	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  0058f	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00592	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  00598	33 08		 xor	 ecx, DWORD PTR [eax]
  0059a	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  0059d	89 8a 8c 00 00
	00		 mov	 DWORD PTR [edx+140], ecx

; 617  : 		out_ks->y900 = ks->y900 ^ in[i]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];

  005a3	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  005a6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  005a9	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  005ac	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [eax+144]
  005b2	33 04 8a	 xor	 eax, DWORD PTR [edx+ecx*4]
  005b5	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  005b8	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax
  005be	8b 55 08	 mov	 edx, DWORD PTR _ks$[ebp]
  005c1	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  005c4	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  005ca	33 08		 xor	 ecx, DWORD PTR [eax]
  005cc	8b 55 0c	 mov	 edx, DWORD PTR _out_ks$[ebp]
  005cf	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx
  005d5	8b 45 08	 mov	 eax, DWORD PTR _ks$[ebp]
  005d8	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  005db	8b 90 98 00 00
	00		 mov	 edx, DWORD PTR [eax+152]
  005e1	33 11		 xor	 edx, DWORD PTR [ecx]
  005e3	8b 45 0c	 mov	 eax, DWORD PTR _out_ks$[ebp]
  005e6	89 90 98 00 00
	00		 mov	 DWORD PTR [eax+152], edx
  005ec	8b 4d 08	 mov	 ecx, DWORD PTR _ks$[ebp]
  005ef	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  005f2	8b 81 9c 00 00
	00		 mov	 eax, DWORD PTR [ecx+156]
  005f8	33 02		 xor	 eax, DWORD PTR [edx]
  005fa	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  005fd	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax

; 618  : 	}

  00603	e9 e8 fc ff ff	 jmp	 $LN2@grasshoppe@2
$LN5@grasshoppe@2:

; 619  : }

  00608	8b e5		 mov	 esp, ebp
  0060a	5d		 pop	 ebp
  0060b	c2 10 00	 ret	 16			; 00000010H
_grasshopper_xor_ks@16 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _changeEndian@4
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_ret$ = 8						; size = 4
_changeEndian@4 PROC					; COMDAT

; 630  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 631  : 	unsigned long tmp = 0L;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _tmp$[ebp], 0

; 632  : 
; 633  : 	tmp  = (*ret & 0xFF) << 24;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _ret$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00018	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0001b	89 4d fc	 mov	 DWORD PTR _tmp$[ebp], ecx

; 634  : 	tmp |= (*ret & 0xFF00) << 8;

  0001e	8b 55 08	 mov	 edx, DWORD PTR _ret$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00028	c1 e0 08	 shl	 eax, 8
  0002b	0b 45 fc	 or	 eax, DWORD PTR _tmp$[ebp]
  0002e	89 45 fc	 mov	 DWORD PTR _tmp$[ebp], eax

; 635  : 	tmp |= (*ret & 0xFF0000) >> 8;

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _ret$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	81 e2 00 00 ff
	00		 and	 edx, 16711680		; 00ff0000H
  0003c	c1 ea 08	 shr	 edx, 8
  0003f	0b 55 fc	 or	 edx, DWORD PTR _tmp$[ebp]
  00042	89 55 fc	 mov	 DWORD PTR _tmp$[ebp], edx

; 636  : 	tmp |= (*ret & 0xFF000000) >> 24;

  00045	8b 45 08	 mov	 eax, DWORD PTR _ret$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  00050	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00053	0b 4d fc	 or	 ecx, DWORD PTR _tmp$[ebp]
  00056	89 4d fc	 mov	 DWORD PTR _tmp$[ebp], ecx

; 637  : 	*ret = tmp;

  00059	8b 55 08	 mov	 edx, DWORD PTR _ret$[ebp]
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _tmp$[ebp]
  0005f	89 02		 mov	 DWORD PTR [edx], eax

; 638  : 
; 639  : 	return;
; 640  : }

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_changeEndian@4 ENDP
_TEXT	ENDS
END
