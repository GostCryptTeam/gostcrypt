; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Crypto\Whirlpool.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_WHIRLPOOL_add
PUBLIC	_WHIRLPOOL_finalize
PUBLIC	_WHIRLPOOL_init
EXTRN	__aullshr:PROC
EXTRN	_memset:PROC
CONST	SEGMENT
_C0	DQ	18186018c07830d8H
	DQ	23238c2305af4626H
	DQ	c6c63fc67ef991b8H
	DQ	e8e887e8136fcdfbH
	DQ	878726874ca113cbH
	DQ	b8b8dab8a9626d11H
	DQ	0101040108050209H
	DQ	4f4f214f426e9e0dH
	DQ	3636d836adee6c9bH
	DQ	a6a6a2a6590451ffH
	DQ	d2d26fd2debdb90cH
	DQ	f5f5f3f5fb06f70eH
	DQ	7979f979ef80f296H
	DQ	6f6fa16f5fcede30H
	DQ	91917e91fcef3f6dH
	DQ	52525552aa07a4f8H
	DQ	60609d6027fdc047H
	DQ	bcbccabc89766535H
	DQ	9b9b569baccd2b37H
	DQ	8e8e028e048c018aH
	DQ	a3a3b6a371155bd2H
	DQ	0c0c300c603c186cH
	DQ	7b7bf17bff8af684H
	DQ	3535d435b5e16a80H
	DQ	1d1d741de8693af5H
	DQ	e0e0a7e05347ddb3H
	DQ	d7d77bd7f6acb321H
	DQ	c2c22fc25eed999cH
	DQ	2e2eb82e6d965c43H
	DQ	4b4b314b627a9629H
	DQ	fefedffea321e15dH
	DQ	575741578216aed5H
	DQ	15155415a8412abdH
	DQ	7777c1779fb6eee8H
	DQ	3737dc37a5eb6e92H
	DQ	e5e5b3e57b56d79eH
	DQ	9f9f469f8cd92313H
	DQ	f0f0e7f0d317fd23H
	DQ	4a4a354a6a7f9420H
	DQ	dada4fda9e95a944H
	DQ	58587d58fa25b0a2H
	DQ	c9c903c906ca8fcfH
	DQ	2929a429558d527cH
	DQ	0a0a280a5022145aH
	DQ	b1b1feb1e14f7f50H
	DQ	a0a0baa0691a5dc9H
	DQ	6b6bb16b7fdad614H
	DQ	85852e855cab17d9H
	DQ	bdbdcebd8173673cH
	DQ	5d5d695dd234ba8fH
	DQ	1010401080502090H
	DQ	f4f4f7f4f303f507H
	DQ	cbcb0bcb16c08bddH
	DQ	3e3ef83eedc67cd3H
	DQ	0505140528110a2dH
	DQ	676781671fe6ce78H
	DQ	e4e4b7e47353d597H
	DQ	27279c2725bb4e02H
	DQ	4141194132588273H
	DQ	8b8b168b2c9d0ba7H
	DQ	a7a7a6a7510153f6H
	DQ	7d7de97dcf94fab2H
	DQ	95956e95dcfb3749H
	DQ	d8d847d88e9fad56H
	DQ	fbfbcbfb8b30eb70H
	DQ	eeee9fee2371c1cdH
	DQ	7c7ced7cc791f8bbH
	DQ	6666856617e3cc71H
	DQ	dddd53dda68ea77bH
	DQ	17175c17b84b2eafH
	DQ	4747014702468e45H
	DQ	9e9e429e84dc211aH
	DQ	caca0fca1ec589d4H
	DQ	2d2db42d75995a58H
	DQ	bfbfc6bf9179632eH
	DQ	07071c07381b0e3fH
	DQ	adad8ead012347acH
	DQ	5a5a755aea2fb4b0H
	DQ	838336836cb51befH
	DQ	3333cc3385ff66b6H
	DQ	636391633ff2c65cH
	DQ	02020802100a0412H
	DQ	aaaa92aa39384993H
	DQ	7171d971afa8e2deH
	DQ	c8c807c80ecf8dc6H
	DQ	19196419c87d32d1H
	DQ	494939497270923bH
	DQ	d9d943d9869aaf5fH
	DQ	f2f2eff2c31df931H
	DQ	e3e3abe34b48dba8H
	DQ	5b5b715be22ab6b9H
	DQ	88881a8834920dbcH
	DQ	9a9a529aa4c8293eH
	DQ	262698262dbe4c0bH
	DQ	3232c8328dfa64bfH
	DQ	b0b0fab0e94a7d59H
	DQ	e9e983e91b6acff2H
	DQ	0f0f3c0f78331e77H
	DQ	d5d573d5e6a6b733H
	DQ	80803a8074ba1df4H
	DQ	bebec2be997c6127H
	DQ	cdcd13cd26de87ebH
	DQ	3434d034bde46889H
	DQ	48483d487a759032H
	DQ	ffffdbffab24e354H
	DQ	7a7af57af78ff48dH
	DQ	90907a90f4ea3d64H
	DQ	5f5f615fc23ebe9dH
	DQ	202080201da0403dH
	DQ	6868bd6867d5d00fH
	DQ	1a1a681ad07234caH
	DQ	aeae82ae192c41b7H
	DQ	b4b4eab4c95e757dH
	DQ	54544d549a19a8ceH
	DQ	93937693ece53b7fH
	DQ	222288220daa442fH
	DQ	64648d6407e9c863H
	DQ	f1f1e3f1db12ff2aH
	DQ	7373d173bfa2e6ccH
	DQ	12124812905a2482H
	DQ	40401d403a5d807aH
	DQ	0808200840281048H
	DQ	c3c32bc356e89b95H
	DQ	ecec97ec337bc5dfH
	DQ	dbdb4bdb9690ab4dH
	DQ	a1a1bea1611f5fc0H
	DQ	8d8d0e8d1c830791H
	DQ	3d3df43df5c97ac8H
	DQ	97976697ccf1335bH
	DQ	0000000000000000H
	DQ	cfcf1bcf36d483f9H
	DQ	2b2bac2b4587566eH
	DQ	7676c57697b3ece1H
	DQ	8282328264b019e6H
	DQ	d6d67fd6fea9b128H
	DQ	1b1b6c1bd87736c3H
	DQ	b5b5eeb5c15b7774H
	DQ	afaf86af112943beH
	DQ	6a6ab56a77dfd41dH
	DQ	50505d50ba0da0eaH
	DQ	45450945124c8a57H
	DQ	f3f3ebf3cb18fb38H
	DQ	3030c0309df060adH
	DQ	efef9bef2b74c3c4H
	DQ	3f3ffc3fe5c37edaH
	DQ	55554955921caac7H
	DQ	a2a2b2a2791059dbH
	DQ	eaea8fea0365c9e9H
	DQ	656589650fecca6aH
	DQ	babad2bab9686903H
	DQ	2f2fbc2f65935e4aH
	DQ	c0c027c04ee79d8eH
	DQ	dede5fdebe81a160H
	DQ	1c1c701ce06c38fcH
	DQ	fdfdd3fdbb2ee746H
	DQ	4d4d294d52649a1fH
	DQ	92927292e4e03976H
	DQ	7575c9758fbceafaH
	DQ	06061806301e0c36H
	DQ	8a8a128a249809aeH
	DQ	b2b2f2b2f940794bH
	DQ	e6e6bfe66359d185H
	DQ	0e0e380e70361c7eH
	DQ	1f1f7c1ff8633ee7H
	DQ	6262956237f7c455H
	DQ	d4d477d4eea3b53aH
	DQ	a8a89aa829324d81H
	DQ	96966296c4f43152H
	DQ	f9f9c3f99b3aef62H
	DQ	c5c533c566f697a3H
	DQ	2525942535b14a10H
	DQ	59597959f220b2abH
	DQ	84842a8454ae15d0H
	DQ	7272d572b7a7e4c5H
	DQ	3939e439d5dd72ecH
	DQ	4c4c2d4c5a619816H
	DQ	5e5e655eca3bbc94H
	DQ	7878fd78e785f09fH
	DQ	3838e038ddd870e5H
	DQ	8c8c0a8c14860598H
	DQ	d1d163d1c6b2bf17H
	DQ	a5a5aea5410b57e4H
	DQ	e2e2afe2434dd9a1H
	DQ	616199612ff8c24eH
	DQ	b3b3f6b3f1457b42H
	DQ	2121842115a54234H
	DQ	9c9c4a9c94d62508H
	DQ	1e1e781ef0663ceeH
	DQ	4343114322528661H
	DQ	c7c73bc776fc93b1H
	DQ	fcfcd7fcb32be54fH
	DQ	0404100420140824H
	DQ	51515951b208a2e3H
	DQ	99995e99bcc72f25H
	DQ	6d6da96d4fc4da22H
	DQ	0d0d340d68391a65H
	DQ	fafacffa8335e979H
	DQ	dfdf5bdfb684a369H
	DQ	7e7ee57ed79bfca9H
	DQ	242490243db44819H
	DQ	3b3bec3bc5d776feH
	DQ	abab96ab313d4b9aH
	DQ	cece1fce3ed181f0H
	DQ	1111441188552299H
	DQ	8f8f068f0c890383H
	DQ	4e4e254e4a6b9c04H
	DQ	b7b7e6b7d1517366H
	DQ	ebeb8beb0b60cbe0H
	DQ	3c3cf03cfdcc78c1H
	DQ	81813e817cbf1ffdH
	DQ	94946a94d4fe3540H
	DQ	f7f7fbf7eb0cf31cH
	DQ	b9b9deb9a1676f18H
	DQ	13134c13985f268bH
	DQ	2c2cb02c7d9c5851H
	DQ	d3d36bd3d6b8bb05H
	DQ	e7e7bbe76b5cd38cH
	DQ	6e6ea56e57cbdc39H
	DQ	c4c437c46ef395aaH
	DQ	03030c03180f061bH
	DQ	565645568a13acdcH
	DQ	44440d441a49885eH
	DQ	7f7fe17fdf9efea0H
	DQ	a9a99ea921374f88H
	DQ	2a2aa82a4d825467H
	DQ	bbbbd6bbb16d6b0aH
	DQ	c1c123c146e29f87H
	DQ	53535153a202a6f1H
	DQ	dcdc57dcae8ba572H
	DQ	0b0b2c0b58271653H
	DQ	9d9d4e9d9cd32701H
	DQ	6c6cad6c47c1d82bH
	DQ	3131c43195f562a4H
	DQ	7474cd7487b9e8f3H
	DQ	f6f6fff6e309f115H
	DQ	464605460a438c4cH
	DQ	acac8aac092645a5H
	DQ	89891e893c970fb5H
	DQ	14145014a04428b4H
	DQ	e1e1a3e15b42dfbaH
	DQ	16165816b04e2ca6H
	DQ	3a3ae83acdd274f7H
	DQ	6969b9696fd0d206H
	DQ	09092409482d1241H
	DQ	7070dd70a7ade0d7H
	DQ	b6b6e2b6d954716fH
	DQ	d0d067d0ceb7bd1eH
	DQ	eded93ed3b7ec7d6H
	DQ	cccc17cc2edb85e2H
	DQ	424215422a578468H
	DQ	98985a98b4c22d2cH
	DQ	a4a4aaa4490e55edH
	DQ	2828a0285d885075H
	DQ	5c5c6d5cda31b886H
	DQ	f8f8c7f8933fed6bH
	DQ	8686228644a411c2H
_C1	DQ	d818186018c07830H
	DQ	2623238c2305af46H
	DQ	b8c6c63fc67ef991H
	DQ	fbe8e887e8136fcdH
	DQ	cb878726874ca113H
	DQ	11b8b8dab8a9626dH
	DQ	0901010401080502H
	DQ	0d4f4f214f426e9eH
	DQ	9b3636d836adee6cH
	DQ	ffa6a6a2a6590451H
	DQ	0cd2d26fd2debdb9H
	DQ	0ef5f5f3f5fb06f7H
	DQ	967979f979ef80f2H
	DQ	306f6fa16f5fcedeH
	DQ	6d91917e91fcef3fH
	DQ	f852525552aa07a4H
	DQ	4760609d6027fdc0H
	DQ	35bcbccabc897665H
	DQ	379b9b569baccd2bH
	DQ	8a8e8e028e048c01H
	DQ	d2a3a3b6a371155bH
	DQ	6c0c0c300c603c18H
	DQ	847b7bf17bff8af6H
	DQ	803535d435b5e16aH
	DQ	f51d1d741de8693aH
	DQ	b3e0e0a7e05347ddH
	DQ	21d7d77bd7f6acb3H
	DQ	9cc2c22fc25eed99H
	DQ	432e2eb82e6d965cH
	DQ	294b4b314b627a96H
	DQ	5dfefedffea321e1H
	DQ	d5575741578216aeH
	DQ	bd15155415a8412aH
	DQ	e87777c1779fb6eeH
	DQ	923737dc37a5eb6eH
	DQ	9ee5e5b3e57b56d7H
	DQ	139f9f469f8cd923H
	DQ	23f0f0e7f0d317fdH
	DQ	204a4a354a6a7f94H
	DQ	44dada4fda9e95a9H
	DQ	a258587d58fa25b0H
	DQ	cfc9c903c906ca8fH
	DQ	7c2929a429558d52H
	DQ	5a0a0a280a502214H
	DQ	50b1b1feb1e14f7fH
	DQ	c9a0a0baa0691a5dH
	DQ	146b6bb16b7fdad6H
	DQ	d985852e855cab17H
	DQ	3cbdbdcebd817367H
	DQ	8f5d5d695dd234baH
	DQ	9010104010805020H
	DQ	07f4f4f7f4f303f5H
	DQ	ddcbcb0bcb16c08bH
	DQ	d33e3ef83eedc67cH
	DQ	2d0505140528110aH
	DQ	78676781671fe6ceH
	DQ	97e4e4b7e47353d5H
	DQ	0227279c2725bb4eH
	DQ	7341411941325882H
	DQ	a78b8b168b2c9d0bH
	DQ	f6a7a7a6a7510153H
	DQ	b27d7de97dcf94faH
	DQ	4995956e95dcfb37H
	DQ	56d8d847d88e9fadH
	DQ	70fbfbcbfb8b30ebH
	DQ	cdeeee9fee2371c1H
	DQ	bb7c7ced7cc791f8H
	DQ	716666856617e3ccH
	DQ	7bdddd53dda68ea7H
	DQ	af17175c17b84b2eH
	DQ	454747014702468eH
	DQ	1a9e9e429e84dc21H
	DQ	d4caca0fca1ec589H
	DQ	582d2db42d75995aH
	DQ	2ebfbfc6bf917963H
	DQ	3f07071c07381b0eH
	DQ	acadad8ead012347H
	DQ	b05a5a755aea2fb4H
	DQ	ef838336836cb51bH
	DQ	b63333cc3385ff66H
	DQ	5c636391633ff2c6H
	DQ	1202020802100a04H
	DQ	93aaaa92aa393849H
	DQ	de7171d971afa8e2H
	DQ	c6c8c807c80ecf8dH
	DQ	d119196419c87d32H
	DQ	3b49493949727092H
	DQ	5fd9d943d9869aafH
	DQ	31f2f2eff2c31df9H
	DQ	a8e3e3abe34b48dbH
	DQ	b95b5b715be22ab6H
	DQ	bc88881a8834920dH
	DQ	3e9a9a529aa4c829H
	DQ	0b262698262dbe4cH
	DQ	bf3232c8328dfa64H
	DQ	59b0b0fab0e94a7dH
	DQ	f2e9e983e91b6acfH
	DQ	770f0f3c0f78331eH
	DQ	33d5d573d5e6a6b7H
	DQ	f480803a8074ba1dH
	DQ	27bebec2be997c61H
	DQ	ebcdcd13cd26de87H
	DQ	893434d034bde468H
	DQ	3248483d487a7590H
	DQ	54ffffdbffab24e3H
	DQ	8d7a7af57af78ff4H
	DQ	6490907a90f4ea3dH
	DQ	9d5f5f615fc23ebeH
	DQ	3d202080201da040H
	DQ	0f6868bd6867d5d0H
	DQ	ca1a1a681ad07234H
	DQ	b7aeae82ae192c41H
	DQ	7db4b4eab4c95e75H
	DQ	ce54544d549a19a8H
	DQ	7f93937693ece53bH
	DQ	2f222288220daa44H
	DQ	6364648d6407e9c8H
	DQ	2af1f1e3f1db12ffH
	DQ	cc7373d173bfa2e6H
	DQ	8212124812905a24H
	DQ	7a40401d403a5d80H
	DQ	4808082008402810H
	DQ	95c3c32bc356e89bH
	DQ	dfecec97ec337bc5H
	DQ	4ddbdb4bdb9690abH
	DQ	c0a1a1bea1611f5fH
	DQ	918d8d0e8d1c8307H
	DQ	c83d3df43df5c97aH
	DQ	5b97976697ccf133H
	DQ	0000000000000000H
	DQ	f9cfcf1bcf36d483H
	DQ	6e2b2bac2b458756H
	DQ	e17676c57697b3ecH
	DQ	e68282328264b019H
	DQ	28d6d67fd6fea9b1H
	DQ	c31b1b6c1bd87736H
	DQ	74b5b5eeb5c15b77H
	DQ	beafaf86af112943H
	DQ	1d6a6ab56a77dfd4H
	DQ	ea50505d50ba0da0H
	DQ	5745450945124c8aH
	DQ	38f3f3ebf3cb18fbH
	DQ	ad3030c0309df060H
	DQ	c4efef9bef2b74c3H
	DQ	da3f3ffc3fe5c37eH
	DQ	c755554955921caaH
	DQ	dba2a2b2a2791059H
	DQ	e9eaea8fea0365c9H
	DQ	6a656589650feccaH
	DQ	03babad2bab96869H
	DQ	4a2f2fbc2f65935eH
	DQ	8ec0c027c04ee79dH
	DQ	60dede5fdebe81a1H
	DQ	fc1c1c701ce06c38H
	DQ	46fdfdd3fdbb2ee7H
	DQ	1f4d4d294d52649aH
	DQ	7692927292e4e039H
	DQ	fa7575c9758fbceaH
	DQ	3606061806301e0cH
	DQ	ae8a8a128a249809H
	DQ	4bb2b2f2b2f94079H
	DQ	85e6e6bfe66359d1H
	DQ	7e0e0e380e70361cH
	DQ	e71f1f7c1ff8633eH
	DQ	556262956237f7c4H
	DQ	3ad4d477d4eea3b5H
	DQ	81a8a89aa829324dH
	DQ	5296966296c4f431H
	DQ	62f9f9c3f99b3aefH
	DQ	a3c5c533c566f697H
	DQ	102525942535b14aH
	DQ	ab59597959f220b2H
	DQ	d084842a8454ae15H
	DQ	c57272d572b7a7e4H
	DQ	ec3939e439d5dd72H
	DQ	164c4c2d4c5a6198H
	DQ	945e5e655eca3bbcH
	DQ	9f7878fd78e785f0H
	DQ	e53838e038ddd870H
	DQ	988c8c0a8c148605H
	DQ	17d1d163d1c6b2bfH
	DQ	e4a5a5aea5410b57H
	DQ	a1e2e2afe2434dd9H
	DQ	4e616199612ff8c2H
	DQ	42b3b3f6b3f1457bH
	DQ	342121842115a542H
	DQ	089c9c4a9c94d625H
	DQ	ee1e1e781ef0663cH
	DQ	6143431143225286H
	DQ	b1c7c73bc776fc93H
	DQ	4ffcfcd7fcb32be5H
	DQ	2404041004201408H
	DQ	e351515951b208a2H
	DQ	2599995e99bcc72fH
	DQ	226d6da96d4fc4daH
	DQ	650d0d340d68391aH
	DQ	79fafacffa8335e9H
	DQ	69dfdf5bdfb684a3H
	DQ	a97e7ee57ed79bfcH
	DQ	19242490243db448H
	DQ	fe3b3bec3bc5d776H
	DQ	9aabab96ab313d4bH
	DQ	f0cece1fce3ed181H
	DQ	9911114411885522H
	DQ	838f8f068f0c8903H
	DQ	044e4e254e4a6b9cH
	DQ	66b7b7e6b7d15173H
	DQ	e0ebeb8beb0b60cbH
	DQ	c13c3cf03cfdcc78H
	DQ	fd81813e817cbf1fH
	DQ	4094946a94d4fe35H
	DQ	1cf7f7fbf7eb0cf3H
	DQ	18b9b9deb9a1676fH
	DQ	8b13134c13985f26H
	DQ	512c2cb02c7d9c58H
	DQ	05d3d36bd3d6b8bbH
	DQ	8ce7e7bbe76b5cd3H
	DQ	396e6ea56e57cbdcH
	DQ	aac4c437c46ef395H
	DQ	1b03030c03180f06H
	DQ	dc565645568a13acH
	DQ	5e44440d441a4988H
	DQ	a07f7fe17fdf9efeH
	DQ	88a9a99ea921374fH
	DQ	672a2aa82a4d8254H
	DQ	0abbbbd6bbb16d6bH
	DQ	87c1c123c146e29fH
	DQ	f153535153a202a6H
	DQ	72dcdc57dcae8ba5H
	DQ	530b0b2c0b582716H
	DQ	019d9d4e9d9cd327H
	DQ	2b6c6cad6c47c1d8H
	DQ	a43131c43195f562H
	DQ	f37474cd7487b9e8H
	DQ	15f6f6fff6e309f1H
	DQ	4c464605460a438cH
	DQ	a5acac8aac092645H
	DQ	b589891e893c970fH
	DQ	b414145014a04428H
	DQ	bae1e1a3e15b42dfH
	DQ	a616165816b04e2cH
	DQ	f73a3ae83acdd274H
	DQ	066969b9696fd0d2H
	DQ	4109092409482d12H
	DQ	d77070dd70a7ade0H
	DQ	6fb6b6e2b6d95471H
	DQ	1ed0d067d0ceb7bdH
	DQ	d6eded93ed3b7ec7H
	DQ	e2cccc17cc2edb85H
	DQ	68424215422a5784H
	DQ	2c98985a98b4c22dH
	DQ	eda4a4aaa4490e55H
	DQ	752828a0285d8850H
	DQ	865c5c6d5cda31b8H
	DQ	6bf8f8c7f8933fedH
	DQ	c28686228644a411H
_C2	DQ	30d818186018c078H
	DQ	462623238c2305afH
	DQ	91b8c6c63fc67ef9H
	DQ	cdfbe8e887e8136fH
	DQ	13cb878726874ca1H
	DQ	6d11b8b8dab8a962H
	DQ	0209010104010805H
	DQ	9e0d4f4f214f426eH
	DQ	6c9b3636d836adeeH
	DQ	51ffa6a6a2a65904H
	DQ	b90cd2d26fd2debdH
	DQ	f70ef5f5f3f5fb06H
	DQ	f2967979f979ef80H
	DQ	de306f6fa16f5fceH
	DQ	3f6d91917e91fcefH
	DQ	a4f852525552aa07H
	DQ	c04760609d6027fdH
	DQ	6535bcbccabc8976H
	DQ	2b379b9b569baccdH
	DQ	018a8e8e028e048cH
	DQ	5bd2a3a3b6a37115H
	DQ	186c0c0c300c603cH
	DQ	f6847b7bf17bff8aH
	DQ	6a803535d435b5e1H
	DQ	3af51d1d741de869H
	DQ	ddb3e0e0a7e05347H
	DQ	b321d7d77bd7f6acH
	DQ	999cc2c22fc25eedH
	DQ	5c432e2eb82e6d96H
	DQ	96294b4b314b627aH
	DQ	e15dfefedffea321H
	DQ	aed5575741578216H
	DQ	2abd15155415a841H
	DQ	eee87777c1779fb6H
	DQ	6e923737dc37a5ebH
	DQ	d79ee5e5b3e57b56H
	DQ	23139f9f469f8cd9H
	DQ	fd23f0f0e7f0d317H
	DQ	94204a4a354a6a7fH
	DQ	a944dada4fda9e95H
	DQ	b0a258587d58fa25H
	DQ	8fcfc9c903c906caH
	DQ	527c2929a429558dH
	DQ	145a0a0a280a5022H
	DQ	7f50b1b1feb1e14fH
	DQ	5dc9a0a0baa0691aH
	DQ	d6146b6bb16b7fdaH
	DQ	17d985852e855cabH
	DQ	673cbdbdcebd8173H
	DQ	ba8f5d5d695dd234H
	DQ	2090101040108050H
	DQ	f507f4f4f7f4f303H
	DQ	8bddcbcb0bcb16c0H
	DQ	7cd33e3ef83eedc6H
	DQ	0a2d050514052811H
	DQ	ce78676781671fe6H
	DQ	d597e4e4b7e47353H
	DQ	4e0227279c2725bbH
	DQ	8273414119413258H
	DQ	0ba78b8b168b2c9dH
	DQ	53f6a7a7a6a75101H
	DQ	fab27d7de97dcf94H
	DQ	374995956e95dcfbH
	DQ	ad56d8d847d88e9fH
	DQ	eb70fbfbcbfb8b30H
	DQ	c1cdeeee9fee2371H
	DQ	f8bb7c7ced7cc791H
	DQ	cc716666856617e3H
	DQ	a77bdddd53dda68eH
	DQ	2eaf17175c17b84bH
	DQ	8e45474701470246H
	DQ	211a9e9e429e84dcH
	DQ	89d4caca0fca1ec5H
	DQ	5a582d2db42d7599H
	DQ	632ebfbfc6bf9179H
	DQ	0e3f07071c07381bH
	DQ	47acadad8ead0123H
	DQ	b4b05a5a755aea2fH
	DQ	1bef838336836cb5H
	DQ	66b63333cc3385ffH
	DQ	c65c636391633ff2H
	DQ	041202020802100aH
	DQ	4993aaaa92aa3938H
	DQ	e2de7171d971afa8H
	DQ	8dc6c8c807c80ecfH
	DQ	32d119196419c87dH
	DQ	923b494939497270H
	DQ	af5fd9d943d9869aH
	DQ	f931f2f2eff2c31dH
	DQ	dba8e3e3abe34b48H
	DQ	b6b95b5b715be22aH
	DQ	0dbc88881a883492H
	DQ	293e9a9a529aa4c8H
	DQ	4c0b262698262dbeH
	DQ	64bf3232c8328dfaH
	DQ	7d59b0b0fab0e94aH
	DQ	cff2e9e983e91b6aH
	DQ	1e770f0f3c0f7833H
	DQ	b733d5d573d5e6a6H
	DQ	1df480803a8074baH
	DQ	6127bebec2be997cH
	DQ	87ebcdcd13cd26deH
	DQ	68893434d034bde4H
	DQ	903248483d487a75H
	DQ	e354ffffdbffab24H
	DQ	f48d7a7af57af78fH
	DQ	3d6490907a90f4eaH
	DQ	be9d5f5f615fc23eH
	DQ	403d202080201da0H
	DQ	d00f6868bd6867d5H
	DQ	34ca1a1a681ad072H
	DQ	41b7aeae82ae192cH
	DQ	757db4b4eab4c95eH
	DQ	a8ce54544d549a19H
	DQ	3b7f93937693ece5H
	DQ	442f222288220daaH
	DQ	c86364648d6407e9H
	DQ	ff2af1f1e3f1db12H
	DQ	e6cc7373d173bfa2H
	DQ	248212124812905aH
	DQ	807a40401d403a5dH
	DQ	1048080820084028H
	DQ	9b95c3c32bc356e8H
	DQ	c5dfecec97ec337bH
	DQ	ab4ddbdb4bdb9690H
	DQ	5fc0a1a1bea1611fH
	DQ	07918d8d0e8d1c83H
	DQ	7ac83d3df43df5c9H
	DQ	335b97976697ccf1H
	DQ	0000000000000000H
	DQ	83f9cfcf1bcf36d4H
	DQ	566e2b2bac2b4587H
	DQ	ece17676c57697b3H
	DQ	19e68282328264b0H
	DQ	b128d6d67fd6fea9H
	DQ	36c31b1b6c1bd877H
	DQ	7774b5b5eeb5c15bH
	DQ	43beafaf86af1129H
	DQ	d41d6a6ab56a77dfH
	DQ	a0ea50505d50ba0dH
	DQ	8a5745450945124cH
	DQ	fb38f3f3ebf3cb18H
	DQ	60ad3030c0309df0H
	DQ	c3c4efef9bef2b74H
	DQ	7eda3f3ffc3fe5c3H
	DQ	aac755554955921cH
	DQ	59dba2a2b2a27910H
	DQ	c9e9eaea8fea0365H
	DQ	ca6a656589650fecH
	DQ	6903babad2bab968H
	DQ	5e4a2f2fbc2f6593H
	DQ	9d8ec0c027c04ee7H
	DQ	a160dede5fdebe81H
	DQ	38fc1c1c701ce06cH
	DQ	e746fdfdd3fdbb2eH
	DQ	9a1f4d4d294d5264H
	DQ	397692927292e4e0H
	DQ	eafa7575c9758fbcH
	DQ	0c3606061806301eH
	DQ	09ae8a8a128a2498H
	DQ	794bb2b2f2b2f940H
	DQ	d185e6e6bfe66359H
	DQ	1c7e0e0e380e7036H
	DQ	3ee71f1f7c1ff863H
	DQ	c4556262956237f7H
	DQ	b53ad4d477d4eea3H
	DQ	4d81a8a89aa82932H
	DQ	315296966296c4f4H
	DQ	ef62f9f9c3f99b3aH
	DQ	97a3c5c533c566f6H
	DQ	4a102525942535b1H
	DQ	b2ab59597959f220H
	DQ	15d084842a8454aeH
	DQ	e4c57272d572b7a7H
	DQ	72ec3939e439d5ddH
	DQ	98164c4c2d4c5a61H
	DQ	bc945e5e655eca3bH
	DQ	f09f7878fd78e785H
	DQ	70e53838e038ddd8H
	DQ	05988c8c0a8c1486H
	DQ	bf17d1d163d1c6b2H
	DQ	57e4a5a5aea5410bH
	DQ	d9a1e2e2afe2434dH
	DQ	c24e616199612ff8H
	DQ	7b42b3b3f6b3f145H
	DQ	42342121842115a5H
	DQ	25089c9c4a9c94d6H
	DQ	3cee1e1e781ef066H
	DQ	8661434311432252H
	DQ	93b1c7c73bc776fcH
	DQ	e54ffcfcd7fcb32bH
	DQ	0824040410042014H
	DQ	a2e351515951b208H
	DQ	2f2599995e99bcc7H
	DQ	da226d6da96d4fc4H
	DQ	1a650d0d340d6839H
	DQ	e979fafacffa8335H
	DQ	a369dfdf5bdfb684H
	DQ	fca97e7ee57ed79bH
	DQ	4819242490243db4H
	DQ	76fe3b3bec3bc5d7H
	DQ	4b9aabab96ab313dH
	DQ	81f0cece1fce3ed1H
	DQ	2299111144118855H
	DQ	03838f8f068f0c89H
	DQ	9c044e4e254e4a6bH
	DQ	7366b7b7e6b7d151H
	DQ	cbe0ebeb8beb0b60H
	DQ	78c13c3cf03cfdccH
	DQ	1ffd81813e817cbfH
	DQ	354094946a94d4feH
	DQ	f31cf7f7fbf7eb0cH
	DQ	6f18b9b9deb9a167H
	DQ	268b13134c13985fH
	DQ	58512c2cb02c7d9cH
	DQ	bb05d3d36bd3d6b8H
	DQ	d38ce7e7bbe76b5cH
	DQ	dc396e6ea56e57cbH
	DQ	95aac4c437c46ef3H
	DQ	061b03030c03180fH
	DQ	acdc565645568a13H
	DQ	885e44440d441a49H
	DQ	fea07f7fe17fdf9eH
	DQ	4f88a9a99ea92137H
	DQ	54672a2aa82a4d82H
	DQ	6b0abbbbd6bbb16dH
	DQ	9f87c1c123c146e2H
	DQ	a6f153535153a202H
	DQ	a572dcdc57dcae8bH
	DQ	16530b0b2c0b5827H
	DQ	27019d9d4e9d9cd3H
	DQ	d82b6c6cad6c47c1H
	DQ	62a43131c43195f5H
	DQ	e8f37474cd7487b9H
	DQ	f115f6f6fff6e309H
	DQ	8c4c464605460a43H
	DQ	45a5acac8aac0926H
	DQ	0fb589891e893c97H
	DQ	28b414145014a044H
	DQ	dfbae1e1a3e15b42H
	DQ	2ca616165816b04eH
	DQ	74f73a3ae83acdd2H
	DQ	d2066969b9696fd0H
	DQ	124109092409482dH
	DQ	e0d77070dd70a7adH
	DQ	716fb6b6e2b6d954H
	DQ	bd1ed0d067d0ceb7H
	DQ	c7d6eded93ed3b7eH
	DQ	85e2cccc17cc2edbH
	DQ	8468424215422a57H
	DQ	2d2c98985a98b4c2H
	DQ	55eda4a4aaa4490eH
	DQ	50752828a0285d88H
	DQ	b8865c5c6d5cda31H
	DQ	ed6bf8f8c7f8933fH
	DQ	11c28686228644a4H
_C3	DQ	7830d818186018c0H
	DQ	af462623238c2305H
	DQ	f991b8c6c63fc67eH
	DQ	6fcdfbe8e887e813H
	DQ	a113cb878726874cH
	DQ	626d11b8b8dab8a9H
	DQ	0502090101040108H
	DQ	6e9e0d4f4f214f42H
	DQ	ee6c9b3636d836adH
	DQ	0451ffa6a6a2a659H
	DQ	bdb90cd2d26fd2deH
	DQ	06f70ef5f5f3f5fbH
	DQ	80f2967979f979efH
	DQ	cede306f6fa16f5fH
	DQ	ef3f6d91917e91fcH
	DQ	07a4f852525552aaH
	DQ	fdc04760609d6027H
	DQ	766535bcbccabc89H
	DQ	cd2b379b9b569bacH
	DQ	8c018a8e8e028e04H
	DQ	155bd2a3a3b6a371H
	DQ	3c186c0c0c300c60H
	DQ	8af6847b7bf17bffH
	DQ	e16a803535d435b5H
	DQ	693af51d1d741de8H
	DQ	47ddb3e0e0a7e053H
	DQ	acb321d7d77bd7f6H
	DQ	ed999cc2c22fc25eH
	DQ	965c432e2eb82e6dH
	DQ	7a96294b4b314b62H
	DQ	21e15dfefedffea3H
	DQ	16aed55757415782H
	DQ	412abd15155415a8H
	DQ	b6eee87777c1779fH
	DQ	eb6e923737dc37a5H
	DQ	56d79ee5e5b3e57bH
	DQ	d923139f9f469f8cH
	DQ	17fd23f0f0e7f0d3H
	DQ	7f94204a4a354a6aH
	DQ	95a944dada4fda9eH
	DQ	25b0a258587d58faH
	DQ	ca8fcfc9c903c906H
	DQ	8d527c2929a42955H
	DQ	22145a0a0a280a50H
	DQ	4f7f50b1b1feb1e1H
	DQ	1a5dc9a0a0baa069H
	DQ	dad6146b6bb16b7fH
	DQ	ab17d985852e855cH
	DQ	73673cbdbdcebd81H
	DQ	34ba8f5d5d695dd2H
	DQ	5020901010401080H
	DQ	03f507f4f4f7f4f3H
	DQ	c08bddcbcb0bcb16H
	DQ	c67cd33e3ef83eedH
	DQ	110a2d0505140528H
	DQ	e6ce78676781671fH
	DQ	53d597e4e4b7e473H
	DQ	bb4e0227279c2725H
	DQ	5882734141194132H
	DQ	9d0ba78b8b168b2cH
	DQ	0153f6a7a7a6a751H
	DQ	94fab27d7de97dcfH
	DQ	fb374995956e95dcH
	DQ	9fad56d8d847d88eH
	DQ	30eb70fbfbcbfb8bH
	DQ	71c1cdeeee9fee23H
	DQ	91f8bb7c7ced7cc7H
	DQ	e3cc716666856617H
	DQ	8ea77bdddd53dda6H
	DQ	4b2eaf17175c17b8H
	DQ	468e454747014702H
	DQ	dc211a9e9e429e84H
	DQ	c589d4caca0fca1eH
	DQ	995a582d2db42d75H
	DQ	79632ebfbfc6bf91H
	DQ	1b0e3f07071c0738H
	DQ	2347acadad8ead01H
	DQ	2fb4b05a5a755aeaH
	DQ	b51bef838336836cH
	DQ	ff66b63333cc3385H
	DQ	f2c65c636391633fH
	DQ	0a04120202080210H
	DQ	384993aaaa92aa39H
	DQ	a8e2de7171d971afH
	DQ	cf8dc6c8c807c80eH
	DQ	7d32d119196419c8H
	DQ	70923b4949394972H
	DQ	9aaf5fd9d943d986H
	DQ	1df931f2f2eff2c3H
	DQ	48dba8e3e3abe34bH
	DQ	2ab6b95b5b715be2H
	DQ	920dbc88881a8834H
	DQ	c8293e9a9a529aa4H
	DQ	be4c0b262698262dH
	DQ	fa64bf3232c8328dH
	DQ	4a7d59b0b0fab0e9H
	DQ	6acff2e9e983e91bH
	DQ	331e770f0f3c0f78H
	DQ	a6b733d5d573d5e6H
	DQ	ba1df480803a8074H
	DQ	7c6127bebec2be99H
	DQ	de87ebcdcd13cd26H
	DQ	e468893434d034bdH
	DQ	75903248483d487aH
	DQ	24e354ffffdbffabH
	DQ	8ff48d7a7af57af7H
	DQ	ea3d6490907a90f4H
	DQ	3ebe9d5f5f615fc2H
	DQ	a0403d202080201dH
	DQ	d5d00f6868bd6867H
	DQ	7234ca1a1a681ad0H
	DQ	2c41b7aeae82ae19H
	DQ	5e757db4b4eab4c9H
	DQ	19a8ce54544d549aH
	DQ	e53b7f93937693ecH
	DQ	aa442f222288220dH
	DQ	e9c86364648d6407H
	DQ	12ff2af1f1e3f1dbH
	DQ	a2e6cc7373d173bfH
	DQ	5a24821212481290H
	DQ	5d807a40401d403aH
	DQ	2810480808200840H
	DQ	e89b95c3c32bc356H
	DQ	7bc5dfecec97ec33H
	DQ	90ab4ddbdb4bdb96H
	DQ	1f5fc0a1a1bea161H
	DQ	8307918d8d0e8d1cH
	DQ	c97ac83d3df43df5H
	DQ	f1335b97976697ccH
	DQ	0000000000000000H
	DQ	d483f9cfcf1bcf36H
	DQ	87566e2b2bac2b45H
	DQ	b3ece17676c57697H
	DQ	b019e68282328264H
	DQ	a9b128d6d67fd6feH
	DQ	7736c31b1b6c1bd8H
	DQ	5b7774b5b5eeb5c1H
	DQ	2943beafaf86af11H
	DQ	dfd41d6a6ab56a77H
	DQ	0da0ea50505d50baH
	DQ	4c8a574545094512H
	DQ	18fb38f3f3ebf3cbH
	DQ	f060ad3030c0309dH
	DQ	74c3c4efef9bef2bH
	DQ	c37eda3f3ffc3fe5H
	DQ	1caac75555495592H
	DQ	1059dba2a2b2a279H
	DQ	65c9e9eaea8fea03H
	DQ	ecca6a656589650fH
	DQ	686903babad2bab9H
	DQ	935e4a2f2fbc2f65H
	DQ	e79d8ec0c027c04eH
	DQ	81a160dede5fdebeH
	DQ	6c38fc1c1c701ce0H
	DQ	2ee746fdfdd3fdbbH
	DQ	649a1f4d4d294d52H
	DQ	e0397692927292e4H
	DQ	bceafa7575c9758fH
	DQ	1e0c360606180630H
	DQ	9809ae8a8a128a24H
	DQ	40794bb2b2f2b2f9H
	DQ	59d185e6e6bfe663H
	DQ	361c7e0e0e380e70H
	DQ	633ee71f1f7c1ff8H
	DQ	f7c4556262956237H
	DQ	a3b53ad4d477d4eeH
	DQ	324d81a8a89aa829H
	DQ	f4315296966296c4H
	DQ	3aef62f9f9c3f99bH
	DQ	f697a3c5c533c566H
	DQ	b14a102525942535H
	DQ	20b2ab59597959f2H
	DQ	ae15d084842a8454H
	DQ	a7e4c57272d572b7H
	DQ	dd72ec3939e439d5H
	DQ	6198164c4c2d4c5aH
	DQ	3bbc945e5e655ecaH
	DQ	85f09f7878fd78e7H
	DQ	d870e53838e038ddH
	DQ	8605988c8c0a8c14H
	DQ	b2bf17d1d163d1c6H
	DQ	0b57e4a5a5aea541H
	DQ	4dd9a1e2e2afe243H
	DQ	f8c24e616199612fH
	DQ	457b42b3b3f6b3f1H
	DQ	a542342121842115H
	DQ	d625089c9c4a9c94H
	DQ	663cee1e1e781ef0H
	DQ	5286614343114322H
	DQ	fc93b1c7c73bc776H
	DQ	2be54ffcfcd7fcb3H
	DQ	1408240404100420H
	DQ	08a2e351515951b2H
	DQ	c72f2599995e99bcH
	DQ	c4da226d6da96d4fH
	DQ	391a650d0d340d68H
	DQ	35e979fafacffa83H
	DQ	84a369dfdf5bdfb6H
	DQ	9bfca97e7ee57ed7H
	DQ	b44819242490243dH
	DQ	d776fe3b3bec3bc5H
	DQ	3d4b9aabab96ab31H
	DQ	d181f0cece1fce3eH
	DQ	5522991111441188H
	DQ	8903838f8f068f0cH
	DQ	6b9c044e4e254e4aH
	DQ	517366b7b7e6b7d1H
	DQ	60cbe0ebeb8beb0bH
	DQ	cc78c13c3cf03cfdH
	DQ	bf1ffd81813e817cH
	DQ	fe354094946a94d4H
	DQ	0cf31cf7f7fbf7ebH
	DQ	676f18b9b9deb9a1H
	DQ	5f268b13134c1398H
	DQ	9c58512c2cb02c7dH
	DQ	b8bb05d3d36bd3d6H
	DQ	5cd38ce7e7bbe76bH
	DQ	cbdc396e6ea56e57H
	DQ	f395aac4c437c46eH
	DQ	0f061b03030c0318H
	DQ	13acdc565645568aH
	DQ	49885e44440d441aH
	DQ	9efea07f7fe17fdfH
	DQ	374f88a9a99ea921H
	DQ	8254672a2aa82a4dH
	DQ	6d6b0abbbbd6bbb1H
	DQ	e29f87c1c123c146H
	DQ	02a6f153535153a2H
	DQ	8ba572dcdc57dcaeH
	DQ	2716530b0b2c0b58H
	DQ	d327019d9d4e9d9cH
	DQ	c1d82b6c6cad6c47H
	DQ	f562a43131c43195H
	DQ	b9e8f37474cd7487H
	DQ	09f115f6f6fff6e3H
	DQ	438c4c464605460aH
	DQ	2645a5acac8aac09H
	DQ	970fb589891e893cH
	DQ	4428b414145014a0H
	DQ	42dfbae1e1a3e15bH
	DQ	4e2ca616165816b0H
	DQ	d274f73a3ae83acdH
	DQ	d0d2066969b9696fH
	DQ	2d12410909240948H
	DQ	ade0d77070dd70a7H
	DQ	54716fb6b6e2b6d9H
	DQ	b7bd1ed0d067d0ceH
	DQ	7ec7d6eded93ed3bH
	DQ	db85e2cccc17cc2eH
	DQ	578468424215422aH
	DQ	c22d2c98985a98b4H
	DQ	0e55eda4a4aaa449H
	DQ	8850752828a0285dH
	DQ	31b8865c5c6d5cdaH
	DQ	3fed6bf8f8c7f893H
	DQ	a411c28686228644H
_C4	DQ	c07830d818186018H
	DQ	05af462623238c23H
	DQ	7ef991b8c6c63fc6H
	DQ	136fcdfbe8e887e8H
	DQ	4ca113cb87872687H
	DQ	a9626d11b8b8dab8H
	DQ	0805020901010401H
	DQ	426e9e0d4f4f214fH
	DQ	adee6c9b3636d836H
	DQ	590451ffa6a6a2a6H
	DQ	debdb90cd2d26fd2H
	DQ	fb06f70ef5f5f3f5H
	DQ	ef80f2967979f979H
	DQ	5fcede306f6fa16fH
	DQ	fcef3f6d91917e91H
	DQ	aa07a4f852525552H
	DQ	27fdc04760609d60H
	DQ	89766535bcbccabcH
	DQ	accd2b379b9b569bH
	DQ	048c018a8e8e028eH
	DQ	71155bd2a3a3b6a3H
	DQ	603c186c0c0c300cH
	DQ	ff8af6847b7bf17bH
	DQ	b5e16a803535d435H
	DQ	e8693af51d1d741dH
	DQ	5347ddb3e0e0a7e0H
	DQ	f6acb321d7d77bd7H
	DQ	5eed999cc2c22fc2H
	DQ	6d965c432e2eb82eH
	DQ	627a96294b4b314bH
	DQ	a321e15dfefedffeH
	DQ	8216aed557574157H
	DQ	a8412abd15155415H
	DQ	9fb6eee87777c177H
	DQ	a5eb6e923737dc37H
	DQ	7b56d79ee5e5b3e5H
	DQ	8cd923139f9f469fH
	DQ	d317fd23f0f0e7f0H
	DQ	6a7f94204a4a354aH
	DQ	9e95a944dada4fdaH
	DQ	fa25b0a258587d58H
	DQ	06ca8fcfc9c903c9H
	DQ	558d527c2929a429H
	DQ	5022145a0a0a280aH
	DQ	e14f7f50b1b1feb1H
	DQ	691a5dc9a0a0baa0H
	DQ	7fdad6146b6bb16bH
	DQ	5cab17d985852e85H
	DQ	8173673cbdbdcebdH
	DQ	d234ba8f5d5d695dH
	DQ	8050209010104010H
	DQ	f303f507f4f4f7f4H
	DQ	16c08bddcbcb0bcbH
	DQ	edc67cd33e3ef83eH
	DQ	28110a2d05051405H
	DQ	1fe6ce7867678167H
	DQ	7353d597e4e4b7e4H
	DQ	25bb4e0227279c27H
	DQ	3258827341411941H
	DQ	2c9d0ba78b8b168bH
	DQ	510153f6a7a7a6a7H
	DQ	cf94fab27d7de97dH
	DQ	dcfb374995956e95H
	DQ	8e9fad56d8d847d8H
	DQ	8b30eb70fbfbcbfbH
	DQ	2371c1cdeeee9feeH
	DQ	c791f8bb7c7ced7cH
	DQ	17e3cc7166668566H
	DQ	a68ea77bdddd53ddH
	DQ	b84b2eaf17175c17H
	DQ	02468e4547470147H
	DQ	84dc211a9e9e429eH
	DQ	1ec589d4caca0fcaH
	DQ	75995a582d2db42dH
	DQ	9179632ebfbfc6bfH
	DQ	381b0e3f07071c07H
	DQ	012347acadad8eadH
	DQ	ea2fb4b05a5a755aH
	DQ	6cb51bef83833683H
	DQ	85ff66b63333cc33H
	DQ	3ff2c65c63639163H
	DQ	100a041202020802H
	DQ	39384993aaaa92aaH
	DQ	afa8e2de7171d971H
	DQ	0ecf8dc6c8c807c8H
	DQ	c87d32d119196419H
	DQ	7270923b49493949H
	DQ	869aaf5fd9d943d9H
	DQ	c31df931f2f2eff2H
	DQ	4b48dba8e3e3abe3H
	DQ	e22ab6b95b5b715bH
	DQ	34920dbc88881a88H
	DQ	a4c8293e9a9a529aH
	DQ	2dbe4c0b26269826H
	DQ	8dfa64bf3232c832H
	DQ	e94a7d59b0b0fab0H
	DQ	1b6acff2e9e983e9H
	DQ	78331e770f0f3c0fH
	DQ	e6a6b733d5d573d5H
	DQ	74ba1df480803a80H
	DQ	997c6127bebec2beH
	DQ	26de87ebcdcd13cdH
	DQ	bde468893434d034H
	DQ	7a75903248483d48H
	DQ	ab24e354ffffdbffH
	DQ	f78ff48d7a7af57aH
	DQ	f4ea3d6490907a90H
	DQ	c23ebe9d5f5f615fH
	DQ	1da0403d20208020H
	DQ	67d5d00f6868bd68H
	DQ	d07234ca1a1a681aH
	DQ	192c41b7aeae82aeH
	DQ	c95e757db4b4eab4H
	DQ	9a19a8ce54544d54H
	DQ	ece53b7f93937693H
	DQ	0daa442f22228822H
	DQ	07e9c86364648d64H
	DQ	db12ff2af1f1e3f1H
	DQ	bfa2e6cc7373d173H
	DQ	905a248212124812H
	DQ	3a5d807a40401d40H
	DQ	4028104808082008H
	DQ	56e89b95c3c32bc3H
	DQ	337bc5dfecec97ecH
	DQ	9690ab4ddbdb4bdbH
	DQ	611f5fc0a1a1bea1H
	DQ	1c8307918d8d0e8dH
	DQ	f5c97ac83d3df43dH
	DQ	ccf1335b97976697H
	DQ	0000000000000000H
	DQ	36d483f9cfcf1bcfH
	DQ	4587566e2b2bac2bH
	DQ	97b3ece17676c576H
	DQ	64b019e682823282H
	DQ	fea9b128d6d67fd6H
	DQ	d87736c31b1b6c1bH
	DQ	c15b7774b5b5eeb5H
	DQ	112943beafaf86afH
	DQ	77dfd41d6a6ab56aH
	DQ	ba0da0ea50505d50H
	DQ	124c8a5745450945H
	DQ	cb18fb38f3f3ebf3H
	DQ	9df060ad3030c030H
	DQ	2b74c3c4efef9befH
	DQ	e5c37eda3f3ffc3fH
	DQ	921caac755554955H
	DQ	791059dba2a2b2a2H
	DQ	0365c9e9eaea8feaH
	DQ	0fecca6a65658965H
	DQ	b9686903babad2baH
	DQ	65935e4a2f2fbc2fH
	DQ	4ee79d8ec0c027c0H
	DQ	be81a160dede5fdeH
	DQ	e06c38fc1c1c701cH
	DQ	bb2ee746fdfdd3fdH
	DQ	52649a1f4d4d294dH
	DQ	e4e0397692927292H
	DQ	8fbceafa7575c975H
	DQ	301e0c3606061806H
	DQ	249809ae8a8a128aH
	DQ	f940794bb2b2f2b2H
	DQ	6359d185e6e6bfe6H
	DQ	70361c7e0e0e380eH
	DQ	f8633ee71f1f7c1fH
	DQ	37f7c45562629562H
	DQ	eea3b53ad4d477d4H
	DQ	29324d81a8a89aa8H
	DQ	c4f4315296966296H
	DQ	9b3aef62f9f9c3f9H
	DQ	66f697a3c5c533c5H
	DQ	35b14a1025259425H
	DQ	f220b2ab59597959H
	DQ	54ae15d084842a84H
	DQ	b7a7e4c57272d572H
	DQ	d5dd72ec3939e439H
	DQ	5a6198164c4c2d4cH
	DQ	ca3bbc945e5e655eH
	DQ	e785f09f7878fd78H
	DQ	ddd870e53838e038H
	DQ	148605988c8c0a8cH
	DQ	c6b2bf17d1d163d1H
	DQ	410b57e4a5a5aea5H
	DQ	434dd9a1e2e2afe2H
	DQ	2ff8c24e61619961H
	DQ	f1457b42b3b3f6b3H
	DQ	15a5423421218421H
	DQ	94d625089c9c4a9cH
	DQ	f0663cee1e1e781eH
	DQ	2252866143431143H
	DQ	76fc93b1c7c73bc7H
	DQ	b32be54ffcfcd7fcH
	DQ	2014082404041004H
	DQ	b208a2e351515951H
	DQ	bcc72f2599995e99H
	DQ	4fc4da226d6da96dH
	DQ	68391a650d0d340dH
	DQ	8335e979fafacffaH
	DQ	b684a369dfdf5bdfH
	DQ	d79bfca97e7ee57eH
	DQ	3db4481924249024H
	DQ	c5d776fe3b3bec3bH
	DQ	313d4b9aabab96abH
	DQ	3ed181f0cece1fceH
	DQ	8855229911114411H
	DQ	0c8903838f8f068fH
	DQ	4a6b9c044e4e254eH
	DQ	d1517366b7b7e6b7H
	DQ	0b60cbe0ebeb8bebH
	DQ	fdcc78c13c3cf03cH
	DQ	7cbf1ffd81813e81H
	DQ	d4fe354094946a94H
	DQ	eb0cf31cf7f7fbf7H
	DQ	a1676f18b9b9deb9H
	DQ	985f268b13134c13H
	DQ	7d9c58512c2cb02cH
	DQ	d6b8bb05d3d36bd3H
	DQ	6b5cd38ce7e7bbe7H
	DQ	57cbdc396e6ea56eH
	DQ	6ef395aac4c437c4H
	DQ	180f061b03030c03H
	DQ	8a13acdc56564556H
	DQ	1a49885e44440d44H
	DQ	df9efea07f7fe17fH
	DQ	21374f88a9a99ea9H
	DQ	4d8254672a2aa82aH
	DQ	b16d6b0abbbbd6bbH
	DQ	46e29f87c1c123c1H
	DQ	a202a6f153535153H
	DQ	ae8ba572dcdc57dcH
	DQ	582716530b0b2c0bH
	DQ	9cd327019d9d4e9dH
	DQ	47c1d82b6c6cad6cH
	DQ	95f562a43131c431H
	DQ	87b9e8f37474cd74H
	DQ	e309f115f6f6fff6H
	DQ	0a438c4c46460546H
	DQ	092645a5acac8aacH
	DQ	3c970fb589891e89H
	DQ	a04428b414145014H
	DQ	5b42dfbae1e1a3e1H
	DQ	b04e2ca616165816H
	DQ	cdd274f73a3ae83aH
	DQ	6fd0d2066969b969H
	DQ	482d124109092409H
	DQ	a7ade0d77070dd70H
	DQ	d954716fb6b6e2b6H
	DQ	ceb7bd1ed0d067d0H
	DQ	3b7ec7d6eded93edH
	DQ	2edb85e2cccc17ccH
	DQ	2a57846842421542H
	DQ	b4c22d2c98985a98H
	DQ	490e55eda4a4aaa4H
	DQ	5d8850752828a028H
	DQ	da31b8865c5c6d5cH
	DQ	933fed6bf8f8c7f8H
	DQ	44a411c286862286H
_C5	DQ	18c07830d8181860H
	DQ	2305af462623238cH
	DQ	c67ef991b8c6c63fH
	DQ	e8136fcdfbe8e887H
	DQ	874ca113cb878726H
	DQ	b8a9626d11b8b8daH
	DQ	0108050209010104H
	DQ	4f426e9e0d4f4f21H
	DQ	36adee6c9b3636d8H
	DQ	a6590451ffa6a6a2H
	DQ	d2debdb90cd2d26fH
	DQ	f5fb06f70ef5f5f3H
	DQ	79ef80f2967979f9H
	DQ	6f5fcede306f6fa1H
	DQ	91fcef3f6d91917eH
	DQ	52aa07a4f8525255H
	DQ	6027fdc04760609dH
	DQ	bc89766535bcbccaH
	DQ	9baccd2b379b9b56H
	DQ	8e048c018a8e8e02H
	DQ	a371155bd2a3a3b6H
	DQ	0c603c186c0c0c30H
	DQ	7bff8af6847b7bf1H
	DQ	35b5e16a803535d4H
	DQ	1de8693af51d1d74H
	DQ	e05347ddb3e0e0a7H
	DQ	d7f6acb321d7d77bH
	DQ	c25eed999cc2c22fH
	DQ	2e6d965c432e2eb8H
	DQ	4b627a96294b4b31H
	DQ	fea321e15dfefedfH
	DQ	578216aed5575741H
	DQ	15a8412abd151554H
	DQ	779fb6eee87777c1H
	DQ	37a5eb6e923737dcH
	DQ	e57b56d79ee5e5b3H
	DQ	9f8cd923139f9f46H
	DQ	f0d317fd23f0f0e7H
	DQ	4a6a7f94204a4a35H
	DQ	da9e95a944dada4fH
	DQ	58fa25b0a258587dH
	DQ	c906ca8fcfc9c903H
	DQ	29558d527c2929a4H
	DQ	0a5022145a0a0a28H
	DQ	b1e14f7f50b1b1feH
	DQ	a0691a5dc9a0a0baH
	DQ	6b7fdad6146b6bb1H
	DQ	855cab17d985852eH
	DQ	bd8173673cbdbdceH
	DQ	5dd234ba8f5d5d69H
	DQ	1080502090101040H
	DQ	f4f303f507f4f4f7H
	DQ	cb16c08bddcbcb0bH
	DQ	3eedc67cd33e3ef8H
	DQ	0528110a2d050514H
	DQ	671fe6ce78676781H
	DQ	e47353d597e4e4b7H
	DQ	2725bb4e0227279cH
	DQ	4132588273414119H
	DQ	8b2c9d0ba78b8b16H
	DQ	a7510153f6a7a7a6H
	DQ	7dcf94fab27d7de9H
	DQ	95dcfb374995956eH
	DQ	d88e9fad56d8d847H
	DQ	fb8b30eb70fbfbcbH
	DQ	ee2371c1cdeeee9fH
	DQ	7cc791f8bb7c7cedH
	DQ	6617e3cc71666685H
	DQ	dda68ea77bdddd53H
	DQ	17b84b2eaf17175cH
	DQ	4702468e45474701H
	DQ	9e84dc211a9e9e42H
	DQ	ca1ec589d4caca0fH
	DQ	2d75995a582d2db4H
	DQ	bf9179632ebfbfc6H
	DQ	07381b0e3f07071cH
	DQ	ad012347acadad8eH
	DQ	5aea2fb4b05a5a75H
	DQ	836cb51bef838336H
	DQ	3385ff66b63333ccH
	DQ	633ff2c65c636391H
	DQ	02100a0412020208H
	DQ	aa39384993aaaa92H
	DQ	71afa8e2de7171d9H
	DQ	c80ecf8dc6c8c807H
	DQ	19c87d32d1191964H
	DQ	497270923b494939H
	DQ	d9869aaf5fd9d943H
	DQ	f2c31df931f2f2efH
	DQ	e34b48dba8e3e3abH
	DQ	5be22ab6b95b5b71H
	DQ	8834920dbc88881aH
	DQ	9aa4c8293e9a9a52H
	DQ	262dbe4c0b262698H
	DQ	328dfa64bf3232c8H
	DQ	b0e94a7d59b0b0faH
	DQ	e91b6acff2e9e983H
	DQ	0f78331e770f0f3cH
	DQ	d5e6a6b733d5d573H
	DQ	8074ba1df480803aH
	DQ	be997c6127bebec2H
	DQ	cd26de87ebcdcd13H
	DQ	34bde468893434d0H
	DQ	487a75903248483dH
	DQ	ffab24e354ffffdbH
	DQ	7af78ff48d7a7af5H
	DQ	90f4ea3d6490907aH
	DQ	5fc23ebe9d5f5f61H
	DQ	201da0403d202080H
	DQ	6867d5d00f6868bdH
	DQ	1ad07234ca1a1a68H
	DQ	ae192c41b7aeae82H
	DQ	b4c95e757db4b4eaH
	DQ	549a19a8ce54544dH
	DQ	93ece53b7f939376H
	DQ	220daa442f222288H
	DQ	6407e9c86364648dH
	DQ	f1db12ff2af1f1e3H
	DQ	73bfa2e6cc7373d1H
	DQ	12905a2482121248H
	DQ	403a5d807a40401dH
	DQ	0840281048080820H
	DQ	c356e89b95c3c32bH
	DQ	ec337bc5dfecec97H
	DQ	db9690ab4ddbdb4bH
	DQ	a1611f5fc0a1a1beH
	DQ	8d1c8307918d8d0eH
	DQ	3df5c97ac83d3df4H
	DQ	97ccf1335b979766H
	DQ	0000000000000000H
	DQ	cf36d483f9cfcf1bH
	DQ	2b4587566e2b2bacH
	DQ	7697b3ece17676c5H
	DQ	8264b019e6828232H
	DQ	d6fea9b128d6d67fH
	DQ	1bd87736c31b1b6cH
	DQ	b5c15b7774b5b5eeH
	DQ	af112943beafaf86H
	DQ	6a77dfd41d6a6ab5H
	DQ	50ba0da0ea50505dH
	DQ	45124c8a57454509H
	DQ	f3cb18fb38f3f3ebH
	DQ	309df060ad3030c0H
	DQ	ef2b74c3c4efef9bH
	DQ	3fe5c37eda3f3ffcH
	DQ	55921caac7555549H
	DQ	a2791059dba2a2b2H
	DQ	ea0365c9e9eaea8fH
	DQ	650fecca6a656589H
	DQ	bab9686903babad2H
	DQ	2f65935e4a2f2fbcH
	DQ	c04ee79d8ec0c027H
	DQ	debe81a160dede5fH
	DQ	1ce06c38fc1c1c70H
	DQ	fdbb2ee746fdfdd3H
	DQ	4d52649a1f4d4d29H
	DQ	92e4e03976929272H
	DQ	758fbceafa7575c9H
	DQ	06301e0c36060618H
	DQ	8a249809ae8a8a12H
	DQ	b2f940794bb2b2f2H
	DQ	e66359d185e6e6bfH
	DQ	0e70361c7e0e0e38H
	DQ	1ff8633ee71f1f7cH
	DQ	6237f7c455626295H
	DQ	d4eea3b53ad4d477H
	DQ	a829324d81a8a89aH
	DQ	96c4f43152969662H
	DQ	f99b3aef62f9f9c3H
	DQ	c566f697a3c5c533H
	DQ	2535b14a10252594H
	DQ	59f220b2ab595979H
	DQ	8454ae15d084842aH
	DQ	72b7a7e4c57272d5H
	DQ	39d5dd72ec3939e4H
	DQ	4c5a6198164c4c2dH
	DQ	5eca3bbc945e5e65H
	DQ	78e785f09f7878fdH
	DQ	38ddd870e53838e0H
	DQ	8c148605988c8c0aH
	DQ	d1c6b2bf17d1d163H
	DQ	a5410b57e4a5a5aeH
	DQ	e2434dd9a1e2e2afH
	DQ	612ff8c24e616199H
	DQ	b3f1457b42b3b3f6H
	DQ	2115a54234212184H
	DQ	9c94d625089c9c4aH
	DQ	1ef0663cee1e1e78H
	DQ	4322528661434311H
	DQ	c776fc93b1c7c73bH
	DQ	fcb32be54ffcfcd7H
	DQ	0420140824040410H
	DQ	51b208a2e3515159H
	DQ	99bcc72f2599995eH
	DQ	6d4fc4da226d6da9H
	DQ	0d68391a650d0d34H
	DQ	fa8335e979fafacfH
	DQ	dfb684a369dfdf5bH
	DQ	7ed79bfca97e7ee5H
	DQ	243db44819242490H
	DQ	3bc5d776fe3b3becH
	DQ	ab313d4b9aabab96H
	DQ	ce3ed181f0cece1fH
	DQ	1188552299111144H
	DQ	8f0c8903838f8f06H
	DQ	4e4a6b9c044e4e25H
	DQ	b7d1517366b7b7e6H
	DQ	eb0b60cbe0ebeb8bH
	DQ	3cfdcc78c13c3cf0H
	DQ	817cbf1ffd81813eH
	DQ	94d4fe354094946aH
	DQ	f7eb0cf31cf7f7fbH
	DQ	b9a1676f18b9b9deH
	DQ	13985f268b13134cH
	DQ	2c7d9c58512c2cb0H
	DQ	d3d6b8bb05d3d36bH
	DQ	e76b5cd38ce7e7bbH
	DQ	6e57cbdc396e6ea5H
	DQ	c46ef395aac4c437H
	DQ	03180f061b03030cH
	DQ	568a13acdc565645H
	DQ	441a49885e44440dH
	DQ	7fdf9efea07f7fe1H
	DQ	a921374f88a9a99eH
	DQ	2a4d8254672a2aa8H
	DQ	bbb16d6b0abbbbd6H
	DQ	c146e29f87c1c123H
	DQ	53a202a6f1535351H
	DQ	dcae8ba572dcdc57H
	DQ	0b582716530b0b2cH
	DQ	9d9cd327019d9d4eH
	DQ	6c47c1d82b6c6cadH
	DQ	3195f562a43131c4H
	DQ	7487b9e8f37474cdH
	DQ	f6e309f115f6f6ffH
	DQ	460a438c4c464605H
	DQ	ac092645a5acac8aH
	DQ	893c970fb589891eH
	DQ	14a04428b4141450H
	DQ	e15b42dfbae1e1a3H
	DQ	16b04e2ca6161658H
	DQ	3acdd274f73a3ae8H
	DQ	696fd0d2066969b9H
	DQ	09482d1241090924H
	DQ	70a7ade0d77070ddH
	DQ	b6d954716fb6b6e2H
	DQ	d0ceb7bd1ed0d067H
	DQ	ed3b7ec7d6eded93H
	DQ	cc2edb85e2cccc17H
	DQ	422a578468424215H
	DQ	98b4c22d2c98985aH
	DQ	a4490e55eda4a4aaH
	DQ	285d8850752828a0H
	DQ	5cda31b8865c5c6dH
	DQ	f8933fed6bf8f8c7H
	DQ	8644a411c2868622H
_C6	DQ	6018c07830d81818H
	DQ	8c2305af46262323H
	DQ	3fc67ef991b8c6c6H
	DQ	87e8136fcdfbe8e8H
	DQ	26874ca113cb8787H
	DQ	dab8a9626d11b8b8H
	DQ	0401080502090101H
	DQ	214f426e9e0d4f4fH
	DQ	d836adee6c9b3636H
	DQ	a2a6590451ffa6a6H
	DQ	6fd2debdb90cd2d2H
	DQ	f3f5fb06f70ef5f5H
	DQ	f979ef80f2967979H
	DQ	a16f5fcede306f6fH
	DQ	7e91fcef3f6d9191H
	DQ	5552aa07a4f85252H
	DQ	9d6027fdc0476060H
	DQ	cabc89766535bcbcH
	DQ	569baccd2b379b9bH
	DQ	028e048c018a8e8eH
	DQ	b6a371155bd2a3a3H
	DQ	300c603c186c0c0cH
	DQ	f17bff8af6847b7bH
	DQ	d435b5e16a803535H
	DQ	741de8693af51d1dH
	DQ	a7e05347ddb3e0e0H
	DQ	7bd7f6acb321d7d7H
	DQ	2fc25eed999cc2c2H
	DQ	b82e6d965c432e2eH
	DQ	314b627a96294b4bH
	DQ	dffea321e15dfefeH
	DQ	41578216aed55757H
	DQ	5415a8412abd1515H
	DQ	c1779fb6eee87777H
	DQ	dc37a5eb6e923737H
	DQ	b3e57b56d79ee5e5H
	DQ	469f8cd923139f9fH
	DQ	e7f0d317fd23f0f0H
	DQ	354a6a7f94204a4aH
	DQ	4fda9e95a944dadaH
	DQ	7d58fa25b0a25858H
	DQ	03c906ca8fcfc9c9H
	DQ	a429558d527c2929H
	DQ	280a5022145a0a0aH
	DQ	feb1e14f7f50b1b1H
	DQ	baa0691a5dc9a0a0H
	DQ	b16b7fdad6146b6bH
	DQ	2e855cab17d98585H
	DQ	cebd8173673cbdbdH
	DQ	695dd234ba8f5d5dH
	DQ	4010805020901010H
	DQ	f7f4f303f507f4f4H
	DQ	0bcb16c08bddcbcbH
	DQ	f83eedc67cd33e3eH
	DQ	140528110a2d0505H
	DQ	81671fe6ce786767H
	DQ	b7e47353d597e4e4H
	DQ	9c2725bb4e022727H
	DQ	1941325882734141H
	DQ	168b2c9d0ba78b8bH
	DQ	a6a7510153f6a7a7H
	DQ	e97dcf94fab27d7dH
	DQ	6e95dcfb37499595H
	DQ	47d88e9fad56d8d8H
	DQ	cbfb8b30eb70fbfbH
	DQ	9fee2371c1cdeeeeH
	DQ	ed7cc791f8bb7c7cH
	DQ	856617e3cc716666H
	DQ	53dda68ea77bddddH
	DQ	5c17b84b2eaf1717H
	DQ	014702468e454747H
	DQ	429e84dc211a9e9eH
	DQ	0fca1ec589d4cacaH
	DQ	b42d75995a582d2dH
	DQ	c6bf9179632ebfbfH
	DQ	1c07381b0e3f0707H
	DQ	8ead012347acadadH
	DQ	755aea2fb4b05a5aH
	DQ	36836cb51bef8383H
	DQ	cc3385ff66b63333H
	DQ	91633ff2c65c6363H
	DQ	0802100a04120202H
	DQ	92aa39384993aaaaH
	DQ	d971afa8e2de7171H
	DQ	07c80ecf8dc6c8c8H
	DQ	6419c87d32d11919H
	DQ	39497270923b4949H
	DQ	43d9869aaf5fd9d9H
	DQ	eff2c31df931f2f2H
	DQ	abe34b48dba8e3e3H
	DQ	715be22ab6b95b5bH
	DQ	1a8834920dbc8888H
	DQ	529aa4c8293e9a9aH
	DQ	98262dbe4c0b2626H
	DQ	c8328dfa64bf3232H
	DQ	fab0e94a7d59b0b0H
	DQ	83e91b6acff2e9e9H
	DQ	3c0f78331e770f0fH
	DQ	73d5e6a6b733d5d5H
	DQ	3a8074ba1df48080H
	DQ	c2be997c6127bebeH
	DQ	13cd26de87ebcdcdH
	DQ	d034bde468893434H
	DQ	3d487a7590324848H
	DQ	dbffab24e354ffffH
	DQ	f57af78ff48d7a7aH
	DQ	7a90f4ea3d649090H
	DQ	615fc23ebe9d5f5fH
	DQ	80201da0403d2020H
	DQ	bd6867d5d00f6868H
	DQ	681ad07234ca1a1aH
	DQ	82ae192c41b7aeaeH
	DQ	eab4c95e757db4b4H
	DQ	4d549a19a8ce5454H
	DQ	7693ece53b7f9393H
	DQ	88220daa442f2222H
	DQ	8d6407e9c8636464H
	DQ	e3f1db12ff2af1f1H
	DQ	d173bfa2e6cc7373H
	DQ	4812905a24821212H
	DQ	1d403a5d807a4040H
	DQ	2008402810480808H
	DQ	2bc356e89b95c3c3H
	DQ	97ec337bc5dfececH
	DQ	4bdb9690ab4ddbdbH
	DQ	bea1611f5fc0a1a1H
	DQ	0e8d1c8307918d8dH
	DQ	f43df5c97ac83d3dH
	DQ	6697ccf1335b9797H
	DQ	0000000000000000H
	DQ	1bcf36d483f9cfcfH
	DQ	ac2b4587566e2b2bH
	DQ	c57697b3ece17676H
	DQ	328264b019e68282H
	DQ	7fd6fea9b128d6d6H
	DQ	6c1bd87736c31b1bH
	DQ	eeb5c15b7774b5b5H
	DQ	86af112943beafafH
	DQ	b56a77dfd41d6a6aH
	DQ	5d50ba0da0ea5050H
	DQ	0945124c8a574545H
	DQ	ebf3cb18fb38f3f3H
	DQ	c0309df060ad3030H
	DQ	9bef2b74c3c4efefH
	DQ	fc3fe5c37eda3f3fH
	DQ	4955921caac75555H
	DQ	b2a2791059dba2a2H
	DQ	8fea0365c9e9eaeaH
	DQ	89650fecca6a6565H
	DQ	d2bab9686903babaH
	DQ	bc2f65935e4a2f2fH
	DQ	27c04ee79d8ec0c0H
	DQ	5fdebe81a160dedeH
	DQ	701ce06c38fc1c1cH
	DQ	d3fdbb2ee746fdfdH
	DQ	294d52649a1f4d4dH
	DQ	7292e4e039769292H
	DQ	c9758fbceafa7575H
	DQ	1806301e0c360606H
	DQ	128a249809ae8a8aH
	DQ	f2b2f940794bb2b2H
	DQ	bfe66359d185e6e6H
	DQ	380e70361c7e0e0eH
	DQ	7c1ff8633ee71f1fH
	DQ	956237f7c4556262H
	DQ	77d4eea3b53ad4d4H
	DQ	9aa829324d81a8a8H
	DQ	6296c4f431529696H
	DQ	c3f99b3aef62f9f9H
	DQ	33c566f697a3c5c5H
	DQ	942535b14a102525H
	DQ	7959f220b2ab5959H
	DQ	2a8454ae15d08484H
	DQ	d572b7a7e4c57272H
	DQ	e439d5dd72ec3939H
	DQ	2d4c5a6198164c4cH
	DQ	655eca3bbc945e5eH
	DQ	fd78e785f09f7878H
	DQ	e038ddd870e53838H
	DQ	0a8c148605988c8cH
	DQ	63d1c6b2bf17d1d1H
	DQ	aea5410b57e4a5a5H
	DQ	afe2434dd9a1e2e2H
	DQ	99612ff8c24e6161H
	DQ	f6b3f1457b42b3b3H
	DQ	842115a542342121H
	DQ	4a9c94d625089c9cH
	DQ	781ef0663cee1e1eH
	DQ	1143225286614343H
	DQ	3bc776fc93b1c7c7H
	DQ	d7fcb32be54ffcfcH
	DQ	1004201408240404H
	DQ	5951b208a2e35151H
	DQ	5e99bcc72f259999H
	DQ	a96d4fc4da226d6dH
	DQ	340d68391a650d0dH
	DQ	cffa8335e979fafaH
	DQ	5bdfb684a369dfdfH
	DQ	e57ed79bfca97e7eH
	DQ	90243db448192424H
	DQ	ec3bc5d776fe3b3bH
	DQ	96ab313d4b9aababH
	DQ	1fce3ed181f0ceceH
	DQ	4411885522991111H
	DQ	068f0c8903838f8fH
	DQ	254e4a6b9c044e4eH
	DQ	e6b7d1517366b7b7H
	DQ	8beb0b60cbe0ebebH
	DQ	f03cfdcc78c13c3cH
	DQ	3e817cbf1ffd8181H
	DQ	6a94d4fe35409494H
	DQ	fbf7eb0cf31cf7f7H
	DQ	deb9a1676f18b9b9H
	DQ	4c13985f268b1313H
	DQ	b02c7d9c58512c2cH
	DQ	6bd3d6b8bb05d3d3H
	DQ	bbe76b5cd38ce7e7H
	DQ	a56e57cbdc396e6eH
	DQ	37c46ef395aac4c4H
	DQ	0c03180f061b0303H
	DQ	45568a13acdc5656H
	DQ	0d441a49885e4444H
	DQ	e17fdf9efea07f7fH
	DQ	9ea921374f88a9a9H
	DQ	a82a4d8254672a2aH
	DQ	d6bbb16d6b0abbbbH
	DQ	23c146e29f87c1c1H
	DQ	5153a202a6f15353H
	DQ	57dcae8ba572dcdcH
	DQ	2c0b582716530b0bH
	DQ	4e9d9cd327019d9dH
	DQ	ad6c47c1d82b6c6cH
	DQ	c43195f562a43131H
	DQ	cd7487b9e8f37474H
	DQ	fff6e309f115f6f6H
	DQ	05460a438c4c4646H
	DQ	8aac092645a5acacH
	DQ	1e893c970fb58989H
	DQ	5014a04428b41414H
	DQ	a3e15b42dfbae1e1H
	DQ	5816b04e2ca61616H
	DQ	e83acdd274f73a3aH
	DQ	b9696fd0d2066969H
	DQ	2409482d12410909H
	DQ	dd70a7ade0d77070H
	DQ	e2b6d954716fb6b6H
	DQ	67d0ceb7bd1ed0d0H
	DQ	93ed3b7ec7d6ededH
	DQ	17cc2edb85e2ccccH
	DQ	15422a5784684242H
	DQ	5a98b4c22d2c9898H
	DQ	aaa4490e55eda4a4H
	DQ	a0285d8850752828H
	DQ	6d5cda31b8865c5cH
	DQ	c7f8933fed6bf8f8H
	DQ	228644a411c28686H
_C7	DQ	186018c07830d818H
	DQ	238c2305af462623H
	DQ	c63fc67ef991b8c6H
	DQ	e887e8136fcdfbe8H
	DQ	8726874ca113cb87H
	DQ	b8dab8a9626d11b8H
	DQ	0104010805020901H
	DQ	4f214f426e9e0d4fH
	DQ	36d836adee6c9b36H
	DQ	a6a2a6590451ffa6H
	DQ	d26fd2debdb90cd2H
	DQ	f5f3f5fb06f70ef5H
	DQ	79f979ef80f29679H
	DQ	6fa16f5fcede306fH
	DQ	917e91fcef3f6d91H
	DQ	525552aa07a4f852H
	DQ	609d6027fdc04760H
	DQ	bccabc89766535bcH
	DQ	9b569baccd2b379bH
	DQ	8e028e048c018a8eH
	DQ	a3b6a371155bd2a3H
	DQ	0c300c603c186c0cH
	DQ	7bf17bff8af6847bH
	DQ	35d435b5e16a8035H
	DQ	1d741de8693af51dH
	DQ	e0a7e05347ddb3e0H
	DQ	d77bd7f6acb321d7H
	DQ	c22fc25eed999cc2H
	DQ	2eb82e6d965c432eH
	DQ	4b314b627a96294bH
	DQ	fedffea321e15dfeH
	DQ	5741578216aed557H
	DQ	155415a8412abd15H
	DQ	77c1779fb6eee877H
	DQ	37dc37a5eb6e9237H
	DQ	e5b3e57b56d79ee5H
	DQ	9f469f8cd923139fH
	DQ	f0e7f0d317fd23f0H
	DQ	4a354a6a7f94204aH
	DQ	da4fda9e95a944daH
	DQ	587d58fa25b0a258H
	DQ	c903c906ca8fcfc9H
	DQ	29a429558d527c29H
	DQ	0a280a5022145a0aH
	DQ	b1feb1e14f7f50b1H
	DQ	a0baa0691a5dc9a0H
	DQ	6bb16b7fdad6146bH
	DQ	852e855cab17d985H
	DQ	bdcebd8173673cbdH
	DQ	5d695dd234ba8f5dH
	DQ	1040108050209010H
	DQ	f4f7f4f303f507f4H
	DQ	cb0bcb16c08bddcbH
	DQ	3ef83eedc67cd33eH
	DQ	05140528110a2d05H
	DQ	6781671fe6ce7867H
	DQ	e4b7e47353d597e4H
	DQ	279c2725bb4e0227H
	DQ	4119413258827341H
	DQ	8b168b2c9d0ba78bH
	DQ	a7a6a7510153f6a7H
	DQ	7de97dcf94fab27dH
	DQ	956e95dcfb374995H
	DQ	d847d88e9fad56d8H
	DQ	fbcbfb8b30eb70fbH
	DQ	ee9fee2371c1cdeeH
	DQ	7ced7cc791f8bb7cH
	DQ	66856617e3cc7166H
	DQ	dd53dda68ea77bddH
	DQ	175c17b84b2eaf17H
	DQ	47014702468e4547H
	DQ	9e429e84dc211a9eH
	DQ	ca0fca1ec589d4caH
	DQ	2db42d75995a582dH
	DQ	bfc6bf9179632ebfH
	DQ	071c07381b0e3f07H
	DQ	ad8ead012347acadH
	DQ	5a755aea2fb4b05aH
	DQ	8336836cb51bef83H
	DQ	33cc3385ff66b633H
	DQ	6391633ff2c65c63H
	DQ	020802100a041202H
	DQ	aa92aa39384993aaH
	DQ	71d971afa8e2de71H
	DQ	c807c80ecf8dc6c8H
	DQ	196419c87d32d119H
	DQ	4939497270923b49H
	DQ	d943d9869aaf5fd9H
	DQ	f2eff2c31df931f2H
	DQ	e3abe34b48dba8e3H
	DQ	5b715be22ab6b95bH
	DQ	881a8834920dbc88H
	DQ	9a529aa4c8293e9aH
	DQ	2698262dbe4c0b26H
	DQ	32c8328dfa64bf32H
	DQ	b0fab0e94a7d59b0H
	DQ	e983e91b6acff2e9H
	DQ	0f3c0f78331e770fH
	DQ	d573d5e6a6b733d5H
	DQ	803a8074ba1df480H
	DQ	bec2be997c6127beH
	DQ	cd13cd26de87ebcdH
	DQ	34d034bde4688934H
	DQ	483d487a75903248H
	DQ	ffdbffab24e354ffH
	DQ	7af57af78ff48d7aH
	DQ	907a90f4ea3d6490H
	DQ	5f615fc23ebe9d5fH
	DQ	2080201da0403d20H
	DQ	68bd6867d5d00f68H
	DQ	1a681ad07234ca1aH
	DQ	ae82ae192c41b7aeH
	DQ	b4eab4c95e757db4H
	DQ	544d549a19a8ce54H
	DQ	937693ece53b7f93H
	DQ	2288220daa442f22H
	DQ	648d6407e9c86364H
	DQ	f1e3f1db12ff2af1H
	DQ	73d173bfa2e6cc73H
	DQ	124812905a248212H
	DQ	401d403a5d807a40H
	DQ	0820084028104808H
	DQ	c32bc356e89b95c3H
	DQ	ec97ec337bc5dfecH
	DQ	db4bdb9690ab4ddbH
	DQ	a1bea1611f5fc0a1H
	DQ	8d0e8d1c8307918dH
	DQ	3df43df5c97ac83dH
	DQ	976697ccf1335b97H
	DQ	0000000000000000H
	DQ	cf1bcf36d483f9cfH
	DQ	2bac2b4587566e2bH
	DQ	76c57697b3ece176H
	DQ	82328264b019e682H
	DQ	d67fd6fea9b128d6H
	DQ	1b6c1bd87736c31bH
	DQ	b5eeb5c15b7774b5H
	DQ	af86af112943beafH
	DQ	6ab56a77dfd41d6aH
	DQ	505d50ba0da0ea50H
	DQ	450945124c8a5745H
	DQ	f3ebf3cb18fb38f3H
	DQ	30c0309df060ad30H
	DQ	ef9bef2b74c3c4efH
	DQ	3ffc3fe5c37eda3fH
	DQ	554955921caac755H
	DQ	a2b2a2791059dba2H
	DQ	ea8fea0365c9e9eaH
	DQ	6589650fecca6a65H
	DQ	bad2bab9686903baH
	DQ	2fbc2f65935e4a2fH
	DQ	c027c04ee79d8ec0H
	DQ	de5fdebe81a160deH
	DQ	1c701ce06c38fc1cH
	DQ	fdd3fdbb2ee746fdH
	DQ	4d294d52649a1f4dH
	DQ	927292e4e0397692H
	DQ	75c9758fbceafa75H
	DQ	061806301e0c3606H
	DQ	8a128a249809ae8aH
	DQ	b2f2b2f940794bb2H
	DQ	e6bfe66359d185e6H
	DQ	0e380e70361c7e0eH
	DQ	1f7c1ff8633ee71fH
	DQ	62956237f7c45562H
	DQ	d477d4eea3b53ad4H
	DQ	a89aa829324d81a8H
	DQ	966296c4f4315296H
	DQ	f9c3f99b3aef62f9H
	DQ	c533c566f697a3c5H
	DQ	25942535b14a1025H
	DQ	597959f220b2ab59H
	DQ	842a8454ae15d084H
	DQ	72d572b7a7e4c572H
	DQ	39e439d5dd72ec39H
	DQ	4c2d4c5a6198164cH
	DQ	5e655eca3bbc945eH
	DQ	78fd78e785f09f78H
	DQ	38e038ddd870e538H
	DQ	8c0a8c148605988cH
	DQ	d163d1c6b2bf17d1H
	DQ	a5aea5410b57e4a5H
	DQ	e2afe2434dd9a1e2H
	DQ	6199612ff8c24e61H
	DQ	b3f6b3f1457b42b3H
	DQ	21842115a5423421H
	DQ	9c4a9c94d625089cH
	DQ	1e781ef0663cee1eH
	DQ	4311432252866143H
	DQ	c73bc776fc93b1c7H
	DQ	fcd7fcb32be54ffcH
	DQ	0410042014082404H
	DQ	515951b208a2e351H
	DQ	995e99bcc72f2599H
	DQ	6da96d4fc4da226dH
	DQ	0d340d68391a650dH
	DQ	facffa8335e979faH
	DQ	df5bdfb684a369dfH
	DQ	7ee57ed79bfca97eH
	DQ	2490243db4481924H
	DQ	3bec3bc5d776fe3bH
	DQ	ab96ab313d4b9aabH
	DQ	ce1fce3ed181f0ceH
	DQ	1144118855229911H
	DQ	8f068f0c8903838fH
	DQ	4e254e4a6b9c044eH
	DQ	b7e6b7d1517366b7H
	DQ	eb8beb0b60cbe0ebH
	DQ	3cf03cfdcc78c13cH
	DQ	813e817cbf1ffd81H
	DQ	946a94d4fe354094H
	DQ	f7fbf7eb0cf31cf7H
	DQ	b9deb9a1676f18b9H
	DQ	134c13985f268b13H
	DQ	2cb02c7d9c58512cH
	DQ	d36bd3d6b8bb05d3H
	DQ	e7bbe76b5cd38ce7H
	DQ	6ea56e57cbdc396eH
	DQ	c437c46ef395aac4H
	DQ	030c03180f061b03H
	DQ	5645568a13acdc56H
	DQ	440d441a49885e44H
	DQ	7fe17fdf9efea07fH
	DQ	a99ea921374f88a9H
	DQ	2aa82a4d8254672aH
	DQ	bbd6bbb16d6b0abbH
	DQ	c123c146e29f87c1H
	DQ	535153a202a6f153H
	DQ	dc57dcae8ba572dcH
	DQ	0b2c0b582716530bH
	DQ	9d4e9d9cd327019dH
	DQ	6cad6c47c1d82b6cH
	DQ	31c43195f562a431H
	DQ	74cd7487b9e8f374H
	DQ	f6fff6e309f115f6H
	DQ	4605460a438c4c46H
	DQ	ac8aac092645a5acH
	DQ	891e893c970fb589H
	DQ	145014a04428b414H
	DQ	e1a3e15b42dfbae1H
	DQ	165816b04e2ca616H
	DQ	3ae83acdd274f73aH
	DQ	69b9696fd0d20669H
	DQ	092409482d124109H
	DQ	70dd70a7ade0d770H
	DQ	b6e2b6d954716fb6H
	DQ	d067d0ceb7bd1ed0H
	DQ	ed93ed3b7ec7d6edH
	DQ	cc17cc2edb85e2ccH
	DQ	4215422a57846842H
	DQ	985a98b4c22d2c98H
	DQ	a4aaa4490e55eda4H
	DQ	28a0285d88507528H
	DQ	5c6d5cda31b8865cH
	DQ	f8c7f8933fed6bf8H
	DQ	86228644a411c286H
_rc	DQ	0000000000000000H
	DQ	1823c6e887b8014fH
	DQ	36a6d2f5796f9152H
	DQ	60bc9b8ea30c7b35H
	DQ	1de0d7c22e4bfe57H
	DQ	157737e59ff04adaH
	DQ	58c9290ab1a06b85H
	DQ	bd5d10f4cb3e0567H
	DQ	e427418ba77d95d8H
	DQ	fbee7c66dd17479eH
	DQ	ca2dbf07ad5a8333H
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\whirlpool.c
;	COMDAT _processBuffer
_TEXT	SEGMENT
_K$ = -396						; size = 64
_block$3$ = -332					; size = 4
_structpointer$GSCopy$1$ = -328				; size = 4
tv2348 = -324						; size = 4
tv2347 = -320						; size = 4
_block$2$ = -316					; size = 4
_block$1$ = -312					; size = 4
_state$10$ = -308					; size = 4
_L$ = -304						; size = 64
_state$ = -240						; size = 64
tv2920 = -176						; size = 4
_state$8$ = -172					; size = 4
_state$1$ = -168					; size = 4
_state$2$ = -164					; size = 4
_state$3$ = -160					; size = 4
_state$4$ = -156					; size = 4
_state$5$ = -152					; size = 4
_state$6$ = -148					; size = 4
_state$7$ = -144					; size = 4
_K$7$ = -140						; size = 4
_K$6$ = -136						; size = 4
_K$5$ = -132						; size = 4
_K$4$ = -128						; size = 4
_K$1$ = -124						; size = 4
_state$11$ = -120					; size = 4
_K$10$ = -116						; size = 4
_K$9$ = -112						; size = 4
_K$8$ = -108						; size = 4
_K$12$ = -104						; size = 4
_K$11$ = -100						; size = 4
_state$12$ = -96					; size = 4
_state$13$ = -92					; size = 4
_state$14$ = -88					; size = 4
_state$15$ = -84					; size = 4
_state$16$ = -80					; size = 4
_K$15$ = -76						; size = 4
_K$14$ = -72						; size = 4
_K$13$ = -68						; size = 4
_K$3$ = -64						; size = 4
_K$2$ = -60						; size = 4
_K$16$ = -56						; size = 4
_block$4$ = -52						; size = 4
_block$16$ = -48					; size = 4
_block$15$ = -44					; size = 4
_block$14$ = -40					; size = 4
_block$13$ = -36					; size = 4
_block$12$ = -32					; size = 4
_block$11$ = -28					; size = 4
_block$10$ = -24					; size = 4
_block$9$ = -20						; size = 4
_block$8$ = -16						; size = 4
_block$7$ = -12						; size = 4
_block$6$ = -8						; size = 4
_block$5$ = -4						; size = 4
_structpointer$ = 8					; size = 4
_processBuffer PROC					; COMDAT

; 663  : static void processBuffer(struct NESSIEstruct * const structpointer) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi

; 664  :     int i, r;
; 665  :     u64 K[8];        /* the round key */
; 666  :     u64 block[8];    /* mu(buffer) */
; 667  :     u64 state[8];    /* the cipher state */
; 668  :     u64 L[8];
; 669  :     u8 *buffer = structpointer->buffer;
; 670  :     /*
; 671  :      * map the buffer to a block:
; 672  :      */
; 673  :     for (i = 0; i < 8; i++, buffer += 8) {
; 674  :         block[i] =

  0000f	0f b6 41 20	 movzx	 eax, BYTE PTR [ecx+32]
  00013	99		 cdq
  00014	8b d8		 mov	 ebx, eax
  00016	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _structpointer$GSCopy$1$[ebp], ecx
  0001c	0f b6 41 21	 movzx	 eax, BYTE PTR [ecx+33]
  00020	8b f2		 mov	 esi, edx
  00022	99		 cdq
  00023	0f a4 de 08	 shld	 esi, ebx, 8
  00027	33 f2		 xor	 esi, edx
  00029	c1 e3 08	 shl	 ebx, 8
  0002c	33 d8		 xor	 ebx, eax
  0002e	0f b6 41 22	 movzx	 eax, BYTE PTR [ecx+34]
  00032	99		 cdq
  00033	0f a4 de 08	 shld	 esi, ebx, 8
  00037	33 f2		 xor	 esi, edx
  00039	c1 e3 08	 shl	 ebx, 8
  0003c	33 d8		 xor	 ebx, eax
  0003e	0f b6 41 23	 movzx	 eax, BYTE PTR [ecx+35]
  00042	99		 cdq
  00043	0f a4 de 08	 shld	 esi, ebx, 8
  00047	33 f2		 xor	 esi, edx
  00049	c1 e3 08	 shl	 ebx, 8
  0004c	33 d8		 xor	 ebx, eax
  0004e	0f b6 41 24	 movzx	 eax, BYTE PTR [ecx+36]
  00052	99		 cdq
  00053	0f a4 de 08	 shld	 esi, ebx, 8
  00057	33 f2		 xor	 esi, edx
  00059	c1 e3 08	 shl	 ebx, 8
  0005c	33 d8		 xor	 ebx, eax
  0005e	0f b6 41 25	 movzx	 eax, BYTE PTR [ecx+37]
  00062	99		 cdq
  00063	0f a4 de 08	 shld	 esi, ebx, 8
  00067	33 f2		 xor	 esi, edx
  00069	c1 e3 08	 shl	 ebx, 8
  0006c	33 d8		 xor	 ebx, eax
  0006e	0f b6 41 26	 movzx	 eax, BYTE PTR [ecx+38]
  00072	99		 cdq
  00073	0f a4 de 08	 shld	 esi, ebx, 8
  00077	33 f2		 xor	 esi, edx
  00079	c1 e3 08	 shl	 ebx, 8
  0007c	33 d8		 xor	 ebx, eax
  0007e	0f b6 41 27	 movzx	 eax, BYTE PTR [ecx+39]
  00082	99		 cdq
  00083	0f a4 de 08	 shld	 esi, ebx, 8
  00087	c1 e3 08	 shl	 ebx, 8
  0008a	33 f2		 xor	 esi, edx
  0008c	33 d8		 xor	 ebx, eax
  0008e	89 b5 c4 fe ff
	ff		 mov	 DWORD PTR _block$2$[ebp], esi
  00094	0f b6 41 28	 movzx	 eax, BYTE PTR [ecx+40]
  00098	99		 cdq
  00099	8b f8		 mov	 edi, eax
  0009b	89 9d c8 fe ff
	ff		 mov	 DWORD PTR _block$1$[ebp], ebx
  000a1	8b c2		 mov	 eax, edx
  000a3	0f a4 f8 08	 shld	 eax, edi, 8
  000a7	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  000aa	0f b6 41 29	 movzx	 eax, BYTE PTR [ecx+41]
  000ae	99		 cdq
  000af	c1 e7 08	 shl	 edi, 8
  000b2	33 f8		 xor	 edi, eax
  000b4	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  000b7	33 c2		 xor	 eax, edx
  000b9	0f a4 f8 08	 shld	 eax, edi, 8
  000bd	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  000c0	0f b6 41 2a	 movzx	 eax, BYTE PTR [ecx+42]
  000c4	99		 cdq
  000c5	c1 e7 08	 shl	 edi, 8
  000c8	33 f8		 xor	 edi, eax
  000ca	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  000cd	33 c2		 xor	 eax, edx
  000cf	0f a4 f8 08	 shld	 eax, edi, 8
  000d3	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  000d6	0f b6 41 2b	 movzx	 eax, BYTE PTR [ecx+43]
  000da	99		 cdq
  000db	c1 e7 08	 shl	 edi, 8
  000de	33 f8		 xor	 edi, eax
  000e0	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  000e3	33 c2		 xor	 eax, edx
  000e5	0f a4 f8 08	 shld	 eax, edi, 8
  000e9	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  000ec	0f b6 41 2c	 movzx	 eax, BYTE PTR [ecx+44]
  000f0	99		 cdq
  000f1	c1 e7 08	 shl	 edi, 8
  000f4	33 f8		 xor	 edi, eax
  000f6	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  000f9	33 c2		 xor	 eax, edx
  000fb	0f a4 f8 08	 shld	 eax, edi, 8
  000ff	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  00102	0f b6 41 2d	 movzx	 eax, BYTE PTR [ecx+45]
  00106	99		 cdq
  00107	c1 e7 08	 shl	 edi, 8
  0010a	33 f8		 xor	 edi, eax
  0010c	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  0010f	33 c2		 xor	 eax, edx
  00111	0f a4 f8 08	 shld	 eax, edi, 8
  00115	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  00118	0f b6 41 2e	 movzx	 eax, BYTE PTR [ecx+46]
  0011c	99		 cdq
  0011d	c1 e7 08	 shl	 edi, 8
  00120	33 f8		 xor	 edi, eax
  00122	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  00125	33 c2		 xor	 eax, edx
  00127	0f a4 f8 08	 shld	 eax, edi, 8
  0012b	89 45 cc	 mov	 DWORD PTR _block$4$[ebp], eax
  0012e	0f b6 41 2f	 movzx	 eax, BYTE PTR [ecx+47]
  00132	99		 cdq
  00133	31 55 cc	 xor	 DWORD PTR _block$4$[ebp], edx
  00136	c1 e7 08	 shl	 edi, 8
  00139	33 f8		 xor	 edi, eax
  0013b	0f b6 41 30	 movzx	 eax, BYTE PTR [ecx+48]
  0013f	99		 cdq
  00140	0f a4 c2 08	 shld	 edx, eax, 8
  00144	89 bd b4 fe ff
	ff		 mov	 DWORD PTR _block$3$[ebp], edi
  0014a	c1 e0 08	 shl	 eax, 8
  0014d	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  00150	0f b6 41 31	 movzx	 eax, BYTE PTR [ecx+49]
  00154	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  00157	99		 cdq
  00158	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  0015b	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  0015e	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  00161	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  00164	0f a4 c2 08	 shld	 edx, eax, 8
  00168	c1 e0 08	 shl	 eax, 8
  0016b	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  0016e	0f b6 41 32	 movzx	 eax, BYTE PTR [ecx+50]
  00172	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  00175	99		 cdq
  00176	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  00179	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  0017c	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  0017f	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  00182	0f a4 c2 08	 shld	 edx, eax, 8
  00186	c1 e0 08	 shl	 eax, 8
  00189	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  0018c	0f b6 41 33	 movzx	 eax, BYTE PTR [ecx+51]
  00190	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  00193	99		 cdq
  00194	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  00197	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  0019a	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  0019d	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  001a0	0f a4 c2 08	 shld	 edx, eax, 8
  001a4	c1 e0 08	 shl	 eax, 8
  001a7	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  001aa	0f b6 41 34	 movzx	 eax, BYTE PTR [ecx+52]
  001ae	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  001b1	99		 cdq
  001b2	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  001b5	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  001b8	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  001bb	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  001be	0f a4 c2 08	 shld	 edx, eax, 8
  001c2	c1 e0 08	 shl	 eax, 8
  001c5	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  001c8	0f b6 41 35	 movzx	 eax, BYTE PTR [ecx+53]
  001cc	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  001cf	99		 cdq
  001d0	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  001d3	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  001d6	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  001d9	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  001dc	0f a4 c2 08	 shld	 edx, eax, 8
  001e0	c1 e0 08	 shl	 eax, 8
  001e3	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  001e6	0f b6 41 36	 movzx	 eax, BYTE PTR [ecx+54]
  001ea	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  001ed	99		 cdq
  001ee	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  001f1	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  001f7	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  001fa	0f a4 c2 08	 shld	 edx, eax, 8
  001fe	c1 e0 08	 shl	 eax, 8
  00201	89 45 fc	 mov	 DWORD PTR _block$5$[ebp], eax
  00204	0f b6 41 37	 movzx	 eax, BYTE PTR [ecx+55]
  00208	89 55 f8	 mov	 DWORD PTR _block$6$[ebp], edx
  0020b	99		 cdq
  0020c	31 45 fc	 xor	 DWORD PTR _block$5$[ebp], eax
  0020f	31 55 f8	 xor	 DWORD PTR _block$6$[ebp], edx
  00212	0f b6 41 38	 movzx	 eax, BYTE PTR [ecx+56]
  00216	99		 cdq
  00217	0f a4 c2 08	 shld	 edx, eax, 8
  0021b	c1 e0 08	 shl	 eax, 8
  0021e	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  00221	0f b6 41 39	 movzx	 eax, BYTE PTR [ecx+57]
  00225	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  00228	99		 cdq
  00229	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  0022c	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  0022f	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  00232	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  00235	0f a4 c2 08	 shld	 edx, eax, 8
  00239	c1 e0 08	 shl	 eax, 8
  0023c	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  0023f	0f b6 41 3a	 movzx	 eax, BYTE PTR [ecx+58]
  00243	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  00246	99		 cdq
  00247	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  0024a	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  0024d	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  00250	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  00253	0f a4 c2 08	 shld	 edx, eax, 8
  00257	c1 e0 08	 shl	 eax, 8
  0025a	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  0025d	0f b6 41 3b	 movzx	 eax, BYTE PTR [ecx+59]
  00261	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  00264	99		 cdq
  00265	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  00268	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  0026b	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  0026e	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  00271	0f a4 c2 08	 shld	 edx, eax, 8
  00275	c1 e0 08	 shl	 eax, 8
  00278	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  0027b	0f b6 41 3c	 movzx	 eax, BYTE PTR [ecx+60]
  0027f	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  00282	99		 cdq
  00283	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  00286	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  00289	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  0028c	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  0028f	0f a4 c2 08	 shld	 edx, eax, 8
  00293	c1 e0 08	 shl	 eax, 8
  00296	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  00299	0f b6 41 3d	 movzx	 eax, BYTE PTR [ecx+61]
  0029d	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  002a0	99		 cdq
  002a1	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  002a4	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  002a7	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  002aa	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  002ad	0f a4 c2 08	 shld	 edx, eax, 8
  002b1	c1 e0 08	 shl	 eax, 8
  002b4	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  002b7	0f b6 41 3e	 movzx	 eax, BYTE PTR [ecx+62]
  002bb	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  002be	99		 cdq
  002bf	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  002c2	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  002c5	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  002c8	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  002cb	0f a4 c2 08	 shld	 edx, eax, 8
  002cf	c1 e0 08	 shl	 eax, 8
  002d2	89 45 f4	 mov	 DWORD PTR _block$7$[ebp], eax
  002d5	0f b6 41 3f	 movzx	 eax, BYTE PTR [ecx+63]
  002d9	89 55 f0	 mov	 DWORD PTR _block$8$[ebp], edx
  002dc	99		 cdq
  002dd	31 45 f4	 xor	 DWORD PTR _block$7$[ebp], eax
  002e0	31 55 f0	 xor	 DWORD PTR _block$8$[ebp], edx
  002e3	0f b6 41 40	 movzx	 eax, BYTE PTR [ecx+64]
  002e7	99		 cdq
  002e8	0f a4 c2 08	 shld	 edx, eax, 8
  002ec	c1 e0 08	 shl	 eax, 8
  002ef	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  002f2	0f b6 41 41	 movzx	 eax, BYTE PTR [ecx+65]
  002f6	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  002f9	99		 cdq
  002fa	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  002fd	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  00300	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  00303	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  00306	0f a4 c2 08	 shld	 edx, eax, 8
  0030a	c1 e0 08	 shl	 eax, 8
  0030d	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  00310	0f b6 41 42	 movzx	 eax, BYTE PTR [ecx+66]
  00314	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  00317	99		 cdq
  00318	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  0031b	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  0031e	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  00321	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  00324	0f a4 c2 08	 shld	 edx, eax, 8
  00328	c1 e0 08	 shl	 eax, 8
  0032b	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  0032e	0f b6 41 43	 movzx	 eax, BYTE PTR [ecx+67]
  00332	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  00335	99		 cdq
  00336	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  00339	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  0033c	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  0033f	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  00342	0f a4 c2 08	 shld	 edx, eax, 8
  00346	c1 e0 08	 shl	 eax, 8
  00349	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  0034c	0f b6 41 44	 movzx	 eax, BYTE PTR [ecx+68]
  00350	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  00353	99		 cdq
  00354	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  00357	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  0035a	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  0035d	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  00360	0f a4 c2 08	 shld	 edx, eax, 8
  00364	c1 e0 08	 shl	 eax, 8
  00367	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  0036a	0f b6 41 45	 movzx	 eax, BYTE PTR [ecx+69]
  0036e	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  00371	99		 cdq
  00372	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  00375	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  00378	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  0037b	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  0037e	0f a4 c2 08	 shld	 edx, eax, 8
  00382	c1 e0 08	 shl	 eax, 8
  00385	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  00388	0f b6 41 46	 movzx	 eax, BYTE PTR [ecx+70]
  0038c	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  0038f	99		 cdq
  00390	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  00393	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  00396	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  00399	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  0039c	0f a4 c2 08	 shld	 edx, eax, 8
  003a0	c1 e0 08	 shl	 eax, 8
  003a3	89 45 ec	 mov	 DWORD PTR _block$9$[ebp], eax
  003a6	0f b6 41 47	 movzx	 eax, BYTE PTR [ecx+71]
  003aa	89 55 e8	 mov	 DWORD PTR _block$10$[ebp], edx
  003ad	99		 cdq
  003ae	31 45 ec	 xor	 DWORD PTR _block$9$[ebp], eax
  003b1	31 55 e8	 xor	 DWORD PTR _block$10$[ebp], edx
  003b4	0f b6 41 48	 movzx	 eax, BYTE PTR [ecx+72]
  003b8	99		 cdq
  003b9	0f a4 c2 08	 shld	 edx, eax, 8
  003bd	c1 e0 08	 shl	 eax, 8
  003c0	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  003c3	0f b6 41 49	 movzx	 eax, BYTE PTR [ecx+73]
  003c7	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  003ca	99		 cdq
  003cb	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  003ce	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  003d1	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  003d4	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  003d7	0f a4 c2 08	 shld	 edx, eax, 8
  003db	c1 e0 08	 shl	 eax, 8
  003de	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  003e1	0f b6 41 4a	 movzx	 eax, BYTE PTR [ecx+74]
  003e5	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  003e8	99		 cdq
  003e9	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  003ec	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  003ef	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  003f2	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  003f5	0f a4 c2 08	 shld	 edx, eax, 8
  003f9	c1 e0 08	 shl	 eax, 8
  003fc	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  003ff	0f b6 41 4b	 movzx	 eax, BYTE PTR [ecx+75]
  00403	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  00406	99		 cdq
  00407	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  0040a	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  0040d	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  00410	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  00413	0f a4 c2 08	 shld	 edx, eax, 8
  00417	c1 e0 08	 shl	 eax, 8
  0041a	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  0041d	0f b6 41 4c	 movzx	 eax, BYTE PTR [ecx+76]
  00421	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  00424	99		 cdq
  00425	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  00428	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  0042b	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  0042e	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  00431	0f a4 c2 08	 shld	 edx, eax, 8
  00435	c1 e0 08	 shl	 eax, 8
  00438	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  0043b	0f b6 41 4d	 movzx	 eax, BYTE PTR [ecx+77]
  0043f	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  00442	99		 cdq
  00443	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  00446	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  00449	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  0044c	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  0044f	0f a4 c2 08	 shld	 edx, eax, 8
  00453	c1 e0 08	 shl	 eax, 8
  00456	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  00459	0f b6 41 4e	 movzx	 eax, BYTE PTR [ecx+78]
  0045d	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  00460	99		 cdq
  00461	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  00464	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  00467	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  0046a	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  0046d	0f a4 c2 08	 shld	 edx, eax, 8
  00471	c1 e0 08	 shl	 eax, 8
  00474	89 45 e4	 mov	 DWORD PTR _block$11$[ebp], eax
  00477	0f b6 41 4f	 movzx	 eax, BYTE PTR [ecx+79]
  0047b	89 55 e0	 mov	 DWORD PTR _block$12$[ebp], edx
  0047e	99		 cdq
  0047f	31 45 e4	 xor	 DWORD PTR _block$11$[ebp], eax
  00482	31 55 e0	 xor	 DWORD PTR _block$12$[ebp], edx
  00485	0f b6 41 50	 movzx	 eax, BYTE PTR [ecx+80]
  00489	99		 cdq
  0048a	0f a4 c2 08	 shld	 edx, eax, 8
  0048e	c1 e0 08	 shl	 eax, 8
  00491	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  00494	0f b6 41 51	 movzx	 eax, BYTE PTR [ecx+81]
  00498	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  0049b	99		 cdq
  0049c	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  0049f	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  004a2	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  004a5	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  004a8	0f a4 c2 08	 shld	 edx, eax, 8
  004ac	c1 e0 08	 shl	 eax, 8
  004af	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  004b2	0f b6 41 52	 movzx	 eax, BYTE PTR [ecx+82]
  004b6	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  004b9	99		 cdq
  004ba	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  004bd	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  004c0	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  004c3	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  004c6	0f a4 c2 08	 shld	 edx, eax, 8
  004ca	c1 e0 08	 shl	 eax, 8
  004cd	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  004d0	0f b6 41 53	 movzx	 eax, BYTE PTR [ecx+83]
  004d4	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  004d7	99		 cdq
  004d8	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  004db	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  004de	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  004e1	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  004e4	0f a4 c2 08	 shld	 edx, eax, 8
  004e8	c1 e0 08	 shl	 eax, 8
  004eb	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  004ee	0f b6 41 54	 movzx	 eax, BYTE PTR [ecx+84]
  004f2	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  004f5	99		 cdq
  004f6	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  004f9	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  004fc	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  004ff	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  00502	0f a4 c2 08	 shld	 edx, eax, 8
  00506	c1 e0 08	 shl	 eax, 8
  00509	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  0050c	0f b6 41 55	 movzx	 eax, BYTE PTR [ecx+85]
  00510	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  00513	99		 cdq
  00514	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  00517	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  0051a	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  0051d	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  00520	0f a4 c2 08	 shld	 edx, eax, 8
  00524	c1 e0 08	 shl	 eax, 8
  00527	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  0052a	0f b6 41 56	 movzx	 eax, BYTE PTR [ecx+86]
  0052e	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  00531	99		 cdq
  00532	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  00535	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  00538	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  0053b	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  0053e	0f a4 c2 08	 shld	 edx, eax, 8
  00542	c1 e0 08	 shl	 eax, 8
  00545	89 45 dc	 mov	 DWORD PTR _block$13$[ebp], eax
  00548	0f b6 41 57	 movzx	 eax, BYTE PTR [ecx+87]
  0054c	89 55 d8	 mov	 DWORD PTR _block$14$[ebp], edx
  0054f	99		 cdq
  00550	31 45 dc	 xor	 DWORD PTR _block$13$[ebp], eax
  00553	31 55 d8	 xor	 DWORD PTR _block$14$[ebp], edx
  00556	0f b6 41 58	 movzx	 eax, BYTE PTR [ecx+88]
  0055a	99		 cdq
  0055b	0f a4 c2 08	 shld	 edx, eax, 8
  0055f	c1 e0 08	 shl	 eax, 8
  00562	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  00565	0f b6 41 59	 movzx	 eax, BYTE PTR [ecx+89]
  00569	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  0056c	99		 cdq
  0056d	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax
  00570	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  00573	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  00576	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  00579	0f a4 c2 08	 shld	 edx, eax, 8
  0057d	c1 e0 08	 shl	 eax, 8
  00580	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  00583	0f b6 41 5a	 movzx	 eax, BYTE PTR [ecx+90]
  00587	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  0058a	99		 cdq
  0058b	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax
  0058e	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  00591	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  00594	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  00597	0f a4 c2 08	 shld	 edx, eax, 8
  0059b	c1 e0 08	 shl	 eax, 8
  0059e	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  005a1	0f b6 41 5b	 movzx	 eax, BYTE PTR [ecx+91]
  005a5	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  005a8	99		 cdq
  005a9	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax
  005ac	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  005af	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  005b2	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  005b5	0f a4 c2 08	 shld	 edx, eax, 8
  005b9	c1 e0 08	 shl	 eax, 8
  005bc	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  005bf	0f b6 41 5c	 movzx	 eax, BYTE PTR [ecx+92]
  005c3	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  005c6	99		 cdq
  005c7	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax
  005ca	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  005cd	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  005d0	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  005d3	0f a4 c2 08	 shld	 edx, eax, 8
  005d7	c1 e0 08	 shl	 eax, 8
  005da	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  005dd	0f b6 41 5d	 movzx	 eax, BYTE PTR [ecx+93]
  005e1	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  005e4	99		 cdq
  005e5	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax
  005e8	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  005eb	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  005ee	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  005f1	0f a4 c2 08	 shld	 edx, eax, 8
  005f5	c1 e0 08	 shl	 eax, 8
  005f8	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  005fb	0f b6 41 5e	 movzx	 eax, BYTE PTR [ecx+94]
  005ff	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  00602	99		 cdq
  00603	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax
  00606	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  00609	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  0060c	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  0060f	0f a4 c2 08	 shld	 edx, eax, 8
  00613	c1 e0 08	 shl	 eax, 8
  00616	89 45 d4	 mov	 DWORD PTR _block$15$[ebp], eax
  00619	0f b6 41 5f	 movzx	 eax, BYTE PTR [ecx+95]
  0061d	89 55 d0	 mov	 DWORD PTR _block$16$[ebp], edx
  00620	99		 cdq
  00621	31 45 d4	 xor	 DWORD PTR _block$15$[ebp], eax

; 675  :             (((u64)buffer[0]        ) << 56) ^
; 676  :             (((u64)buffer[1] & 0xffL) << 48) ^
; 677  :             (((u64)buffer[2] & 0xffL) << 40) ^
; 678  :             (((u64)buffer[3] & 0xffL) << 32) ^
; 679  :             (((u64)buffer[4] & 0xffL) << 24) ^
; 680  :             (((u64)buffer[5] & 0xffL) << 16) ^
; 681  :             (((u64)buffer[6] & 0xffL) <<  8) ^
; 682  :             (((u64)buffer[7] & 0xffL)      );
; 683  :     }
; 684  :     /*
; 685  :      * compute and apply K^0 to the cipher state:
; 686  :      */
; 687  :     state[0] = block[0] ^ (K[0] = structpointer->hash[0]);

  00624	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  00627	33 d8		 xor	 ebx, eax
  00629	31 55 d0	 xor	 DWORD PTR _block$16$[ebp], edx
  0062c	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0062f	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv2347[ebp], eax
  00635	89 45 94	 mov	 DWORD PTR _K$8$[ebp], eax
  00638	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  0063b	33 f8		 xor	 edi, eax
  0063d	89 45 84	 mov	 DWORD PTR _K$1$[ebp], eax
  00640	8b 45 cc	 mov	 eax, DWORD PTR _block$4$[ebp]
  00643	89 9d 54 ff ff
	ff		 mov	 DWORD PTR _state$8$[ebp], ebx
  00649	8b de		 mov	 ebx, esi
  0064b	8b 71 7c	 mov	 esi, DWORD PTR [ecx+124]
  0064e	33 da		 xor	 ebx, edx
  00650	89 95 bc fe ff
	ff		 mov	 DWORD PTR tv2348[ebp], edx
  00656	89 55 90	 mov	 DWORD PTR _K$9$[ebp], edx
  00659	89 95 78 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+4], edx
  0065f	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00662	33 c2		 xor	 eax, edx
  00664	89 85 cc fe ff
	ff		 mov	 DWORD PTR _state$10$[ebp], eax
  0066a	89 85 1c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+12], eax
  00670	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  00673	89 55 8c	 mov	 DWORD PTR _K$10$[ebp], edx
  00676	89 95 80 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+12], edx
  0067c	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0067f	33 c2		 xor	 eax, edx
  00681	89 85 5c ff ff
	ff		 mov	 DWORD PTR _state$2$[ebp], eax
  00687	8b 45 f8	 mov	 eax, DWORD PTR _block$6$[ebp]
  0068a	33 c6		 xor	 eax, esi
  0068c	89 9d 14 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+4], ebx
  00692	89 bd 58 ff ff
	ff		 mov	 DWORD PTR _state$1$[ebp], edi
  00698	89 55 c4	 mov	 DWORD PTR _K$2$[ebp], edx
  0069b	89 75 9c	 mov	 DWORD PTR _K$11$[ebp], esi
  0069e	89 b5 88 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+20], esi
  006a4	89 45 88	 mov	 DWORD PTR _state$11$[ebp], eax
  006a7	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  006ad	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]
  006b3	89 85 24 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+20], eax
  006b9	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  006bc	33 c2		 xor	 eax, edx
  006be	89 55 c0	 mov	 DWORD PTR _K$3$[ebp], edx
  006c1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  006c7	89 85 60 ff ff
	ff		 mov	 DWORD PTR _state$3$[ebp], eax
  006cd	8b 45 f0	 mov	 eax, DWORD PTR _block$8$[ebp]
  006d0	33 c7		 xor	 eax, edi
  006d2	89 55 80	 mov	 DWORD PTR _K$4$[ebp], edx
  006d5	89 45 a0	 mov	 DWORD PTR _state$12$[ebp], eax
  006d8	89 85 2c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+28], eax
  006de	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  006e4	89 45 bc	 mov	 DWORD PTR _K$13$[ebp], eax
  006e7	89 85 98 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+36], eax
  006ed	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  006f0	33 c2		 xor	 eax, edx
  006f2	89 7d 98	 mov	 DWORD PTR _K$12$[ebp], edi
  006f5	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  006fb	89 85 64 ff ff
	ff		 mov	 DWORD PTR _state$4$[ebp], eax
  00701	8b 45 e8	 mov	 eax, DWORD PTR _block$10$[ebp]
  00704	33 81 8c 00 00
	00		 xor	 eax, DWORD PTR [ecx+140]
  0070a	89 45 a4	 mov	 DWORD PTR _state$13$[ebp], eax
  0070d	89 85 34 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+36], eax
  00713	8b 81 94 00 00
	00		 mov	 eax, DWORD PTR [ecx+148]
  00719	89 45 b8	 mov	 DWORD PTR _K$14$[ebp], eax
  0071c	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+44], eax
  00722	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  00725	33 c2		 xor	 eax, edx
  00727	89 95 7c ff ff
	ff		 mov	 DWORD PTR _K$5$[ebp], edx
  0072d	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00733	89 85 68 ff ff
	ff		 mov	 DWORD PTR _state$5$[ebp], eax
  00739	8b 45 e0	 mov	 eax, DWORD PTR _block$12$[ebp]
  0073c	33 81 94 00 00
	00		 xor	 eax, DWORD PTR [ecx+148]
  00742	89 45 a8	 mov	 DWORD PTR _state$14$[ebp], eax
  00745	89 85 3c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+44], eax
  0074b	8b 81 9c 00 00
	00		 mov	 eax, DWORD PTR [ecx+156]
  00751	89 45 b4	 mov	 DWORD PTR _K$15$[ebp], eax
  00754	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+52], eax
  0075a	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  0075d	33 c2		 xor	 eax, edx
  0075f	89 95 78 ff ff
	ff		 mov	 DWORD PTR _K$6$[ebp], edx
  00765	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  0076b	89 85 6c ff ff
	ff		 mov	 DWORD PTR _state$6$[ebp], eax
  00771	8b 45 d8	 mov	 eax, DWORD PTR _block$14$[ebp]
  00774	33 81 9c 00 00
	00		 xor	 eax, DWORD PTR [ecx+156]
  0077a	89 45 ac	 mov	 DWORD PTR _state$15$[ebp], eax
  0077d	89 85 44 ff ff
	ff		 mov	 DWORD PTR _state$[ebp+52], eax
  00783	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  00789	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _state$10$[ebp]
  0078f	89 45 c8	 mov	 DWORD PTR _K$16$[ebp], eax
  00792	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+60], eax
  00798	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  0079b	33 c2		 xor	 eax, edx
  0079d	89 bd 90 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+28], edi
  007a3	89 85 70 ff ff
	ff		 mov	 DWORD PTR _state$7$[ebp], eax
  007a9	8b 45 d0	 mov	 eax, DWORD PTR _block$16$[ebp]
  007ac	33 45 c8	 xor	 eax, DWORD PTR _K$16$[ebp]
  007af	89 95 74 ff ff
	ff		 mov	 DWORD PTR _K$7$[ebp], edx
  007b5	89 45 b0	 mov	 DWORD PTR _state$16$[ebp], eax
  007b8	89 85 4c ff ff
	ff		 mov	 DWORD PTR _state$[ebp+60], eax
  007be	c7 85 50 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv2920[ebp], OFFSET _rc+8
  007c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@processBuf:

; 688  :     state[1] = block[1] ^ (K[1] = structpointer->hash[1]);
; 689  :     state[2] = block[2] ^ (K[2] = structpointer->hash[2]);
; 690  :     state[3] = block[3] ^ (K[3] = structpointer->hash[3]);
; 691  :     state[4] = block[4] ^ (K[4] = structpointer->hash[4]);
; 692  :     state[5] = block[5] ^ (K[5] = structpointer->hash[5]);
; 693  :     state[6] = block[6] ^ (K[6] = structpointer->hash[6]);
; 694  :     state[7] = block[7] ^ (K[7] = structpointer->hash[7]);
; 695  :     /*
; 696  :      * iterate over all rounds:
; 697  :      */
; 698  :     for (r = 1; r <= R; r++) {
; 699  :         /*
; 700  :          * compute K^r from K^{r-1}:
; 701  :          */
; 702  :         L[0] =

  007d0	8b 55 c4	 mov	 edx, DWORD PTR _K$2$[ebp]
  007d3	8b c6		 mov	 eax, esi
  007d5	0f ac c2 08	 shrd	 edx, eax, 8
  007d9	c1 e8 08	 shr	 eax, 8
  007dc	8b c7		 mov	 eax, edi
  007de	0f b6 f2	 movzx	 esi, dl
  007e1	8b 55 c0	 mov	 edx, DWORD PTR _K$3$[ebp]
  007e4	0f ac c2 10	 shrd	 edx, eax, 16
  007e8	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C6[esi*8]
  007ef	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C6[esi*8+4]
  007f6	c1 e8 10	 shr	 eax, 16			; 00000010H
  007f9	0f b6 c2	 movzx	 eax, dl
  007fc	8b 55 80	 mov	 edx, DWORD PTR _K$4$[ebp]
  007ff	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00806	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  0080d	8b 45 bc	 mov	 eax, DWORD PTR _K$13$[ebp]
  00810	0f ac c2 18	 shrd	 edx, eax, 24
  00814	c1 e8 18	 shr	 eax, 24			; 00000018H
  00817	0f b6 c2	 movzx	 eax, dl

; 703  :             C0[(int)(K[0] >> 56)       ] ^
; 704  :             C1[(int)(K[7] >> 48) & 0xff] ^
; 705  :             C2[(int)(K[6] >> 40) & 0xff] ^
; 706  :             C3[(int)(K[5] >> 32) & 0xff] ^
; 707  :             C4[(int)(K[4] >> 24) & 0xff] ^
; 708  :             C5[(int)(K[3] >> 16) & 0xff] ^
; 709  :             C6[(int)(K[2] >>  8) & 0xff] ^
; 710  :             C7[(int)(K[1]      ) & 0xff] ^
; 711  :             rc[r];
; 712  :         L[1] =

  0081a	8b 55 c0	 mov	 edx, DWORD PTR _K$3$[ebp]
  0081d	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00824	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  0082b	0f b6 85 a0 fe
	ff ff		 movzx	 eax, BYTE PTR _K$[ebp+44]
  00832	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00839	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00840	8b 45 b4	 mov	 eax, DWORD PTR _K$15$[ebp]
  00843	c1 e8 08	 shr	 eax, 8
  00846	0f b6 c0	 movzx	 eax, al
  00849	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00850	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00857	8b 45 c8	 mov	 eax, DWORD PTR _K$16$[ebp]
  0085a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0085d	0f b6 c0	 movzx	 eax, al
  00860	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00867	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  0086e	8b 45 90	 mov	 eax, DWORD PTR _K$9$[ebp]
  00871	c1 e8 18	 shr	 eax, 24			; 00000018H
  00874	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  0087b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00882	8b 45 84	 mov	 eax, DWORD PTR _K$1$[ebp]
  00885	0f b6 c0	 movzx	 eax, al
  00888	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  0088f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00896	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv2920[ebp]
  0089c	33 38		 xor	 edi, DWORD PTR [eax]
  0089e	33 70 04	 xor	 esi, DWORD PTR [eax+4]
  008a1	8b 45 90	 mov	 eax, DWORD PTR _K$9$[ebp]
  008a4	c1 e8 10	 shr	 eax, 16			; 00000010H
  008a7	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+4], esi
  008ad	0f b6 f0	 movzx	 esi, al
  008b0	8b 45 98	 mov	 eax, DWORD PTR _K$12$[ebp]
  008b3	0f ac c2 08	 shrd	 edx, eax, 8
  008b7	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _L$[ebp], edi
  008bd	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C1[esi*8]
  008c4	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C1[esi*8+4]
  008cb	c1 e8 08	 shr	 eax, 8
  008ce	0f b6 c2	 movzx	 eax, dl
  008d1	8b 55 80	 mov	 edx, DWORD PTR _K$4$[ebp]
  008d4	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  008db	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  008e2	8b 45 bc	 mov	 eax, DWORD PTR _K$13$[ebp]
  008e5	0f ac c2 10	 shrd	 edx, eax, 16
  008e9	c1 e8 10	 shr	 eax, 16			; 00000010H
  008ec	0f b6 c2	 movzx	 eax, dl
  008ef	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _K$5$[ebp]
  008f5	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  008fc	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00903	8b 45 b8	 mov	 eax, DWORD PTR _K$14$[ebp]
  00906	0f ac c2 18	 shrd	 edx, eax, 24
  0090a	c1 e8 18	 shr	 eax, 24			; 00000018H
  0090d	0f b6 c2	 movzx	 eax, dl
  00910	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00917	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  0091e	0f b6 85 a8 fe
	ff ff		 movzx	 eax, BYTE PTR _K$[ebp+52]
  00925	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  0092c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00933	8b 45 c8	 mov	 eax, DWORD PTR _K$16$[ebp]
  00936	c1 e8 08	 shr	 eax, 8
  00939	0f b6 c0	 movzx	 eax, al
  0093c	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00943	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  0094a	8b 45 8c	 mov	 eax, DWORD PTR _K$10$[ebp]
  0094d	c1 e8 18	 shr	 eax, 24			; 00000018H
  00950	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00957	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  0095e	8b 45 c4	 mov	 eax, DWORD PTR _K$2$[ebp]
  00961	0f b6 c0	 movzx	 eax, al
  00964	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  0096b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]

; 713  :             C0[(int)(K[1] >> 56)       ] ^
; 714  :             C1[(int)(K[0] >> 48) & 0xff] ^
; 715  :             C2[(int)(K[7] >> 40) & 0xff] ^
; 716  :             C3[(int)(K[6] >> 32) & 0xff] ^
; 717  :             C4[(int)(K[5] >> 24) & 0xff] ^
; 718  :             C5[(int)(K[4] >> 16) & 0xff] ^
; 719  :             C6[(int)(K[3] >>  8) & 0xff] ^
; 720  :             C7[(int)(K[2]      ) & 0xff];
; 721  :         L[2] =

  00972	8b 45 8c	 mov	 eax, DWORD PTR _K$10$[ebp]
  00975	c1 e8 10	 shr	 eax, 16			; 00000010H
  00978	0f b6 d0	 movzx	 edx, al
  0097b	8b 45 90	 mov	 eax, DWORD PTR _K$9$[ebp]
  0097e	c1 e8 08	 shr	 eax, 8
  00981	0f b6 c0	 movzx	 eax, al
  00984	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+8], edi
  0098a	8b 3c d5 00 00
	00 00		 mov	 edi, DWORD PTR _C1[edx*8]
  00991	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _L$[ebp+12], esi
  00997	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  0099e	8b 34 d5 04 00
	00 00		 mov	 esi, DWORD PTR _C1[edx*8+4]
  009a5	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  009ac	8b 55 80	 mov	 edx, DWORD PTR _K$4$[ebp]
  009af	8b 45 bc	 mov	 eax, DWORD PTR _K$13$[ebp]
  009b2	0f ac c2 08	 shrd	 edx, eax, 8
  009b6	c1 e8 08	 shr	 eax, 8
  009b9	0f b6 c2	 movzx	 eax, dl
  009bc	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _K$5$[ebp]
  009c2	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  009c9	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  009d0	8b 45 b8	 mov	 eax, DWORD PTR _K$14$[ebp]
  009d3	0f ac c2 10	 shrd	 edx, eax, 16
  009d7	c1 e8 10	 shr	 eax, 16			; 00000010H
  009da	0f b6 c2	 movzx	 eax, dl
  009dd	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _K$6$[ebp]
  009e3	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  009ea	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  009f1	8b 45 b4	 mov	 eax, DWORD PTR _K$15$[ebp]
  009f4	0f ac c2 18	 shrd	 edx, eax, 24
  009f8	c1 e8 18	 shr	 eax, 24			; 00000018H
  009fb	0f b6 c2	 movzx	 eax, dl

; 722  :             C0[(int)(K[2] >> 56)       ] ^
; 723  :             C1[(int)(K[1] >> 48) & 0xff] ^
; 724  :             C2[(int)(K[0] >> 40) & 0xff] ^
; 725  :             C3[(int)(K[7] >> 32) & 0xff] ^
; 726  :             C4[(int)(K[6] >> 24) & 0xff] ^
; 727  :             C5[(int)(K[5] >> 16) & 0xff] ^
; 728  :             C6[(int)(K[4] >>  8) & 0xff] ^
; 729  :             C7[(int)(K[3]      ) & 0xff];
; 730  :         L[3] =

  009fe	0f b6 95 78 fe
	ff ff		 movzx	 edx, BYTE PTR _K$[ebp+4]
  00a05	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00a0c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00a13	0f b6 85 b0 fe
	ff ff		 movzx	 eax, BYTE PTR _K$[ebp+60]
  00a1a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00a21	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00a28	8b 45 9c	 mov	 eax, DWORD PTR _K$11$[ebp]
  00a2b	c1 e8 18	 shr	 eax, 24			; 00000018H
  00a2e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00a35	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00a3c	8b 45 c0	 mov	 eax, DWORD PTR _K$3$[ebp]
  00a3f	0f b6 c0	 movzx	 eax, al
  00a42	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00a49	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00a50	8b 45 8c	 mov	 eax, DWORD PTR _K$10$[ebp]
  00a53	c1 e8 08	 shr	 eax, 8
  00a56	0f b6 c0	 movzx	 eax, al
  00a59	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+16], edi
  00a5f	89 b5 e4 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+20], esi
  00a65	8b 3c c5 00 00
	00 00		 mov	 edi, DWORD PTR _C2[eax*8]
  00a6c	8b 34 c5 04 00
	00 00		 mov	 esi, DWORD PTR _C2[eax*8+4]
  00a73	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[edx*8]
  00a7a	8b 45 9c	 mov	 eax, DWORD PTR _K$11$[ebp]
  00a7d	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[edx*8+4]
  00a84	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _K$5$[ebp]
  00a8a	c1 e8 10	 shr	 eax, 16			; 00000010H
  00a8d	0f b6 c0	 movzx	 eax, al
  00a90	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00a97	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00a9e	8b 45 b8	 mov	 eax, DWORD PTR _K$14$[ebp]
  00aa1	0f ac c2 08	 shrd	 edx, eax, 8
  00aa5	c1 e8 08	 shr	 eax, 8
  00aa8	0f b6 c2	 movzx	 eax, dl
  00aab	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _K$6$[ebp]
  00ab1	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00ab8	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00abf	8b 45 b4	 mov	 eax, DWORD PTR _K$15$[ebp]
  00ac2	0f ac c2 10	 shrd	 edx, eax, 16
  00ac6	c1 e8 10	 shr	 eax, 16			; 00000010H
  00ac9	0f b6 c2	 movzx	 eax, dl
  00acc	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00ad3	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00ada	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _K$7$[ebp]
  00ae0	8b 45 c8	 mov	 eax, DWORD PTR _K$16$[ebp]
  00ae3	0f ac c2 18	 shrd	 edx, eax, 24
  00ae7	c1 e8 18	 shr	 eax, 24			; 00000018H
  00aea	0f b6 c2	 movzx	 eax, dl

; 731  :             C0[(int)(K[3] >> 56)       ] ^
; 732  :             C1[(int)(K[2] >> 48) & 0xff] ^
; 733  :             C2[(int)(K[1] >> 40) & 0xff] ^
; 734  :             C3[(int)(K[0] >> 32) & 0xff] ^
; 735  :             C4[(int)(K[7] >> 24) & 0xff] ^
; 736  :             C5[(int)(K[6] >> 16) & 0xff] ^
; 737  :             C6[(int)(K[5] >>  8) & 0xff] ^
; 738  :             C7[(int)(K[4]      ) & 0xff];
; 739  :         L[4] =

  00aed	8b 55 94	 mov	 edx, DWORD PTR _K$8$[ebp]
  00af0	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00af7	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00afe	8b 45 98	 mov	 eax, DWORD PTR _K$12$[ebp]
  00b01	c1 e8 18	 shr	 eax, 24			; 00000018H
  00b04	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00b0b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00b12	8b 45 80	 mov	 eax, DWORD PTR _K$4$[ebp]
  00b15	0f b6 c0	 movzx	 eax, al
  00b18	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00b1f	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00b26	8b 45 90	 mov	 eax, DWORD PTR _K$9$[ebp]
  00b29	0f ac c2 18	 shrd	 edx, eax, 24
  00b2d	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _L$[ebp+28], esi
  00b33	0f b6 b5 80 fe
	ff ff		 movzx	 esi, BYTE PTR _K$[ebp+12]
  00b3a	c1 e8 18	 shr	 eax, 24			; 00000018H
  00b3d	0f b6 c2	 movzx	 eax, dl
  00b40	89 bd e8 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+24], edi
  00b46	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C3[esi*8]
  00b4d	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C3[esi*8+4]
  00b54	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00b5b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00b62	8b 45 9c	 mov	 eax, DWORD PTR _K$11$[ebp]
  00b65	c1 e8 08	 shr	 eax, 8
  00b68	0f b6 c0	 movzx	 eax, al
  00b6b	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _K$6$[ebp]
  00b71	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00b78	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00b7f	8b 45 98	 mov	 eax, DWORD PTR _K$12$[ebp]
  00b82	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b85	0f b6 c0	 movzx	 eax, al
  00b88	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00b8f	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00b96	8b 45 b4	 mov	 eax, DWORD PTR _K$15$[ebp]
  00b99	0f ac c2 08	 shrd	 edx, eax, 8
  00b9d	c1 e8 08	 shr	 eax, 8
  00ba0	0f b6 c2	 movzx	 eax, dl
  00ba3	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _K$7$[ebp]
  00ba9	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00bb0	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00bb7	8b 45 c8	 mov	 eax, DWORD PTR _K$16$[ebp]
  00bba	0f ac c2 10	 shrd	 edx, eax, 16
  00bbe	c1 e8 10	 shr	 eax, 16			; 00000010H
  00bc1	0f b6 c2	 movzx	 eax, dl

; 740  :             C0[(int)(K[4] >> 56)       ] ^
; 741  :             C1[(int)(K[3] >> 48) & 0xff] ^
; 742  :             C2[(int)(K[2] >> 40) & 0xff] ^
; 743  :             C3[(int)(K[1] >> 32) & 0xff] ^
; 744  :             C4[(int)(K[0] >> 24) & 0xff] ^
; 745  :             C5[(int)(K[7] >> 16) & 0xff] ^
; 746  :             C6[(int)(K[6] >>  8) & 0xff] ^
; 747  :             C7[(int)(K[5]      ) & 0xff];
; 748  :         L[5] =

  00bc4	8b 55 84	 mov	 edx, DWORD PTR _K$1$[ebp]
  00bc7	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00bce	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00bd5	8b 45 bc	 mov	 eax, DWORD PTR _K$13$[ebp]
  00bd8	c1 e8 18	 shr	 eax, 24			; 00000018H
  00bdb	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00be2	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00be9	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _K$5$[ebp]
  00bef	0f b6 c0	 movzx	 eax, al
  00bf2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00bf9	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00c00	8b 45 8c	 mov	 eax, DWORD PTR _K$10$[ebp]
  00c03	0f ac c2 18	 shrd	 edx, eax, 24
  00c07	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+36], esi
  00c0d	c1 e8 18	 shr	 eax, 24			; 00000018H
  00c10	8b 45 90	 mov	 eax, DWORD PTR _K$9$[ebp]
  00c13	0f b6 f2	 movzx	 esi, dl
  00c16	8b 55 94	 mov	 edx, DWORD PTR _K$8$[ebp]
  00c19	0f ac c2 10	 shrd	 edx, eax, 16
  00c1d	89 bd f0 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+32], edi
  00c23	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C4[esi*8]
  00c2a	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C4[esi*8+4]
  00c31	c1 e8 10	 shr	 eax, 16			; 00000010H
  00c34	0f b6 c2	 movzx	 eax, dl
  00c37	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00c3e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00c45	0f b6 85 88 fe
	ff ff		 movzx	 eax, BYTE PTR _K$[ebp+20]
  00c4c	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00c53	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00c5a	8b 45 98	 mov	 eax, DWORD PTR _K$12$[ebp]
  00c5d	c1 e8 08	 shr	 eax, 8
  00c60	0f b6 c0	 movzx	 eax, al
  00c63	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00c6a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00c71	8b 45 bc	 mov	 eax, DWORD PTR _K$13$[ebp]
  00c74	c1 e8 10	 shr	 eax, 16			; 00000010H
  00c77	0f b6 c0	 movzx	 eax, al
  00c7a	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _K$7$[ebp]
  00c80	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00c87	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00c8e	8b 45 c8	 mov	 eax, DWORD PTR _K$16$[ebp]
  00c91	0f ac c2 08	 shrd	 edx, eax, 8
  00c95	c1 e8 08	 shr	 eax, 8
  00c98	0f b6 c2	 movzx	 eax, dl

; 749  :             C0[(int)(K[5] >> 56)       ] ^
; 750  :             C1[(int)(K[4] >> 48) & 0xff] ^
; 751  :             C2[(int)(K[3] >> 40) & 0xff] ^
; 752  :             C3[(int)(K[2] >> 32) & 0xff] ^
; 753  :             C4[(int)(K[1] >> 24) & 0xff] ^
; 754  :             C5[(int)(K[0] >> 16) & 0xff] ^
; 755  :             C6[(int)(K[7] >>  8) & 0xff] ^
; 756  :             C7[(int)(K[6]      ) & 0xff];
; 757  :         L[6] =

  00c9b	8b 55 84	 mov	 edx, DWORD PTR _K$1$[ebp]
  00c9e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00ca5	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00cac	8b 45 b8	 mov	 eax, DWORD PTR _K$14$[ebp]
  00caf	c1 e8 18	 shr	 eax, 24			; 00000018H
  00cb2	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00cb9	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00cc0	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _K$6$[ebp]
  00cc6	0f b6 c0	 movzx	 eax, al
  00cc9	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00cd0	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00cd7	8b 45 8c	 mov	 eax, DWORD PTR _K$10$[ebp]
  00cda	0f ac c2 10	 shrd	 edx, eax, 16
  00cde	89 b5 fc fe ff
	ff		 mov	 DWORD PTR _L$[ebp+44], esi
  00ce4	8b 75 90	 mov	 esi, DWORD PTR _K$9$[ebp]
  00ce7	c1 e8 10	 shr	 eax, 16			; 00000010H
  00cea	8b 45 94	 mov	 eax, DWORD PTR _K$8$[ebp]
  00ced	0f ac f0 08	 shrd	 eax, esi, 8
  00cf1	0f b6 d2	 movzx	 edx, dl
  00cf4	0f b6 c0	 movzx	 eax, al
  00cf7	c1 ee 08	 shr	 esi, 8
  00cfa	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+40], edi
  00d00	8b 3c d5 00 00
	00 00		 mov	 edi, DWORD PTR _C5[edx*8]
  00d07	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00d0e	8b 34 d5 04 00
	00 00		 mov	 esi, DWORD PTR _C5[edx*8+4]
  00d15	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  00d1c	8b 55 c4	 mov	 edx, DWORD PTR _K$2$[ebp]
  00d1f	8b 45 9c	 mov	 eax, DWORD PTR _K$11$[ebp]
  00d22	0f ac c2 18	 shrd	 edx, eax, 24
  00d26	c1 e8 18	 shr	 eax, 24			; 00000018H
  00d29	0f b6 c2	 movzx	 eax, dl

; 758  :             C0[(int)(K[6] >> 56)       ] ^
; 759  :             C1[(int)(K[5] >> 48) & 0xff] ^
; 760  :             C2[(int)(K[4] >> 40) & 0xff] ^
; 761  :             C3[(int)(K[3] >> 32) & 0xff] ^
; 762  :             C4[(int)(K[2] >> 24) & 0xff] ^
; 763  :             C5[(int)(K[1] >> 16) & 0xff] ^
; 764  :             C6[(int)(K[0] >>  8) & 0xff] ^
; 765  :             C7[(int)(K[7]      ) & 0xff];
; 766  :         L[7] =

  00d2c	8b 55 84	 mov	 edx, DWORD PTR _K$1$[ebp]
  00d2f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00d36	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00d3d	0f b6 85 90 fe
	ff ff		 movzx	 eax, BYTE PTR _K$[ebp+28]
  00d44	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00d4b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00d52	8b 45 bc	 mov	 eax, DWORD PTR _K$13$[ebp]
  00d55	c1 e8 08	 shr	 eax, 8
  00d58	0f b6 c0	 movzx	 eax, al
  00d5b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00d62	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00d69	8b 45 b8	 mov	 eax, DWORD PTR _K$14$[ebp]
  00d6c	c1 e8 10	 shr	 eax, 16			; 00000010H
  00d6f	0f b6 c0	 movzx	 eax, al
  00d72	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00d79	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00d80	8b 45 b4	 mov	 eax, DWORD PTR _K$15$[ebp]
  00d83	c1 e8 18	 shr	 eax, 24			; 00000018H
  00d86	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00d8d	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00d94	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _K$7$[ebp]
  00d9a	0f b6 c0	 movzx	 eax, al
  00d9d	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  00da4	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00dab	8b 45 8c	 mov	 eax, DWORD PTR _K$10$[ebp]
  00dae	0f ac c2 08	 shrd	 edx, eax, 8
  00db2	89 b5 04 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+52], esi
  00db8	c1 e8 08	 shr	 eax, 8
  00dbb	8b 45 9c	 mov	 eax, DWORD PTR _K$11$[ebp]
  00dbe	0f ac 45 c4 10	 shrd	 DWORD PTR _K$2$[ebp], eax, 16
  00dc3	0f b6 d2	 movzx	 edx, dl
  00dc6	c1 e8 10	 shr	 eax, 16			; 00000010H
  00dc9	8b 45 c4	 mov	 eax, DWORD PTR _K$2$[ebp]
  00dcc	0f b6 c0	 movzx	 eax, al
  00dcf	8b 34 d5 00 00
	00 00		 mov	 esi, DWORD PTR _C6[edx*8]
  00dd6	8b 14 d5 04 00
	00 00		 mov	 edx, DWORD PTR _C6[edx*8+4]
  00ddd	89 bd 00 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+48], edi
  00de3	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8]
  00dea	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C5[eax*8+4]
  00df1	8b 45 98	 mov	 eax, DWORD PTR _K$12$[ebp]
  00df4	0f ac 45 c0 18	 shrd	 DWORD PTR _K$3$[ebp], eax, 24

; 767  :             C0[(int)(K[7] >> 56)       ] ^
; 768  :             C1[(int)(K[6] >> 48) & 0xff] ^
; 769  :             C2[(int)(K[5] >> 40) & 0xff] ^
; 770  :             C3[(int)(K[4] >> 32) & 0xff] ^
; 771  :             C4[(int)(K[3] >> 24) & 0xff] ^
; 772  :             C5[(int)(K[2] >> 16) & 0xff] ^
; 773  :             C6[(int)(K[1] >>  8) & 0xff] ^
; 774  :             C7[(int)(K[0]      ) & 0xff];
; 775  :         K[0] = L[0];

  00df9	0f 10 8d d0 fe
	ff ff		 movups	 xmm1, XMMWORD PTR _L$[ebp]
  00e00	c1 e8 18	 shr	 eax, 24			; 00000018H
  00e03	8b 45 c0	 mov	 eax, DWORD PTR _K$3$[ebp]
  00e06	0f b6 c0	 movzx	 eax, al
  00e09	0f 10 95 e0 fe
	ff ff		 movups	 xmm2, XMMWORD PTR _L$[ebp+16]
  00e10	0f 10 9d f0 fe
	ff ff		 movups	 xmm3, XMMWORD PTR _L$[ebp+32]
  00e17	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8]
  00e1e	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C4[eax*8+4]
  00e25	0f b6 85 98 fe
	ff ff		 movzx	 eax, BYTE PTR _K$[ebp+36]
  00e2c	0f 11 8d 74 fe
	ff ff		 movups	 XMMWORD PTR _K$[ebp], xmm1
  00e33	0f 11 95 84 fe
	ff ff		 movups	 XMMWORD PTR _K$[ebp+16], xmm2
  00e3a	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8]
  00e41	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C3[eax*8+4]
  00e48	8b 45 b8	 mov	 eax, DWORD PTR _K$14$[ebp]
  00e4b	c1 e8 08	 shr	 eax, 8
  00e4e	0f b6 c0	 movzx	 eax, al
  00e51	0f 11 9d 94 fe
	ff ff		 movups	 XMMWORD PTR _K$[ebp+32], xmm3
  00e58	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8]
  00e5f	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C2[eax*8+4]
  00e66	8b 45 b4	 mov	 eax, DWORD PTR _K$15$[ebp]
  00e69	c1 e8 10	 shr	 eax, 16			; 00000010H
  00e6c	0f b6 c0	 movzx	 eax, al
  00e6f	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8]
  00e76	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C1[eax*8+4]
  00e7d	8b 45 c8	 mov	 eax, DWORD PTR _K$16$[ebp]
  00e80	c1 e8 18	 shr	 eax, 24			; 00000018H
  00e83	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8]
  00e8a	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C0[eax*8+4]
  00e91	8b 45 94	 mov	 eax, DWORD PTR _K$8$[ebp]
  00e94	0f b6 c0	 movzx	 eax, al
  00e97	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8]
  00e9e	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C7[eax*8+4]

; 776  :         K[1] = L[1];
; 777  :         K[2] = L[2];
; 778  :         K[3] = L[3];
; 779  :         K[4] = L[4];
; 780  :         K[5] = L[5];
; 781  :         K[6] = L[6];
; 782  :         K[7] = L[7];
; 783  :         /*
; 784  :          * apply the r-th round transformation:
; 785  :          */
; 786  :         L[0] =

  00ea5	8b 45 88	 mov	 eax, DWORD PTR _state$11$[ebp]
  00ea8	89 95 0c ff ff
	ff		 mov	 DWORD PTR _L$[ebp+60], edx
  00eae	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$2$[ebp]
  00eb4	0f ac c2 08	 shrd	 edx, eax, 8
  00eb8	89 b5 08 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+56], esi
  00ebe	c1 e8 08	 shr	 eax, 8
  00ec1	8b 45 a0	 mov	 eax, DWORD PTR _state$12$[ebp]
  00ec4	0f b6 f2	 movzx	 esi, dl
  00ec7	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _state$3$[ebp]
  00ecd	0f ac c2 10	 shrd	 edx, eax, 16
  00ed1	0f 10 a5 00 ff
	ff ff		 movups	 xmm4, XMMWORD PTR _L$[ebp+48]
  00ed8	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C6[esi*8]
  00edf	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C6[esi*8+4]
  00ee6	c1 e8 10	 shr	 eax, 16			; 00000010H
  00ee9	0f b6 c2	 movzx	 eax, dl
  00eec	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$4$[ebp]
  00ef2	0f 11 a5 a4 fe
	ff ff		 movups	 XMMWORD PTR _K$[ebp+48], xmm4
  00ef9	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  00f00	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  00f07	8b 45 a4	 mov	 eax, DWORD PTR _state$13$[ebp]
  00f0a	0f ac c2 18	 shrd	 edx, eax, 24
  00f0e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00f11	0f b6 c2	 movzx	 eax, dl
  00f14	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  00f1b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  00f22	0f b6 85 3c ff
	ff ff		 movzx	 eax, BYTE PTR _state$[ebp+44]
  00f29	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  00f30	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  00f37	8b 45 ac	 mov	 eax, DWORD PTR _state$15$[ebp]
  00f3a	c1 e8 08	 shr	 eax, 8
  00f3d	0f b6 c0	 movzx	 eax, al
  00f40	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  00f47	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  00f4e	8b 45 b0	 mov	 eax, DWORD PTR _state$16$[ebp]
  00f51	c1 e8 10	 shr	 eax, 16			; 00000010H
  00f54	0f b6 c0	 movzx	 eax, al
  00f57	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  00f5e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  00f65	8b c3		 mov	 eax, ebx
  00f67	c1 e8 18	 shr	 eax, 24			; 00000018H
  00f6a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  00f71	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  00f78	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$1$[ebp]
  00f7e	0f b6 c0	 movzx	 eax, al
  00f81	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  00f88	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]

; 787  :             C0[(int)(state[0] >> 56)       ] ^
; 788  :             C1[(int)(state[7] >> 48) & 0xff] ^
; 789  :             C2[(int)(state[6] >> 40) & 0xff] ^
; 790  :             C3[(int)(state[5] >> 32) & 0xff] ^
; 791  :             C4[(int)(state[4] >> 24) & 0xff] ^
; 792  :             C5[(int)(state[3] >> 16) & 0xff] ^
; 793  :             C6[(int)(state[2] >>  8) & 0xff] ^
; 794  :             C7[(int)(state[1]      ) & 0xff] ^
; 795  :             K[0];
; 796  :         L[1] =

  00f8f	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _state$3$[ebp]
  00f95	0f 28 c1	 movaps	 xmm0, xmm1
  00f98	66 0f 7e c8	 movd	 eax, xmm1
  00f9c	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00fa1	33 f8		 xor	 edi, eax
  00fa3	89 45 94	 mov	 DWORD PTR _K$8$[ebp], eax
  00fa6	66 0f 7e c0	 movd	 eax, xmm0
  00faa	0f 28 c1	 movaps	 xmm0, xmm1
  00fad	89 bd d0 fe ff
	ff		 mov	 DWORD PTR _L$[ebp], edi
  00fb3	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00fb8	33 f0		 xor	 esi, eax
  00fba	89 45 90	 mov	 DWORD PTR _K$9$[ebp], eax
  00fbd	89 85 78 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+4], eax
  00fc3	8b c3		 mov	 eax, ebx
  00fc5	c1 e8 10	 shr	 eax, 16			; 00000010H
  00fc8	89 b5 d4 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+4], esi
  00fce	0f b6 f0	 movzx	 esi, al
  00fd1	8b 45 a0	 mov	 eax, DWORD PTR _state$12$[ebp]
  00fd4	0f ac c2 08	 shrd	 edx, eax, 8
  00fd8	66 0f 73 d9 0c	 psrldq	 xmm1, 12		; 0000000cH
  00fdd	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C1[esi*8]
  00fe4	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C1[esi*8+4]
  00feb	c1 e8 08	 shr	 eax, 8
  00fee	0f b6 c2	 movzx	 eax, dl
  00ff1	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$4$[ebp]
  00ff7	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  00ffe	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  01005	8b 45 a4	 mov	 eax, DWORD PTR _state$13$[ebp]
  01008	0f ac c2 10	 shrd	 edx, eax, 16
  0100c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0100f	0f b6 c2	 movzx	 eax, dl
  01012	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _state$5$[ebp]
  01018	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  0101f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  01026	8b 45 a8	 mov	 eax, DWORD PTR _state$14$[ebp]
  01029	0f ac c2 18	 shrd	 edx, eax, 24
  0102d	c1 e8 18	 shr	 eax, 24			; 00000018H
  01030	0f b6 c2	 movzx	 eax, dl
  01033	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  0103a	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  01041	0f b6 85 44 ff
	ff ff		 movzx	 eax, BYTE PTR _state$[ebp+52]
  01048	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  0104f	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  01056	8b 45 b0	 mov	 eax, DWORD PTR _state$16$[ebp]
  01059	c1 e8 08	 shr	 eax, 8
  0105c	0f b6 c0	 movzx	 eax, al
  0105f	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  01066	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  0106d	8b c1		 mov	 eax, ecx
  0106f	c1 e8 18	 shr	 eax, 24			; 00000018H
  01072	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  01079	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  01080	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _state$2$[ebp]
  01086	0f b6 c0	 movzx	 eax, al
  01089	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  01090	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  01097	66 0f 7e c0	 movd	 eax, xmm0
  0109b	33 f8		 xor	 edi, eax
  0109d	89 45 84	 mov	 DWORD PTR _K$1$[ebp], eax
  010a0	66 0f 7e c8	 movd	 eax, xmm1
  010a4	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+8], edi
  010aa	33 f0		 xor	 esi, eax
  010ac	89 45 8c	 mov	 DWORD PTR _K$10$[ebp], eax
  010af	89 85 80 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+12], eax

; 797  :             C0[(int)(state[1] >> 56)       ] ^
; 798  :             C1[(int)(state[0] >> 48) & 0xff] ^
; 799  :             C2[(int)(state[7] >> 40) & 0xff] ^
; 800  :             C3[(int)(state[6] >> 32) & 0xff] ^
; 801  :             C4[(int)(state[5] >> 24) & 0xff] ^
; 802  :             C5[(int)(state[4] >> 16) & 0xff] ^
; 803  :             C6[(int)(state[3] >>  8) & 0xff] ^
; 804  :             C7[(int)(state[2]      ) & 0xff] ^
; 805  :             K[1];
; 806  :         L[2] =

  010b5	8b c1		 mov	 eax, ecx
  010b7	c1 e8 10	 shr	 eax, 16			; 00000010H
  010ba	0f b6 d0	 movzx	 edx, al
  010bd	8b c3		 mov	 eax, ebx
  010bf	c1 e8 08	 shr	 eax, 8
  010c2	0f b6 c0	 movzx	 eax, al
  010c5	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _L$[ebp+12], esi
  010cb	8b 3c d5 00 00
	00 00		 mov	 edi, DWORD PTR _C1[edx*8]
  010d2	8b 34 d5 04 00
	00 00		 mov	 esi, DWORD PTR _C1[edx*8+4]
  010d9	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  010e0	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  010e7	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _state$4$[ebp]
  010ed	8b 45 a4	 mov	 eax, DWORD PTR _state$13$[ebp]
  010f0	0f ac c2 08	 shrd	 edx, eax, 8
  010f4	c1 e8 08	 shr	 eax, 8
  010f7	0f b6 c2	 movzx	 eax, dl
  010fa	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  01101	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  01108	0f 28 c2	 movaps	 xmm0, xmm2
  0110b	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _state$5$[ebp]
  01111	8b 45 a8	 mov	 eax, DWORD PTR _state$14$[ebp]
  01114	0f ac c2 10	 shrd	 edx, eax, 16
  01118	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0111d	c1 e8 10	 shr	 eax, 16			; 00000010H
  01120	0f b6 c2	 movzx	 eax, dl
  01123	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$6$[ebp]
  01129	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  01130	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  01137	8b 45 ac	 mov	 eax, DWORD PTR _state$15$[ebp]
  0113a	0f ac c2 18	 shrd	 edx, eax, 24
  0113e	c1 e8 18	 shr	 eax, 24			; 00000018H
  01141	0f b6 c2	 movzx	 eax, dl

; 807  :             C0[(int)(state[2] >> 56)       ] ^
; 808  :             C1[(int)(state[1] >> 48) & 0xff] ^
; 809  :             C2[(int)(state[0] >> 40) & 0xff] ^
; 810  :             C3[(int)(state[7] >> 32) & 0xff] ^
; 811  :             C4[(int)(state[6] >> 24) & 0xff] ^
; 812  :             C5[(int)(state[5] >> 16) & 0xff] ^
; 813  :             C6[(int)(state[4] >>  8) & 0xff] ^
; 814  :             C7[(int)(state[3]      ) & 0xff] ^
; 815  :             K[2];
; 816  :         L[3] =

  01144	0f b6 95 14 ff
	ff ff		 movzx	 edx, BYTE PTR _state$[ebp+4]
  0114b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  01152	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  01159	0f b6 85 4c ff
	ff ff		 movzx	 eax, BYTE PTR _state$[ebp+60]
  01160	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  01167	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  0116e	8b 45 88	 mov	 eax, DWORD PTR _state$11$[ebp]
  01171	c1 e8 18	 shr	 eax, 24			; 00000018H
  01174	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  0117b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  01182	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _state$3$[ebp]
  01188	0f b6 c0	 movzx	 eax, al
  0118b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  01192	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  01199	66 0f 7e d0	 movd	 eax, xmm2
  0119d	33 f8		 xor	 edi, eax
  0119f	89 45 c4	 mov	 DWORD PTR _K$2$[ebp], eax
  011a2	66 0f 7e c0	 movd	 eax, xmm0
  011a6	0f 28 c2	 movaps	 xmm0, xmm2
  011a9	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+16], edi
  011af	66 0f 73 d8 08	 psrldq	 xmm0, 8
  011b4	33 f0		 xor	 esi, eax
  011b6	89 45 9c	 mov	 DWORD PTR _K$11$[ebp], eax
  011b9	89 85 88 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+20], eax
  011bf	8b c1		 mov	 eax, ecx
  011c1	c1 e8 08	 shr	 eax, 8
  011c4	0f b6 c0	 movzx	 eax, al
  011c7	89 b5 e4 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+20], esi
  011cd	8b 3c c5 00 00
	00 00		 mov	 edi, DWORD PTR _C2[eax*8]
  011d4	8b 34 c5 04 00
	00 00		 mov	 esi, DWORD PTR _C2[eax*8+4]
  011db	33 3c d5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[edx*8]
  011e2	33 34 d5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[edx*8+4]
  011e9	8b 45 88	 mov	 eax, DWORD PTR _state$11$[ebp]
  011ec	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _state$5$[ebp]
  011f2	c1 e8 10	 shr	 eax, 16			; 00000010H
  011f5	0f b6 c0	 movzx	 eax, al
  011f8	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  011ff	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  01206	8b 45 a8	 mov	 eax, DWORD PTR _state$14$[ebp]
  01209	0f ac c2 08	 shrd	 edx, eax, 8
  0120d	c1 e8 08	 shr	 eax, 8
  01210	0f b6 c2	 movzx	 eax, dl
  01213	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$6$[ebp]
  01219	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  01220	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  01227	8b 45 ac	 mov	 eax, DWORD PTR _state$15$[ebp]
  0122a	0f ac c2 10	 shrd	 edx, eax, 16
  0122e	c1 e8 10	 shr	 eax, 16			; 00000010H
  01231	0f b6 c2	 movzx	 eax, dl
  01234	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _state$7$[ebp]
  0123a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  01241	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  01248	8b 45 b0	 mov	 eax, DWORD PTR _state$16$[ebp]
  0124b	0f ac c2 18	 shrd	 edx, eax, 24
  0124f	c1 e8 18	 shr	 eax, 24			; 00000018H
  01252	0f b6 c2	 movzx	 eax, dl
  01255	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  0125c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  01263	8b 45 a0	 mov	 eax, DWORD PTR _state$12$[ebp]
  01266	c1 e8 18	 shr	 eax, 24			; 00000018H
  01269	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  01270	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  01277	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _state$4$[ebp]
  0127d	0f b6 c0	 movzx	 eax, al
  01280	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  01287	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]

; 817  :             C0[(int)(state[3] >> 56)       ] ^
; 818  :             C1[(int)(state[2] >> 48) & 0xff] ^
; 819  :             C2[(int)(state[1] >> 40) & 0xff] ^
; 820  :             C3[(int)(state[0] >> 32) & 0xff] ^
; 821  :             C4[(int)(state[7] >> 24) & 0xff] ^
; 822  :             C5[(int)(state[6] >> 16) & 0xff] ^
; 823  :             C6[(int)(state[5] >>  8) & 0xff] ^
; 824  :             C7[(int)(state[4]      ) & 0xff] ^
; 825  :             K[3];
; 826  :         L[4] =

  0128e	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$8$[ebp]
  01294	66 0f 7e c0	 movd	 eax, xmm0
  01298	0f 28 c3	 movaps	 xmm0, xmm3
  0129b	66 0f 73 da 0c	 psrldq	 xmm2, 12		; 0000000cH
  012a0	66 0f 73 d8 04	 psrldq	 xmm0, 4
  012a5	33 f8		 xor	 edi, eax
  012a7	89 45 c0	 mov	 DWORD PTR _K$3$[ebp], eax
  012aa	66 0f 7e d0	 movd	 eax, xmm2
  012ae	89 bd e8 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+24], edi
  012b4	33 f0		 xor	 esi, eax
  012b6	89 45 98	 mov	 DWORD PTR _K$12$[ebp], eax
  012b9	89 85 90 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+28], eax
  012bf	8b c3		 mov	 eax, ebx
  012c1	0f ac c2 18	 shrd	 edx, eax, 24
  012c5	89 b5 ec fe ff
	ff		 mov	 DWORD PTR _L$[ebp+28], esi
  012cb	0f b6 b5 1c ff
	ff ff		 movzx	 esi, BYTE PTR _state$[ebp+12]
  012d2	c1 e8 18	 shr	 eax, 24			; 00000018H
  012d5	0f b6 c2	 movzx	 eax, dl
  012d8	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _state$6$[ebp]
  012de	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C3[esi*8]
  012e5	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C3[esi*8+4]
  012ec	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  012f3	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  012fa	8b 45 88	 mov	 eax, DWORD PTR _state$11$[ebp]
  012fd	c1 e8 08	 shr	 eax, 8
  01300	0f b6 c0	 movzx	 eax, al
  01303	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  0130a	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  01311	8b 45 a0	 mov	 eax, DWORD PTR _state$12$[ebp]
  01314	c1 e8 10	 shr	 eax, 16			; 00000010H
  01317	0f b6 c0	 movzx	 eax, al
  0131a	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  01321	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  01328	8b 45 ac	 mov	 eax, DWORD PTR _state$15$[ebp]
  0132b	0f ac c2 08	 shrd	 edx, eax, 8
  0132f	c1 e8 08	 shr	 eax, 8
  01332	0f b6 c2	 movzx	 eax, dl
  01335	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _state$7$[ebp]
  0133b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  01342	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  01349	8b 45 b0	 mov	 eax, DWORD PTR _state$16$[ebp]
  0134c	0f ac c2 10	 shrd	 edx, eax, 16
  01350	c1 e8 10	 shr	 eax, 16			; 00000010H
  01353	0f b6 c2	 movzx	 eax, dl

; 827  :             C0[(int)(state[4] >> 56)       ] ^
; 828  :             C1[(int)(state[3] >> 48) & 0xff] ^
; 829  :             C2[(int)(state[2] >> 40) & 0xff] ^
; 830  :             C3[(int)(state[1] >> 32) & 0xff] ^
; 831  :             C4[(int)(state[0] >> 24) & 0xff] ^
; 832  :             C5[(int)(state[7] >> 16) & 0xff] ^
; 833  :             C6[(int)(state[6] >>  8) & 0xff] ^
; 834  :             C7[(int)(state[5]      ) & 0xff] ^
; 835  :             K[4];
; 836  :         L[5] =

  01356	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _state$1$[ebp]
  0135c	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  01363	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  0136a	8b 45 a4	 mov	 eax, DWORD PTR _state$13$[ebp]
  0136d	c1 e8 18	 shr	 eax, 24			; 00000018H
  01370	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  01377	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  0137e	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _state$5$[ebp]
  01384	0f b6 c0	 movzx	 eax, al
  01387	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  0138e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  01395	66 0f 7e d8	 movd	 eax, xmm3
  01399	33 f8		 xor	 edi, eax
  0139b	89 45 80	 mov	 DWORD PTR _K$4$[ebp], eax
  0139e	66 0f 7e c0	 movd	 eax, xmm0
  013a2	89 bd f0 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+32], edi
  013a8	33 f0		 xor	 esi, eax
  013aa	89 45 bc	 mov	 DWORD PTR _K$13$[ebp], eax
  013ad	89 85 98 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+36], eax
  013b3	8b c1		 mov	 eax, ecx
  013b5	0f ac c2 18	 shrd	 edx, eax, 24
  013b9	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+36], esi
  013bf	c1 e8 18	 shr	 eax, 24			; 00000018H
  013c2	0f b6 f2	 movzx	 esi, dl
  013c5	8b c3		 mov	 eax, ebx
  013c7	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _state$8$[ebp]
  013cd	0f ac c2 10	 shrd	 edx, eax, 16
  013d1	8b 3c f5 00 00
	00 00		 mov	 edi, DWORD PTR _C4[esi*8]
  013d8	8b 34 f5 04 00
	00 00		 mov	 esi, DWORD PTR _C4[esi*8+4]
  013df	c1 e8 10	 shr	 eax, 16			; 00000010H
  013e2	0f b6 c2	 movzx	 eax, dl
  013e5	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C5[eax*8]
  013ec	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8+4]
  013f3	0f b6 85 24 ff
	ff ff		 movzx	 eax, BYTE PTR _state$[ebp+20]
  013fa	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  01401	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  01408	8b 45 a0	 mov	 eax, DWORD PTR _state$12$[ebp]
  0140b	c1 e8 08	 shr	 eax, 8
  0140e	0f 28 c3	 movaps	 xmm0, xmm3
  01411	0f b6 c0	 movzx	 eax, al
  01414	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _state$7$[ebp]
  0141a	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0141f	66 0f 73 db 0c	 psrldq	 xmm3, 12		; 0000000cH
  01424	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  0142b	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  01432	8b 45 a4	 mov	 eax, DWORD PTR _state$13$[ebp]
  01435	c1 e8 10	 shr	 eax, 16			; 00000010H
  01438	0f b6 c0	 movzx	 eax, al
  0143b	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  01442	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  01449	8b 45 b0	 mov	 eax, DWORD PTR _state$16$[ebp]
  0144c	0f ac c2 08	 shrd	 edx, eax, 8
  01450	c1 e8 08	 shr	 eax, 8
  01453	0f b6 c2	 movzx	 eax, dl

; 837  :             C0[(int)(state[5] >> 56)       ] ^
; 838  :             C1[(int)(state[4] >> 48) & 0xff] ^
; 839  :             C2[(int)(state[3] >> 40) & 0xff] ^
; 840  :             C3[(int)(state[2] >> 32) & 0xff] ^
; 841  :             C4[(int)(state[1] >> 24) & 0xff] ^
; 842  :             C5[(int)(state[0] >> 16) & 0xff] ^
; 843  :             C6[(int)(state[7] >>  8) & 0xff] ^
; 844  :             C7[(int)(state[6]      ) & 0xff] ^
; 845  :             K[5];
; 846  :         L[6] =

  01456	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _state$1$[ebp]
  0145c	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  01463	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  0146a	8b 45 a8	 mov	 eax, DWORD PTR _state$14$[ebp]
  0146d	c1 e8 18	 shr	 eax, 24			; 00000018H
  01470	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  01477	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  0147e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _state$6$[ebp]
  01484	0f b6 c0	 movzx	 eax, al
  01487	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  0148e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  01495	66 0f 7e c0	 movd	 eax, xmm0
  01499	33 f8		 xor	 edi, eax
  0149b	89 85 7c ff ff
	ff		 mov	 DWORD PTR _K$5$[ebp], eax
  014a1	66 0f 7e d8	 movd	 eax, xmm3
  014a5	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _L$[ebp+40], edi
  014ab	33 f0		 xor	 esi, eax
  014ad	89 45 b8	 mov	 DWORD PTR _K$14$[ebp], eax
  014b0	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+44], eax
  014b6	8b c1		 mov	 eax, ecx
  014b8	0f ac c2 10	 shrd	 edx, eax, 16
  014bc	89 b5 fc fe ff
	ff		 mov	 DWORD PTR _L$[ebp+44], esi
  014c2	c1 e8 10	 shr	 eax, 16			; 00000010H
  014c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _state$8$[ebp]
  014cb	0f ac d8 08	 shrd	 eax, ebx, 8
  014cf	0f b6 d2	 movzx	 edx, dl
  014d2	0f b6 c0	 movzx	 eax, al
  014d5	c1 eb 08	 shr	 ebx, 8
  014d8	8b 5d 88	 mov	 ebx, DWORD PTR _state$11$[ebp]
  014db	8b 3c d5 00 00
	00 00		 mov	 edi, DWORD PTR _C5[edx*8]
  014e2	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C6[eax*8]
  014e9	8b 34 d5 04 00
	00 00		 mov	 esi, DWORD PTR _C5[edx*8+4]
  014f0	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C6[eax*8+4]
  014f7	8b c3		 mov	 eax, ebx
  014f9	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _state$2$[ebp]
  014ff	0f ac c2 18	 shrd	 edx, eax, 24
  01503	c1 e8 18	 shr	 eax, 24			; 00000018H
  01506	0f b6 c2	 movzx	 eax, dl
  01509	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C4[eax*8]
  01510	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8+4]
  01517	0f b6 85 2c ff
	ff ff		 movzx	 eax, BYTE PTR _state$[ebp+28]
  0151e	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C3[eax*8]
  01525	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8+4]
  0152c	8b 45 a4	 mov	 eax, DWORD PTR _state$13$[ebp]
  0152f	c1 e8 08	 shr	 eax, 8
  01532	0f b6 c0	 movzx	 eax, al
  01535	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C2[eax*8]
  0153c	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8+4]
  01543	8b 45 a8	 mov	 eax, DWORD PTR _state$14$[ebp]
  01546	c1 e8 10	 shr	 eax, 16			; 00000010H
  01549	0f b6 c0	 movzx	 eax, al
  0154c	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C1[eax*8]
  01553	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8+4]
  0155a	8b 45 ac	 mov	 eax, DWORD PTR _state$15$[ebp]
  0155d	c1 e8 18	 shr	 eax, 24			; 00000018H
  01560	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C0[eax*8]
  01567	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8+4]
  0156e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _state$7$[ebp]
  01574	0f b6 c0	 movzx	 eax, al
  01577	33 3c c5 00 00
	00 00		 xor	 edi, DWORD PTR _C7[eax*8]
  0157e	33 34 c5 04 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8+4]
  01585	66 0f 7e e0	 movd	 eax, xmm4
  01589	89 85 78 ff ff
	ff		 mov	 DWORD PTR _K$6$[ebp], eax
  0158f	33 f8		 xor	 edi, eax
  01591	0f 28 c4	 movaps	 xmm0, xmm4
  01594	89 bd 00 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+48], edi
  0159a	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0159f	66 0f 7e c0	 movd	 eax, xmm0

; 847  :             C0[(int)(state[6] >> 56)       ] ^
; 848  :             C1[(int)(state[5] >> 48) & 0xff] ^
; 849  :             C2[(int)(state[4] >> 40) & 0xff] ^
; 850  :             C3[(int)(state[3] >> 32) & 0xff] ^
; 851  :             C4[(int)(state[2] >> 24) & 0xff] ^
; 852  :             C5[(int)(state[1] >> 16) & 0xff] ^
; 853  :             C6[(int)(state[0] >>  8) & 0xff] ^
; 854  :             C7[(int)(state[7]      ) & 0xff] ^
; 855  :             K[6];
; 856  :         L[7] =

  015a3	0f 28 c4	 movaps	 xmm0, xmm4
  015a6	66 0f 73 d8 08	 psrldq	 xmm0, 8
  015ab	66 0f 73 dc 0c	 psrldq	 xmm4, 12		; 0000000cH
  015b0	33 f0		 xor	 esi, eax
  015b2	89 45 b4	 mov	 DWORD PTR _K$15$[ebp], eax
  015b5	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+52], eax
  015bb	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _state$1$[ebp]
  015c1	0f ac c8 08	 shrd	 eax, ecx, 8
  015c5	89 b5 04 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+52], esi
  015cb	0f b6 d0	 movzx	 edx, al
  015ce	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _state$2$[ebp]
  015d4	0f ac d8 10	 shrd	 eax, ebx, 16
  015d8	c1 e9 08	 shr	 ecx, 8
  015db	8b 34 d5 00 00
	00 00		 mov	 esi, DWORD PTR _C6[edx*8]
  015e2	8b 14 d5 04 00
	00 00		 mov	 edx, DWORD PTR _C6[edx*8+4]
  015e9	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _state$3$[ebp]
  015ef	0f b6 c0	 movzx	 eax, al
  015f2	c1 eb 10	 shr	 ebx, 16			; 00000010H
  015f5	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C5[eax*8]
  015fc	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C5[eax*8+4]
  01603	8b 45 a0	 mov	 eax, DWORD PTR _state$12$[ebp]
  01606	0f ac c1 18	 shrd	 ecx, eax, 24
  0160a	c1 e8 18	 shr	 eax, 24			; 00000018H
  0160d	0f b6 c1	 movzx	 eax, cl
  01610	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C4[eax*8]
  01617	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C4[eax*8+4]
  0161e	0f b6 85 34 ff
	ff ff		 movzx	 eax, BYTE PTR _state$[ebp+36]
  01625	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C3[eax*8]
  0162c	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C3[eax*8+4]
  01633	8b 45 a8	 mov	 eax, DWORD PTR _state$14$[ebp]
  01636	c1 e8 08	 shr	 eax, 8
  01639	0f b6 c0	 movzx	 eax, al
  0163c	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C2[eax*8]
  01643	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C2[eax*8+4]
  0164a	8b 45 ac	 mov	 eax, DWORD PTR _state$15$[ebp]
  0164d	c1 e8 10	 shr	 eax, 16			; 00000010H
  01650	0f b6 c0	 movzx	 eax, al
  01653	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C1[eax*8]
  0165a	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C1[eax*8+4]
  01661	8b 45 b0	 mov	 eax, DWORD PTR _state$16$[ebp]
  01664	c1 e8 18	 shr	 eax, 24			; 00000018H
  01667	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C0[eax*8]
  0166e	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C0[eax*8+4]
  01675	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _state$8$[ebp]
  0167b	0f b6 c0	 movzx	 eax, al
  0167e	33 34 c5 00 00
	00 00		 xor	 esi, DWORD PTR _C7[eax*8]
  01685	33 14 c5 04 00
	00 00		 xor	 edx, DWORD PTR _C7[eax*8+4]
  0168c	66 0f 7e c0	 movd	 eax, xmm0

; 857  :             C0[(int)(state[7] >> 56)       ] ^
; 858  :             C1[(int)(state[6] >> 48) & 0xff] ^
; 859  :             C2[(int)(state[5] >> 40) & 0xff] ^
; 860  :             C3[(int)(state[4] >> 32) & 0xff] ^
; 861  :             C4[(int)(state[3] >> 24) & 0xff] ^
; 862  :             C5[(int)(state[2] >> 16) & 0xff] ^
; 863  :             C6[(int)(state[1] >>  8) & 0xff] ^
; 864  :             C7[(int)(state[0]      ) & 0xff] ^
; 865  :             K[7];
; 866  :         state[0] = L[0];

  01690	0f 10 85 d0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _L$[ebp]
  01697	33 f0		 xor	 esi, eax
  01699	89 85 74 ff ff
	ff		 mov	 DWORD PTR _K$7$[ebp], eax
  0169f	0f 11 85 10 ff
	ff ff		 movups	 XMMWORD PTR _state$[ebp], xmm0
  016a6	89 b5 08 ff ff
	ff		 mov	 DWORD PTR _L$[ebp+56], esi
  016ac	0f 10 85 e0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _L$[ebp+16]
  016b3	66 0f 7e e0	 movd	 eax, xmm4
  016b7	0f 11 85 20 ff
	ff ff		 movups	 XMMWORD PTR _state$[ebp+16], xmm0
  016be	0f 10 85 f0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _L$[ebp+32]
  016c5	33 d0		 xor	 edx, eax
  016c7	89 45 c8	 mov	 DWORD PTR _K$16$[ebp], eax
  016ca	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _K$[ebp+60], eax
  016d0	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv2920[ebp]
  016d6	89 95 0c ff ff
	ff		 mov	 DWORD PTR _L$[ebp+60], edx
  016dc	83 c0 08	 add	 eax, 8
  016df	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv2920[ebp], eax
  016e5	0f 11 85 30 ff
	ff ff		 movups	 XMMWORD PTR _state$[ebp+32], xmm0
  016ec	0f 10 85 00 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _L$[ebp+48]
  016f3	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _state$[ebp+48], xmm0
  016fa	3d 50 00 00 00	 cmp	 eax, OFFSET _rc+80
  016ff	0f 8f ad 00 00
	00		 jg	 $LN70@processBuf

; 675  :             (((u64)buffer[0]        ) << 56) ^
; 676  :             (((u64)buffer[1] & 0xffL) << 48) ^
; 677  :             (((u64)buffer[2] & 0xffL) << 40) ^
; 678  :             (((u64)buffer[3] & 0xffL) << 32) ^
; 679  :             (((u64)buffer[4] & 0xffL) << 24) ^
; 680  :             (((u64)buffer[5] & 0xffL) << 16) ^
; 681  :             (((u64)buffer[6] & 0xffL) <<  8) ^
; 682  :             (((u64)buffer[7] & 0xffL)      );
; 683  :     }
; 684  :     /*
; 685  :      * compute and apply K^0 to the cipher state:
; 686  :      */
; 687  :     state[0] = block[0] ^ (K[0] = structpointer->hash[0]);

  01705	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+60]
  0170b	89 45 b0	 mov	 DWORD PTR _state$16$[ebp], eax
  0170e	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+56]
  01714	89 85 70 ff ff
	ff		 mov	 DWORD PTR _state$7$[ebp], eax
  0171a	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+52]
  01720	89 45 ac	 mov	 DWORD PTR _state$15$[ebp], eax
  01723	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+48]
  01729	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+12]
  0172f	8b 9d 14 ff ff
	ff		 mov	 ebx, DWORD PTR _state$[ebp+4]
  01735	8b 75 9c	 mov	 esi, DWORD PTR _K$11$[ebp]
  01738	8b 7d 98	 mov	 edi, DWORD PTR _K$12$[ebp]
  0173b	89 85 6c ff ff
	ff		 mov	 DWORD PTR _state$6$[ebp], eax
  01741	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+44]
  01747	89 45 a8	 mov	 DWORD PTR _state$14$[ebp], eax
  0174a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+40]
  01750	89 85 68 ff ff
	ff		 mov	 DWORD PTR _state$5$[ebp], eax
  01756	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+36]
  0175c	89 45 a4	 mov	 DWORD PTR _state$13$[ebp], eax
  0175f	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+32]
  01765	89 85 64 ff ff
	ff		 mov	 DWORD PTR _state$4$[ebp], eax
  0176b	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+28]
  01771	89 45 a0	 mov	 DWORD PTR _state$12$[ebp], eax
  01774	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+24]
  0177a	89 85 60 ff ff
	ff		 mov	 DWORD PTR _state$3$[ebp], eax
  01780	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+20]
  01786	89 45 88	 mov	 DWORD PTR _state$11$[ebp], eax
  01789	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+16]
  0178f	89 85 5c ff ff
	ff		 mov	 DWORD PTR _state$2$[ebp], eax
  01795	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp+8]
  0179b	89 85 58 ff ff
	ff		 mov	 DWORD PTR _state$1$[ebp], eax
  017a1	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  017a7	89 85 54 ff ff
	ff		 mov	 DWORD PTR _state$8$[ebp], eax
  017ad	e9 1e f0 ff ff	 jmp	 $LL7@processBuf
$LN70@processBuf:

; 867  :         state[1] = L[1];
; 868  :         state[2] = L[2];
; 869  :         state[3] = L[3];
; 870  :         state[4] = L[4];
; 871  :         state[5] = L[5];
; 872  :         state[6] = L[6];
; 873  :         state[7] = L[7];
; 874  :     }
; 875  :     /*
; 876  :      * apply the Miyaguchi-Preneel compression function:
; 877  :      */
; 878  :     structpointer->hash[0] ^= state[0] ^ block[0];

  017b2	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _structpointer$GSCopy$1$[ebp]
  017b8	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _block$1$[ebp]
  017be	33 85 10 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp]
  017c4	33 85 c0 fe ff
	ff		 xor	 eax, DWORD PTR tv2347[ebp]
  017ca	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _block$2$[ebp]
  017d0	33 95 14 ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+4]
  017d6	33 95 bc fe ff
	ff		 xor	 edx, DWORD PTR tv2348[ebp]
  017dc	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  017df	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _block$3$[ebp]
  017e5	33 85 18 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+8]
  017eb	89 51 6c	 mov	 DWORD PTR [ecx+108], edx
  017ee	31 41 70	 xor	 DWORD PTR [ecx+112], eax
  017f1	8b 55 cc	 mov	 edx, DWORD PTR _block$4$[ebp]
  017f4	33 95 1c ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+12]
  017fa	31 51 74	 xor	 DWORD PTR [ecx+116], edx
  017fd	8b 45 fc	 mov	 eax, DWORD PTR _block$5$[ebp]
  01800	33 85 20 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+16]
  01806	31 41 78	 xor	 DWORD PTR [ecx+120], eax
  01809	8b 55 f8	 mov	 edx, DWORD PTR _block$6$[ebp]
  0180c	33 95 24 ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+20]
  01812	31 51 7c	 xor	 DWORD PTR [ecx+124], edx
  01815	8b 45 f4	 mov	 eax, DWORD PTR _block$7$[ebp]
  01818	33 85 28 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+24]
  0181e	31 81 80 00 00
	00		 xor	 DWORD PTR [ecx+128], eax
  01824	8b 55 f0	 mov	 edx, DWORD PTR _block$8$[ebp]
  01827	33 95 2c ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+28]
  0182d	31 91 84 00 00
	00		 xor	 DWORD PTR [ecx+132], edx
  01833	8b 45 ec	 mov	 eax, DWORD PTR _block$9$[ebp]
  01836	33 85 30 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+32]
  0183c	31 81 88 00 00
	00		 xor	 DWORD PTR [ecx+136], eax
  01842	8b 55 e8	 mov	 edx, DWORD PTR _block$10$[ebp]
  01845	33 95 34 ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+36]
  0184b	31 91 8c 00 00
	00		 xor	 DWORD PTR [ecx+140], edx
  01851	8b 45 e4	 mov	 eax, DWORD PTR _block$11$[ebp]
  01854	33 85 38 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+40]
  0185a	31 81 90 00 00
	00		 xor	 DWORD PTR [ecx+144], eax
  01860	8b 55 e0	 mov	 edx, DWORD PTR _block$12$[ebp]
  01863	33 95 3c ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+44]
  01869	31 91 94 00 00
	00		 xor	 DWORD PTR [ecx+148], edx
  0186f	8b 45 dc	 mov	 eax, DWORD PTR _block$13$[ebp]
  01872	33 85 40 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+48]
  01878	31 81 98 00 00
	00		 xor	 DWORD PTR [ecx+152], eax
  0187e	8b 55 d8	 mov	 edx, DWORD PTR _block$14$[ebp]
  01881	33 95 44 ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+52]
  01887	31 91 9c 00 00
	00		 xor	 DWORD PTR [ecx+156], edx
  0188d	8b 45 d4	 mov	 eax, DWORD PTR _block$15$[ebp]
  01890	33 85 48 ff ff
	ff		 xor	 eax, DWORD PTR _state$[ebp+56]
  01896	8b 55 d0	 mov	 edx, DWORD PTR _block$16$[ebp]
  01899	33 95 4c ff ff
	ff		 xor	 edx, DWORD PTR _state$[ebp+60]
  0189f	31 81 a0 00 00
	00		 xor	 DWORD PTR [ecx+160], eax
  018a5	31 91 a4 00 00
	00		 xor	 DWORD PTR [ecx+164], edx
  018ab	5f		 pop	 edi
  018ac	5e		 pop	 esi
  018ad	5b		 pop	 ebx

; 879  :     structpointer->hash[1] ^= state[1] ^ block[1];
; 880  :     structpointer->hash[2] ^= state[2] ^ block[2];
; 881  :     structpointer->hash[3] ^= state[3] ^ block[3];
; 882  :     structpointer->hash[4] ^= state[4] ^ block[4];
; 883  :     structpointer->hash[5] ^= state[5] ^ block[5];
; 884  :     structpointer->hash[6] ^= state[6] ^ block[6];
; 885  :     structpointer->hash[7] ^= state[7] ^ block[7];
; 886  : }

  018ae	8b e5		 mov	 esp, ebp
  018b0	5d		 pop	 ebp
  018b1	c3		 ret	 0
_processBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\whirlpool.c
;	COMDAT _WHIRLPOOL_init
_TEXT	SEGMENT
_structpointer$ = 8					; size = 4
_WHIRLPOOL_init PROC					; COMDAT

; 897  : void WHIRLPOOL_init(struct NESSIEstruct * const structpointer) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 898  :     int i;
; 899  : 
; 900  :     memset(structpointer->bitLength, 0, 32);

  00003	8b 45 08	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0000c	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 901  :     structpointer->bufferBits = structpointer->bufferPos = 0;

  00010	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], 0
  00017	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 902  :     structpointer->buffer[0] = 0; /* it's only necessary to cleanup buffer[bufferPos] */

  0001e	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0

; 903  :     for (i = 0; i < 8; i++) {
; 904  :         structpointer->hash[i] = 0L; /* initial value */

  00022	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
  00029	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0
  00030	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [eax+112], 0
  00037	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0
  0003e	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0
  00045	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0
  0004c	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  00056	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+132], 0
  00060	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0
  0006a	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0
  00074	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0
  0007e	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0
  00088	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0
  00092	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0
  0009c	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+160], 0
  000a6	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], 0

; 905  :     }
; 906  : }

  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_WHIRLPOOL_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\whirlpool.c
;	COMDAT _WHIRLPOOL_finalize
_TEXT	SEGMENT
_structpointer$ = 8					; size = 4
_result$ = 12						; size = 4
_WHIRLPOOL_finalize PROC				; COMDAT

; 1045 :                     unsigned char * const result) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1046 :     int i;
; 1047 :     u8 *buffer      = structpointer->buffer;

  00006	8b 7d 08	 mov	 edi, DWORD PTR _structpointer$[ebp]

; 1048 :     u8 *bitLength   = structpointer->bitLength;
; 1049 :     int bufferBits  = structpointer->bufferBits;
; 1050 :     int bufferPos   = structpointer->bufferPos;
; 1051 :     u8 *digest      = result;
; 1052 : 
; 1053 :     /*
; 1054 :      * append a '1'-bit:
; 1055 :      */
; 1056 :     buffer[bufferPos] |= 0x80U >> (bufferBits & 7);

  00009	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0000e	8b 5f 60	 mov	 ebx, DWORD PTR [edi+96]
  00011	8b cb		 mov	 ecx, ebx
  00013	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  00016	83 e1 07	 and	 ecx, 7
  00019	d3 e8		 shr	 eax, cl
  0001b	08 44 3a 20	 or	 BYTE PTR [edx+edi+32], al

; 1057 :     bufferPos++; /* all remaining bits on the current u8 are set to zero. */

  0001f	42		 inc	 edx

; 1058 :     /*
; 1059 :      * pad with zero bits to complete (N*WBLOCKBITS - LENGTHBITS) bits:
; 1060 :      */
; 1061 :     if (bufferPos > WBLOCKBYTES - LENGTHBYTES) {

  00020	83 fa 20	 cmp	 edx, 32			; 00000020H
  00023	7e 2a		 jle	 SHORT $LN22@WHIRLPOOL_

; 1062 :         if (bufferPos < WBLOCKBYTES) {

  00025	83 fa 40	 cmp	 edx, 64			; 00000040H
  00028	7d 18		 jge	 SHORT $LN6@WHIRLPOOL_

; 1063 :             memset(&buffer[bufferPos], 0, WBLOCKBYTES - bufferPos);

  0002a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0002f	2b c2		 sub	 eax, edx
  00031	50		 push	 eax
  00032	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00035	03 c2		 add	 eax, edx
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memset
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@WHIRLPOOL_:

; 1064 :         }
; 1065 :         /*
; 1066 :          * process data block:
; 1067 :          */
; 1068 :         processBuffer(structpointer);

  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 _processBuffer
  00048	83 c4 04	 add	 esp, 4

; 1069 :         /*
; 1070 :          * reset buffer:
; 1071 :          */
; 1072 :         bufferPos = 0;

  0004b	33 d2		 xor	 edx, edx

; 1073 :     }
; 1074 :     if (bufferPos < WBLOCKBYTES - LENGTHBYTES) {

  0004d	eb 02		 jmp	 SHORT $LN21@WHIRLPOOL_
$LN22@WHIRLPOOL_:
  0004f	7d 18		 jge	 SHORT $LN7@WHIRLPOOL_
$LN21@WHIRLPOOL_:

; 1075 :         memset(&buffer[bufferPos], 0, (WBLOCKBYTES - LENGTHBYTES) - bufferPos);

  00051	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00056	2b c2		 sub	 eax, edx
  00058	50		 push	 eax
  00059	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0005c	03 c2		 add	 eax, edx
  0005e	6a 00		 push	 0
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _memset
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@WHIRLPOOL_:

; 1076 :     }
; 1077 :     bufferPos = WBLOCKBYTES - LENGTHBYTES;
; 1078 :     /*
; 1079 :      * append bit length of hashed data:
; 1080 :      */
; 1081 :     memcpy(&buffer[WBLOCKBYTES - LENGTHBYTES], bitLength, LENGTHBYTES);

  00069	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 1082 :     /*
; 1083 :      * process data block:
; 1084 :      */
; 1085 :     processBuffer(structpointer);

  0006c	57		 push	 edi
  0006d	0f 11 47 40	 movups	 XMMWORD PTR [edi+64], xmm0
  00071	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00075	0f 11 47 50	 movups	 XMMWORD PTR [edi+80], xmm0
  00079	e8 00 00 00 00	 call	 _processBuffer

; 1086 :     /*
; 1087 :      * return the completed message digest:
; 1088 :      */
; 1089 :     for (i = 0; i < DIGESTBYTES/8; i++) {
; 1090 :         digest[0] = (u8)(structpointer->hash[i] >> 56);

  0007e	8b 75 0c	 mov	 esi, DWORD PTR _result$[ebp]
  00081	83 c4 04	 add	 esp, 4
  00084	0f b6 47 6f	 movzx	 eax, BYTE PTR [edi+111]

; 1091 :         digest[1] = (u8)(structpointer->hash[i] >> 48);
; 1092 :         digest[2] = (u8)(structpointer->hash[i] >> 40);

  00088	b1 28		 mov	 cl, 40			; 00000028H
  0008a	88 06		 mov	 BYTE PTR [esi], al
  0008c	0f b6 47 6e	 movzx	 eax, BYTE PTR [edi+110]
  00090	88 46 01	 mov	 BYTE PTR [esi+1], al
  00093	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00096	8b 57 6c	 mov	 edx, DWORD PTR [edi+108]
  00099	e8 00 00 00 00	 call	 __aullshr
  0009e	88 46 02	 mov	 BYTE PTR [esi+2], al

; 1093 :         digest[3] = (u8)(structpointer->hash[i] >> 32);

  000a1	b1 20		 mov	 cl, 32			; 00000020H
  000a3	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  000a6	8b 57 6c	 mov	 edx, DWORD PTR [edi+108]
  000a9	e8 00 00 00 00	 call	 __aullshr
  000ae	88 46 03	 mov	 BYTE PTR [esi+3], al

; 1094 :         digest[4] = (u8)(structpointer->hash[i] >> 24);

  000b1	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  000b4	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  000b7	0f ac c1 18	 shrd	 ecx, eax, 24
  000bb	88 4e 04	 mov	 BYTE PTR [esi+4], cl

; 1095 :         digest[5] = (u8)(structpointer->hash[i] >> 16);

  000be	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  000c1	c1 e8 18	 shr	 eax, 24			; 00000018H
  000c4	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  000c7	0f ac c1 10	 shrd	 ecx, eax, 16
  000cb	88 4e 05	 mov	 BYTE PTR [esi+5], cl

; 1096 :         digest[6] = (u8)(structpointer->hash[i] >>  8);

  000ce	8b 4f 68	 mov	 ecx, DWORD PTR [edi+104]
  000d1	c1 e8 10	 shr	 eax, 16			; 00000010H
  000d4	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  000d7	0f ac c1 08	 shrd	 ecx, eax, 8
  000db	88 4e 06	 mov	 BYTE PTR [esi+6], cl
  000de	b1 28		 mov	 cl, 40			; 00000028H
  000e0	c1 e8 08	 shr	 eax, 8

; 1097 :         digest[7] = (u8)(structpointer->hash[i]      );

  000e3	0f b6 47 68	 movzx	 eax, BYTE PTR [edi+104]
  000e7	88 46 07	 mov	 BYTE PTR [esi+7], al
  000ea	0f b6 47 77	 movzx	 eax, BYTE PTR [edi+119]
  000ee	88 46 08	 mov	 BYTE PTR [esi+8], al
  000f1	0f b6 47 76	 movzx	 eax, BYTE PTR [edi+118]
  000f5	88 46 09	 mov	 BYTE PTR [esi+9], al
  000f8	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  000fb	8b 57 74	 mov	 edx, DWORD PTR [edi+116]
  000fe	e8 00 00 00 00	 call	 __aullshr
  00103	88 46 0a	 mov	 BYTE PTR [esi+10], al
  00106	b1 20		 mov	 cl, 32			; 00000020H
  00108	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  0010b	8b 57 74	 mov	 edx, DWORD PTR [edi+116]
  0010e	e8 00 00 00 00	 call	 __aullshr
  00113	88 46 0b	 mov	 BYTE PTR [esi+11], al
  00116	8b 4f 70	 mov	 ecx, DWORD PTR [edi+112]
  00119	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  0011c	0f ac c1 18	 shrd	 ecx, eax, 24
  00120	88 4e 0c	 mov	 BYTE PTR [esi+12], cl
  00123	8b 4f 70	 mov	 ecx, DWORD PTR [edi+112]
  00126	c1 e8 18	 shr	 eax, 24			; 00000018H
  00129	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  0012c	0f ac c1 10	 shrd	 ecx, eax, 16
  00130	88 4e 0d	 mov	 BYTE PTR [esi+13], cl
  00133	8b 4f 70	 mov	 ecx, DWORD PTR [edi+112]
  00136	c1 e8 10	 shr	 eax, 16			; 00000010H
  00139	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  0013c	0f ac c1 08	 shrd	 ecx, eax, 8
  00140	88 4e 0e	 mov	 BYTE PTR [esi+14], cl
  00143	b1 28		 mov	 cl, 40			; 00000028H
  00145	c1 e8 08	 shr	 eax, 8
  00148	0f b6 47 70	 movzx	 eax, BYTE PTR [edi+112]
  0014c	88 46 0f	 mov	 BYTE PTR [esi+15], al
  0014f	0f b6 47 7f	 movzx	 eax, BYTE PTR [edi+127]
  00153	88 46 10	 mov	 BYTE PTR [esi+16], al
  00156	0f b6 47 7e	 movzx	 eax, BYTE PTR [edi+126]
  0015a	88 46 11	 mov	 BYTE PTR [esi+17], al
  0015d	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00160	8b 57 7c	 mov	 edx, DWORD PTR [edi+124]
  00163	e8 00 00 00 00	 call	 __aullshr
  00168	88 46 12	 mov	 BYTE PTR [esi+18], al
  0016b	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  0016e	8b 57 7c	 mov	 edx, DWORD PTR [edi+124]

; 1093 :         digest[3] = (u8)(structpointer->hash[i] >> 32);

  00171	b1 20		 mov	 cl, 32			; 00000020H
  00173	e8 00 00 00 00	 call	 __aullshr
  00178	88 46 13	 mov	 BYTE PTR [esi+19], al

; 1094 :         digest[4] = (u8)(structpointer->hash[i] >> 24);

  0017b	8b 4f 78	 mov	 ecx, DWORD PTR [edi+120]
  0017e	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  00181	0f ac c1 18	 shrd	 ecx, eax, 24
  00185	88 4e 14	 mov	 BYTE PTR [esi+20], cl

; 1095 :         digest[5] = (u8)(structpointer->hash[i] >> 16);

  00188	8b 4f 78	 mov	 ecx, DWORD PTR [edi+120]
  0018b	c1 e8 18	 shr	 eax, 24			; 00000018H
  0018e	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  00191	0f ac c1 10	 shrd	 ecx, eax, 16
  00195	88 4e 15	 mov	 BYTE PTR [esi+21], cl

; 1096 :         digest[6] = (u8)(structpointer->hash[i] >>  8);

  00198	8b 4f 78	 mov	 ecx, DWORD PTR [edi+120]
  0019b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0019e	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  001a1	0f ac c1 08	 shrd	 ecx, eax, 8
  001a5	88 4e 16	 mov	 BYTE PTR [esi+22], cl
  001a8	b1 28		 mov	 cl, 40			; 00000028H
  001aa	c1 e8 08	 shr	 eax, 8

; 1097 :         digest[7] = (u8)(structpointer->hash[i]      );

  001ad	0f b6 47 78	 movzx	 eax, BYTE PTR [edi+120]
  001b1	88 46 17	 mov	 BYTE PTR [esi+23], al
  001b4	0f b6 87 87 00
	00 00		 movzx	 eax, BYTE PTR [edi+135]
  001bb	88 46 18	 mov	 BYTE PTR [esi+24], al
  001be	0f b6 87 86 00
	00 00		 movzx	 eax, BYTE PTR [edi+134]
  001c5	88 46 19	 mov	 BYTE PTR [esi+25], al
  001c8	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  001ce	8b 97 84 00 00
	00		 mov	 edx, DWORD PTR [edi+132]
  001d4	e8 00 00 00 00	 call	 __aullshr
  001d9	88 46 1a	 mov	 BYTE PTR [esi+26], al
  001dc	b1 20		 mov	 cl, 32			; 00000020H
  001de	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  001e4	8b 97 84 00 00
	00		 mov	 edx, DWORD PTR [edi+132]
  001ea	e8 00 00 00 00	 call	 __aullshr
  001ef	88 46 1b	 mov	 BYTE PTR [esi+27], al
  001f2	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  001f8	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  001fe	0f ac c1 18	 shrd	 ecx, eax, 24
  00202	88 4e 1c	 mov	 BYTE PTR [esi+28], cl
  00205	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  0020b	c1 e8 18	 shr	 eax, 24			; 00000018H
  0020e	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00214	0f ac c1 10	 shrd	 ecx, eax, 16
  00218	88 4e 1d	 mov	 BYTE PTR [esi+29], cl
  0021b	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  00221	c1 e8 10	 shr	 eax, 16			; 00000010H
  00224	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  0022a	0f ac c1 08	 shrd	 ecx, eax, 8
  0022e	88 4e 1e	 mov	 BYTE PTR [esi+30], cl
  00231	b1 28		 mov	 cl, 40			; 00000028H
  00233	c1 e8 08	 shr	 eax, 8
  00236	0f b6 87 80 00
	00 00		 movzx	 eax, BYTE PTR [edi+128]
  0023d	88 46 1f	 mov	 BYTE PTR [esi+31], al
  00240	0f b6 87 8f 00
	00 00		 movzx	 eax, BYTE PTR [edi+143]
  00247	88 46 20	 mov	 BYTE PTR [esi+32], al
  0024a	0f b6 87 8e 00
	00 00		 movzx	 eax, BYTE PTR [edi+142]
  00251	88 46 21	 mov	 BYTE PTR [esi+33], al
  00254	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  0025a	8b 97 8c 00 00
	00		 mov	 edx, DWORD PTR [edi+140]
  00260	e8 00 00 00 00	 call	 __aullshr
  00265	88 46 22	 mov	 BYTE PTR [esi+34], al
  00268	b1 20		 mov	 cl, 32			; 00000020H
  0026a	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00270	8b 97 8c 00 00
	00		 mov	 edx, DWORD PTR [edi+140]
  00276	e8 00 00 00 00	 call	 __aullshr
  0027b	88 46 23	 mov	 BYTE PTR [esi+35], al
  0027e	8b 8f 88 00 00
	00		 mov	 ecx, DWORD PTR [edi+136]
  00284	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  0028a	0f ac c1 18	 shrd	 ecx, eax, 24
  0028e	c1 e8 18	 shr	 eax, 24			; 00000018H
  00291	88 4e 24	 mov	 BYTE PTR [esi+36], cl
  00294	8b 8f 88 00 00
	00		 mov	 ecx, DWORD PTR [edi+136]
  0029a	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  002a0	0f ac c1 10	 shrd	 ecx, eax, 16
  002a4	c1 e8 10	 shr	 eax, 16			; 00000010H
  002a7	88 4e 25	 mov	 BYTE PTR [esi+37], cl
  002aa	8b 8f 88 00 00
	00		 mov	 ecx, DWORD PTR [edi+136]
  002b0	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  002b6	0f ac c1 08	 shrd	 ecx, eax, 8
  002ba	c1 e8 08	 shr	 eax, 8
  002bd	88 4e 26	 mov	 BYTE PTR [esi+38], cl
  002c0	0f b6 87 88 00
	00 00		 movzx	 eax, BYTE PTR [edi+136]
  002c7	88 46 27	 mov	 BYTE PTR [esi+39], al
  002ca	b1 28		 mov	 cl, 40			; 00000028H
  002cc	0f b6 87 97 00
	00 00		 movzx	 eax, BYTE PTR [edi+151]
  002d3	88 46 28	 mov	 BYTE PTR [esi+40], al
  002d6	0f b6 87 96 00
	00 00		 movzx	 eax, BYTE PTR [edi+150]
  002dd	88 46 29	 mov	 BYTE PTR [esi+41], al
  002e0	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  002e6	8b 97 94 00 00
	00		 mov	 edx, DWORD PTR [edi+148]
  002ec	e8 00 00 00 00	 call	 __aullshr
  002f1	88 46 2a	 mov	 BYTE PTR [esi+42], al
  002f4	b1 20		 mov	 cl, 32			; 00000020H
  002f6	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  002fc	8b 97 94 00 00
	00		 mov	 edx, DWORD PTR [edi+148]
  00302	e8 00 00 00 00	 call	 __aullshr
  00307	88 46 2b	 mov	 BYTE PTR [esi+43], al
  0030a	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [edi+144]
  00310	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00316	0f ac c1 18	 shrd	 ecx, eax, 24
  0031a	88 4e 2c	 mov	 BYTE PTR [esi+44], cl
  0031d	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [edi+144]
  00323	c1 e8 18	 shr	 eax, 24			; 00000018H
  00326	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0032c	0f ac c1 10	 shrd	 ecx, eax, 16
  00330	88 4e 2d	 mov	 BYTE PTR [esi+45], cl
  00333	8b 8f 90 00 00
	00		 mov	 ecx, DWORD PTR [edi+144]
  00339	c1 e8 10	 shr	 eax, 16			; 00000010H
  0033c	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00342	0f ac c1 08	 shrd	 ecx, eax, 8
  00346	88 4e 2e	 mov	 BYTE PTR [esi+46], cl
  00349	b1 28		 mov	 cl, 40			; 00000028H
  0034b	c1 e8 08	 shr	 eax, 8
  0034e	0f b6 87 90 00
	00 00		 movzx	 eax, BYTE PTR [edi+144]
  00355	88 46 2f	 mov	 BYTE PTR [esi+47], al
  00358	0f b6 87 9f 00
	00 00		 movzx	 eax, BYTE PTR [edi+159]
  0035f	88 46 30	 mov	 BYTE PTR [esi+48], al
  00362	0f b6 87 9e 00
	00 00		 movzx	 eax, BYTE PTR [edi+158]
  00369	88 46 31	 mov	 BYTE PTR [esi+49], al
  0036c	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  00372	8b 97 9c 00 00
	00		 mov	 edx, DWORD PTR [edi+156]
  00378	e8 00 00 00 00	 call	 __aullshr
  0037d	88 46 32	 mov	 BYTE PTR [esi+50], al
  00380	b1 20		 mov	 cl, 32			; 00000020H
  00382	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  00388	8b 97 9c 00 00
	00		 mov	 edx, DWORD PTR [edi+156]
  0038e	e8 00 00 00 00	 call	 __aullshr
  00393	88 46 33	 mov	 BYTE PTR [esi+51], al
  00396	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  0039c	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  003a2	0f ac c1 18	 shrd	 ecx, eax, 24
  003a6	88 4e 34	 mov	 BYTE PTR [esi+52], cl
  003a9	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  003af	c1 e8 18	 shr	 eax, 24			; 00000018H
  003b2	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  003b8	0f ac c1 10	 shrd	 ecx, eax, 16
  003bc	88 4e 35	 mov	 BYTE PTR [esi+53], cl
  003bf	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  003c5	c1 e8 10	 shr	 eax, 16			; 00000010H
  003c8	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  003ce	0f ac c1 08	 shrd	 ecx, eax, 8
  003d2	88 4e 36	 mov	 BYTE PTR [esi+54], cl
  003d5	b1 28		 mov	 cl, 40			; 00000028H
  003d7	c1 e8 08	 shr	 eax, 8
  003da	0f b6 87 98 00
	00 00		 movzx	 eax, BYTE PTR [edi+152]
  003e1	88 46 37	 mov	 BYTE PTR [esi+55], al
  003e4	0f b6 87 a7 00
	00 00		 movzx	 eax, BYTE PTR [edi+167]
  003eb	88 46 38	 mov	 BYTE PTR [esi+56], al
  003ee	0f b6 87 a6 00
	00 00		 movzx	 eax, BYTE PTR [edi+166]
  003f5	88 46 39	 mov	 BYTE PTR [esi+57], al
  003f8	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  003fe	8b 97 a4 00 00
	00		 mov	 edx, DWORD PTR [edi+164]
  00404	e8 00 00 00 00	 call	 __aullshr
  00409	88 46 3a	 mov	 BYTE PTR [esi+58], al
  0040c	b1 20		 mov	 cl, 32			; 00000020H
  0040e	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  00414	8b 97 a4 00 00
	00		 mov	 edx, DWORD PTR [edi+164]
  0041a	e8 00 00 00 00	 call	 __aullshr
  0041f	88 46 3b	 mov	 BYTE PTR [esi+59], al
  00422	8b 8f a0 00 00
	00		 mov	 ecx, DWORD PTR [edi+160]
  00428	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  0042e	0f ac c1 18	 shrd	 ecx, eax, 24
  00432	c1 e8 18	 shr	 eax, 24			; 00000018H

; 1095 :         digest[5] = (u8)(structpointer->hash[i] >> 16);

  00435	88 4e 3c	 mov	 BYTE PTR [esi+60], cl
  00438	8b 8f a0 00 00
	00		 mov	 ecx, DWORD PTR [edi+160]
  0043e	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  00444	0f ac c1 10	 shrd	 ecx, eax, 16
  00448	88 4e 3d	 mov	 BYTE PTR [esi+61], cl

; 1096 :         digest[6] = (u8)(structpointer->hash[i] >>  8);

  0044b	8b 8f a0 00 00
	00		 mov	 ecx, DWORD PTR [edi+160]
  00451	c1 e8 10	 shr	 eax, 16			; 00000010H
  00454	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]
  0045a	0f ac c1 08	 shrd	 ecx, eax, 8
  0045e	88 4e 3e	 mov	 BYTE PTR [esi+62], cl
  00461	c1 e8 08	 shr	 eax, 8

; 1097 :         digest[7] = (u8)(structpointer->hash[i]      );

  00464	0f b6 87 a0 00
	00 00		 movzx	 eax, BYTE PTR [edi+160]
  0046b	88 46 3f	 mov	 BYTE PTR [esi+63], al

; 1098 :         digest += 8;
; 1099 :     }
; 1100 :     structpointer->bufferBits   = bufferBits;

  0046e	89 5f 60	 mov	 DWORD PTR [edi+96], ebx

; 1101 :     structpointer->bufferPos    = bufferPos;

  00471	c7 47 64 20 00
	00 00		 mov	 DWORD PTR [edi+100], 32	; 00000020H
  00478	5f		 pop	 edi
  00479	5e		 pop	 esi
  0047a	5b		 pop	 ebx

; 1102 : }

  0047b	5d		 pop	 ebp
  0047c	c3		 ret	 0
_WHIRLPOOL_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\whirlpool.c
;	COMDAT _WHIRLPOOL_add
_TEXT	SEGMENT
tv428 = -28						; size = 4
_bufferBits$1$ = -28					; size = 4
_sourcePos$1$ = -24					; size = 4
_carry$1$ = -20						; size = 4
tv427 = -20						; size = 4
_sourceGap$1$ = -16					; size = 4
_i$1$ = -12						; size = 4
_buffer$1$ = -8						; size = 4
_bufferRem$1$ = -4					; size = 4
_source$ = 8						; size = 4
tv432 = 12						; size = 4
tv424 = 12						; size = 4
_sourceBits$ = 12					; size = 4
_structpointer$ = 16					; size = 4
_WHIRLPOOL_add PROC					; COMDAT

; 923  :                struct NESSIEstruct * const structpointer) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 924  :     /*
; 925  :                        sourcePos
; 926  :                        |
; 927  :                        +-------+-------+-------
; 928  :                           ||||||||||||||||||||| source
; 929  :                        +-------+-------+-------
; 930  :     +-------+-------+-------+-------+-------+-------
; 931  :     ||||||||||||||||||||||                           buffer
; 932  :     +-------+-------+-------+-------+-------+-------
; 933  :                     |
; 934  :                     bufferPos
; 935  :     */
; 936  :     int sourcePos    = 0; /* index of leftmost source u8 containing data (1 to 8 bits). */
; 937  :     int sourceGap    = (8 - ((int)sourceBits & 7)) & 7; /* space on source[sourcePos]. */

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _sourceBits$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	f7 d8		 neg	 eax
  0000e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sourcePos$1$[ebp], 0
  00015	83 e0 07	 and	 eax, 7

; 938  :     int bufferRem    = structpointer->bufferBits & 7; /* occupied bits on buffer[bufferPos]. */
; 939  :     int i;
; 940  :     u32 b, carry;
; 941  :     u8 *buffer       = structpointer->buffer;
; 942  :     u8 *bitLength    = structpointer->bitLength;
; 943  :     int bufferBits   = structpointer->bufferBits;
; 944  :     int bufferPos    = structpointer->bufferPos;
; 945  : 
; 946  :     /*
; 947  :      * tally the length of the added data:
; 948  :      */
; 949  :     u64 value = sourceBits;
; 950  :     for (i = 31, carry = 0; i >= 0 && (carry != 0 || value != LL(0)); i--) {

  00018	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 31 ; 0000001fH
  0001f	89 45 f0	 mov	 DWORD PTR _sourceGap$1$[ebp], eax
  00022	8b 45 10	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	33 ff		 xor	 edi, edi
  00029	8b 50 60	 mov	 edx, DWORD PTR [eax+96]
  0002c	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  0002f	8b 70 64	 mov	 esi, DWORD PTR [eax+100]
  00032	89 55 e4	 mov	 DWORD PTR _bufferBits$1$[ebp], edx
  00035	83 e2 07	 and	 edx, 7
  00038	33 c0		 xor	 eax, eax
  0003a	89 55 fc	 mov	 DWORD PTR _bufferRem$1$[ebp], edx
  0003d	8b 55 10	 mov	 edx, DWORD PTR _structpointer$[ebp]
  00040	89 4d f8	 mov	 DWORD PTR _buffer$1$[ebp], ecx
  00043	89 45 ec	 mov	 DWORD PTR _carry$1$[ebp], eax
$LL4@WHIRLPOOL_:
  00046	85 c0		 test	 eax, eax
  00048	75 06		 jne	 SHORT $LN7@WHIRLPOOL_
  0004a	8b c3		 mov	 eax, ebx
  0004c	0b c7		 or	 eax, edi
  0004e	74 2a		 je	 SHORT $LN16@WHIRLPOOL_
$LN7@WHIRLPOOL_:

; 951  :         carry += bitLength[i] + ((u32)value & 0xff);

  00050	8b 45 f4	 mov	 eax, DWORD PTR _i$1$[ebp]
  00053	0f b6 cb	 movzx	 ecx, bl

; 952  :         bitLength[i] = (u8)carry;
; 953  :         carry >>= 8;
; 954  :         value >>= 8;

  00056	0f ac fb 08	 shrd	 ebx, edi, 8
  0005a	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  0005e	03 45 ec	 add	 eax, DWORD PTR _carry$1$[ebp]
  00061	03 c1		 add	 eax, ecx
  00063	c1 ef 08	 shr	 edi, 8
  00066	8b 4d f4	 mov	 ecx, DWORD PTR _i$1$[ebp]
  00069	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0006c	c1 e8 08	 shr	 eax, 8
  0006f	83 e9 01	 sub	 ecx, 1
  00072	89 45 ec	 mov	 DWORD PTR _carry$1$[ebp], eax
  00075	89 4d f4	 mov	 DWORD PTR _i$1$[ebp], ecx
  00078	79 cc		 jns	 SHORT $LL4@WHIRLPOOL_
$LN16@WHIRLPOOL_:

; 955  :     }
; 956  :     /*
; 957  :      * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
; 958  :      */
; 959  :     while (sourceBits > 8) {

  0007a	8b 7d 0c	 mov	 edi, DWORD PTR _sourceBits$[ebp]
  0007d	8b 55 e4	 mov	 edx, DWORD PTR _bufferBits$1$[ebp]
  00080	83 ff 08	 cmp	 edi, 8
  00083	0f 86 96 00 00
	00		 jbe	 $LN23@WHIRLPOOL_

; 960  :         /* N.B. at least source[sourcePos] and source[sourcePos+1] contain data. */
; 961  :         /*
; 962  :          * take a byte from the source:
; 963  :          */
; 964  :         b = ((source[sourcePos] << sourceGap) & 0xff) |

  00089	b0 08		 mov	 al, 8
  0008b	2a 45 f0	 sub	 al, BYTE PTR _sourceGap$1$[ebp]
  0008e	0f b6 c0	 movzx	 eax, al
  00091	89 45 e4	 mov	 DWORD PTR tv428[ebp], eax

; 980  :         }
; 981  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  00094	b8 08 00 00 00	 mov	 eax, 8
  00099	2b 45 fc	 sub	 eax, DWORD PTR _bufferRem$1$[ebp]
  0009c	89 45 ec	 mov	 DWORD PTR tv427[ebp], eax
  0009f	8d 47 f7	 lea	 eax, DWORD PTR [edi-9]
  000a2	c1 e8 03	 shr	 eax, 3
  000a5	40		 inc	 eax
  000a6	89 45 0c	 mov	 DWORD PTR tv432[ebp], eax
  000a9	33 c0		 xor	 eax, eax
  000ab	0f 1f 44 00 00	 npad	 5
$LL5@WHIRLPOOL_:

; 960  :         /* N.B. at least source[sourcePos] and source[sourcePos+1] contain data. */
; 961  :         /*
; 962  :          * take a byte from the source:
; 963  :          */
; 964  :         b = ((source[sourcePos] << sourceGap) & 0xff) |

  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000b3	0f b6 5c 08 01	 movzx	 ebx, BYTE PTR [eax+ecx+1]
  000b8	8a 4d e4	 mov	 cl, BYTE PTR tv428[ebp]
  000bb	d3 eb		 shr	 ebx, cl
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000c0	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _sourceGap$1$[ebp]
  000c7	d3 e0		 shl	 eax, cl

; 965  :             ((source[sourcePos + 1] & 0xff) >> (8 - sourceGap));
; 966  :         /*
; 967  :          * process this byte:
; 968  :          */
; 969  :         buffer[bufferPos++] |= (u8)(b >> bufferRem);

  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _bufferRem$1$[ebp]
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	0b d8		 or	 ebx, eax
  000d1	8b c3		 mov	 eax, ebx
  000d3	d3 e8		 shr	 eax, cl
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _buffer$1$[ebp]
  000d8	08 04 0e	 or	 BYTE PTR [esi+ecx], al

; 970  :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  000db	b8 08 00 00 00	 mov	 eax, 8
  000e0	2b 45 fc	 sub	 eax, DWORD PTR _bufferRem$1$[ebp]
  000e3	46		 inc	 esi
  000e4	03 d0		 add	 edx, eax

; 971  :         if (bufferBits == DIGESTBITS) {

  000e6	81 fa 00 02 00
	00		 cmp	 edx, 512		; 00000200H
  000ec	75 0f		 jne	 SHORT $LN8@WHIRLPOOL_

; 972  :             /*
; 973  :              * process data block:
; 974  :              */
; 975  :             processBuffer(structpointer);

  000ee	ff 75 10	 push	 DWORD PTR _structpointer$[ebp]
  000f1	e8 00 00 00 00	 call	 _processBuffer
  000f6	83 c4 04	 add	 esp, 4

; 976  :             /*
; 977  :              * reset buffer:
; 978  :              */
; 979  :             bufferBits = bufferPos = 0;

  000f9	33 f6		 xor	 esi, esi
  000fb	33 d2		 xor	 edx, edx
$LN8@WHIRLPOOL_:

; 980  :         }
; 981  :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _buffer$1$[ebp]

; 982  :         bufferBits += bufferRem;
; 983  :         /*
; 984  :          * proceed to remaining data:
; 985  :          */
; 986  :         sourceBits -= 8;

  00100	83 ef 08	 sub	 edi, 8
  00103	8b 4d ec	 mov	 ecx, DWORD PTR tv427[ebp]
  00106	d2 e3		 shl	 bl, cl
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _bufferRem$1$[ebp]
  0010b	03 d1		 add	 edx, ecx
  0010d	88 1c 06	 mov	 BYTE PTR [esi+eax], bl

; 987  :         sourcePos++;

  00110	8b 45 e8	 mov	 eax, DWORD PTR _sourcePos$1$[ebp]
  00113	40		 inc	 eax
  00114	83 6d 0c 01	 sub	 DWORD PTR tv432[ebp], 1
  00118	89 45 e8	 mov	 DWORD PTR _sourcePos$1$[ebp], eax
  0011b	75 93		 jne	 SHORT $LL5@WHIRLPOOL_
  0011d	eb 05		 jmp	 SHORT $LN6@WHIRLPOOL_
$LN23@WHIRLPOOL_:
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR _bufferRem$1$[ebp]
  00122	33 c0		 xor	 eax, eax
$LN6@WHIRLPOOL_:

; 988  :     }
; 989  :     /* now 0 <= sourceBits <= 8;
; 990  :      * furthermore, all data (if any is left) is in source[sourcePos].
; 991  :      */
; 992  :     if (sourceBits > 0) {

  00124	85 ff		 test	 edi, edi
  00126	74 21		 je	 SHORT $LN9@WHIRLPOOL_

; 993  :         b = (source[sourcePos] << sourceGap) & 0xff; /* bits are left-justified on b. */

  00128	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0012b	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0012f	8b 4d f0	 mov	 ecx, DWORD PTR _sourceGap$1$[ebp]
  00132	d3 e0		 shl	 eax, cl

; 994  :         /*
; 995  :          * process the remaining bits:
; 996  :          */
; 997  :         buffer[bufferPos] |= b >> bufferRem;

  00134	8b 4d fc	 mov	 ecx, DWORD PTR _bufferRem$1$[ebp]
  00137	0f b6 d8	 movzx	 ebx, al
  0013a	8b c3		 mov	 eax, ebx
  0013c	d3 e8		 shr	 eax, cl
  0013e	8b 4d f8	 mov	 ecx, DWORD PTR _buffer$1$[ebp]
  00141	08 04 0e	 or	 BYTE PTR [esi+ecx], al

; 998  :     } else {

  00144	8b 4d fc	 mov	 ecx, DWORD PTR _bufferRem$1$[ebp]
  00147	eb 02		 jmp	 SHORT $LN10@WHIRLPOOL_
$LN9@WHIRLPOOL_:

; 999  :         b = 0;

  00149	33 db		 xor	 ebx, ebx
$LN10@WHIRLPOOL_:

; 1000 :     }
; 1001 :     if (bufferRem + sourceBits < 8) {

  0014b	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  0014e	89 45 0c	 mov	 DWORD PTR tv424[ebp], eax
  00151	83 f8 08	 cmp	 eax, 8
  00154	73 12		 jae	 SHORT $LN11@WHIRLPOOL_

; 1028 :         bufferBits += (int)sourceBits;
; 1029 :     }
; 1030 :     structpointer->bufferBits   = bufferBits;

  00156	8b 45 10	 mov	 eax, DWORD PTR _structpointer$[ebp]
  00159	03 d7		 add	 edx, edi
  0015b	5f		 pop	 edi

; 1031 :     structpointer->bufferPos    = bufferPos;

  0015c	89 70 64	 mov	 DWORD PTR [eax+100], esi
  0015f	5e		 pop	 esi
  00160	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00163	5b		 pop	 ebx

; 1032 : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c3		 ret	 0
$LN11@WHIRLPOOL_:

; 1002 :         /*
; 1003 :          * all remaining data fits on buffer[bufferPos],
; 1004 :          * and there still remains some space.
; 1005 :          */
; 1006 :         bufferBits += sourceBits;
; 1007 :     } else {
; 1008 :         /*
; 1009 :          * buffer[bufferPos] is full:
; 1010 :          */
; 1011 :         bufferPos++;
; 1012 :         bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */

  00168	bf 08 00 00 00	 mov	 edi, 8
  0016d	46		 inc	 esi
  0016e	8b c7		 mov	 eax, edi
  00170	2b c1		 sub	 eax, ecx
  00172	03 d0		 add	 edx, eax

; 1013 :         sourceBits -= 8 - bufferRem;
; 1014 :         /* now 0 <= sourceBits < 8;
; 1015 :          * furthermore, all data (if any is left) is in source[sourcePos].
; 1016 :          */
; 1017 :         if (bufferBits == DIGESTBITS) {

  00174	81 fa 00 02 00
	00		 cmp	 edx, 512		; 00000200H
  0017a	75 12		 jne	 SHORT $LN13@WHIRLPOOL_

; 1018 :             /*
; 1019 :              * process data block:
; 1020 :              */
; 1021 :             processBuffer(structpointer);

  0017c	ff 75 10	 push	 DWORD PTR _structpointer$[ebp]
  0017f	e8 00 00 00 00	 call	 _processBuffer
  00184	8b 4d fc	 mov	 ecx, DWORD PTR _bufferRem$1$[ebp]
  00187	83 c4 04	 add	 esp, 4

; 1022 :             /*
; 1023 :              * reset buffer:
; 1024 :              */
; 1025 :             bufferBits = bufferPos = 0;

  0018a	33 f6		 xor	 esi, esi
  0018c	33 d2		 xor	 edx, edx
$LN13@WHIRLPOOL_:

; 1026 :         }
; 1027 :         buffer[bufferPos] = (u8) (b << (8 - bufferRem));

  0018e	8b 45 f8	 mov	 eax, DWORD PTR _buffer$1$[ebp]
  00191	2b f9		 sub	 edi, ecx
  00193	8b cf		 mov	 ecx, edi
  00195	d2 e3		 shl	 bl, cl

; 1028 :         bufferBits += (int)sourceBits;
; 1029 :     }
; 1030 :     structpointer->bufferBits   = bufferBits;

  00197	8b 4d 10	 mov	 ecx, DWORD PTR _structpointer$[ebp]
  0019a	88 1c 06	 mov	 BYTE PTR [esi+eax], bl
  0019d	8b 45 0c	 mov	 eax, DWORD PTR tv424[ebp]
  001a0	5f		 pop	 edi
  001a1	83 c0 f8	 add	 eax, -8			; fffffff8H

; 1031 :     structpointer->bufferPos    = bufferPos;

  001a4	89 71 64	 mov	 DWORD PTR [ecx+100], esi
  001a7	03 c2		 add	 eax, edx
  001a9	5e		 pop	 esi
  001aa	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  001ad	5b		 pop	 ebx

; 1032 : }

  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c3		 ret	 0
_WHIRLPOOL_add ENDP
_TEXT	ENDS
END
