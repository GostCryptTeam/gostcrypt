; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\Alexis\Documents\FinalGostCrypt\Sources_GostCrypt_Windows_1.3.1\Crypto\GrasshopperCipher.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_pi
PUBLIC	_pi_inv
PUBLIC	_mult_mod_poly
_DATA	SEGMENT
_pi	DB	0fcH
	DB	0eeH
	DB	0ddH
	DB	011H
	DB	0cfH
	DB	06eH
	DB	031H
	DB	016H
	DB	0fbH
	DB	0c4H
	DB	0faH
	DB	0daH
	DB	023H
	DB	0c5H
	DB	04H
	DB	04dH
	DB	0e9H
	DB	077H
	DB	0f0H
	DB	0dbH
	DB	093H
	DB	02eH
	DB	099H
	DB	0baH
	DB	017H
	DB	036H
	DB	0f1H
	DB	0bbH
	DB	014H
	DB	0cdH
	DB	05fH
	DB	0c1H
	DB	0f9H
	DB	018H
	DB	065H
	DB	05aH
	DB	0e2H
	DB	05cH
	DB	0efH
	DB	021H
	DB	081H
	DB	01cH
	DB	03cH
	DB	042H
	DB	08bH
	DB	01H
	DB	08eH
	DB	04fH
	DB	05H
	DB	084H
	DB	02H
	DB	0aeH
	DB	0e3H
	DB	06aH
	DB	08fH
	DB	0a0H
	DB	06H
	DB	0bH
	DB	0edH
	DB	098H
	DB	07fH
	DB	0d4H
	DB	0d3H
	DB	01fH
	DB	0ebH
	DB	034H
	DB	02cH
	DB	051H
	DB	0eaH
	DB	0c8H
	DB	048H
	DB	0abH
	DB	0f2H
	DB	02aH
	DB	068H
	DB	0a2H
	DB	0fdH
	DB	03aH
	DB	0ceH
	DB	0ccH
	DB	0b5H
	DB	070H
	DB	0eH
	DB	056H
	DB	08H
	DB	0cH
	DB	076H
	DB	012H
	DB	0bfH
	DB	072H
	DB	013H
	DB	047H
	DB	09cH
	DB	0b7H
	DB	05dH
	DB	087H
	DB	015H
	DB	0a1H
	DB	096H
	DB	029H
	DB	010H
	DB	07bH
	DB	09aH
	DB	0c7H
	DB	0f3H
	DB	091H
	DB	078H
	DB	06fH
	DB	09dH
	DB	09eH
	DB	0b2H
	DB	0b1H
	DB	032H
	DB	075H
	DB	019H
	DB	03dH
	DB	0ffH
	DB	035H
	DB	08aH
	DB	07eH
	DB	06dH
	DB	054H
	DB	0c6H
	DB	080H
	DB	0c3H
	DB	0bdH
	DB	0dH
	DB	057H
	DB	0dfH
	DB	0f5H
	DB	024H
	DB	0a9H
	DB	03eH
	DB	0a8H
	DB	043H
	DB	0c9H
	DB	0d7H
	DB	079H
	DB	0d6H
	DB	0f6H
	DB	07cH
	DB	022H
	DB	0b9H
	DB	03H
	DB	0e0H
	DB	0fH
	DB	0ecH
	DB	0deH
	DB	07aH
	DB	094H
	DB	0b0H
	DB	0bcH
	DB	0dcH
	DB	0e8H
	DB	028H
	DB	050H
	DB	04eH
	DB	033H
	DB	0aH
	DB	04aH
	DB	0a7H
	DB	097H
	DB	060H
	DB	073H
	DB	01eH
	DB	00H
	DB	062H
	DB	044H
	DB	01aH
	DB	0b8H
	DB	038H
	DB	082H
	DB	064H
	DB	09fH
	DB	026H
	DB	041H
	DB	0adH
	DB	045H
	DB	046H
	DB	092H
	DB	027H
	DB	05eH
	DB	055H
	DB	02fH
	DB	08cH
	DB	0a3H
	DB	0a5H
	DB	07dH
	DB	069H
	DB	0d5H
	DB	095H
	DB	03bH
	DB	07H
	DB	058H
	DB	0b3H
	DB	040H
	DB	086H
	DB	0acH
	DB	01dH
	DB	0f7H
	DB	030H
	DB	037H
	DB	06bH
	DB	0e4H
	DB	088H
	DB	0d9H
	DB	0e7H
	DB	089H
	DB	0e1H
	DB	01bH
	DB	083H
	DB	049H
	DB	04cH
	DB	03fH
	DB	0f8H
	DB	0feH
	DB	08dH
	DB	053H
	DB	0aaH
	DB	090H
	DB	0caH
	DB	0d8H
	DB	085H
	DB	061H
	DB	020H
	DB	071H
	DB	067H
	DB	0a4H
	DB	02dH
	DB	02bH
	DB	09H
	DB	05bH
	DB	0cbH
	DB	09bH
	DB	025H
	DB	0d0H
	DB	0beH
	DB	0e5H
	DB	06cH
	DB	052H
	DB	059H
	DB	0a6H
	DB	074H
	DB	0d2H
	DB	0e6H
	DB	0f4H
	DB	0b4H
	DB	0c0H
	DB	0d1H
	DB	066H
	DB	0afH
	DB	0c2H
	DB	039H
	DB	04bH
	DB	063H
	DB	0b6H
_pi_inv	DB	0a5H
	DB	02dH
	DB	032H
	DB	08fH
	DB	0eH
	DB	030H
	DB	038H
	DB	0c0H
	DB	054H
	DB	0e6H
	DB	09eH
	DB	039H
	DB	055H
	DB	07eH
	DB	052H
	DB	091H
	DB	064H
	DB	03H
	DB	057H
	DB	05aH
	DB	01cH
	DB	060H
	DB	07H
	DB	018H
	DB	021H
	DB	072H
	DB	0a8H
	DB	0d1H
	DB	029H
	DB	0c6H
	DB	0a4H
	DB	03fH
	DB	0e0H
	DB	027H
	DB	08dH
	DB	0cH
	DB	082H
	DB	0eaH
	DB	0aeH
	DB	0b4H
	DB	09aH
	DB	063H
	DB	049H
	DB	0e5H
	DB	042H
	DB	0e4H
	DB	015H
	DB	0b7H
	DB	0c8H
	DB	06H
	DB	070H
	DB	09dH
	DB	041H
	DB	075H
	DB	019H
	DB	0c9H
	DB	0aaH
	DB	0fcH
	DB	04dH
	DB	0bfH
	DB	02aH
	DB	073H
	DB	084H
	DB	0d5H
	DB	0c3H
	DB	0afH
	DB	02bH
	DB	086H
	DB	0a7H
	DB	0b1H
	DB	0b2H
	DB	05bH
	DB	046H
	DB	0d3H
	DB	09fH
	DB	0fdH
	DB	0d4H
	DB	0fH
	DB	09cH
	DB	02fH
	DB	09bH
	DB	043H
	DB	0efH
	DB	0d9H
	DB	079H
	DB	0b6H
	DB	053H
	DB	07fH
	DB	0c1H
	DB	0f0H
	DB	023H
	DB	0e7H
	DB	025H
	DB	05eH
	DB	0b5H
	DB	01eH
	DB	0a2H
	DB	0dfH
	DB	0a6H
	DB	0feH
	DB	0acH
	DB	022H
	DB	0f9H
	DB	0e2H
	DB	04aH
	DB	0bcH
	DB	035H
	DB	0caH
	DB	0eeH
	DB	078H
	DB	05H
	DB	06bH
	DB	051H
	DB	0e1H
	DB	059H
	DB	0a3H
	DB	0f2H
	DB	071H
	DB	056H
	DB	011H
	DB	06aH
	DB	089H
	DB	094H
	DB	065H
	DB	08cH
	DB	0bbH
	DB	077H
	DB	03cH
	DB	07bH
	DB	028H
	DB	0abH
	DB	0d2H
	DB	031H
	DB	0deH
	DB	0c4H
	DB	05fH
	DB	0ccH
	DB	0cfH
	DB	076H
	DB	02cH
	DB	0b8H
	DB	0d8H
	DB	02eH
	DB	036H
	DB	0dbH
	DB	069H
	DB	0b3H
	DB	014H
	DB	095H
	DB	0beH
	DB	062H
	DB	0a1H
	DB	03bH
	DB	016H
	DB	066H
	DB	0e9H
	DB	05cH
	DB	06cH
	DB	06dH
	DB	0adH
	DB	037H
	DB	061H
	DB	04bH
	DB	0b9H
	DB	0e3H
	DB	0baH
	DB	0f1H
	DB	0a0H
	DB	085H
	DB	083H
	DB	0daH
	DB	047H
	DB	0c5H
	DB	0b0H
	DB	033H
	DB	0faH
	DB	096H
	DB	06fH
	DB	06eH
	DB	0c2H
	DB	0f6H
	DB	050H
	DB	0ffH
	DB	05dH
	DB	0a9H
	DB	08eH
	DB	017H
	DB	01bH
	DB	097H
	DB	07dH
	DB	0ecH
	DB	058H
	DB	0f7H
	DB	01fH
	DB	0fbH
	DB	07cH
	DB	09H
	DB	0dH
	DB	07aH
	DB	067H
	DB	045H
	DB	087H
	DB	0dcH
	DB	0e8H
	DB	04fH
	DB	01dH
	DB	04eH
	DB	04H
	DB	0ebH
	DB	0f8H
	DB	0f3H
	DB	03eH
	DB	03dH
	DB	0bdH
	DB	08aH
	DB	088H
	DB	0ddH
	DB	0cdH
	DB	0bH
	DB	013H
	DB	098H
	DB	02H
	DB	093H
	DB	080H
	DB	090H
	DB	0d0H
	DB	024H
	DB	034H
	DB	0cbH
	DB	0edH
	DB	0f4H
	DB	0ceH
	DB	099H
	DB	010H
	DB	044H
	DB	040H
	DB	092H
	DB	03aH
	DB	01H
	DB	026H
	DB	012H
	DB	01aH
	DB	048H
	DB	068H
	DB	0f5H
	DB	081H
	DB	08bH
	DB	0c7H
	DB	0d6H
	DB	020H
	DB	0aH
	DB	08H
	DB	00H
	DB	04cH
	DB	0d7H
	DB	074H
_mult_mod_poly DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
	DB	00H
	DB	010H
	DB	020H
	DB	030H
	DB	040H
	DB	050H
	DB	060H
	DB	070H
	DB	080H
	DB	090H
	DB	0a0H
	DB	0b0H
	DB	0c0H
	DB	0d0H
	DB	0e0H
	DB	0f0H
	DB	0c3H
	DB	0d3H
	DB	0e3H
	DB	0f3H
	DB	083H
	DB	093H
	DB	0a3H
	DB	0b3H
	DB	043H
	DB	053H
	DB	063H
	DB	073H
	DB	03H
	DB	013H
	DB	023H
	DB	033H
	DB	045H
	DB	055H
	DB	065H
	DB	075H
	DB	05H
	DB	015H
	DB	025H
	DB	035H
	DB	0c5H
	DB	0d5H
	DB	0e5H
	DB	0f5H
	DB	085H
	DB	095H
	DB	0a5H
	DB	0b5H
	DB	086H
	DB	096H
	DB	0a6H
	DB	0b6H
	DB	0c6H
	DB	0d6H
	DB	0e6H
	DB	0f6H
	DB	06H
	DB	016H
	DB	026H
	DB	036H
	DB	046H
	DB	056H
	DB	066H
	DB	076H
	DB	08aH
	DB	09aH
	DB	0aaH
	DB	0baH
	DB	0caH
	DB	0daH
	DB	0eaH
	DB	0faH
	DB	0aH
	DB	01aH
	DB	02aH
	DB	03aH
	DB	04aH
	DB	05aH
	DB	06aH
	DB	07aH
	DB	049H
	DB	059H
	DB	069H
	DB	079H
	DB	09H
	DB	019H
	DB	029H
	DB	039H
	DB	0c9H
	DB	0d9H
	DB	0e9H
	DB	0f9H
	DB	089H
	DB	099H
	DB	0a9H
	DB	0b9H
	DB	0cfH
	DB	0dfH
	DB	0efH
	DB	0ffH
	DB	08fH
	DB	09fH
	DB	0afH
	DB	0bfH
	DB	04fH
	DB	05fH
	DB	06fH
	DB	07fH
	DB	0fH
	DB	01fH
	DB	02fH
	DB	03fH
	DB	0cH
	DB	01cH
	DB	02cH
	DB	03cH
	DB	04cH
	DB	05cH
	DB	06cH
	DB	07cH
	DB	08cH
	DB	09cH
	DB	0acH
	DB	0bcH
	DB	0ccH
	DB	0dcH
	DB	0ecH
	DB	0fcH
	DB	0d7H
	DB	0c7H
	DB	0f7H
	DB	0e7H
	DB	097H
	DB	087H
	DB	0b7H
	DB	0a7H
	DB	057H
	DB	047H
	DB	077H
	DB	067H
	DB	017H
	DB	07H
	DB	037H
	DB	027H
	DB	014H
	DB	04H
	DB	034H
	DB	024H
	DB	054H
	DB	044H
	DB	074H
	DB	064H
	DB	094H
	DB	084H
	DB	0b4H
	DB	0a4H
	DB	0d4H
	DB	0c4H
	DB	0f4H
	DB	0e4H
	DB	092H
	DB	082H
	DB	0b2H
	DB	0a2H
	DB	0d2H
	DB	0c2H
	DB	0f2H
	DB	0e2H
	DB	012H
	DB	02H
	DB	032H
	DB	022H
	DB	052H
	DB	042H
	DB	072H
	DB	062H
	DB	051H
	DB	041H
	DB	071H
	DB	061H
	DB	011H
	DB	01H
	DB	031H
	DB	021H
	DB	0d1H
	DB	0c1H
	DB	0f1H
	DB	0e1H
	DB	091H
	DB	081H
	DB	0b1H
	DB	0a1H
	DB	05dH
	DB	04dH
	DB	07dH
	DB	06dH
	DB	01dH
	DB	0dH
	DB	03dH
	DB	02dH
	DB	0ddH
	DB	0cdH
	DB	0fdH
	DB	0edH
	DB	09dH
	DB	08dH
	DB	0bdH
	DB	0adH
	DB	09eH
	DB	08eH
	DB	0beH
	DB	0aeH
	DB	0deH
	DB	0ceH
	DB	0feH
	DB	0eeH
	DB	01eH
	DB	0eH
	DB	03eH
	DB	02eH
	DB	05eH
	DB	04eH
	DB	07eH
	DB	06eH
	DB	018H
	DB	08H
	DB	038H
	DB	028H
	DB	058H
	DB	048H
	DB	078H
	DB	068H
	DB	098H
	DB	088H
	DB	0b8H
	DB	0a8H
	DB	0d8H
	DB	0c8H
	DB	0f8H
	DB	0e8H
	DB	0dbH
	DB	0cbH
	DB	0fbH
	DB	0ebH
	DB	09bH
	DB	08bH
	DB	0bbH
	DB	0abH
	DB	05bH
	DB	04bH
	DB	07bH
	DB	06bH
	DB	01bH
	DB	0bH
	DB	03bH
	DB	02bH
	DB	00H
	DB	020H
	DB	040H
	DB	060H
	DB	080H
	DB	0a0H
	DB	0c0H
	DB	0e0H
	DB	0c3H
	DB	0e3H
	DB	083H
	DB	0a3H
	DB	043H
	DB	063H
	DB	03H
	DB	023H
	DB	045H
	DB	065H
	DB	05H
	DB	025H
	DB	0c5H
	DB	0e5H
	DB	085H
	DB	0a5H
	DB	086H
	DB	0a6H
	DB	0c6H
	DB	0e6H
	DB	06H
	DB	026H
	DB	046H
	DB	066H
	DB	08aH
	DB	0aaH
	DB	0caH
	DB	0eaH
	DB	0aH
	DB	02aH
	DB	04aH
	DB	06aH
	DB	049H
	DB	069H
	DB	09H
	DB	029H
	DB	0c9H
	DB	0e9H
	DB	089H
	DB	0a9H
	DB	0cfH
	DB	0efH
	DB	08fH
	DB	0afH
	DB	04fH
	DB	06fH
	DB	0fH
	DB	02fH
	DB	0cH
	DB	02cH
	DB	04cH
	DB	06cH
	DB	08cH
	DB	0acH
	DB	0ccH
	DB	0ecH
	DB	0d7H
	DB	0f7H
	DB	097H
	DB	0b7H
	DB	057H
	DB	077H
	DB	017H
	DB	037H
	DB	014H
	DB	034H
	DB	054H
	DB	074H
	DB	094H
	DB	0b4H
	DB	0d4H
	DB	0f4H
	DB	092H
	DB	0b2H
	DB	0d2H
	DB	0f2H
	DB	012H
	DB	032H
	DB	052H
	DB	072H
	DB	051H
	DB	071H
	DB	011H
	DB	031H
	DB	0d1H
	DB	0f1H
	DB	091H
	DB	0b1H
	DB	05dH
	DB	07dH
	DB	01dH
	DB	03dH
	DB	0ddH
	DB	0fdH
	DB	09dH
	DB	0bdH
	DB	09eH
	DB	0beH
	DB	0deH
	DB	0feH
	DB	01eH
	DB	03eH
	DB	05eH
	DB	07eH
	DB	018H
	DB	038H
	DB	058H
	DB	078H
	DB	098H
	DB	0b8H
	DB	0d8H
	DB	0f8H
	DB	0dbH
	DB	0fbH
	DB	09bH
	DB	0bbH
	DB	05bH
	DB	07bH
	DB	01bH
	DB	03bH
	DB	06dH
	DB	04dH
	DB	02dH
	DB	0dH
	DB	0edH
	DB	0cdH
	DB	0adH
	DB	08dH
	DB	0aeH
	DB	08eH
	DB	0eeH
	DB	0ceH
	DB	02eH
	DB	0eH
	DB	06eH
	DB	04eH
	DB	028H
	DB	08H
	DB	068H
	DB	048H
	DB	0a8H
	DB	088H
	DB	0e8H
	DB	0c8H
	DB	0ebH
	DB	0cbH
	DB	0abH
	DB	08bH
	DB	06bH
	DB	04bH
	DB	02bH
	DB	0bH
	DB	0e7H
	DB	0c7H
	DB	0a7H
	DB	087H
	DB	067H
	DB	047H
	DB	027H
	DB	07H
	DB	024H
	DB	04H
	DB	064H
	DB	044H
	DB	0a4H
	DB	084H
	DB	0e4H
	DB	0c4H
	DB	0a2H
	DB	082H
	DB	0e2H
	DB	0c2H
	DB	022H
	DB	02H
	DB	062H
	DB	042H
	DB	061H
	DB	041H
	DB	021H
	DB	01H
	DB	0e1H
	DB	0c1H
	DB	0a1H
	DB	081H
	DB	0baH
	DB	09aH
	DB	0faH
	DB	0daH
	DB	03aH
	DB	01aH
	DB	07aH
	DB	05aH
	DB	079H
	DB	059H
	DB	039H
	DB	019H
	DB	0f9H
	DB	0d9H
	DB	0b9H
	DB	099H
	DB	0ffH
	DB	0dfH
	DB	0bfH
	DB	09fH
	DB	07fH
	DB	05fH
	DB	03fH
	DB	01fH
	DB	03cH
	DB	01cH
	DB	07cH
	DB	05cH
	DB	0bcH
	DB	09cH
	DB	0fcH
	DB	0dcH
	DB	030H
	DB	010H
	DB	070H
	DB	050H
	DB	0b0H
	DB	090H
	DB	0f0H
	DB	0d0H
	DB	0f3H
	DB	0d3H
	DB	0b3H
	DB	093H
	DB	073H
	DB	053H
	DB	033H
	DB	013H
	DB	075H
	DB	055H
	DB	035H
	DB	015H
	DB	0f5H
	DB	0d5H
	DB	0b5H
	DB	095H
	DB	0b6H
	DB	096H
	DB	0f6H
	DB	0d6H
	DB	036H
	DB	016H
	DB	076H
	DB	056H
	DB	00H
	DB	085H
	DB	0c9H
	DB	04cH
	DB	051H
	DB	0d4H
	DB	098H
	DB	01dH
	DB	0a2H
	DB	027H
	DB	06bH
	DB	0eeH
	DB	0f3H
	DB	076H
	DB	03aH
	DB	0bfH
	DB	087H
	DB	02H
	DB	04eH
	DB	0cbH
	DB	0d6H
	DB	053H
	DB	01fH
	DB	09aH
	DB	025H
	DB	0a0H
	DB	0ecH
	DB	069H
	DB	074H
	DB	0f1H
	DB	0bdH
	DB	038H
	DB	0cdH
	DB	048H
	DB	04H
	DB	081H
	DB	09cH
	DB	019H
	DB	055H
	DB	0d0H
	DB	06fH
	DB	0eaH
	DB	0a6H
	DB	023H
	DB	03eH
	DB	0bbH
	DB	0f7H
	DB	072H
	DB	04aH
	DB	0cfH
	DB	083H
	DB	06H
	DB	01bH
	DB	09eH
	DB	0d2H
	DB	057H
	DB	0e8H
	DB	06dH
	DB	021H
	DB	0a4H
	DB	0b9H
	DB	03cH
	DB	070H
	DB	0f5H
	DB	059H
	DB	0dcH
	DB	090H
	DB	015H
	DB	08H
	DB	08dH
	DB	0c1H
	DB	044H
	DB	0fbH
	DB	07eH
	DB	032H
	DB	0b7H
	DB	0aaH
	DB	02fH
	DB	063H
	DB	0e6H
	DB	0deH
	DB	05bH
	DB	017H
	DB	092H
	DB	08fH
	DB	0aH
	DB	046H
	DB	0c3H
	DB	07cH
	DB	0f9H
	DB	0b5H
	DB	030H
	DB	02dH
	DB	0a8H
	DB	0e4H
	DB	061H
	DB	094H
	DB	011H
	DB	05dH
	DB	0d8H
	DB	0c5H
	DB	040H
	DB	0cH
	DB	089H
	DB	036H
	DB	0b3H
	DB	0ffH
	DB	07aH
	DB	067H
	DB	0e2H
	DB	0aeH
	DB	02bH
	DB	013H
	DB	096H
	DB	0daH
	DB	05fH
	DB	042H
	DB	0c7H
	DB	08bH
	DB	0eH
	DB	0b1H
	DB	034H
	DB	078H
	DB	0fdH
	DB	0e0H
	DB	065H
	DB	029H
	DB	0acH
	DB	0b2H
	DB	037H
	DB	07bH
	DB	0feH
	DB	0e3H
	DB	066H
	DB	02aH
	DB	0afH
	DB	010H
	DB	095H
	DB	0d9H
	DB	05cH
	DB	041H
	DB	0c4H
	DB	088H
	DB	0dH
	DB	035H
	DB	0b0H
	DB	0fcH
	DB	079H
	DB	064H
	DB	0e1H
	DB	0adH
	DB	028H
	DB	097H
	DB	012H
	DB	05eH
	DB	0dbH
	DB	0c6H
	DB	043H
	DB	0fH
	DB	08aH
	DB	07fH
	DB	0faH
	DB	0b6H
	DB	033H
	DB	02eH
	DB	0abH
	DB	0e7H
	DB	062H
	DB	0ddH
	DB	058H
	DB	014H
	DB	091H
	DB	08cH
	DB	09H
	DB	045H
	DB	0c0H
	DB	0f8H
	DB	07dH
	DB	031H
	DB	0b4H
	DB	0a9H
	DB	02cH
	DB	060H
	DB	0e5H
	DB	05aH
	DB	0dfH
	DB	093H
	DB	016H
	DB	0bH
	DB	08eH
	DB	0c2H
	DB	047H
	DB	0ebH
	DB	06eH
	DB	022H
	DB	0a7H
	DB	0baH
	DB	03fH
	DB	073H
	DB	0f6H
	DB	049H
	DB	0ccH
	DB	080H
	DB	05H
	DB	018H
	DB	09dH
	DB	0d1H
	DB	054H
	DB	06cH
	DB	0e9H
	DB	0a5H
	DB	020H
	DB	03dH
	DB	0b8H
	DB	0f4H
	DB	071H
	DB	0ceH
	DB	04bH
	DB	07H
	DB	082H
	DB	09fH
	DB	01aH
	DB	056H
	DB	0d3H
	DB	026H
	DB	0a3H
	DB	0efH
	DB	06aH
	DB	077H
	DB	0f2H
	DB	0beH
	DB	03bH
	DB	084H
	DB	01H
	DB	04dH
	DB	0c8H
	DB	0d5H
	DB	050H
	DB	01cH
	DB	099H
	DB	0a1H
	DB	024H
	DB	068H
	DB	0edH
	DB	0f0H
	DB	075H
	DB	039H
	DB	0bcH
	DB	03H
	DB	086H
	DB	0caH
	DB	04fH
	DB	052H
	DB	0d7H
	DB	09bH
	DB	01eH
	DB	00H
	DB	094H
	DB	0ebH
	DB	07fH
	DB	015H
	DB	081H
	DB	0feH
	DB	06aH
	DB	02aH
	DB	0beH
	DB	0c1H
	DB	055H
	DB	03fH
	DB	0abH
	DB	0d4H
	DB	040H
	DB	054H
	DB	0c0H
	DB	0bfH
	DB	02bH
	DB	041H
	DB	0d5H
	DB	0aaH
	DB	03eH
	DB	07eH
	DB	0eaH
	DB	095H
	DB	01H
	DB	06bH
	DB	0ffH
	DB	080H
	DB	014H
	DB	0a8H
	DB	03cH
	DB	043H
	DB	0d7H
	DB	0bdH
	DB	029H
	DB	056H
	DB	0c2H
	DB	082H
	DB	016H
	DB	069H
	DB	0fdH
	DB	097H
	DB	03H
	DB	07cH
	DB	0e8H
	DB	0fcH
	DB	068H
	DB	017H
	DB	083H
	DB	0e9H
	DB	07dH
	DB	02H
	DB	096H
	DB	0d6H
	DB	042H
	DB	03dH
	DB	0a9H
	DB	0c3H
	DB	057H
	DB	028H
	DB	0bcH
	DB	093H
	DB	07H
	DB	078H
	DB	0ecH
	DB	086H
	DB	012H
	DB	06dH
	DB	0f9H
	DB	0b9H
	DB	02dH
	DB	052H
	DB	0c6H
	DB	0acH
	DB	038H
	DB	047H
	DB	0d3H
	DB	0c7H
	DB	053H
	DB	02cH
	DB	0b8H
	DB	0d2H
	DB	046H
	DB	039H
	DB	0adH
	DB	0edH
	DB	079H
	DB	06H
	DB	092H
	DB	0f8H
	DB	06cH
	DB	013H
	DB	087H
	DB	03bH
	DB	0afH
	DB	0d0H
	DB	044H
	DB	02eH
	DB	0baH
	DB	0c5H
	DB	051H
	DB	011H
	DB	085H
	DB	0faH
	DB	06eH
	DB	04H
	DB	090H
	DB	0efH
	DB	07bH
	DB	06fH
	DB	0fbH
	DB	084H
	DB	010H
	DB	07aH
	DB	0eeH
	DB	091H
	DB	05H
	DB	045H
	DB	0d1H
	DB	0aeH
	DB	03aH
	DB	050H
	DB	0c4H
	DB	0bbH
	DB	02fH
	DB	0e5H
	DB	071H
	DB	0eH
	DB	09aH
	DB	0f0H
	DB	064H
	DB	01bH
	DB	08fH
	DB	0cfH
	DB	05bH
	DB	024H
	DB	0b0H
	DB	0daH
	DB	04eH
	DB	031H
	DB	0a5H
	DB	0b1H
	DB	025H
	DB	05aH
	DB	0ceH
	DB	0a4H
	DB	030H
	DB	04fH
	DB	0dbH
	DB	09bH
	DB	0fH
	DB	070H
	DB	0e4H
	DB	08eH
	DB	01aH
	DB	065H
	DB	0f1H
	DB	04dH
	DB	0d9H
	DB	0a6H
	DB	032H
	DB	058H
	DB	0ccH
	DB	0b3H
	DB	027H
	DB	067H
	DB	0f3H
	DB	08cH
	DB	018H
	DB	072H
	DB	0e6H
	DB	099H
	DB	0dH
	DB	019H
	DB	08dH
	DB	0f2H
	DB	066H
	DB	0cH
	DB	098H
	DB	0e7H
	DB	073H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	04cH
	DB	026H
	DB	0b2H
	DB	0cdH
	DB	059H
	DB	076H
	DB	0e2H
	DB	09dH
	DB	09H
	DB	063H
	DB	0f7H
	DB	088H
	DB	01cH
	DB	05cH
	DB	0c8H
	DB	0b7H
	DB	023H
	DB	049H
	DB	0ddH
	DB	0a2H
	DB	036H
	DB	022H
	DB	0b6H
	DB	0c9H
	DB	05dH
	DB	037H
	DB	0a3H
	DB	0dcH
	DB	048H
	DB	08H
	DB	09cH
	DB	0e3H
	DB	077H
	DB	01dH
	DB	089H
	DB	0f6H
	DB	062H
	DB	0deH
	DB	04aH
	DB	035H
	DB	0a1H
	DB	0cbH
	DB	05fH
	DB	020H
	DB	0b4H
	DB	0f4H
	DB	060H
	DB	01fH
	DB	08bH
	DB	0e1H
	DB	075H
	DB	0aH
	DB	09eH
	DB	08aH
	DB	01eH
	DB	061H
	DB	0f5H
	DB	09fH
	DB	0bH
	DB	074H
	DB	0e0H
	DB	0a0H
	DB	034H
	DB	04bH
	DB	0dfH
	DB	0b5H
	DB	021H
	DB	05eH
	DB	0caH
	DB	00H
	DB	0c0H
	DB	043H
	DB	083H
	DB	086H
	DB	046H
	DB	0c5H
	DB	05H
	DB	0cfH
	DB	0fH
	DB	08cH
	DB	04cH
	DB	049H
	DB	089H
	DB	0aH
	DB	0caH
	DB	05dH
	DB	09dH
	DB	01eH
	DB	0deH
	DB	0dbH
	DB	01bH
	DB	098H
	DB	058H
	DB	092H
	DB	052H
	DB	0d1H
	DB	011H
	DB	014H
	DB	0d4H
	DB	057H
	DB	097H
	DB	0baH
	DB	07aH
	DB	0f9H
	DB	039H
	DB	03cH
	DB	0fcH
	DB	07fH
	DB	0bfH
	DB	075H
	DB	0b5H
	DB	036H
	DB	0f6H
	DB	0f3H
	DB	033H
	DB	0b0H
	DB	070H
	DB	0e7H
	DB	027H
	DB	0a4H
	DB	064H
	DB	061H
	DB	0a1H
	DB	022H
	DB	0e2H
	DB	028H
	DB	0e8H
	DB	06bH
	DB	0abH
	DB	0aeH
	DB	06eH
	DB	0edH
	DB	02dH
	DB	0b7H
	DB	077H
	DB	0f4H
	DB	034H
	DB	031H
	DB	0f1H
	DB	072H
	DB	0b2H
	DB	078H
	DB	0b8H
	DB	03bH
	DB	0fbH
	DB	0feH
	DB	03eH
	DB	0bdH
	DB	07dH
	DB	0eaH
	DB	02aH
	DB	0a9H
	DB	069H
	DB	06cH
	DB	0acH
	DB	02fH
	DB	0efH
	DB	025H
	DB	0e5H
	DB	066H
	DB	0a6H
	DB	0a3H
	DB	063H
	DB	0e0H
	DB	020H
	DB	0dH
	DB	0cdH
	DB	04eH
	DB	08eH
	DB	08bH
	DB	04bH
	DB	0c8H
	DB	08H
	DB	0c2H
	DB	02H
	DB	081H
	DB	041H
	DB	044H
	DB	084H
	DB	07H
	DB	0c7H
	DB	050H
	DB	090H
	DB	013H
	DB	0d3H
	DB	0d6H
	DB	016H
	DB	095H
	DB	055H
	DB	09fH
	DB	05fH
	DB	0dcH
	DB	01cH
	DB	019H
	DB	0d9H
	DB	05aH
	DB	09aH
	DB	0adH
	DB	06dH
	DB	0eeH
	DB	02eH
	DB	02bH
	DB	0ebH
	DB	068H
	DB	0a8H
	DB	062H
	DB	0a2H
	DB	021H
	DB	0e1H
	DB	0e4H
	DB	024H
	DB	0a7H
	DB	067H
	DB	0f0H
	DB	030H
	DB	0b3H
	DB	073H
	DB	076H
	DB	0b6H
	DB	035H
	DB	0f5H
	DB	03fH
	DB	0ffH
	DB	07cH
	DB	0bcH
	DB	0b9H
	DB	079H
	DB	0faH
	DB	03aH
	DB	017H
	DB	0d7H
	DB	054H
	DB	094H
	DB	091H
	DB	051H
	DB	0d2H
	DB	012H
	DB	0d8H
	DB	018H
	DB	09bH
	DB	05bH
	DB	05eH
	DB	09eH
	DB	01dH
	DB	0ddH
	DB	04aH
	DB	08aH
	DB	09H
	DB	0c9H
	DB	0ccH
	DB	0cH
	DB	08fH
	DB	04fH
	DB	085H
	DB	045H
	DB	0c6H
	DB	06H
	DB	03H
	DB	0c3H
	DB	040H
	DB	080H
	DB	01aH
	DB	0daH
	DB	059H
	DB	099H
	DB	09cH
	DB	05cH
	DB	0dfH
	DB	01fH
	DB	0d5H
	DB	015H
	DB	096H
	DB	056H
	DB	053H
	DB	093H
	DB	010H
	DB	0d0H
	DB	047H
	DB	087H
	DB	04H
	DB	0c4H
	DB	0c1H
	DB	01H
	DB	082H
	DB	042H
	DB	088H
	DB	048H
	DB	0cbH
	DB	0bH
	DB	0eH
	DB	0ceH
	DB	04dH
	DB	08dH
	DB	0a0H
	DB	060H
	DB	0e3H
	DB	023H
	DB	026H
	DB	0e6H
	DB	065H
	DB	0a5H
	DB	06fH
	DB	0afH
	DB	02cH
	DB	0ecH
	DB	0e9H
	DB	029H
	DB	0aaH
	DB	06aH
	DB	0fdH
	DB	03dH
	DB	0beH
	DB	07eH
	DB	07bH
	DB	0bbH
	DB	038H
	DB	0f8H
	DB	032H
	DB	0f2H
	DB	071H
	DB	0b1H
	DB	0b4H
	DB	074H
	DB	0f7H
	DB	037H
	DB	00H
	DB	0c2H
	DB	047H
	DB	085H
	DB	08eH
	DB	04cH
	DB	0c9H
	DB	0bH
	DB	0dfH
	DB	01dH
	DB	098H
	DB	05aH
	DB	051H
	DB	093H
	DB	016H
	DB	0d4H
	DB	07dH
	DB	0bfH
	DB	03aH
	DB	0f8H
	DB	0f3H
	DB	031H
	DB	0b4H
	DB	076H
	DB	0a2H
	DB	060H
	DB	0e5H
	DB	027H
	DB	02cH
	DB	0eeH
	DB	06bH
	DB	0a9H
	DB	0faH
	DB	038H
	DB	0bdH
	DB	07fH
	DB	074H
	DB	0b6H
	DB	033H
	DB	0f1H
	DB	025H
	DB	0e7H
	DB	062H
	DB	0a0H
	DB	0abH
	DB	069H
	DB	0ecH
	DB	02eH
	DB	087H
	DB	045H
	DB	0c0H
	DB	02H
	DB	09H
	DB	0cbH
	DB	04eH
	DB	08cH
	DB	058H
	DB	09aH
	DB	01fH
	DB	0ddH
	DB	0d6H
	DB	014H
	DB	091H
	DB	053H
	DB	037H
	DB	0f5H
	DB	070H
	DB	0b2H
	DB	0b9H
	DB	07bH
	DB	0feH
	DB	03cH
	DB	0e8H
	DB	02aH
	DB	0afH
	DB	06dH
	DB	066H
	DB	0a4H
	DB	021H
	DB	0e3H
	DB	04aH
	DB	088H
	DB	0dH
	DB	0cfH
	DB	0c4H
	DB	06H
	DB	083H
	DB	041H
	DB	095H
	DB	057H
	DB	0d2H
	DB	010H
	DB	01bH
	DB	0d9H
	DB	05cH
	DB	09eH
	DB	0cdH
	DB	0fH
	DB	08aH
	DB	048H
	DB	043H
	DB	081H
	DB	04H
	DB	0c6H
	DB	012H
	DB	0d0H
	DB	055H
	DB	097H
	DB	09cH
	DB	05eH
	DB	0dbH
	DB	019H
	DB	0b0H
	DB	072H
	DB	0f7H
	DB	035H
	DB	03eH
	DB	0fcH
	DB	079H
	DB	0bbH
	DB	06fH
	DB	0adH
	DB	028H
	DB	0eaH
	DB	0e1H
	DB	023H
	DB	0a6H
	DB	064H
	DB	06eH
	DB	0acH
	DB	029H
	DB	0ebH
	DB	0e0H
	DB	022H
	DB	0a7H
	DB	065H
	DB	0b1H
	DB	073H
	DB	0f6H
	DB	034H
	DB	03fH
	DB	0fdH
	DB	078H
	DB	0baH
	DB	013H
	DB	0d1H
	DB	054H
	DB	096H
	DB	09dH
	DB	05fH
	DB	0daH
	DB	018H
	DB	0ccH
	DB	0eH
	DB	08bH
	DB	049H
	DB	042H
	DB	080H
	DB	05H
	DB	0c7H
	DB	094H
	DB	056H
	DB	0d3H
	DB	011H
	DB	01aH
	DB	0d8H
	DB	05dH
	DB	09fH
	DB	04bH
	DB	089H
	DB	0cH
	DB	0ceH
	DB	0c5H
	DB	07H
	DB	082H
	DB	040H
	DB	0e9H
	DB	02bH
	DB	0aeH
	DB	06cH
	DB	067H
	DB	0a5H
	DB	020H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	071H
	DB	0b3H
	DB	0b8H
	DB	07aH
	DB	0ffH
	DB	03dH
	DB	059H
	DB	09bH
	DB	01eH
	DB	0dcH
	DB	0d7H
	DB	015H
	DB	090H
	DB	052H
	DB	086H
	DB	044H
	DB	0c1H
	DB	03H
	DB	08H
	DB	0caH
	DB	04fH
	DB	08dH
	DB	024H
	DB	0e6H
	DB	063H
	DB	0a1H
	DB	0aaH
	DB	068H
	DB	0edH
	DB	02fH
	DB	0fbH
	DB	039H
	DB	0bcH
	DB	07eH
	DB	075H
	DB	0b7H
	DB	032H
	DB	0f0H
	DB	0a3H
	DB	061H
	DB	0e4H
	DB	026H
	DB	02dH
	DB	0efH
	DB	06aH
	DB	0a8H
	DB	07cH
	DB	0beH
	DB	03bH
	DB	0f9H
	DB	0f2H
	DB	030H
	DB	0b5H
	DB	077H
	DB	0deH
	DB	01cH
	DB	099H
	DB	05bH
	DB	050H
	DB	092H
	DB	017H
	DB	0d5H
	DB	01H
	DB	0c3H
	DB	046H
	DB	084H
	DB	08fH
	DB	04dH
	DB	0c8H
	DB	0aH
	DB	00H
	DB	0fbH
	DB	035H
	DB	0ceH
	DB	06aH
	DB	091H
	DB	05fH
	DB	0a4H
	DB	0d4H
	DB	02fH
	DB	0e1H
	DB	01aH
	DB	0beH
	DB	045H
	DB	08bH
	DB	070H
	DB	06bH
	DB	090H
	DB	05eH
	DB	0a5H
	DB	01H
	DB	0faH
	DB	034H
	DB	0cfH
	DB	0bfH
	DB	044H
	DB	08aH
	DB	071H
	DB	0d5H
	DB	02eH
	DB	0e0H
	DB	01bH
	DB	0d6H
	DB	02dH
	DB	0e3H
	DB	018H
	DB	0bcH
	DB	047H
	DB	089H
	DB	072H
	DB	02H
	DB	0f9H
	DB	037H
	DB	0ccH
	DB	068H
	DB	093H
	DB	05dH
	DB	0a6H
	DB	0bdH
	DB	046H
	DB	088H
	DB	073H
	DB	0d7H
	DB	02cH
	DB	0e2H
	DB	019H
	DB	069H
	DB	092H
	DB	05cH
	DB	0a7H
	DB	03H
	DB	0f8H
	DB	036H
	DB	0cdH
	DB	06fH
	DB	094H
	DB	05aH
	DB	0a1H
	DB	05H
	DB	0feH
	DB	030H
	DB	0cbH
	DB	0bbH
	DB	040H
	DB	08eH
	DB	075H
	DB	0d1H
	DB	02aH
	DB	0e4H
	DB	01fH
	DB	04H
	DB	0ffH
	DB	031H
	DB	0caH
	DB	06eH
	DB	095H
	DB	05bH
	DB	0a0H
	DB	0d0H
	DB	02bH
	DB	0e5H
	DB	01eH
	DB	0baH
	DB	041H
	DB	08fH
	DB	074H
	DB	0b9H
	DB	042H
	DB	08cH
	DB	077H
	DB	0d3H
	DB	028H
	DB	0e6H
	DB	01dH
	DB	06dH
	DB	096H
	DB	058H
	DB	0a3H
	DB	07H
	DB	0fcH
	DB	032H
	DB	0c9H
	DB	0d2H
	DB	029H
	DB	0e7H
	DB	01cH
	DB	0b8H
	DB	043H
	DB	08dH
	DB	076H
	DB	06H
	DB	0fdH
	DB	033H
	DB	0c8H
	DB	06cH
	DB	097H
	DB	059H
	DB	0a2H
	DB	0deH
	DB	025H
	DB	0ebH
	DB	010H
	DB	0b4H
	DB	04fH
	DB	081H
	DB	07aH
	DB	0aH
	DB	0f1H
	DB	03fH
	DB	0c4H
	DB	060H
	DB	09bH
	DB	055H
	DB	0aeH
	DB	0b5H
	DB	04eH
	DB	080H
	DB	07bH
	DB	0dfH
	DB	024H
	DB	0eaH
	DB	011H
	DB	061H
	DB	09aH
	DB	054H
	DB	0afH
	DB	0bH
	DB	0f0H
	DB	03eH
	DB	0c5H
	DB	08H
	DB	0f3H
	DB	03dH
	DB	0c6H
	DB	062H
	DB	099H
	DB	057H
	DB	0acH
	DB	0dcH
	DB	027H
	DB	0e9H
	DB	012H
	DB	0b6H
	DB	04dH
	DB	083H
	DB	078H
	DB	063H
	DB	098H
	DB	056H
	DB	0adH
	DB	09H
	DB	0f2H
	DB	03cH
	DB	0c7H
	DB	0b7H
	DB	04cH
	DB	082H
	DB	079H
	DB	0ddH
	DB	026H
	DB	0e8H
	DB	013H
	DB	0b1H
	DB	04aH
	DB	084H
	DB	07fH
	DB	0dbH
	DB	020H
	DB	0eeH
	DB	015H
	DB	065H
	DB	09eH
	DB	050H
	DB	0abH
	DB	0fH
	DB	0f4H
	DB	03aH
	DB	0c1H
	DB	0daH
	DB	021H
	DB	0efH
	DB	014H
	DB	0b0H
	DB	04bH
	DB	085H
	DB	07eH
	DB	0eH
	DB	0f5H
	DB	03bH
	DB	0c0H
	DB	064H
	DB	09fH
	DB	051H
	DB	0aaH
	DB	067H
	DB	09cH
	DB	052H
	DB	0a9H
	DB	0dH
	DB	0f6H
	DB	038H
	DB	0c3H
	DB	0b3H
	DB	048H
	DB	086H
	DB	07dH
	DB	0d9H
	DB	022H
	DB	0ecH
	DB	017H
	DB	0cH
	DB	0f7H
	DB	039H
	DB	0c2H
	DB	066H
	DB	09dH
	DB	053H
	DB	0a8H
	DB	0d8H
	DB	023H
	DB	0edH
	DB	016H
	DB	0b2H
	DB	049H
	DB	087H
	DB	07cH
_DATA	ENDS
PUBLIC	_S
PUBLIC	_S_inv
PUBLIC	_ll
PUBLIC	_R
PUBLIC	_R_inv
PUBLIC	_L
PUBLIC	_L_inv
PUBLIC	_F
PUBLIC	_grasshopper_set_key
PUBLIC	_grasshopper_encrypt
PUBLIC	_grasshopper_decrypt
PUBLIC	_grasshopper_xor_ks
PUBLIC	_changeEndian
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _changeEndian
_TEXT	SEGMENT
_ret$ = 8						; size = 4
_changeEndian PROC					; COMDAT

; 649  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 650  : 	unsigned long tmp = 0L;
; 651  : 
; 652  : 	tmp  = (*ret & 0xFF) << 24;
; 653  : 	tmp |= (*ret & 0xFF00) << 8;
; 654  : 	tmp |= (*ret & 0xFF0000) >> 8;
; 655  : 	tmp |= (*ret & 0xFF000000) >> 24;
; 656  : 	*ret = tmp;

  00004	8b 75 08	 mov	 esi, DWORD PTR _ret$[ebp]
  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	8b d1		 mov	 edx, ecx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00010	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00015	c1 e9 08	 shr	 ecx, 8
  00018	0b d0		 or	 edx, eax
  0001a	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00020	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  00024	c1 e2 08	 shl	 edx, 8
  00027	0b d1		 or	 edx, ecx
  00029	0b d0		 or	 edx, eax
  0002b	89 16		 mov	 DWORD PTR [esi], edx
  0002d	5e		 pop	 esi

; 657  : 
; 658  : 	return;
; 659  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_changeEndian ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _grasshopper_xor_ks
_TEXT	SEGMENT
tv1468 = -4						; size = 4
_ks$ = 8						; size = 4
_out_ks$ = 12						; size = 4
_in$ = 16						; size = 4
_len$ = 20						; size = 4
_grasshopper_xor_ks PROC				; COMDAT

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 611  : 	unsigned long i;
; 612  : 	if (!len)

  00004	83 7d 14 00	 cmp	 DWORD PTR _len$[ebp], 0
  00008	0f 84 e7 01 00
	00		 je	 $LN3@grasshoppe

; 613  : 		return;
; 614  : 
; 615  : 	out_ks->y000 = ks->y000 ^ in[0]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
  00011	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _ks$[ebp]
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0001d	bf 08 00 00 00	 mov	 edi, 8
  00022	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  00025	2b d9		 sub	 ebx, ecx
$LL9@grasshoppe:
  00027	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  0002a	8d 40 14	 lea	 eax, DWORD PTR [eax+20]
  0002d	33 0a		 xor	 ecx, DWORD PTR [edx]
  0002f	8d 76 14	 lea	 esi, DWORD PTR [esi+20]
  00032	89 48 e8	 mov	 DWORD PTR [eax-24], ecx
  00035	8b 4c 03 ec	 mov	 ecx, DWORD PTR [ebx+eax-20]
  00039	33 0a		 xor	 ecx, DWORD PTR [edx]
  0003b	89 48 ec	 mov	 DWORD PTR [eax-20], ecx
  0003e	8b 4e e8	 mov	 ecx, DWORD PTR [esi-24]
  00041	33 0a		 xor	 ecx, DWORD PTR [edx]
  00043	89 48 f0	 mov	 DWORD PTR [eax-16], ecx
  00046	8b 4e ec	 mov	 ecx, DWORD PTR [esi-20]
  00049	33 0a		 xor	 ecx, DWORD PTR [edx]
  0004b	89 48 f4	 mov	 DWORD PTR [eax-12], ecx
  0004e	8b 4e f0	 mov	 ecx, DWORD PTR [esi-16]
  00051	33 0a		 xor	 ecx, DWORD PTR [edx]
  00053	89 48 f8	 mov	 DWORD PTR [eax-8], ecx
  00056	83 ef 01	 sub	 edi, 1
  00059	75 cc		 jne	 SHORT $LL9@grasshoppe

; 616  : 	out_ks->y100 = ks->y100 ^ in[0]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];
; 617  : 	out_ks->y200 = ks->y200 ^ in[0]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];
; 618  : 	out_ks->y300 = ks->y300 ^ in[0]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];
; 619  : 	out_ks->y400 = ks->y400 ^ in[0]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];
; 620  : 	out_ks->y500 = ks->y500 ^ in[0]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];
; 621  : 	out_ks->y600 = ks->y600 ^ in[0]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];
; 622  : 	out_ks->y700 = ks->y700 ^ in[0]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];
; 623  : 	out_ks->y800 = ks->y800 ^ in[0]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];
; 624  : 	out_ks->y900 = ks->y900 ^ in[0]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];
; 625  : 	for (i = 1; i < len; i++)

  0005b	8b 75 14	 mov	 esi, DWORD PTR _len$[ebp]
  0005e	bf 01 00 00 00	 mov	 edi, 1
  00063	8b 5d 08	 mov	 ebx, DWORD PTR _ks$[ebp]
  00066	3b f7		 cmp	 esi, edi
  00068	0f 86 84 01 00
	00		 jbe	 $LN18@grasshoppe
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _out_ks$[ebp]
$LL4@grasshoppe:

; 626  : 	{
; 627  : 		out_ks->y000 = ks->y000 ^ in[i]; out_ks->y001 = ks->y001 ^ in[0]; out_ks->y010 = ks->y010 ^ in[0]; out_ks->y011 = ks->y011 ^ in[0];

  00071	8b 03		 mov	 eax, DWORD PTR [ebx]
  00073	33 04 ba	 xor	 eax, DWORD PTR [edx+edi*4]
  00076	89 01		 mov	 DWORD PTR [ecx], eax
  00078	8b 02		 mov	 eax, DWORD PTR [edx]
  0007a	33 43 04	 xor	 eax, DWORD PTR [ebx+4]
  0007d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	33 43 08	 xor	 eax, DWORD PTR [ebx+8]
  00085	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00088	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0008b	33 02		 xor	 eax, DWORD PTR [edx]
  0008d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 628  : 		out_ks->y100 = ks->y100 ^ in[i]; out_ks->y101 = ks->y101 ^ in[0]; out_ks->y110 = ks->y110 ^ in[0]; out_ks->y111 = ks->y111 ^ in[0];

  00090	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  00093	33 43 10	 xor	 eax, DWORD PTR [ebx+16]
  00096	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00099	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0009c	33 02		 xor	 eax, DWORD PTR [edx]
  0009e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	33 43 18	 xor	 eax, DWORD PTR [ebx+24]
  000a6	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  000a9	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  000ac	33 02		 xor	 eax, DWORD PTR [edx]
  000ae	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 629  : 		out_ks->y200 = ks->y200 ^ in[i]; out_ks->y201 = ks->y201 ^ in[0]; out_ks->y210 = ks->y210 ^ in[0]; out_ks->y211 = ks->y211 ^ in[0];

  000b1	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  000b4	33 43 20	 xor	 eax, DWORD PTR [ebx+32]
  000b7	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  000ba	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  000bd	33 02		 xor	 eax, DWORD PTR [edx]
  000bf	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  000c2	8b 02		 mov	 eax, DWORD PTR [edx]
  000c4	33 43 28	 xor	 eax, DWORD PTR [ebx+40]
  000c7	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  000ca	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000cd	33 02		 xor	 eax, DWORD PTR [edx]
  000cf	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 630  : 		out_ks->y300 = ks->y300 ^ in[i]; out_ks->y301 = ks->y301 ^ in[0]; out_ks->y310 = ks->y310 ^ in[0]; out_ks->y311 = ks->y311 ^ in[0];

  000d2	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  000d5	33 43 30	 xor	 eax, DWORD PTR [ebx+48]
  000d8	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  000db	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  000de	33 02		 xor	 eax, DWORD PTR [edx]
  000e0	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  000e3	8b 02		 mov	 eax, DWORD PTR [edx]
  000e5	33 43 38	 xor	 eax, DWORD PTR [ebx+56]
  000e8	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  000eb	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  000ee	33 02		 xor	 eax, DWORD PTR [edx]
  000f0	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 631  : 		out_ks->y400 = ks->y400 ^ in[i]; out_ks->y401 = ks->y401 ^ in[0]; out_ks->y410 = ks->y410 ^ in[0]; out_ks->y411 = ks->y411 ^ in[0];

  000f3	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  000f6	33 43 40	 xor	 eax, DWORD PTR [ebx+64]
  000f9	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  000fc	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  000ff	33 02		 xor	 eax, DWORD PTR [edx]
  00101	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00104	8b 02		 mov	 eax, DWORD PTR [edx]
  00106	33 43 48	 xor	 eax, DWORD PTR [ebx+72]
  00109	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  0010c	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]
  0010f	33 02		 xor	 eax, DWORD PTR [edx]
  00111	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 632  : 		out_ks->y500 = ks->y500 ^ in[i]; out_ks->y501 = ks->y501 ^ in[0]; out_ks->y510 = ks->y510 ^ in[0]; out_ks->y511 = ks->y511 ^ in[0];

  00114	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  00117	33 43 50	 xor	 eax, DWORD PTR [ebx+80]
  0011a	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  0011d	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00120	33 02		 xor	 eax, DWORD PTR [edx]
  00122	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00125	8b 02		 mov	 eax, DWORD PTR [edx]
  00127	33 43 58	 xor	 eax, DWORD PTR [ebx+88]
  0012a	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  0012d	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  00130	33 02		 xor	 eax, DWORD PTR [edx]
  00132	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 633  : 		out_ks->y600 = ks->y600 ^ in[i]; out_ks->y601 = ks->y601 ^ in[0]; out_ks->y610 = ks->y610 ^ in[0]; out_ks->y611 = ks->y611 ^ in[0];

  00135	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  00138	33 43 60	 xor	 eax, DWORD PTR [ebx+96]
  0013b	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  0013e	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
  00141	33 02		 xor	 eax, DWORD PTR [edx]
  00143	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  00146	8b 02		 mov	 eax, DWORD PTR [edx]
  00148	33 43 68	 xor	 eax, DWORD PTR [ebx+104]
  0014b	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  0014e	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]
  00151	33 02		 xor	 eax, DWORD PTR [edx]
  00153	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 634  : 		out_ks->y700 = ks->y700 ^ in[i]; out_ks->y701 = ks->y701 ^ in[0]; out_ks->y710 = ks->y710 ^ in[0]; out_ks->y711 = ks->y711 ^ in[0];

  00156	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  00159	33 43 70	 xor	 eax, DWORD PTR [ebx+112]
  0015c	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  0015f	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]
  00162	33 02		 xor	 eax, DWORD PTR [edx]
  00164	89 41 74	 mov	 DWORD PTR [ecx+116], eax
  00167	8b 02		 mov	 eax, DWORD PTR [edx]
  00169	33 43 78	 xor	 eax, DWORD PTR [ebx+120]
  0016c	89 41 78	 mov	 DWORD PTR [ecx+120], eax
  0016f	8b 43 7c	 mov	 eax, DWORD PTR [ebx+124]
  00172	33 02		 xor	 eax, DWORD PTR [edx]
  00174	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 635  : 		out_ks->y800 = ks->y800 ^ in[i]; out_ks->y801 = ks->y801 ^ in[0]; out_ks->y810 = ks->y810 ^ in[0]; out_ks->y811 = ks->y811 ^ in[0];

  00177	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  0017a	33 83 80 00 00
	00		 xor	 eax, DWORD PTR [ebx+128]
  00180	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
  00186	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [ebx+132]
  0018c	33 02		 xor	 eax, DWORD PTR [edx]
  0018e	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax
  00194	8b 02		 mov	 eax, DWORD PTR [edx]
  00196	33 83 88 00 00
	00		 xor	 eax, DWORD PTR [ebx+136]
  0019c	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax
  001a2	8b 83 8c 00 00
	00		 mov	 eax, DWORD PTR [ebx+140]
  001a8	33 02		 xor	 eax, DWORD PTR [edx]
  001aa	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 636  : 		out_ks->y900 = ks->y900 ^ in[i]; out_ks->y901 = ks->y901 ^ in[0]; out_ks->y910 = ks->y910 ^ in[0]; out_ks->y911 = ks->y911 ^ in[0];

  001b0	8b 04 ba	 mov	 eax, DWORD PTR [edx+edi*4]
  001b3	47		 inc	 edi
  001b4	33 83 90 00 00
	00		 xor	 eax, DWORD PTR [ebx+144]
  001ba	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax
  001c0	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [ebx+148]
  001c6	33 02		 xor	 eax, DWORD PTR [edx]
  001c8	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  001ce	8b 02		 mov	 eax, DWORD PTR [edx]
  001d0	33 83 98 00 00
	00		 xor	 eax, DWORD PTR [ebx+152]
  001d6	89 81 98 00 00
	00		 mov	 DWORD PTR [ecx+152], eax
  001dc	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [ebx+156]
  001e2	33 02		 xor	 eax, DWORD PTR [edx]
  001e4	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
  001ea	3b fe		 cmp	 edi, esi
  001ec	0f 82 7f fe ff
	ff		 jb	 $LL4@grasshoppe
$LN18@grasshoppe:
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
$LN3@grasshoppe:

; 637  : 	}
; 638  : }

  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c3		 ret	 0
_grasshopper_xor_ks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _grasshopper_decrypt
_TEXT	SEGMENT
_subkeys$ = 8						; size = 4
_ciphertext$ = 12					; size = 4
_plaintext$ = 16					; size = 4
_grasshopper_decrypt PROC				; COMDAT

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 552  : 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&ciphertext[2]); changeEndian(&ciphertext[3]);

  00005	8b 75 0c	 mov	 esi, DWORD PTR _ciphertext$[ebp]

; 553  : 
; 554  : 	/* Round 1 with subkey 10 */
; 555  : 	plaintext[0] = ciphertext[0] ^ subkeys->y900; plaintext[1] = ciphertext[1] ^ subkeys->y901; plaintext[2] = ciphertext[2] ^ subkeys->y910; plaintext[3] = ciphertext[3] ^ subkeys->y911;

  00008	8b 5d 10	 mov	 ebx, DWORD PTR _plaintext$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _subkeys$[ebp]
  0000f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00011	8b d1		 mov	 edx, ecx
  00013	c1 e2 10	 shl	 edx, 16			; 00000010H
  00016	8b c1		 mov	 eax, ecx
  00018	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0001d	c1 e9 08	 shr	 ecx, 8
  00020	0b d0		 or	 edx, eax
  00022	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00028	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  0002c	c1 e2 08	 shl	 edx, 8
  0002f	0b d1		 or	 edx, ecx
  00031	0b d0		 or	 edx, eax
  00033	89 16		 mov	 DWORD PTR [esi], edx
  00035	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00038	8b d1		 mov	 edx, ecx
  0003a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0003d	8b c1		 mov	 eax, ecx
  0003f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00044	c1 e9 08	 shr	 ecx, 8
  00047	0b d0		 or	 edx, eax
  00049	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0004f	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  00053	c1 e2 08	 shl	 edx, 8
  00056	0b d1		 or	 edx, ecx
  00058	0b d0		 or	 edx, eax
  0005a	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0005d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00060	8b d1		 mov	 edx, ecx
  00062	c1 e2 10	 shl	 edx, 16			; 00000010H
  00065	8b c1		 mov	 eax, ecx
  00067	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0006c	c1 e9 08	 shr	 ecx, 8
  0006f	0b d0		 or	 edx, eax
  00071	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00077	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  0007b	c1 e2 08	 shl	 edx, 8
  0007e	0b d1		 or	 edx, ecx
  00080	0b d0		 or	 edx, eax
  00082	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00085	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00088	8b d1		 mov	 edx, ecx
  0008a	8b c1		 mov	 eax, ecx
  0008c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0008f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00094	c1 e9 08	 shr	 ecx, 8
  00097	0b d0		 or	 edx, eax
  00099	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0009f	0f b6 46 0f	 movzx	 eax, BYTE PTR [esi+15]
  000a3	c1 e2 08	 shl	 edx, 8
  000a6	0b d1		 or	 edx, ecx
  000a8	0b d0		 or	 edx, eax
  000aa	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000ad	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  000b3	33 06		 xor	 eax, DWORD PTR [esi]
  000b5	89 03		 mov	 DWORD PTR [ebx], eax
  000b7	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  000bd	33 46 04	 xor	 eax, DWORD PTR [esi+4]
  000c0	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000c3	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  000c9	33 46 08	 xor	 eax, DWORD PTR [esi+8]
  000cc	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000cf	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  000d5	33 46 0c	 xor	 eax, DWORD PTR [esi+12]

; 556  : 	L_inv(plaintext); S_inv(plaintext);

  000d8	53		 push	 ebx
  000d9	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000dc	e8 00 00 00 00	 call	 _L_inv
  000e1	53		 push	 ebx
  000e2	e8 00 00 00 00	 call	 _S_inv

; 557  : 
; 558  : 	/* Round 2 with subkey 9 */
; 559  : 	plaintext[0] ^= subkeys->y800; plaintext[1] ^= subkeys->y801; plaintext[2] ^= subkeys->y810; plaintext[3] ^= subkeys->y811;

  000e7	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  000ed	31 03		 xor	 DWORD PTR [ebx], eax
  000ef	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  000f5	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  000f8	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  000fe	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  00101	8b 87 8c 00 00
	00		 mov	 eax, DWORD PTR [edi+140]
  00107	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 560  : 	L_inv(plaintext); S_inv(plaintext);

  0010a	53		 push	 ebx
  0010b	e8 00 00 00 00	 call	 _L_inv
  00110	53		 push	 ebx
  00111	e8 00 00 00 00	 call	 _S_inv

; 561  : 
; 562  : 	/* Round 3 with subkey 8 */
; 563  : 	plaintext[0] ^= subkeys->y700; plaintext[1] ^= subkeys->y701; plaintext[2] ^= subkeys->y710; plaintext[3] ^= subkeys->y711;

  00116	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  00119	31 03		 xor	 DWORD PTR [ebx], eax
  0011b	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  0011e	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  00121	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00124	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  00127	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  0012a	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 564  : 	L_inv(plaintext); S_inv(plaintext);

  0012d	53		 push	 ebx
  0012e	e8 00 00 00 00	 call	 _L_inv
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 _S_inv

; 565  : 
; 566  : 	/* Round 4 with subkey 7 */
; 567  : 	plaintext[0] ^= subkeys->y600; plaintext[1] ^= subkeys->y601; plaintext[2] ^= subkeys->y610; plaintext[3] ^= subkeys->y611;

  00139	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0013c	31 03		 xor	 DWORD PTR [ebx], eax
  0013e	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00141	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  00144	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00147	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  0014a	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  0014d	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 568  : 	L_inv(plaintext); S_inv(plaintext);

  00150	53		 push	 ebx
  00151	e8 00 00 00 00	 call	 _L_inv
  00156	53		 push	 ebx
  00157	e8 00 00 00 00	 call	 _S_inv

; 569  : 
; 570  : 	/* Round 5 with subkey 6 */
; 571  : 	plaintext[0] ^= subkeys->y500; plaintext[1] ^= subkeys->y501; plaintext[2] ^= subkeys->y510; plaintext[3] ^= subkeys->y511;

  0015c	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  0015f	31 03		 xor	 DWORD PTR [ebx], eax
  00161	8b 47 54	 mov	 eax, DWORD PTR [edi+84]
  00164	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  00167	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  0016a	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  0016d	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  00170	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 572  : 	L_inv(plaintext); S_inv(plaintext);

  00173	53		 push	 ebx
  00174	e8 00 00 00 00	 call	 _L_inv
  00179	53		 push	 ebx
  0017a	e8 00 00 00 00	 call	 _S_inv

; 573  : 
; 574  : 	/* Round 6 with subkey 5 */
; 575  : 	plaintext[0] ^= subkeys->y400; plaintext[1] ^= subkeys->y401; plaintext[2] ^= subkeys->y410; plaintext[3] ^= subkeys->y411;

  0017f	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00182	31 03		 xor	 DWORD PTR [ebx], eax
  00184	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00187	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  0018a	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  0018d	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  00190	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00193	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 576  : 	L_inv(plaintext); S_inv(plaintext);

  00196	53		 push	 ebx
  00197	e8 00 00 00 00	 call	 _L_inv
  0019c	53		 push	 ebx
  0019d	e8 00 00 00 00	 call	 _S_inv

; 577  : 
; 578  : 	/* Round 7 with subkey 4 */
; 579  : 	plaintext[0] ^= subkeys->y300; plaintext[1] ^= subkeys->y301; plaintext[2] ^= subkeys->y310; plaintext[3] ^= subkeys->y311;

  001a2	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  001a5	31 03		 xor	 DWORD PTR [ebx], eax
  001a7	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  001aa	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  001ad	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  001b0	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  001b3	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  001b6	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 580  : 	L_inv(plaintext); S_inv(plaintext);

  001b9	53		 push	 ebx
  001ba	e8 00 00 00 00	 call	 _L_inv
  001bf	53		 push	 ebx
  001c0	e8 00 00 00 00	 call	 _S_inv

; 581  : 
; 582  : 	/* Round 8 with subkey 3 */
; 583  : 	plaintext[0] ^= subkeys->y200; plaintext[1] ^= subkeys->y201; plaintext[2] ^= subkeys->y210; plaintext[3] ^= subkeys->y211;

  001c5	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  001c8	31 03		 xor	 DWORD PTR [ebx], eax
  001ca	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  001cd	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  001d0	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  001d3	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  001d6	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  001d9	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 584  : 	L_inv(plaintext); S_inv(plaintext);

  001dc	53		 push	 ebx
  001dd	e8 00 00 00 00	 call	 _L_inv
  001e2	53		 push	 ebx
  001e3	e8 00 00 00 00	 call	 _S_inv

; 585  : 
; 586  : 	/* Round 9 with subkey 2 */
; 587  : 	plaintext[0] ^= subkeys->y100; plaintext[1] ^= subkeys->y101; plaintext[2] ^= subkeys->y110; plaintext[3] ^= subkeys->y111;

  001e8	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  001eb	83 c4 40	 add	 esp, 64			; 00000040H
  001ee	31 03		 xor	 DWORD PTR [ebx], eax
  001f0	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  001f3	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  001f6	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  001f9	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  001fc	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  001ff	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 588  : 	L_inv(plaintext); S_inv(plaintext);

  00202	53		 push	 ebx
  00203	e8 00 00 00 00	 call	 _L_inv
  00208	53		 push	 ebx
  00209	e8 00 00 00 00	 call	 _S_inv

; 589  : 
; 590  : 	/* Round 10 with subkey 1 */
; 591  : 	plaintext[0] ^= subkeys->y000; plaintext[1] ^= subkeys->y001; plaintext[2] ^= subkeys->y010; plaintext[3] ^= subkeys->y011;

  0020e	8b 07		 mov	 eax, DWORD PTR [edi]
  00210	83 c4 08	 add	 esp, 8
  00213	31 03		 xor	 DWORD PTR [ebx], eax
  00215	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00218	31 43 04	 xor	 DWORD PTR [ebx+4], eax
  0021b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0021e	31 43 08	 xor	 DWORD PTR [ebx+8], eax
  00221	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00224	31 43 0c	 xor	 DWORD PTR [ebx+12], eax

; 592  : 	/*L_inv(plaintext); S_inv(plaintext);*/
; 593  : 
; 594  : 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  00227	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00229	8b d1		 mov	 edx, ecx
  0022b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0022e	8b c1		 mov	 eax, ecx
  00230	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00235	c1 e9 08	 shr	 ecx, 8
  00238	0b d0		 or	 edx, eax
  0023a	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00240	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  00244	c1 e2 08	 shl	 edx, 8
  00247	0b d1		 or	 edx, ecx
  00249	0b d0		 or	 edx, eax
  0024b	89 13		 mov	 DWORD PTR [ebx], edx
  0024d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00250	8b d1		 mov	 edx, ecx
  00252	c1 e2 10	 shl	 edx, 16			; 00000010H
  00255	8b c1		 mov	 eax, ecx
  00257	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0025c	c1 e9 08	 shr	 ecx, 8
  0025f	0b d0		 or	 edx, eax
  00261	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00267	0f b6 43 07	 movzx	 eax, BYTE PTR [ebx+7]
  0026b	c1 e2 08	 shl	 edx, 8
  0026e	0b d1		 or	 edx, ecx
  00270	0b d0		 or	 edx, eax
  00272	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  00275	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00278	8b d1		 mov	 edx, ecx
  0027a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0027d	8b c1		 mov	 eax, ecx
  0027f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00284	c1 e9 08	 shr	 ecx, 8
  00287	0b d0		 or	 edx, eax
  00289	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0028f	0f b6 43 0b	 movzx	 eax, BYTE PTR [ebx+11]
  00293	c1 e2 08	 shl	 edx, 8
  00296	0b d1		 or	 edx, ecx
  00298	0b d0		 or	 edx, eax
  0029a	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  0029d	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  002a0	8b d1		 mov	 edx, ecx
  002a2	8b c1		 mov	 eax, ecx
  002a4	c1 e2 10	 shl	 edx, 16			; 00000010H
  002a7	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  002ac	c1 e9 08	 shr	 ecx, 8
  002af	0b d0		 or	 edx, eax
  002b1	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  002b7	0f b6 43 0f	 movzx	 eax, BYTE PTR [ebx+15]
  002bb	c1 e2 08	 shl	 edx, 8
  002be	0b d1		 or	 edx, ecx
  002c0	5f		 pop	 edi
  002c1	0b d0		 or	 edx, eax
  002c3	5e		 pop	 esi
  002c4	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  002c7	5b		 pop	 ebx

; 595  : 
; 596  : }

  002c8	5d		 pop	 ebp
  002c9	c3		 ret	 0
_grasshopper_decrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _grasshopper_encrypt
_TEXT	SEGMENT
_subkeys$ = 8						; size = 4
_plaintext$ = 12					; size = 4
_ciphertext$ = 16					; size = 4
_grasshopper_encrypt PROC				; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 494  : 	/* Round 1 with subkey 1 */
; 495  : 
; 496  : 	changeEndian(&plaintext[0]); changeEndian(&plaintext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _plaintext$[ebp]
  00007	56		 push	 esi

; 497  : 
; 498  : 	ciphertext[0] = plaintext[0] ^ subkeys->y000; ciphertext[1] = plaintext[1] ^ subkeys->y001; ciphertext[2] = plaintext[2] ^ subkeys->y010; ciphertext[3] = plaintext[3] ^ subkeys->y011;

  00008	8b 75 08	 mov	 esi, DWORD PTR _subkeys$[ebp]
  0000b	57		 push	 edi
  0000c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0000e	8b d1		 mov	 edx, ecx
  00010	c1 e2 10	 shl	 edx, 16			; 00000010H
  00013	8b c1		 mov	 eax, ecx
  00015	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0001a	c1 e9 08	 shr	 ecx, 8
  0001d	0b d0		 or	 edx, eax
  0001f	8b 7d 10	 mov	 edi, DWORD PTR _ciphertext$[ebp]
  00022	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  00026	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0002c	c1 e2 08	 shl	 edx, 8
  0002f	0b d1		 or	 edx, ecx
  00031	0b d0		 or	 edx, eax
  00033	89 13		 mov	 DWORD PTR [ebx], edx
  00035	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00038	8b d1		 mov	 edx, ecx
  0003a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0003d	8b c1		 mov	 eax, ecx
  0003f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00044	c1 e9 08	 shr	 ecx, 8
  00047	0b d0		 or	 edx, eax
  00049	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0004f	0f b6 43 07	 movzx	 eax, BYTE PTR [ebx+7]
  00053	c1 e2 08	 shl	 edx, 8
  00056	0b d1		 or	 edx, ecx
  00058	0b d0		 or	 edx, eax
  0005a	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  0005d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00060	8b d1		 mov	 edx, ecx
  00062	c1 e2 10	 shl	 edx, 16			; 00000010H
  00065	8b c1		 mov	 eax, ecx
  00067	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0006c	c1 e9 08	 shr	 ecx, 8
  0006f	0b d0		 or	 edx, eax
  00071	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00077	0f b6 43 0b	 movzx	 eax, BYTE PTR [ebx+11]
  0007b	c1 e2 08	 shl	 edx, 8
  0007e	0b d1		 or	 edx, ecx
  00080	0b d0		 or	 edx, eax
  00082	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  00085	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00088	8b d1		 mov	 edx, ecx
  0008a	8b c1		 mov	 eax, ecx
  0008c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0008f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00094	c1 e9 08	 shr	 ecx, 8
  00097	0b d0		 or	 edx, eax
  00099	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0009f	0f b6 43 0f	 movzx	 eax, BYTE PTR [ebx+15]
  000a3	c1 e2 08	 shl	 edx, 8
  000a6	0b d1		 or	 edx, ecx
  000a8	0b d0		 or	 edx, eax
  000aa	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  000ad	8b 06		 mov	 eax, DWORD PTR [esi]
  000af	33 03		 xor	 eax, DWORD PTR [ebx]
  000b1	89 07		 mov	 DWORD PTR [edi], eax
  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	33 43 04	 xor	 eax, DWORD PTR [ebx+4]
  000b9	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000bc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bf	33 43 08	 xor	 eax, DWORD PTR [ebx+8]
  000c2	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000c5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c8	33 43 0c	 xor	 eax, DWORD PTR [ebx+12]

; 499  : 	S(ciphertext); L(ciphertext);

  000cb	57		 push	 edi
  000cc	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  000cf	e8 00 00 00 00	 call	 _S
  000d4	57		 push	 edi
  000d5	e8 00 00 00 00	 call	 _L

; 500  : 
; 501  : 	/* Round 2 with subkey 2 */
; 502  : 	ciphertext[0] ^= subkeys->y100; ciphertext[1] ^= subkeys->y101; ciphertext[2] ^= subkeys->y110; ciphertext[3] ^= subkeys->y111;

  000da	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000dd	31 07		 xor	 DWORD PTR [edi], eax
  000df	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000e2	31 47 04	 xor	 DWORD PTR [edi+4], eax
  000e5	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000e8	31 47 08	 xor	 DWORD PTR [edi+8], eax
  000eb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000ee	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 503  : 	S(ciphertext); L(ciphertext);

  000f1	57		 push	 edi
  000f2	e8 00 00 00 00	 call	 _S
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 _L

; 504  : 
; 505  : 	/* Round 3 with subkey 3 */
; 506  : 	ciphertext[0] ^= subkeys->y200; ciphertext[1] ^= subkeys->y201; ciphertext[2] ^= subkeys->y210; ciphertext[3] ^= subkeys->y211;

  000fd	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00100	31 07		 xor	 DWORD PTR [edi], eax
  00102	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00105	31 47 04	 xor	 DWORD PTR [edi+4], eax
  00108	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0010b	31 47 08	 xor	 DWORD PTR [edi+8], eax
  0010e	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00111	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 507  : 	S(ciphertext); L(ciphertext);

  00114	57		 push	 edi
  00115	e8 00 00 00 00	 call	 _S
  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 _L

; 508  : 	
; 509  : 	/* Round 4 with subkey 4 */
; 510  : 	ciphertext[0] ^= subkeys->y300; ciphertext[1] ^= subkeys->y301; ciphertext[2] ^= subkeys->y310; ciphertext[3] ^= subkeys->y311;

  00120	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00123	31 07		 xor	 DWORD PTR [edi], eax
  00125	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00128	31 47 04	 xor	 DWORD PTR [edi+4], eax
  0012b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0012e	31 47 08	 xor	 DWORD PTR [edi+8], eax
  00131	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00134	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 511  : 	S(ciphertext); L(ciphertext);

  00137	57		 push	 edi
  00138	e8 00 00 00 00	 call	 _S
  0013d	57		 push	 edi
  0013e	e8 00 00 00 00	 call	 _L

; 512  : 	
; 513  : 	/* Round 5 with subkey 5 */
; 514  : 	ciphertext[0] ^= subkeys->y400; ciphertext[1] ^= subkeys->y401; ciphertext[2] ^= subkeys->y410; ciphertext[3] ^= subkeys->y411;

  00143	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00146	31 07		 xor	 DWORD PTR [edi], eax
  00148	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0014b	31 47 04	 xor	 DWORD PTR [edi+4], eax
  0014e	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00151	31 47 08	 xor	 DWORD PTR [edi+8], eax
  00154	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00157	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 515  : 	S(ciphertext); L(ciphertext);

  0015a	57		 push	 edi
  0015b	e8 00 00 00 00	 call	 _S
  00160	57		 push	 edi
  00161	e8 00 00 00 00	 call	 _L

; 516  : 	
; 517  : 	/* Round 6 with subkey 6 */
; 518  : 	ciphertext[0] ^= subkeys->y500; ciphertext[1] ^= subkeys->y501; ciphertext[2] ^= subkeys->y510; ciphertext[3] ^= subkeys->y511;

  00166	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00169	31 07		 xor	 DWORD PTR [edi], eax
  0016b	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0016e	31 47 04	 xor	 DWORD PTR [edi+4], eax
  00171	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00174	31 47 08	 xor	 DWORD PTR [edi+8], eax
  00177	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0017a	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 519  : 	S(ciphertext); L(ciphertext);

  0017d	57		 push	 edi
  0017e	e8 00 00 00 00	 call	 _S
  00183	57		 push	 edi
  00184	e8 00 00 00 00	 call	 _L

; 520  : 	
; 521  : 	/* Round 7 with subkey 7 */
; 522  : 	ciphertext[0] ^= subkeys->y600; ciphertext[1] ^= subkeys->y601; ciphertext[2] ^= subkeys->y610; ciphertext[3] ^= subkeys->y611;

  00189	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0018c	31 07		 xor	 DWORD PTR [edi], eax
  0018e	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00191	31 47 04	 xor	 DWORD PTR [edi+4], eax
  00194	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  00197	31 47 08	 xor	 DWORD PTR [edi+8], eax
  0019a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0019d	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 523  : 	S(ciphertext); L(ciphertext);

  001a0	57		 push	 edi
  001a1	e8 00 00 00 00	 call	 _S
  001a6	57		 push	 edi
  001a7	e8 00 00 00 00	 call	 _L

; 524  : 	
; 525  : 	/* Round 8 with subkey 8 */
; 526  : 	ciphertext[0] ^= subkeys->y700; ciphertext[1] ^= subkeys->y701; ciphertext[2] ^= subkeys->y710; ciphertext[3] ^= subkeys->y711;

  001ac	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  001af	31 07		 xor	 DWORD PTR [edi], eax
  001b1	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  001b4	31 47 04	 xor	 DWORD PTR [edi+4], eax
  001b7	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  001ba	31 47 08	 xor	 DWORD PTR [edi+8], eax
  001bd	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  001c0	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 527  : 	S(ciphertext); L(ciphertext);

  001c3	57		 push	 edi
  001c4	e8 00 00 00 00	 call	 _S
  001c9	57		 push	 edi
  001ca	e8 00 00 00 00	 call	 _L

; 528  : 	
; 529  : 	/* Round 9 with subkey 9 */
; 530  : 	ciphertext[0] ^= subkeys->y800; ciphertext[1] ^= subkeys->y801; ciphertext[2] ^= subkeys->y810; ciphertext[3] ^= subkeys->y811;

  001cf	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  001d5	83 c4 40	 add	 esp, 64			; 00000040H
  001d8	31 07		 xor	 DWORD PTR [edi], eax
  001da	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  001e0	31 47 04	 xor	 DWORD PTR [edi+4], eax
  001e3	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  001e9	31 47 08	 xor	 DWORD PTR [edi+8], eax
  001ec	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  001f2	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 531  : 	S(ciphertext); L(ciphertext);

  001f5	57		 push	 edi
  001f6	e8 00 00 00 00	 call	 _S
  001fb	57		 push	 edi
  001fc	e8 00 00 00 00	 call	 _L

; 532  : 	
; 533  : 	/* Round 10 with subkey 10 */
; 534  : 	ciphertext[0] ^= subkeys->y900; ciphertext[1] ^= subkeys->y901; ciphertext[2] ^= subkeys->y910; ciphertext[3] ^= subkeys->y911;

  00201	8b 86 90 00 00
	00		 mov	 eax, DWORD PTR [esi+144]
  00207	83 c4 08	 add	 esp, 8
  0020a	31 07		 xor	 DWORD PTR [edi], eax
  0020c	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
  00212	31 47 04	 xor	 DWORD PTR [edi+4], eax
  00215	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [esi+152]
  0021b	31 47 08	 xor	 DWORD PTR [edi+8], eax
  0021e	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  00224	31 47 0c	 xor	 DWORD PTR [edi+12], eax

; 535  : 
; 536  : 	changeEndian(&ciphertext[0]); changeEndian(&ciphertext[1]); changeEndian(&plaintext[2]); changeEndian(&plaintext[3]);

  00227	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00229	8b d1		 mov	 edx, ecx
  0022b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0022e	8b c1		 mov	 eax, ecx
  00230	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00235	c1 e9 08	 shr	 ecx, 8
  00238	0b d0		 or	 edx, eax
  0023a	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00240	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  00244	c1 e2 08	 shl	 edx, 8
  00247	0b d1		 or	 edx, ecx
  00249	0b d0		 or	 edx, eax
  0024b	89 17		 mov	 DWORD PTR [edi], edx
  0024d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00250	8b d1		 mov	 edx, ecx
  00252	c1 e2 10	 shl	 edx, 16			; 00000010H
  00255	8b c1		 mov	 eax, ecx
  00257	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0025c	c1 e9 08	 shr	 ecx, 8
  0025f	0b d0		 or	 edx, eax
  00261	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00267	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  0026b	c1 e2 08	 shl	 edx, 8
  0026e	0b d1		 or	 edx, ecx
  00270	0b d0		 or	 edx, eax
  00272	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00275	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00278	8b d1		 mov	 edx, ecx
  0027a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0027d	8b c1		 mov	 eax, ecx
  0027f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00284	c1 e9 08	 shr	 ecx, 8
  00287	0b d0		 or	 edx, eax
  00289	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0028f	0f b6 43 0b	 movzx	 eax, BYTE PTR [ebx+11]
  00293	c1 e2 08	 shl	 edx, 8
  00296	0b d1		 or	 edx, ecx
  00298	0b d0		 or	 edx, eax
  0029a	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  0029d	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  002a0	8b d1		 mov	 edx, ecx
  002a2	8b c1		 mov	 eax, ecx
  002a4	c1 e2 10	 shl	 edx, 16			; 00000010H
  002a7	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  002ac	c1 e9 08	 shr	 ecx, 8
  002af	0b d0		 or	 edx, eax
  002b1	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  002b7	0f b6 43 0f	 movzx	 eax, BYTE PTR [ebx+15]
  002bb	c1 e2 08	 shl	 edx, 8
  002be	0b d1		 or	 edx, ecx
  002c0	5f		 pop	 edi
  002c1	0b d0		 or	 edx, eax
  002c3	5e		 pop	 esi
  002c4	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  002c7	5b		 pop	 ebx

; 537  : 	
; 538  : }

  002c8	5d		 pop	 ebp
  002c9	c3		 ret	 0
_grasshopper_encrypt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _grasshopper_set_key
_TEXT	SEGMENT
_subkeys$GSCopy$1$ = -604				; size = 4
tv9056 = -600						; size = 4
tv9040 = -596						; size = 4
_valtmp$1 = -592					; size = 16
_valtmp$2 = -592					; size = 16
_valtmp$3 = -592					; size = 16
_valtmp$4 = -592					; size = 16
_valtmp$5 = -592					; size = 16
_valtmp$6 = -592					; size = 16
_valtmp$7 = -592					; size = 16
_valtmp$8 = -592					; size = 16
_valtmp$9 = -592					; size = 16
_valtmp$10 = -592					; size = 16
_valtmp$11 = -592					; size = 16
_valtmp$12 = -592					; size = 16
_valtmp$13 = -592					; size = 16
_valtmp$14 = -592					; size = 16
_valtmp$15 = -592					; size = 16
_valtmp$16 = -592					; size = 16
_valtmp$17 = -592					; size = 16
_valtmp$18 = -592					; size = 16
_valtmp$19 = -592					; size = 16
_valtmp$20 = -592					; size = 16
_valtmp$21 = -592					; size = 16
_valtmp$22 = -592					; size = 16
_valtmp$23 = -592					; size = 16
_valtmp$24 = -592					; size = 16
_valtmp$25 = -592					; size = 16
_valtmp$26 = -592					; size = 16
_valtmp$27 = -592					; size = 16
_valtmp$28 = -592					; size = 16
_valtmp$29 = -592					; size = 16
_valtmp$30 = -592					; size = 16
_valtmp$31 = -592					; size = 16
_valtmp$32 = -592					; size = 16
_blocktmp$20$ = -576					; size = 16
_valtmp$33 = -576					; size = 16
_valtmp$34 = -576					; size = 16
_valtmp$35 = -576					; size = 16
_valtmp$36 = -576					; size = 16
_valtmp$37 = -576					; size = 16
_valtmp$38 = -576					; size = 16
_valtmp$39 = -576					; size = 16
_valtmp$40 = -576					; size = 16
_valtmp$41 = -576					; size = 16
_valtmp$42 = -576					; size = 16
_valtmp$43 = -576					; size = 16
_valtmp$44 = -576					; size = 16
_valtmp$45 = -576					; size = 16
_valtmp$46 = -576					; size = 16
_valtmp$47 = -576					; size = 16
_valtmp$48 = -576					; size = 16
_blocktmp2$ = -576					; size = 16
_blocktmp$17$ = -560					; size = 4
_blocktmp$ = -556					; size = 16
_tmpblock$49 = -540					; size = 16
_tmpblock$50 = -540					; size = 16
_tmpblock$2$ = -524					; size = 4
_tmpblock$2$ = -524					; size = 4
_blocktmp$18$ = -524					; size = 4
_tmpblock$3$ = -520					; size = 4
_tmpblock$3$ = -520					; size = 4
_blocktmp$16$ = -520					; size = 4
_c_values$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_master_key$ = 8					; size = 4
_subkeys$ = 12						; size = 4
_grasshopper_set_key PROC				; COMDAT

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 0c	 mov	 esi, DWORD PTR _subkeys$[ebp]
  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	89 b5 a4 fd ff
	ff		 mov	 DWORD PTR _subkeys$GSCopy$1$[ebp], esi
  00023	8d b5 00 fe ff
	ff		 lea	 esi, DWORD PTR _c_values$[ebp+4]
  00029	57		 push	 edi
  0002a	89 85 ac fd ff
	ff		 mov	 DWORD PTR tv9040[ebp], eax
  00030	c7 85 a8 fd ff
	ff 20 00 00 00	 mov	 DWORD PTR tv9056[ebp], 32 ; 00000020H
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@grasshoppe:

; 418  : 
; 419  : 	unsigned long c_values[32][4], blocktmp[4], blocktmp2[4];
; 420  : 	unsigned char i;
; 421  : 
; 422  : 	/* Compute the C_i values       */
; 423  : 	for(i = 0;i < 32;i++)
; 424  : 	{
; 425  : 		blocktmp[0] = 0L;
; 426  : 		blocktmp[1] = 0L;
; 427  : 		blocktmp[2] = 0L;
; 428  : 		blocktmp[3] = (unsigned long)(i + 1);

  00040	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], eax

; 429  : 		L(blocktmp);

  00046	8b d8		 mov	 ebx, eax
  00048	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _blocktmp$[ebp+4], 0
  00052	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$48[ebp]
  00058	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _blocktmp$[ebp+8], 0
  00062	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _blocktmp$[ebp], 0
  0006c	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00073	c1 eb 08	 shr	 ebx, 8
  00076	50		 push	 eax
  00077	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$48[ebp], xmm0
  0007e	89 9d e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], ebx
  00084	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _blocktmp$[ebp+8], 0
  0008e	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _blocktmp$[ebp+4], 0
  00098	e8 00 00 00 00	 call	 _ll
  0009d	0f b6 f8	 movzx	 edi, al
  000a0	c1 e7 18	 shl	 edi, 24			; 00000018H
  000a3	8b c7		 mov	 eax, edi
  000a5	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  000ab	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  000b2	c1 e0 18	 shl	 eax, 24			; 00000018H
  000b5	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], eax
  000bb	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], eax
  000c1	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$47[ebp]
  000c7	c1 eb 08	 shr	 ebx, 8
  000ca	50		 push	 eax
  000cb	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$47[ebp], xmm0
  000d2	89 9d f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], ebx
  000d8	89 9d e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], ebx
  000de	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _blocktmp$[ebp+8], 0
  000e8	e8 00 00 00 00	 call	 _ll
  000ed	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$16$[ebp]
  000f3	0f b6 d8	 movzx	 ebx, al
  000f6	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$18$[ebp]
  000fc	c1 e8 08	 shr	 eax, 8
  000ff	c1 e3 18	 shl	 ebx, 24			; 00000018H
  00102	c1 ef 08	 shr	 edi, 8
  00105	0b df		 or	 ebx, edi
  00107	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], eax
  0010d	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  00113	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  0011a	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], eax
  00120	8b c1		 mov	 eax, ecx
  00122	c1 e0 18	 shl	 eax, 24			; 00000018H
  00125	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], eax
  0012b	89 85 dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], eax
  00131	8b c3		 mov	 eax, ebx
  00133	c1 e0 18	 shl	 eax, 24			; 00000018H
  00136	c1 e9 08	 shr	 ecx, 8
  00139	0b c8		 or	 ecx, eax
  0013b	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$46[ebp]
  00141	50		 push	 eax
  00142	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$46[ebp], xmm0
  00149	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], ecx
  0014f	89 8d d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], ecx
  00155	e8 00 00 00 00	 call	 _ll
  0015a	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  00160	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  00166	0f b6 f8	 movzx	 edi, al
  00169	8b c1		 mov	 eax, ecx
  0016b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0016e	c1 e7 18	 shl	 edi, 24			; 00000018H
  00171	c1 eb 08	 shr	 ebx, 8
  00174	c1 ea 08	 shr	 edx, 8
  00177	0b fb		 or	 edi, ebx
  00179	0b d0		 or	 edx, eax
  0017b	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  00181	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00188	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  0018e	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  00194	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  0019a	8b c2		 mov	 eax, edx
  0019c	c1 e0 18	 shl	 eax, 24			; 00000018H
  0019f	c1 e9 08	 shr	 ecx, 8
  001a2	0b c8		 or	 ecx, eax
  001a4	c1 ea 08	 shr	 edx, 8
  001a7	8b c7		 mov	 eax, edi
  001a9	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  001af	c1 e0 18	 shl	 eax, 24			; 00000018H
  001b2	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$45[ebp], xmm0
  001b9	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  001bf	0b d0		 or	 edx, eax
  001c1	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$45[ebp]
  001c7	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  001cd	50		 push	 eax
  001ce	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  001d4	e8 00 00 00 00	 call	 _ll
  001d9	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  001df	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  001e5	0f b6 d8	 movzx	 ebx, al
  001e8	8b c1		 mov	 eax, ecx
  001ea	c1 e0 18	 shl	 eax, 24			; 00000018H
  001ed	c1 ea 08	 shr	 edx, 8
  001f0	0b d0		 or	 edx, eax
  001f2	c1 e3 18	 shl	 ebx, 24			; 00000018H
  001f5	c1 ef 08	 shr	 edi, 8
  001f8	0b df		 or	 ebx, edi
  001fa	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  00200	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  00206	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  0020d	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  00213	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00219	8b c2		 mov	 eax, edx
  0021b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0021e	c1 e9 08	 shr	 ecx, 8
  00221	0b c8		 or	 ecx, eax
  00223	c1 ea 08	 shr	 edx, 8
  00226	8b c3		 mov	 eax, ebx
  00228	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  0022e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00231	0b d0		 or	 edx, eax
  00233	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  00239	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$44[ebp]
  0023f	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  00245	50		 push	 eax
  00246	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$44[ebp], xmm0
  0024d	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  00253	e8 00 00 00 00	 call	 _ll
  00258	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  0025e	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  00264	0f b6 f8	 movzx	 edi, al
  00267	8b c1		 mov	 eax, ecx
  00269	c1 e0 18	 shl	 eax, 24			; 00000018H
  0026c	c1 ea 08	 shr	 edx, 8
  0026f	0b d0		 or	 edx, eax
  00271	c1 e7 18	 shl	 edi, 24			; 00000018H
  00274	c1 eb 08	 shr	 ebx, 8
  00277	0b fb		 or	 edi, ebx
  00279	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  0027f	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  00285	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  0028c	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  00292	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00298	8b c2		 mov	 eax, edx
  0029a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0029d	c1 e9 08	 shr	 ecx, 8
  002a0	0b c8		 or	 ecx, eax
  002a2	c1 ea 08	 shr	 edx, 8
  002a5	8b c7		 mov	 eax, edi
  002a7	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  002ad	c1 e0 18	 shl	 eax, 24			; 00000018H
  002b0	0b d0		 or	 edx, eax
  002b2	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  002b8	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$43[ebp]
  002be	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  002c4	50		 push	 eax
  002c5	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$43[ebp], xmm0
  002cc	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  002d2	e8 00 00 00 00	 call	 _ll
  002d7	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  002dd	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  002e3	0f b6 d8	 movzx	 ebx, al
  002e6	8b c1		 mov	 eax, ecx
  002e8	c1 e3 18	 shl	 ebx, 24			; 00000018H
  002eb	c1 ef 08	 shr	 edi, 8
  002ee	0b df		 or	 ebx, edi
  002f0	c1 ea 08	 shr	 edx, 8
  002f3	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  002f9	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00300	c1 e0 18	 shl	 eax, 24			; 00000018H
  00303	0b d0		 or	 edx, eax
  00305	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$42[ebp], xmm0
  0030c	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  00312	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  00318	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  0031e	8b c2		 mov	 eax, edx
  00320	c1 e0 18	 shl	 eax, 24			; 00000018H
  00323	c1 e9 08	 shr	 ecx, 8
  00326	0b c8		 or	 ecx, eax
  00328	c1 ea 08	 shr	 edx, 8
  0032b	8b c3		 mov	 eax, ebx
  0032d	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  00333	c1 e0 18	 shl	 eax, 24			; 00000018H
  00336	0b d0		 or	 edx, eax
  00338	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  0033e	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$42[ebp]
  00344	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  0034a	50		 push	 eax
  0034b	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  00351	e8 00 00 00 00	 call	 _ll
  00356	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  0035c	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  00362	0f b6 f8	 movzx	 edi, al
  00365	8b c1		 mov	 eax, ecx
  00367	c1 e0 18	 shl	 eax, 24			; 00000018H
  0036a	c1 ea 08	 shr	 edx, 8
  0036d	0b d0		 or	 edx, eax
  0036f	c1 e7 18	 shl	 edi, 24			; 00000018H
  00372	c1 eb 08	 shr	 ebx, 8
  00375	0b fb		 or	 edi, ebx
  00377	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  0037d	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  00383	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  0038a	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  00390	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00396	8b c2		 mov	 eax, edx
  00398	c1 e0 18	 shl	 eax, 24			; 00000018H
  0039b	c1 e9 08	 shr	 ecx, 8
  0039e	0b c8		 or	 ecx, eax
  003a0	c1 ea 08	 shr	 edx, 8
  003a3	8b c7		 mov	 eax, edi
  003a5	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  003ab	c1 e0 18	 shl	 eax, 24			; 00000018H
  003ae	0b d0		 or	 edx, eax
  003b0	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  003b6	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$41[ebp]
  003bc	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  003c2	50		 push	 eax
  003c3	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$41[ebp], xmm0
  003ca	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  003d0	e8 00 00 00 00	 call	 _ll
  003d5	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  003db	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  003e1	0f b6 d8	 movzx	 ebx, al
  003e4	8b c1		 mov	 eax, ecx
  003e6	c1 e0 18	 shl	 eax, 24			; 00000018H
  003e9	c1 ea 08	 shr	 edx, 8
  003ec	0b d0		 or	 edx, eax
  003ee	c1 e3 18	 shl	 ebx, 24			; 00000018H
  003f1	c1 ef 08	 shr	 edi, 8
  003f4	0b df		 or	 ebx, edi
  003f6	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  003fc	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  00402	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00409	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  0040f	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00415	8b c2		 mov	 eax, edx
  00417	c1 e0 18	 shl	 eax, 24			; 00000018H
  0041a	c1 e9 08	 shr	 ecx, 8
  0041d	0b c8		 or	 ecx, eax
  0041f	c1 ea 08	 shr	 edx, 8
  00422	8b c3		 mov	 eax, ebx
  00424	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  0042a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0042d	0b d0		 or	 edx, eax
  0042f	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  00435	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$40[ebp]
  0043b	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  00441	50		 push	 eax
  00442	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$40[ebp], xmm0
  00449	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  0044f	e8 00 00 00 00	 call	 _ll
  00454	0f b6 f8	 movzx	 edi, al
  00457	c1 e7 18	 shl	 edi, 24			; 00000018H
  0045a	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  00460	8b c1		 mov	 eax, ecx
  00462	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  00468	c1 e0 18	 shl	 eax, 24			; 00000018H
  0046b	c1 ea 08	 shr	 edx, 8
  0046e	0b d0		 or	 edx, eax
  00470	c1 eb 08	 shr	 ebx, 8
  00473	0b fb		 or	 edi, ebx
  00475	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  0047b	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  00481	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00488	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  0048e	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00494	8b c2		 mov	 eax, edx
  00496	c1 e0 18	 shl	 eax, 24			; 00000018H
  00499	c1 e9 08	 shr	 ecx, 8
  0049c	0b c8		 or	 ecx, eax
  0049e	c1 ea 08	 shr	 edx, 8
  004a1	8b c7		 mov	 eax, edi
  004a3	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  004a9	c1 e0 18	 shl	 eax, 24			; 00000018H
  004ac	0b d0		 or	 edx, eax
  004ae	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  004b4	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$39[ebp]
  004ba	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  004c0	50		 push	 eax
  004c1	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$39[ebp], xmm0
  004c8	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  004ce	e8 00 00 00 00	 call	 _ll
  004d3	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  004d9	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  004df	0f b6 d8	 movzx	 ebx, al
  004e2	8b c1		 mov	 eax, ecx
  004e4	c1 e0 18	 shl	 eax, 24			; 00000018H
  004e7	c1 ea 08	 shr	 edx, 8
  004ea	0b d0		 or	 edx, eax
  004ec	c1 e3 18	 shl	 ebx, 24			; 00000018H
  004ef	c1 ef 08	 shr	 edi, 8
  004f2	0b df		 or	 ebx, edi
  004f4	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  004fa	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  00500	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00507	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  0050d	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00513	8b c2		 mov	 eax, edx
  00515	c1 e0 18	 shl	 eax, 24			; 00000018H
  00518	c1 e9 08	 shr	 ecx, 8
  0051b	0b c8		 or	 ecx, eax
  0051d	c1 ea 08	 shr	 edx, 8
  00520	8b c3		 mov	 eax, ebx
  00522	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  00528	c1 e0 18	 shl	 eax, 24			; 00000018H
  0052b	0b d0		 or	 edx, eax
  0052d	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  00533	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$38[ebp]
  00539	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  0053f	50		 push	 eax
  00540	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$38[ebp], xmm0
  00547	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  0054d	e8 00 00 00 00	 call	 _ll
  00552	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  00558	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  0055e	0f b6 f8	 movzx	 edi, al
  00561	8b c1		 mov	 eax, ecx
  00563	c1 e7 18	 shl	 edi, 24			; 00000018H
  00566	c1 eb 08	 shr	 ebx, 8
  00569	c1 e0 18	 shl	 eax, 24			; 00000018H
  0056c	0b fb		 or	 edi, ebx
  0056e	c1 ea 08	 shr	 edx, 8
  00571	0b d0		 or	 edx, eax
  00573	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  00579	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00580	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  00586	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  0058c	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00592	8b c2		 mov	 eax, edx
  00594	c1 e9 08	 shr	 ecx, 8
  00597	c1 e0 18	 shl	 eax, 24			; 00000018H
  0059a	0b c8		 or	 ecx, eax
  0059c	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$37[ebp], xmm0
  005a3	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  005a9	8b c7		 mov	 eax, edi
  005ab	c1 ea 08	 shr	 edx, 8
  005ae	c1 e0 18	 shl	 eax, 24			; 00000018H
  005b1	0b d0		 or	 edx, eax
  005b3	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  005b9	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$37[ebp]
  005bf	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  005c5	50		 push	 eax
  005c6	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  005cc	e8 00 00 00 00	 call	 _ll
  005d1	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  005d7	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  005dd	0f b6 d8	 movzx	 ebx, al
  005e0	8b c1		 mov	 eax, ecx
  005e2	c1 e0 18	 shl	 eax, 24			; 00000018H
  005e5	c1 ea 08	 shr	 edx, 8
  005e8	0b d0		 or	 edx, eax
  005ea	c1 e3 18	 shl	 ebx, 24			; 00000018H
  005ed	c1 ef 08	 shr	 edi, 8
  005f0	0b df		 or	 ebx, edi
  005f2	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  005f8	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  005fe	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00605	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  0060b	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00611	8b c2		 mov	 eax, edx
  00613	c1 e0 18	 shl	 eax, 24			; 00000018H
  00616	c1 e9 08	 shr	 ecx, 8
  00619	0b c8		 or	 ecx, eax
  0061b	c1 ea 08	 shr	 edx, 8
  0061e	8b c3		 mov	 eax, ebx
  00620	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  00626	c1 e0 18	 shl	 eax, 24			; 00000018H
  00629	0b d0		 or	 edx, eax
  0062b	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  00631	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$36[ebp]
  00637	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  0063d	50		 push	 eax
  0063e	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$36[ebp], xmm0
  00645	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  0064b	e8 00 00 00 00	 call	 _ll
  00650	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  00656	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  0065c	0f b6 f8	 movzx	 edi, al
  0065f	8b c1		 mov	 eax, ecx
  00661	c1 e0 18	 shl	 eax, 24			; 00000018H
  00664	c1 ea 08	 shr	 edx, 8
  00667	0b d0		 or	 edx, eax
  00669	c1 e7 18	 shl	 edi, 24			; 00000018H
  0066c	c1 eb 08	 shr	 ebx, 8
  0066f	0b fb		 or	 edi, ebx
  00671	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  00677	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  0067d	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00684	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  0068a	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00690	8b c2		 mov	 eax, edx
  00692	c1 e0 18	 shl	 eax, 24			; 00000018H
  00695	c1 e9 08	 shr	 ecx, 8
  00698	0b c8		 or	 ecx, eax
  0069a	c1 ea 08	 shr	 edx, 8
  0069d	8b c7		 mov	 eax, edi
  0069f	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  006a5	c1 e0 18	 shl	 eax, 24			; 00000018H
  006a8	0b d0		 or	 edx, eax
  006aa	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  006b0	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$35[ebp]
  006b6	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  006bc	50		 push	 eax
  006bd	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$35[ebp], xmm0
  006c4	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  006ca	e8 00 00 00 00	 call	 _ll
  006cf	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$18$[ebp]
  006d5	0f b6 d8	 movzx	 ebx, al
  006d8	c1 e3 18	 shl	 ebx, 24			; 00000018H
  006db	c1 ef 08	 shr	 edi, 8
  006de	0b df		 or	 ebx, edi
  006e0	c1 ea 08	 shr	 edx, 8
  006e3	89 9d d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], ebx
  006e9	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  006f0	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$34[ebp], xmm0
  006f7	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$17$[ebp]
  006fd	8b c1		 mov	 eax, ecx
  006ff	c1 e0 18	 shl	 eax, 24			; 00000018H
  00702	0b d0		 or	 edx, eax
  00704	c1 e9 08	 shr	 ecx, 8
  00707	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], edx
  0070d	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], edx
  00713	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _blocktmp$16$[ebp]
  00719	8b c2		 mov	 eax, edx
  0071b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0071e	0b c8		 or	 ecx, eax
  00720	c1 ea 08	 shr	 edx, 8
  00723	8b c3		 mov	 eax, ebx
  00725	89 8d d0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$17$[ebp], ecx
  0072b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0072e	0b d0		 or	 edx, eax
  00730	89 8d dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], ecx
  00736	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$34[ebp]
  0073c	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], edx
  00742	50		 push	 eax
  00743	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], edx
  00749	e8 00 00 00 00	 call	 _ll
  0074e	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$18$[ebp]
  00754	0f b6 f8	 movzx	 edi, al
  00757	c1 eb 08	 shr	 ebx, 8
  0075a	c1 e7 18	 shl	 edi, 24			; 00000018H
  0075d	0b fb		 or	 edi, ebx
  0075f	c1 e9 08	 shr	 ecx, 8
  00762	8b 9d d0 fd ff
	ff		 mov	 ebx, DWORD PTR _blocktmp$17$[ebp]
  00768	8b c3		 mov	 eax, ebx
  0076a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0076d	0b c8		 or	 ecx, eax
  0076f	c1 eb 08	 shr	 ebx, 8
  00772	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$18$[ebp], ecx
  00778	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _blocktmp$16$[ebp]
  0077e	8b c1		 mov	 eax, ecx
  00780	c1 e0 18	 shl	 eax, 24			; 00000018H
  00783	0b d8		 or	 ebx, eax
  00785	c1 e9 08	 shr	 ecx, 8
  00788	8b c7		 mov	 eax, edi
  0078a	89 bd d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], edi
  00790	0f 10 85 d4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _blocktmp$[ebp]
  00797	c1 e0 18	 shl	 eax, 24			; 00000018H
  0079a	0b c8		 or	 ecx, eax
  0079c	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$33[ebp]
  007a2	50		 push	 eax
  007a3	0f 11 85 c0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$33[ebp], xmm0
  007aa	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$16$[ebp], ecx
  007b0	e8 00 00 00 00	 call	 _ll
  007b5	0f b6 c0	 movzx	 eax, al
  007b8	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  007bb	c1 e0 18	 shl	 eax, 24			; 00000018H
  007be	83 c4 40	 add	 esp, 64			; 00000040H
  007c1	c1 ef 08	 shr	 edi, 8
  007c4	0b c7		 or	 eax, edi

; 430  : 		c_values[i][0] = blocktmp[0]; c_values[i][1] = blocktmp[1]; c_values[i][2] = blocktmp[2]; c_values[i][3] = blocktmp[3];

  007c6	89 46 ec	 mov	 DWORD PTR [esi-20], eax
  007c9	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$16$[ebp]
  007cf	89 46 f0	 mov	 DWORD PTR [esi-16], eax
  007d2	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$18$[ebp]
  007d8	89 5e f4	 mov	 DWORD PTR [esi-12], ebx
  007db	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  007de	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR tv9040[ebp]
  007e4	40		 inc	 eax
  007e5	83 ad a8 fd ff
	ff 01		 sub	 DWORD PTR tv9056[ebp], 1
  007ec	89 85 ac fd ff
	ff		 mov	 DWORD PTR tv9040[ebp], eax
  007f2	0f 85 48 f8 ff
	ff		 jne	 $LL4@grasshoppe

; 431  : 	}
; 432  : 
; 433  : 
; 434  : 	/* Compute subkeys K_1 and K_2  */
; 435  : 	subkeys->y000 = master_key[0]; subkeys->y001 = master_key[1]; subkeys->y010 = master_key[2]; subkeys->y011 = master_key[3];

  007f8	8b 9d a4 fd ff
	ff		 mov	 ebx, DWORD PTR _subkeys$GSCopy$1$[ebp]
  007fe	8b 4d 08	 mov	 ecx, DWORD PTR _master_key$[ebp]
  00801	8b 01		 mov	 eax, DWORD PTR [ecx]
  00803	89 03		 mov	 DWORD PTR [ebx], eax
  00805	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00808	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0080b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0080e	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00811	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00814	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 436  : 	subkeys->y100 = master_key[4]; subkeys->y101 = master_key[5]; subkeys->y110 = master_key[6]; subkeys->y111 = master_key[7];

  00817	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0081a	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0081d	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00820	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  00823	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00826	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  00829	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 437  : 
; 438  : 	changeEndian(&subkeys->y000); changeEndian(&subkeys->y010); changeEndian(&subkeys->y001); changeEndian(&subkeys->y011);

  0082c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0082e	8b d1		 mov	 edx, ecx
  00830	c1 e2 10	 shl	 edx, 16			; 00000010H
  00833	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  00836	8b c1		 mov	 eax, ecx
  00838	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0083d	c1 e9 08	 shr	 ecx, 8
  00840	0b d0		 or	 edx, eax
  00842	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00848	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  0084c	c1 e2 08	 shl	 edx, 8
  0084f	0b d1		 or	 edx, ecx
  00851	0b d0		 or	 edx, eax
  00853	89 13		 mov	 DWORD PTR [ebx], edx
  00855	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00858	8b d1		 mov	 edx, ecx
  0085a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0085d	8b c1		 mov	 eax, ecx
  0085f	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00864	c1 e9 08	 shr	 ecx, 8
  00867	0b d0		 or	 edx, eax
  00869	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0086f	0f b6 43 0b	 movzx	 eax, BYTE PTR [ebx+11]
  00873	c1 e2 08	 shl	 edx, 8
  00876	0b d1		 or	 edx, ecx
  00878	0b d0		 or	 edx, eax
  0087a	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  0087d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00880	8b d1		 mov	 edx, ecx
  00882	c1 e2 10	 shl	 edx, 16			; 00000010H
  00885	8b c1		 mov	 eax, ecx
  00887	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0088c	c1 e9 08	 shr	 ecx, 8
  0088f	0b d0		 or	 edx, eax
  00891	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00897	0f b6 43 07	 movzx	 eax, BYTE PTR [ebx+7]
  0089b	c1 e2 08	 shl	 edx, 8
  0089e	0b d1		 or	 edx, ecx
  008a0	0b d0		 or	 edx, eax
  008a2	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  008a5	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  008a8	8b d1		 mov	 edx, ecx
  008aa	c1 e2 10	 shl	 edx, 16			; 00000010H
  008ad	8b c1		 mov	 eax, ecx
  008af	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  008b4	c1 e9 08	 shr	 ecx, 8
  008b7	0b d0		 or	 edx, eax
  008b9	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  008bf	0f b6 43 0f	 movzx	 eax, BYTE PTR [ebx+15]
  008c3	c1 e2 08	 shl	 edx, 8
  008c6	0b d1		 or	 edx, ecx
  008c8	0b d0		 or	 edx, eax
  008ca	89 53 0c	 mov	 DWORD PTR [ebx+12], edx

; 439  : 	changeEndian(&subkeys->y100); changeEndian(&subkeys->y101); changeEndian(&subkeys->y110); changeEndian(&subkeys->y111);

  008cd	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  008d0	8b d1		 mov	 edx, ecx
  008d2	8b c1		 mov	 eax, ecx
  008d4	c1 e2 10	 shl	 edx, 16			; 00000010H
  008d7	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  008dc	c1 e9 08	 shr	 ecx, 8
  008df	0b d0		 or	 edx, eax
  008e1	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  008e7	0f b6 43 13	 movzx	 eax, BYTE PTR [ebx+19]
  008eb	c1 e2 08	 shl	 edx, 8
  008ee	0b d1		 or	 edx, ecx
  008f0	0b d0		 or	 edx, eax
  008f2	89 53 10	 mov	 DWORD PTR [ebx+16], edx
  008f5	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  008f8	8b d1		 mov	 edx, ecx
  008fa	c1 e2 10	 shl	 edx, 16			; 00000010H
  008fd	8b c1		 mov	 eax, ecx
  008ff	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00904	c1 e9 08	 shr	 ecx, 8
  00907	0b d0		 or	 edx, eax
  00909	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0090f	0f b6 43 17	 movzx	 eax, BYTE PTR [ebx+23]
  00913	c1 e2 08	 shl	 edx, 8
  00916	0b d1		 or	 edx, ecx
  00918	0b d0		 or	 edx, eax
  0091a	89 53 14	 mov	 DWORD PTR [ebx+20], edx
  0091d	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00920	8b d1		 mov	 edx, ecx
  00922	c1 e2 10	 shl	 edx, 16			; 00000010H
  00925	8b c1		 mov	 eax, ecx
  00927	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0092c	c1 e9 08	 shr	 ecx, 8
  0092f	0b d0		 or	 edx, eax
  00931	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00937	0f b6 43 1b	 movzx	 eax, BYTE PTR [ebx+27]
  0093b	c1 e2 08	 shl	 edx, 8
  0093e	0b d1		 or	 edx, ecx
  00940	0b d0		 or	 edx, eax
  00942	89 53 18	 mov	 DWORD PTR [ebx+24], edx
  00945	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00948	8b d1		 mov	 edx, ecx

; 440  : 
; 441  : 	/* Compute subkeys K_3 and K_4  */
; 442  : 	blocktmp[0] = subkeys->y000; blocktmp[1] = subkeys->y001; blocktmp[2] = subkeys->y010; blocktmp[3] = subkeys->y011;
; 443  : 	blocktmp2[0] = subkeys->y100; blocktmp2[1] = subkeys->y101; blocktmp2[2] = subkeys->y110; blocktmp2[3] = subkeys->y111;
; 444  : 	F(c_values[0], blocktmp, blocktmp2); F(c_values[1], blocktmp, blocktmp2);

  0094a	0f 10 85 fc fd
	ff ff		 movups	 xmm0, XMMWORD PTR _c_values$[ebp]
  00951	8b c1		 mov	 eax, ecx
  00953	c1 e2 10	 shl	 edx, 16			; 00000010H
  00956	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0095b	c1 e9 08	 shr	 ecx, 8
  0095e	0b d0		 or	 edx, eax
  00960	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00966	0f b6 43 1f	 movzx	 eax, BYTE PTR [ebx+31]
  0096a	c1 e2 08	 shl	 edx, 8
  0096d	0b d1		 or	 edx, ecx
  0096f	0b d0		 or	 edx, eax
  00971	89 53 1c	 mov	 DWORD PTR [ebx+28], edx
  00974	8b 03		 mov	 eax, DWORD PTR [ebx]
  00976	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp], eax
  0097c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0097f	89 85 d8 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+4], eax
  00985	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00988	89 85 dc fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+8], eax
  0098e	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00991	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _blocktmp$[ebp+12], eax
  00997	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0099a	0f 10 8d d4 fd
	ff ff		 movups	 xmm1, XMMWORD PTR _blocktmp$[ebp]
  009a1	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp], eax
  009a7	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  009aa	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp+4], eax
  009b0	66 0f ef c8	 pxor	 xmm1, xmm0
  009b4	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  009b7	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp+8], eax
  009bd	8b c2		 mov	 eax, edx
  009bf	89 85 cc fd ff
	ff		 mov	 DWORD PTR _blocktmp2$[ebp+12], eax
  009c5	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _tmpblock$50[ebp]
  009cb	50		 push	 eax
  009cc	0f 11 8d e4 fd
	ff ff		 movups	 XMMWORD PTR _tmpblock$50[ebp], xmm1
  009d3	e8 00 00 00 00	 call	 _S
  009d8	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  009df	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$50[ebp+8]
  009e5	8b c2		 mov	 eax, edx
  009e7	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$50[ebp+4]
  009ed	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$32[ebp], xmm0
  009f4	c1 e0 18	 shl	 eax, 24			; 00000018H
  009f7	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  009fc	66 0f 7e c3	 movd	 ebx, xmm0
  00a00	c1 ea 08	 shr	 edx, 8
  00a03	c1 eb 08	 shr	 ebx, 8
  00a06	0b d8		 or	 ebx, eax
  00a08	8b c1		 mov	 eax, ecx
  00a0a	c1 e0 18	 shl	 eax, 24			; 00000018H
  00a0d	0b d0		 or	 edx, eax
  00a0f	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00a15	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00a1b	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00a21	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR _tmpblock$50[ebp]
  00a27	8b c6		 mov	 eax, esi
  00a29	c1 e0 18	 shl	 eax, 24			; 00000018H
  00a2c	c1 e9 08	 shr	 ecx, 8
  00a2f	0b c8		 or	 ecx, eax
  00a31	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$32[ebp]
  00a37	50		 push	 eax
  00a38	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00a3e	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00a44	e8 00 00 00 00	 call	 _ll
  00a49	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00a4f	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00a55	0f b6 f8	 movzx	 edi, al
  00a58	8b c2		 mov	 eax, edx
  00a5a	c1 e0 18	 shl	 eax, 24			; 00000018H
  00a5d	c1 eb 08	 shr	 ebx, 8
  00a60	0b d8		 or	 ebx, eax
  00a62	c1 e7 18	 shl	 edi, 24			; 00000018H
  00a65	8b c1		 mov	 eax, ecx
  00a67	c1 ee 08	 shr	 esi, 8
  00a6a	c1 e0 18	 shl	 eax, 24			; 00000018H
  00a6d	0b fe		 or	 edi, esi
  00a6f	c1 ea 08	 shr	 edx, 8
  00a72	0b d0		 or	 edx, eax
  00a74	c1 e9 08	 shr	 ecx, 8
  00a77	8b c7		 mov	 eax, edi
  00a79	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00a7f	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00a86	c1 e0 18	 shl	 eax, 24			; 00000018H
  00a89	0b c8		 or	 ecx, eax
  00a8b	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00a91	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$31[ebp]
  00a97	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00a9d	50		 push	 eax
  00a9e	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$31[ebp], xmm0
  00aa5	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00aab	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00ab1	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00ab7	e8 00 00 00 00	 call	 _ll
  00abc	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00ac2	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00ac8	0f b6 f0	 movzx	 esi, al
  00acb	8b c2		 mov	 eax, edx
  00acd	c1 e0 18	 shl	 eax, 24			; 00000018H
  00ad0	c1 eb 08	 shr	 ebx, 8
  00ad3	0b d8		 or	 ebx, eax
  00ad5	c1 e6 18	 shl	 esi, 24			; 00000018H
  00ad8	8b c1		 mov	 eax, ecx
  00ada	c1 ef 08	 shr	 edi, 8
  00add	c1 e0 18	 shl	 eax, 24			; 00000018H
  00ae0	0b f7		 or	 esi, edi
  00ae2	c1 ea 08	 shr	 edx, 8
  00ae5	0b d0		 or	 edx, eax
  00ae7	c1 e9 08	 shr	 ecx, 8
  00aea	8b c6		 mov	 eax, esi
  00aec	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  00af2	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00af9	c1 e0 18	 shl	 eax, 24			; 00000018H
  00afc	0b c8		 or	 ecx, eax
  00afe	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00b04	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$30[ebp]
  00b0a	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00b10	50		 push	 eax
  00b11	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$30[ebp], xmm0
  00b18	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00b1e	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00b24	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00b2a	e8 00 00 00 00	 call	 _ll
  00b2f	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00b35	0f b6 f8	 movzx	 edi, al
  00b38	8b c2		 mov	 eax, edx
  00b3a	c1 e7 18	 shl	 edi, 24			; 00000018H
  00b3d	c1 ee 08	 shr	 esi, 8
  00b40	0b fe		 or	 edi, esi
  00b42	c1 eb 08	 shr	 ebx, 8
  00b45	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00b4b	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00b52	c1 e0 18	 shl	 eax, 24			; 00000018H
  00b55	0b d8		 or	 ebx, eax
  00b57	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$29[ebp], xmm0
  00b5e	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00b64	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00b6a	8b c1		 mov	 eax, ecx
  00b6c	c1 e0 18	 shl	 eax, 24			; 00000018H
  00b6f	c1 ea 08	 shr	 edx, 8
  00b72	0b d0		 or	 edx, eax
  00b74	c1 e9 08	 shr	 ecx, 8
  00b77	8b c7		 mov	 eax, edi
  00b79	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00b7f	c1 e0 18	 shl	 eax, 24			; 00000018H
  00b82	0b c8		 or	 ecx, eax
  00b84	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00b8a	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$29[ebp]
  00b90	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00b96	50		 push	 eax
  00b97	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00b9d	e8 00 00 00 00	 call	 _ll
  00ba2	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00ba8	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00bae	0f b6 f0	 movzx	 esi, al
  00bb1	8b c2		 mov	 eax, edx
  00bb3	c1 e0 18	 shl	 eax, 24			; 00000018H
  00bb6	c1 eb 08	 shr	 ebx, 8
  00bb9	0b d8		 or	 ebx, eax
  00bbb	c1 e6 18	 shl	 esi, 24			; 00000018H
  00bbe	8b c1		 mov	 eax, ecx
  00bc0	c1 ef 08	 shr	 edi, 8
  00bc3	c1 e0 18	 shl	 eax, 24			; 00000018H
  00bc6	0b f7		 or	 esi, edi
  00bc8	c1 ea 08	 shr	 edx, 8
  00bcb	0b d0		 or	 edx, eax
  00bcd	c1 e9 08	 shr	 ecx, 8
  00bd0	8b c6		 mov	 eax, esi
  00bd2	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  00bd8	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00bdf	c1 e0 18	 shl	 eax, 24			; 00000018H
  00be2	0b c8		 or	 ecx, eax
  00be4	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00bea	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$28[ebp]
  00bf0	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00bf6	50		 push	 eax
  00bf7	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$28[ebp], xmm0
  00bfe	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00c04	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00c0a	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00c10	e8 00 00 00 00	 call	 _ll
  00c15	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00c1b	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00c21	0f b6 f8	 movzx	 edi, al
  00c24	8b c2		 mov	 eax, edx
  00c26	c1 e0 18	 shl	 eax, 24			; 00000018H
  00c29	c1 eb 08	 shr	 ebx, 8
  00c2c	0b d8		 or	 ebx, eax
  00c2e	c1 e7 18	 shl	 edi, 24			; 00000018H
  00c31	8b c1		 mov	 eax, ecx
  00c33	c1 ee 08	 shr	 esi, 8
  00c36	c1 e0 18	 shl	 eax, 24			; 00000018H
  00c39	0b fe		 or	 edi, esi
  00c3b	c1 ea 08	 shr	 edx, 8
  00c3e	0b d0		 or	 edx, eax
  00c40	c1 e9 08	 shr	 ecx, 8
  00c43	8b c7		 mov	 eax, edi
  00c45	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00c4b	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00c52	c1 e0 18	 shl	 eax, 24			; 00000018H
  00c55	0b c8		 or	 ecx, eax
  00c57	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00c5d	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$27[ebp]
  00c63	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00c69	50		 push	 eax
  00c6a	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$27[ebp], xmm0
  00c71	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00c77	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00c7d	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00c83	e8 00 00 00 00	 call	 _ll
  00c88	0f b6 f0	 movzx	 esi, al
  00c8b	c1 e6 18	 shl	 esi, 24			; 00000018H
  00c8e	c1 ef 08	 shr	 edi, 8
  00c91	0b f7		 or	 esi, edi
  00c93	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  00c99	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00ca0	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$26[ebp], xmm0
  00ca7	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00cad	8b c2		 mov	 eax, edx
  00caf	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00cb5	c1 e0 18	 shl	 eax, 24			; 00000018H
  00cb8	c1 eb 08	 shr	 ebx, 8
  00cbb	0b d8		 or	 ebx, eax
  00cbd	c1 ea 08	 shr	 edx, 8
  00cc0	8b c1		 mov	 eax, ecx
  00cc2	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00cc8	c1 e0 18	 shl	 eax, 24			; 00000018H
  00ccb	0b d0		 or	 edx, eax
  00ccd	c1 e9 08	 shr	 ecx, 8
  00cd0	8b c6		 mov	 eax, esi
  00cd2	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00cd8	c1 e0 18	 shl	 eax, 24			; 00000018H
  00cdb	0b c8		 or	 ecx, eax
  00cdd	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00ce3	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$26[ebp]
  00ce9	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00cef	50		 push	 eax
  00cf0	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00cf6	e8 00 00 00 00	 call	 _ll
  00cfb	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00d01	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00d07	0f b6 f8	 movzx	 edi, al
  00d0a	8b c2		 mov	 eax, edx
  00d0c	c1 e0 18	 shl	 eax, 24			; 00000018H
  00d0f	c1 eb 08	 shr	 ebx, 8
  00d12	0b d8		 or	 ebx, eax
  00d14	c1 e7 18	 shl	 edi, 24			; 00000018H
  00d17	8b c1		 mov	 eax, ecx
  00d19	c1 ee 08	 shr	 esi, 8
  00d1c	c1 e0 18	 shl	 eax, 24			; 00000018H
  00d1f	0b fe		 or	 edi, esi
  00d21	c1 ea 08	 shr	 edx, 8
  00d24	0b d0		 or	 edx, eax
  00d26	c1 e9 08	 shr	 ecx, 8
  00d29	8b c7		 mov	 eax, edi
  00d2b	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00d31	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00d38	c1 e0 18	 shl	 eax, 24			; 00000018H
  00d3b	0b c8		 or	 ecx, eax
  00d3d	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00d43	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$25[ebp]
  00d49	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00d4f	50		 push	 eax
  00d50	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$25[ebp], xmm0
  00d57	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00d5d	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00d63	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00d69	e8 00 00 00 00	 call	 _ll
  00d6e	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00d74	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00d7a	0f b6 f0	 movzx	 esi, al
  00d7d	8b c2		 mov	 eax, edx
  00d7f	c1 e0 18	 shl	 eax, 24			; 00000018H
  00d82	c1 eb 08	 shr	 ebx, 8
  00d85	0b d8		 or	 ebx, eax
  00d87	c1 e6 18	 shl	 esi, 24			; 00000018H
  00d8a	8b c1		 mov	 eax, ecx
  00d8c	c1 ef 08	 shr	 edi, 8
  00d8f	c1 e0 18	 shl	 eax, 24			; 00000018H
  00d92	0b f7		 or	 esi, edi
  00d94	c1 ea 08	 shr	 edx, 8
  00d97	0b d0		 or	 edx, eax
  00d99	c1 e9 08	 shr	 ecx, 8
  00d9c	8b c6		 mov	 eax, esi
  00d9e	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  00da4	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00dab	c1 e0 18	 shl	 eax, 24			; 00000018H
  00dae	0b c8		 or	 ecx, eax
  00db0	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00db6	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$24[ebp]
  00dbc	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00dc2	50		 push	 eax
  00dc3	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$24[ebp], xmm0
  00dca	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00dd0	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00dd6	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00ddc	e8 00 00 00 00	 call	 _ll
  00de1	0f b6 f8	 movzx	 edi, al
  00de4	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00dea	8b c2		 mov	 eax, edx
  00dec	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00df2	c1 e0 18	 shl	 eax, 24			; 00000018H
  00df5	c1 eb 08	 shr	 ebx, 8
  00df8	0b d8		 or	 ebx, eax
  00dfa	c1 e7 18	 shl	 edi, 24			; 00000018H
  00dfd	8b c1		 mov	 eax, ecx
  00dff	c1 ee 08	 shr	 esi, 8
  00e02	c1 e0 18	 shl	 eax, 24			; 00000018H
  00e05	0b fe		 or	 edi, esi
  00e07	c1 ea 08	 shr	 edx, 8
  00e0a	0b d0		 or	 edx, eax
  00e0c	c1 e9 08	 shr	 ecx, 8
  00e0f	8b c7		 mov	 eax, edi
  00e11	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00e17	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00e1e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00e21	0b c8		 or	 ecx, eax
  00e23	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00e29	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$23[ebp]
  00e2f	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00e35	50		 push	 eax
  00e36	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$23[ebp], xmm0
  00e3d	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00e43	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00e49	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00e4f	e8 00 00 00 00	 call	 _ll
  00e54	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00e5a	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00e60	0f b6 f0	 movzx	 esi, al
  00e63	8b c2		 mov	 eax, edx
  00e65	c1 e0 18	 shl	 eax, 24			; 00000018H
  00e68	c1 eb 08	 shr	 ebx, 8
  00e6b	0b d8		 or	 ebx, eax
  00e6d	c1 e6 18	 shl	 esi, 24			; 00000018H
  00e70	8b c1		 mov	 eax, ecx
  00e72	c1 ef 08	 shr	 edi, 8
  00e75	c1 e0 18	 shl	 eax, 24			; 00000018H
  00e78	0b f7		 or	 esi, edi
  00e7a	c1 ea 08	 shr	 edx, 8
  00e7d	0b d0		 or	 edx, eax
  00e7f	c1 e9 08	 shr	 ecx, 8
  00e82	8b c6		 mov	 eax, esi
  00e84	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  00e8a	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00e91	c1 e0 18	 shl	 eax, 24			; 00000018H
  00e94	0b c8		 or	 ecx, eax
  00e96	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00e9c	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$22[ebp]
  00ea2	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00ea8	50		 push	 eax
  00ea9	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$22[ebp], xmm0
  00eb0	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00eb6	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00ebc	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00ec2	e8 00 00 00 00	 call	 _ll
  00ec7	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00ecd	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00ed3	0f b6 f8	 movzx	 edi, al
  00ed6	8b c2		 mov	 eax, edx
  00ed8	c1 e0 18	 shl	 eax, 24			; 00000018H
  00edb	c1 eb 08	 shr	 ebx, 8
  00ede	0b d8		 or	 ebx, eax
  00ee0	c1 e7 18	 shl	 edi, 24			; 00000018H
  00ee3	8b c1		 mov	 eax, ecx
  00ee5	c1 ee 08	 shr	 esi, 8
  00ee8	c1 e0 18	 shl	 eax, 24			; 00000018H
  00eeb	0b fe		 or	 edi, esi
  00eed	c1 ea 08	 shr	 edx, 8
  00ef0	0b d0		 or	 edx, eax
  00ef2	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00ef8	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00eff	8b c7		 mov	 eax, edi
  00f01	c1 e9 08	 shr	 ecx, 8
  00f04	c1 e0 18	 shl	 eax, 24			; 00000018H
  00f07	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$21[ebp], xmm0
  00f0e	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00f14	0b c8		 or	 ecx, eax
  00f16	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00f1c	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00f22	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$21[ebp]
  00f28	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00f2e	50		 push	 eax
  00f2f	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00f35	e8 00 00 00 00	 call	 _ll
  00f3a	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00f40	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00f46	0f b6 f0	 movzx	 esi, al
  00f49	8b c2		 mov	 eax, edx
  00f4b	c1 e0 18	 shl	 eax, 24			; 00000018H
  00f4e	c1 eb 08	 shr	 ebx, 8
  00f51	0b d8		 or	 ebx, eax
  00f53	c1 e6 18	 shl	 esi, 24			; 00000018H
  00f56	8b c1		 mov	 eax, ecx
  00f58	c1 ef 08	 shr	 edi, 8
  00f5b	c1 e0 18	 shl	 eax, 24			; 00000018H
  00f5e	0b f7		 or	 esi, edi
  00f60	c1 ea 08	 shr	 edx, 8
  00f63	0b d0		 or	 edx, eax
  00f65	c1 e9 08	 shr	 ecx, 8
  00f68	8b c6		 mov	 eax, esi
  00f6a	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  00f70	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00f77	c1 e0 18	 shl	 eax, 24			; 00000018H
  00f7a	0b c8		 or	 ecx, eax
  00f7c	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00f82	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$20[ebp]
  00f88	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  00f8e	50		 push	 eax
  00f8f	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$20[ebp], xmm0
  00f96	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  00f9c	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  00fa2	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  00fa8	e8 00 00 00 00	 call	 _ll
  00fad	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  00fb3	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  00fb9	0f b6 f8	 movzx	 edi, al
  00fbc	8b c2		 mov	 eax, edx
  00fbe	c1 e0 18	 shl	 eax, 24			; 00000018H
  00fc1	c1 eb 08	 shr	 ebx, 8
  00fc4	0b d8		 or	 ebx, eax
  00fc6	c1 e7 18	 shl	 edi, 24			; 00000018H
  00fc9	8b c1		 mov	 eax, ecx
  00fcb	c1 ee 08	 shr	 esi, 8
  00fce	c1 e0 18	 shl	 eax, 24			; 00000018H
  00fd1	0b fe		 or	 edi, esi
  00fd3	c1 ea 08	 shr	 edx, 8
  00fd6	0b d0		 or	 edx, eax
  00fd8	c1 e9 08	 shr	 ecx, 8
  00fdb	8b c7		 mov	 eax, edi
  00fdd	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  00fe3	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  00fea	c1 e0 18	 shl	 eax, 24			; 00000018H
  00fed	0b c8		 or	 ecx, eax
  00fef	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  00ff5	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$19[ebp]
  00ffb	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01001	50		 push	 eax
  01002	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$19[ebp], xmm0
  01009	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  0100f	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01015	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  0101b	e8 00 00 00 00	 call	 _ll
  01020	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01026	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  0102c	0f b6 f0	 movzx	 esi, al
  0102f	8b c2		 mov	 eax, edx
  01031	c1 e6 18	 shl	 esi, 24			; 00000018H
  01034	c1 ef 08	 shr	 edi, 8
  01037	c1 e0 18	 shl	 eax, 24			; 00000018H
  0103a	0b f7		 or	 esi, edi
  0103c	c1 eb 08	 shr	 ebx, 8
  0103f	0b d8		 or	 ebx, eax
  01041	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], esi
  01047	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  0104e	8b c1		 mov	 eax, ecx
  01050	c1 ea 08	 shr	 edx, 8
  01053	c1 e0 18	 shl	 eax, 24			; 00000018H
  01056	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$18[ebp], xmm0
  0105d	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  01063	0b d0		 or	 edx, eax
  01065	8b c6		 mov	 eax, esi
  01067	c1 e9 08	 shr	 ecx, 8
  0106a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0106d	0b c8		 or	 ecx, eax
  0106f	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01075	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$18[ebp]
  0107b	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  01081	50		 push	 eax
  01082	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01088	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  0108e	e8 00 00 00 00	 call	 _ll
  01093	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01099	83 c4 40	 add	 esp, 64			; 00000040H
  0109c	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  010a2	0f b6 f8	 movzx	 edi, al
  010a5	8b c2		 mov	 eax, edx
  010a7	c1 e0 18	 shl	 eax, 24			; 00000018H
  010aa	c1 eb 08	 shr	 ebx, 8
  010ad	0b d8		 or	 ebx, eax
  010af	c1 e7 18	 shl	 edi, 24			; 00000018H
  010b2	8b c1		 mov	 eax, ecx
  010b4	c1 ee 08	 shr	 esi, 8
  010b7	c1 e0 18	 shl	 eax, 24			; 00000018H
  010ba	0b fe		 or	 edi, esi
  010bc	c1 ea 08	 shr	 edx, 8
  010bf	0b d0		 or	 edx, eax
  010c1	c1 e9 08	 shr	 ecx, 8
  010c4	8b c7		 mov	 eax, edi
  010c6	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], edi
  010cc	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  010d3	c1 e0 18	 shl	 eax, 24			; 00000018H
  010d6	0b c8		 or	 ecx, eax
  010d8	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+12], ebx
  010de	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$17[ebp]
  010e4	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+8], edx
  010ea	50		 push	 eax
  010eb	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$17[ebp], xmm0
  010f2	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp+4], ecx
  010f8	e8 00 00 00 00	 call	 _ll
  010fd	0f 10 8d c0 fd
	ff ff		 movups	 xmm1, XMMWORD PTR _blocktmp2$[ebp]
  01104	0f b6 c0	 movzx	 eax, al
  01107	c1 e0 18	 shl	 eax, 24			; 00000018H
  0110a	c1 ef 08	 shr	 edi, 8
  0110d	0b c7		 or	 eax, edi
  0110f	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$50[ebp], eax
  01115	8d 85 e4 fd ff
	ff		 lea	 eax, DWORD PTR _tmpblock$49[ebp]
  0111b	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$50[ebp]
  01122	50		 push	 eax
  01123	66 0f ef c8	 pxor	 xmm1, xmm0
  01127	0f 10 85 0c fe
	ff ff		 movups	 xmm0, XMMWORD PTR _c_values$[ebp+16]
  0112e	0f 11 8d c0 fd
	ff ff		 movups	 XMMWORD PTR _blocktmp$20$[ebp], xmm1
  01135	66 0f ef c1	 pxor	 xmm0, xmm1
  01139	0f 11 85 e4 fd
	ff ff		 movups	 XMMWORD PTR _tmpblock$49[ebp], xmm0
  01140	e8 00 00 00 00	 call	 _S
  01145	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  0114c	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$49[ebp+8]
  01152	8b c2		 mov	 eax, edx
  01154	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$49[ebp+4]
  0115a	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR _tmpblock$49[ebp]
  01160	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$16[ebp], xmm0
  01167	c1 e0 18	 shl	 eax, 24			; 00000018H
  0116a	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  0116f	66 0f 7e c3	 movd	 ebx, xmm0
  01173	c1 ea 08	 shr	 edx, 8
  01176	c1 eb 08	 shr	 ebx, 8
  01179	0b d8		 or	 ebx, eax
  0117b	8b c1		 mov	 eax, ecx
  0117d	c1 e0 18	 shl	 eax, 24			; 00000018H
  01180	0b d0		 or	 edx, eax
  01182	c1 e9 08	 shr	 ecx, 8
  01185	8b c6		 mov	 eax, esi
  01187	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  0118d	c1 e0 18	 shl	 eax, 24			; 00000018H
  01190	0b c8		 or	 ecx, eax
  01192	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01198	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$16[ebp]
  0119e	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  011a4	50		 push	 eax
  011a5	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  011ab	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  011b1	e8 00 00 00 00	 call	 _ll
  011b6	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  011bc	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  011c2	0f b6 f8	 movzx	 edi, al
  011c5	8b c2		 mov	 eax, edx
  011c7	c1 e0 18	 shl	 eax, 24			; 00000018H
  011ca	c1 eb 08	 shr	 ebx, 8
  011cd	0b d8		 or	 ebx, eax
  011cf	c1 e7 18	 shl	 edi, 24			; 00000018H
  011d2	8b c1		 mov	 eax, ecx
  011d4	c1 ee 08	 shr	 esi, 8
  011d7	c1 e0 18	 shl	 eax, 24			; 00000018H
  011da	0b fe		 or	 edi, esi
  011dc	c1 ea 08	 shr	 edx, 8
  011df	0b d0		 or	 edx, eax
  011e1	c1 e9 08	 shr	 ecx, 8
  011e4	8b c7		 mov	 eax, edi
  011e6	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  011ec	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  011f3	c1 e0 18	 shl	 eax, 24			; 00000018H
  011f6	0b c8		 or	 ecx, eax
  011f8	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  011fe	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$15[ebp]
  01204	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  0120a	50		 push	 eax
  0120b	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$15[ebp], xmm0
  01212	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  01218	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  0121e	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01224	e8 00 00 00 00	 call	 _ll
  01229	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  0122f	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  01235	0f b6 f0	 movzx	 esi, al
  01238	8b c2		 mov	 eax, edx
  0123a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0123d	c1 eb 08	 shr	 ebx, 8
  01240	0b d8		 or	 ebx, eax
  01242	c1 e6 18	 shl	 esi, 24			; 00000018H
  01245	8b c1		 mov	 eax, ecx
  01247	c1 ef 08	 shr	 edi, 8
  0124a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0124d	0b f7		 or	 esi, edi
  0124f	c1 ea 08	 shr	 edx, 8
  01252	0b d0		 or	 edx, eax
  01254	c1 e9 08	 shr	 ecx, 8
  01257	8b c6		 mov	 eax, esi
  01259	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  0125f	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01266	c1 e0 18	 shl	 eax, 24			; 00000018H
  01269	0b c8		 or	 ecx, eax
  0126b	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  01271	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$14[ebp]
  01277	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  0127d	50		 push	 eax
  0127e	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$14[ebp], xmm0
  01285	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  0128b	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01291	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01297	e8 00 00 00 00	 call	 _ll
  0129c	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  012a2	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  012a8	0f b6 f8	 movzx	 edi, al
  012ab	8b c2		 mov	 eax, edx
  012ad	c1 e0 18	 shl	 eax, 24			; 00000018H
  012b0	c1 eb 08	 shr	 ebx, 8
  012b3	0b d8		 or	 ebx, eax
  012b5	c1 e7 18	 shl	 edi, 24			; 00000018H
  012b8	c1 ee 08	 shr	 esi, 8
  012bb	8b c1		 mov	 eax, ecx
  012bd	0b fe		 or	 edi, esi
  012bf	c1 e0 18	 shl	 eax, 24			; 00000018H
  012c2	c1 ea 08	 shr	 edx, 8
  012c5	0b d0		 or	 edx, eax
  012c7	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  012cd	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  012d4	8b c7		 mov	 eax, edi
  012d6	c1 e9 08	 shr	 ecx, 8
  012d9	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  012df	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$13[ebp], xmm0
  012e6	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  012ec	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  012f2	c1 e0 18	 shl	 eax, 24			; 00000018H
  012f5	0b c8		 or	 ecx, eax
  012f7	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$13[ebp]
  012fd	50		 push	 eax
  012fe	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01304	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  0130a	e8 00 00 00 00	 call	 _ll
  0130f	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01315	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  0131b	0f b6 f0	 movzx	 esi, al
  0131e	8b c2		 mov	 eax, edx
  01320	c1 e0 18	 shl	 eax, 24			; 00000018H
  01323	c1 eb 08	 shr	 ebx, 8
  01326	0b d8		 or	 ebx, eax
  01328	c1 e6 18	 shl	 esi, 24			; 00000018H
  0132b	8b c1		 mov	 eax, ecx
  0132d	c1 ef 08	 shr	 edi, 8
  01330	c1 e0 18	 shl	 eax, 24			; 00000018H
  01333	0b f7		 or	 esi, edi
  01335	c1 ea 08	 shr	 edx, 8
  01338	0b d0		 or	 edx, eax
  0133a	c1 e9 08	 shr	 ecx, 8
  0133d	8b c6		 mov	 eax, esi
  0133f	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  01345	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  0134c	c1 e0 18	 shl	 eax, 24			; 00000018H
  0134f	0b c8		 or	 ecx, eax
  01351	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  01357	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$12[ebp]
  0135d	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01363	50		 push	 eax
  01364	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$12[ebp], xmm0
  0136b	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  01371	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01377	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  0137d	e8 00 00 00 00	 call	 _ll
  01382	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01388	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  0138e	0f b6 f8	 movzx	 edi, al
  01391	8b c2		 mov	 eax, edx
  01393	c1 e0 18	 shl	 eax, 24			; 00000018H
  01396	c1 eb 08	 shr	 ebx, 8
  01399	0b d8		 or	 ebx, eax
  0139b	c1 e7 18	 shl	 edi, 24			; 00000018H
  0139e	8b c1		 mov	 eax, ecx
  013a0	c1 ee 08	 shr	 esi, 8
  013a3	c1 e0 18	 shl	 eax, 24			; 00000018H
  013a6	0b fe		 or	 edi, esi
  013a8	c1 ea 08	 shr	 edx, 8
  013ab	0b d0		 or	 edx, eax
  013ad	c1 e9 08	 shr	 ecx, 8
  013b0	8b c7		 mov	 eax, edi
  013b2	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  013b8	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  013bf	c1 e0 18	 shl	 eax, 24			; 00000018H
  013c2	0b c8		 or	 ecx, eax
  013c4	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  013ca	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$11[ebp]
  013d0	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  013d6	50		 push	 eax
  013d7	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$11[ebp], xmm0
  013de	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  013e4	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  013ea	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  013f0	e8 00 00 00 00	 call	 _ll
  013f5	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  013fb	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  01401	0f b6 f0	 movzx	 esi, al
  01404	8b c2		 mov	 eax, edx
  01406	c1 e6 18	 shl	 esi, 24			; 00000018H
  01409	c1 ef 08	 shr	 edi, 8
  0140c	0b f7		 or	 esi, edi
  0140e	c1 e0 18	 shl	 eax, 24			; 00000018H
  01411	c1 eb 08	 shr	 ebx, 8
  01414	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  0141a	0b d8		 or	 ebx, eax
  0141c	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01423	8b c1		 mov	 eax, ecx
  01425	c1 ea 08	 shr	 edx, 8
  01428	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  0142e	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$10[ebp], xmm0
  01435	c1 e0 18	 shl	 eax, 24			; 00000018H
  01438	0b d0		 or	 edx, eax
  0143a	c1 e9 08	 shr	 ecx, 8
  0143d	8b c6		 mov	 eax, esi
  0143f	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01445	c1 e0 18	 shl	 eax, 24			; 00000018H
  01448	0b c8		 or	 ecx, eax
  0144a	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  01450	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$10[ebp]
  01456	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  0145c	50		 push	 eax
  0145d	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01463	e8 00 00 00 00	 call	 _ll
  01468	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  0146e	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  01474	0f b6 f8	 movzx	 edi, al
  01477	8b c2		 mov	 eax, edx
  01479	c1 e0 18	 shl	 eax, 24			; 00000018H
  0147c	c1 eb 08	 shr	 ebx, 8
  0147f	0b d8		 or	 ebx, eax
  01481	c1 e7 18	 shl	 edi, 24			; 00000018H
  01484	8b c1		 mov	 eax, ecx
  01486	c1 ee 08	 shr	 esi, 8
  01489	c1 e0 18	 shl	 eax, 24			; 00000018H
  0148c	0b fe		 or	 edi, esi
  0148e	c1 ea 08	 shr	 edx, 8
  01491	0b d0		 or	 edx, eax
  01493	c1 e9 08	 shr	 ecx, 8
  01496	8b c7		 mov	 eax, edi
  01498	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  0149e	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  014a5	c1 e0 18	 shl	 eax, 24			; 00000018H
  014a8	0b c8		 or	 ecx, eax
  014aa	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  014b0	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$9[ebp]
  014b6	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  014bc	50		 push	 eax
  014bd	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$9[ebp], xmm0
  014c4	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  014ca	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  014d0	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  014d6	e8 00 00 00 00	 call	 _ll
  014db	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  014e1	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  014e7	0f b6 f0	 movzx	 esi, al
  014ea	8b c2		 mov	 eax, edx
  014ec	c1 e0 18	 shl	 eax, 24			; 00000018H
  014ef	c1 eb 08	 shr	 ebx, 8
  014f2	0b d8		 or	 ebx, eax
  014f4	c1 e6 18	 shl	 esi, 24			; 00000018H
  014f7	8b c1		 mov	 eax, ecx
  014f9	c1 ef 08	 shr	 edi, 8
  014fc	c1 e0 18	 shl	 eax, 24			; 00000018H
  014ff	0b f7		 or	 esi, edi
  01501	c1 ea 08	 shr	 edx, 8
  01504	0b d0		 or	 edx, eax
  01506	c1 e9 08	 shr	 ecx, 8
  01509	8b c6		 mov	 eax, esi
  0150b	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  01511	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01518	c1 e0 18	 shl	 eax, 24			; 00000018H
  0151b	0b c8		 or	 ecx, eax
  0151d	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  01523	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$8[ebp]
  01529	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  0152f	50		 push	 eax
  01530	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$8[ebp], xmm0
  01537	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  0153d	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01543	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01549	e8 00 00 00 00	 call	 _ll
  0154e	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01554	0f b6 f8	 movzx	 edi, al
  01557	8b c2		 mov	 eax, edx
  01559	c1 e7 18	 shl	 edi, 24			; 00000018H
  0155c	c1 ee 08	 shr	 esi, 8
  0155f	0b fe		 or	 edi, esi
  01561	c1 eb 08	 shr	 ebx, 8
  01564	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  0156a	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01571	c1 e0 18	 shl	 eax, 24			; 00000018H
  01574	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$7[ebp], xmm0
  0157b	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  01581	0b d8		 or	 ebx, eax
  01583	8b c1		 mov	 eax, ecx
  01585	c1 ea 08	 shr	 edx, 8
  01588	c1 e0 18	 shl	 eax, 24			; 00000018H
  0158b	0b d0		 or	 edx, eax
  0158d	c1 e9 08	 shr	 ecx, 8
  01590	8b c7		 mov	 eax, edi
  01592	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  01598	c1 e0 18	 shl	 eax, 24			; 00000018H
  0159b	0b c8		 or	 ecx, eax
  0159d	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  015a3	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$7[ebp]
  015a9	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  015af	50		 push	 eax
  015b0	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  015b6	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  015bc	e8 00 00 00 00	 call	 _ll
  015c1	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  015c7	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  015cd	0f b6 f0	 movzx	 esi, al
  015d0	8b c2		 mov	 eax, edx
  015d2	c1 e0 18	 shl	 eax, 24			; 00000018H
  015d5	c1 eb 08	 shr	 ebx, 8
  015d8	0b d8		 or	 ebx, eax
  015da	c1 e6 18	 shl	 esi, 24			; 00000018H
  015dd	8b c1		 mov	 eax, ecx
  015df	c1 ef 08	 shr	 edi, 8
  015e2	c1 e0 18	 shl	 eax, 24			; 00000018H
  015e5	0b f7		 or	 esi, edi
  015e7	c1 ea 08	 shr	 edx, 8
  015ea	0b d0		 or	 edx, eax
  015ec	c1 e9 08	 shr	 ecx, 8
  015ef	8b c6		 mov	 eax, esi
  015f1	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  015f7	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  015fe	c1 e0 18	 shl	 eax, 24			; 00000018H
  01601	0b c8		 or	 ecx, eax
  01603	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  01609	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$6[ebp]
  0160f	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01615	50		 push	 eax
  01616	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$6[ebp], xmm0
  0161d	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  01623	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01629	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  0162f	e8 00 00 00 00	 call	 _ll
  01634	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  0163a	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  01640	0f b6 f8	 movzx	 edi, al
  01643	8b c2		 mov	 eax, edx
  01645	c1 e0 18	 shl	 eax, 24			; 00000018H
  01648	c1 eb 08	 shr	 ebx, 8
  0164b	0b d8		 or	 ebx, eax
  0164d	c1 e7 18	 shl	 edi, 24			; 00000018H
  01650	8b c1		 mov	 eax, ecx
  01652	c1 ee 08	 shr	 esi, 8
  01655	c1 e0 18	 shl	 eax, 24			; 00000018H
  01658	0b fe		 or	 edi, esi
  0165a	c1 ea 08	 shr	 edx, 8
  0165d	0b d0		 or	 edx, eax
  0165f	c1 e9 08	 shr	 ecx, 8
  01662	8b c7		 mov	 eax, edi
  01664	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  0166a	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01671	c1 e0 18	 shl	 eax, 24			; 00000018H
  01674	0b c8		 or	 ecx, eax
  01676	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  0167c	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$5[ebp]
  01682	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  01688	50		 push	 eax
  01689	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$5[ebp], xmm0
  01690	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  01696	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  0169c	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  016a2	e8 00 00 00 00	 call	 _ll
  016a7	0f b6 f0	 movzx	 esi, al
  016aa	c1 e6 18	 shl	 esi, 24			; 00000018H
  016ad	c1 ef 08	 shr	 edi, 8
  016b0	0b f7		 or	 esi, edi
  016b2	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  016b8	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  016be	8b c2		 mov	 eax, edx
  016c0	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  016c6	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  016cd	c1 e0 18	 shl	 eax, 24			; 00000018H
  016d0	c1 eb 08	 shr	 ebx, 8
  016d3	0b d8		 or	 ebx, eax
  016d5	c1 ea 08	 shr	 edx, 8
  016d8	8b c1		 mov	 eax, ecx
  016da	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  016e0	c1 e0 18	 shl	 eax, 24			; 00000018H
  016e3	0b d0		 or	 edx, eax
  016e5	c1 e9 08	 shr	 ecx, 8
  016e8	8b c6		 mov	 eax, esi
  016ea	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  016f0	c1 e0 18	 shl	 eax, 24			; 00000018H
  016f3	0b c8		 or	 ecx, eax
  016f5	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  016fb	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$4[ebp]
  01701	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01707	50		 push	 eax
  01708	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$4[ebp], xmm0
  0170f	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01715	e8 00 00 00 00	 call	 _ll
  0171a	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01720	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  01726	0f b6 f8	 movzx	 edi, al
  01729	8b c2		 mov	 eax, edx
  0172b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0172e	c1 eb 08	 shr	 ebx, 8
  01731	0b d8		 or	 ebx, eax
  01733	c1 e7 18	 shl	 edi, 24			; 00000018H
  01736	8b c1		 mov	 eax, ecx
  01738	c1 ee 08	 shr	 esi, 8
  0173b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0173e	0b fe		 or	 edi, esi
  01740	c1 ea 08	 shr	 edx, 8
  01743	0b d0		 or	 edx, eax
  01745	c1 e9 08	 shr	 ecx, 8
  01748	8b c7		 mov	 eax, edi
  0174a	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  01750	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01757	c1 e0 18	 shl	 eax, 24			; 00000018H
  0175a	0b c8		 or	 ecx, eax
  0175c	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  01762	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$3[ebp]
  01768	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  0176e	50		 push	 eax
  0176f	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$3[ebp], xmm0
  01776	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  0177c	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  01782	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01788	e8 00 00 00 00	 call	 _ll
  0178d	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01793	83 c4 40	 add	 esp, 64			; 00000040H
  01796	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  0179c	0f b6 f0	 movzx	 esi, al
  0179f	8b c2		 mov	 eax, edx
  017a1	c1 e0 18	 shl	 eax, 24			; 00000018H
  017a4	c1 eb 08	 shr	 ebx, 8
  017a7	0b d8		 or	 ebx, eax
  017a9	c1 e6 18	 shl	 esi, 24			; 00000018H
  017ac	8b c1		 mov	 eax, ecx
  017ae	c1 ef 08	 shr	 edi, 8
  017b1	c1 e0 18	 shl	 eax, 24			; 00000018H
  017b4	0b f7		 or	 esi, edi
  017b6	c1 ea 08	 shr	 edx, 8
  017b9	0b d0		 or	 edx, eax
  017bb	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], esi
  017c1	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  017c8	8b c6		 mov	 eax, esi
  017ca	c1 e9 08	 shr	 ecx, 8
  017cd	c1 e0 18	 shl	 eax, 24			; 00000018H
  017d0	0b c8		 or	 ecx, eax
  017d2	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  017d8	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$2[ebp], xmm0
  017df	89 95 f4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$2$[ebp], edx
  017e5	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$2[ebp]
  017eb	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  017f1	89 8d f8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$3$[ebp], ecx
  017f7	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  017fd	50		 push	 eax
  017fe	e8 00 00 00 00	 call	 _ll
  01803	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _tmpblock$2$[ebp]
  01809	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _tmpblock$3$[ebp]
  0180f	0f b6 f8	 movzx	 edi, al
  01812	8b c2		 mov	 eax, edx
  01814	c1 e0 18	 shl	 eax, 24			; 00000018H
  01817	c1 eb 08	 shr	 ebx, 8
  0181a	0b d8		 or	 ebx, eax
  0181c	c1 e7 18	 shl	 edi, 24			; 00000018H
  0181f	8b c1		 mov	 eax, ecx
  01821	c1 ee 08	 shr	 esi, 8
  01824	c1 e0 18	 shl	 eax, 24			; 00000018H
  01827	0b fe		 or	 edi, esi
  01829	c1 ea 08	 shr	 edx, 8
  0182c	0b d0		 or	 edx, eax
  0182e	c1 e9 08	 shr	 ecx, 8
  01831	8b c7		 mov	 eax, edi
  01833	89 bd e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], edi
  01839	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  01840	c1 e0 18	 shl	 eax, 24			; 00000018H
  01843	0b c8		 or	 ecx, eax
  01845	89 9d f0 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+12], ebx
  0184b	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _valtmp$1[ebp]
  01851	89 95 ec fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+8], edx
  01857	50		 push	 eax
  01858	0f 11 85 b0 fd
	ff ff		 movups	 XMMWORD PTR _valtmp$1[ebp], xmm0
  0185f	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp+4], ecx
  01865	e8 00 00 00 00	 call	 _ll
  0186a	0f 10 8d d4 fd
	ff ff		 movups	 xmm1, XMMWORD PTR _blocktmp$[ebp]
  01871	0f b6 c0	 movzx	 eax, al
  01874	c1 e0 18	 shl	 eax, 24			; 00000018H
  01877	c1 ef 08	 shr	 edi, 8
  0187a	0b c7		 or	 eax, edi
  0187c	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _tmpblock$49[ebp], eax

; 445  : 	F(c_values[2], blocktmp, blocktmp2); F(c_values[3], blocktmp, blocktmp2);

  01882	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01888	0f 10 85 e4 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _tmpblock$49[ebp]
  0188f	50		 push	 eax
  01890	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01896	66 0f ef c1	 pxor	 xmm0, xmm1
  0189a	0f 10 8d c0 fd
	ff ff		 movups	 xmm1, XMMWORD PTR _blocktmp$20$[ebp]
  018a1	50		 push	 eax
  018a2	8d 85 1c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+32]
  018a8	50		 push	 eax
  018a9	0f 11 8d c0 fd
	ff ff		 movups	 XMMWORD PTR _blocktmp2$[ebp], xmm1
  018b0	0f 11 85 d4 fd
	ff ff		 movups	 XMMWORD PTR _blocktmp$[ebp], xmm0
  018b7	e8 00 00 00 00	 call	 _F
  018bc	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  018c2	50		 push	 eax
  018c3	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  018c9	50		 push	 eax
  018ca	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+48]
  018d0	50		 push	 eax
  018d1	e8 00 00 00 00	 call	 _F

; 446  : 	F(c_values[4], blocktmp, blocktmp2); F(c_values[5], blocktmp, blocktmp2);

  018d6	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  018dc	50		 push	 eax
  018dd	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  018e3	50		 push	 eax
  018e4	8d 85 3c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+64]
  018ea	50		 push	 eax
  018eb	e8 00 00 00 00	 call	 _F
  018f0	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  018f6	50		 push	 eax
  018f7	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  018fd	50		 push	 eax
  018fe	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+80]
  01904	50		 push	 eax
  01905	e8 00 00 00 00	 call	 _F

; 447  : 	F(c_values[6], blocktmp, blocktmp2); F(c_values[7], blocktmp, blocktmp2);

  0190a	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01910	50		 push	 eax
  01911	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01917	50		 push	 eax
  01918	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+96]
  0191e	50		 push	 eax
  0191f	e8 00 00 00 00	 call	 _F
  01924	83 c4 44	 add	 esp, 68			; 00000044H
  01927	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  0192d	50		 push	 eax
  0192e	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01934	50		 push	 eax
  01935	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+112]
  0193b	50		 push	 eax
  0193c	e8 00 00 00 00	 call	 _F

; 448  : 
; 449  : 	subkeys->y200 = blocktmp[0]; subkeys->y201 = blocktmp[1]; subkeys->y210 = blocktmp[2]; subkeys->y211 = blocktmp[3];

  01941	8b b5 a4 fd ff
	ff		 mov	 esi, DWORD PTR _subkeys$GSCopy$1$[ebp]
  01947	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp]
  0194d	89 46 20	 mov	 DWORD PTR [esi+32], eax
  01950	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  01956	89 46 24	 mov	 DWORD PTR [esi+36], eax
  01959	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  0195f	89 46 28	 mov	 DWORD PTR [esi+40], eax
  01962	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  01968	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 450  : 	subkeys->y300 = blocktmp2[0]; subkeys->y301 = blocktmp2[1]; subkeys->y310 = blocktmp2[2]; subkeys->y311 = blocktmp2[3];

  0196b	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  01971	89 46 30	 mov	 DWORD PTR [esi+48], eax
  01974	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  0197a	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0197d	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  01983	89 46 38	 mov	 DWORD PTR [esi+56], eax
  01986	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  0198c	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 451  : 
; 452  : 	/* Compute subkeys K_5 and K_6  */
; 453  : 	F(c_values[ 8], blocktmp, blocktmp2); F(c_values[ 9], blocktmp, blocktmp2);

  0198f	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01995	50		 push	 eax
  01996	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  0199c	50		 push	 eax
  0199d	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+128]
  019a3	50		 push	 eax
  019a4	e8 00 00 00 00	 call	 _F
  019a9	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  019af	50		 push	 eax
  019b0	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  019b6	50		 push	 eax
  019b7	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+144]
  019bd	50		 push	 eax
  019be	e8 00 00 00 00	 call	 _F

; 454  : 	F(c_values[10], blocktmp, blocktmp2); F(c_values[11], blocktmp, blocktmp2);

  019c3	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  019c9	50		 push	 eax
  019ca	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  019d0	50		 push	 eax
  019d1	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+160]
  019d7	50		 push	 eax
  019d8	e8 00 00 00 00	 call	 _F
  019dd	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  019e3	50		 push	 eax
  019e4	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  019ea	50		 push	 eax
  019eb	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+176]
  019f1	50		 push	 eax
  019f2	e8 00 00 00 00	 call	 _F

; 455  : 	F(c_values[12], blocktmp, blocktmp2); F(c_values[13], blocktmp, blocktmp2);

  019f7	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  019fd	50		 push	 eax
  019fe	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01a04	50		 push	 eax
  01a05	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+192]
  01a0b	50		 push	 eax
  01a0c	e8 00 00 00 00	 call	 _F
  01a11	83 c4 48	 add	 esp, 72			; 00000048H
  01a14	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01a1a	50		 push	 eax
  01a1b	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01a21	50		 push	 eax
  01a22	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+208]
  01a28	50		 push	 eax
  01a29	e8 00 00 00 00	 call	 _F

; 456  : 	F(c_values[14], blocktmp, blocktmp2); F(c_values[15], blocktmp, blocktmp2);

  01a2e	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01a34	50		 push	 eax
  01a35	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01a3b	50		 push	 eax
  01a3c	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+224]
  01a42	50		 push	 eax
  01a43	e8 00 00 00 00	 call	 _F
  01a48	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01a4e	50		 push	 eax
  01a4f	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01a55	50		 push	 eax
  01a56	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+240]
  01a5c	50		 push	 eax
  01a5d	e8 00 00 00 00	 call	 _F

; 457  : 
; 458  : 	subkeys->y400 = blocktmp[0]; subkeys->y401 = blocktmp[1]; subkeys->y410 = blocktmp[2]; subkeys->y411 = blocktmp[3];

  01a62	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp]
  01a68	89 46 40	 mov	 DWORD PTR [esi+64], eax
  01a6b	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  01a71	89 46 44	 mov	 DWORD PTR [esi+68], eax
  01a74	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  01a7a	89 46 48	 mov	 DWORD PTR [esi+72], eax
  01a7d	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  01a83	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 459  : 	subkeys->y500 = blocktmp2[0]; subkeys->y501 = blocktmp2[1]; subkeys->y510 = blocktmp2[2]; subkeys->y511 = blocktmp2[3];

  01a86	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  01a8c	89 46 50	 mov	 DWORD PTR [esi+80], eax
  01a8f	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  01a95	89 46 54	 mov	 DWORD PTR [esi+84], eax
  01a98	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  01a9e	89 46 58	 mov	 DWORD PTR [esi+88], eax
  01aa1	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  01aa7	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 460  : 
; 461  : 	/* Compute subkeys K_7 and K_8  */
; 462  : 	F(c_values[16], blocktmp, blocktmp2); F(c_values[17], blocktmp, blocktmp2);

  01aaa	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01ab0	50		 push	 eax
  01ab1	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01ab7	50		 push	 eax
  01ab8	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+256]
  01abe	50		 push	 eax
  01abf	e8 00 00 00 00	 call	 _F
  01ac4	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01aca	50		 push	 eax
  01acb	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01ad1	50		 push	 eax
  01ad2	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+272]
  01ad8	50		 push	 eax
  01ad9	e8 00 00 00 00	 call	 _F

; 463  : 	F(c_values[18], blocktmp, blocktmp2); F(c_values[19], blocktmp, blocktmp2);

  01ade	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01ae4	50		 push	 eax
  01ae5	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01aeb	50		 push	 eax
  01aec	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+288]
  01af2	50		 push	 eax
  01af3	e8 00 00 00 00	 call	 _F
  01af8	83 c4 48	 add	 esp, 72			; 00000048H
  01afb	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01b01	50		 push	 eax
  01b02	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01b08	50		 push	 eax
  01b09	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+304]
  01b0f	50		 push	 eax
  01b10	e8 00 00 00 00	 call	 _F

; 464  : 	F(c_values[20], blocktmp, blocktmp2); F(c_values[21], blocktmp, blocktmp2);

  01b15	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01b1b	50		 push	 eax
  01b1c	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01b22	50		 push	 eax
  01b23	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+320]
  01b29	50		 push	 eax
  01b2a	e8 00 00 00 00	 call	 _F
  01b2f	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01b35	50		 push	 eax
  01b36	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01b3c	50		 push	 eax
  01b3d	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+336]
  01b43	50		 push	 eax
  01b44	e8 00 00 00 00	 call	 _F

; 465  : 	F(c_values[22], blocktmp, blocktmp2); F(c_values[23], blocktmp, blocktmp2);

  01b49	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01b4f	50		 push	 eax
  01b50	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01b56	50		 push	 eax
  01b57	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+352]
  01b5d	50		 push	 eax
  01b5e	e8 00 00 00 00	 call	 _F
  01b63	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01b69	50		 push	 eax
  01b6a	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01b70	50		 push	 eax
  01b71	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+368]
  01b77	50		 push	 eax
  01b78	e8 00 00 00 00	 call	 _F

; 466  : 
; 467  : 	subkeys->y600 = blocktmp[0]; subkeys->y601 = blocktmp[1]; subkeys->y610 = blocktmp[2]; subkeys->y611 = blocktmp[3];

  01b7d	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp]
  01b83	89 46 60	 mov	 DWORD PTR [esi+96], eax
  01b86	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  01b8c	89 46 64	 mov	 DWORD PTR [esi+100], eax
  01b8f	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  01b95	89 46 68	 mov	 DWORD PTR [esi+104], eax
  01b98	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  01b9e	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 468  : 	subkeys->y700 = blocktmp2[0]; subkeys->y701 = blocktmp2[1]; subkeys->y710 = blocktmp2[2]; subkeys->y711 = blocktmp2[3];

  01ba1	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  01ba7	89 46 70	 mov	 DWORD PTR [esi+112], eax
  01baa	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  01bb0	89 46 74	 mov	 DWORD PTR [esi+116], eax
  01bb3	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  01bb9	89 46 78	 mov	 DWORD PTR [esi+120], eax
  01bbc	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  01bc2	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 469  : 
; 470  : 	/* Compute subkeys K_9 and K_{10} */
; 471  : 	F(c_values[24], blocktmp, blocktmp2); F(c_values[25], blocktmp, blocktmp2);

  01bc5	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01bcb	50		 push	 eax
  01bcc	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01bd2	50		 push	 eax
  01bd3	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _c_values$[ebp+384]
  01bd9	50		 push	 eax
  01bda	e8 00 00 00 00	 call	 _F
  01bdf	83 c4 48	 add	 esp, 72			; 00000048H
  01be2	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01be8	50		 push	 eax
  01be9	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01bef	50		 push	 eax
  01bf0	8d 45 8c	 lea	 eax, DWORD PTR _c_values$[ebp+400]
  01bf3	50		 push	 eax
  01bf4	e8 00 00 00 00	 call	 _F

; 472  : 	F(c_values[26], blocktmp, blocktmp2); F(c_values[27], blocktmp, blocktmp2);

  01bf9	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01bff	50		 push	 eax
  01c00	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01c06	50		 push	 eax
  01c07	8d 45 9c	 lea	 eax, DWORD PTR _c_values$[ebp+416]
  01c0a	50		 push	 eax
  01c0b	e8 00 00 00 00	 call	 _F
  01c10	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01c16	50		 push	 eax
  01c17	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01c1d	50		 push	 eax
  01c1e	8d 45 ac	 lea	 eax, DWORD PTR _c_values$[ebp+432]
  01c21	50		 push	 eax
  01c22	e8 00 00 00 00	 call	 _F

; 473  : 	F(c_values[28], blocktmp, blocktmp2); F(c_values[29], blocktmp, blocktmp2);

  01c27	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01c2d	50		 push	 eax
  01c2e	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01c34	50		 push	 eax
  01c35	8d 45 bc	 lea	 eax, DWORD PTR _c_values$[ebp+448]
  01c38	50		 push	 eax
  01c39	e8 00 00 00 00	 call	 _F
  01c3e	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01c44	50		 push	 eax
  01c45	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01c4b	50		 push	 eax
  01c4c	8d 45 cc	 lea	 eax, DWORD PTR _c_values$[ebp+464]
  01c4f	50		 push	 eax
  01c50	e8 00 00 00 00	 call	 _F

; 474  : 	F(c_values[30], blocktmp, blocktmp2); F(c_values[31], blocktmp, blocktmp2);

  01c55	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01c5b	50		 push	 eax
  01c5c	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01c62	50		 push	 eax
  01c63	8d 45 dc	 lea	 eax, DWORD PTR _c_values$[ebp+480]
  01c66	50		 push	 eax
  01c67	e8 00 00 00 00	 call	 _F
  01c6c	83 c4 48	 add	 esp, 72			; 00000048H
  01c6f	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp2$[ebp]
  01c75	50		 push	 eax
  01c76	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _blocktmp$[ebp]
  01c7c	50		 push	 eax
  01c7d	8d 45 ec	 lea	 eax, DWORD PTR _c_values$[ebp+496]
  01c80	50		 push	 eax
  01c81	e8 00 00 00 00	 call	 _F

; 475  : 
; 476  : 	subkeys->y800 = blocktmp[0]; subkeys->y801 = blocktmp[1]; subkeys->y810 = blocktmp[2]; subkeys->y811 = blocktmp[3];

  01c86	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp]
  01c8c	83 c4 0c	 add	 esp, 12			; 0000000cH
  01c8f	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  01c95	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+4]
  01c9b	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  01ca1	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+8]
  01ca7	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  01cad	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp$[ebp+12]
  01cb3	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 477  : 	subkeys->y900 = blocktmp2[0]; subkeys->y901 = blocktmp2[1]; subkeys->y910 = blocktmp2[2]; subkeys->y911 = blocktmp2[3];

  01cb9	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp]
  01cbf	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  01cc5	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+4]
  01ccb	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  01cd1	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+8]
  01cd7	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  01cdd	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _blocktmp2$[ebp+12]
  01ce3	5f		 pop	 edi
  01ce4	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  01cea	5e		 pop	 esi
  01ceb	5b		 pop	 ebx

; 478  : 
; 479  : }

  01cec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01cef	33 cd		 xor	 ecx, ebp
  01cf1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01cf6	8b e5		 mov	 esp, ebp
  01cf8	5d		 pop	 ebp
  01cf9	c3		 ret	 0
_grasshopper_set_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _F
_TEXT	SEGMENT
_tmpblock$ = -16					; size = 16
_k$ = 8							; size = 4
_block1$ = 12						; size = 4
_block0$ = 16						; size = 4
_F	PROC						; COMDAT

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _block1$[ebp]
  0000d	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]

; 369  : 	unsigned long tmpblock[4];
; 370  : 
; 371  : 	/* Bitwise xor of k with block2 */
; 372  : 	tmpblock[0] = (block1[0] ^ k[0]);
; 373  : 	tmpblock[1] = (block1[1] ^ k[1]);
; 374  : 	tmpblock[2] = (block1[2] ^ k[2]);
; 375  : 	tmpblock[3] = (block1[3] ^ k[3]);
; 376  : 
; 377  : 	/* Apply S conversion function  */
; 378  : 	S(tmpblock);

  00010	8d 45 f0	 lea	 eax, DWORD PTR _tmpblock$[ebp]
  00013	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00016	50		 push	 eax
  00017	66 0f ef c8	 pxor	 xmm1, xmm0
  0001b	0f 11 4d f0	 movups	 XMMWORD PTR _tmpblock$[ebp], xmm1
  0001f	e8 00 00 00 00	 call	 _S

; 379  : 
; 380  : 	/* Apply L conversion function  */
; 381  : 	L(tmpblock);

  00024	8d 45 f0	 lea	 eax, DWORD PTR _tmpblock$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _L
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR _block0$[ebp]
  00030	83 c4 08	 add	 esp, 8

; 382  : 
; 383  : 	/* Add a0 to the the result     */
; 384  : 	tmpblock[0] ^= block0[0];
; 385  : 	tmpblock[1] ^= block0[1];
; 386  : 	tmpblock[2] ^= block0[2];
; 387  : 	tmpblock[3] ^= block0[3];
; 388  : 
; 389  : 	/* Update the results           */
; 390  : 	block0[0] = block1[0];

  00033	8b 06		 mov	 eax, DWORD PTR [esi]
  00035	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _tmpblock$[ebp]
  00039	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00041	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00044	66 0f ef c8	 pxor	 xmm1, xmm0
  00048	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 391  : 	block0[1] = block1[1];
; 392  : 	block0[2] = block1[2];
; 393  : 	block0[3] = block1[3];
; 394  : 
; 395  : 	block1[0] = tmpblock[0];

  0004b	0f 28 c1	 movaps	 xmm0, xmm1
  0004e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00051	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00054	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00057	66 0f 7e 0e	 movd	 DWORD PTR [esi], xmm1
  0005b	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00060	66 0f 7e 46 04	 movd	 DWORD PTR [esi+4], xmm0
  00065	0f 28 c1	 movaps	 xmm0, xmm1
  00068	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0006d	66 0f 7e 46 08	 movd	 DWORD PTR [esi+8], xmm0
  00072	66 0f 73 d9 0c	 psrldq	 xmm1, 12		; 0000000cH
  00077	66 0f 7e 4e 0c	 movd	 DWORD PTR [esi+12], xmm1
  0007c	5e		 pop	 esi

; 396  : 	block1[1] = tmpblock[1];
; 397  : 	block1[2] = tmpblock[2];
; 398  : 	block1[3] = tmpblock[3];
; 399  : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_F	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _L_inv
_TEXT	SEGMENT
_block$ = 8						; size = 4
_L_inv	PROC						; COMDAT

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 351  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00004	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 _R_inv
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _R_inv
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _R_inv
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _R_inv

; 352  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _R_inv
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _R_inv
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _R_inv
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _R_inv

; 353  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _R_inv
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _R_inv
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _R_inv
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _R_inv

; 354  : 	R_inv(block); R_inv(block); R_inv(block); R_inv(block);

  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _R_inv
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _R_inv
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _R_inv
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _R_inv
  00067	83 c4 40	 add	 esp, 64			; 00000040H
  0006a	5e		 pop	 esi

; 355  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_L_inv	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _L
_TEXT	SEGMENT
_block$ = 8						; size = 4
_L	PROC						; COMDAT

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 335  : 	R(block); R(block); R(block); R(block);

  00004	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 _R
  0000d	56		 push	 esi
  0000e	e8 00 00 00 00	 call	 _R
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _R
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 _R

; 336  : 	R(block); R(block); R(block); R(block);

  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _R
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 _R
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 _R
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _R

; 337  : 	R(block); R(block); R(block); R(block);

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _R
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _R
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 _R
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _R

; 338  : 	R(block); R(block); R(block); R(block);

  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _R
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 _R
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 _R
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 _R
  00067	83 c4 40	 add	 esp, 64			; 00000040H
  0006a	5e		 pop	 esi

; 339  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_L	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _R_inv
_TEXT	SEGMENT
_valtmp$ = -20						; size = 16
_valtmp$1$ = -4						; size = 4
_block$ = 8						; size = 4
_R_inv	PROC						; COMDAT

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 298  : 	unsigned long valtmp[4];
; 299  : 	unsigned char val;
; 300  : 
; 301  : 	//valtmp[0]  = (block[0] << 8);
; 302  : 	//valtmp[0] |= ((block[1] >> 56) & 0xFF);
; 303  : 	valtmp[0] = block[0] << 8;
; 304  : 	valtmp[0] |= (block[1] >> 24) & 0xFF;

  00006	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 02		 mov	 eax, DWORD PTR [edx]
  0000e	0f b6 4a 07	 movzx	 ecx, BYTE PTR [edx+7]

; 305  : 	valtmp[1] = block[1] << 8;
; 306  : 	valtmp[1] |= (block[2] >> 24) & 0xFF;

  00012	0f b6 5a 0b	 movzx	 ebx, BYTE PTR [edx+11]

; 307  : 
; 308  : 	//valtmp[1]  = (block[1] << 8);
; 309  : 	//valtmp[1] |= ((block[0] >> 56) & 0xFF);
; 310  : 
; 311  : 	valtmp[2] = block[2] << 8;
; 312  : 	valtmp[2] |= (block[3] >> 24) & 0xFF;

  00016	0f b6 7a 0f	 movzx	 edi, BYTE PTR [edx+15]

; 313  : 	valtmp[3] = block[3] << 8;
; 314  : 	valtmp[3] |= (block[0] >> 24) & 0xFF;

  0001a	0f b6 72 03	 movzx	 esi, BYTE PTR [edx+3]
  0001e	c1 e0 08	 shl	 eax, 8
  00021	0b c8		 or	 ecx, eax
  00023	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00026	c1 e0 08	 shl	 eax, 8
  00029	0b d8		 or	 ebx, eax
  0002b	89 4d fc	 mov	 DWORD PTR _valtmp$1$[ebp], ecx
  0002e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00031	c1 e0 08	 shl	 eax, 8
  00034	0b f8		 or	 edi, eax
  00036	89 4d ec	 mov	 DWORD PTR _valtmp$[ebp], ecx
  00039	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003c	c1 e0 08	 shl	 eax, 8
  0003f	0b f0		 or	 esi, eax
  00041	89 5d f0	 mov	 DWORD PTR _valtmp$[ebp+4], ebx

; 315  : 
; 316  : 	val = ll(valtmp);

  00044	8d 45 ec	 lea	 eax, DWORD PTR _valtmp$[ebp]
  00047	89 7d f4	 mov	 DWORD PTR _valtmp$[ebp+8], edi
  0004a	50		 push	 eax
  0004b	89 75 f8	 mov	 DWORD PTR _valtmp$[ebp+12], esi
  0004e	e8 00 00 00 00	 call	 _ll

; 317  : 
; 318  : 	block[0]  = valtmp[0];

  00053	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00056	83 c4 04	 add	 esp, 4
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _valtmp$1$[ebp]

; 319  : 	block[1] = valtmp[1];
; 320  : 	block[2]  = (valtmp[2] & 0xFFFFFFFFL);
; 321  : 	block[3] = valtmp[3] & 0xFFFFFF00L;

  0005c	81 e6 00 ff ff
	ff		 and	 esi, -256		; ffffff00H

; 322  : 	block[3] |= val;

  00062	0f b6 c0	 movzx	 eax, al
  00065	0b f0		 or	 esi, eax
  00067	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  0006a	5f		 pop	 edi
  0006b	89 72 0c	 mov	 DWORD PTR [edx+12], esi
  0006e	5e		 pop	 esi
  0006f	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  00072	89 0a		 mov	 DWORD PTR [edx], ecx
  00074	5b		 pop	 ebx

; 323  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_R_inv	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _R
_TEXT	SEGMENT
_valtmp$ = -16						; size = 16
_block$ = 8						; size = 4
_R	PROC						; COMDAT

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 261  : 	unsigned long valtmp[4];
; 262  : 	unsigned char val;
; 263  : 
; 264  : 	valtmp[0] = block[0];

  00009	8b 7d 08	 mov	 edi, DWORD PTR _block$[ebp]
  0000c	8b 07		 mov	 eax, DWORD PTR [edi]
  0000e	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00011	89 45 f0	 mov	 DWORD PTR _valtmp$[ebp], eax
  00014	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00017	89 45 f4	 mov	 DWORD PTR _valtmp$[ebp+4], eax
  0001a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001d	89 45 f8	 mov	 DWORD PTR _valtmp$[ebp+8], eax

; 265  : 	valtmp[1] = block[1];
; 266  : 	valtmp[2] = block[2];
; 267  : 	valtmp[3] = block[3];
; 268  : 	val = ll(valtmp);

  00020	8d 45 f0	 lea	 eax, DWORD PTR _valtmp$[ebp]
  00023	50		 push	 eax
  00024	89 75 fc	 mov	 DWORD PTR _valtmp$[ebp+12], esi
  00027	e8 00 00 00 00	 call	 _ll

; 269  : 
; 270  : 	//block[1] >>= 8;
; 271  : 	//block[1]  |= (((block[0]) & 0xFF) << 56);
; 272  : 	block[3] >>= 8;

  0002c	c1 ee 08	 shr	 esi, 8
  0002f	8a d8		 mov	 bl, al
  00031	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  00034	83 c4 04	 add	 esp, 4

; 273  : 	block[3] |= (block[2] & 0xFF) << 24;

  00037	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0003a	c1 e1 18	 shl	 ecx, 24			; 00000018H
  0003d	0b ce		 or	 ecx, esi
  0003f	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx

; 274  : 	block[2] >>= 8;
; 275  : 	block[2] |= (block[1] & 0xFF) << 24;

  00042	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00045	8b c2		 mov	 eax, edx
  00047	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0004d	c1 e9 08	 shr	 ecx, 8
  00050	0b c8		 or	 ecx, eax

; 276  : 	
; 277  : 
; 278  : //	block[0] >>= 8;
; 279  : //	block[0]  |= ((unsigned long)(val) << 56);
; 280  : 	block[1] >>= 8;

  00052	c1 ea 08	 shr	 edx, 8
  00055	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 281  : 	block[1] |= (block[0] & 0xFF) << 24;

  00058	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0005a	8b c1		 mov	 eax, ecx
  0005c	c1 e0 18	 shl	 eax, 24			; 00000018H
  0005f	0b c2		 or	 eax, edx

; 282  : 	block[0] >>= 8;

  00061	c1 e9 08	 shr	 ecx, 8
  00064	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 283  : 	block[0] |= ((unsigned long int)(val & 0xFF) << 24);

  00067	0f b6 c3	 movzx	 eax, bl
  0006a	c1 e0 18	 shl	 eax, 24			; 00000018H
  0006d	0b c1		 or	 eax, ecx
  0006f	89 07		 mov	 DWORD PTR [edi], eax
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 284  : 
; 285  : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_R	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _ll
_TEXT	SEGMENT
_block$ = 8						; size = 4
_ll	PROC						; COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 226  : 	unsigned char val;
; 227  : 
; 228  : 	val  =  mult_mod_poly[4][(block[0] >> 24) & 0xFF];
; 229  : 	val ^=  mult_mod_poly[2][(block[0] >> 16) & 0xFF];
; 230  : 	val ^=  mult_mod_poly[3][(block[0] >>  8) & 0xFF];
; 231  : 	val ^=  mult_mod_poly[1][(block[0] >>  0) & 0xFF];
; 232  : 
; 233  : 	val ^=  mult_mod_poly[6][(block[1] >> 24) & 0xFF];
; 234  : 	val ^=  mult_mod_poly[5][(block[1] >> 16) & 0xFF];
; 235  : 	val ^=  mult_mod_poly[0][(block[1] >>  8) & 0xFF];
; 236  : 	val ^=  mult_mod_poly[7][(block[1] >>  0) & 0xFF];
; 237  : 
; 238  : 	val ^=  mult_mod_poly[0][(block[2] >> 24) & 0xFF];
; 239  : 	val ^=  mult_mod_poly[5][(block[2] >> 16) & 0xFF];
; 240  : 	val ^=  mult_mod_poly[6][(block[2] >>  8) & 0xFF];
; 241  : 	val ^=  mult_mod_poly[1][(block[2] >>  0) & 0xFF];

  00004	8b 75 08	 mov	 esi, DWORD PTR _block$[ebp]
  00007	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  0000b	0f b6 4e 04	 movzx	 ecx, BYTE PTR [esi+4]

; 242  : 
; 243  : 	val ^=  mult_mod_poly[3][(block[3] >> 24) & 0xFF];
; 244  : 	val ^=  mult_mod_poly[2][(block[3] >> 16) & 0xFF];
; 245  : 	val ^=  mult_mod_poly[4][(block[3] >>  8) & 0xFF];
; 246  : 	val ^=  mult_mod_poly[0][(block[3] >>  0) & 0xFF];

  0000f	8a 90 00 01 00
	00		 mov	 dl, BYTE PTR _mult_mod_poly[eax+256]
  00015	32 91 00 07 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[ecx+1792]
  0001b	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]

; 247  : 
; 248  : 	return(val);

  0001f	0f b6 4e 02	 movzx	 ecx, BYTE PTR [esi+2]
  00023	32 90 00 00 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax]
  00029	0f b6 46 0e	 movzx	 eax, BYTE PTR [esi+14]
  0002d	32 90 00 02 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+512]
  00033	0f b6 46 0f	 movzx	 eax, BYTE PTR [esi+15]
  00037	32 90 00 03 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+768]
  0003d	0f b6 46 0d	 movzx	 eax, BYTE PTR [esi+13]
  00041	32 90 00 04 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+1024]
  00047	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  0004b	32 90 00 05 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+1280]
  00051	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  00055	32 90 00 05 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+1280]
  0005b	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  0005f	32 90 00 06 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+1536]
  00065	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  00069	32 90 00 00 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax]
  0006f	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  00073	32 90 00 06 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[eax+1536]
  00079	32 91 00 02 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[ecx+512]
  0007f	0f b6 4e 03	 movzx	 ecx, BYTE PTR [esi+3]
  00083	32 91 00 04 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[ecx+1024]
  00089	0f b6 4e 01	 movzx	 ecx, BYTE PTR [esi+1]
  0008d	32 91 00 03 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[ecx+768]
  00093	0f b6 4e 05	 movzx	 ecx, BYTE PTR [esi+5]
  00097	32 91 00 00 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[ecx]
  0009d	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  000a0	5e		 pop	 esi
  000a1	32 91 00 01 00
	00		 xor	 dl, BYTE PTR _mult_mod_poly[ecx+256]
  000a7	8a c2		 mov	 al, dl

; 249  : }

  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_ll	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _S_inv
_TEXT	SEGMENT
_block$ = 8						; size = 4
_S_inv	PROC						; COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 185  : 	unsigned long valtmp;
; 186  : 
; 187  : 	valtmp  = ((unsigned long)(pi_inv[(block[0] >> 24) & 0xFF]) << 24);
; 188  : 	valtmp |= ((unsigned long)(pi_inv[(block[0] >> 16) & 0xFF]) << 16);
; 189  : 	valtmp |= ((unsigned long)(pi_inv[(block[0] >>  8) & 0xFF]) <<  8);
; 190  : 	valtmp |=  (unsigned long)(pi_inv[ block[0] & 0xFF]);
; 191  : 
; 192  : 	block[0] = valtmp;

  00003	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00006	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  0000a	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  00011	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00015	c1 e1 08	 shl	 ecx, 8
  00018	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  0001f	0b c8		 or	 ecx, eax
  00021	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00025	c1 e1 08	 shl	 ecx, 8
  00028	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  0002f	0b c8		 or	 ecx, eax
  00031	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00034	c1 e1 08	 shl	 ecx, 8
  00037	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  0003e	0b c8		 or	 ecx, eax

; 193  : 
; 194  : 	valtmp  = ((unsigned long)(pi_inv[(block[1] >> 24) & 0xFF]) << 24);
; 195  : 	valtmp |= ((unsigned long)(pi_inv[(block[1] >> 16) & 0xFF]) << 16);
; 196  : 	valtmp |= ((unsigned long)(pi_inv[(block[1] >>  8) & 0xFF]) <<  8);
; 197  : 	valtmp |=  (unsigned long)(pi_inv[block[1] & 0xFF]);
; 198  : 
; 199  : 	block[1] = valtmp;

  00040	0f b6 42 07	 movzx	 eax, BYTE PTR [edx+7]
  00044	89 0a		 mov	 DWORD PTR [edx], ecx
  00046	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  0004d	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  00051	c1 e1 08	 shl	 ecx, 8
  00054	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  0005b	0b c8		 or	 ecx, eax
  0005d	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  00061	c1 e1 08	 shl	 ecx, 8
  00064	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  0006b	0b c8		 or	 ecx, eax
  0006d	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00071	c1 e1 08	 shl	 ecx, 8
  00074	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  0007b	0b c8		 or	 ecx, eax

; 200  : 
; 201  : 	valtmp  = ((unsigned long)(pi_inv[(block[2] >> 24) & 0xFF]) << 24);
; 202  : 	valtmp |= ((unsigned long)(pi_inv[(block[2] >> 16) & 0xFF]) << 16);
; 203  : 	valtmp |= ((unsigned long)(pi_inv[(block[2] >>  8) & 0xFF]) <<  8);
; 204  : 	valtmp |=  (unsigned long)(pi_inv[block[2] & 0xFF]);
; 205  : 	
; 206  : 	block[2] = valtmp;

  0007d	0f b6 42 0b	 movzx	 eax, BYTE PTR [edx+11]
  00081	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00084	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  0008b	0f b6 42 0a	 movzx	 eax, BYTE PTR [edx+10]
  0008f	c1 e1 08	 shl	 ecx, 8
  00092	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  00099	0b c8		 or	 ecx, eax
  0009b	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  0009f	c1 e1 08	 shl	 ecx, 8
  000a2	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  000a9	0b c8		 or	 ecx, eax
  000ab	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  000af	c1 e1 08	 shl	 ecx, 8
  000b2	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  000b9	0b c8		 or	 ecx, eax

; 207  : 
; 208  : 	valtmp  = ((unsigned long)(pi_inv[(block[3] >> 24) & 0xFF]) << 24);
; 209  : 	valtmp |= ((unsigned long)(pi_inv[(block[3] >> 16) & 0xFF]) << 16);
; 210  : 	valtmp |= ((unsigned long)(pi_inv[(block[3] >>  8) & 0xFF]) <<  8);
; 211  : 	valtmp |=  (unsigned long)(pi_inv[ block[3] & 0xFF]);
; 212  : 
; 213  : 	block[3] = valtmp;

  000bb	0f b6 42 0f	 movzx	 eax, BYTE PTR [edx+15]
  000bf	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000c2	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi_inv[eax]
  000c9	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  000cd	c1 e1 08	 shl	 ecx, 8
  000d0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  000d7	0b c8		 or	 ecx, eax
  000d9	0f b6 42 0d	 movzx	 eax, BYTE PTR [edx+13]
  000dd	c1 e1 08	 shl	 ecx, 8
  000e0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  000e7	0b c8		 or	 ecx, eax
  000e9	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  000ed	c1 e1 08	 shl	 ecx, 8
  000f0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi_inv[eax]
  000f7	0b c8		 or	 ecx, eax
  000f9	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 214  : }

  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_S_inv	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\alexis\documents\finalgostcrypt\sources_gostcrypt_windows_1.3.1\crypto\grasshoppercipher.c
;	COMDAT _S
_TEXT	SEGMENT
_block$ = 8						; size = 4
_S	PROC						; COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  : 	unsigned long valtmp;
; 145  : 
; 146  : 	valtmp  = ((unsigned long)(pi[(block[0] >> 24) & 0xFF]) << 24);
; 147  : 	valtmp |= ((unsigned long)(pi[(block[0] >> 16) & 0xFF]) << 16);
; 148  : 	valtmp |= ((unsigned long)(pi[(block[0] >>  8) & 0xFF]) <<  8);
; 149  : 	valtmp |= ((unsigned long)(pi[(block[0] >>  0) & 0xFF]) <<  0);
; 150  : 	block[0] = valtmp;

  00003	8b 55 08	 mov	 edx, DWORD PTR _block$[ebp]
  00006	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  0000a	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  00011	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00015	c1 e1 08	 shl	 ecx, 8
  00018	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  0001f	0b c8		 or	 ecx, eax
  00021	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00025	c1 e1 08	 shl	 ecx, 8
  00028	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  0002f	0b c8		 or	 ecx, eax
  00031	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00034	c1 e1 08	 shl	 ecx, 8
  00037	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  0003e	0b c8		 or	 ecx, eax

; 151  : 
; 152  : 	valtmp  = ((unsigned long)(pi[(block[1] >> 24) & 0xFF]) << 24);
; 153  : 	valtmp |= ((unsigned long)(pi[(block[1] >> 16) & 0xFF]) << 16);
; 154  : 	valtmp |= ((unsigned long)(pi[(block[1] >>  8) & 0xFF]) <<  8);
; 155  : 	valtmp |=  (unsigned long)(pi[ block[1] & 0xFF]);
; 156  : 
; 157  : 	block[1] = valtmp;

  00040	0f b6 42 07	 movzx	 eax, BYTE PTR [edx+7]
  00044	89 0a		 mov	 DWORD PTR [edx], ecx
  00046	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  0004d	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  00051	c1 e1 08	 shl	 ecx, 8
  00054	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  0005b	0b c8		 or	 ecx, eax
  0005d	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  00061	c1 e1 08	 shl	 ecx, 8
  00064	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  0006b	0b c8		 or	 ecx, eax
  0006d	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00071	c1 e1 08	 shl	 ecx, 8
  00074	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  0007b	0b c8		 or	 ecx, eax

; 158  : 
; 159  : 	valtmp  = ((unsigned long)(pi[(block[2] >> 24) & 0xFF]) << 24);
; 160  : 	valtmp |= ((unsigned long)(pi[(block[2] >> 16) & 0xFF]) << 16);
; 161  : 	valtmp |= ((unsigned long)(pi[(block[2] >>  8) & 0xFF]) <<  8);
; 162  : 	valtmp |=  (unsigned long)(pi[ block[2] & 0xFF]);
; 163  : 
; 164  : 	block[2] = valtmp;

  0007d	0f b6 42 0b	 movzx	 eax, BYTE PTR [edx+11]
  00081	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00084	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  0008b	0f b6 42 0a	 movzx	 eax, BYTE PTR [edx+10]
  0008f	c1 e1 08	 shl	 ecx, 8
  00092	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  00099	0b c8		 or	 ecx, eax
  0009b	0f b6 42 09	 movzx	 eax, BYTE PTR [edx+9]
  0009f	c1 e1 08	 shl	 ecx, 8
  000a2	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  000a9	0b c8		 or	 ecx, eax
  000ab	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  000af	c1 e1 08	 shl	 ecx, 8
  000b2	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  000b9	0b c8		 or	 ecx, eax

; 165  : 
; 166  : 	valtmp  = ((unsigned long)(pi[(block[3] >> 24) & 0xFF]) << 24);
; 167  : 	valtmp |= ((unsigned long)(pi[(block[3] >> 16) & 0xFF]) << 16);
; 168  : 	valtmp |= ((unsigned long)(pi[(block[3] >>  8) & 0xFF]) <<  8);
; 169  : 	valtmp |=  (unsigned long)(pi[ block[3] & 0xFF]);
; 170  : 
; 171  : 	block[3] = valtmp;

  000bb	0f b6 42 0f	 movzx	 eax, BYTE PTR [edx+15]
  000bf	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000c2	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _pi[eax]
  000c9	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  000cd	c1 e1 08	 shl	 ecx, 8
  000d0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  000d7	0b c8		 or	 ecx, eax
  000d9	0f b6 42 0d	 movzx	 eax, BYTE PTR [edx+13]
  000dd	c1 e1 08	 shl	 ecx, 8
  000e0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  000e7	0b c8		 or	 ecx, eax
  000e9	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  000ed	c1 e1 08	 shl	 ecx, 8
  000f0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _pi[eax]
  000f7	0b c8		 or	 ecx, eax
  000f9	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 172  : }

  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_S	ENDP
_TEXT	ENDS
END
